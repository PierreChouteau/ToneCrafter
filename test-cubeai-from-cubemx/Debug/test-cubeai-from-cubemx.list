
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000360c  080162b0  080162b0  000262b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198bc  080198bc  00030954  2**0
                  CONTENTS
  4 .ARM          00000008  080198bc  080198bc  000298bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198c4  080198c4  00030954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198c4  080198c4  000298c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198c8  080198c8  000298c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000954  20000000  080198cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000954  0801a220  00030954  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001d24  0801a220  00031d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030954  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a548  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ee4  00000000  00000000  0006aecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00071db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002668  00000000  00000000  000746e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f40  00000000  00000000  00076d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035d88  00000000  00000000  000abc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012dc9e  00000000  00000000  000e1a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0020f6b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c324  00000000  00000000  0020f784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0021baa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0021bb74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000954 	.word	0x20000954
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016298 	.word	0x08016298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000958 	.word	0x20000958
 800020c:	08016298 	.word	0x08016298

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fda:	f3bf 8f4f 	dsb	sy
}
 8000fde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0b5b      	lsrs	r3, r3, #13
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001004:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCB_EnableDCache+0x84>)
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ef      	bne.n	8000ffc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e5      	bne.n	8000ff2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCB_EnableDCache+0x84>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SCB_EnableDCache+0x84>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	f5ad 6db6 	sub.w	sp, sp, #1456	; 0x5b0
 800105e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
  ai_error ai_err;
  ai_i32 nbatch;
  uint32_t timestamp;
  float y_val;
  float test = 0.0;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800106e:	6013      	str	r3, [r2, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle tonecrafter = AI_HANDLE_NULL;
 8001070:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 8001078:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800107c:	4ab2      	ldr	r2, [pc, #712]	; (8001348 <main+0x2f0>)
 800107e:	461c      	mov	r4, r3
 8001080:	4615      	mov	r5, r2
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108a:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 800108e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001092:	4aae      	ldr	r2, [pc, #696]	; (800134c <main+0x2f4>)
 8001094:	461c      	mov	r4, r3
 8001096:	4615      	mov	r5, r2
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010a0:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 80010a4:	463b      	mov	r3, r7
 80010a6:	4aaa      	ldr	r2, [pc, #680]	; (8001350 <main+0x2f8>)
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	463b      	mov	r3, r7
 80010ac:	2201      	movs	r2, #1
 80010ae:	809a      	strh	r2, [r3, #4]
 80010b0:	463b      	mov	r3, r7
 80010b2:	2201      	movs	r2, #1
 80010b4:	80da      	strh	r2, [r3, #6]
 80010b6:	463b      	mov	r3, r7
 80010b8:	2201      	movs	r2, #1
 80010ba:	811a      	strh	r2, [r3, #8]
 80010bc:	463b      	mov	r3, r7
 80010be:	f243 02e4 	movw	r2, #12516	; 0x30e4
 80010c2:	60da      	str	r2, [r3, #12]
    AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 80010c4:	f00e ffe0 	bl	8010088 <ai_tonecrafter_data_weights_get>
 80010c8:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80010ca:	463b      	mov	r3, r7
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	463b      	mov	r3, r7
 80010d6:	4a9f      	ldr	r2, [pc, #636]	; (8001354 <main+0x2fc>)
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	463b      	mov	r3, r7
 80010dc:	2201      	movs	r2, #1
 80010de:	839a      	strh	r2, [r3, #28]
 80010e0:	463b      	mov	r3, r7
 80010e2:	2201      	movs	r2, #1
 80010e4:	83da      	strh	r2, [r3, #30]
 80010e6:	463b      	mov	r3, r7
 80010e8:	2201      	movs	r2, #1
 80010ea:	841a      	strh	r2, [r3, #32]
 80010ec:	463b      	mov	r3, r7
 80010ee:	f44f 7244 	mov.w	r2, #784	; 0x310
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
 80010f4:	463b      	mov	r3, r7
 80010f6:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8001102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001106:	2201      	movs	r2, #1
 8001108:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800110a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001112:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 8001114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001118:	2201      	movs	r2, #1
 800111a:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800111c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001120:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001124:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001126:	f7ff ff2b 	bl	8000f80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800112a:	f7ff ff4f 	bl	8000fcc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f002 fa7c 	bl	800362a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f91f 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f001 f8e7 	bl	8002308 <MX_GPIO_Init>
  MX_ADC3_Init();
 800113a:	f000 f9db 	bl	80014f4 <MX_ADC3_Init>
  MX_CRC_Init();
 800113e:	f000 fa2b 	bl	8001598 <MX_CRC_Init>
  MX_DCMI_Init();
 8001142:	f000 fa4b 	bl	80015dc <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001146:	f000 fa7d 	bl	8001644 <MX_DMA2D_Init>
  // MX_ETH_Init();
  MX_FMC_Init();
 800114a:	f001 f88d 	bl	8002268 <MX_FMC_Init>
  MX_I2C1_Init();
 800114e:	f000 faab 	bl	80016a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001152:	f000 fae9 	bl	8001728 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001156:	f000 fb27 	bl	80017a8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800115a:	f000 fba7 	bl	80018ac <MX_QUADSPI_Init>
  MX_RTC_Init();
 800115e:	f000 fbd1 	bl	8001904 <MX_RTC_Init>
  MX_SAI2_Init();
 8001162:	f000 fc75 	bl	8001a50 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001166:	f000 fd2f 	bl	8001bc8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800116a:	f000 fd4d 	bl	8001c08 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800116e:	f000 fd7b 	bl	8001c68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001172:	f000 fe25 	bl	8001dc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001176:	f000 fe99 	bl	8001eac <MX_TIM3_Init>
  MX_TIM5_Init();
 800117a:	f000 ff0f 	bl	8001f9c <MX_TIM5_Init>
  MX_TIM8_Init();
 800117e:	f000 ff85 	bl	800208c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001182:	f000 ffd7 	bl	8002134 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001186:	f001 f80f 	bl	80021a8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800118a:	f001 f83d 	bl	8002208 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800118e:	f00c fa1d 	bl	800d5cc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001192:	f00e fb09 	bl	800f7a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

    // Start timer/counter
    HAL_TIM_Base_Start(&htim12);
 8001196:	4870      	ldr	r0, [pc, #448]	; (8001358 <main+0x300>)
 8001198:	f009 f876 	bl	800a288 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800119c:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80011a0:	496e      	ldr	r1, [pc, #440]	; (800135c <main+0x304>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f012 fc22 	bl	80139ec <siprintf>
 80011a8:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011ac:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	4869      	ldr	r0, [pc, #420]	; (8001360 <main+0x308>)
 80011ba:	f009 ffff 	bl	800b1bc <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_tonecrafter_create(&tonecrafter, AI_TONECRAFTER_DATA_CONFIG);
 80011be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e fef9 	bl	800ffbc <ai_tonecrafter_create>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if (ai_err.type != AI_ERROR_NONE)
 80011d0:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d011      	beq.n	80011fc <main+0x1a4>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80011d8:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80011dc:	4961      	ldr	r1, [pc, #388]	; (8001364 <main+0x30c>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f012 fc04 	bl	80139ec <siprintf>
 80011e4:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011e8:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	485a      	ldr	r0, [pc, #360]	; (8001360 <main+0x308>)
 80011f6:	f009 ffe1 	bl	800b1bc <HAL_UART_Transmit>
      while(1);
 80011fa:	e7fe      	b.n	80011fa <main+0x1a2>
    }

    // Initialize neural network
    if (!ai_tonecrafter_init(tonecrafter, &ai_params))
 80011fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	463a      	mov	r2, r7
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f00e feee 	bl	800ffe8 <ai_tonecrafter_init>
 800120c:	4603      	mov	r3, r0
 800120e:	f083 0301 	eor.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d011      	beq.n	800123c <main+0x1e4>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001218:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800121c:	4952      	ldr	r1, [pc, #328]	; (8001368 <main+0x310>)
 800121e:	4618      	mov	r0, r3
 8001220:	f012 fbe4 	bl	80139ec <siprintf>
 8001224:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001228:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800122c:	b29a      	uxth	r2, r3
 800122e:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	484a      	ldr	r0, [pc, #296]	; (8001360 <main+0x308>)
 8001236:	f009 ffc1 	bl	800b1bc <HAL_UART_Transmit>
      while(1);
 800123a:	e7fe      	b.n	800123a <main+0x1e2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800123c:	f00e fada 	bl	800f7f4 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		LED_Toggle();
 8001240:	f001 fa34 	bl	80026ac <LED_Toggle>
		HAL_Delay(500);
 8001244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001248:	f002 fa4c 	bl	80036e4 <HAL_Delay>

		  // Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8001252:	e022      	b.n	800129a <main+0x242>
		{
		  ((ai_float *)in_data)[i] = (ai_float)test;
 8001254:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800125e:	4413      	add	r3, r2
 8001260:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	601a      	str	r2, [r3, #0]
		  test += 0.1;
 8001268:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	f7ff f98b 	bl	8000588 <__aeabi_f2d>
 8001272:	a333      	add	r3, pc, #204	; (adr r3, 8001340 <main+0x2e8>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f828 	bl	80002cc <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcb0 	bl	8000be8 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800128e:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001290:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800129a:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800129e:	2b77      	cmp	r3, #119	; 0x77
 80012a0:	d9d8      	bls.n	8001254 <main+0x1fc>
		}

		// Get current timestamp
		timestamp = htim12.Instance->CNT;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <main+0x300>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598

		// Perform inference
		nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 80012ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00e fed3 	bl	8010066 <ai_tonecrafter_run>
 80012c0:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
		if (nbatch != 1) {
 80012c4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d010      	beq.n	80012ee <main+0x296>
		  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80012cc:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80012d0:	4926      	ldr	r1, [pc, #152]	; (800136c <main+0x314>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f012 fb8a 	bl	80139ec <siprintf>
 80012d8:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
		  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012dc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	481d      	ldr	r0, [pc, #116]	; (8001360 <main+0x308>)
 80012ea:	f009 ff67 	bl	800b1bc <HAL_UART_Transmit>
		}

		// Read output (predicted y) of neural network
		y_val = ((float *)out_data)[0];
 80012ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 80012f8:	6013      	str	r3, [r2, #0]

		// Print output of neural network along with inference time (microseconds)
		buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 80012fa:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f7ff f942 	bl	8000588 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4913      	ldr	r1, [pc, #76]	; (8001358 <main+0x300>)
 800130a:	6809      	ldr	r1, [r1, #0]
 800130c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800130e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8001312:	1a41      	subs	r1, r0, r1
 8001314:	f207 505c 	addw	r0, r7, #1372	; 0x55c
 8001318:	9100      	str	r1, [sp, #0]
 800131a:	4915      	ldr	r1, [pc, #84]	; (8001370 <main+0x318>)
 800131c:	f012 fb66 	bl	80139ec <siprintf>
 8001320:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
		HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001324:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8001328:	b29a      	uxth	r2, r3
 800132a:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <main+0x308>)
 8001332:	f009 ff43 	bl	800b1bc <HAL_UART_Transmit>

		// Wait before doing it again
		HAL_Delay(500);
 8001336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133a:	f002 f9d3 	bl	80036e4 <HAL_Delay>
		MX_USB_HOST_Process();
 800133e:	e77d      	b.n	800123c <main+0x1e4>
 8001340:	9999999a 	.word	0x9999999a
 8001344:	3fb99999 	.word	0x3fb99999
 8001348:	0801635c 	.word	0x0801635c
 800134c:	08016374 	.word	0x08016374
 8001350:	40040440 	.word	0x40040440
 8001354:	00040440 	.word	0x00040440
 8001358:	200010b8 	.word	0x200010b8
 800135c:	080162b0 	.word	0x080162b0
 8001360:	20000fa8 	.word	0x20000fa8
 8001364:	080162cc 	.word	0x080162cc
 8001368:	080162f4 	.word	0x080162f4
 800136c:	08016318 	.word	0x08016318
 8001370:	0801633c 	.word	0x0801633c

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0b4      	sub	sp, #208	; 0xd0
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800137e:	2230      	movs	r2, #48	; 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f011 fe06 	bl	8012f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2284      	movs	r2, #132	; 0x84
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f011 fdf7 	bl	8012f94 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013a6:	f005 fc99 	bl	8006cdc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <SystemClock_Config+0x174>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <SystemClock_Config+0x174>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <SystemClock_Config+0x174>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <SystemClock_Config+0x178>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a49      	ldr	r2, [pc, #292]	; (80014ec <SystemClock_Config+0x178>)
 80013c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <SystemClock_Config+0x178>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013da:	2309      	movs	r3, #9
 80013dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013fc:	2319      	movs	r3, #25
 80013fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001402:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001406:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001410:	2309      	movs	r3, #9
 8001412:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001416:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fd80 	bl	8006f20 <HAL_RCC_OscConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001426:	f001 f94b 	bl	80026c0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800142a:	f005 fc67 	bl	8006cfc <HAL_PWREx_EnableOverDrive>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001434:	f001 f944 	bl	80026c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800145a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800145e:	2106      	movs	r1, #6
 8001460:	4618      	mov	r0, r3
 8001462:	f006 f801 	bl	8007468 <HAL_RCC_ClockConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800146c:	f001 f928 	bl	80026c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <SystemClock_Config+0x17c>)
 8001472:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800147c:	2302      	movs	r3, #2
 800147e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001484:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001488:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800148a:	2305      	movs	r3, #5
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001492:	2303      	movs	r3, #3
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80014aa:	2300      	movs	r3, #0
 80014ac:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014ae:	2300      	movs	r3, #0
 80014b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80014b2:	2300      	movs	r3, #0
 80014b4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80014be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 f99f 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80014dc:	f001 f8f0 	bl	80026c0 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	37d0      	adds	r7, #208	; 0xd0
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000
 80014f0:	01b14868 	.word	0x01b14868

080014f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC3_Init+0x98>)
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_ADC3_Init+0x9c>)
 800150a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC3_Init+0x98>)
 800150e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001512:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_ADC3_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_ADC3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_ADC3_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_ADC3_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_ADC3_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_ADC3_Init+0x98>)
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <MX_ADC3_Init+0xa0>)
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_ADC3_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_ADC3_Init+0x98>)
 8001542:	2201      	movs	r2, #1
 8001544:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_ADC3_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_ADC3_Init+0x98>)
 8001550:	2201      	movs	r2, #1
 8001552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_ADC3_Init+0x98>)
 8001556:	f002 f8e9 	bl	800372c <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001560:	f001 f8ae 	bl	80026c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001564:	2304      	movs	r3, #4
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_ADC3_Init+0x98>)
 8001576:	f002 f91d 	bl	80037b4 <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001580:	f001 f89e 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000e20 	.word	0x20000e20
 8001590:	40012200 	.word	0x40012200
 8001594:	0f000001 	.word	0x0f000001

08001598 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_CRC_Init+0x3c>)
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <MX_CRC_Init+0x40>)
 80015a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_CRC_Init+0x3c>)
 80015c2:	f002 fc4d 	bl	8003e60 <HAL_CRC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015cc:	f001 f878 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000c38 	.word	0x20000c38
 80015d8:	40023000 	.word	0x40023000

080015dc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_DCMI_Init+0x60>)
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <MX_DCMI_Init+0x64>)
 80015e4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_DCMI_Init+0x60>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_DCMI_Init+0x60>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_DCMI_Init+0x60>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_DCMI_Init+0x60>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_DCMI_Init+0x60>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_DCMI_Init+0x60>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_DCMI_Init+0x60>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_DCMI_Init+0x60>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_DCMI_Init+0x60>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_DCMI_Init+0x60>)
 800161e:	2200      	movs	r2, #0
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_DCMI_Init+0x60>)
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_DCMI_Init+0x60>)
 800162a:	f002 fd03 	bl	8004034 <HAL_DCMI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001634:	f001 f844 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000e68 	.word	0x20000e68
 8001640:	50050000 	.word	0x50050000

08001644 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <MX_DMA2D_Init+0x60>)
 800164c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 800166e:	2200      	movs	r2, #0
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 800167a:	f002 fd55 	bl	8004128 <HAL_DMA2D_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001684:	f001 f81c 	bl	80026c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001688:	2101      	movs	r1, #1
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_DMA2D_Init+0x5c>)
 800168c:	f002 fea6 	bl	80043dc <HAL_DMA2D_ConfigLayer>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001696:	f001 f813 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000102c 	.word	0x2000102c
 80016a4:	4002b000 	.word	0x4002b000

080016a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_I2C1_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <MX_I2C1_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_I2C1_Init+0x74>)
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <MX_I2C1_Init+0x7c>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_I2C1_Init+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_I2C1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_I2C1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <MX_I2C1_Init+0x74>)
 80016e4:	f004 fe68 	bl	80063b8 <HAL_I2C_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ee:	f000 ffe7 	bl	80026c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <MX_I2C1_Init+0x74>)
 80016f6:	f004 feef 	bl	80064d8 <HAL_I2CEx_ConfigAnalogFilter>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001700:	f000 ffde 	bl	80026c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_I2C1_Init+0x74>)
 8001708:	f004 ff31 	bl	800656e <HAL_I2CEx_ConfigDigitalFilter>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001712:	f000 ffd5 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000bec 	.word	0x20000bec
 8001720:	40005400 	.word	0x40005400
 8001724:	00c0eaff 	.word	0x00c0eaff

08001728 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_I2C3_Init+0x74>)
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <MX_I2C3_Init+0x78>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_I2C3_Init+0x74>)
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <MX_I2C3_Init+0x7c>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_I2C3_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_I2C3_Init+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_I2C3_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_I2C3_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C3_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_I2C3_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C3_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <MX_I2C3_Init+0x74>)
 8001764:	f004 fe28 	bl	80063b8 <HAL_I2C_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800176e:	f000 ffa7 	bl	80026c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <MX_I2C3_Init+0x74>)
 8001776:	f004 feaf 	bl	80064d8 <HAL_I2CEx_ConfigAnalogFilter>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001780:	f000 ff9e 	bl	80026c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_I2C3_Init+0x74>)
 8001788:	f004 fef1 	bl	800656e <HAL_I2CEx_ConfigDigitalFilter>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001792:	f000 ff95 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a84 	.word	0x20000a84
 80017a0:	40005c00 	.word	0x40005c00
 80017a4:	00c0eaff 	.word	0x00c0eaff

080017a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2234      	movs	r2, #52	; 0x34
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f011 fbed 	bl	8012f94 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017bc:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <MX_LTDC_Init+0x100>)
 80017be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017da:	2228      	movs	r2, #40	; 0x28
 80017dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017de:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017e0:	2209      	movs	r2, #9
 80017e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017e6:	2235      	movs	r2, #53	; 0x35
 80017e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017ec:	220b      	movs	r2, #11
 80017ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017f0:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017f2:	f240 2215 	movw	r2, #533	; 0x215
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <MX_LTDC_Init+0xfc>)
 80017fa:	f240 121b 	movw	r2, #283	; 0x11b
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_LTDC_Init+0xfc>)
 8001802:	f240 2235 	movw	r2, #565	; 0x235
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <MX_LTDC_Init+0xfc>)
 800180a:	f240 121d 	movw	r2, #285	; 0x11d
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MX_LTDC_Init+0xfc>)
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <MX_LTDC_Init+0xfc>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_LTDC_Init+0xfc>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001828:	481e      	ldr	r0, [pc, #120]	; (80018a4 <MX_LTDC_Init+0xfc>)
 800182a:	f004 feed 	bl	8006608 <HAL_LTDC_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001834:	f000 ff44 	bl	80026c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800183c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001840:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001846:	f44f 7388 	mov.w	r3, #272	; 0x110
 800184a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800184c:	2302      	movs	r3, #2
 800184e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001858:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800185c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800185e:	2307      	movs	r3, #7
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001862:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001868:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800186e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_LTDC_Init+0xfc>)
 800188e:	f005 f84d 	bl	800692c <HAL_LTDC_ConfigLayer>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001898:	f000 ff12 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3738      	adds	r7, #56	; 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000d78 	.word	0x20000d78
 80018a8:	40016800 	.word	0x40016800

080018ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <MX_QUADSPI_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018be:	2204      	movs	r2, #4
 80018c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018c4:	2210      	movs	r2, #16
 80018c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018ca:	2218      	movs	r2, #24
 80018cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018d0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018d4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_QUADSPI_Init+0x50>)
 80018ea:	f005 fa57 	bl	8006d9c <HAL_QSPI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 fee4 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20001180 	.word	0x20001180
 8001900:	a0001000 	.word	0xa0001000

08001904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b092      	sub	sp, #72	; 0x48
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800190a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	222c      	movs	r2, #44	; 0x2c
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f011 fb34 	bl	8012f94 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800192c:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <MX_RTC_Init+0x144>)
 800192e:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <MX_RTC_Init+0x148>)
 8001930:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001932:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <MX_RTC_Init+0x144>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <MX_RTC_Init+0x144>)
 800193a:	227f      	movs	r2, #127	; 0x7f
 800193c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800193e:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <MX_RTC_Init+0x144>)
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <MX_RTC_Init+0x144>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <MX_RTC_Init+0x144>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <MX_RTC_Init+0x144>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001956:	483c      	ldr	r0, [pc, #240]	; (8001a48 <MX_RTC_Init+0x144>)
 8001958:	f006 fc90 	bl	800827c <HAL_RTC_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001962:	f000 fead 	bl	80026c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	482f      	ldr	r0, [pc, #188]	; (8001a48 <MX_RTC_Init+0x144>)
 800198a:	f006 fd09 	bl	80083a0 <HAL_RTC_SetTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001994:	f000 fe94 	bl	80026c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_RTC_Init+0x144>)
 80019ba:	f006 fdaf 	bl	800851c <HAL_RTC_SetDate>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019c4:	f000 fe7c 	bl	80026c0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2201      	movs	r2, #1
 80019fc:	4619      	mov	r1, r3
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <MX_RTC_Init+0x144>)
 8001a00:	f006 fe34 	bl	800866c <HAL_RTC_SetAlarm>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a0a:	f000 fe59 	bl	80026c0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	2201      	movs	r2, #1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <MX_RTC_Init+0x144>)
 8001a1c:	f006 fe26 	bl	800866c <HAL_RTC_SetAlarm>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001a26:	f000 fe4b 	bl	80026c0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_RTC_Init+0x144>)
 8001a30:	f006 ffa6 	bl	8008980 <HAL_RTCEx_SetTimeStamp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001a3a:	f000 fe41 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3748      	adds	r7, #72	; 0x48
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000f3c 	.word	0x20000f3c
 8001a4c:	40002800 	.word	0x40002800

08001a50 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001a54:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a56:	4a59      	ldr	r2, [pc, #356]	; (8001bbc <MX_SAI2_Init+0x16c>)
 8001a58:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a86:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001a98:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aa0:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aa6:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001aba:	2220      	movs	r2, #32
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ac0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ace:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ad2:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001ae8:	2205      	movs	r2, #5
 8001aea:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001aec:	4832      	ldr	r0, [pc, #200]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001aee:	f006 ff9d 	bl	8008a2c <HAL_SAI_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8001af8:	f000 fde2 	bl	80026c0 <Error_Handler>
  }
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001afe:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <MX_SAI2_Init+0x174>)
 8001b00:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b52:	2220      	movs	r2, #32
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b5c:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b66:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b80:	220a      	movs	r2, #10
 8001b82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b84:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001b86:	f006 ff51 	bl	8008a2c <HAL_SAI_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 8001b90:	f000 fd96 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_SAI2_Init+0x168>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ba2:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <MX_SAI2_Init+0x170>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bb2:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000b68 	.word	0x20000b68
 8001bbc:	40015c04 	.word	0x40015c04
 8001bc0:	20000a00 	.word	0x20000a00
 8001bc4:	40015c24 	.word	0x40015c24

08001bc8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001bce:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <MX_SDMMC1_SD_Init+0x3c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <MX_SDMMC1_SD_Init+0x38>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	20000c5c 	.word	0x20000c5c
 8001c04:	40012c00 	.word	0x40012c00

08001c08 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c0e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c12:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_SPDIFRX_Init+0x5c>)
 8001c52:	f008 fa65 	bl	800a120 <HAL_SPDIFRX_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c5c:	f000 fd30 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000b1c 	.word	0x20000b1c

08001c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b09a      	sub	sp, #104	; 0x68
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	222c      	movs	r2, #44	; 0x2c
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f011 f976 	bl	8012f94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001caa:	4a44      	ldr	r2, [pc, #272]	; (8001dbc <MX_TIM1_Init+0x154>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd4:	4838      	ldr	r0, [pc, #224]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cd6:	f008 fa7f 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ce0:	f000 fcee 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4831      	ldr	r0, [pc, #196]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cf2:	f008 fcab 	bl	800a64c <HAL_TIM_ConfigClockSource>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001cfc:	f000 fce0 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d00:	482d      	ldr	r0, [pc, #180]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d02:	f008 fb31 	bl	800a368 <HAL_TIM_PWM_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d0c:	f000 fcd8 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4825      	ldr	r0, [pc, #148]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d24:	f009 f8f0 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d2e:	f000 fcc7 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d32:	2360      	movs	r3, #96	; 0x60
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d58:	f008 fb68 	bl	800a42c <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d62:	f000 fcad 	bl	80026c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d9c:	f009 f942 	bl	800b024 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001da6:	f000 fc8b 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001dac:	f001 f944 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001db0:	bf00      	nop
 8001db2:	3768      	adds	r7, #104	; 0x68
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000f5c 	.word	0x20000f5c
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e1c:	f008 f9dc 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f000 fc4b 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e38:	f008 fc08 	bl	800a64c <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e42:	f000 fc3d 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e48:	f008 fa8e 	bl	800a368 <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e52:	f000 fc35 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e66:	f009 f84f 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e70:	f000 fc26 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	; 0x60
 8001e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e8c:	f008 face 	bl	800a42c <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e96:	f000 fc13 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e9c:	f001 f8cc 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001ea0:	bf00      	nop
 8001ea2:	3738      	adds	r7, #56	; 0x38
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000106c 	.word	0x2000106c

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	; 0x38
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ecc:	463b      	mov	r3, r7
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001ee0:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <MX_TIM3_Init+0xec>)
 8001ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef0:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f04:	4823      	ldr	r0, [pc, #140]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f06:	f008 f967 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f10:	f000 fbd6 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481c      	ldr	r0, [pc, #112]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f22:	f008 fb93 	bl	800a64c <HAL_TIM_ConfigClockSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f2c:	f000 fbc8 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f30:	4818      	ldr	r0, [pc, #96]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f32:	f008 fa19 	bl	800a368 <HAL_TIM_PWM_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f3c:	f000 fbc0 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4811      	ldr	r0, [pc, #68]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f50:	f008 ffda 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f5a:	f000 fbb1 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5e:	2360      	movs	r3, #96	; 0x60
 8001f60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f76:	f008 fa59 	bl	800a42c <HAL_TIM_PWM_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f80:	f000 fb9e 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <MX_TIM3_Init+0xe8>)
 8001f86:	f001 f857 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001f8a:	bf00      	nop
 8001f8c:	3738      	adds	r7, #56	; 0x38
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000d2c 	.word	0x20000d2c
 8001f98:	40000400 	.word	0x40000400

08001f9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <MX_TIM5_Init+0xec>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ff4:	4823      	ldr	r0, [pc, #140]	; (8002084 <MX_TIM5_Init+0xe8>)
 8001ff6:	f008 f8ef 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002000:	f000 fb5e 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <MX_TIM5_Init+0xe8>)
 8002012:	f008 fb1b 	bl	800a64c <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800201c:	f000 fb50 	bl	80026c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002020:	4818      	ldr	r0, [pc, #96]	; (8002084 <MX_TIM5_Init+0xe8>)
 8002022:	f008 f9a1 	bl	800a368 <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800202c:	f000 fb48 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_TIM5_Init+0xe8>)
 8002040:	f008 ff62 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800204a:	f000 fb39 	bl	80026c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	; 0x60
 8002050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	220c      	movs	r2, #12
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <MX_TIM5_Init+0xe8>)
 8002066:	f008 f9e1 	bl	800a42c <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002070:	f000 fb26 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_TIM5_Init+0xe8>)
 8002076:	f000 ffdf 	bl	8003038 <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	; 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000ce0 	.word	0x20000ce0
 8002088:	40000c00 	.word	0x40000c00

0800208c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_TIM8_Init+0xa0>)
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <MX_TIM8_Init+0xa4>)
 80020ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_TIM8_Init+0xa0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM8_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_TIM8_Init+0xa0>)
 80020be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <MX_TIM8_Init+0xa0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM8_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_TIM8_Init+0xa0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <MX_TIM8_Init+0xa0>)
 80020d8:	f008 f87e 	bl	800a1d8 <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020e2:	f000 faed 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480e      	ldr	r0, [pc, #56]	; (800212c <MX_TIM8_Init+0xa0>)
 80020f4:	f008 faaa 	bl	800a64c <HAL_TIM_ConfigClockSource>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020fe:	f000 fadf 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_TIM8_Init+0xa0>)
 8002114:	f008 fef8 	bl	800af08 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800211e:	f000 facf 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000ad0 	.word	0x20000ad0
 8002130:	40010400 	.word	0x40010400

08002134 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	463b      	mov	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_TIM12_Init+0x6c>)
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <MX_TIM12_Init+0x70>)
 800214a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_TIM12_Init+0x6c>)
 800214e:	224f      	movs	r2, #79	; 0x4f
 8002150:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_TIM12_Init+0x6c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_TIM12_Init+0x6c>)
 800215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_TIM12_Init+0x6c>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_TIM12_Init+0x6c>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <MX_TIM12_Init+0x6c>)
 800216e:	f008 f833 	bl	800a1d8 <HAL_TIM_Base_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002178:	f000 faa2 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002182:	463b      	mov	r3, r7
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <MX_TIM12_Init+0x6c>)
 8002188:	f008 fa60 	bl	800a64c <HAL_TIM_ConfigClockSource>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8002192:	f000 fa95 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200010b8 	.word	0x200010b8
 80021a4:	40001800 	.word	0x40001800

080021a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <MX_USART1_UART_Init+0x5c>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USART1_UART_Init+0x58>)
 80021ec:	f008 ff98 	bl	800b120 <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021f6:	f000 fa63 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000eb8 	.word	0x20000eb8
 8002204:	40011000 	.word	0x40011000

08002208 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <MX_USART6_UART_Init+0x58>)
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <MX_USART6_UART_Init+0x5c>)
 8002210:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <MX_USART6_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_USART6_UART_Init+0x58>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_USART6_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_USART6_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_USART6_UART_Init+0x58>)
 800224c:	f008 ff68 	bl	800b120 <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002256:	f000 fa33 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000fa8 	.word	0x20000fa8
 8002264:	40011400 	.word	0x40011400

08002268 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	615a      	str	r2, [r3, #20]
 800227e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <MX_FMC_Init+0x98>)
 8002282:	4a20      	ldr	r2, [pc, #128]	; (8002304 <MX_FMC_Init+0x9c>)
 8002284:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <MX_FMC_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <MX_FMC_Init+0x98>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_FMC_Init+0x98>)
 8002294:	2204      	movs	r2, #4
 8002296:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <MX_FMC_Init+0x98>)
 800229a:	2210      	movs	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_FMC_Init+0x98>)
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_FMC_Init+0x98>)
 80022a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80022aa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_FMC_Init+0x98>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_FMC_Init+0x98>)
 80022b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_FMC_Init+0x98>)
 80022bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_FMC_Init+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80022cc:	2307      	movs	r3, #7
 80022ce:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80022d0:	2304      	movs	r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80022d4:	2307      	movs	r3, #7
 80022d6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80022d8:	2303      	movs	r3, #3
 80022da:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_FMC_Init+0x98>)
 80022ea:	f007 fee4 	bl	800a0b6 <HAL_SDRAM_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80022f4:	f000 f9e4 	bl	80026c0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20001104 	.word	0x20001104
 8002304:	a0000140 	.word	0xa0000140

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b090      	sub	sp, #64	; 0x40
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	4baf      	ldr	r3, [pc, #700]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4aae      	ldr	r2, [pc, #696]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4bac      	ldr	r3, [pc, #688]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002336:	4ba9      	ldr	r3, [pc, #676]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4aa8      	ldr	r2, [pc, #672]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4ba6      	ldr	r3, [pc, #664]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4ba3      	ldr	r3, [pc, #652]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4aa2      	ldr	r2, [pc, #648]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4ba0      	ldr	r3, [pc, #640]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002366:	4b9d      	ldr	r3, [pc, #628]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a9c      	ldr	r2, [pc, #624]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b9a      	ldr	r3, [pc, #616]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a96      	ldr	r2, [pc, #600]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b94      	ldr	r3, [pc, #592]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b91      	ldr	r3, [pc, #580]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a90      	ldr	r2, [pc, #576]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b8e      	ldr	r3, [pc, #568]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023ae:	4b8b      	ldr	r3, [pc, #556]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a8a      	ldr	r2, [pc, #552]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a84      	ldr	r2, [pc, #528]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b7c      	ldr	r3, [pc, #496]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a78      	ldr	r2, [pc, #480]	; (80025dc <MX_GPIO_Init+0x2d4>)
 80023fc:	f043 0320 	orr.w	r3, r3, #32
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240e:	4b73      	ldr	r3, [pc, #460]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a72      	ldr	r2, [pc, #456]	; (80025dc <MX_GPIO_Init+0x2d4>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b70      	ldr	r3, [pc, #448]	; (80025dc <MX_GPIO_Init+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2120      	movs	r1, #32
 800242a:	486d      	ldr	r0, [pc, #436]	; (80025e0 <MX_GPIO_Init+0x2d8>)
 800242c:	f002 fa2c 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	210e      	movs	r1, #14
 8002434:	486b      	ldr	r0, [pc, #428]	; (80025e4 <MX_GPIO_Init+0x2dc>)
 8002436:	f002 fa27 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	2108      	movs	r1, #8
 800243e:	486a      	ldr	r0, [pc, #424]	; (80025e8 <MX_GPIO_Init+0x2e0>)
 8002440:	f002 fa22 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244a:	4866      	ldr	r0, [pc, #408]	; (80025e4 <MX_GPIO_Init+0x2dc>)
 800244c:	f002 fa1c 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002456:	4865      	ldr	r0, [pc, #404]	; (80025ec <MX_GPIO_Init+0x2e4>)
 8002458:	f002 fa16 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	21c8      	movs	r1, #200	; 0xc8
 8002460:	4863      	ldr	r0, [pc, #396]	; (80025f0 <MX_GPIO_Init+0x2e8>)
 8002462:	f002 fa11 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002466:	2308      	movs	r3, #8
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	485e      	ldr	r0, [pc, #376]	; (80025f4 <MX_GPIO_Init+0x2ec>)
 800247a:	f002 f841 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800247e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002490:	230a      	movs	r3, #10
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	4857      	ldr	r0, [pc, #348]	; (80025f8 <MX_GPIO_Init+0x2f0>)
 800249c:	f002 f830 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80024a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4851      	ldr	r0, [pc, #324]	; (80025fc <MX_GPIO_Init+0x2f4>)
 80024b6:	f002 f823 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024be:	4b50      	ldr	r3, [pc, #320]	; (8002600 <MX_GPIO_Init+0x2f8>)
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	4844      	ldr	r0, [pc, #272]	; (80025e0 <MX_GPIO_Init+0x2d8>)
 80024ce:	f002 f817 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024d2:	2320      	movs	r3, #32
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	2301      	movs	r3, #1
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4619      	mov	r1, r3
 80024e8:	483d      	ldr	r0, [pc, #244]	; (80025e0 <MX_GPIO_Init+0x2d8>)
 80024ea:	f002 f809 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024ee:	f241 030e 	movw	r3, #4110	; 0x100e
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	4837      	ldr	r0, [pc, #220]	; (80025e4 <MX_GPIO_Init+0x2dc>)
 8002508:	f001 fffa 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800250c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002512:	2300      	movs	r3, #0
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	4838      	ldr	r0, [pc, #224]	; (8002604 <MX_GPIO_Init+0x2fc>)
 8002522:	f001 ffed 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002526:	2308      	movs	r3, #8
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	482a      	ldr	r0, [pc, #168]	; (80025e8 <MX_GPIO_Init+0x2e0>)
 800253e:	f001 ffdf 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002542:	2310      	movs	r3, #16
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002546:	2300      	movs	r3, #0
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002552:	4619      	mov	r1, r3
 8002554:	4822      	ldr	r0, [pc, #136]	; (80025e0 <MX_GPIO_Init+0x2d8>)
 8002556:	f001 ffd3 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800255a:	f248 0304 	movw	r3, #32772	; 0x8004
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256c:	4619      	mov	r1, r3
 800256e:	481f      	ldr	r0, [pc, #124]	; (80025ec <MX_GPIO_Init+0x2e4>)
 8002570:	f001 ffc6 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	2301      	movs	r3, #1
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	4817      	ldr	r0, [pc, #92]	; (80025ec <MX_GPIO_Init+0x2e4>)
 800258e:	f001 ffb7 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <MX_GPIO_Init+0x2f8>)
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	4619      	mov	r1, r3
 80025a6:	480f      	ldr	r0, [pc, #60]	; (80025e4 <MX_GPIO_Init+0x2dc>)
 80025a8:	f001 ffaa 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80025ac:	2310      	movs	r3, #16
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025bc:	230a      	movs	r3, #10
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4809      	ldr	r0, [pc, #36]	; (80025ec <MX_GPIO_Init+0x2e4>)
 80025c8:	f001 ff9a 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80025cc:	23c8      	movs	r3, #200	; 0xc8
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
 80025d8:	e016      	b.n	8002608 <MX_GPIO_Init+0x300>
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40022800 	.word	0x40022800
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40022400 	.word	0x40022400
 8002600:	10120000 	.word	0x10120000
 8002604:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	4619      	mov	r1, r3
 8002612:	4822      	ldr	r0, [pc, #136]	; (800269c <MX_GPIO_Init+0x394>)
 8002614:	f001 ff74 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002618:	2305      	movs	r3, #5
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002628:	230a      	movs	r3, #10
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	481b      	ldr	r0, [pc, #108]	; (80026a0 <MX_GPIO_Init+0x398>)
 8002634:	f001 ff64 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002638:	2304      	movs	r3, #4
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002648:	4619      	mov	r1, r3
 800264a:	4814      	ldr	r0, [pc, #80]	; (800269c <MX_GPIO_Init+0x394>)
 800264c:	f001 ff58 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002650:	2328      	movs	r3, #40	; 0x28
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002660:	230a      	movs	r3, #10
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	480e      	ldr	r0, [pc, #56]	; (80026a4 <MX_GPIO_Init+0x39c>)
 800266c:	f001 ff48 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002670:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002682:	2305      	movs	r3, #5
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268a:	4619      	mov	r1, r3
 800268c:	4806      	ldr	r0, [pc, #24]	; (80026a8 <MX_GPIO_Init+0x3a0>)
 800268e:	f001 ff37 	bl	8004500 <HAL_GPIO_Init>

}
 8002692:	bf00      	nop
 8002694:	3740      	adds	r7, #64	; 0x40
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021800 	.word	0x40021800
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400

080026ac <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80026b0:	2102      	movs	r1, #2
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <LED_Toggle+0x10>)
 80026b4:	f002 f901 	bl	80048ba <HAL_GPIO_TogglePin>
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40022000 	.word	0x40022000

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <Error_Handler+0x8>
	...

080026cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_MspInit+0x44>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_MspInit+0x44>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_MspInit+0x44>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_MspInit+0x44>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <HAL_MspInit+0x44>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_MspInit+0x44>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <HAL_ADC_MspInit+0xa4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d13c      	bne.n	80027b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a20      	ldr	r2, [pc, #128]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800273c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_ADC_MspInit+0xa8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800277e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002782:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002784:	2303      	movs	r3, #3
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	480b      	ldr	r0, [pc, #44]	; (80027c0 <HAL_ADC_MspInit+0xac>)
 8002794:	f001 feb4 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279c:	2303      	movs	r3, #3
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <HAL_ADC_MspInit+0xb0>)
 80027ac:	f001 fea8 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40012200 	.word	0x40012200
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40020000 	.word	0x40020000

080027c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_CRC_MspInit+0x38>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10b      	bne.n	80027f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_CRC_MspInit+0x3c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023000 	.word	0x40023000
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_DCMI_MspInit+0x160>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 809a 	bne.w	8002960 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6353      	str	r3, [r2, #52]	; 0x34
 8002838:	4b4c      	ldr	r3, [pc, #304]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002844:	4b49      	ldr	r3, [pc, #292]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002874:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a3c      	ldr	r2, [pc, #240]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a36      	ldr	r2, [pc, #216]	; (800296c <HAL_DCMI_MspInit+0x164>)
 8002892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_DCMI_MspInit+0x164>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_DCMI_MspInit+0x164>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a30      	ldr	r2, [pc, #192]	; (800296c <HAL_DCMI_MspInit+0x164>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_DCMI_MspInit+0x164>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028bc:	2360      	movs	r3, #96	; 0x60
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028cc:	230d      	movs	r3, #13
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	4826      	ldr	r0, [pc, #152]	; (8002970 <HAL_DCMI_MspInit+0x168>)
 80028d8:	f001 fe12 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028dc:	2308      	movs	r3, #8
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ec:	230d      	movs	r3, #13
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	481f      	ldr	r0, [pc, #124]	; (8002974 <HAL_DCMI_MspInit+0x16c>)
 80028f8:	f001 fe02 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800290e:	230d      	movs	r3, #13
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4817      	ldr	r0, [pc, #92]	; (8002978 <HAL_DCMI_MspInit+0x170>)
 800291a:	f001 fdf1 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800291e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002930:	230d      	movs	r3, #13
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4810      	ldr	r0, [pc, #64]	; (800297c <HAL_DCMI_MspInit+0x174>)
 800293c:	f001 fde0 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002940:	2350      	movs	r3, #80	; 0x50
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002950:	230d      	movs	r3, #13
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002958:	4619      	mov	r1, r3
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <HAL_DCMI_MspInit+0x178>)
 800295c:	f001 fdd0 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	3738      	adds	r7, #56	; 0x38
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	50050000 	.word	0x50050000
 800296c:	40023800 	.word	0x40023800
 8002970:	40021000 	.word	0x40021000
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021800 	.word	0x40021800
 800297c:	40021c00 	.word	0x40021c00
 8002980:	40020000 	.word	0x40020000

08002984 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <HAL_DMA2D_MspInit+0x44>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_DMA2D_MspInit+0x48>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_DMA2D_MspInit+0x48>)
 800299c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_DMA2D_MspInit+0x48>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	205a      	movs	r0, #90	; 0x5a
 80029b4:	f001 fa1d 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80029b8:	205a      	movs	r0, #90	; 0x5a
 80029ba:	f001 fa36 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	4002b000 	.word	0x4002b000
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_I2C_MspInit+0xdc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d129      	bne.n	8002a46 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a10:	2312      	movs	r3, #18
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	4823      	ldr	r0, [pc, #140]	; (8002ab4 <HAL_I2C_MspInit+0xe4>)
 8002a28:	f001 fd6a 	bl	8004500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a44:	e02d      	b.n	8002aa2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <HAL_I2C_MspInit+0xe8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d128      	bne.n	8002aa2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a6e:	2312      	movs	r3, #18
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <HAL_I2C_MspInit+0xec>)
 8002a86:	f001 fd3b 	bl	8004500 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_I2C_MspInit+0xe0>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	bf00      	nop
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40005400 	.word	0x40005400
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40005c00 	.word	0x40005c00
 8002abc:	40021c00 	.word	0x40021c00

08002ac0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_LTDC_MspInit+0x174>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	f040 80a3 	bne.w	8002c2a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ae4:	4b54      	ldr	r3, [pc, #336]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aee:	6453      	str	r3, [r2, #68]	; 0x44
 8002af0:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afc:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a4d      	ldr	r2, [pc, #308]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a47      	ldr	r2, [pc, #284]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b2c:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4a41      	ldr	r2, [pc, #260]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b36:	6313      	str	r3, [r2, #48]	; 0x30
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b44:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6313      	str	r3, [r2, #48]	; 0x30
 8002b68:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_LTDC_MspInit+0x178>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b74:	2310      	movs	r3, #16
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b84:	230e      	movs	r3, #14
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	482b      	ldr	r0, [pc, #172]	; (8002c3c <HAL_LTDC_MspInit+0x17c>)
 8002b90:	f001 fcb6 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002b94:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba6:	230e      	movs	r3, #14
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4823      	ldr	r0, [pc, #140]	; (8002c40 <HAL_LTDC_MspInit+0x180>)
 8002bb2:	f001 fca5 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002bb6:	23f7      	movs	r3, #247	; 0xf7
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc6:	230e      	movs	r3, #14
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	481c      	ldr	r0, [pc, #112]	; (8002c44 <HAL_LTDC_MspInit+0x184>)
 8002bd2:	f001 fc95 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002be8:	2309      	movs	r3, #9
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4815      	ldr	r0, [pc, #84]	; (8002c48 <HAL_LTDC_MspInit+0x188>)
 8002bf4:	f001 fc84 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bf8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <HAL_LTDC_MspInit+0x18c>)
 8002c16:	f001 fc73 	bl	8004500 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2058      	movs	r0, #88	; 0x58
 8002c20:	f001 f8e7 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c24:	2058      	movs	r0, #88	; 0x58
 8002c26:	f001 f900 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c2a:	bf00      	nop
 8002c2c:	3738      	adds	r7, #56	; 0x38
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40016800 	.word	0x40016800
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40022400 	.word	0x40022400
 8002c44:	40022800 	.word	0x40022800
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_QSPI_MspInit+0x10c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d170      	bne.n	8002d54 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	4a3a      	ldr	r2, [pc, #232]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6393      	str	r3, [r2, #56]	; 0x38
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cba:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a28      	ldr	r2, [pc, #160]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_QSPI_MspInit+0x110>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ce2:	2309      	movs	r3, #9
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	481d      	ldr	r0, [pc, #116]	; (8002d64 <HAL_QSPI_MspInit+0x114>)
 8002cee:	f001 fc07 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cf2:	2340      	movs	r3, #64	; 0x40
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d02:	230a      	movs	r3, #10
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4816      	ldr	r0, [pc, #88]	; (8002d68 <HAL_QSPI_MspInit+0x118>)
 8002d0e:	f001 fbf7 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d12:	2304      	movs	r3, #4
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d22:	2309      	movs	r3, #9
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480e      	ldr	r0, [pc, #56]	; (8002d68 <HAL_QSPI_MspInit+0x118>)
 8002d2e:	f001 fbe7 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d44:	2309      	movs	r3, #9
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4807      	ldr	r0, [pc, #28]	; (8002d6c <HAL_QSPI_MspInit+0x11c>)
 8002d50:	f001 fbd6 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3730      	adds	r7, #48	; 0x30
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	a0001000 	.word	0xa0001000
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020c00 	.word	0x40020c00

08002d70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_RTC_MspInit+0x2c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d105      	bne.n	8002d8e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RTC_MspInit+0x30>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_RTC_MspInit+0x30>)
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40002800 	.word	0x40002800
 8002da0:	40023800 	.word	0x40023800

08002da4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_SD_MspInit+0xb4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d144      	bne.n	8002e50 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_SD_MspInit+0xb8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002e0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e20:	230c      	movs	r3, #12
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480d      	ldr	r0, [pc, #52]	; (8002e60 <HAL_SD_MspInit+0xbc>)
 8002e2c:	f001 fb68 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002e30:	2304      	movs	r3, #4
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e40:	230c      	movs	r3, #12
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4806      	ldr	r0, [pc, #24]	; (8002e64 <HAL_SD_MspInit+0xc0>)
 8002e4c:	f001 fb58 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00

08002e68 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002e88:	d127      	bne.n	8002eda <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4804      	ldr	r0, [pc, #16]	; (8002ee8 <HAL_SPDIFRX_MspInit+0x80>)
 8002ed6:	f001 fb13 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020c00 	.word	0x40020c00

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a44      	ldr	r2, [pc, #272]	; (800301c <HAL_TIM_Base_MspInit+0x130>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10c      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a43      	ldr	r2, [pc, #268]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002f26:	e074      	b.n	8003012 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a3a      	ldr	r2, [pc, #232]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
}
 8002f4a:	e062      	b.n	8003012 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_TIM_Base_MspInit+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
}
 8002f6e:	e050      	b.n	8003012 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_TIM_Base_MspInit+0x13c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a28      	ldr	r2, [pc, #160]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
}
 8002f92:	e03e      	b.n	8003012 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <HAL_TIM_Base_MspInit+0x140>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
}
 8002fb6:	e02c      	b.n	8003012 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIM_Base_MspInit+0x144>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d127      	bne.n	8003012 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_TIM_Base_MspInit+0x134>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002ff2:	2340      	movs	r3, #64	; 0x40
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003002:	2309      	movs	r3, #9
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300a:	4619      	mov	r1, r3
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <HAL_TIM_Base_MspInit+0x148>)
 800300e:	f001 fa77 	bl	8004500 <HAL_GPIO_Init>
}
 8003012:	bf00      	nop
 8003014:	3738      	adds	r7, #56	; 0x38
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40023800 	.word	0x40023800
 8003024:	40000400 	.word	0x40000400
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40001800 	.word	0x40001800
 8003034:	40021c00 	.word	0x40021c00

08003038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08c      	sub	sp, #48	; 0x30
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a45      	ldr	r2, [pc, #276]	; (800316c <HAL_TIM_MspPostInit+0x134>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d11d      	bne.n	8003096 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003084:	2301      	movs	r3, #1
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	4839      	ldr	r0, [pc, #228]	; (8003174 <HAL_TIM_MspPostInit+0x13c>)
 8003090:	f001 fa36 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003094:	e065      	b.n	8003162 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d11d      	bne.n	80030dc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a32      	ldr	r2, [pc, #200]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80030b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ca:	2301      	movs	r3, #1
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	4827      	ldr	r0, [pc, #156]	; (8003174 <HAL_TIM_MspPostInit+0x13c>)
 80030d6:	f001 fa13 	bl	8004500 <HAL_GPIO_Init>
}
 80030da:	e042      	b.n	8003162 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a25      	ldr	r2, [pc, #148]	; (8003178 <HAL_TIM_MspPostInit+0x140>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d11c      	bne.n	8003120 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a21      	ldr	r2, [pc, #132]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030fe:	2310      	movs	r3, #16
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800310e:	2302      	movs	r3, #2
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	4818      	ldr	r0, [pc, #96]	; (800317c <HAL_TIM_MspPostInit+0x144>)
 800311a:	f001 f9f1 	bl	8004500 <HAL_GPIO_Init>
}
 800311e:	e020      	b.n	8003162 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_TIM_MspPostInit+0x148>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d11b      	bne.n	8003162 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_TIM_MspPostInit+0x138>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003152:	2302      	movs	r3, #2
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	4809      	ldr	r0, [pc, #36]	; (8003184 <HAL_TIM_MspPostInit+0x14c>)
 800315e:	f001 f9cf 	bl	8004500 <HAL_GPIO_Init>
}
 8003162:	bf00      	nop
 8003164:	3730      	adds	r7, #48	; 0x30
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40023800 	.word	0x40023800
 8003174:	40020000 	.word	0x40020000
 8003178:	40000400 	.word	0x40000400
 800317c:	40020400 	.word	0x40020400
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40022000 	.word	0x40022000

08003188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <HAL_UART_MspInit+0x110>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d145      	bne.n	8003236 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031aa:	4b3c      	ldr	r3, [pc, #240]	; (800329c <HAL_UART_MspInit+0x114>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a3b      	ldr	r2, [pc, #236]	; (800329c <HAL_UART_MspInit+0x114>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_UART_MspInit+0x114>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_UART_MspInit+0x114>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a35      	ldr	r2, [pc, #212]	; (800329c <HAL_UART_MspInit+0x114>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_UART_MspInit+0x114>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_UART_MspInit+0x114>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a2f      	ldr	r2, [pc, #188]	; (800329c <HAL_UART_MspInit+0x114>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_UART_MspInit+0x114>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003202:	2307      	movs	r3, #7
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4619      	mov	r1, r3
 800320c:	4824      	ldr	r0, [pc, #144]	; (80032a0 <HAL_UART_MspInit+0x118>)
 800320e:	f001 f977 	bl	8004500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003224:	2307      	movs	r3, #7
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	481d      	ldr	r0, [pc, #116]	; (80032a4 <HAL_UART_MspInit+0x11c>)
 8003230:	f001 f966 	bl	8004500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003234:	e02c      	b.n	8003290 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_UART_MspInit+0x120>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d127      	bne.n	8003290 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_UART_MspInit+0x114>)
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_UART_MspInit+0x114>)
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	6453      	str	r3, [r2, #68]	; 0x44
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_UART_MspInit+0x114>)
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_UART_MspInit+0x114>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	4a0f      	ldr	r2, [pc, #60]	; (800329c <HAL_UART_MspInit+0x114>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6313      	str	r3, [r2, #48]	; 0x30
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_UART_MspInit+0x114>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003270:	23c0      	movs	r3, #192	; 0xc0
 8003272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003280:	2308      	movs	r3, #8
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	4808      	ldr	r0, [pc, #32]	; (80032ac <HAL_UART_MspInit+0x124>)
 800328c:	f001 f938 	bl	8004500 <HAL_GPIO_Init>
}
 8003290:	bf00      	nop
 8003292:	3730      	adds	r7, #48	; 0x30
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40011000 	.word	0x40011000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	40020800 	.word	0x40020800

080032b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80032c4:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_FMC_MspInit+0x100>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d16d      	bne.n	80033a8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_FMC_MspInit+0x100>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_FMC_MspInit+0x104>)
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4a37      	ldr	r2, [pc, #220]	; (80033b4 <HAL_FMC_MspInit+0x104>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6393      	str	r3, [r2, #56]	; 0x38
 80032de:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_FMC_MspInit+0x104>)
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80032ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032ee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032fc:	230c      	movs	r3, #12
 80032fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	4619      	mov	r1, r3
 8003304:	482c      	ldr	r0, [pc, #176]	; (80033b8 <HAL_FMC_MspInit+0x108>)
 8003306:	f001 f8fb 	bl	8004500 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800330a:	f248 1333 	movw	r3, #33075	; 0x8133
 800330e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800331c:	230c      	movs	r3, #12
 800331e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4825      	ldr	r0, [pc, #148]	; (80033bc <HAL_FMC_MspInit+0x10c>)
 8003326:	f001 f8eb 	bl	8004500 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800332a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800332e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800333c:	230c      	movs	r3, #12
 800333e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	4619      	mov	r1, r3
 8003344:	481e      	ldr	r0, [pc, #120]	; (80033c0 <HAL_FMC_MspInit+0x110>)
 8003346:	f001 f8db 	bl	8004500 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800334a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800334e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800335c:	230c      	movs	r3, #12
 800335e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4817      	ldr	r0, [pc, #92]	; (80033c4 <HAL_FMC_MspInit+0x114>)
 8003366:	f001 f8cb 	bl	8004500 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800336a:	2328      	movs	r3, #40	; 0x28
 800336c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800337a:	230c      	movs	r3, #12
 800337c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800337e:	1d3b      	adds	r3, r7, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4811      	ldr	r0, [pc, #68]	; (80033c8 <HAL_FMC_MspInit+0x118>)
 8003384:	f001 f8bc 	bl	8004500 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003388:	2308      	movs	r3, #8
 800338a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003398:	230c      	movs	r3, #12
 800339a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4619      	mov	r1, r3
 80033a0:	480a      	ldr	r0, [pc, #40]	; (80033cc <HAL_FMC_MspInit+0x11c>)
 80033a2:	f001 f8ad 	bl	8004500 <HAL_GPIO_Init>
 80033a6:	e000      	b.n	80033aa <HAL_FMC_MspInit+0xfa>
    return;
 80033a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000970 	.word	0x20000970
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021400 	.word	0x40021400
 80033c8:	40021c00 	.word	0x40021c00
 80033cc:	40020800 	.word	0x40020800

080033d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80033d8:	f7ff ff6a 	bl	80032b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_SAI_MspInit+0xbc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d124      	bne.n	8003440 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 800341e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003420:	23f0      	movs	r3, #240	; 0xf0
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003430:	230a      	movs	r3, #10
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	481c      	ldr	r0, [pc, #112]	; (80034ac <HAL_SAI_MspInit+0xc8>)
 800343c:	f001 f860 	bl	8004500 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_SAI_MspInit+0xcc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d125      	bne.n	8003496 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 8003458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_SAI_MspInit+0xc4>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_SAI_MspInit+0xc0>)
 8003472:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003486:	230a      	movs	r3, #10
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	4808      	ldr	r0, [pc, #32]	; (80034b4 <HAL_SAI_MspInit+0xd0>)
 8003492:	f001 f835 	bl	8004500 <HAL_GPIO_Init>

    }
}
 8003496:	bf00      	nop
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40015c04 	.word	0x40015c04
 80034a4:	20000974 	.word	0x20000974
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40015c24 	.word	0x40015c24
 80034b4:	40021800 	.word	0x40021800

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler+0x4>

080034be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <HardFault_Handler+0x4>

080034c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <MemManage_Handler+0x4>

080034ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003504:	f000 f8ce 	bl	80036a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <OTG_FS_IRQHandler+0x10>)
 8003512:	f001 fc57 	bl	8004dc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20001a10 	.word	0x20001a10

08003520 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <LTDC_IRQHandler+0x10>)
 8003526:	f003 f93f 	bl	80067a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000d78 	.word	0x20000d78

08003534 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <DMA2D_IRQHandler+0x10>)
 800353a:	f000 fe3f 	bl	80041bc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	2000102c 	.word	0x2000102c

08003548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <_sbrk+0x5c>)
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <_sbrk+0x60>)
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <_sbrk+0x64>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <_sbrk+0x68>)
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d207      	bcs.n	8003588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003578:	f00f fcc4 	bl	8012f04 <__errno>
 800357c:	4603      	mov	r3, r0
 800357e:	220c      	movs	r2, #12
 8003580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003586:	e009      	b.n	800359c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	4a05      	ldr	r2, [pc, #20]	; (80035ac <_sbrk+0x64>)
 8003598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20050000 	.word	0x20050000
 80035a8:	00000800 	.word	0x00000800
 80035ac:	20000978 	.word	0x20000978
 80035b0:	20001d28 	.word	0x20001d28

080035b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <SystemInit+0x20>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <SystemInit+0x20>)
 80035c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035de:	490e      	ldr	r1, [pc, #56]	; (8003618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035e0:	4a0e      	ldr	r2, [pc, #56]	; (800361c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e4:	e002      	b.n	80035ec <LoopCopyDataInit>

080035e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ea:	3304      	adds	r3, #4

080035ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f0:	d3f9      	bcc.n	80035e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035f4:	4c0b      	ldr	r4, [pc, #44]	; (8003624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f8:	e001      	b.n	80035fe <LoopFillZerobss>

080035fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035fc:	3204      	adds	r2, #4

080035fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003600:	d3fb      	bcc.n	80035fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003602:	f7ff ffd7 	bl	80035b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003606:	f00f fc83 	bl	8012f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360a:	f7fd fd25 	bl	8001058 <main>
  bx  lr    
 800360e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003610:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003618:	20000954 	.word	0x20000954
  ldr r2, =_sidata
 800361c:	080198cc 	.word	0x080198cc
  ldr r2, =_sbss
 8003620:	20000954 	.word	0x20000954
  ldr r4, =_ebss
 8003624:	20001d24 	.word	0x20001d24

08003628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC_IRQHandler>

0800362a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362e:	2003      	movs	r0, #3
 8003630:	f000 fbd4 	bl	8003ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003634:	200f      	movs	r0, #15
 8003636:	f000 f805 	bl	8003644 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800363a:	f7ff f847 	bl	80026cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x54>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x58>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	fbb3 f3f1 	udiv	r3, r3, r1
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fbef 	bl	8003e46 <HAL_SYSTICK_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00e      	b.n	8003690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d80a      	bhi.n	800368e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003680:	f000 fbb7 	bl	8003df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_InitTick+0x5c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000000 	.word	0x20000000
 800369c:	20000008 	.word	0x20000008
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x20>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_IncTick+0x24>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_IncTick+0x24>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000008 	.word	0x20000008
 80036c8:	200011cc 	.word	0x200011cc

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_GetTick+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200011cc 	.word	0x200011cc

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff ffee 	bl	80036cc <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fc:	d005      	beq.n	800370a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_Delay+0x44>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800370a:	bf00      	nop
 800370c:	f7ff ffde 	bl	80036cc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f7      	bhi.n	800370c <HAL_Delay+0x28>
  {
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000008 	.word	0x20000008

0800372c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e031      	b.n	80037a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe ffe2 	bl	8002714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_ADC_Init+0x84>)
 8003770:	4013      	ands	r3, r2
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f964 	bl	8003a48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
 8003796:	e001      	b.n	800379c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	ffffeefd 	.word	0xffffeefd

080037b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e12a      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x272>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d93a      	bls.n	8003856 <HAL_ADC_ConfigChannel+0xa2>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e8:	d035      	beq.n	8003856 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68d9      	ldr	r1, [r3, #12]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	4613      	mov	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	3b1e      	subs	r3, #30
 8003800:	2207      	movs	r2, #7
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	400a      	ands	r2, r1
 800380e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a87      	ldr	r2, [pc, #540]	; (8003a34 <HAL_ADC_ConfigChannel+0x280>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68d9      	ldr	r1, [r3, #12]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	061a      	lsls	r2, r3, #24
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800382e:	e035      	b.n	800389c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68d9      	ldr	r1, [r3, #12]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	4603      	mov	r3, r0
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4403      	add	r3, r0
 8003848:	3b1e      	subs	r3, #30
 800384a:	409a      	lsls	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003854:	e022      	b.n	800389c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6919      	ldr	r1, [r3, #16]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	2207      	movs	r2, #7
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6919      	ldr	r1, [r3, #16]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4618      	mov	r0, r3
 800388c:	4603      	mov	r3, r0
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4403      	add	r3, r0
 8003892:	409a      	lsls	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d824      	bhi.n	80038ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	3b05      	subs	r3, #5
 80038b6:	221f      	movs	r2, #31
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43da      	mvns	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	400a      	ands	r2, r1
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	3b05      	subs	r3, #5
 80038e0:	fa00 f203 	lsl.w	r2, r0, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34
 80038ec:	e04c      	b.n	8003988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d824      	bhi.n	8003940 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	3b23      	subs	r3, #35	; 0x23
 8003908:	221f      	movs	r2, #31
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	400a      	ands	r2, r1
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b23      	subs	r3, #35	; 0x23
 8003932:	fa00 f203 	lsl.w	r2, r0, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
 800393e:	e023      	b.n	8003988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b41      	subs	r3, #65	; 0x41
 8003952:	221f      	movs	r2, #31
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43da      	mvns	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	400a      	ands	r2, r1
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4618      	mov	r0, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	3b41      	subs	r3, #65	; 0x41
 800397c:	fa00 f203 	lsl.w	r2, r0, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_ADC_ConfigChannel+0x284>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1f4>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399a:	d105      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 80039a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_ADC_ConfigChannel+0x284>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d109      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x212>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b12      	cmp	r3, #18
 80039b8:	d105      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 80039c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_ADC_ConfigChannel+0x284>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d125      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x268>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_ADC_ConfigChannel+0x280>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x22e>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b11      	cmp	r3, #17
 80039e0:	d11c      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <HAL_ADC_ConfigChannel+0x288>)
 80039e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_ADC_ConfigChannel+0x280>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_ADC_ConfigChannel+0x28c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a11      	ldr	r2, [pc, #68]	; (8003a44 <HAL_ADC_ConfigChannel+0x290>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0c9a      	lsrs	r2, r3, #18
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a0e:	e002      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f9      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	10000012 	.word	0x10000012
 8003a38:	40012000 	.word	0x40012000
 8003a3c:	40012300 	.word	0x40012300
 8003a40:	20000000 	.word	0x20000000
 8003a44:	431bde83 	.word	0x431bde83

08003a48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a50:	4b78      	ldr	r3, [pc, #480]	; (8003c34 <ADC_Init+0x1ec>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a77      	ldr	r2, [pc, #476]	; (8003c34 <ADC_Init+0x1ec>)
 8003a56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a5c:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <ADC_Init+0x1ec>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4973      	ldr	r1, [pc, #460]	; (8003c34 <ADC_Init+0x1ec>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	021a      	lsls	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <ADC_Init+0x1f0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e00f      	b.n	8003b42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0202 	bic.w	r2, r2, #2
 8003b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	005a      	lsls	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	035a      	lsls	r2, r3, #13
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	e007      	b.n	8003bb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	051a      	lsls	r2, r3, #20
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6899      	ldr	r1, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bfa:	025a      	lsls	r2, r3, #9
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	029a      	lsls	r2, r3, #10
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012300 	.word	0x40012300
 8003c38:	0f000001 	.word	0x0f000001

08003c3c <__NVIC_SetPriorityGrouping>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <__NVIC_SetPriorityGrouping+0x40>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <__NVIC_SetPriorityGrouping+0x44>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <__NVIC_SetPriorityGrouping+0x40>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00
 8003c80:	05fa0000 	.word	0x05fa0000

08003c84 <__NVIC_GetPriorityGrouping>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <__NVIC_GetPriorityGrouping+0x18>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 0307 	and.w	r3, r3, #7
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_EnableIRQ>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db0b      	blt.n	8003cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	f003 021f 	and.w	r2, r3, #31
 8003cb8:	4907      	ldr	r1, [pc, #28]	; (8003cd8 <__NVIC_EnableIRQ+0x38>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000e100 	.word	0xe000e100

08003cdc <__NVIC_SetPriority>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db0a      	blt.n	8003d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	490c      	ldr	r1, [pc, #48]	; (8003d28 <__NVIC_SetPriority+0x4c>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d04:	e00a      	b.n	8003d1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <__NVIC_SetPriority+0x50>)
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3b04      	subs	r3, #4
 8003d14:	0112      	lsls	r2, r2, #4
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	440b      	add	r3, r1
 8003d1a:	761a      	strb	r2, [r3, #24]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000e100 	.word	0xe000e100
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <NVIC_EncodePriority>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f1c3 0307 	rsb	r3, r3, #7
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	bf28      	it	cs
 8003d4e:	2304      	movcs	r3, #4
 8003d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d902      	bls.n	8003d60 <NVIC_EncodePriority+0x30>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3b03      	subs	r3, #3
 8003d5e:	e000      	b.n	8003d62 <NVIC_EncodePriority+0x32>
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	401a      	ands	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	43d9      	mvns	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	4313      	orrs	r3, r2
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3724      	adds	r7, #36	; 0x24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da8:	d301      	bcc.n	8003dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00f      	b.n	8003dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <SysTick_Config+0x40>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db6:	210f      	movs	r1, #15
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dbc:	f7ff ff8e 	bl	8003cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <SysTick_Config+0x40>)
 8003dc8:	2207      	movs	r2, #7
 8003dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000e010 	.word	0xe000e010

08003ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff29 	bl	8003c3c <__NVIC_SetPriorityGrouping>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e04:	f7ff ff3e 	bl	8003c84 <__NVIC_GetPriorityGrouping>
 8003e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6978      	ldr	r0, [r7, #20]
 8003e10:	f7ff ff8e 	bl	8003d30 <NVIC_EncodePriority>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff5d 	bl	8003cdc <__NVIC_SetPriority>
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff31 	bl	8003ca0 <__NVIC_EnableIRQ>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ffa2 	bl	8003d98 <SysTick_Config>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e054      	b.n	8003f1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7f5b      	ldrb	r3, [r3, #29]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fca0 	bl	80027c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	791b      	ldrb	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_CRC_Init+0xc4>)
 8003e9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0218 	bic.w	r2, r2, #24
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	e00c      	b.n	8003eca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6899      	ldr	r1, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f834 	bl	8003f28 <HAL_CRCEx_Polynomial_Set>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e028      	b.n	8003f1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	795b      	ldrb	r3, [r3, #5]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eda:	611a      	str	r2, [r3, #16]
 8003edc:	e004      	b.n	8003ee8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6912      	ldr	r2, [r2, #16]
 8003ee6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	04c11db7 	.word	0x04c11db7

08003f28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003f38:	231f      	movs	r3, #31
 8003f3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003f3c:	bf00      	nop
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	613a      	str	r2, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_CRCEx_Polynomial_Set+0x34>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_CRCEx_Polynomial_Set+0x16>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b18      	cmp	r3, #24
 8003f60:	d846      	bhi.n	8003ff0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003ff7 	.word	0x08003ff7
 8003f6c:	08003ff1 	.word	0x08003ff1
 8003f70:	08003ff1 	.word	0x08003ff1
 8003f74:	08003ff1 	.word	0x08003ff1
 8003f78:	08003ff1 	.word	0x08003ff1
 8003f7c:	08003ff1 	.word	0x08003ff1
 8003f80:	08003ff1 	.word	0x08003ff1
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	08003fe5 	.word	0x08003fe5
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	08003ff1 	.word	0x08003ff1
 8003f94:	08003ff1 	.word	0x08003ff1
 8003f98:	08003ff1 	.word	0x08003ff1
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003ff1 	.word	0x08003ff1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003fcd 	.word	0x08003fcd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d913      	bls.n	8003ffa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fd6:	e010      	b.n	8003ffa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b07      	cmp	r3, #7
 8003fdc:	d90f      	bls.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fe2:	e00c      	b.n	8003ffe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d90b      	bls.n	8004002 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fee:	e008      	b.n	8004002 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e006      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004002:	bf00      	nop
  }
  if (status == HAL_OK)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 0118 	bic.w	r1, r3, #24
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e069      	b.n	800411a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fbd8 	bl	8002808 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_DCMI_Init+0xf0>)
 800407a:	400b      	ands	r3, r1
 800407c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004092:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800409e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80040aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80040b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80040c2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d112      	bne.n	80040fa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7f1b      	ldrb	r3, [r3, #28]
 80040d8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7f5b      	ldrb	r3, [r3, #29]
 80040de:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040e0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7f9b      	ldrb	r3, [r3, #30]
 80040e6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7fdb      	ldrb	r3, [r3, #31]
 80040f0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80040f6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80040f8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 021e 	orr.w	r2, r2, #30
 8004108:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	ffe0f007 	.word	0xffe0f007

08004128 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e039      	b.n	80041ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fc18 	bl	8002984 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	f023 0107 	bic.w	r1, r3, #7
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_DMA2D_Init+0x90>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68d1      	ldr	r1, [r2, #12]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	430b      	orrs	r3, r1
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	ffffc000 	.word	0xffffc000

080041bc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d026      	beq.n	800422c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d021      	beq.n	800422c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041f6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2204      	movs	r2, #4
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d026      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d021      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2220      	movs	r2, #32
 8004256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	f043 0202 	orr.w	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2204      	movs	r2, #4
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d026      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d021      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2208      	movs	r2, #8
 80042ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d013      	beq.n	800430e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00e      	beq.n	800430e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2204      	movs	r2, #4
 8004306:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f853 	bl	80043b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d024      	beq.n	8004362 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01f      	beq.n	8004362 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2202      	movs	r2, #2
 8004338:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01f      	beq.n	80043ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004384:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2210      	movs	r2, #16
 800438c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f80e 	bl	80043c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_DMA2D_ConfigLayer+0x20>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e079      	b.n	80044f0 <HAL_DMA2D_ConfigLayer+0x114>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	3318      	adds	r3, #24
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004426:	4b35      	ldr	r3, [pc, #212]	; (80044fc <HAL_DMA2D_ConfigLayer+0x120>)
 8004428:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b0a      	cmp	r3, #10
 8004430:	d003      	beq.n	800443a <HAL_DMA2D_ConfigLayer+0x5e>
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d107      	bne.n	800444a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e005      	b.n	8004456 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d120      	bne.n	800449e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	ea02 0103 	and.w	r1, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	430a      	orrs	r2, r1
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b0a      	cmp	r3, #10
 8004484:	d003      	beq.n	800448e <HAL_DMA2D_ConfigLayer+0xb2>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b09      	cmp	r3, #9
 800448c:	d127      	bne.n	80044de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
 800449c:	e01f      	b.n	80044de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	ea02 0103 	and.w	r1, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b0a      	cmp	r3, #10
 80044c6:	d003      	beq.n	80044d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d106      	bne.n	80044de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	ff03000f 	.word	0xff03000f

08004500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	e175      	b.n	800480c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	f040 8164 	bne.w	8004806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00b      	beq.n	800455e <HAL_GPIO_Init+0x5e>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004552:	2b11      	cmp	r3, #17
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b12      	cmp	r3, #18
 800455c:	d130      	bne.n	80045c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004594:	2201      	movs	r2, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 0201 	and.w	r2, r3, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x100>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b12      	cmp	r3, #18
 80045fe:	d123      	bne.n	8004648 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	08da      	lsrs	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3208      	adds	r2, #8
 8004608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80be 	beq.w	8004806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468a:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_GPIO_Init+0x324>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_GPIO_Init+0x324>)
 8004690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004694:	6453      	str	r3, [r2, #68]	; 0x44
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_GPIO_Init+0x324>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80046a2:	4a61      	ldr	r2, [pc, #388]	; (8004828 <HAL_GPIO_Init+0x328>)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	220f      	movs	r2, #15
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a58      	ldr	r2, [pc, #352]	; (800482c <HAL_GPIO_Init+0x32c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d037      	beq.n	800473e <HAL_GPIO_Init+0x23e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a57      	ldr	r2, [pc, #348]	; (8004830 <HAL_GPIO_Init+0x330>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_GPIO_Init+0x23a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a56      	ldr	r2, [pc, #344]	; (8004834 <HAL_GPIO_Init+0x334>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <HAL_GPIO_Init+0x236>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a55      	ldr	r2, [pc, #340]	; (8004838 <HAL_GPIO_Init+0x338>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d025      	beq.n	8004732 <HAL_GPIO_Init+0x232>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_GPIO_Init+0x33c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <HAL_GPIO_Init+0x22e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a53      	ldr	r2, [pc, #332]	; (8004840 <HAL_GPIO_Init+0x340>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_Init+0x22a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_GPIO_Init+0x344>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x226>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a51      	ldr	r2, [pc, #324]	; (8004848 <HAL_GPIO_Init+0x348>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_Init+0x222>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a50      	ldr	r2, [pc, #320]	; (800484c <HAL_GPIO_Init+0x34c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_Init+0x21e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4f      	ldr	r2, [pc, #316]	; (8004850 <HAL_GPIO_Init+0x350>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_Init+0x21a>
 8004716:	2309      	movs	r3, #9
 8004718:	e012      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800471a:	230a      	movs	r3, #10
 800471c:	e010      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800471e:	2308      	movs	r3, #8
 8004720:	e00e      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004722:	2307      	movs	r3, #7
 8004724:	e00c      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004726:	2306      	movs	r3, #6
 8004728:	e00a      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800472a:	2305      	movs	r3, #5
 800472c:	e008      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800472e:	2304      	movs	r3, #4
 8004730:	e006      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004732:	2303      	movs	r3, #3
 8004734:	e004      	b.n	8004740 <HAL_GPIO_Init+0x240>
 8004736:	2302      	movs	r3, #2
 8004738:	e002      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_GPIO_Init+0x240>
 800473e:	2300      	movs	r3, #0
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	f002 0203 	and.w	r2, r2, #3
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	4093      	lsls	r3, r2
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004750:	4935      	ldr	r1, [pc, #212]	; (8004828 <HAL_GPIO_Init+0x328>)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	3302      	adds	r3, #2
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <HAL_GPIO_Init+0x354>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004782:	4a34      	ldr	r2, [pc, #208]	; (8004854 <HAL_GPIO_Init+0x354>)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004788:	4b32      	ldr	r3, [pc, #200]	; (8004854 <HAL_GPIO_Init+0x354>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ac:	4a29      	ldr	r2, [pc, #164]	; (8004854 <HAL_GPIO_Init+0x354>)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_GPIO_Init+0x354>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4013      	ands	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_GPIO_Init+0x354>)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_GPIO_Init+0x354>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <HAL_GPIO_Init+0x354>)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	f67f ae86 	bls.w	8004520 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	40013800 	.word	0x40013800
 800482c:	40020000 	.word	0x40020000
 8004830:	40020400 	.word	0x40020400
 8004834:	40020800 	.word	0x40020800
 8004838:	40020c00 	.word	0x40020c00
 800483c:	40021000 	.word	0x40021000
 8004840:	40021400 	.word	0x40021400
 8004844:	40021800 	.word	0x40021800
 8004848:	40021c00 	.word	0x40021c00
 800484c:	40022000 	.word	0x40022000
 8004850:	40022400 	.word	0x40022400
 8004854:	40013c00 	.word	0x40013c00

08004858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e001      	b.n	800487a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048a4:	e003      	b.n	80048ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	041a      	lsls	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048cc:	887a      	ldrh	r2, [r7, #2]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4013      	ands	r3, r2
 80048d2:	041a      	lsls	r2, r3, #16
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43d9      	mvns	r1, r3
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	400b      	ands	r3, r1
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	619a      	str	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f0:	b08f      	sub	sp, #60	; 0x3c
 80048f2:	af0a      	add	r7, sp, #40	; 0x28
 80048f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e054      	b.n	80049aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f00a ffa2 	bl	800f864 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f007 ff57 	bl	800c7f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	687e      	ldr	r6, [r7, #4]
 800494c:	466d      	mov	r5, sp
 800494e:	f106 0410 	add.w	r4, r6, #16
 8004952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800495e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004962:	1d33      	adds	r3, r6, #4
 8004964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004966:	6838      	ldr	r0, [r7, #0]
 8004968:	f007 feda 	bl	800c720 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f007 ff4e 	bl	800c814 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	687e      	ldr	r6, [r7, #4]
 8004980:	466d      	mov	r5, sp
 8004982:	f106 0410 	add.w	r4, r6, #16
 8004986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800498c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004992:	e885 0003 	stmia.w	r5, {r0, r1}
 8004996:	1d33      	adds	r3, r6, #4
 8004998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800499a:	6838      	ldr	r0, [r7, #0]
 800499c:	f008 f860 	bl	800ca60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80049b2:	b590      	push	{r4, r7, lr}
 80049b4:	b089      	sub	sp, #36	; 0x24
 80049b6:	af04      	add	r7, sp, #16
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	4608      	mov	r0, r1
 80049bc:	4611      	mov	r1, r2
 80049be:	461a      	mov	r2, r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	70fb      	strb	r3, [r7, #3]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70bb      	strb	r3, [r7, #2]
 80049c8:	4613      	mov	r3, r2
 80049ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_HCD_HC_Init+0x28>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e076      	b.n	8004ac8 <HAL_HCD_HC_Init+0x116>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	333d      	adds	r3, #61	; 0x3d
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3338      	adds	r3, #56	; 0x38
 8004a02:	787a      	ldrb	r2, [r7, #1]
 8004a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3340      	adds	r3, #64	; 0x40
 8004a14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a16:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3339      	adds	r3, #57	; 0x39
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	333f      	adds	r3, #63	; 0x3f
 8004a38:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	78ba      	ldrb	r2, [r7, #2]
 8004a42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a46:	b2d0      	uxtb	r0, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	333a      	adds	r3, #58	; 0x3a
 8004a54:	4602      	mov	r2, r0
 8004a56:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da09      	bge.n	8004a74 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	333b      	adds	r3, #59	; 0x3b
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e008      	b.n	8004a86 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	333b      	adds	r3, #59	; 0x3b
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	333c      	adds	r3, #60	; 0x3c
 8004a94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a98:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	787c      	ldrb	r4, [r7, #1]
 8004aa0:	78ba      	ldrb	r2, [r7, #2]
 8004aa2:	78f9      	ldrb	r1, [r7, #3]
 8004aa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004aa6:	9302      	str	r3, [sp, #8]
 8004aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	f008 f949 	bl	800cd4c <USB_HC_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd90      	pop	{r4, r7, pc}

08004ad0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_HCD_HC_Halt+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e00f      	b.n	8004b0e <HAL_HCD_HC_Halt+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f008 fb85 	bl	800d20e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70bb      	strb	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	333b      	adds	r3, #59	; 0x3b
 8004b40:	78ba      	ldrb	r2, [r7, #2]
 8004b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	333f      	adds	r3, #63	; 0x3f
 8004b52:	787a      	ldrb	r2, [r7, #1]
 8004b54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b56:	7c3b      	ldrb	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d112      	bne.n	8004b82 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	212c      	movs	r1, #44	; 0x2c
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3342      	adds	r3, #66	; 0x42
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	333d      	adds	r3, #61	; 0x3d
 8004b7c:	7f3a      	ldrb	r2, [r7, #28]
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e008      	b.n	8004b94 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3342      	adds	r3, #66	; 0x42
 8004b90:	2202      	movs	r2, #2
 8004b92:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b94:	787b      	ldrb	r3, [r7, #1]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	f200 80c6 	bhi.w	8004d28 <HAL_HCD_HC_SubmitRequest+0x210>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004d15 	.word	0x08004d15
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004c97 	.word	0x08004c97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004bb4:	7c3b      	ldrb	r3, [r7, #16]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 80b8 	bne.w	8004d2c <HAL_HCD_HC_SubmitRequest+0x214>
 8004bbc:	78bb      	ldrb	r3, [r7, #2]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 80b4 	bne.w	8004d2c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004bc4:	8b3b      	ldrh	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3355      	adds	r3, #85	; 0x55
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3355      	adds	r3, #85	; 0x55
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3342      	adds	r3, #66	; 0x42
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c02:	e093      	b.n	8004d2c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	3342      	adds	r3, #66	; 0x42
 8004c12:	2202      	movs	r2, #2
 8004c14:	701a      	strb	r2, [r3, #0]
      break;
 8004c16:	e089      	b.n	8004d2c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c18:	78bb      	ldrb	r3, [r7, #2]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3355      	adds	r3, #85	; 0x55
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3342      	adds	r3, #66	; 0x42
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c44:	e073      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3342      	adds	r3, #66	; 0x42
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
      break;
 8004c58:	e069      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3354      	adds	r3, #84	; 0x54
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3342      	adds	r3, #66	; 0x42
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
      break;
 8004c80:	e055      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3342      	adds	r3, #66	; 0x42
 8004c90:	2202      	movs	r2, #2
 8004c92:	701a      	strb	r2, [r3, #0]
      break;
 8004c94:	e04b      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c96:	78bb      	ldrb	r3, [r7, #2]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11d      	bne.n	8004cd8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3355      	adds	r3, #85	; 0x55
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3342      	adds	r3, #66	; 0x42
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cc2:	e034      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	212c      	movs	r1, #44	; 0x2c
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	3342      	adds	r3, #66	; 0x42
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	701a      	strb	r2, [r3, #0]
      break;
 8004cd6:	e02a      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3354      	adds	r3, #84	; 0x54
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	212c      	movs	r1, #44	; 0x2c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3342      	adds	r3, #66	; 0x42
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
      break;
 8004cfe:	e016      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3342      	adds	r3, #66	; 0x42
 8004d0e:	2202      	movs	r2, #2
 8004d10:	701a      	strb	r2, [r3, #0]
      break;
 8004d12:	e00c      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3342      	adds	r3, #66	; 0x42
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004d2c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3344      	adds	r3, #68	; 0x44
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	8b3a      	ldrh	r2, [r7, #24]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	202c      	movs	r0, #44	; 0x2c
 8004d48:	fb00 f303 	mul.w	r3, r0, r3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	334c      	adds	r3, #76	; 0x4c
 8004d50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3350      	adds	r3, #80	; 0x50
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	3339      	adds	r3, #57	; 0x39
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3361      	adds	r3, #97	; 0x61
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	222c      	movs	r2, #44	; 0x2c
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	3338      	adds	r3, #56	; 0x38
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	18d1      	adds	r1, r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	f008 f8d8 	bl	800cf68 <USB_HC_StartXfer>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop

08004dc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f007 fdfd 	bl	800c9da <USB_GetMode>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	f040 80ef 	bne.w	8004fc6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f007 fde1 	bl	800c9b4 <USB_ReadInterrupts>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80e5 	beq.w	8004fc4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f007 fdd8 	bl	800c9b4 <USB_ReadInterrupts>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0e:	d104      	bne.n	8004e1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f007 fdc8 	bl	800c9b4 <USB_ReadInterrupts>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d104      	bne.n	8004e3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f007 fdb8 	bl	800c9b4 <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4e:	d104      	bne.n	8004e5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f007 fda8 	bl	800c9b4 <USB_ReadInterrupts>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d103      	bne.n	8004e76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f007 fd9a 	bl	800c9b4 <USB_ReadInterrupts>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8a:	d115      	bne.n	8004eb8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d108      	bne.n	8004eb8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f00a fd4e 	bl	800f948 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f007 fe84 	bl	800cbc0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f007 fd79 	bl	800c9b4 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ecc:	d102      	bne.n	8004ed4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f9ff 	bl	80062d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f007 fd6b 	bl	800c9b4 <USB_ReadInterrupts>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d106      	bne.n	8004ef6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f00a fd11 	bl	800f910 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f007 fd5a 	bl	800c9b4 <USB_ReadInterrupts>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d101      	bne.n	8004f0e <HAL_HCD_IRQHandler+0x14a>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_HCD_IRQHandler+0x14c>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0210 	bic.w	r2, r2, #16
 8004f22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 f902 	bl	800612e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0210 	orr.w	r2, r2, #16
 8004f38:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f007 fd38 	bl	800c9b4 <USB_ReadInterrupts>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f4e:	d13a      	bne.n	8004fc6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f008 f949 	bl	800d1ec <USB_HC_ReadInterrupt>
 8004f5a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e025      	b.n	8004fae <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d106      	bne.n	8004f9c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8ab 	bl	80050f0 <HCD_HC_IN_IRQHandler>
 8004f9a:	e005      	b.n	8004fa8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fcc6 	bl	8005934 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3d4      	bcc.n	8004f62 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc0:	615a      	str	r2, [r3, #20]
 8004fc2:	e000      	b.n	8004fc6 <HAL_HCD_IRQHandler+0x202>
      return;
 8004fc4:	bf00      	nop
    }
  }
}
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_HCD_Start+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e013      	b.n	800500a <HAL_HCD_Start+0x3e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f007 fbee 	bl	800c7d0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f007 fe44 	bl	800cc88 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_HCD_Stop+0x16>
 8005024:	2302      	movs	r3, #2
 8005026:	e00d      	b.n	8005044 <HAL_HCD_Stop+0x32>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f008 fa43 	bl	800d4c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f007 fdeb 	bl	800cc34 <USB_ResetPort>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	212c      	movs	r1, #44	; 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3360      	adds	r3, #96	; 0x60
 8005082:	781b      	ldrb	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	212c      	movs	r1, #44	; 0x2c
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	3350      	adds	r3, #80	; 0x50
 80050aa:	681b      	ldr	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f007 fe2f 	bl	800cd28 <USB_GetCurrentFrame>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f007 fe0a 	bl	800ccfa <USB_GetHostSpeed>
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d119      	bne.n	8005154 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	461a      	mov	r2, r3
 800512e:	2304      	movs	r3, #4
 8005130:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	440a      	add	r2, r1
 8005148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514c:	f043 0302 	orr.w	r3, r3, #2
 8005150:	60d3      	str	r3, [r2, #12]
 8005152:	e101      	b.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d12b      	bne.n	80051c4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005178:	461a      	mov	r2, r3
 800517a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800517e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	212c      	movs	r1, #44	; 0x2c
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	3361      	adds	r3, #97	; 0x61
 800518e:	2207      	movs	r2, #7
 8005190:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f008 f826 	bl	800d20e <USB_HC_Halt>
 80051c2:	e0c9      	b.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d109      	bne.n	80051ee <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	461a      	mov	r2, r3
 80051e8:	2320      	movs	r3, #32
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	e0b4      	b.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d133      	bne.n	800526c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	440a      	add	r2, r1
 800521a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3361      	adds	r3, #97	; 0x61
 8005232:	2205      	movs	r2, #5
 8005234:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	461a      	mov	r2, r3
 8005244:	2310      	movs	r3, #16
 8005246:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	461a      	mov	r2, r3
 8005256:	2308      	movs	r3, #8
 8005258:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f007 ffd2 	bl	800d20e <USB_HC_Halt>
 800526a:	e075      	b.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d134      	bne.n	80052ee <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3361      	adds	r3, #97	; 0x61
 80052b2:	2208      	movs	r2, #8
 80052b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	461a      	mov	r2, r3
 80052c4:	2310      	movs	r3, #16
 80052c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	4611      	mov	r1, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f007 ff91 	bl	800d20e <USB_HC_Halt>
 80052ec:	e034      	b.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d129      	bne.n	8005358 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	440a      	add	r2, r1
 800531a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531e:	f043 0302 	orr.w	r3, r3, #2
 8005322:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	212c      	movs	r1, #44	; 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3361      	adds	r3, #97	; 0x61
 8005332:	2206      	movs	r2, #6
 8005334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f007 ff64 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536e:	d122      	bne.n	80053b6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f007 ff37 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	461a      	mov	r2, r3
 80053ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80053b4:	e2ba      	b.n	800592c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	f040 811b 	bne.w	8005604 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d019      	beq.n	800540a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	212c      	movs	r1, #44	; 0x2c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	3348      	adds	r3, #72	; 0x48
 80053e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0159      	lsls	r1, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	440b      	add	r3, r1
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	202c      	movs	r0, #44	; 0x2c
 8005400:	fb00 f303 	mul.w	r3, r0, r3
 8005404:	440b      	add	r3, r1
 8005406:	3350      	adds	r3, #80	; 0x50
 8005408:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3361      	adds	r3, #97	; 0x61
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	335c      	adds	r3, #92	; 0x5c
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	461a      	mov	r2, r3
 800543c:	2301      	movs	r3, #1
 800543e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	333f      	adds	r3, #63	; 0x3f
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	212c      	movs	r1, #44	; 0x2c
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	333f      	adds	r3, #63	; 0x3f
 8005462:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005464:	2b02      	cmp	r3, #2
 8005466:	d121      	bne.n	80054ac <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	440a      	add	r2, r1
 800547e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005482:	f043 0302 	orr.w	r3, r3, #2
 8005486:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f007 febb 	bl	800d20e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	461a      	mov	r2, r3
 80054a6:	2310      	movs	r3, #16
 80054a8:	6093      	str	r3, [r2, #8]
 80054aa:	e066      	b.n	800557a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	333f      	adds	r3, #63	; 0x3f
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d127      	bne.n	8005510 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054de:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3360      	adds	r3, #96	; 0x60
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	b2d9      	uxtb	r1, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	202c      	movs	r0, #44	; 0x2c
 80054fc:	fb00 f303 	mul.w	r3, r0, r3
 8005500:	4413      	add	r3, r2
 8005502:	3360      	adds	r3, #96	; 0x60
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f00a fa2b 	bl	800f964 <HAL_HCD_HC_NotifyURBChange_Callback>
 800550e:	e034      	b.n	800557a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	212c      	movs	r1, #44	; 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	333f      	adds	r3, #63	; 0x3f
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12a      	bne.n	800557a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	212c      	movs	r1, #44	; 0x2c
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	4413      	add	r3, r2
 8005530:	3360      	adds	r3, #96	; 0x60
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	212c      	movs	r1, #44	; 0x2c
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	4413      	add	r3, r2
 8005542:	3354      	adds	r3, #84	; 0x54
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2d8      	uxtb	r0, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3354      	adds	r3, #84	; 0x54
 800555a:	4602      	mov	r2, r0
 800555c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	b2d9      	uxtb	r1, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	202c      	movs	r0, #44	; 0x2c
 8005568:	fb00 f303 	mul.w	r3, r0, r3
 800556c:	4413      	add	r3, r2
 800556e:	3360      	adds	r3, #96	; 0x60
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f00a f9f5 	bl	800f964 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d12b      	bne.n	80055da <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3348      	adds	r3, #72	; 0x48
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	202c      	movs	r0, #44	; 0x2c
 8005598:	fb00 f202 	mul.w	r2, r0, r2
 800559c:	440a      	add	r2, r1
 800559e:	3240      	adds	r2, #64	; 0x40
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 81be 	beq.w	800592c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3354      	adds	r3, #84	; 0x54
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f083 0301 	eor.w	r3, r3, #1
 80055c4:	b2d8      	uxtb	r0, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	212c      	movs	r1, #44	; 0x2c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	3354      	adds	r3, #84	; 0x54
 80055d4:	4602      	mov	r2, r0
 80055d6:	701a      	strb	r2, [r3, #0]
}
 80055d8:	e1a8      	b.n	800592c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	212c      	movs	r1, #44	; 0x2c
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	3354      	adds	r3, #84	; 0x54
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f083 0301 	eor.w	r3, r3, #1
 80055ee:	b2d8      	uxtb	r0, r3
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	212c      	movs	r1, #44	; 0x2c
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	3354      	adds	r3, #84	; 0x54
 80055fe:	4602      	mov	r2, r0
 8005600:	701a      	strb	r2, [r3, #0]
}
 8005602:	e193      	b.n	800592c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	f040 8106 	bne.w	8005828 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	440a      	add	r2, r1
 8005632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005636:	f023 0302 	bic.w	r3, r3, #2
 800563a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	212c      	movs	r1, #44	; 0x2c
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	3361      	adds	r3, #97	; 0x61
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d109      	bne.n	8005664 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	212c      	movs	r1, #44	; 0x2c
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	3360      	adds	r3, #96	; 0x60
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e0c9      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	212c      	movs	r1, #44	; 0x2c
 800566a:	fb01 f303 	mul.w	r3, r1, r3
 800566e:	4413      	add	r3, r2
 8005670:	3361      	adds	r3, #97	; 0x61
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d109      	bne.n	800568c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3360      	adds	r3, #96	; 0x60
 8005686:	2205      	movs	r2, #5
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e0b5      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3361      	adds	r3, #97	; 0x61
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b06      	cmp	r3, #6
 800569e:	d009      	beq.n	80056b4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	3361      	adds	r3, #97	; 0x61
 80056ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d150      	bne.n	8005756 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	335c      	adds	r3, #92	; 0x5c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	202c      	movs	r0, #44	; 0x2c
 80056cc:	fb00 f303 	mul.w	r3, r0, r3
 80056d0:	440b      	add	r3, r1
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	212c      	movs	r1, #44	; 0x2c
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	335c      	adds	r3, #92	; 0x5c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d912      	bls.n	8005710 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	212c      	movs	r1, #44	; 0x2c
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	4413      	add	r3, r2
 80056f6:	335c      	adds	r3, #92	; 0x5c
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	212c      	movs	r1, #44	; 0x2c
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	3360      	adds	r3, #96	; 0x60
 800570a:	2204      	movs	r2, #4
 800570c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800570e:	e073      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	212c      	movs	r1, #44	; 0x2c
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	3360      	adds	r3, #96	; 0x60
 800571e:	2202      	movs	r2, #2
 8005720:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005738:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005740:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005754:	e050      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	212c      	movs	r1, #44	; 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	3361      	adds	r3, #97	; 0x61
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d122      	bne.n	80057b0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	212c      	movs	r1, #44	; 0x2c
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	3360      	adds	r3, #96	; 0x60
 8005778:	2202      	movs	r2, #2
 800577a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005792:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800579a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	461a      	mov	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e023      	b.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	212c      	movs	r1, #44	; 0x2c
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	3361      	adds	r3, #97	; 0x61
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b07      	cmp	r3, #7
 80057c2:	d119      	bne.n	80057f8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	212c      	movs	r1, #44	; 0x2c
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	335c      	adds	r3, #92	; 0x5c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	202c      	movs	r0, #44	; 0x2c
 80057dc:	fb00 f303 	mul.w	r3, r0, r3
 80057e0:	440b      	add	r3, r1
 80057e2:	335c      	adds	r3, #92	; 0x5c
 80057e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	212c      	movs	r1, #44	; 0x2c
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	3360      	adds	r3, #96	; 0x60
 80057f4:	2204      	movs	r2, #4
 80057f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005804:	461a      	mov	r2, r3
 8005806:	2302      	movs	r3, #2
 8005808:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	b2d9      	uxtb	r1, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	202c      	movs	r0, #44	; 0x2c
 8005814:	fb00 f303 	mul.w	r3, r0, r3
 8005818:	4413      	add	r3, r2
 800581a:	3360      	adds	r3, #96	; 0x60
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f00a f89f 	bl	800f964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005826:	e081      	b.n	800592c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b10      	cmp	r3, #16
 800583c:	d176      	bne.n	800592c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	212c      	movs	r1, #44	; 0x2c
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	333f      	adds	r3, #63	; 0x3f
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d121      	bne.n	8005896 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	212c      	movs	r1, #44	; 0x2c
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	335c      	adds	r3, #92	; 0x5c
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	440a      	add	r2, r1
 800587a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f007 fcbd 	bl	800d20e <USB_HC_Halt>
 8005894:	e041      	b.n	800591a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	212c      	movs	r1, #44	; 0x2c
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	333f      	adds	r3, #63	; 0x3f
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	212c      	movs	r1, #44	; 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	333f      	adds	r3, #63	; 0x3f
 80058b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d12d      	bne.n	800591a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	335c      	adds	r3, #92	; 0x5c
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d120      	bne.n	800591a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	212c      	movs	r1, #44	; 0x2c
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	3361      	adds	r3, #97	; 0x61
 80058e6:	2203      	movs	r2, #3
 80058e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f007 fc7a 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005926:	461a      	mov	r2, r3
 8005928:	2310      	movs	r3, #16
 800592a:	6093      	str	r3, [r2, #8]
}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4413      	add	r3, r2
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d119      	bne.n	8005998 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	2304      	movs	r3, #4
 8005974:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	440a      	add	r2, r1
 800598c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005990:	f043 0302 	orr.w	r3, r3, #2
 8005994:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005996:	e3c6      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d13e      	bne.n	8005a2c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	2320      	movs	r3, #32
 80059be:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	212c      	movs	r1, #44	; 0x2c
 80059c6:	fb01 f303 	mul.w	r3, r1, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	333d      	adds	r3, #61	; 0x3d
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	f040 83a8 	bne.w	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	212c      	movs	r1, #44	; 0x2c
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	333d      	adds	r3, #61	; 0x3d
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	212c      	movs	r1, #44	; 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	3360      	adds	r3, #96	; 0x60
 80059f6:	2202      	movs	r2, #2
 80059f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f007 fbf2 	bl	800d20e <USB_HC_Halt>
}
 8005a2a:	e37c      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a42:	d122      	bne.n	8005a8a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a5e:	f043 0302 	orr.w	r3, r3, #2
 8005a62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f007 fbcd 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	461a      	mov	r2, r3
 8005a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a86:	6093      	str	r3, [r2, #8]
}
 8005a88:	e34d      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d150      	bne.n	8005b42 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	212c      	movs	r1, #44	; 0x2c
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	4413      	add	r3, r2
 8005aac:	335c      	adds	r3, #92	; 0x5c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d111      	bne.n	8005aec <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	212c      	movs	r1, #44	; 0x2c
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	333d      	adds	r3, #61	; 0x3d
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b06:	f043 0302 	orr.w	r3, r3, #2
 8005b0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f007 fb79 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	3361      	adds	r3, #97	; 0x61
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
}
 8005b40:	e2f1      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d13c      	bne.n	8005bd2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	212c      	movs	r1, #44	; 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	3361      	adds	r3, #97	; 0x61
 8005b66:	2204      	movs	r2, #4
 8005b68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	212c      	movs	r1, #44	; 0x2c
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	333d      	adds	r3, #61	; 0x3d
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	212c      	movs	r1, #44	; 0x2c
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	335c      	adds	r3, #92	; 0x5c
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f007 fb28 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2340      	movs	r3, #64	; 0x40
 8005bce:	6093      	str	r3, [r2, #8]
}
 8005bd0:	e2a9      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d12a      	bne.n	8005c3e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f007 faf2 	bl	800d20e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	4413      	add	r3, r2
 8005c36:	3361      	adds	r3, #97	; 0x61
 8005c38:	2205      	movs	r2, #5
 8005c3a:	701a      	strb	r2, [r3, #0]
}
 8005c3c:	e273      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d150      	bne.n	8005cf6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	212c      	movs	r1, #44	; 0x2c
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	335c      	adds	r3, #92	; 0x5c
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	212c      	movs	r1, #44	; 0x2c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	3361      	adds	r3, #97	; 0x61
 8005c74:	2203      	movs	r2, #3
 8005c76:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	212c      	movs	r1, #44	; 0x2c
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	333d      	adds	r3, #61	; 0x3d
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d112      	bne.n	8005cb2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	212c      	movs	r1, #44	; 0x2c
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	333c      	adds	r3, #60	; 0x3c
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	212c      	movs	r1, #44	; 0x2c
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	4413      	add	r3, r2
 8005cac:	333d      	adds	r3, #61	; 0x3d
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f007 fa96 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	6093      	str	r3, [r2, #8]
}
 8005cf4:	e217      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d174      	bne.n	8005df6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d121      	bne.n	8005d58 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	212c      	movs	r1, #44	; 0x2c
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	3361      	adds	r3, #97	; 0x61
 8005d22:	2206      	movs	r2, #6
 8005d24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f007 fa5c 	bl	800d20e <USB_HC_Halt>
 8005d56:	e044      	b.n	8005de2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	335c      	adds	r3, #92	; 0x5c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	202c      	movs	r0, #44	; 0x2c
 8005d70:	fb00 f303 	mul.w	r3, r0, r3
 8005d74:	440b      	add	r3, r1
 8005d76:	335c      	adds	r3, #92	; 0x5c
 8005d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	212c      	movs	r1, #44	; 0x2c
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	335c      	adds	r3, #92	; 0x5c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d920      	bls.n	8005dd0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	212c      	movs	r1, #44	; 0x2c
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	335c      	adds	r3, #92	; 0x5c
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	212c      	movs	r1, #44	; 0x2c
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	4413      	add	r3, r2
 8005dac:	3360      	adds	r3, #96	; 0x60
 8005dae:	2204      	movs	r2, #4
 8005db0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	b2d9      	uxtb	r1, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	202c      	movs	r0, #44	; 0x2c
 8005dbc:	fb00 f303 	mul.w	r3, r0, r3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3360      	adds	r3, #96	; 0x60
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f009 fdcb 	bl	800f964 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dce:	e008      	b.n	8005de2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	212c      	movs	r1, #44	; 0x2c
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	3360      	adds	r3, #96	; 0x60
 8005dde:	2202      	movs	r2, #2
 8005de0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	461a      	mov	r2, r3
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	6093      	str	r3, [r2, #8]
}
 8005df4:	e197      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0c:	d134      	bne.n	8005e78 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f007 f9e8 	bl	800d20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	212c      	movs	r1, #44	; 0x2c
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	3361      	adds	r3, #97	; 0x61
 8005e72:	2208      	movs	r2, #8
 8005e74:	701a      	strb	r2, [r3, #0]
}
 8005e76:	e156      	b.n	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	f040 814b 	bne.w	8006126 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eaa:	f023 0302 	bic.w	r3, r3, #2
 8005eae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	212c      	movs	r1, #44	; 0x2c
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	4413      	add	r3, r2
 8005ebc:	3361      	adds	r3, #97	; 0x61
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d179      	bne.n	8005fb8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	212c      	movs	r1, #44	; 0x2c
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	3360      	adds	r3, #96	; 0x60
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	212c      	movs	r1, #44	; 0x2c
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	333f      	adds	r3, #63	; 0x3f
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d00a      	beq.n	8005f00 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	212c      	movs	r1, #44	; 0x2c
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	333f      	adds	r3, #63	; 0x3f
 8005ef8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f040 80fc 	bne.w	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d142      	bne.n	8005f8e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	212c      	movs	r1, #44	; 0x2c
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	334c      	adds	r3, #76	; 0x4c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80ed 	beq.w	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	212c      	movs	r1, #44	; 0x2c
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	334c      	adds	r3, #76	; 0x4c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	202c      	movs	r0, #44	; 0x2c
 8005f34:	fb00 f202 	mul.w	r2, r0, r2
 8005f38:	440a      	add	r2, r1
 8005f3a:	3240      	adds	r2, #64	; 0x40
 8005f3c:	8812      	ldrh	r2, [r2, #0]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b01      	subs	r3, #1
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	202c      	movs	r0, #44	; 0x2c
 8005f48:	fb00 f202 	mul.w	r2, r0, r2
 8005f4c:	440a      	add	r2, r1
 8005f4e:	3240      	adds	r2, #64	; 0x40
 8005f50:	8812      	ldrh	r2, [r2, #0]
 8005f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80ca 	beq.w	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	212c      	movs	r1, #44	; 0x2c
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	3355      	adds	r3, #85	; 0x55
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f083 0301 	eor.w	r3, r3, #1
 8005f78:	b2d8      	uxtb	r0, r3
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	212c      	movs	r1, #44	; 0x2c
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	3355      	adds	r3, #85	; 0x55
 8005f88:	4602      	mov	r2, r0
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e0b4      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	212c      	movs	r1, #44	; 0x2c
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	3355      	adds	r3, #85	; 0x55
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f083 0301 	eor.w	r3, r3, #1
 8005fa2:	b2d8      	uxtb	r0, r3
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	212c      	movs	r1, #44	; 0x2c
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	3355      	adds	r3, #85	; 0x55
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e09f      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	212c      	movs	r1, #44	; 0x2c
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3361      	adds	r3, #97	; 0x61
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d109      	bne.n	8005fe0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	212c      	movs	r1, #44	; 0x2c
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3360      	adds	r3, #96	; 0x60
 8005fda:	2202      	movs	r2, #2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e08b      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	212c      	movs	r1, #44	; 0x2c
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	3361      	adds	r3, #97	; 0x61
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d109      	bne.n	8006008 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	3360      	adds	r3, #96	; 0x60
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e077      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	3361      	adds	r3, #97	; 0x61
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b05      	cmp	r3, #5
 800601a:	d109      	bne.n	8006030 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	212c      	movs	r1, #44	; 0x2c
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	3360      	adds	r3, #96	; 0x60
 800602a:	2205      	movs	r2, #5
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e063      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	212c      	movs	r1, #44	; 0x2c
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	4413      	add	r3, r2
 800603c:	3361      	adds	r3, #97	; 0x61
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d009      	beq.n	8006058 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	212c      	movs	r1, #44	; 0x2c
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	3361      	adds	r3, #97	; 0x61
 8006052:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006054:	2b08      	cmp	r3, #8
 8006056:	d14f      	bne.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	212c      	movs	r1, #44	; 0x2c
 800605e:	fb01 f303 	mul.w	r3, r1, r3
 8006062:	4413      	add	r3, r2
 8006064:	335c      	adds	r3, #92	; 0x5c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	202c      	movs	r0, #44	; 0x2c
 8006070:	fb00 f303 	mul.w	r3, r0, r3
 8006074:	440b      	add	r3, r1
 8006076:	335c      	adds	r3, #92	; 0x5c
 8006078:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	212c      	movs	r1, #44	; 0x2c
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	335c      	adds	r3, #92	; 0x5c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d912      	bls.n	80060b4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	212c      	movs	r1, #44	; 0x2c
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	4413      	add	r3, r2
 800609a:	335c      	adds	r3, #92	; 0x5c
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	212c      	movs	r1, #44	; 0x2c
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	3360      	adds	r3, #96	; 0x60
 80060ae:	2204      	movs	r2, #4
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e021      	b.n	80060f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	212c      	movs	r1, #44	; 0x2c
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	3360      	adds	r3, #96	; 0x60
 80060c2:	2202      	movs	r2, #2
 80060c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	461a      	mov	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006104:	461a      	mov	r2, r3
 8006106:	2302      	movs	r3, #2
 8006108:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	b2d9      	uxtb	r1, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	202c      	movs	r0, #44	; 0x2c
 8006114:	fb00 f303 	mul.w	r3, r0, r3
 8006118:	4413      	add	r3, r2
 800611a:	3360      	adds	r3, #96	; 0x60
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f009 fc1f 	bl	800f964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08a      	sub	sp, #40	; 0x28
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	0c5b      	lsrs	r3, r3, #17
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d004      	beq.n	8006174 <HCD_RXQLVL_IRQHandler+0x46>
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b05      	cmp	r3, #5
 800616e:	f000 80a9 	beq.w	80062c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006172:	e0aa      	b.n	80062ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80a6 	beq.w	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	212c      	movs	r1, #44	; 0x2c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	3344      	adds	r3, #68	; 0x44
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 809b 	beq.w	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	212c      	movs	r1, #44	; 0x2c
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	3350      	adds	r3, #80	; 0x50
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	441a      	add	r2, r3
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	202c      	movs	r0, #44	; 0x2c
 80061ac:	fb00 f303 	mul.w	r3, r0, r3
 80061b0:	440b      	add	r3, r1
 80061b2:	334c      	adds	r3, #76	; 0x4c
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d87a      	bhi.n	80062b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	212c      	movs	r1, #44	; 0x2c
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	3344      	adds	r3, #68	; 0x44
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	b292      	uxth	r2, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	f006 fbc5 	bl	800c962 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	212c      	movs	r1, #44	; 0x2c
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	3344      	adds	r3, #68	; 0x44
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	441a      	add	r2, r3
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	202c      	movs	r0, #44	; 0x2c
 80061f2:	fb00 f303 	mul.w	r3, r0, r3
 80061f6:	440b      	add	r3, r1
 80061f8:	3344      	adds	r3, #68	; 0x44
 80061fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	212c      	movs	r1, #44	; 0x2c
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	4413      	add	r3, r2
 8006208:	3350      	adds	r3, #80	; 0x50
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	441a      	add	r2, r3
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	202c      	movs	r0, #44	; 0x2c
 8006216:	fb00 f303 	mul.w	r3, r0, r3
 800621a:	440b      	add	r3, r1
 800621c:	3350      	adds	r3, #80	; 0x50
 800621e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	0cdb      	lsrs	r3, r3, #19
 8006230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006234:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	212c      	movs	r1, #44	; 0x2c
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	4413      	add	r3, r2
 8006242:	3340      	adds	r3, #64	; 0x40
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4293      	cmp	r3, r2
 800624c:	d13c      	bne.n	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d039      	beq.n	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800626a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006272:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	461a      	mov	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3354      	adds	r3, #84	; 0x54
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f083 0301 	eor.w	r3, r3, #1
 800629a:	b2d8      	uxtb	r0, r3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	3354      	adds	r3, #84	; 0x54
 80062aa:	4602      	mov	r2, r0
 80062ac:	701a      	strb	r2, [r3, #0]
      break;
 80062ae:	e00b      	b.n	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	212c      	movs	r1, #44	; 0x2c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	3360      	adds	r3, #96	; 0x60
 80062be:	2204      	movs	r2, #4
 80062c0:	701a      	strb	r2, [r3, #0]
      break;
 80062c2:	e001      	b.n	80062c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80062c8:	bf00      	nop
  }
}
 80062ca:	bf00      	nop
 80062cc:	3728      	adds	r7, #40	; 0x28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d10b      	bne.n	8006322 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d102      	bne.n	800631a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f009 fb09 	bl	800f92c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f043 0302 	orr.w	r3, r3, #2
 8006320:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d132      	bne.n	8006392 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f043 0308 	orr.w	r3, r3, #8
 8006332:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d126      	bne.n	800638c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d113      	bne.n	800636e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800634c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006350:	d106      	bne.n	8006360 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f006 fc31 	bl	800cbc0 <USB_InitFSLSPClkSel>
 800635e:	e011      	b.n	8006384 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f006 fc2a 	bl	800cbc0 <USB_InitFSLSPClkSel>
 800636c:	e00a      	b.n	8006384 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d106      	bne.n	8006384 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637c:	461a      	mov	r2, r3
 800637e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006382:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f009 fafb 	bl	800f980 <HAL_HCD_PortEnabled_Callback>
 800638a:	e002      	b.n	8006392 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f009 fb05 	bl	800f99c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b20      	cmp	r3, #32
 800639a:	d103      	bne.n	80063a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f043 0320 	orr.w	r3, r3, #32
 80063a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6013      	str	r3, [r2, #0]
}
 80063b0:	bf00      	nop
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e07f      	b.n	80064ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fc faf6 	bl	80029d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2224      	movs	r2, #36	; 0x24
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d107      	bne.n	8006432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	e006      	b.n	8006440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800643e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d104      	bne.n	8006452 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <HAL_I2C_Init+0x11c>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	ea42 0103 	orr.w	r1, r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	021a      	lsls	r2, r3, #8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1a      	ldr	r2, [r3, #32]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	02008000 	.word	0x02008000

080064d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d138      	bne.n	8006560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e032      	b.n	8006562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2224      	movs	r2, #36	; 0x24
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800652a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6819      	ldr	r1, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b20      	cmp	r3, #32
 8006582:	d139      	bne.n	80065f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800658e:	2302      	movs	r3, #2
 8006590:	e033      	b.n	80065fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2224      	movs	r2, #36	; 0x24
 800659e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0bf      	b.n	800679a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fc fa46 	bl	8002ac0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800664a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6999      	ldr	r1, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006660:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b4a      	ldr	r3, [pc, #296]	; (80067a4 <HAL_LTDC_Init+0x19c>)
 800667c:	400b      	ands	r3, r1
 800667e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6899      	ldr	r1, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68d9      	ldr	r1, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <HAL_LTDC_Init+0x19c>)
 80066aa:	400b      	ands	r3, r1
 80066ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68d9      	ldr	r1, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6919      	ldr	r1, [r3, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b33      	ldr	r3, [pc, #204]	; (80067a4 <HAL_LTDC_Init+0x19c>)
 80066d8:	400b      	ands	r3, r1
 80066da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6919      	ldr	r1, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <HAL_LTDC_Init+0x19c>)
 8006706:	400b      	ands	r3, r1
 8006708:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6959      	ldr	r1, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006738:	041b      	lsls	r3, r3, #16
 800673a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0206 	orr.w	r2, r2, #6
 8006776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	f000f800 	.word	0xf000f800

080067a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d023      	beq.n	8006812 <HAL_LTDC_IRQHandler+0x6a>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01e      	beq.n	8006812 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2204      	movs	r2, #4
 80067ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2204      	movs	r2, #4
 8006800:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f86f 	bl	80068f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <HAL_LTDC_IRQHandler+0xbc>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01e      	beq.n	8006864 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0202 	bic.w	r2, r2, #2
 8006834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2202      	movs	r2, #2
 800683c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006844:	f043 0202 	orr.w	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f846 	bl	80068f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d01b      	beq.n	80068a6 <HAL_LTDC_IRQHandler+0xfe>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d016      	beq.n	80068a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f82f 	bl	8006904 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01b      	beq.n	80068e8 <HAL_LTDC_IRQHandler+0x140>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0208 	bic.w	r2, r2, #8
 80068c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2208      	movs	r2, #8
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f818 	bl	8006918 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800692c:	b5b0      	push	{r4, r5, r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_LTDC_ConfigLayer+0x1a>
 8006942:	2302      	movs	r3, #2
 8006944:	e02c      	b.n	80069a0 <HAL_LTDC_ConfigLayer+0x74>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2134      	movs	r1, #52	; 0x34
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4614      	mov	r4, r2
 800696a:	461d      	mov	r5, r3
 800696c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800696e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f811 	bl	80069a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2201      	movs	r2, #1
 800698c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bdb0      	pop	{r4, r5, r7, pc}

080069a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c4:	4413      	add	r3, r2
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	01db      	lsls	r3, r3, #7
 80069d4:	4413      	add	r3, r2
 80069d6:	3384      	adds	r3, #132	; 0x84
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	4611      	mov	r1, r2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	01d2      	lsls	r2, r2, #7
 80069e4:	440a      	add	r2, r1
 80069e6:	3284      	adds	r2, #132	; 0x84
 80069e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fe:	4413      	add	r3, r2
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	440b      	add	r3, r1
 8006a0e:	3384      	adds	r3, #132	; 0x84
 8006a10:	4619      	mov	r1, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a26:	4413      	add	r3, r2
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	01db      	lsls	r3, r3, #7
 8006a36:	4413      	add	r3, r2
 8006a38:	3384      	adds	r3, #132	; 0x84
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	4611      	mov	r1, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	01d2      	lsls	r2, r2, #7
 8006a46:	440a      	add	r2, r1
 8006a48:	3284      	adds	r2, #132	; 0x84
 8006a4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5e:	4413      	add	r3, r2
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	01db      	lsls	r3, r3, #7
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3384      	adds	r3, #132	; 0x84
 8006a70:	4619      	mov	r1, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4413      	add	r3, r2
 8006a84:	3384      	adds	r3, #132	; 0x84
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	01d2      	lsls	r2, r2, #7
 8006a92:	440a      	add	r2, r1
 8006a94:	3284      	adds	r2, #132	; 0x84
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	01db      	lsls	r3, r3, #7
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3384      	adds	r3, #132	; 0x84
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	01db      	lsls	r3, r3, #7
 8006ad8:	4413      	add	r3, r2
 8006ada:	3384      	adds	r3, #132	; 0x84
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	01db      	lsls	r3, r3, #7
 8006ae8:	4413      	add	r3, r2
 8006aea:	3384      	adds	r3, #132	; 0x84
 8006aec:	461a      	mov	r2, r3
 8006aee:	2300      	movs	r3, #0
 8006af0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006af8:	461a      	mov	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	431a      	orrs	r2, r3
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	01db      	lsls	r3, r3, #7
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3384      	adds	r3, #132	; 0x84
 8006b10:	4619      	mov	r1, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	01db      	lsls	r3, r3, #7
 8006b22:	4413      	add	r3, r2
 8006b24:	3384      	adds	r3, #132	; 0x84
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	01d2      	lsls	r2, r2, #7
 8006b32:	440a      	add	r2, r1
 8006b34:	3284      	adds	r2, #132	; 0x84
 8006b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	01db      	lsls	r3, r3, #7
 8006b46:	4413      	add	r3, r2
 8006b48:	3384      	adds	r3, #132	; 0x84
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3384      	adds	r3, #132	; 0x84
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	01db      	lsls	r3, r3, #7
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3384      	adds	r3, #132	; 0x84
 8006b70:	4619      	mov	r1, r3
 8006b72:	4b58      	ldr	r3, [pc, #352]	; (8006cd4 <LTDC_SetConfig+0x32c>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	6809      	ldr	r1, [r1, #0]
 8006b84:	4608      	mov	r0, r1
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	01c9      	lsls	r1, r1, #7
 8006b8a:	4401      	add	r1, r0
 8006b8c:	3184      	adds	r1, #132	; 0x84
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	01db      	lsls	r3, r3, #7
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3384      	adds	r3, #132	; 0x84
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	01db      	lsls	r3, r3, #7
 8006bac:	4413      	add	r3, r2
 8006bae:	3384      	adds	r3, #132	; 0x84
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	01db      	lsls	r3, r3, #7
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3384      	adds	r3, #132	; 0x84
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e01b      	b.n	8006c12 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d102      	bne.n	8006be8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006be2:	2303      	movs	r3, #3
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	e014      	b.n	8006c12 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d00b      	beq.n	8006c08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d007      	beq.n	8006c08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d003      	beq.n	8006c08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	d102      	bne.n	8006c0e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	e001      	b.n	8006c12 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3384      	adds	r3, #132	; 0x84
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	4611      	mov	r1, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	01d2      	lsls	r2, r2, #7
 8006c2c:	440a      	add	r2, r1
 8006c2e:	3284      	adds	r2, #132	; 0x84
 8006c30:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c34:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	041a      	lsls	r2, r3, #16
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	1acb      	subs	r3, r1, r3
 8006c4c:	69f9      	ldr	r1, [r7, #28]
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	3303      	adds	r3, #3
 8006c54:	68f9      	ldr	r1, [r7, #12]
 8006c56:	6809      	ldr	r1, [r1, #0]
 8006c58:	4608      	mov	r0, r1
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	01c9      	lsls	r1, r1, #7
 8006c5e:	4401      	add	r1, r0
 8006c60:	3184      	adds	r1, #132	; 0x84
 8006c62:	4313      	orrs	r3, r2
 8006c64:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	01db      	lsls	r3, r3, #7
 8006c70:	4413      	add	r3, r2
 8006c72:	3384      	adds	r3, #132	; 0x84
 8006c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	01db      	lsls	r3, r3, #7
 8006c80:	440b      	add	r3, r1
 8006c82:	3384      	adds	r3, #132	; 0x84
 8006c84:	4619      	mov	r1, r3
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <LTDC_SetConfig+0x330>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	; 0x84
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	4413      	add	r3, r2
 8006cae:	3384      	adds	r3, #132	; 0x84
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	01d2      	lsls	r2, r2, #7
 8006cbc:	440a      	add	r2, r1
 8006cbe:	3284      	adds	r2, #132	; 0x84
 8006cc0:	f043 0301 	orr.w	r3, r3, #1
 8006cc4:	6013      	str	r3, [r2, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	3724      	adds	r7, #36	; 0x24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	fffff8f8 	.word	0xfffff8f8
 8006cd8:	fffff800 	.word	0xfffff800

08006cdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40007000 	.word	0x40007000

08006cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d10:	6413      	str	r3, [r2, #64]	; 0x40
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d1e:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d2a:	f7fc fccf 	bl	80036cc <HAL_GetTick>
 8006d2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d30:	e009      	b.n	8006d46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d32:	f7fc fccb 	bl	80036cc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d40:	d901      	bls.n	8006d46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e022      	b.n	8006d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d1ee      	bne.n	8006d32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d54:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0f      	ldr	r2, [pc, #60]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d60:	f7fc fcb4 	bl	80036cc <HAL_GetTick>
 8006d64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d66:	e009      	b.n	8006d7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d68:	f7fc fcb0 	bl	80036cc <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d76:	d901      	bls.n	8006d7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e007      	b.n	8006d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d88:	d1ee      	bne.n	8006d68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	40007000 	.word	0x40007000

08006d9c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006da4:	f7fc fc92 	bl	80036cc <HAL_GetTick>
 8006da8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e067      	b.n	8006e84 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fb ff41 	bl	8002c50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006dce:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f85e 	bl	8006e94 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	021a      	lsls	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f856 	bl	8006eb0 <QSPI_WaitFlagStateUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d135      	bne.n	8006e7a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <HAL_QSPI_Init+0xf0>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6852      	ldr	r2, [r2, #4]
 8006e1c:	0611      	lsls	r1, r2, #24
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68d2      	ldr	r2, [r2, #12]
 8006e22:	4311      	orrs	r1, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	69d2      	ldr	r2, [r2, #28]
 8006e28:	4311      	orrs	r1, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6a12      	ldr	r2, [r2, #32]
 8006e2e:	4311      	orrs	r1, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <HAL_QSPI_Init+0xf4>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6912      	ldr	r2, [r2, #16]
 8006e46:	0411      	lsls	r1, r2, #16
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6952      	ldr	r2, [r2, #20]
 8006e4c:	4311      	orrs	r1, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6992      	ldr	r2, [r2, #24]
 8006e52:	4311      	orrs	r1, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	00ffff2f 	.word	0x00ffff2f
 8006e90:	ffe0f8fe 	.word	0xffe0f8fe

08006e94 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ec0:	e01a      	b.n	8006ef8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec8:	d016      	beq.n	8006ef8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fc fbff 	bl	80036cc <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e00e      	b.n	8006f16 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d1d6      	bne.n	8006ec2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e291      	b.n	800745a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8087 	beq.w	8007052 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f44:	4b96      	ldr	r3, [pc, #600]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 030c 	and.w	r3, r3, #12
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d00c      	beq.n	8006f6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f50:	4b93      	ldr	r3, [pc, #588]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 030c 	and.w	r3, r3, #12
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d112      	bne.n	8006f82 <HAL_RCC_OscConfig+0x62>
 8006f5c:	4b90      	ldr	r3, [pc, #576]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f68:	d10b      	bne.n	8006f82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6a:	4b8d      	ldr	r3, [pc, #564]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d06c      	beq.n	8007050 <HAL_RCC_OscConfig+0x130>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d168      	bne.n	8007050 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e26b      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8a:	d106      	bne.n	8006f9a <HAL_RCC_OscConfig+0x7a>
 8006f8c:	4b84      	ldr	r3, [pc, #528]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a83      	ldr	r2, [pc, #524]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e02e      	b.n	8006ff8 <HAL_RCC_OscConfig+0xd8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x9c>
 8006fa2:	4b7f      	ldr	r3, [pc, #508]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a7e      	ldr	r2, [pc, #504]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b7c      	ldr	r3, [pc, #496]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a7b      	ldr	r2, [pc, #492]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e01d      	b.n	8006ff8 <HAL_RCC_OscConfig+0xd8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_RCC_OscConfig+0xc0>
 8006fc6:	4b76      	ldr	r3, [pc, #472]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a75      	ldr	r2, [pc, #468]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4b73      	ldr	r3, [pc, #460]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a72      	ldr	r2, [pc, #456]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e00b      	b.n	8006ff8 <HAL_RCC_OscConfig+0xd8>
 8006fe0:	4b6f      	ldr	r3, [pc, #444]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a6e      	ldr	r2, [pc, #440]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4b6c      	ldr	r3, [pc, #432]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a6b      	ldr	r2, [pc, #428]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8006ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d013      	beq.n	8007028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007000:	f7fc fb64 	bl	80036cc <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007008:	f7fc fb60 	bl	80036cc <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b64      	cmp	r3, #100	; 0x64
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e21f      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701a:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCC_OscConfig+0xe8>
 8007026:	e014      	b.n	8007052 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fc fb50 	bl	80036cc <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007030:	f7fc fb4c 	bl	80036cc <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	; 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e20b      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007042:	4b57      	ldr	r3, [pc, #348]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1f0      	bne.n	8007030 <HAL_RCC_OscConfig+0x110>
 800704e:	e000      	b.n	8007052 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d069      	beq.n	8007132 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800705e:	4b50      	ldr	r3, [pc, #320]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706a:	4b4d      	ldr	r3, [pc, #308]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 030c 	and.w	r3, r3, #12
 8007072:	2b08      	cmp	r3, #8
 8007074:	d11c      	bne.n	80070b0 <HAL_RCC_OscConfig+0x190>
 8007076:	4b4a      	ldr	r3, [pc, #296]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d116      	bne.n	80070b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_RCC_OscConfig+0x17a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d001      	beq.n	800709a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e1df      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	493d      	ldr	r1, [pc, #244]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ae:	e040      	b.n	8007132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d023      	beq.n	8007100 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b8:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fc fb02 	bl	80036cc <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070cc:	f7fc fafe 	bl	80036cc <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e1bd      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ea:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4929      	ldr	r1, [pc, #164]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]
 80070fe:	e018      	b.n	8007132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007100:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fc fade 	bl	80036cc <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007114:	f7fc fada 	bl	80036cc <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e199      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007126:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d038      	beq.n	80071b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d019      	beq.n	800717a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714a:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007152:	f7fc fabb 	bl	80036cc <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800715a:	f7fc fab7 	bl	80036cc <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e176      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800716e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x23a>
 8007178:	e01a      	b.n	80071b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	4a08      	ldr	r2, [pc, #32]	; (80071a0 <HAL_RCC_OscConfig+0x280>)
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fc faa1 	bl	80036cc <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800718c:	e00a      	b.n	80071a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718e:	f7fc fa9d 	bl	80036cc <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d903      	bls.n	80071a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e15c      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
 80071a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a4:	4b91      	ldr	r3, [pc, #580]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80071a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ee      	bne.n	800718e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 80a4 	beq.w	8007306 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071be:	4b8b      	ldr	r3, [pc, #556]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ca:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a87      	ldr	r2, [pc, #540]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80071d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
 80071d6:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071e6:	4b82      	ldr	r3, [pc, #520]	; (80073f0 <HAL_RCC_OscConfig+0x4d0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d118      	bne.n	8007224 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071f2:	4b7f      	ldr	r3, [pc, #508]	; (80073f0 <HAL_RCC_OscConfig+0x4d0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a7e      	ldr	r2, [pc, #504]	; (80073f0 <HAL_RCC_OscConfig+0x4d0>)
 80071f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071fe:	f7fc fa65 	bl	80036cc <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007206:	f7fc fa61 	bl	80036cc <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b64      	cmp	r3, #100	; 0x64
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e120      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007218:	4b75      	ldr	r3, [pc, #468]	; (80073f0 <HAL_RCC_OscConfig+0x4d0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d106      	bne.n	800723a <HAL_RCC_OscConfig+0x31a>
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	4a6e      	ldr	r2, [pc, #440]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	6713      	str	r3, [r2, #112]	; 0x70
 8007238:	e02d      	b.n	8007296 <HAL_RCC_OscConfig+0x376>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10c      	bne.n	800725c <HAL_RCC_OscConfig+0x33c>
 8007242:	4b6a      	ldr	r3, [pc, #424]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	4a69      	ldr	r2, [pc, #420]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	6713      	str	r3, [r2, #112]	; 0x70
 800724e:	4b67      	ldr	r3, [pc, #412]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a66      	ldr	r2, [pc, #408]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007254:	f023 0304 	bic.w	r3, r3, #4
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
 800725a:	e01c      	b.n	8007296 <HAL_RCC_OscConfig+0x376>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b05      	cmp	r3, #5
 8007262:	d10c      	bne.n	800727e <HAL_RCC_OscConfig+0x35e>
 8007264:	4b61      	ldr	r3, [pc, #388]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4a60      	ldr	r2, [pc, #384]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800726a:	f043 0304 	orr.w	r3, r3, #4
 800726e:	6713      	str	r3, [r2, #112]	; 0x70
 8007270:	4b5e      	ldr	r3, [pc, #376]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007274:	4a5d      	ldr	r2, [pc, #372]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	6713      	str	r3, [r2, #112]	; 0x70
 800727c:	e00b      	b.n	8007296 <HAL_RCC_OscConfig+0x376>
 800727e:	4b5b      	ldr	r3, [pc, #364]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	4a5a      	ldr	r2, [pc, #360]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	6713      	str	r3, [r2, #112]	; 0x70
 800728a:	4b58      	ldr	r3, [pc, #352]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	4a57      	ldr	r2, [pc, #348]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d015      	beq.n	80072ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fc fa15 	bl	80036cc <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fc fa11 	bl	80036cc <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0ce      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072bc:	4b4b      	ldr	r3, [pc, #300]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ee      	beq.n	80072a6 <HAL_RCC_OscConfig+0x386>
 80072c8:	e014      	b.n	80072f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ca:	f7fc f9ff 	bl	80036cc <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fc f9fb 	bl	80036cc <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e0b8      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e8:	4b40      	ldr	r3, [pc, #256]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ee      	bne.n	80072d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d105      	bne.n	8007306 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072fa:	4b3c      	ldr	r3, [pc, #240]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	4a3b      	ldr	r2, [pc, #236]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80a4 	beq.w	8007458 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 030c 	and.w	r3, r3, #12
 8007318:	2b08      	cmp	r3, #8
 800731a:	d06b      	beq.n	80073f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d149      	bne.n	80073b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a30      	ldr	r2, [pc, #192]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800732a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7fc f9cc 	bl	80036cc <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007338:	f7fc f9c8 	bl	80036cc <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e087      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734a:	4b28      	ldr	r3, [pc, #160]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f0      	bne.n	8007338 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69da      	ldr	r2, [r3, #28]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	019b      	lsls	r3, r3, #6
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	3b01      	subs	r3, #1
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	4313      	orrs	r3, r2
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800737e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007382:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b19      	ldr	r3, [pc, #100]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 800738a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800738e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fc f99c 	bl	80036cc <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007398:	f7fc f998 	bl	80036cc <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e057      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0x478>
 80073b6:	e04f      	b.n	8007458 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fc f982 	bl	80036cc <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fc f97e 	bl	80036cc <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e03d      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073de:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x4ac>
 80073ea:	e035      	b.n	8007458 <HAL_RCC_OscConfig+0x538>
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073f4:	4b1b      	ldr	r3, [pc, #108]	; (8007464 <HAL_RCC_OscConfig+0x544>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d028      	beq.n	8007454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d121      	bne.n	8007454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800741a:	429a      	cmp	r2, r3
 800741c:	d11a      	bne.n	8007454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007424:	4013      	ands	r3, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800742a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800742c:	4293      	cmp	r3, r2
 800742e:	d111      	bne.n	8007454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	3b01      	subs	r3, #1
 800743e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d107      	bne.n	8007454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007450:	429a      	cmp	r2, r3
 8007452:	d001      	beq.n	8007458 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800

08007468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e0d0      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007480:	4b6a      	ldr	r3, [pc, #424]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d910      	bls.n	80074b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800748e:	4b67      	ldr	r3, [pc, #412]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f023 020f 	bic.w	r2, r3, #15
 8007496:	4965      	ldr	r1, [pc, #404]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	4313      	orrs	r3, r2
 800749c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749e:	4b63      	ldr	r3, [pc, #396]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0b8      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d020      	beq.n	80074fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074c8:	4b59      	ldr	r3, [pc, #356]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4a58      	ldr	r2, [pc, #352]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074e0:	4b53      	ldr	r3, [pc, #332]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4a52      	ldr	r2, [pc, #328]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074ec:	4b50      	ldr	r3, [pc, #320]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	494d      	ldr	r1, [pc, #308]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d040      	beq.n	800758c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007512:	4b47      	ldr	r3, [pc, #284]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d115      	bne.n	800754a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e07f      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d107      	bne.n	800753a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800752a:	4b41      	ldr	r3, [pc, #260]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e073      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800753a:	4b3d      	ldr	r3, [pc, #244]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e06b      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800754a:	4b39      	ldr	r3, [pc, #228]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 0203 	bic.w	r2, r3, #3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	4936      	ldr	r1, [pc, #216]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	4313      	orrs	r3, r2
 800755a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755c:	f7fc f8b6 	bl	80036cc <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007562:	e00a      	b.n	800757a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007564:	f7fc f8b2 	bl	80036cc <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007572:	4293      	cmp	r3, r2
 8007574:	d901      	bls.n	800757a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e053      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757a:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 020c 	and.w	r2, r3, #12
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	429a      	cmp	r2, r3
 800758a:	d1eb      	bne.n	8007564 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800758c:	4b27      	ldr	r3, [pc, #156]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d210      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f023 020f 	bic.w	r2, r3, #15
 80075a2:	4922      	ldr	r1, [pc, #136]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075aa:	4b20      	ldr	r3, [pc, #128]	; (800762c <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d001      	beq.n	80075bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e032      	b.n	8007622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075c8:	4b19      	ldr	r3, [pc, #100]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4916      	ldr	r1, [pc, #88]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075e6:	4b12      	ldr	r3, [pc, #72]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	490e      	ldr	r1, [pc, #56]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075fa:	f000 f821 	bl	8007640 <HAL_RCC_GetSysClockFreq>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	490a      	ldr	r1, [pc, #40]	; (8007634 <HAL_RCC_ClockConfig+0x1cc>)
 800760c:	5ccb      	ldrb	r3, [r1, r3]
 800760e:	fa22 f303 	lsr.w	r3, r2, r3
 8007612:	4a09      	ldr	r2, [pc, #36]	; (8007638 <HAL_RCC_ClockConfig+0x1d0>)
 8007614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007616:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_RCC_ClockConfig+0x1d4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f7fc f812 	bl	8003644 <HAL_InitTick>

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40023c00 	.word	0x40023c00
 8007630:	40023800 	.word	0x40023800
 8007634:	08016394 	.word	0x08016394
 8007638:	20000000 	.word	0x20000000
 800763c:	20000004 	.word	0x20000004

08007640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007640:	b5b0      	push	{r4, r5, r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007646:	2100      	movs	r1, #0
 8007648:	6079      	str	r1, [r7, #4]
 800764a:	2100      	movs	r1, #0
 800764c:	60f9      	str	r1, [r7, #12]
 800764e:	2100      	movs	r1, #0
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007652:	2100      	movs	r1, #0
 8007654:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007656:	4952      	ldr	r1, [pc, #328]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007658:	6889      	ldr	r1, [r1, #8]
 800765a:	f001 010c 	and.w	r1, r1, #12
 800765e:	2908      	cmp	r1, #8
 8007660:	d00d      	beq.n	800767e <HAL_RCC_GetSysClockFreq+0x3e>
 8007662:	2908      	cmp	r1, #8
 8007664:	f200 8094 	bhi.w	8007790 <HAL_RCC_GetSysClockFreq+0x150>
 8007668:	2900      	cmp	r1, #0
 800766a:	d002      	beq.n	8007672 <HAL_RCC_GetSysClockFreq+0x32>
 800766c:	2904      	cmp	r1, #4
 800766e:	d003      	beq.n	8007678 <HAL_RCC_GetSysClockFreq+0x38>
 8007670:	e08e      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007672:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8007674:	60bb      	str	r3, [r7, #8]
      break;
 8007676:	e08e      	b.n	8007796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007678:	4b4b      	ldr	r3, [pc, #300]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800767a:	60bb      	str	r3, [r7, #8]
      break;
 800767c:	e08b      	b.n	8007796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800767e:	4948      	ldr	r1, [pc, #288]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007680:	6849      	ldr	r1, [r1, #4]
 8007682:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007686:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007688:	4945      	ldr	r1, [pc, #276]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800768a:	6849      	ldr	r1, [r1, #4]
 800768c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007690:	2900      	cmp	r1, #0
 8007692:	d024      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007694:	4942      	ldr	r1, [pc, #264]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007696:	6849      	ldr	r1, [r1, #4]
 8007698:	0989      	lsrs	r1, r1, #6
 800769a:	4608      	mov	r0, r1
 800769c:	f04f 0100 	mov.w	r1, #0
 80076a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80076a4:	f04f 0500 	mov.w	r5, #0
 80076a8:	ea00 0204 	and.w	r2, r0, r4
 80076ac:	ea01 0305 	and.w	r3, r1, r5
 80076b0:	493d      	ldr	r1, [pc, #244]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80076b2:	fb01 f003 	mul.w	r0, r1, r3
 80076b6:	2100      	movs	r1, #0
 80076b8:	fb01 f102 	mul.w	r1, r1, r2
 80076bc:	1844      	adds	r4, r0, r1
 80076be:	493a      	ldr	r1, [pc, #232]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80076c0:	fba2 0101 	umull	r0, r1, r2, r1
 80076c4:	1863      	adds	r3, r4, r1
 80076c6:	4619      	mov	r1, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	f7f9 fada 	bl	8000c88 <__aeabi_uldivmod>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4613      	mov	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e04a      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076de:	4b30      	ldr	r3, [pc, #192]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	099b      	lsrs	r3, r3, #6
 80076e4:	461a      	mov	r2, r3
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076ee:	f04f 0100 	mov.w	r1, #0
 80076f2:	ea02 0400 	and.w	r4, r2, r0
 80076f6:	ea03 0501 	and.w	r5, r3, r1
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	014b      	lsls	r3, r1, #5
 8007708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800770c:	0142      	lsls	r2, r0, #5
 800770e:	4610      	mov	r0, r2
 8007710:	4619      	mov	r1, r3
 8007712:	1b00      	subs	r0, r0, r4
 8007714:	eb61 0105 	sbc.w	r1, r1, r5
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	018b      	lsls	r3, r1, #6
 8007722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007726:	0182      	lsls	r2, r0, #6
 8007728:	1a12      	subs	r2, r2, r0
 800772a:	eb63 0301 	sbc.w	r3, r3, r1
 800772e:	f04f 0000 	mov.w	r0, #0
 8007732:	f04f 0100 	mov.w	r1, #0
 8007736:	00d9      	lsls	r1, r3, #3
 8007738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800773c:	00d0      	lsls	r0, r2, #3
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	1912      	adds	r2, r2, r4
 8007744:	eb45 0303 	adc.w	r3, r5, r3
 8007748:	f04f 0000 	mov.w	r0, #0
 800774c:	f04f 0100 	mov.w	r1, #0
 8007750:	0299      	lsls	r1, r3, #10
 8007752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007756:	0290      	lsls	r0, r2, #10
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	461a      	mov	r2, r3
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	f7f9 fa8e 	bl	8000c88 <__aeabi_uldivmod>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4613      	mov	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	0c1b      	lsrs	r3, r3, #16
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	3301      	adds	r3, #1
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	fbb2 f3f3 	udiv	r3, r2, r3
 800778c:	60bb      	str	r3, [r7, #8]
      break;
 800778e:	e002      	b.n	8007796 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8007792:	60bb      	str	r3, [r7, #8]
      break;
 8007794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007796:	68bb      	ldr	r3, [r7, #8]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bdb0      	pop	{r4, r5, r7, pc}
 80077a0:	40023800 	.word	0x40023800
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	017d7840 	.word	0x017d7840

080077ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077b0:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077b2:	681b      	ldr	r3, [r3, #0]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20000000 	.word	0x20000000

080077c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077c8:	f7ff fff0 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	0a9b      	lsrs	r3, r3, #10
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4903      	ldr	r1, [pc, #12]	; (80077e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077da:	5ccb      	ldrb	r3, [r1, r3]
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40023800 	.word	0x40023800
 80077e8:	080163a4 	.word	0x080163a4

080077ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077f0:	f7ff ffdc 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_RCC_GetPCLK2Freq+0x20>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	0b5b      	lsrs	r3, r3, #13
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	4903      	ldr	r1, [pc, #12]	; (8007810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007802:	5ccb      	ldrb	r3, [r1, r3]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40023800 	.word	0x40023800
 8007810:	080163a4 	.word	0x080163a4

08007814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d012      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800783c:	4b69      	ldr	r3, [pc, #420]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a68      	ldr	r2, [pc, #416]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007846:	6093      	str	r3, [r2, #8]
 8007848:	4b66      	ldr	r3, [pc, #408]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	4964      	ldr	r1, [pc, #400]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800785e:	2301      	movs	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d017      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800786e:	4b5d      	ldr	r3, [pc, #372]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	4959      	ldr	r1, [pc, #356]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788c:	d101      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d017      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078aa:	4b4e      	ldr	r3, [pc, #312]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	494a      	ldr	r1, [pc, #296]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078c8:	d101      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 808b 	beq.w	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078f8:	4b3a      	ldr	r3, [pc, #232]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007902:	6413      	str	r3, [r2, #64]	; 0x40
 8007904:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007910:	4b35      	ldr	r3, [pc, #212]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a34      	ldr	r2, [pc, #208]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791c:	f7fb fed6 	bl	80036cc <HAL_GetTick>
 8007920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007924:	f7fb fed2 	bl	80036cc <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	; 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e357      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007936:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007942:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800794a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d035      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d02e      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007960:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007982:	4a18      	ldr	r2, [pc, #96]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007988:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d114      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007994:	f7fb fe9a 	bl	80036cc <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799a:	e00a      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800799c:	f7fb fe96 	bl	80036cc <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e319      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b2:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0ee      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d111      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079da:	400b      	ands	r3, r1
 80079dc:	4901      	ldr	r1, [pc, #4]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
 80079e2:	e00b      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40007000 	.word	0x40007000
 80079ec:	0ffffcff 	.word	0x0ffffcff
 80079f0:	4bb1      	ldr	r3, [pc, #708]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4ab0      	ldr	r2, [pc, #704]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079fa:	6093      	str	r3, [r2, #8]
 80079fc:	4bae      	ldr	r3, [pc, #696]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a08:	49ab      	ldr	r1, [pc, #684]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a1a:	4ba7      	ldr	r3, [pc, #668]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	4aa5      	ldr	r2, [pc, #660]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a2a:	4ba3      	ldr	r3, [pc, #652]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	49a0      	ldr	r1, [pc, #640]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a48:	4b9b      	ldr	r3, [pc, #620]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a56:	4998      	ldr	r1, [pc, #608]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a6a:	4b93      	ldr	r3, [pc, #588]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a78:	498f      	ldr	r1, [pc, #572]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a8c:	4b8a      	ldr	r3, [pc, #552]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9a:	4987      	ldr	r1, [pc, #540]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007aae:	4b82      	ldr	r3, [pc, #520]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	497e      	ldr	r1, [pc, #504]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ad0:	4b79      	ldr	r3, [pc, #484]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	4976      	ldr	r1, [pc, #472]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007af2:	4b71      	ldr	r3, [pc, #452]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af8:	f023 020c 	bic.w	r2, r3, #12
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b00:	496d      	ldr	r1, [pc, #436]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b14:	4b68      	ldr	r3, [pc, #416]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	4965      	ldr	r1, [pc, #404]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b36:	4b60      	ldr	r3, [pc, #384]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b44:	495c      	ldr	r1, [pc, #368]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b58:	4b57      	ldr	r3, [pc, #348]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	4954      	ldr	r1, [pc, #336]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	494b      	ldr	r1, [pc, #300]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b9c:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007baa:	4943      	ldr	r1, [pc, #268]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bcc:	493a      	ldr	r1, [pc, #232]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007be0:	4b35      	ldr	r3, [pc, #212]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bee:	4932      	ldr	r1, [pc, #200]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d011      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c02:	4b2d      	ldr	r3, [pc, #180]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c10:	4929      	ldr	r1, [pc, #164]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c20:	d101      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c32:	2301      	movs	r3, #1
 8007c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c50:	4919      	ldr	r1, [pc, #100]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c74:	4910      	ldr	r1, [pc, #64]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d006      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80d9 	beq.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9c:	f7fb fd16 	bl	80036cc <HAL_GetTick>
 8007ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ca4:	f7fb fd12 	bl	80036cc <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b64      	cmp	r3, #100	; 0x64
 8007cb0:	d904      	bls.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e197      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cbc:	4b6c      	ldr	r3, [pc, #432]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ed      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d021      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11d      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cdc:	4b64      	ldr	r3, [pc, #400]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cea:	4b61      	ldr	r3, [pc, #388]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf0:	0e1b      	lsrs	r3, r3, #24
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	019a      	lsls	r2, r3, #6
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	061b      	lsls	r3, r3, #24
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	071b      	lsls	r3, r3, #28
 8007d10:	4957      	ldr	r1, [pc, #348]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d02e      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d42:	d129      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d44:	4b4a      	ldr	r3, [pc, #296]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4a:	0c1b      	lsrs	r3, r3, #16
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d52:	4b47      	ldr	r3, [pc, #284]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	0f1b      	lsrs	r3, r3, #28
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	019a      	lsls	r2, r3, #6
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	431a      	orrs	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	071b      	lsls	r3, r3, #28
 8007d78:	493d      	ldr	r1, [pc, #244]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d80:	4b3b      	ldr	r3, [pc, #236]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d86:	f023 021f 	bic.w	r2, r3, #31
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4937      	ldr	r1, [pc, #220]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01d      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007daa:	0e1b      	lsrs	r3, r3, #24
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007db2:	4b2f      	ldr	r3, [pc, #188]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db8:	0f1b      	lsrs	r3, r3, #28
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	019a      	lsls	r2, r3, #6
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	071b      	lsls	r3, r3, #28
 8007dd8:	4925      	ldr	r1, [pc, #148]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d011      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	019a      	lsls	r2, r3, #6
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	071b      	lsls	r3, r3, #28
 8007e08:	4919      	ldr	r1, [pc, #100]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1c:	f7fb fc56 	bl	80036cc <HAL_GetTick>
 8007e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e22:	e008      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e24:	f7fb fc52 	bl	80036cc <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b64      	cmp	r3, #100	; 0x64
 8007e30:	d901      	bls.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e0d7      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	f040 80cd 	bne.w	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7fb fc39 	bl	80036cc <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e5e:	f7fb fc35 	bl	80036cc <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b64      	cmp	r3, #100	; 0x64
 8007e6a:	d903      	bls.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e0ba      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e74:	4b5e      	ldr	r3, [pc, #376]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e80:	d0ed      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d02e      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d12a      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eaa:	4b51      	ldr	r3, [pc, #324]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007eb8:	4b4d      	ldr	r3, [pc, #308]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	019a      	lsls	r2, r3, #6
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	061b      	lsls	r3, r3, #24
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	4944      	ldr	r1, [pc, #272]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ee6:	4b42      	ldr	r3, [pc, #264]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	493d      	ldr	r1, [pc, #244]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f14:	d11d      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f16:	4b36      	ldr	r3, [pc, #216]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f24:	4b32      	ldr	r3, [pc, #200]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	0f1b      	lsrs	r3, r3, #28
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	019a      	lsls	r2, r3, #6
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	061b      	lsls	r3, r3, #24
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	071b      	lsls	r3, r3, #28
 8007f4a:	4929      	ldr	r1, [pc, #164]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d028      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f5e:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	0e1b      	lsrs	r3, r3, #24
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f6c:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f72:	0c1b      	lsrs	r3, r3, #16
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	019a      	lsls	r2, r3, #6
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	431a      	orrs	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	061b      	lsls	r3, r3, #24
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	071b      	lsls	r3, r3, #28
 8007f92:	4917      	ldr	r1, [pc, #92]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f9a:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4911      	ldr	r1, [pc, #68]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbc:	f7fb fb86 	bl	80036cc <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fc4:	f7fb fb82 	bl	80036cc <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e007      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe2:	d1ef      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40023800 	.word	0x40023800

08007ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008012:	f040 808c 	bne.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008016:	4b95      	ldr	r3, [pc, #596]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008024:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802c:	d07c      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008034:	d87d      	bhi.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008042:	d039      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008044:	e075      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008046:	4b89      	ldr	r3, [pc, #548]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d108      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008052:	4b86      	ldr	r3, [pc, #536]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805a:	4a85      	ldr	r2, [pc, #532]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008064:	4b81      	ldr	r3, [pc, #516]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800806c:	4a81      	ldr	r2, [pc, #516]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008074:	4b7d      	ldr	r3, [pc, #500]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008082:	4b7a      	ldr	r3, [pc, #488]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008088:	099b      	lsrs	r3, r3, #6
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	fb02 f203 	mul.w	r2, r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800809c:	4b73      	ldr	r3, [pc, #460]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800809e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	617b      	str	r3, [r7, #20]
        break;
 80080b6:	e03d      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080b8:	4b6c      	ldr	r3, [pc, #432]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080c4:	4b69      	ldr	r3, [pc, #420]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080cc:	4a68      	ldr	r2, [pc, #416]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	e007      	b.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080d6:	4b65      	ldr	r3, [pc, #404]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080de:	4a65      	ldr	r2, [pc, #404]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080e6:	4b61      	ldr	r3, [pc, #388]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080f4:	4b5d      	ldr	r3, [pc, #372]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	fb02 f203 	mul.w	r2, r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800810e:	4b57      	ldr	r3, [pc, #348]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	617b      	str	r3, [r7, #20]
        break;
 8008126:	e005      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008128:	4b53      	ldr	r3, [pc, #332]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800812a:	617b      	str	r3, [r7, #20]
        break;
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8008132:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800813a:	f040 808c 	bne.w	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800813e:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008144:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800814c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008154:	d07c      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800815c:	d87d      	bhi.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800816a:	d039      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800816c:	e075      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800816e:	4b3f      	ldr	r3, [pc, #252]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d108      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800817a:	4b3c      	ldr	r3, [pc, #240]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008182:	4a3b      	ldr	r2, [pc, #236]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008184:	fbb2 f3f3 	udiv	r3, r2, r3
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e007      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800818c:	4b37      	ldr	r3, [pc, #220]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	4a37      	ldr	r2, [pc, #220]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008196:	fbb2 f3f3 	udiv	r3, r2, r3
 800819a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800819c:	4b33      	ldr	r3, [pc, #204]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80081aa:	4b30      	ldr	r3, [pc, #192]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	099b      	lsrs	r3, r3, #6
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	fb02 f203 	mul.w	r2, r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	617b      	str	r3, [r7, #20]
        break;
 80081de:	e03d      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081e0:	4b22      	ldr	r3, [pc, #136]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081ec:	4b1f      	ldr	r3, [pc, #124]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	e007      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081fe:	4b1b      	ldr	r3, [pc, #108]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800820e:	4b17      	ldr	r3, [pc, #92]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008214:	0e1b      	lsrs	r3, r3, #24
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800821c:	4b13      	ldr	r3, [pc, #76]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800821e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008222:	099b      	lsrs	r3, r3, #6
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	fb02 f203 	mul.w	r2, r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	fbb2 f3f3 	udiv	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008236:	4b0d      	ldr	r3, [pc, #52]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]
        break;
 800824e:	e005      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008252:	617b      	str	r3, [r7, #20]
        break;
 8008254:	e002      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008256:	bf00      	nop
 8008258:	e000      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800825a:	bf00      	nop

  return frequency;
 800825c:	697b      	ldr	r3, [r7, #20]
}
 800825e:	4618      	mov	r0, r3
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800
 8008270:	00f42400 	.word	0x00f42400
 8008274:	017d7840 	.word	0x017d7840
 8008278:	00bb8000 	.word	0x00bb8000

0800827c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e081      	b.n	8008392 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7f5b      	ldrb	r3, [r3, #29]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fa fd66 	bl	8002d70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	22ca      	movs	r2, #202	; 0xca
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2253      	movs	r2, #83	; 0x53
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb16 	bl	80088ec <RTC_EnterInitMode>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	22ff      	movs	r2, #255	; 0xff
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e05c      	b.n	8008392 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6899      	ldr	r1, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b2e      	ldr	r3, [pc, #184]	; (800839c <HAL_RTC_Init+0x120>)
 80082e4:	400b      	ands	r3, r1
 80082e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6899      	ldr	r1, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68d2      	ldr	r2, [r2, #12]
 800830e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6919      	ldr	r1, [r3, #16]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	041a      	lsls	r2, r3, #16
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008332:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10e      	bne.n	8008360 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 faaa 	bl	800889c <HAL_RTC_WaitForSynchro>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	22ff      	movs	r2, #255	; 0xff
 8008354:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e018      	b.n	8008392 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0208 	bic.w	r2, r2, #8
 800836e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008390:	2300      	movs	r3, #0
  }
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	ff8fffbf 	.word	0xff8fffbf

080083a0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	7f1b      	ldrb	r3, [r3, #28]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_RTC_SetTime+0x1c>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e0a8      	b.n	800850e <HAL_RTC_SetTime+0x16e>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d126      	bne.n	800841c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 faac 	bl	8008944 <RTC_ByteToBcd2>
 80083ec:	4603      	mov	r3, r0
 80083ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 faa5 	bl	8008944 <RTC_ByteToBcd2>
 80083fa:	4603      	mov	r3, r0
 80083fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	789b      	ldrb	r3, [r3, #2]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fa9d 	bl	8008944 <RTC_ByteToBcd2>
 800840a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800840c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	7b1b      	ldrb	r3, [r3, #12]
 8008414:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e018      	b.n	800844e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800843c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008442:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	7b1b      	ldrb	r3, [r3, #12]
 8008448:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	22ca      	movs	r2, #202	; 0xca
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2253      	movs	r2, #83	; 0x53
 800845c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fa44 	bl	80088ec <RTC_EnterInitMode>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	22ff      	movs	r2, #255	; 0xff
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2204      	movs	r2, #4
 8008476:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e045      	b.n	800850e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	4b23      	ldr	r3, [pc, #140]	; (8008518 <HAL_RTC_SetTime+0x178>)
 800848a:	400b      	ands	r3, r1
 800848c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800849c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6899      	ldr	r1, [r3, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d111      	bne.n	80084f8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9e1 	bl	800889c <HAL_RTC_WaitForSynchro>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2204      	movs	r2, #4
 80084ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e00a      	b.n	800850e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	22ff      	movs	r2, #255	; 0xff
 80084fe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800850c:	2300      	movs	r3, #0
  }
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	007f7f7f 	.word	0x007f7f7f

0800851c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7f1b      	ldrb	r3, [r3, #28]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_RTC_SetDate+0x1c>
 8008534:	2302      	movs	r3, #2
 8008536:	e092      	b.n	800865e <HAL_RTC_SetDate+0x142>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10e      	bne.n	8008568 <HAL_RTC_SetDate+0x4c>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	b2db      	uxtb	r3, r3
 8008560:	330a      	adds	r3, #10
 8008562:	b2da      	uxtb	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d11c      	bne.n	80085a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f9e6 	bl	8008944 <RTC_ByteToBcd2>
 8008578:	4603      	mov	r3, r0
 800857a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f9df 	bl	8008944 <RTC_ByteToBcd2>
 8008586:	4603      	mov	r3, r0
 8008588:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800858a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	789b      	ldrb	r3, [r3, #2]
 8008590:	4618      	mov	r0, r3
 8008592:	f000 f9d7 	bl	8008944 <RTC_ByteToBcd2>
 8008596:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008598:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	e00e      	b.n	80085c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80085ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	22ca      	movs	r2, #202	; 0xca
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2253      	movs	r2, #83	; 0x53
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f988 	bl	80088ec <RTC_EnterInitMode>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	22ff      	movs	r2, #255	; 0xff
 80085e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2204      	movs	r2, #4
 80085ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e031      	b.n	800865e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	6979      	ldr	r1, [r7, #20]
 8008600:	4b19      	ldr	r3, [pc, #100]	; (8008668 <HAL_RTC_SetDate+0x14c>)
 8008602:	400b      	ands	r3, r1
 8008604:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008614:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d111      	bne.n	8008648 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f939 	bl	800889c <HAL_RTC_WaitForSynchro>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2204      	movs	r2, #4
 800863c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e00a      	b.n	800865e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800865c:	2300      	movs	r3, #0
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	bd90      	pop	{r4, r7, pc}
 8008666:	bf00      	nop
 8008668:	00ffff3f 	.word	0x00ffff3f

0800866c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800866c:	b590      	push	{r4, r7, lr}
 800866e:	b089      	sub	sp, #36	; 0x24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	7f1b      	ldrb	r3, [r3, #28]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_RTC_SetAlarm+0x24>
 800868c:	2302      	movs	r3, #2
 800868e:	e101      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2201      	movs	r2, #1
 8008694:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2202      	movs	r2, #2
 800869a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d137      	bne.n	8008712 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f942 	bl	8008944 <RTC_ByteToBcd2>
 80086c0:	4603      	mov	r3, r0
 80086c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f93b 	bl	8008944 <RTC_ByteToBcd2>
 80086ce:	4603      	mov	r3, r0
 80086d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	789b      	ldrb	r3, [r3, #2]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f933 	bl	8008944 <RTC_ByteToBcd2>
 80086de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	7b1b      	ldrb	r3, [r3, #12]
 80086e8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f925 	bl	8008944 <RTC_ByteToBcd2>
 80086fa:	4603      	mov	r3, r0
 80086fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008706:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800870c:	4313      	orrs	r3, r2
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	e023      	b.n	800875a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008732:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008738:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	7b1b      	ldrb	r3, [r3, #12]
 800873e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008740:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008748:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800874a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008750:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008756:	4313      	orrs	r3, r2
 8008758:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	22ca      	movs	r2, #202	; 0xca
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2253      	movs	r2, #83	; 0x53
 8008774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877e:	d13f      	bne.n	8008800 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800878e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800879e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087a0:	f7fa ff94 	bl	80036cc <HAL_GetTick>
 80087a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087a6:	e013      	b.n	80087d0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087a8:	f7fa ff90 	bl	80036cc <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b6:	d90b      	bls.n	80087d0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2203      	movs	r2, #3
 80087c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e061      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0e4      	beq.n	80087a8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fc:	609a      	str	r2, [r3, #8]
 80087fe:	e03e      	b.n	800887e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800880e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008820:	f7fa ff54 	bl	80036cc <HAL_GetTick>
 8008824:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008826:	e013      	b.n	8008850 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008828:	f7fa ff50 	bl	80036cc <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008836:	d90b      	bls.n	8008850 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2203      	movs	r2, #3
 8008844:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e021      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0e4      	beq.n	8008828 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	22ff      	movs	r2, #255	; 0xff
 8008884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3724      	adds	r7, #36	; 0x24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd90      	pop	{r4, r7, pc}

0800889c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b8:	f7fa ff08 	bl	80036cc <HAL_GetTick>
 80088bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088be:	e009      	b.n	80088d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088c0:	f7fa ff04 	bl	80036cc <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ce:	d901      	bls.n	80088d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e007      	b.n	80088e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0ee      	beq.n	80088c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d119      	bne.n	800893a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008910:	f7fa fedc 	bl	80036cc <HAL_GetTick>
 8008914:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008916:	e009      	b.n	800892c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008918:	f7fa fed8 	bl	80036cc <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008926:	d901      	bls.n	800892c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e007      	b.n	800893c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0ee      	beq.n	8008918 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008952:	e005      	b.n	8008960 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	3b0a      	subs	r3, #10
 800895e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b09      	cmp	r3, #9
 8008964:	d8f6      	bhi.n	8008954 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	b2da      	uxtb	r2, r3
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	4313      	orrs	r3, r2
 8008972:	b2db      	uxtb	r3, r3
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	7f1b      	ldrb	r3, [r3, #28]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008998:	2302      	movs	r3, #2
 800899a:	e03e      	b.n	8008a1a <HAL_RTCEx_SetTimeStamp+0x9a>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2202      	movs	r2, #2
 80089a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	4b1e      	ldr	r3, [pc, #120]	; (8008a28 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	22ca      	movs	r2, #202	; 0xca
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2253      	movs	r2, #83	; 0x53
 80089ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0206 	bic.w	r2, r2, #6
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a02:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	fffff7f7 	.word	0xfffff7f7

08008a2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e156      	b.n	8008cf8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fa fcc0 	bl	80033e4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f95b 	bl	8008d28 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d00c      	beq.n	8008a94 <HAL_SAI_Init+0x68>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d80d      	bhi.n	8008a9a <HAL_SAI_Init+0x6e>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_SAI_Init+0x5c>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d003      	beq.n	8008a8e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008a86:	e008      	b.n	8008a9a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]
      break;
 8008a8c:	e006      	b.n	8008a9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a8e:	2310      	movs	r3, #16
 8008a90:	61fb      	str	r3, [r7, #28]
      break;
 8008a92:	e003      	b.n	8008a9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a94:	2320      	movs	r3, #32
 8008a96:	61fb      	str	r3, [r7, #28]
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_SAI_Init+0x70>
      break;
 8008a9a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d81e      	bhi.n	8008ae2 <HAL_SAI_Init+0xb6>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <HAL_SAI_Init+0x80>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008ac3 	.word	0x08008ac3
 8008ab4:	08008acb 	.word	0x08008acb
 8008ab8:	08008ad3 	.word	0x08008ad3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ac0:	e010      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ac8:	e00c      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ace:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ad0:	e008      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008ae2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a85      	ldr	r2, [pc, #532]	; (8008d00 <HAL_SAI_Init+0x2d4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d004      	beq.n	8008af8 <HAL_SAI_Init+0xcc>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a84      	ldr	r2, [pc, #528]	; (8008d04 <HAL_SAI_Init+0x2d8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d103      	bne.n	8008b00 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008af8:	4a83      	ldr	r2, [pc, #524]	; (8008d08 <HAL_SAI_Init+0x2dc>)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e002      	b.n	8008b06 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b00:	4a82      	ldr	r2, [pc, #520]	; (8008d0c <HAL_SAI_Init+0x2e0>)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d04c      	beq.n	8008ba8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a7a      	ldr	r2, [pc, #488]	; (8008d00 <HAL_SAI_Init+0x2d4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_SAI_Init+0xfa>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a78      	ldr	r2, [pc, #480]	; (8008d04 <HAL_SAI_Init+0x2d8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d104      	bne.n	8008b30 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b2a:	f7ff fa63 	bl	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b2e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a76      	ldr	r2, [pc, #472]	; (8008d10 <HAL_SAI_Init+0x2e4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_SAI_Init+0x118>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a75      	ldr	r2, [pc, #468]	; (8008d14 <HAL_SAI_Init+0x2e8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d104      	bne.n	8008b4e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b48:	f7ff fa54 	bl	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b4c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	025b      	lsls	r3, r3, #9
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a6b      	ldr	r2, [pc, #428]	; (8008d18 <HAL_SAI_Init+0x2ec>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	08da      	lsrs	r2, r3, #3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	4b68      	ldr	r3, [pc, #416]	; (8008d18 <HAL_SAI_Init+0x2ec>)
 8008b78:	fba3 2301 	umull	r2, r3, r3, r1
 8008b7c:	08da      	lsrs	r2, r3, #3
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	1aca      	subs	r2, r1, r3
 8008b88:	2a08      	cmp	r2, #8
 8008b8a:	d904      	bls.n	8008b96 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d104      	bne.n	8008ba8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	085a      	lsrs	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_SAI_Init+0x18c>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d109      	bne.n	8008bcc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_SAI_Init+0x198>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e001      	b.n	8008bc8 <HAL_SAI_Init+0x19c>
 8008bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e008      	b.n	8008bde <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d102      	bne.n	8008bda <HAL_SAI_Init+0x1ae>
 8008bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd8:	e000      	b.n	8008bdc <HAL_SAI_Init+0x1b0>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b4c      	ldr	r3, [pc, #304]	; (8008d1c <HAL_SAI_Init+0x2f0>)
 8008bea:	400b      	ands	r3, r1
 8008bec:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c02:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008c16:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c22:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	051b      	lsls	r3, r3, #20
 8008c2a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b38      	ldr	r3, [pc, #224]	; (8008d20 <HAL_SAI_Init+0x2f4>)
 8008c40:	400b      	ands	r3, r1
 8008c42:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <HAL_SAI_Init+0x2f8>)
 8008c6e:	400b      	ands	r3, r1
 8008c70:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6899      	ldr	r1, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c82:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008c88:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008c8e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c94:	3b01      	subs	r3, #1
 8008c96:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c98:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68d9      	ldr	r1, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68d9      	ldr	r1, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3720      	adds	r7, #32
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40015804 	.word	0x40015804
 8008d04:	40015824 	.word	0x40015824
 8008d08:	40015800 	.word	0x40015800
 8008d0c:	40015c00 	.word	0x40015c00
 8008d10:	40015c04 	.word	0x40015c04
 8008d14:	40015c24 	.word	0x40015c24
 8008d18:	cccccccd 	.word	0xcccccccd
 8008d1c:	ff05c010 	.word	0xff05c010
 8008d20:	ffff1ff0 	.word	0xffff1ff0
 8008d24:	fff88000 	.word	0xfff88000

08008d28 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <SAI_Disable+0x68>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <SAI_Disable+0x6c>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	0b1b      	lsrs	r3, r3, #12
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	60fa      	str	r2, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	72fb      	strb	r3, [r7, #11]
      break;
 8008d72:	e006      	b.n	8008d82 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e8      	bne.n	8008d54 <SAI_Disable+0x2c>

  return status;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20000000 	.word	0x20000000
 8008d94:	95cbec1b 	.word	0x95cbec1b

08008d98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e022      	b.n	8008df0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f9 fff1 	bl	8002da4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f814 	bl	8008df8 <HAL_SD_InitCard>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e00a      	b.n	8008df0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008df8:	b5b0      	push	{r4, r5, r7, lr}
 8008dfa:	b08e      	sub	sp, #56	; 0x38
 8008dfc:	af04      	add	r7, sp, #16
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e14:	2376      	movs	r3, #118	; 0x76
 8008e16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681d      	ldr	r5, [r3, #0]
 8008e1c:	466c      	mov	r4, sp
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e30:	4628      	mov	r0, r5
 8008e32:	f002 fefd 	bl	800bc30 <SDMMC_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e056      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e56:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 ff31 	bl	800bcc4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e70:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 ff00 	bl	8009c78 <SD_PowerON>
 8008e78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e02e      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fe21 	bl	8009ae0 <SD_InitCard>
 8008e9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e01b      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 ff90 	bl	800bdec <SDMMC_CmdBlockLength>
 8008ecc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <HAL_SD_InitCard+0x108>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e000      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bdb0      	pop	{r4, r5, r7, pc}
 8008efe:	bf00      	nop
 8008f00:	004005ff 	.word	0x004005ff

08008f04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b092      	sub	sp, #72	; 0x48
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f12:	f7fa fbdb 	bl	80036cc <HAL_GetTick>
 8008f16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d107      	bne.n	8008f36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e1bd      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	f040 81b0 	bne.w	80092a4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	441a      	add	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d907      	bls.n	8008f68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e1a4      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2200      	movs	r2, #0
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d002      	beq.n	8008f86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	025b      	lsls	r3, r3, #9
 8008f84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	025b      	lsls	r3, r3, #9
 8008f90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f92:	2390      	movs	r3, #144	; 0x90
 8008f94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f96:	2302      	movs	r3, #2
 8008f98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f107 0214 	add.w	r2, r7, #20
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 fef1 	bl	800bd94 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d90a      	bls.n	8008fce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 ff55 	bl	800be74 <SDMMC_CmdReadMultiBlock>
 8008fca:	6478      	str	r0, [r7, #68]	; 0x44
 8008fcc:	e009      	b.n	8008fe2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 ff28 	bl	800be30 <SDMMC_CmdReadSingleBlock>
 8008fe0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d012      	beq.n	800900e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a7a      	ldr	r2, [pc, #488]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e151      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009012:	e061      	b.n	80090d8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d03c      	beq.n	800909c <HAL_SD_ReadBlocks+0x198>
 8009022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d039      	beq.n	800909c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009028:	2300      	movs	r3, #0
 800902a:	643b      	str	r3, [r7, #64]	; 0x40
 800902c:	e033      	b.n	8009096 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f002 fe28 	bl	800bc88 <SDMMC_ReadFIFO>
 8009038:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	b2da      	uxtb	r2, r3
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	3301      	adds	r3, #1
 8009046:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	3b01      	subs	r3, #1
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	0a1b      	lsrs	r3, r3, #8
 8009052:	b2da      	uxtb	r2, r3
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905a:	3301      	adds	r3, #1
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800905e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009060:	3b01      	subs	r3, #1
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	0c1b      	lsrs	r3, r3, #16
 8009068:	b2da      	uxtb	r2, r3
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	3301      	adds	r3, #1
 8009072:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	3b01      	subs	r3, #1
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	0e1b      	lsrs	r3, r3, #24
 800907e:	b2da      	uxtb	r2, r3
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009082:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	3301      	adds	r3, #1
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908c:	3b01      	subs	r3, #1
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	3301      	adds	r3, #1
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b07      	cmp	r3, #7
 800909a:	d9c8      	bls.n	800902e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800909c:	f7fa fb16 	bl	80036cc <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d902      	bls.n	80090b2 <HAL_SD_ReadBlocks+0x1ae>
 80090ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d112      	bne.n	80090d8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a48      	ldr	r2, [pc, #288]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 80090b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e0ec      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d096      	beq.n	8009014 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d022      	beq.n	800913a <HAL_SD_ReadBlocks+0x236>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d91f      	bls.n	800913a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d01b      	beq.n	800913a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f002 ff1a 	bl	800bf40 <SDMMC_CmdStopTransfer>
 800910c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800910e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009110:	2b00      	cmp	r3, #0
 8009112:	d012      	beq.n	800913a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2f      	ldr	r2, [pc, #188]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009122:	431a      	orrs	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e0bb      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d012      	beq.n	800916e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a22      	ldr	r2, [pc, #136]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	f043 0208 	orr.w	r2, r3, #8
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e0a1      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d012      	beq.n	80091a2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	f043 0202 	orr.w	r2, r3, #2
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e087      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d064      	beq.n	800927a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a08      	ldr	r2, [pc, #32]	; (80091d8 <HAL_SD_ReadBlocks+0x2d4>)
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	f043 0220 	orr.w	r2, r3, #32
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e06d      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
 80091d6:	bf00      	nop
 80091d8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 fd51 	bl	800bc88 <SDMMC_ReadFIFO>
 80091e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80091f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f2:	3301      	adds	r3, #1
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	3b01      	subs	r3, #1
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	b2da      	uxtb	r2, r3
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	3301      	adds	r3, #1
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920e:	3b01      	subs	r3, #1
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	0c1b      	lsrs	r3, r3, #16
 8009216:	b2da      	uxtb	r2, r3
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	3301      	adds	r3, #1
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	3b01      	subs	r3, #1
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	0e1b      	lsrs	r3, r3, #24
 800922c:	b2da      	uxtb	r2, r3
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	3301      	adds	r3, #1
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	3b01      	subs	r3, #1
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800923e:	f7fa fa45 	bl	80036cc <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800924a:	429a      	cmp	r2, r3
 800924c:	d902      	bls.n	8009254 <HAL_SD_ReadBlocks+0x350>
 800924e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009250:	2b00      	cmp	r3, #0
 8009252:	d112      	bne.n	800927a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a18      	ldr	r2, [pc, #96]	; (80092bc <HAL_SD_ReadBlocks+0x3b8>)
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e01b      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <HAL_SD_ReadBlocks+0x38a>
 8009288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1a6      	bne.n	80091dc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f240 523a 	movw	r2, #1338	; 0x53a
 8009296:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	e006      	b.n	80092b2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
  }
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3748      	adds	r7, #72	; 0x48
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	004005ff 	.word	0x004005ff

080092c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b092      	sub	sp, #72	; 0x48
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092ce:	f7fa f9fd 	bl	80036cc <HAL_GetTick>
 80092d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d107      	bne.n	80092f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e165      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	f040 8158 	bne.w	80095b0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009310:	429a      	cmp	r2, r3
 8009312:	d907      	bls.n	8009324 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e14c      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2203      	movs	r2, #3
 8009328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2200      	movs	r2, #0
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	2b01      	cmp	r3, #1
 800933a:	d002      	beq.n	8009342 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	025b      	lsls	r3, r3, #9
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009346:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800934e:	2390      	movs	r3, #144	; 0x90
 8009350:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009356:	2300      	movs	r3, #0
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800935a:	2301      	movs	r3, #1
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f107 0218 	add.w	r2, r7, #24
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f002 fd13 	bl	800bd94 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d90a      	bls.n	800938a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f002 fdbb 	bl	800befc <SDMMC_CmdWriteMultiBlock>
 8009386:	6478      	str	r0, [r7, #68]	; 0x44
 8009388:	e009      	b.n	800939e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2210      	movs	r2, #16
 800938e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009396:	4618      	mov	r0, r3
 8009398:	f002 fd8e 	bl	800beb8 <SDMMC_CmdWriteSingleBlock>
 800939c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d012      	beq.n	80093ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a87      	ldr	r2, [pc, #540]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b2:	431a      	orrs	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e0f9      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093ce:	e065      	b.n	800949c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d040      	beq.n	8009460 <HAL_SD_WriteBlocks+0x1a0>
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d03d      	beq.n	8009460 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	643b      	str	r3, [r7, #64]	; 0x40
 80093e8:	e037      	b.n	800945a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80093ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	3301      	adds	r3, #1
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	3b01      	subs	r3, #1
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	021a      	lsls	r2, r3, #8
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	3301      	adds	r3, #1
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	3b01      	subs	r3, #1
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	041a      	lsls	r2, r3, #16
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	3301      	adds	r3, #1
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009428:	3b01      	subs	r3, #1
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	061a      	lsls	r2, r3, #24
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943a:	3301      	adds	r3, #1
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	3b01      	subs	r3, #1
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f107 0214 	add.w	r2, r7, #20
 800944c:	4611      	mov	r1, r2
 800944e:	4618      	mov	r0, r3
 8009450:	f002 fc27 	bl	800bca2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009456:	3301      	adds	r3, #1
 8009458:	643b      	str	r3, [r7, #64]	; 0x40
 800945a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945c:	2b07      	cmp	r3, #7
 800945e:	d9c4      	bls.n	80093ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009460:	f7fa f934 	bl	80036cc <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800946c:	429a      	cmp	r2, r3
 800946e:	d902      	bls.n	8009476 <HAL_SD_WriteBlocks+0x1b6>
 8009470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009472:	2b00      	cmp	r3, #0
 8009474:	d112      	bne.n	800949c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a53      	ldr	r2, [pc, #332]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e090      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d092      	beq.n	80093d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d022      	beq.n	80094fe <HAL_SD_WriteBlocks+0x23e>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d91f      	bls.n	80094fe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d01b      	beq.n	80094fe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f002 fd38 	bl	800bf40 <SDMMC_CmdStopTransfer>
 80094d0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80094d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d012      	beq.n	80094fe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a3a      	ldr	r2, [pc, #232]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e6:	431a      	orrs	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e05f      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b00      	cmp	r3, #0
 800950a:	d012      	beq.n	8009532 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a2d      	ldr	r2, [pc, #180]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 8009512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	f043 0208 	orr.w	r2, r3, #8
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e045      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d012      	beq.n	8009566 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a20      	ldr	r2, [pc, #128]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 8009546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	f043 0202 	orr.w	r2, r3, #2
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e02b      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b00      	cmp	r3, #0
 8009572:	d012      	beq.n	800959a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <HAL_SD_WriteBlocks+0x308>)
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	f043 0210 	orr.w	r2, r3, #16
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e011      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f240 523a 	movw	r2, #1338	; 0x53a
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	e006      	b.n	80095be <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
  }
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3748      	adds	r7, #72	; 0x48
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	004005ff 	.word	0x004005ff

080095cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095da:	0f9b      	lsrs	r3, r3, #30
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e6:	0e9b      	lsrs	r3, r3, #26
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f8:	0e1b      	lsrs	r3, r3, #24
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	b2da      	uxtb	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960a:	0c1b      	lsrs	r3, r3, #16
 800960c:	b2da      	uxtb	r2, r3
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	b2da      	uxtb	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800962c:	0d1b      	lsrs	r3, r3, #20
 800962e:	b29a      	uxth	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009638:	0c1b      	lsrs	r3, r3, #16
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	b2da      	uxtb	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800964a:	0bdb      	lsrs	r3, r3, #15
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965c:	0b9b      	lsrs	r3, r3, #14
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966e:	0b5b      	lsrs	r3, r3, #13
 8009670:	b2db      	uxtb	r3, r3
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	b2da      	uxtb	r2, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009680:	0b1b      	lsrs	r3, r3, #12
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2200      	movs	r2, #0
 8009692:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	2b00      	cmp	r3, #0
 800969a:	d163      	bne.n	8009764 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a0:	009a      	lsls	r2, r3, #2
 80096a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80096a6:	4013      	ands	r3, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80096ac:	0f92      	lsrs	r2, r2, #30
 80096ae:	431a      	orrs	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b8:	0edb      	lsrs	r3, r3, #27
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ca:	0e1b      	lsrs	r3, r3, #24
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	0d5b      	lsrs	r3, r3, #21
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ee:	0c9b      	lsrs	r3, r3, #18
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009700:	0bdb      	lsrs	r3, r3, #15
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	b2da      	uxtb	r2, r3
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	7e1b      	ldrb	r3, [r3, #24]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	3302      	adds	r3, #2
 8009724:	2201      	movs	r2, #1
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800972e:	fb02 f203 	mul.w	r2, r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	7a1b      	ldrb	r3, [r3, #8]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	2201      	movs	r2, #1
 8009742:	409a      	lsls	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009750:	0a52      	lsrs	r2, r2, #9
 8009752:	fb02 f203 	mul.w	r2, r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009760:	661a      	str	r2, [r3, #96]	; 0x60
 8009762:	e031      	b.n	80097c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	2b01      	cmp	r3, #1
 800976a:	d11d      	bne.n	80097a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009770:	041b      	lsls	r3, r3, #16
 8009772:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977a:	0c1b      	lsrs	r3, r3, #16
 800977c:	431a      	orrs	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	3301      	adds	r3, #1
 8009788:	029a      	lsls	r2, r3, #10
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	661a      	str	r2, [r3, #96]	; 0x60
 80097a6:	e00f      	b.n	80097c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a58      	ldr	r2, [pc, #352]	; (8009910 <HAL_SD_GetCardCSD+0x344>)
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e09d      	b.n	8009904 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	0b9b      	lsrs	r3, r3, #14
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097de:	09db      	lsrs	r3, r3, #7
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	0fdb      	lsrs	r3, r3, #31
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980c:	0f5b      	lsrs	r3, r3, #29
 800980e:	b2db      	uxtb	r3, r3
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	b2da      	uxtb	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	0e9b      	lsrs	r3, r3, #26
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	b2da      	uxtb	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009830:	0d9b      	lsrs	r3, r3, #22
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	b2da      	uxtb	r2, r3
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009842:	0d5b      	lsrs	r3, r3, #21
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	b2da      	uxtb	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	0c1b      	lsrs	r3, r3, #16
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	b2da      	uxtb	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	0bdb      	lsrs	r3, r3, #15
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	0b9b      	lsrs	r3, r3, #14
 8009888:	b2db      	uxtb	r3, r3
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	b2da      	uxtb	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989a:	0b5b      	lsrs	r3, r3, #13
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ae:	0b1b      	lsrs	r3, r3, #12
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	0a9b      	lsrs	r3, r3, #10
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	004005ff 	.word	0x004005ff

08009914 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800996c:	b5b0      	push	{r4, r5, r7, lr}
 800996e:	b08e      	sub	sp, #56	; 0x38
 8009970:	af04      	add	r7, sp, #16
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2203      	movs	r2, #3
 8009980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009988:	2b03      	cmp	r3, #3
 800998a:	d02e      	beq.n	80099ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009992:	d106      	bne.n	80099a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
 80099a0:	e029      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099a8:	d10a      	bne.n	80099c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fa1a 	bl	8009de4 <SD_WideBus_Enable>
 80099b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	431a      	orrs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	639a      	str	r2, [r3, #56]	; 0x38
 80099be:	e01a      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa57 	bl	8009e7a <SD_WideBus_Disable>
 80099cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
 80099da:	e00c      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
 80099e8:	e005      	b.n	80099f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a26      	ldr	r2, [pc, #152]	; (8009a9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a14:	e01f      	b.n	8009a56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681d      	ldr	r5, [r3, #0]
 8009a3c:	466c      	mov	r4, sp
 8009a3e:	f107 0314 	add.w	r3, r7, #20
 8009a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a4a:	f107 0308 	add.w	r3, r7, #8
 8009a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a50:	4628      	mov	r0, r5
 8009a52:	f002 f8ed 	bl	800bc30 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f002 f9c4 	bl	800bdec <SDMMC_CmdBlockLength>
 8009a64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00c      	beq.n	8009a86 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3728      	adds	r7, #40	; 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bdb0      	pop	{r4, r5, r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	004005ff 	.word	0x004005ff

08009aa0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f96e 	bl	8009d94 <SD_SendStatus>
 8009ab8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	0a5b      	lsrs	r3, r3, #9
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ad6:	693b      	ldr	r3, [r7, #16]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ae0:	b5b0      	push	{r4, r5, r7, lr}
 8009ae2:	b094      	sub	sp, #80	; 0x50
 8009ae4:	af04      	add	r7, sp, #16
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f002 f8f6 	bl	800bce2 <SDMMC_GetPowerState>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b00:	e0b6      	b.n	8009c70 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d02f      	beq.n	8009b6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 fb21 	bl	800c156 <SDMMC_CmdSendCID>
 8009b14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	e0a7      	b.n	8009c70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 f921 	bl	800bd6e <SDMMC_GetResponse>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2104      	movs	r1, #4
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 f918 	bl	800bd6e <SDMMC_GetResponse>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2108      	movs	r1, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 f90f 	bl	800bd6e <SDMMC_GetResponse>
 8009b50:	4602      	mov	r2, r0
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	210c      	movs	r1, #12
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 f906 	bl	800bd6e <SDMMC_GetResponse>
 8009b62:	4602      	mov	r2, r0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d00d      	beq.n	8009b8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f107 020e 	add.w	r2, r7, #14
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 fb27 	bl	800c1d0 <SDMMC_CmdSetRelAdd>
 8009b82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	e070      	b.n	8009c70 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d036      	beq.n	8009c04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b96:	89fb      	ldrh	r3, [r7, #14]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f002 faf1 	bl	800c192 <SDMMC_CmdSendCSD>
 8009bb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bba:	e059      	b.n	8009c70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f8d3 	bl	800bd6e <SDMMC_GetResponse>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f002 f8ca 	bl	800bd6e <SDMMC_GetResponse>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2108      	movs	r1, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 f8c1 	bl	800bd6e <SDMMC_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	210c      	movs	r1, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 f8b8 	bl	800bd6e <SDMMC_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f002 f8af 	bl	800bd6e <SDMMC_GetResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0d1a      	lsrs	r2, r3, #20
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c18:	f107 0310 	add.w	r3, r7, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff fcd4 	bl	80095cc <HAL_SD_GetCardCSD>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c2e:	e01f      	b.n	8009c70 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f04f 0300 	mov.w	r3, #0
 8009c40:	4608      	mov	r0, r1
 8009c42:	f002 f99f 	bl	800bf84 <SDMMC_CmdSelDesel>
 8009c46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <SD_InitCard+0x172>
  {
    return errorstate;
 8009c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c50:	e00e      	b.n	8009c70 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	466c      	mov	r4, sp
 8009c5a:	f103 0210 	add.w	r2, r3, #16
 8009c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c64:	3304      	adds	r3, #4
 8009c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f001 ffe1 	bl	800bc30 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3740      	adds	r7, #64	; 0x40
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bdb0      	pop	{r4, r5, r7, pc}

08009c78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 f99a 	bl	800bfca <SDMMC_CmdGoIdleState>
 8009c96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	e072      	b.n	8009d88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 f9ad 	bl	800c006 <SDMMC_CmdOperCond>
 8009cac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00d      	beq.n	8009cd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 f983 	bl	800bfca <SDMMC_CmdGoIdleState>
 8009cc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	e05b      	b.n	8009d88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d137      	bne.n	8009d4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f002 f9ad 	bl	800c044 <SDMMC_CmdAppCommand>
 8009cea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d02d      	beq.n	8009d4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cf6:	e047      	b.n	8009d88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f002 f9a0 	bl	800c044 <SDMMC_CmdAppCommand>
 8009d04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	e03b      	b.n	8009d88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	491e      	ldr	r1, [pc, #120]	; (8009d90 <SD_PowerON+0x118>)
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 f9b6 	bl	800c088 <SDMMC_CmdAppOperCommand>
 8009d1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d28:	e02e      	b.n	8009d88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f002 f81c 	bl	800bd6e <SDMMC_GetResponse>
 8009d36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	0fdb      	lsrs	r3, r3, #31
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <SD_PowerON+0xcc>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <SD_PowerON+0xce>
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]

    count++;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d802      	bhi.n	8009d5e <SD_PowerON+0xe6>
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0cc      	beq.n	8009cf8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d902      	bls.n	8009d6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d6c:	e00c      	b.n	8009d88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	645a      	str	r2, [r3, #68]	; 0x44
 8009d7e:	e002      	b.n	8009d86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	c1100000 	.word	0xc1100000

08009d94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d102      	bne.n	8009daa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009da8:	e018      	b.n	8009ddc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f002 fa2b 	bl	800c212 <SDMMC_CmdSendStatus>
 8009dbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	e009      	b.n	8009ddc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 ffcd 	bl	800bd6e <SDMMC_GetResponse>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 ffb7 	bl	800bd6e <SDMMC_GetResponse>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e0a:	d102      	bne.n	8009e12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e10:	e02f      	b.n	8009e72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e12:	f107 030c 	add.w	r3, r7, #12
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f879 	bl	8009f10 <SD_FindSCR>
 8009e1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	e023      	b.n	8009e72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01c      	beq.n	8009e6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3c:	041b      	lsls	r3, r3, #16
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f002 f8ff 	bl	800c044 <SDMMC_CmdAppCommand>
 8009e46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	e00f      	b.n	8009e72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2102      	movs	r1, #2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f002 f939 	bl	800c0d0 <SDMMC_CmdBusWidth>
 8009e5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	e003      	b.n	8009e72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e001      	b.n	8009e72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e82:	2300      	movs	r3, #0
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 ff6c 	bl	800bd6e <SDMMC_GetResponse>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ea0:	d102      	bne.n	8009ea8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ea6:	e02f      	b.n	8009f08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ea8:	f107 030c 	add.w	r3, r7, #12
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f82e 	bl	8009f10 <SD_FindSCR>
 8009eb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	e023      	b.n	8009f08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01c      	beq.n	8009f04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed2:	041b      	lsls	r3, r3, #16
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f002 f8b4 	bl	800c044 <SDMMC_CmdAppCommand>
 8009edc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	e00f      	b.n	8009f08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2100      	movs	r1, #0
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f002 f8ee 	bl	800c0d0 <SDMMC_CmdBusWidth>
 8009ef4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	e003      	b.n	8009f08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e001      	b.n	8009f08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f10:	b590      	push	{r4, r7, lr}
 8009f12:	b08f      	sub	sp, #60	; 0x3c
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f1a:	f7f9 fbd7 	bl	80036cc <HAL_GetTick>
 8009f1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2108      	movs	r1, #8
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 ff58 	bl	800bdec <SDMMC_CmdBlockLength>
 8009f3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	e0b2      	b.n	800a0ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f50:	041b      	lsls	r3, r3, #16
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f002 f875 	bl	800c044 <SDMMC_CmdAppCommand>
 8009f5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	e0a3      	b.n	800a0ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f70:	2330      	movs	r3, #48	; 0x30
 8009f72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f74:	2302      	movs	r3, #2
 8009f76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f107 0210 	add.w	r2, r7, #16
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 ff02 	bl	800bd94 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f002 f8bd 	bl	800c114 <SDMMC_CmdSendSCR>
 8009f9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d02a      	beq.n	8009ff8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	e083      	b.n	800a0ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00f      	beq.n	8009fd4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6819      	ldr	r1, [r3, #0]
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	f107 0208 	add.w	r2, r7, #8
 8009fc0:	18d4      	adds	r4, r2, r3
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	f001 fe60 	bl	800bc88 <SDMMC_ReadFIFO>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	6023      	str	r3, [r4, #0]
      index++;
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	3301      	adds	r3, #1
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fd2:	e006      	b.n	8009fe2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d012      	beq.n	800a008 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fe2:	f7f9 fb73 	bl	80036cc <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff0:	d102      	bne.n	8009ff8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009ff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ff6:	e05a      	b.n	800a0ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0cf      	beq.n	8009fa6 <SD_FindSCR+0x96>
 800a006:	e000      	b.n	800a00a <SD_FindSCR+0xfa>
      break;
 800a008:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2208      	movs	r2, #8
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a020:	2308      	movs	r3, #8
 800a022:	e044      	b.n	800a0ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2202      	movs	r2, #2
 800a038:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	e037      	b.n	800a0ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2220      	movs	r2, #32
 800a052:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a054:	2320      	movs	r3, #32
 800a056:	e02a      	b.n	800a0ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a060:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	061a      	lsls	r2, r3, #24
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a06e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a078:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	0e1b      	lsrs	r3, r3, #24
 800a07e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	601a      	str	r2, [r3, #0]
    scr++;
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	3304      	adds	r3, #4
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	061a      	lsls	r2, r3, #24
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a096:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0e1b      	lsrs	r3, r3, #24
 800a0a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	373c      	adds	r7, #60	; 0x3c
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd90      	pop	{r4, r7, pc}

0800a0b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e025      	b.n	800a116 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7f9 f976 	bl	80033d0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	f001 fca8 	bl	800ba4c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	461a      	mov	r2, r3
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	f001 fd12 	bl	800bb30 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e04c      	b.n	800a1cc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7f8 fe8e 	bl	8002e68 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0203 	bic.w	r2, r2, #3
 800a162:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4b19      	ldr	r3, [pc, #100]	; (800a1d4 <HAL_SPDIFRX_Init+0xb4>)
 800a170:	4013      	ands	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a17c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a182:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a188:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a18e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a194:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a19a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a1a0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a1a6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a1ac:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	fff88407 	.word	0xfff88407

0800a1d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e049      	b.n	800a27e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f8 fe74 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f000 fade 	bl	800a7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d001      	beq.n	800a2a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e04c      	b.n	800a33a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a26      	ldr	r2, [pc, #152]	; (800a348 <HAL_TIM_Base_Start+0xc0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d022      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ba:	d01d      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a22      	ldr	r2, [pc, #136]	; (800a34c <HAL_TIM_Base_Start+0xc4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d018      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a21      	ldr	r2, [pc, #132]	; (800a350 <HAL_TIM_Base_Start+0xc8>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d013      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a1f      	ldr	r2, [pc, #124]	; (800a354 <HAL_TIM_Base_Start+0xcc>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00e      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a1e      	ldr	r2, [pc, #120]	; (800a358 <HAL_TIM_Base_Start+0xd0>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d009      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a1c      	ldr	r2, [pc, #112]	; (800a35c <HAL_TIM_Base_Start+0xd4>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d004      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x70>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <HAL_TIM_Base_Start+0xd8>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d115      	bne.n	800a324 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	4b19      	ldr	r3, [pc, #100]	; (800a364 <HAL_TIM_Base_Start+0xdc>)
 800a300:	4013      	ands	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b06      	cmp	r3, #6
 800a308:	d015      	beq.n	800a336 <HAL_TIM_Base_Start+0xae>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a310:	d011      	beq.n	800a336 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0201 	orr.w	r2, r2, #1
 800a320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a322:	e008      	b.n	800a336 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0201 	orr.w	r2, r2, #1
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e000      	b.n	800a338 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	40010000 	.word	0x40010000
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800
 800a354:	40000c00 	.word	0x40000c00
 800a358:	40010400 	.word	0x40010400
 800a35c:	40014000 	.word	0x40014000
 800a360:	40001800 	.word	0x40001800
 800a364:	00010007 	.word	0x00010007

0800a368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e049      	b.n	800a40e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f841 	bl	800a416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f000 fa16 	bl	800a7d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
	...

0800a42c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a442:	2302      	movs	r3, #2
 800a444:	e0fd      	b.n	800a642 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b14      	cmp	r3, #20
 800a452:	f200 80f0 	bhi.w	800a636 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a456:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a4b1 	.word	0x0800a4b1
 800a460:	0800a637 	.word	0x0800a637
 800a464:	0800a637 	.word	0x0800a637
 800a468:	0800a637 	.word	0x0800a637
 800a46c:	0800a4f1 	.word	0x0800a4f1
 800a470:	0800a637 	.word	0x0800a637
 800a474:	0800a637 	.word	0x0800a637
 800a478:	0800a637 	.word	0x0800a637
 800a47c:	0800a533 	.word	0x0800a533
 800a480:	0800a637 	.word	0x0800a637
 800a484:	0800a637 	.word	0x0800a637
 800a488:	0800a637 	.word	0x0800a637
 800a48c:	0800a573 	.word	0x0800a573
 800a490:	0800a637 	.word	0x0800a637
 800a494:	0800a637 	.word	0x0800a637
 800a498:	0800a637 	.word	0x0800a637
 800a49c:	0800a5b5 	.word	0x0800a5b5
 800a4a0:	0800a637 	.word	0x0800a637
 800a4a4:	0800a637 	.word	0x0800a637
 800a4a8:	0800a637 	.word	0x0800a637
 800a4ac:	0800a5f5 	.word	0x0800a5f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fa2e 	bl	800a918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	699a      	ldr	r2, [r3, #24]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0208 	orr.w	r2, r2, #8
 800a4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	699a      	ldr	r2, [r3, #24]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0204 	bic.w	r2, r2, #4
 800a4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6999      	ldr	r1, [r3, #24]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	430a      	orrs	r2, r1
 800a4ec:	619a      	str	r2, [r3, #24]
      break;
 800a4ee:	e0a3      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68b9      	ldr	r1, [r7, #8]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fa80 	bl	800a9fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	699a      	ldr	r2, [r3, #24]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6999      	ldr	r1, [r3, #24]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	021a      	lsls	r2, r3, #8
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	619a      	str	r2, [r3, #24]
      break;
 800a530:	e082      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68b9      	ldr	r1, [r7, #8]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fad7 	bl	800aaec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69da      	ldr	r2, [r3, #28]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f042 0208 	orr.w	r2, r2, #8
 800a54c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0204 	bic.w	r2, r2, #4
 800a55c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69d9      	ldr	r1, [r3, #28]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	691a      	ldr	r2, [r3, #16]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	61da      	str	r2, [r3, #28]
      break;
 800a570:	e062      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fb2d 	bl	800abd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69da      	ldr	r2, [r3, #28]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69da      	ldr	r2, [r3, #28]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69d9      	ldr	r1, [r3, #28]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	021a      	lsls	r2, r3, #8
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	61da      	str	r2, [r3, #28]
      break;
 800a5b2:	e041      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fb64 	bl	800ac88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0208 	orr.w	r2, r2, #8
 800a5ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0204 	bic.w	r2, r2, #4
 800a5de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	691a      	ldr	r2, [r3, #16]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5f2:	e021      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fb96 	bl	800ad2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a60e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	021a      	lsls	r2, r3, #8
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a634:	e000      	b.n	800a638 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop

0800a64c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_TIM_ConfigClockSource+0x18>
 800a660:	2302      	movs	r3, #2
 800a662:	e0b3      	b.n	800a7cc <HAL_TIM_ConfigClockSource+0x180>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	4b55      	ldr	r3, [pc, #340]	; (800a7d4 <HAL_TIM_ConfigClockSource+0x188>)
 800a680:	4013      	ands	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a68a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69c:	d03e      	beq.n	800a71c <HAL_TIM_ConfigClockSource+0xd0>
 800a69e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a2:	f200 8087 	bhi.w	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6aa:	f000 8085 	beq.w	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b2:	d87f      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6b4:	2b70      	cmp	r3, #112	; 0x70
 800a6b6:	d01a      	beq.n	800a6ee <HAL_TIM_ConfigClockSource+0xa2>
 800a6b8:	2b70      	cmp	r3, #112	; 0x70
 800a6ba:	d87b      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6bc:	2b60      	cmp	r3, #96	; 0x60
 800a6be:	d050      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0x116>
 800a6c0:	2b60      	cmp	r3, #96	; 0x60
 800a6c2:	d877      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6c4:	2b50      	cmp	r3, #80	; 0x50
 800a6c6:	d03c      	beq.n	800a742 <HAL_TIM_ConfigClockSource+0xf6>
 800a6c8:	2b50      	cmp	r3, #80	; 0x50
 800a6ca:	d873      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6cc:	2b40      	cmp	r3, #64	; 0x40
 800a6ce:	d058      	beq.n	800a782 <HAL_TIM_ConfigClockSource+0x136>
 800a6d0:	2b40      	cmp	r3, #64	; 0x40
 800a6d2:	d86f      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6d4:	2b30      	cmp	r3, #48	; 0x30
 800a6d6:	d064      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0x156>
 800a6d8:	2b30      	cmp	r3, #48	; 0x30
 800a6da:	d86b      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d060      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0x156>
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d867      	bhi.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d05c      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0x156>
 800a6e8:	2b10      	cmp	r3, #16
 800a6ea:	d05a      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a6ec:	e062      	b.n	800a7b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6899      	ldr	r1, [r3, #8]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f000 fbe3 	bl	800aec8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a710:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	609a      	str	r2, [r3, #8]
      break;
 800a71a:	e04e      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	6899      	ldr	r1, [r3, #8]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f000 fbcc 	bl	800aec8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689a      	ldr	r2, [r3, #8]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a73e:	609a      	str	r2, [r3, #8]
      break;
 800a740:	e03b      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6859      	ldr	r1, [r3, #4]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	461a      	mov	r2, r3
 800a750:	f000 fb40 	bl	800add4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2150      	movs	r1, #80	; 0x50
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 fb99 	bl	800ae92 <TIM_ITRx_SetConfig>
      break;
 800a760:	e02b      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	6859      	ldr	r1, [r3, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	461a      	mov	r2, r3
 800a770:	f000 fb5f 	bl	800ae32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2160      	movs	r1, #96	; 0x60
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fb89 	bl	800ae92 <TIM_ITRx_SetConfig>
      break;
 800a780:	e01b      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	6859      	ldr	r1, [r3, #4]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	461a      	mov	r2, r3
 800a790:	f000 fb20 	bl	800add4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2140      	movs	r1, #64	; 0x40
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fb79 	bl	800ae92 <TIM_ITRx_SetConfig>
      break;
 800a7a0:	e00b      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f000 fb70 	bl	800ae92 <TIM_ITRx_SetConfig>
        break;
 800a7b2:	e002      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e000      	b.n	800a7ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a7b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	fffeff88 	.word	0xfffeff88

0800a7d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a40      	ldr	r2, [pc, #256]	; (800a8ec <TIM_Base_SetConfig+0x114>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d013      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f6:	d00f      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a3d      	ldr	r2, [pc, #244]	; (800a8f0 <TIM_Base_SetConfig+0x118>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00b      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a3c      	ldr	r2, [pc, #240]	; (800a8f4 <TIM_Base_SetConfig+0x11c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d007      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a3b      	ldr	r2, [pc, #236]	; (800a8f8 <TIM_Base_SetConfig+0x120>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d003      	beq.n	800a818 <TIM_Base_SetConfig+0x40>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a3a      	ldr	r2, [pc, #232]	; (800a8fc <TIM_Base_SetConfig+0x124>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d108      	bne.n	800a82a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a2f      	ldr	r2, [pc, #188]	; (800a8ec <TIM_Base_SetConfig+0x114>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d02b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a838:	d027      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a2c      	ldr	r2, [pc, #176]	; (800a8f0 <TIM_Base_SetConfig+0x118>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d023      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a2b      	ldr	r2, [pc, #172]	; (800a8f4 <TIM_Base_SetConfig+0x11c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d01f      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <TIM_Base_SetConfig+0x120>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d01b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <TIM_Base_SetConfig+0x124>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d017      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a28      	ldr	r2, [pc, #160]	; (800a900 <TIM_Base_SetConfig+0x128>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d013      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a27      	ldr	r2, [pc, #156]	; (800a904 <TIM_Base_SetConfig+0x12c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00f      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a26      	ldr	r2, [pc, #152]	; (800a908 <TIM_Base_SetConfig+0x130>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d00b      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a25      	ldr	r2, [pc, #148]	; (800a90c <TIM_Base_SetConfig+0x134>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d007      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a24      	ldr	r2, [pc, #144]	; (800a910 <TIM_Base_SetConfig+0x138>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d003      	beq.n	800a88a <TIM_Base_SetConfig+0xb2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a23      	ldr	r2, [pc, #140]	; (800a914 <TIM_Base_SetConfig+0x13c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d108      	bne.n	800a89c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4313      	orrs	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	689a      	ldr	r2, [r3, #8]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <TIM_Base_SetConfig+0x114>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d003      	beq.n	800a8d0 <TIM_Base_SetConfig+0xf8>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <TIM_Base_SetConfig+0x124>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d103      	bne.n	800a8d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	615a      	str	r2, [r3, #20]
}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	40010000 	.word	0x40010000
 800a8f0:	40000400 	.word	0x40000400
 800a8f4:	40000800 	.word	0x40000800
 800a8f8:	40000c00 	.word	0x40000c00
 800a8fc:	40010400 	.word	0x40010400
 800a900:	40014000 	.word	0x40014000
 800a904:	40014400 	.word	0x40014400
 800a908:	40014800 	.word	0x40014800
 800a90c:	40001800 	.word	0x40001800
 800a910:	40001c00 	.word	0x40001c00
 800a914:	40002000 	.word	0x40002000

0800a918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	f023 0201 	bic.w	r2, r3, #1
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4b2b      	ldr	r3, [pc, #172]	; (800a9f0 <TIM_OC1_SetConfig+0xd8>)
 800a944:	4013      	ands	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f023 0303 	bic.w	r3, r3, #3
 800a94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f023 0302 	bic.w	r3, r3, #2
 800a960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <TIM_OC1_SetConfig+0xdc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <TIM_OC1_SetConfig+0x64>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a20      	ldr	r2, [pc, #128]	; (800a9f8 <TIM_OC1_SetConfig+0xe0>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10c      	bne.n	800a996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f023 0308 	bic.w	r3, r3, #8
 800a982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f023 0304 	bic.w	r3, r3, #4
 800a994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a16      	ldr	r2, [pc, #88]	; (800a9f4 <TIM_OC1_SetConfig+0xdc>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d003      	beq.n	800a9a6 <TIM_OC1_SetConfig+0x8e>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <TIM_OC1_SetConfig+0xe0>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d111      	bne.n	800a9ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	621a      	str	r2, [r3, #32]
}
 800a9e4:	bf00      	nop
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	fffeff8f 	.word	0xfffeff8f
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40010400 	.word	0x40010400

0800a9fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0210 	bic.w	r2, r3, #16
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	4b2e      	ldr	r3, [pc, #184]	; (800aae0 <TIM_OC2_SetConfig+0xe4>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0320 	bic.w	r3, r3, #32
 800aa46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a23      	ldr	r2, [pc, #140]	; (800aae4 <TIM_OC2_SetConfig+0xe8>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_OC2_SetConfig+0x68>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a22      	ldr	r2, [pc, #136]	; (800aae8 <TIM_OC2_SetConfig+0xec>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d10d      	bne.n	800aa80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <TIM_OC2_SetConfig+0xe8>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d003      	beq.n	800aa90 <TIM_OC2_SetConfig+0x94>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a17      	ldr	r2, [pc, #92]	; (800aae8 <TIM_OC2_SetConfig+0xec>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d113      	bne.n	800aab8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	621a      	str	r2, [r3, #32]
}
 800aad2:	bf00      	nop
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	feff8fff 	.word	0xfeff8fff
 800aae4:	40010000 	.word	0x40010000
 800aae8:	40010400 	.word	0x40010400

0800aaec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <TIM_OC3_SetConfig+0xe0>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a22      	ldr	r2, [pc, #136]	; (800abd0 <TIM_OC3_SetConfig+0xe4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d003      	beq.n	800ab52 <TIM_OC3_SetConfig+0x66>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a21      	ldr	r2, [pc, #132]	; (800abd4 <TIM_OC3_SetConfig+0xe8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d10d      	bne.n	800ab6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <TIM_OC3_SetConfig+0xe4>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d003      	beq.n	800ab7e <TIM_OC3_SetConfig+0x92>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a16      	ldr	r2, [pc, #88]	; (800abd4 <TIM_OC3_SetConfig+0xe8>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d113      	bne.n	800aba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	621a      	str	r2, [r3, #32]
}
 800abc0:	bf00      	nop
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	fffeff8f 	.word	0xfffeff8f
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400

0800abd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4b1e      	ldr	r3, [pc, #120]	; (800ac7c <TIM_OC4_SetConfig+0xa4>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	031b      	lsls	r3, r3, #12
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <TIM_OC4_SetConfig+0xa8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_OC4_SetConfig+0x68>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a12      	ldr	r2, [pc, #72]	; (800ac84 <TIM_OC4_SetConfig+0xac>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d109      	bne.n	800ac54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	019b      	lsls	r3, r3, #6
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	621a      	str	r2, [r3, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	feff8fff 	.word	0xfeff8fff
 800ac80:	40010000 	.word	0x40010000
 800ac84:	40010400 	.word	0x40010400

0800ac88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <TIM_OC5_SetConfig+0x98>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	041b      	lsls	r3, r3, #16
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a12      	ldr	r2, [pc, #72]	; (800ad24 <TIM_OC5_SetConfig+0x9c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d003      	beq.n	800ace6 <TIM_OC5_SetConfig+0x5e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a11      	ldr	r2, [pc, #68]	; (800ad28 <TIM_OC5_SetConfig+0xa0>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d109      	bne.n	800acfa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	621a      	str	r2, [r3, #32]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	fffeff8f 	.word	0xfffeff8f
 800ad24:	40010000 	.word	0x40010000
 800ad28:	40010400 	.word	0x40010400

0800ad2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4b1c      	ldr	r3, [pc, #112]	; (800adc8 <TIM_OC6_SetConfig+0x9c>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	021b      	lsls	r3, r3, #8
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	051b      	lsls	r3, r3, #20
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a13      	ldr	r2, [pc, #76]	; (800adcc <TIM_OC6_SetConfig+0xa0>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d003      	beq.n	800ad8c <TIM_OC6_SetConfig+0x60>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a12      	ldr	r2, [pc, #72]	; (800add0 <TIM_OC6_SetConfig+0xa4>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d109      	bne.n	800ada0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	029b      	lsls	r3, r3, #10
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	621a      	str	r2, [r3, #32]
}
 800adba:	bf00      	nop
 800adbc:	371c      	adds	r7, #28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	feff8fff 	.word	0xfeff8fff
 800adcc:	40010000 	.word	0x40010000
 800add0:	40010400 	.word	0x40010400

0800add4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	f023 0201 	bic.w	r2, r3, #1
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f023 030a 	bic.w	r3, r3, #10
 800ae10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b087      	sub	sp, #28
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	f023 0210 	bic.w	r2, r3, #16
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	031b      	lsls	r3, r3, #12
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	621a      	str	r2, [r3, #32]
}
 800ae86:	bf00      	nop
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	f043 0307 	orr.w	r3, r3, #7
 800aeb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	609a      	str	r2, [r3, #8]
}
 800aebc:	bf00      	nop
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	021a      	lsls	r2, r3, #8
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	609a      	str	r2, [r3, #8]
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e06d      	b.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a30      	ldr	r2, [pc, #192]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d004      	beq.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a2f      	ldr	r2, [pc, #188]	; (800b00c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d108      	bne.n	800af66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a20      	ldr	r2, [pc, #128]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d022      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af92:	d01d      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a1d      	ldr	r2, [pc, #116]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d018      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a1c      	ldr	r2, [pc, #112]	; (800b014 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d013      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a1a      	ldr	r2, [pc, #104]	; (800b018 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00e      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a15      	ldr	r2, [pc, #84]	; (800b00c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d009      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a16      	ldr	r2, [pc, #88]	; (800b01c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a15      	ldr	r2, [pc, #84]	; (800b020 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10c      	bne.n	800afea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2201      	movs	r2, #1
 800afee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	40010000 	.word	0x40010000
 800b00c:	40010400 	.word	0x40010400
 800b010:	40000400 	.word	0x40000400
 800b014:	40000800 	.word	0x40000800
 800b018:	40000c00 	.word	0x40000c00
 800b01c:	40014000 	.word	0x40014000
 800b020:	40001800 	.word	0x40001800

0800b024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d101      	bne.n	800b040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e065      	b.n	800b10c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	041b      	lsls	r3, r3, #16
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a16      	ldr	r2, [pc, #88]	; (800b118 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a14      	ldr	r2, [pc, #80]	; (800b11c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d115      	bne.n	800b0fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	051b      	lsls	r3, r3, #20
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	40010000 	.word	0x40010000
 800b11c:	40010400 	.word	0x40010400

0800b120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e040      	b.n	800b1b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7f8 f820 	bl	8003188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2224      	movs	r2, #36	; 0x24
 800b14c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0201 	bic.w	r2, r2, #1
 800b15c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f8c0 	bl	800b2e4 <UART_SetConfig>
 800b164:	4603      	mov	r3, r0
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e022      	b.n	800b1b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fb16 	bl	800b7a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b18a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b19a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fb9d 	bl	800b8ec <UART_CheckIdleState>
 800b1b2:	4603      	mov	r3, r0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08a      	sub	sp, #40	; 0x28
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	f040 8081 	bne.w	800b2d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <HAL_UART_Transmit+0x26>
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e079      	b.n	800b2da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UART_Transmit+0x38>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e072      	b.n	800b2da <HAL_UART_Transmit+0x11e>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2221      	movs	r2, #33	; 0x21
 800b208:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b20a:	f7f8 fa5f 	bl	80036cc <HAL_GetTick>
 800b20e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	88fa      	ldrh	r2, [r7, #6]
 800b21c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b228:	d108      	bne.n	800b23c <HAL_UART_Transmit+0x80>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d104      	bne.n	800b23c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61bb      	str	r3, [r7, #24]
 800b23a:	e003      	b.n	800b244 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b24c:	e02c      	b.n	800b2a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2200      	movs	r2, #0
 800b256:	2180      	movs	r1, #128	; 0x80
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 fb7a 	bl	800b952 <UART_WaitOnFlagUntilTimeout>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e038      	b.n	800b2da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b27c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	3302      	adds	r3, #2
 800b282:	61bb      	str	r3, [r7, #24]
 800b284:	e007      	b.n	800b296 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	781a      	ldrb	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3301      	adds	r3, #1
 800b294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1cc      	bne.n	800b24e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2140      	movs	r1, #64	; 0x40
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 fb47 	bl	800b952 <UART_WaitOnFlagUntilTimeout>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e005      	b.n	800b2da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e000      	b.n	800b2da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b2d8:	2302      	movs	r3, #2
  }
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3720      	adds	r7, #32
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689a      	ldr	r2, [r3, #8]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	4313      	orrs	r3, r2
 800b306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4ba7      	ldr	r3, [pc, #668]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b310:	4013      	ands	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6812      	ldr	r2, [r2, #0]
 800b316:	6979      	ldr	r1, [r7, #20]
 800b318:	430b      	orrs	r3, r1
 800b31a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	430a      	orrs	r2, r1
 800b354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a95      	ldr	r2, [pc, #596]	; (800b5b0 <UART_SetConfig+0x2cc>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d120      	bne.n	800b3a2 <UART_SetConfig+0xbe>
 800b360:	4b94      	ldr	r3, [pc, #592]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b366:	f003 0303 	and.w	r3, r3, #3
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d816      	bhi.n	800b39c <UART_SetConfig+0xb8>
 800b36e:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <UART_SetConfig+0x90>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b391 	.word	0x0800b391
 800b37c:	0800b38b 	.word	0x0800b38b
 800b380:	0800b397 	.word	0x0800b397
 800b384:	2301      	movs	r3, #1
 800b386:	77fb      	strb	r3, [r7, #31]
 800b388:	e14f      	b.n	800b62a <UART_SetConfig+0x346>
 800b38a:	2302      	movs	r3, #2
 800b38c:	77fb      	strb	r3, [r7, #31]
 800b38e:	e14c      	b.n	800b62a <UART_SetConfig+0x346>
 800b390:	2304      	movs	r3, #4
 800b392:	77fb      	strb	r3, [r7, #31]
 800b394:	e149      	b.n	800b62a <UART_SetConfig+0x346>
 800b396:	2308      	movs	r3, #8
 800b398:	77fb      	strb	r3, [r7, #31]
 800b39a:	e146      	b.n	800b62a <UART_SetConfig+0x346>
 800b39c:	2310      	movs	r3, #16
 800b39e:	77fb      	strb	r3, [r7, #31]
 800b3a0:	e143      	b.n	800b62a <UART_SetConfig+0x346>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a84      	ldr	r2, [pc, #528]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d132      	bne.n	800b412 <UART_SetConfig+0x12e>
 800b3ac:	4b81      	ldr	r3, [pc, #516]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b2:	f003 030c 	and.w	r3, r3, #12
 800b3b6:	2b0c      	cmp	r3, #12
 800b3b8:	d828      	bhi.n	800b40c <UART_SetConfig+0x128>
 800b3ba:	a201      	add	r2, pc, #4	; (adr r2, 800b3c0 <UART_SetConfig+0xdc>)
 800b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c0:	0800b3f5 	.word	0x0800b3f5
 800b3c4:	0800b40d 	.word	0x0800b40d
 800b3c8:	0800b40d 	.word	0x0800b40d
 800b3cc:	0800b40d 	.word	0x0800b40d
 800b3d0:	0800b401 	.word	0x0800b401
 800b3d4:	0800b40d 	.word	0x0800b40d
 800b3d8:	0800b40d 	.word	0x0800b40d
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b3fb 	.word	0x0800b3fb
 800b3e4:	0800b40d 	.word	0x0800b40d
 800b3e8:	0800b40d 	.word	0x0800b40d
 800b3ec:	0800b40d 	.word	0x0800b40d
 800b3f0:	0800b407 	.word	0x0800b407
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	77fb      	strb	r3, [r7, #31]
 800b3f8:	e117      	b.n	800b62a <UART_SetConfig+0x346>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	77fb      	strb	r3, [r7, #31]
 800b3fe:	e114      	b.n	800b62a <UART_SetConfig+0x346>
 800b400:	2304      	movs	r3, #4
 800b402:	77fb      	strb	r3, [r7, #31]
 800b404:	e111      	b.n	800b62a <UART_SetConfig+0x346>
 800b406:	2308      	movs	r3, #8
 800b408:	77fb      	strb	r3, [r7, #31]
 800b40a:	e10e      	b.n	800b62a <UART_SetConfig+0x346>
 800b40c:	2310      	movs	r3, #16
 800b40e:	77fb      	strb	r3, [r7, #31]
 800b410:	e10b      	b.n	800b62a <UART_SetConfig+0x346>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a69      	ldr	r2, [pc, #420]	; (800b5bc <UART_SetConfig+0x2d8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d120      	bne.n	800b45e <UART_SetConfig+0x17a>
 800b41c:	4b65      	ldr	r3, [pc, #404]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b426:	2b30      	cmp	r3, #48	; 0x30
 800b428:	d013      	beq.n	800b452 <UART_SetConfig+0x16e>
 800b42a:	2b30      	cmp	r3, #48	; 0x30
 800b42c:	d814      	bhi.n	800b458 <UART_SetConfig+0x174>
 800b42e:	2b20      	cmp	r3, #32
 800b430:	d009      	beq.n	800b446 <UART_SetConfig+0x162>
 800b432:	2b20      	cmp	r3, #32
 800b434:	d810      	bhi.n	800b458 <UART_SetConfig+0x174>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <UART_SetConfig+0x15c>
 800b43a:	2b10      	cmp	r3, #16
 800b43c:	d006      	beq.n	800b44c <UART_SetConfig+0x168>
 800b43e:	e00b      	b.n	800b458 <UART_SetConfig+0x174>
 800b440:	2300      	movs	r3, #0
 800b442:	77fb      	strb	r3, [r7, #31]
 800b444:	e0f1      	b.n	800b62a <UART_SetConfig+0x346>
 800b446:	2302      	movs	r3, #2
 800b448:	77fb      	strb	r3, [r7, #31]
 800b44a:	e0ee      	b.n	800b62a <UART_SetConfig+0x346>
 800b44c:	2304      	movs	r3, #4
 800b44e:	77fb      	strb	r3, [r7, #31]
 800b450:	e0eb      	b.n	800b62a <UART_SetConfig+0x346>
 800b452:	2308      	movs	r3, #8
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e0e8      	b.n	800b62a <UART_SetConfig+0x346>
 800b458:	2310      	movs	r3, #16
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	e0e5      	b.n	800b62a <UART_SetConfig+0x346>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a57      	ldr	r2, [pc, #348]	; (800b5c0 <UART_SetConfig+0x2dc>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d120      	bne.n	800b4aa <UART_SetConfig+0x1c6>
 800b468:	4b52      	ldr	r3, [pc, #328]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b472:	2bc0      	cmp	r3, #192	; 0xc0
 800b474:	d013      	beq.n	800b49e <UART_SetConfig+0x1ba>
 800b476:	2bc0      	cmp	r3, #192	; 0xc0
 800b478:	d814      	bhi.n	800b4a4 <UART_SetConfig+0x1c0>
 800b47a:	2b80      	cmp	r3, #128	; 0x80
 800b47c:	d009      	beq.n	800b492 <UART_SetConfig+0x1ae>
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	d810      	bhi.n	800b4a4 <UART_SetConfig+0x1c0>
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <UART_SetConfig+0x1a8>
 800b486:	2b40      	cmp	r3, #64	; 0x40
 800b488:	d006      	beq.n	800b498 <UART_SetConfig+0x1b4>
 800b48a:	e00b      	b.n	800b4a4 <UART_SetConfig+0x1c0>
 800b48c:	2300      	movs	r3, #0
 800b48e:	77fb      	strb	r3, [r7, #31]
 800b490:	e0cb      	b.n	800b62a <UART_SetConfig+0x346>
 800b492:	2302      	movs	r3, #2
 800b494:	77fb      	strb	r3, [r7, #31]
 800b496:	e0c8      	b.n	800b62a <UART_SetConfig+0x346>
 800b498:	2304      	movs	r3, #4
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e0c5      	b.n	800b62a <UART_SetConfig+0x346>
 800b49e:	2308      	movs	r3, #8
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e0c2      	b.n	800b62a <UART_SetConfig+0x346>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	e0bf      	b.n	800b62a <UART_SetConfig+0x346>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a45      	ldr	r2, [pc, #276]	; (800b5c4 <UART_SetConfig+0x2e0>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d125      	bne.n	800b500 <UART_SetConfig+0x21c>
 800b4b4:	4b3f      	ldr	r3, [pc, #252]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c2:	d017      	beq.n	800b4f4 <UART_SetConfig+0x210>
 800b4c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c8:	d817      	bhi.n	800b4fa <UART_SetConfig+0x216>
 800b4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ce:	d00b      	beq.n	800b4e8 <UART_SetConfig+0x204>
 800b4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d4:	d811      	bhi.n	800b4fa <UART_SetConfig+0x216>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <UART_SetConfig+0x1fe>
 800b4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4de:	d006      	beq.n	800b4ee <UART_SetConfig+0x20a>
 800b4e0:	e00b      	b.n	800b4fa <UART_SetConfig+0x216>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	77fb      	strb	r3, [r7, #31]
 800b4e6:	e0a0      	b.n	800b62a <UART_SetConfig+0x346>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	77fb      	strb	r3, [r7, #31]
 800b4ec:	e09d      	b.n	800b62a <UART_SetConfig+0x346>
 800b4ee:	2304      	movs	r3, #4
 800b4f0:	77fb      	strb	r3, [r7, #31]
 800b4f2:	e09a      	b.n	800b62a <UART_SetConfig+0x346>
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	77fb      	strb	r3, [r7, #31]
 800b4f8:	e097      	b.n	800b62a <UART_SetConfig+0x346>
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	77fb      	strb	r3, [r7, #31]
 800b4fe:	e094      	b.n	800b62a <UART_SetConfig+0x346>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a30      	ldr	r2, [pc, #192]	; (800b5c8 <UART_SetConfig+0x2e4>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d125      	bne.n	800b556 <UART_SetConfig+0x272>
 800b50a:	4b2a      	ldr	r3, [pc, #168]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b518:	d017      	beq.n	800b54a <UART_SetConfig+0x266>
 800b51a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b51e:	d817      	bhi.n	800b550 <UART_SetConfig+0x26c>
 800b520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b524:	d00b      	beq.n	800b53e <UART_SetConfig+0x25a>
 800b526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b52a:	d811      	bhi.n	800b550 <UART_SetConfig+0x26c>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <UART_SetConfig+0x254>
 800b530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b534:	d006      	beq.n	800b544 <UART_SetConfig+0x260>
 800b536:	e00b      	b.n	800b550 <UART_SetConfig+0x26c>
 800b538:	2301      	movs	r3, #1
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e075      	b.n	800b62a <UART_SetConfig+0x346>
 800b53e:	2302      	movs	r3, #2
 800b540:	77fb      	strb	r3, [r7, #31]
 800b542:	e072      	b.n	800b62a <UART_SetConfig+0x346>
 800b544:	2304      	movs	r3, #4
 800b546:	77fb      	strb	r3, [r7, #31]
 800b548:	e06f      	b.n	800b62a <UART_SetConfig+0x346>
 800b54a:	2308      	movs	r3, #8
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e06c      	b.n	800b62a <UART_SetConfig+0x346>
 800b550:	2310      	movs	r3, #16
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e069      	b.n	800b62a <UART_SetConfig+0x346>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1c      	ldr	r2, [pc, #112]	; (800b5cc <UART_SetConfig+0x2e8>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d137      	bne.n	800b5d0 <UART_SetConfig+0x2ec>
 800b560:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b566:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b56a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b56e:	d017      	beq.n	800b5a0 <UART_SetConfig+0x2bc>
 800b570:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b574:	d817      	bhi.n	800b5a6 <UART_SetConfig+0x2c2>
 800b576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b57a:	d00b      	beq.n	800b594 <UART_SetConfig+0x2b0>
 800b57c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b580:	d811      	bhi.n	800b5a6 <UART_SetConfig+0x2c2>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <UART_SetConfig+0x2aa>
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58a:	d006      	beq.n	800b59a <UART_SetConfig+0x2b6>
 800b58c:	e00b      	b.n	800b5a6 <UART_SetConfig+0x2c2>
 800b58e:	2300      	movs	r3, #0
 800b590:	77fb      	strb	r3, [r7, #31]
 800b592:	e04a      	b.n	800b62a <UART_SetConfig+0x346>
 800b594:	2302      	movs	r3, #2
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e047      	b.n	800b62a <UART_SetConfig+0x346>
 800b59a:	2304      	movs	r3, #4
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e044      	b.n	800b62a <UART_SetConfig+0x346>
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	e041      	b.n	800b62a <UART_SetConfig+0x346>
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	77fb      	strb	r3, [r7, #31]
 800b5aa:	e03e      	b.n	800b62a <UART_SetConfig+0x346>
 800b5ac:	efff69f3 	.word	0xefff69f3
 800b5b0:	40011000 	.word	0x40011000
 800b5b4:	40023800 	.word	0x40023800
 800b5b8:	40004400 	.word	0x40004400
 800b5bc:	40004800 	.word	0x40004800
 800b5c0:	40004c00 	.word	0x40004c00
 800b5c4:	40005000 	.word	0x40005000
 800b5c8:	40011400 	.word	0x40011400
 800b5cc:	40007800 	.word	0x40007800
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a71      	ldr	r2, [pc, #452]	; (800b79c <UART_SetConfig+0x4b8>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d125      	bne.n	800b626 <UART_SetConfig+0x342>
 800b5da:	4b71      	ldr	r3, [pc, #452]	; (800b7a0 <UART_SetConfig+0x4bc>)
 800b5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5e8:	d017      	beq.n	800b61a <UART_SetConfig+0x336>
 800b5ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5ee:	d817      	bhi.n	800b620 <UART_SetConfig+0x33c>
 800b5f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f4:	d00b      	beq.n	800b60e <UART_SetConfig+0x32a>
 800b5f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5fa:	d811      	bhi.n	800b620 <UART_SetConfig+0x33c>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <UART_SetConfig+0x324>
 800b600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b604:	d006      	beq.n	800b614 <UART_SetConfig+0x330>
 800b606:	e00b      	b.n	800b620 <UART_SetConfig+0x33c>
 800b608:	2300      	movs	r3, #0
 800b60a:	77fb      	strb	r3, [r7, #31]
 800b60c:	e00d      	b.n	800b62a <UART_SetConfig+0x346>
 800b60e:	2302      	movs	r3, #2
 800b610:	77fb      	strb	r3, [r7, #31]
 800b612:	e00a      	b.n	800b62a <UART_SetConfig+0x346>
 800b614:	2304      	movs	r3, #4
 800b616:	77fb      	strb	r3, [r7, #31]
 800b618:	e007      	b.n	800b62a <UART_SetConfig+0x346>
 800b61a:	2308      	movs	r3, #8
 800b61c:	77fb      	strb	r3, [r7, #31]
 800b61e:	e004      	b.n	800b62a <UART_SetConfig+0x346>
 800b620:	2310      	movs	r3, #16
 800b622:	77fb      	strb	r3, [r7, #31]
 800b624:	e001      	b.n	800b62a <UART_SetConfig+0x346>
 800b626:	2310      	movs	r3, #16
 800b628:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b632:	d15b      	bne.n	800b6ec <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b634:	7ffb      	ldrb	r3, [r7, #31]
 800b636:	2b08      	cmp	r3, #8
 800b638:	d827      	bhi.n	800b68a <UART_SetConfig+0x3a6>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <UART_SetConfig+0x35c>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b665 	.word	0x0800b665
 800b644:	0800b66d 	.word	0x0800b66d
 800b648:	0800b675 	.word	0x0800b675
 800b64c:	0800b68b 	.word	0x0800b68b
 800b650:	0800b67b 	.word	0x0800b67b
 800b654:	0800b68b 	.word	0x0800b68b
 800b658:	0800b68b 	.word	0x0800b68b
 800b65c:	0800b68b 	.word	0x0800b68b
 800b660:	0800b683 	.word	0x0800b683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b664:	f7fc f8ae 	bl	80077c4 <HAL_RCC_GetPCLK1Freq>
 800b668:	61b8      	str	r0, [r7, #24]
        break;
 800b66a:	e013      	b.n	800b694 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b66c:	f7fc f8be 	bl	80077ec <HAL_RCC_GetPCLK2Freq>
 800b670:	61b8      	str	r0, [r7, #24]
        break;
 800b672:	e00f      	b.n	800b694 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b674:	4b4b      	ldr	r3, [pc, #300]	; (800b7a4 <UART_SetConfig+0x4c0>)
 800b676:	61bb      	str	r3, [r7, #24]
        break;
 800b678:	e00c      	b.n	800b694 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b67a:	f7fb ffe1 	bl	8007640 <HAL_RCC_GetSysClockFreq>
 800b67e:	61b8      	str	r0, [r7, #24]
        break;
 800b680:	e008      	b.n	800b694 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b686:	61bb      	str	r3, [r7, #24]
        break;
 800b688:	e004      	b.n	800b694 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	77bb      	strb	r3, [r7, #30]
        break;
 800b692:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d074      	beq.n	800b784 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	005a      	lsls	r2, r3, #1
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	085b      	lsrs	r3, r3, #1
 800b6a4:	441a      	add	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b0f      	cmp	r3, #15
 800b6b6:	d916      	bls.n	800b6e6 <UART_SetConfig+0x402>
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6be:	d212      	bcs.n	800b6e6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	f023 030f 	bic.w	r3, r3, #15
 800b6c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	085b      	lsrs	r3, r3, #1
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	89fb      	ldrh	r3, [r7, #14]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	89fa      	ldrh	r2, [r7, #14]
 800b6e2:	60da      	str	r2, [r3, #12]
 800b6e4:	e04e      	b.n	800b784 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	77bb      	strb	r3, [r7, #30]
 800b6ea:	e04b      	b.n	800b784 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6ec:	7ffb      	ldrb	r3, [r7, #31]
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d827      	bhi.n	800b742 <UART_SetConfig+0x45e>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <UART_SetConfig+0x414>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b725 	.word	0x0800b725
 800b700:	0800b72d 	.word	0x0800b72d
 800b704:	0800b743 	.word	0x0800b743
 800b708:	0800b733 	.word	0x0800b733
 800b70c:	0800b743 	.word	0x0800b743
 800b710:	0800b743 	.word	0x0800b743
 800b714:	0800b743 	.word	0x0800b743
 800b718:	0800b73b 	.word	0x0800b73b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b71c:	f7fc f852 	bl	80077c4 <HAL_RCC_GetPCLK1Freq>
 800b720:	61b8      	str	r0, [r7, #24]
        break;
 800b722:	e013      	b.n	800b74c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b724:	f7fc f862 	bl	80077ec <HAL_RCC_GetPCLK2Freq>
 800b728:	61b8      	str	r0, [r7, #24]
        break;
 800b72a:	e00f      	b.n	800b74c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b72c:	4b1d      	ldr	r3, [pc, #116]	; (800b7a4 <UART_SetConfig+0x4c0>)
 800b72e:	61bb      	str	r3, [r7, #24]
        break;
 800b730:	e00c      	b.n	800b74c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b732:	f7fb ff85 	bl	8007640 <HAL_RCC_GetSysClockFreq>
 800b736:	61b8      	str	r0, [r7, #24]
        break;
 800b738:	e008      	b.n	800b74c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b73e:	61bb      	str	r3, [r7, #24]
        break;
 800b740:	e004      	b.n	800b74c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	77bb      	strb	r3, [r7, #30]
        break;
 800b74a:	bf00      	nop
    }

    if (pclk != 0U)
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d018      	beq.n	800b784 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	085a      	lsrs	r2, r3, #1
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	441a      	add	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	fbb2 f3f3 	udiv	r3, r2, r3
 800b764:	b29b      	uxth	r3, r3
 800b766:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b0f      	cmp	r3, #15
 800b76c:	d908      	bls.n	800b780 <UART_SetConfig+0x49c>
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b774:	d204      	bcs.n	800b780 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	e001      	b.n	800b784 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b790:	7fbb      	ldrb	r3, [r7, #30]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3720      	adds	r7, #32
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	40007c00 	.word	0x40007c00
 800b7a0:	40023800 	.word	0x40023800
 800b7a4:	00f42400 	.word	0x00f42400

0800b7a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00a      	beq.n	800b7d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	430a      	orrs	r2, r1
 800b7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	f003 0304 	and.w	r3, r3, #4
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00a      	beq.n	800b816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	430a      	orrs	r2, r1
 800b814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	f003 0308 	and.w	r3, r3, #8
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	430a      	orrs	r2, r1
 800b836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	f003 0310 	and.w	r3, r3, #16
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00a      	beq.n	800b85a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	430a      	orrs	r2, r1
 800b87a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01a      	beq.n	800b8be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8a6:	d10a      	bne.n	800b8be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	605a      	str	r2, [r3, #4]
  }
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8fc:	f7f7 fee6 	bl	80036cc <HAL_GetTick>
 800b900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0308 	and.w	r3, r3, #8
 800b90c:	2b08      	cmp	r3, #8
 800b90e:	d10e      	bne.n	800b92e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f817 	bl	800b952 <UART_WaitOnFlagUntilTimeout>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b92a:	2303      	movs	r3, #3
 800b92c:	e00d      	b.n	800b94a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2220      	movs	r2, #32
 800b938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	603b      	str	r3, [r7, #0]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b962:	e05e      	b.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b96a:	d05a      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b96c:	f7f7 feae 	bl	80036cc <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <UART_WaitOnFlagUntilTimeout+0x30>
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d11b      	bne.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b990:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f022 0201 	bic.w	r2, r2, #1
 800b9a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e043      	b.n	800ba42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d02c      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d6:	d124      	bne.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0201 	bic.w	r2, r2, #1
 800ba00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2220      	movs	r2, #32
 800ba06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2220      	movs	r2, #32
 800ba12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e00f      	b.n	800ba42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69da      	ldr	r2, [r3, #28]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	bf0c      	ite	eq
 800ba32:	2301      	moveq	r3, #1
 800ba34:	2300      	movne	r3, #0
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d091      	beq.n	800b964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d027      	beq.n	800bab6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	4b2f      	ldr	r3, [pc, #188]	; (800bb2c <FMC_SDRAM_Init+0xe0>)
 800ba70:	4013      	ands	r3, r2
 800ba72:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ba7c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ba82:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ba88:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ba8e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ba94:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ba9a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800baa0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800baa6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	e032      	b.n	800bb1c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bac2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bacc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bad2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <FMC_SDRAM_Init+0xe0>)
 800bae4:	4013      	ands	r3, r2
 800bae6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800baf0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800baf6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bafc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bb02:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bb08:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	ffff8000 	.word	0xffff8000

0800bb30 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d02e      	beq.n	800bba8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb56:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb66:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bb70:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bb7a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bb84:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bb8e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	609a      	str	r2, [r3, #8]
 800bba6:	e039      	b.n	800bc1c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <FMC_SDRAM_Timing_Init+0xfc>)
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbda:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bbf4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bbfe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	ff0f0fff 	.word	0xff0f0fff

0800bc30 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc30:	b084      	sub	sp, #16
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	f107 001c 	add.w	r0, r7, #28
 800bc3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc56:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <SDMMC_Init+0x54>)
 800bc68:	4013      	ands	r3, r2
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	b004      	add	sp, #16
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	ffff8100 	.word	0xffff8100

0800bc88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2203      	movs	r2, #3
 800bcd0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bcd2:	2002      	movs	r0, #2
 800bcd4:	f7f7 fd06 	bl	80036e4 <HAL_Delay>
  
  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0303 	and.w	r3, r3, #3
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	370c      	adds	r7, #12
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
	...

0800bd00 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bd24:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bd2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68da      	ldr	r2, [r3, #12]
 800bd36:	4b06      	ldr	r3, [pc, #24]	; (800bd50 <SDMMC_SendCommand+0x50>)
 800bd38:	4013      	ands	r3, r2
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	fffff000 	.word	0xfffff000

0800bd54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	b2db      	uxtb	r3, r3
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b085      	sub	sp, #20
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	4413      	add	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
}  
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bdba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bdc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bdc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdde:	2300      	movs	r3, #0

}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bdfa:	2310      	movs	r3, #16
 800bdfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdfe:	2340      	movs	r3, #64	; 0x40
 800be00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff ff74 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800be18:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1c:	2110      	movs	r1, #16
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa46 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800be24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be26:	69fb      	ldr	r3, [r7, #28]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be3e:	2311      	movs	r3, #17
 800be40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be42:	2340      	movs	r3, #64	; 0x40
 800be44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be50:	f107 0308 	add.w	r3, r7, #8
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff ff52 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be60:	2111      	movs	r1, #17
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa24 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800be68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be6a:	69fb      	ldr	r3, [r7, #28]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be82:	2312      	movs	r3, #18
 800be84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be86:	2340      	movs	r3, #64	; 0x40
 800be88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff ff30 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bea0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea4:	2112      	movs	r1, #18
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa02 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800beac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beae:	69fb      	ldr	r3, [r7, #28]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bec6:	2318      	movs	r3, #24
 800bec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ff0e 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee8:	2118      	movs	r1, #24
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f9e0 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800bef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bef2:	69fb      	ldr	r3, [r7, #28]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3720      	adds	r7, #32
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bf0a:	2319      	movs	r3, #25
 800bf0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf0e:	2340      	movs	r3, #64	; 0x40
 800bf10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf1c:	f107 0308 	add.w	r3, r7, #8
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff feec 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf28:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf2c:	2119      	movs	r1, #25
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f9be 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800bf34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf36:	69fb      	ldr	r3, [r7, #28]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3720      	adds	r7, #32
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf4c:	230c      	movs	r3, #12
 800bf4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf50:	2340      	movs	r3, #64	; 0x40
 800bf52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf5e:	f107 0308 	add.w	r3, r7, #8
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fecb 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf6a:	4a05      	ldr	r2, [pc, #20]	; (800bf80 <SDMMC_CmdStopTransfer+0x40>)
 800bf6c:	210c      	movs	r1, #12
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f99e 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800bf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf76:	69fb      	ldr	r3, [r7, #28]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	05f5e100 	.word	0x05f5e100

0800bf84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf94:	2307      	movs	r3, #7
 800bf96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf98:	2340      	movs	r3, #64	; 0x40
 800bf9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfa4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa6:	f107 0310 	add.w	r3, r7, #16
 800bfaa:	4619      	mov	r1, r3
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fea7 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb6:	2107      	movs	r1, #7
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 f979 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800bfbe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3728      	adds	r7, #40	; 0x28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b088      	sub	sp, #32
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfe8:	f107 0308 	add.w	r3, r7, #8
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff fe86 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 f92f 	bl	800c258 <SDMMC_GetCmdError>
 800bffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bffc:	69fb      	ldr	r3, [r7, #28]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3720      	adds	r7, #32
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b088      	sub	sp, #32
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c00e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c014:	2308      	movs	r3, #8
 800c016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c018:	2340      	movs	r3, #64	; 0x40
 800c01a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c026:	f107 0308 	add.w	r3, r7, #8
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff fe67 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fb26 	bl	800c684 <SDMMC_GetCmdResp7>
 800c038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c03a:	69fb      	ldr	r3, [r7, #28]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b088      	sub	sp, #32
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c052:	2337      	movs	r3, #55	; 0x37
 800c054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c056:	2340      	movs	r3, #64	; 0x40
 800c058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c05a:	2300      	movs	r3, #0
 800c05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c064:	f107 0308 	add.w	r3, r7, #8
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff fe48 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c070:	f241 3288 	movw	r2, #5000	; 0x1388
 800c074:	2137      	movs	r1, #55	; 0x37
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f91a 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800c07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c07e:	69fb      	ldr	r3, [r7, #28]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3720      	adds	r7, #32
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	4b0d      	ldr	r3, [pc, #52]	; (800c0cc <SDMMC_CmdAppOperCommand+0x44>)
 800c096:	4313      	orrs	r3, r2
 800c098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c09a:	2329      	movs	r3, #41	; 0x29
 800c09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c09e:	2340      	movs	r3, #64	; 0x40
 800c0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0ac:	f107 0308 	add.w	r3, r7, #8
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff fe24 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fa2f 	bl	800c51c <SDMMC_GetCmdResp3>
 800c0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3720      	adds	r7, #32
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	80100000 	.word	0x80100000

0800c0d0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0de:	2306      	movs	r3, #6
 800c0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0e2:	2340      	movs	r3, #64	; 0x40
 800c0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f0:	f107 0308 	add.w	r3, r7, #8
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fe02 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c100:	2106      	movs	r1, #6
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f8d4 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800c108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c10a:	69fb      	ldr	r3, [r7, #28]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c120:	2333      	movs	r3, #51	; 0x33
 800c122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fde1 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c142:	2133      	movs	r1, #51	; 0x33
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f8b3 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800c14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c14c:	69fb      	ldr	r3, [r7, #28]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3720      	adds	r7, #32
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b088      	sub	sp, #32
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c162:	2302      	movs	r3, #2
 800c164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c166:	23c0      	movs	r3, #192	; 0xc0
 800c168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c16a:	2300      	movs	r3, #0
 800c16c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fdc0 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f983 	bl	800c48c <SDMMC_GetCmdResp2>
 800c186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c188:	69fb      	ldr	r3, [r7, #28]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b088      	sub	sp, #32
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c1a0:	2309      	movs	r3, #9
 800c1a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1a4:	23c0      	movs	r3, #192	; 0xc0
 800c1a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1b2:	f107 0308 	add.w	r3, r7, #8
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff fda1 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f964 	bl	800c48c <SDMMC_GetCmdResp2>
 800c1c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1e2:	2340      	movs	r3, #64	; 0x40
 800c1e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7ff fd82 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	2103      	movs	r1, #3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f9c9 	bl	800c598 <SDMMC_GetCmdResp6>
 800c206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c208:	69fb      	ldr	r3, [r7, #28]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b088      	sub	sp, #32
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c220:	230d      	movs	r3, #13
 800c222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c224:	2340      	movs	r3, #64	; 0x40
 800c226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c232:	f107 0308 	add.w	r3, r7, #8
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff fd61 	bl	800bd00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c242:	210d      	movs	r1, #13
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f833 	bl	800c2b0 <SDMMC_GetCmdResp1>
 800c24a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c24c:	69fb      	ldr	r3, [r7, #28]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3720      	adds	r7, #32
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c260:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <SDMMC_GetCmdError+0x50>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a11      	ldr	r2, [pc, #68]	; (800c2ac <SDMMC_GetCmdError+0x54>)
 800c266:	fba2 2303 	umull	r2, r3, r2, r3
 800c26a:	0a5b      	lsrs	r3, r3, #9
 800c26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c270:	fb02 f303 	mul.w	r3, r2, r3
 800c274:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	1e5a      	subs	r2, r3, #1
 800c27a:	60fa      	str	r2, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c284:	e009      	b.n	800c29a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0f1      	beq.n	800c276 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	22c5      	movs	r2, #197	; 0xc5
 800c296:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000000 	.word	0x20000000
 800c2ac:	10624dd3 	.word	0x10624dd3

0800c2b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2be:	4b70      	ldr	r3, [pc, #448]	; (800c480 <SDMMC_GetCmdResp1+0x1d0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a70      	ldr	r2, [pc, #448]	; (800c484 <SDMMC_GetCmdResp1+0x1d4>)
 800c2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c8:	0a5a      	lsrs	r2, r3, #9
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
 800c2d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	61fa      	str	r2, [r7, #28]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2e0:	e0c9      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0ef      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0x22>
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ea      	bne.n	800c2d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2204      	movs	r2, #4
 800c30c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c30e:	2304      	movs	r3, #4
 800c310:	e0b1      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d004      	beq.n	800c328 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2201      	movs	r2, #1
 800c322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c324:	2301      	movs	r3, #1
 800c326:	e0a6      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	22c5      	movs	r2, #197	; 0xc5
 800c32c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f7ff fd10 	bl	800bd54 <SDMMC_GetCommandResponse>
 800c334:	4603      	mov	r3, r0
 800c336:	461a      	mov	r2, r3
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d001      	beq.n	800c342 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c33e:	2301      	movs	r3, #1
 800c340:	e099      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c342:	2100      	movs	r1, #0
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f7ff fd12 	bl	800bd6e <SDMMC_GetResponse>
 800c34a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	4b4e      	ldr	r3, [pc, #312]	; (800c488 <SDMMC_GetCmdResp1+0x1d8>)
 800c350:	4013      	ands	r3, r2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c356:	2300      	movs	r3, #0
 800c358:	e08d      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	da02      	bge.n	800c366 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c364:	e087      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	e080      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c37e:	2380      	movs	r3, #128	; 0x80
 800c380:	e079      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c390:	e071      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c39c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3a0:	e069      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3b0:	e061      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c3bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3c0:	e059      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3d0:	e051      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3e0:	e049      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3f0:	e041      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c3fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c400:	e039      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c40c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c410:	e031      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c41c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c420:	e029      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c42c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c430:	e021      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c43c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c440:	e019      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c44c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c450:	e011      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c45c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c460:	e009      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f003 0308 	and.w	r3, r3, #8
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c46c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c470:	e001      	b.n	800c476 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c476:	4618      	mov	r0, r3
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000000 	.word	0x20000000
 800c484:	10624dd3 	.word	0x10624dd3
 800c488:	fdffe008 	.word	0xfdffe008

0800c48c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c494:	4b1f      	ldr	r3, [pc, #124]	; (800c514 <SDMMC_GetCmdResp2+0x88>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a1f      	ldr	r2, [pc, #124]	; (800c518 <SDMMC_GetCmdResp2+0x8c>)
 800c49a:	fba2 2303 	umull	r2, r3, r2, r3
 800c49e:	0a5b      	lsrs	r3, r3, #9
 800c4a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4a4:	fb02 f303 	mul.w	r3, r2, r3
 800c4a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	1e5a      	subs	r2, r3, #1
 800c4ae:	60fa      	str	r2, [r7, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4b8:	e026      	b.n	800c508 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0ef      	beq.n	800c4aa <SDMMC_GetCmdResp2+0x1e>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1ea      	bne.n	800c4aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2204      	movs	r2, #4
 800c4e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4e6:	2304      	movs	r3, #4
 800c4e8:	e00e      	b.n	800c508 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e003      	b.n	800c508 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	22c5      	movs	r2, #197	; 0xc5
 800c504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20000000 	.word	0x20000000
 800c518:	10624dd3 	.word	0x10624dd3

0800c51c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c524:	4b1a      	ldr	r3, [pc, #104]	; (800c590 <SDMMC_GetCmdResp3+0x74>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a1a      	ldr	r2, [pc, #104]	; (800c594 <SDMMC_GetCmdResp3+0x78>)
 800c52a:	fba2 2303 	umull	r2, r3, r2, r3
 800c52e:	0a5b      	lsrs	r3, r3, #9
 800c530:	f241 3288 	movw	r2, #5000	; 0x1388
 800c534:	fb02 f303 	mul.w	r3, r2, r3
 800c538:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	1e5a      	subs	r2, r3, #1
 800c53e:	60fa      	str	r2, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c548:	e01b      	b.n	800c582 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0ef      	beq.n	800c53a <SDMMC_GetCmdResp3+0x1e>
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1ea      	bne.n	800c53a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d004      	beq.n	800c57a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2204      	movs	r2, #4
 800c574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c576:	2304      	movs	r3, #4
 800c578:	e003      	b.n	800c582 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	22c5      	movs	r2, #197	; 0xc5
 800c57e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	20000000 	.word	0x20000000
 800c594:	10624dd3 	.word	0x10624dd3

0800c598 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5a6:	4b35      	ldr	r3, [pc, #212]	; (800c67c <SDMMC_GetCmdResp6+0xe4>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a35      	ldr	r2, [pc, #212]	; (800c680 <SDMMC_GetCmdResp6+0xe8>)
 800c5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b0:	0a5b      	lsrs	r3, r3, #9
 800c5b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b6:	fb02 f303 	mul.w	r3, r2, r3
 800c5ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	1e5a      	subs	r2, r3, #1
 800c5c0:	61fa      	str	r2, [r7, #28]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5ca:	e052      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0ef      	beq.n	800c5bc <SDMMC_GetCmdResp6+0x24>
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1ea      	bne.n	800c5bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d004      	beq.n	800c5fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2204      	movs	r2, #4
 800c5f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5f8:	2304      	movs	r3, #4
 800c5fa:	e03a      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2201      	movs	r2, #1
 800c60c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c60e:	2301      	movs	r3, #1
 800c610:	e02f      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fb9e 	bl	800bd54 <SDMMC_GetCommandResponse>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	4293      	cmp	r3, r2
 800c620:	d001      	beq.n	800c626 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c622:	2301      	movs	r3, #1
 800c624:	e025      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	22c5      	movs	r2, #197	; 0xc5
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c62c:	2100      	movs	r1, #0
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	f7ff fb9d 	bl	800bd6e <SDMMC_GetResponse>
 800c634:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d106      	bne.n	800c64e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	0c1b      	lsrs	r3, r3, #16
 800c644:	b29a      	uxth	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e011      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c65c:	e009      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c66c:	e001      	b.n	800c672 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c66e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c672:	4618      	mov	r0, r3
 800c674:	3720      	adds	r7, #32
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	20000000 	.word	0x20000000
 800c680:	10624dd3 	.word	0x10624dd3

0800c684 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c68c:	4b22      	ldr	r3, [pc, #136]	; (800c718 <SDMMC_GetCmdResp7+0x94>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a22      	ldr	r2, [pc, #136]	; (800c71c <SDMMC_GetCmdResp7+0x98>)
 800c692:	fba2 2303 	umull	r2, r3, r2, r3
 800c696:	0a5b      	lsrs	r3, r3, #9
 800c698:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69c:	fb02 f303 	mul.w	r3, r2, r3
 800c6a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	1e5a      	subs	r2, r3, #1
 800c6a6:	60fa      	str	r2, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6b0:	e02c      	b.n	800c70c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0ef      	beq.n	800c6a2 <SDMMC_GetCmdResp7+0x1e>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ea      	bne.n	800c6a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2204      	movs	r2, #4
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6de:	2304      	movs	r3, #4
 800c6e0:	e014      	b.n	800c70c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d004      	beq.n	800c6f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e009      	b.n	800c70c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2240      	movs	r2, #64	; 0x40
 800c708:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c70a:	2300      	movs	r3, #0
  
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	20000000 	.word	0x20000000
 800c71c:	10624dd3 	.word	0x10624dd3

0800c720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c720:	b084      	sub	sp, #16
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	f107 001c 	add.w	r0, r7, #28
 800c72e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	2b01      	cmp	r3, #1
 800c736:	d120      	bne.n	800c77a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c73c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	68da      	ldr	r2, [r3, #12]
 800c748:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <USB_CoreInit+0xac>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d105      	bne.n	800c76e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f942 	bl	800c9f8 <USB_CoreReset>
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]
 800c778:	e010      	b.n	800c79c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f936 	bl	800c9f8 <USB_CoreReset>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d10b      	bne.n	800c7ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f043 0206 	orr.w	r2, r3, #6
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	f043 0220 	orr.w	r2, r3, #32
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c6:	b004      	add	sp, #16
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	ffbdffbf 	.word	0xffbdffbf

0800c7d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f043 0201 	orr.w	r2, r3, #1
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f023 0201 	bic.w	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d106      	bne.n	800c840 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	60da      	str	r2, [r3, #12]
 800c83e:	e00b      	b.n	800c858 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d106      	bne.n	800c854 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	60da      	str	r2, [r3, #12]
 800c852:	e001      	b.n	800c858 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e003      	b.n	800c860 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c858:	2032      	movs	r0, #50	; 0x32
 800c85a:	f7f6 ff43 	bl	80036e4 <HAL_Delay>

  return HAL_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	019b      	lsls	r3, r3, #6
 800c87a:	f043 0220 	orr.w	r2, r3, #32
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3301      	adds	r3, #1
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4a09      	ldr	r2, [pc, #36]	; (800c8b0 <USB_FlushTxFifo+0x48>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d901      	bls.n	800c894 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e006      	b.n	800c8a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	f003 0320 	and.w	r3, r3, #32
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	d0f0      	beq.n	800c882 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	00030d40 	.word	0x00030d40

0800c8b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2210      	movs	r2, #16
 800c8c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4a09      	ldr	r2, [pc, #36]	; (800c8f4 <USB_FlushRxFifo+0x40>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d901      	bls.n	800c8d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e006      	b.n	800c8e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	f003 0310 	and.w	r3, r3, #16
 800c8e0:	2b10      	cmp	r3, #16
 800c8e2:	d0f0      	beq.n	800c8c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	00030d40 	.word	0x00030d40

0800c8f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b089      	sub	sp, #36	; 0x24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	4611      	mov	r1, r2
 800c904:	461a      	mov	r2, r3
 800c906:	460b      	mov	r3, r1
 800c908:	71fb      	strb	r3, [r7, #7]
 800c90a:	4613      	mov	r3, r2
 800c90c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d11a      	bne.n	800c954 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c91e:	88bb      	ldrh	r3, [r7, #4]
 800c920:	3303      	adds	r3, #3
 800c922:	089b      	lsrs	r3, r3, #2
 800c924:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	61bb      	str	r3, [r7, #24]
 800c92a:	e00f      	b.n	800c94c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	031a      	lsls	r2, r3, #12
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	4413      	add	r3, r2
 800c934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c938:	461a      	mov	r2, r3
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	3304      	adds	r3, #4
 800c944:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	3301      	adds	r3, #1
 800c94a:	61bb      	str	r3, [r7, #24]
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	429a      	cmp	r2, r3
 800c952:	d3eb      	bcc.n	800c92c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3724      	adds	r7, #36	; 0x24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c962:	b480      	push	{r7}
 800c964:	b089      	sub	sp, #36	; 0x24
 800c966:	af00      	add	r7, sp, #0
 800c968:	60f8      	str	r0, [r7, #12]
 800c96a:	60b9      	str	r1, [r7, #8]
 800c96c:	4613      	mov	r3, r2
 800c96e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	3303      	adds	r3, #3
 800c97c:	089b      	lsrs	r3, r3, #2
 800c97e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c980:	2300      	movs	r3, #0
 800c982:	61bb      	str	r3, [r7, #24]
 800c984:	e00b      	b.n	800c99e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	601a      	str	r2, [r3, #0]
    pDest++;
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	3304      	adds	r3, #4
 800c996:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	3301      	adds	r3, #1
 800c99c:	61bb      	str	r3, [r7, #24]
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3ef      	bcc.n	800c986 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c9a6:	69fb      	ldr	r3, [r7, #28]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3724      	adds	r7, #36	; 0x24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	370c      	adds	r7, #12
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
	...

0800c9f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <USB_CoreReset+0x64>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d901      	bls.n	800ca16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e01b      	b.n	800ca4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	daf2      	bge.n	800ca04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f043 0201 	orr.w	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3301      	adds	r3, #1
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4a09      	ldr	r2, [pc, #36]	; (800ca5c <USB_CoreReset+0x64>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d901      	bls.n	800ca40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e006      	b.n	800ca4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d0f0      	beq.n	800ca2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	00030d40 	.word	0x00030d40

0800ca60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca60:	b084      	sub	sp, #16
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	f107 001c 	add.w	r0, r7, #28
 800ca6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	2300      	movs	r3, #0
 800ca80:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d018      	beq.n	800cacc <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d10a      	bne.n	800cab6 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800caae:	f043 0304 	orr.w	r3, r3, #4
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	e014      	b.n	800cae0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cac4:	f023 0304 	bic.w	r3, r3, #4
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	e009      	b.n	800cae0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68ba      	ldr	r2, [r7, #8]
 800cad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cada:	f023 0304 	bic.w	r3, r3, #4
 800cade:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cae0:	2110      	movs	r1, #16
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fec0 	bl	800c868 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fee3 	bl	800c8b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e015      	b.n	800cb20 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	015a      	lsls	r2, r3, #5
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	4413      	add	r3, r2
 800cafc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb00:	461a      	mov	r2, r3
 800cb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb14:	461a      	mov	r2, r3
 800cb16:	2300      	movs	r3, #0
 800cb18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d3e5      	bcc.n	800caf4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cb28:	2101      	movs	r1, #1
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f8ac 	bl	800cc88 <USB_DriveVbus>

  HAL_Delay(200U);
 800cb30:	20c8      	movs	r0, #200	; 0xc8
 800cb32:	f7f6 fdd7 	bl	80036e4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb42:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00b      	beq.n	800cb68 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a14      	ldr	r2, [pc, #80]	; (800cbac <USB_HostInit+0x14c>)
 800cb5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a13      	ldr	r2, [pc, #76]	; (800cbb0 <USB_HostInit+0x150>)
 800cb62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cb66:	e009      	b.n	800cb7c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2280      	movs	r2, #128	; 0x80
 800cb6c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a10      	ldr	r2, [pc, #64]	; (800cbb4 <USB_HostInit+0x154>)
 800cb72:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a10      	ldr	r2, [pc, #64]	; (800cbb8 <USB_HostInit+0x158>)
 800cb78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d105      	bne.n	800cb8e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	f043 0210 	orr.w	r2, r3, #16
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	699a      	ldr	r2, [r3, #24]
 800cb92:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <USB_HostInit+0x15c>)
 800cb94:	4313      	orrs	r3, r2
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cba6:	b004      	add	sp, #16
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	01000200 	.word	0x01000200
 800cbb0:	00e00300 	.word	0x00e00300
 800cbb4:	00600080 	.word	0x00600080
 800cbb8:	004000e0 	.word	0x004000e0
 800cbbc:	a3200008 	.word	0xa3200008

0800cbc0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	78fb      	ldrb	r3, [r7, #3]
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	68f9      	ldr	r1, [r7, #12]
 800cbf4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cbfc:	78fb      	ldrb	r3, [r7, #3]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d107      	bne.n	800cc12 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cc0e:	6053      	str	r3, [r2, #4]
 800cc10:	e009      	b.n	800cc26 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d106      	bne.n	800cc26 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f241 7370 	movw	r3, #6000	; 0x1770
 800cc24:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc62:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cc64:	2064      	movs	r0, #100	; 0x64
 800cc66:	f7f6 fd3d 	bl	80036e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc76:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cc78:	200a      	movs	r0, #10
 800cc7a:	f7f6 fd33 	bl	80036e4 <HAL_Delay>

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ccac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d109      	bne.n	800cccc <USB_DriveVbus+0x44>
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d106      	bne.n	800cccc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ccca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd6:	d109      	bne.n	800ccec <USB_DriveVbus+0x64>
 800ccd8:	78fb      	ldrb	r3, [r7, #3]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd06:	2300      	movs	r3, #0
 800cd08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	0c5b      	lsrs	r3, r3, #17
 800cd18:	f003 0303 	and.w	r3, r3, #3
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	b29b      	uxth	r3, r3
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
	...

0800cd4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	4608      	mov	r0, r1
 800cd56:	4611      	mov	r1, r2
 800cd58:	461a      	mov	r2, r3
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	70fb      	strb	r3, [r7, #3]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	70bb      	strb	r3, [r7, #2]
 800cd62:	4613      	mov	r3, r2
 800cd64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	015a      	lsls	r2, r3, #5
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	4413      	add	r3, r2
 800cd76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cd82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d87e      	bhi.n	800ce88 <USB_HC_Init+0x13c>
 800cd8a:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <USB_HC_Init+0x44>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800ce4b 	.word	0x0800ce4b
 800cd98:	0800cda1 	.word	0x0800cda1
 800cd9c:	0800ce0d 	.word	0x0800ce0d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	015a      	lsls	r2, r3, #5
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	4413      	add	r3, r2
 800cda8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdac:	461a      	mov	r2, r3
 800cdae:	f240 439d 	movw	r3, #1181	; 0x49d
 800cdb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cdb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	da10      	bge.n	800cdde <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	015a      	lsls	r2, r3, #5
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	78fa      	ldrb	r2, [r7, #3]
 800cdcc:	0151      	lsls	r1, r2, #5
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	440a      	add	r2, r1
 800cdd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdda:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cddc:	e057      	b.n	800ce8e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d051      	beq.n	800ce8e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	78fa      	ldrb	r2, [r7, #3]
 800cdfa:	0151      	lsls	r1, r2, #5
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	440a      	add	r2, r1
 800ce00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce08:	60d3      	str	r3, [r2, #12]
      break;
 800ce0a:	e040      	b.n	800ce8e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce18:	461a      	mov	r2, r3
 800ce1a:	f240 639d 	movw	r3, #1693	; 0x69d
 800ce1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	da34      	bge.n	800ce92 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	78fa      	ldrb	r2, [r7, #3]
 800ce38:	0151      	lsls	r1, r2, #5
 800ce3a:	693a      	ldr	r2, [r7, #16]
 800ce3c:	440a      	add	r2, r1
 800ce3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce46:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ce48:	e023      	b.n	800ce92 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce56:	461a      	mov	r2, r3
 800ce58:	f240 2325 	movw	r3, #549	; 0x225
 800ce5c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da17      	bge.n	800ce96 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	015a      	lsls	r2, r3, #5
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	78fa      	ldrb	r2, [r7, #3]
 800ce76:	0151      	lsls	r1, r2, #5
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	440a      	add	r2, r1
 800ce7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce80:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ce84:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ce86:	e006      	b.n	800ce96 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	77fb      	strb	r3, [r7, #31]
      break;
 800ce8c:	e004      	b.n	800ce98 <USB_HC_Init+0x14c>
      break;
 800ce8e:	bf00      	nop
 800ce90:	e002      	b.n	800ce98 <USB_HC_Init+0x14c>
      break;
 800ce92:	bf00      	nop
 800ce94:	e000      	b.n	800ce98 <USB_HC_Init+0x14c>
      break;
 800ce96:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	f003 030f 	and.w	r3, r3, #15
 800cea6:	2101      	movs	r1, #1
 800cea8:	fa01 f303 	lsl.w	r3, r1, r3
 800ceac:	6939      	ldr	r1, [r7, #16]
 800ceae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cec2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da03      	bge.n	800ced2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ceca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cece:	61bb      	str	r3, [r7, #24]
 800ced0:	e001      	b.n	800ced6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff ff0f 	bl	800ccfa <USB_GetHostSpeed>
 800cedc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d106      	bne.n	800cef4 <USB_HC_Init+0x1a8>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d003      	beq.n	800cef4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ceec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	e001      	b.n	800cef8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cef8:	787b      	ldrb	r3, [r7, #1]
 800cefa:	059b      	lsls	r3, r3, #22
 800cefc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cf00:	78bb      	ldrb	r3, [r7, #2]
 800cf02:	02db      	lsls	r3, r3, #11
 800cf04:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf08:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cf0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf0e:	049b      	lsls	r3, r3, #18
 800cf10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cf14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf18:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cf1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	0159      	lsls	r1, r3, #5
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	440b      	add	r3, r1
 800cf2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf2e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf34:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cf36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d10f      	bne.n	800cf5e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cf3e:	78fb      	ldrb	r3, [r7, #3]
 800cf40:	015a      	lsls	r2, r3, #5
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	4413      	add	r3, r2
 800cf46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	78fa      	ldrb	r2, [r7, #3]
 800cf4e:	0151      	lsls	r1, r2, #5
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	440a      	add	r2, r1
 800cf54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cf5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08c      	sub	sp, #48	; 0x30
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4613      	mov	r3, r2
 800cf74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	785b      	ldrb	r3, [r3, #1]
 800cf7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cf80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d02d      	beq.n	800cfee <USB_HC_StartXfer+0x86>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	791b      	ldrb	r3, [r3, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d129      	bne.n	800cfee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d117      	bne.n	800cfd0 <USB_HC_StartXfer+0x68>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	79db      	ldrb	r3, [r3, #7]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d003      	beq.n	800cfb0 <USB_HC_StartXfer+0x48>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	79db      	ldrb	r3, [r3, #7]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d10f      	bne.n	800cfd0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	69fa      	ldr	r2, [r7, #28]
 800cfc0:	0151      	lsls	r1, r2, #5
 800cfc2:	6a3a      	ldr	r2, [r7, #32]
 800cfc4:	440a      	add	r2, r1
 800cfc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10b      	bne.n	800cfee <USB_HC_StartXfer+0x86>
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	795b      	ldrb	r3, [r3, #5]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d107      	bne.n	800cfee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	785b      	ldrb	r3, [r3, #1]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 fa2f 	bl	800d448 <USB_DoPing>
      return HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e0f8      	b.n	800d1e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	695b      	ldr	r3, [r3, #20]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d018      	beq.n	800d028 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	8912      	ldrh	r2, [r2, #8]
 800cffe:	4413      	add	r3, r2
 800d000:	3b01      	subs	r3, #1
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	8912      	ldrh	r2, [r2, #8]
 800d006:	fbb3 f3f2 	udiv	r3, r3, r2
 800d00a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d00c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d00e:	8b7b      	ldrh	r3, [r7, #26]
 800d010:	429a      	cmp	r2, r3
 800d012:	d90b      	bls.n	800d02c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d014:	8b7b      	ldrh	r3, [r7, #26]
 800d016:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	8912      	ldrh	r2, [r2, #8]
 800d01e:	fb02 f203 	mul.w	r2, r2, r3
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	611a      	str	r2, [r3, #16]
 800d026:	e001      	b.n	800d02c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d028:	2301      	movs	r3, #1
 800d02a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	78db      	ldrb	r3, [r3, #3]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d007      	beq.n	800d044 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	8912      	ldrh	r2, [r2, #8]
 800d03a:	fb02 f203 	mul.w	r2, r2, r3
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	611a      	str	r2, [r3, #16]
 800d042:	e003      	b.n	800d04c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	695a      	ldr	r2, [r3, #20]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d056:	04d9      	lsls	r1, r3, #19
 800d058:	4b63      	ldr	r3, [pc, #396]	; (800d1e8 <USB_HC_StartXfer+0x280>)
 800d05a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d05c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	7a9b      	ldrb	r3, [r3, #10]
 800d062:	075b      	lsls	r3, r3, #29
 800d064:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d068:	69f9      	ldr	r1, [r7, #28]
 800d06a:	0148      	lsls	r0, r1, #5
 800d06c:	6a39      	ldr	r1, [r7, #32]
 800d06e:	4401      	add	r1, r0
 800d070:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d074:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d076:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d009      	beq.n	800d092 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	68d9      	ldr	r1, [r3, #12]
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	015a      	lsls	r2, r3, #5
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	4413      	add	r3, r2
 800d08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08e:	460a      	mov	r2, r1
 800d090:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf0c      	ite	eq
 800d0a2:	2301      	moveq	r3, #1
 800d0a4:	2300      	movne	r3, #0
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	015a      	lsls	r2, r3, #5
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	69fa      	ldr	r2, [r7, #28]
 800d0ba:	0151      	lsls	r1, r2, #5
 800d0bc:	6a3a      	ldr	r2, [r7, #32]
 800d0be:	440a      	add	r2, r1
 800d0c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	7e7b      	ldrb	r3, [r7, #25]
 800d0da:	075b      	lsls	r3, r3, #29
 800d0dc:	69f9      	ldr	r1, [r7, #28]
 800d0de:	0148      	lsls	r0, r1, #5
 800d0e0:	6a39      	ldr	r1, [r7, #32]
 800d0e2:	4401      	add	r1, r0
 800d0e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	015a      	lsls	r2, r3, #5
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d102:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	78db      	ldrb	r3, [r3, #3]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d004      	beq.n	800d116 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d112:	613b      	str	r3, [r7, #16]
 800d114:	e003      	b.n	800d11e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d11c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d124:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d132:	461a      	mov	r2, r3
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d138:	79fb      	ldrb	r3, [r7, #7]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	e04e      	b.n	800d1e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	78db      	ldrb	r3, [r3, #3]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d149      	bne.n	800d1de <USB_HC_StartXfer+0x276>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d045      	beq.n	800d1de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	79db      	ldrb	r3, [r3, #7]
 800d156:	2b03      	cmp	r3, #3
 800d158:	d830      	bhi.n	800d1bc <USB_HC_StartXfer+0x254>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <USB_HC_StartXfer+0x1f8>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d171 	.word	0x0800d171
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d171 	.word	0x0800d171
 800d16c:	0800d195 	.word	0x0800d195
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	3303      	adds	r3, #3
 800d176:	089b      	lsrs	r3, r3, #2
 800d178:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d17a:	8afa      	ldrh	r2, [r7, #22]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d180:	b29b      	uxth	r3, r3
 800d182:	429a      	cmp	r2, r3
 800d184:	d91c      	bls.n	800d1c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	f043 0220 	orr.w	r2, r3, #32
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	619a      	str	r2, [r3, #24]
        }
        break;
 800d192:	e015      	b.n	800d1c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	3303      	adds	r3, #3
 800d19a:	089b      	lsrs	r3, r3, #2
 800d19c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d19e:	8afa      	ldrh	r2, [r7, #22]
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d90a      	bls.n	800d1c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800d1ba:	e003      	b.n	800d1c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d1bc:	bf00      	nop
 800d1be:	e002      	b.n	800d1c6 <USB_HC_StartXfer+0x25e>
        break;
 800d1c0:	bf00      	nop
 800d1c2:	e000      	b.n	800d1c6 <USB_HC_StartXfer+0x25e>
        break;
 800d1c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	68d9      	ldr	r1, [r3, #12]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	785a      	ldrb	r2, [r3, #1]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	9000      	str	r0, [sp, #0]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fb8d 	bl	800c8f8 <USB_WritePacket>
  }

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3728      	adds	r7, #40	; 0x28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	1ff80000 	.word	0x1ff80000

0800d1ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	b29b      	uxth	r3, r3
}
 800d202:	4618      	mov	r0, r3
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d20e:	b480      	push	{r7}
 800d210:	b089      	sub	sp, #36	; 0x24
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	0c9b      	lsrs	r3, r3, #18
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	4413      	add	r3, r2
 800d244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	0fdb      	lsrs	r3, r3, #31
 800d24c:	f003 0301 	and.w	r3, r3, #1
 800d250:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	f003 0320 	and.w	r3, r3, #32
 800d25a:	2b20      	cmp	r3, #32
 800d25c:	d104      	bne.n	800d268 <USB_HC_Halt+0x5a>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	e0e8      	b.n	800d43a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <USB_HC_Halt+0x66>
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d173      	bne.n	800d35c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	0151      	lsls	r1, r2, #5
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	440a      	add	r2, r1
 800d28a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d28e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d292:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f040 80cb 	bne.w	800d438 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d143      	bne.n	800d336 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	015a      	lsls	r2, r3, #5
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	697a      	ldr	r2, [r7, #20]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	015a      	lsls	r2, r3, #5
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	697a      	ldr	r2, [r7, #20]
 800d2de:	0151      	lsls	r1, r2, #5
 800d2e0:	69ba      	ldr	r2, [r7, #24]
 800d2e2:	440a      	add	r2, r1
 800d2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	015a      	lsls	r2, r3, #5
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	0151      	lsls	r1, r2, #5
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	440a      	add	r2, r1
 800d304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d308:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d30c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	3301      	adds	r3, #1
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d31a:	d81d      	bhi.n	800d358 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	015a      	lsls	r2, r3, #5
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	4413      	add	r3, r2
 800d324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d32e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d332:	d0ec      	beq.n	800d30e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d334:	e080      	b.n	800d438 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	0151      	lsls	r1, r2, #5
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	440a      	add	r2, r1
 800d34c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d354:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d356:	e06f      	b.n	800d438 <USB_HC_Halt+0x22a>
            break;
 800d358:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d35a:	e06d      	b.n	800d438 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	4413      	add	r3, r2
 800d364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	440a      	add	r2, r1
 800d372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d37a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d143      	bne.n	800d414 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	015a      	lsls	r2, r3, #5
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	4413      	add	r3, r2
 800d394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	0151      	lsls	r1, r2, #5
 800d39e:	69ba      	ldr	r2, [r7, #24]
 800d3a0:	440a      	add	r2, r1
 800d3a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	0151      	lsls	r1, r2, #5
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	440a      	add	r2, r1
 800d3c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	0151      	lsls	r1, r2, #5
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	440a      	add	r2, r1
 800d3e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	61fb      	str	r3, [r7, #28]
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3f8:	d81d      	bhi.n	800d436 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	4413      	add	r3, r2
 800d402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d40c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d410:	d0ec      	beq.n	800d3ec <USB_HC_Halt+0x1de>
 800d412:	e011      	b.n	800d438 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	0151      	lsls	r1, r2, #5
 800d426:	69ba      	ldr	r2, [r7, #24]
 800d428:	440a      	add	r2, r1
 800d42a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d42e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	e000      	b.n	800d438 <USB_HC_Halt+0x22a>
          break;
 800d436:	bf00      	nop
    }
  }

  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3724      	adds	r7, #36	; 0x24
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
	...

0800d448 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d458:	78fb      	ldrb	r3, [r7, #3]
 800d45a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d45c:	2301      	movs	r3, #1
 800d45e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	04da      	lsls	r2, r3, #19
 800d464:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <USB_DoPing+0x74>)
 800d466:	4013      	ands	r3, r2
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	0151      	lsls	r1, r2, #5
 800d46c:	697a      	ldr	r2, [r7, #20]
 800d46e:	440a      	add	r2, r1
 800d470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d478:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	015a      	lsls	r2, r3, #5
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	4413      	add	r3, r2
 800d482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d490:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d498:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	015a      	lsls	r2, r3, #5
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	1ff80000 	.word	0x1ff80000

0800d4c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff f98e 	bl	800c7f2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d4d6:	2110      	movs	r1, #16
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff f9c5 	bl	800c868 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff f9e8 	bl	800c8b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	613b      	str	r3, [r7, #16]
 800d4e8:	e01f      	b.n	800d52a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	015a      	lsls	r2, r3, #5
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d500:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d510:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d51e:	461a      	mov	r2, r3
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	3301      	adds	r3, #1
 800d528:	613b      	str	r3, [r7, #16]
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	2b0f      	cmp	r3, #15
 800d52e:	d9dc      	bls.n	800d4ea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d530:	2300      	movs	r3, #0
 800d532:	613b      	str	r3, [r7, #16]
 800d534:	e034      	b.n	800d5a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d54c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d554:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d55c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	4413      	add	r3, r2
 800d566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d56a:	461a      	mov	r2, r3
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	3301      	adds	r3, #1
 800d574:	617b      	str	r3, [r7, #20]
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d57c:	d80c      	bhi.n	800d598 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	015a      	lsls	r2, r3, #5
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4413      	add	r3, r2
 800d586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d594:	d0ec      	beq.n	800d570 <USB_StopHost+0xb0>
 800d596:	e000      	b.n	800d59a <USB_StopHost+0xda>
        break;
 800d598:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	3301      	adds	r3, #1
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	2b0f      	cmp	r3, #15
 800d5a4:	d9c7      	bls.n	800d536 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff f907 	bl	800c7d0 <USB_EnableGlobalInt>

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5d0:	4904      	ldr	r1, [pc, #16]	; (800d5e4 <MX_FATFS_Init+0x18>)
 800d5d2:	4805      	ldr	r0, [pc, #20]	; (800d5e8 <MX_FATFS_Init+0x1c>)
 800d5d4:	f002 f8d8 	bl	800f788 <FATFS_LinkDriver>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4b03      	ldr	r3, [pc, #12]	; (800d5ec <MX_FATFS_Init+0x20>)
 800d5de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5e0:	bf00      	nop
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	200011d4 	.word	0x200011d4
 800d5e8:	080163ac 	.word	0x080163ac
 800d5ec:	200011d0 	.word	0x200011d0

0800d5f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5fa:	f000 f879 	bl	800d6f0 <BSP_SD_IsDetected>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b01      	cmp	r3, #1
 800d602:	d001      	beq.n	800d608 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d604:	2302      	movs	r3, #2
 800d606:	e012      	b.n	800d62e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d608:	480b      	ldr	r0, [pc, #44]	; (800d638 <BSP_SD_Init+0x48>)
 800d60a:	f7fb fbc5 	bl	8008d98 <HAL_SD_Init>
 800d60e:	4603      	mov	r3, r0
 800d610:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d109      	bne.n	800d62c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d61c:	4806      	ldr	r0, [pc, #24]	; (800d638 <BSP_SD_Init+0x48>)
 800d61e:	f7fc f9a5 	bl	800996c <HAL_SD_ConfigWideBusOperation>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d62c:	79fb      	ldrb	r3, [r7, #7]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20000c5c 	.word	0x20000c5c

0800d63c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af02      	add	r7, sp, #8
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	68f9      	ldr	r1, [r7, #12]
 800d658:	4806      	ldr	r0, [pc, #24]	; (800d674 <BSP_SD_ReadBlocks+0x38>)
 800d65a:	f7fb fc53 	bl	8008f04 <HAL_SD_ReadBlocks>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000c5c 	.word	0x20000c5c

0800d678 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	68f9      	ldr	r1, [r7, #12]
 800d694:	4806      	ldr	r0, [pc, #24]	; (800d6b0 <BSP_SD_WriteBlocks+0x38>)
 800d696:	f7fb fe13 	bl	80092c0 <HAL_SD_WriteBlocks>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d001      	beq.n	800d6a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20000c5c 	.word	0x20000c5c

0800d6b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6b8:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <BSP_SD_GetCardState+0x1c>)
 800d6ba:	f7fc f9f1 	bl	8009aa0 <HAL_SD_GetCardState>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	bf14      	ite	ne
 800d6c4:	2301      	movne	r3, #1
 800d6c6:	2300      	moveq	r3, #0
 800d6c8:	b2db      	uxtb	r3, r3
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20000c5c 	.word	0x20000c5c

0800d6d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	4803      	ldr	r0, [pc, #12]	; (800d6ec <BSP_SD_GetCardInfo+0x18>)
 800d6e0:	f7fc f918 	bl	8009914 <HAL_SD_GetCardInfo>
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20000c5c 	.word	0x20000c5c

0800d6f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d6fa:	f000 f80b 	bl	800d714 <BSP_PlatformIsDetected>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d704:	2300      	movs	r3, #0
 800d706:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d708:	79fb      	ldrb	r3, [r7, #7]
 800d70a:	b2db      	uxtb	r3, r3
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d71a:	2301      	movs	r3, #1
 800d71c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d71e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d722:	4806      	ldr	r0, [pc, #24]	; (800d73c <BSP_PlatformIsDetected+0x28>)
 800d724:	f7f7 f898 	bl	8004858 <HAL_GPIO_ReadPin>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d72e:	2300      	movs	r3, #0
 800d730:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d732:	79fb      	ldrb	r3, [r7, #7]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	40020800 	.word	0x40020800

0800d740 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d74a:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <SD_CheckStatus+0x38>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d750:	f7ff ffb0 	bl	800d6b4 <BSP_SD_GetCardState>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d107      	bne.n	800d76a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d75a:	4b07      	ldr	r3, [pc, #28]	; (800d778 <SD_CheckStatus+0x38>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f023 0301 	bic.w	r3, r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	4b04      	ldr	r3, [pc, #16]	; (800d778 <SD_CheckStatus+0x38>)
 800d768:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d76a:	4b03      	ldr	r3, [pc, #12]	; (800d778 <SD_CheckStatus+0x38>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	b2db      	uxtb	r3, r3
}
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20000009 	.word	0x20000009

0800d77c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d786:	4b0b      	ldr	r3, [pc, #44]	; (800d7b4 <SD_initialize+0x38>)
 800d788:	2201      	movs	r2, #1
 800d78a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d78c:	f7ff ff30 	bl	800d5f0 <BSP_SD_Init>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d107      	bne.n	800d7a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff ffd1 	bl	800d740 <SD_CheckStatus>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4b04      	ldr	r3, [pc, #16]	; (800d7b4 <SD_initialize+0x38>)
 800d7a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d7a6:	4b03      	ldr	r3, [pc, #12]	; (800d7b4 <SD_initialize+0x38>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	b2db      	uxtb	r3, r3
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	20000009 	.word	0x20000009

0800d7b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d7c2:	79fb      	ldrb	r3, [r7, #7]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff ffbb 	bl	800d740 <SD_CheckStatus>
 800d7ca:	4603      	mov	r3, r0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	607a      	str	r2, [r7, #4]
 800d7de:	603b      	str	r3, [r7, #0]
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	68b8      	ldr	r0, [r7, #8]
 800d7f2:	f7ff ff23 	bl	800d63c <BSP_SD_ReadBlocks>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d107      	bne.n	800d80c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d7fc:	bf00      	nop
 800d7fe:	f7ff ff59 	bl	800d6b4 <BSP_SD_GetCardState>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1fa      	bne.n	800d7fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b086      	sub	sp, #24
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	603b      	str	r3, [r7, #0]
 800d822:	4603      	mov	r3, r0
 800d824:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	6879      	ldr	r1, [r7, #4]
 800d832:	68b8      	ldr	r0, [r7, #8]
 800d834:	f7ff ff20 	bl	800d678 <BSP_SD_WriteBlocks>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d107      	bne.n	800d84e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d83e:	bf00      	nop
 800d840:	f7ff ff38 	bl	800d6b4 <BSP_SD_GetCardState>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1fa      	bne.n	800d840 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	603a      	str	r2, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
 800d864:	460b      	mov	r3, r1
 800d866:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d86e:	4b25      	ldr	r3, [pc, #148]	; (800d904 <SD_ioctl+0xac>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <SD_ioctl+0x28>
 800d87c:	2303      	movs	r3, #3
 800d87e:	e03c      	b.n	800d8fa <SD_ioctl+0xa2>

  switch (cmd)
 800d880:	79bb      	ldrb	r3, [r7, #6]
 800d882:	2b03      	cmp	r3, #3
 800d884:	d834      	bhi.n	800d8f0 <SD_ioctl+0x98>
 800d886:	a201      	add	r2, pc, #4	; (adr r2, 800d88c <SD_ioctl+0x34>)
 800d888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88c:	0800d89d 	.word	0x0800d89d
 800d890:	0800d8a5 	.word	0x0800d8a5
 800d894:	0800d8bd 	.word	0x0800d8bd
 800d898:	0800d8d7 	.word	0x0800d8d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8a2:	e028      	b.n	800d8f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8a4:	f107 030c 	add.w	r3, r7, #12
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff ff13 	bl	800d6d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8ba:	e01c      	b.n	800d8f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff ff07 	bl	800d6d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8d4:	e00f      	b.n	800d8f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8d6:	f107 030c 	add.w	r3, r7, #12
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fefa 	bl	800d6d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	0a5a      	lsrs	r2, r3, #9
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8ee:	e002      	b.n	800d8f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3730      	adds	r7, #48	; 0x30
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000009 	.word	0x20000009

0800d908 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b089      	sub	sp, #36	; 0x24
 800d90c:	af04      	add	r7, sp, #16
 800d90e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d910:	2301      	movs	r3, #1
 800d912:	2202      	movs	r2, #2
 800d914:	2102      	movs	r1, #2
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fc66 	bl	800e1e8 <USBH_FindInterface>
 800d91c:	4603      	mov	r3, r0
 800d91e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d920:	7bfb      	ldrb	r3, [r7, #15]
 800d922:	2bff      	cmp	r3, #255	; 0xff
 800d924:	d002      	beq.n	800d92c <USBH_CDC_InterfaceInit+0x24>
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d901      	bls.n	800d930 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d92c:	2302      	movs	r3, #2
 800d92e:	e13d      	b.n	800dbac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fc3b 	bl	800e1b0 <USBH_SelectInterface>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d944:	2302      	movs	r3, #2
 800d946:	e131      	b.n	800dbac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d94e:	2050      	movs	r0, #80	; 0x50
 800d950:	f005 fb02 	bl	8012f58 <malloc>
 800d954:	4603      	mov	r3, r0
 800d956:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d101      	bne.n	800d96c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d968:	2302      	movs	r3, #2
 800d96a:	e11f      	b.n	800dbac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d96c:	2250      	movs	r2, #80	; 0x50
 800d96e:	2100      	movs	r1, #0
 800d970:	68b8      	ldr	r0, [r7, #8]
 800d972:	f005 fb0f 	bl	8012f94 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d976:	7bfb      	ldrb	r3, [r7, #15]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	211a      	movs	r1, #26
 800d97c:	fb01 f303 	mul.w	r3, r1, r3
 800d980:	4413      	add	r3, r2
 800d982:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	b25b      	sxtb	r3, r3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	da15      	bge.n	800d9ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	211a      	movs	r1, #26
 800d994:	fb01 f303 	mul.w	r3, r1, r3
 800d998:	4413      	add	r3, r2
 800d99a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d99e:	781a      	ldrb	r2, [r3, #0]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	211a      	movs	r1, #26
 800d9aa:	fb01 f303 	mul.w	r3, r1, r3
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d9b4:	881a      	ldrh	r2, [r3, #0]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	785b      	ldrb	r3, [r3, #1]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f001 fe32 	bl	800f62a <USBH_AllocPipe>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	7819      	ldrb	r1, [r3, #0]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	7858      	ldrb	r0, [r3, #1]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	8952      	ldrh	r2, [r2, #10]
 800d9e6:	9202      	str	r2, [sp, #8]
 800d9e8:	2203      	movs	r2, #3
 800d9ea:	9201      	str	r2, [sp, #4]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	4623      	mov	r3, r4
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f001 fdea 	bl	800f5cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f002 f949 	bl	800fc98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800da06:	2300      	movs	r3, #0
 800da08:	2200      	movs	r2, #0
 800da0a:	210a      	movs	r1, #10
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fbeb 	bl	800e1e8 <USBH_FindInterface>
 800da12:	4603      	mov	r3, r0
 800da14:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800da16:	7bfb      	ldrb	r3, [r7, #15]
 800da18:	2bff      	cmp	r3, #255	; 0xff
 800da1a:	d002      	beq.n	800da22 <USBH_CDC_InterfaceInit+0x11a>
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d901      	bls.n	800da26 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800da22:	2302      	movs	r3, #2
 800da24:	e0c2      	b.n	800dbac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800da26:	7bfb      	ldrb	r3, [r7, #15]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	211a      	movs	r1, #26
 800da2c:	fb01 f303 	mul.w	r3, r1, r3
 800da30:	4413      	add	r3, r2
 800da32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	b25b      	sxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	da16      	bge.n	800da6c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	211a      	movs	r1, #26
 800da44:	fb01 f303 	mul.w	r3, r1, r3
 800da48:	4413      	add	r3, r2
 800da4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da4e:	781a      	ldrb	r2, [r3, #0]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	211a      	movs	r1, #26
 800da5a:	fb01 f303 	mul.w	r3, r1, r3
 800da5e:	4413      	add	r3, r2
 800da60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da64:	881a      	ldrh	r2, [r3, #0]
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	835a      	strh	r2, [r3, #26]
 800da6a:	e015      	b.n	800da98 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	211a      	movs	r1, #26
 800da72:	fb01 f303 	mul.w	r3, r1, r3
 800da76:	4413      	add	r3, r2
 800da78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da7c:	781a      	ldrb	r2, [r3, #0]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da82:	7bfb      	ldrb	r3, [r7, #15]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	211a      	movs	r1, #26
 800da88:	fb01 f303 	mul.w	r3, r1, r3
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da92:	881a      	ldrh	r2, [r3, #0]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	211a      	movs	r1, #26
 800da9e:	fb01 f303 	mul.w	r3, r1, r3
 800daa2:	4413      	add	r3, r2
 800daa4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	b25b      	sxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	da16      	bge.n	800dade <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	211a      	movs	r1, #26
 800dab6:	fb01 f303 	mul.w	r3, r1, r3
 800daba:	4413      	add	r3, r2
 800dabc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dac0:	781a      	ldrb	r2, [r3, #0]
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	211a      	movs	r1, #26
 800dacc:	fb01 f303 	mul.w	r3, r1, r3
 800dad0:	4413      	add	r3, r2
 800dad2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dad6:	881a      	ldrh	r2, [r3, #0]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	835a      	strh	r2, [r3, #26]
 800dadc:	e015      	b.n	800db0a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	211a      	movs	r1, #26
 800dae4:	fb01 f303 	mul.w	r3, r1, r3
 800dae8:	4413      	add	r3, r2
 800daea:	f203 3356 	addw	r3, r3, #854	; 0x356
 800daee:	781a      	ldrb	r2, [r3, #0]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800daf4:	7bfb      	ldrb	r3, [r7, #15]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	211a      	movs	r1, #26
 800dafa:	fb01 f303 	mul.w	r3, r1, r3
 800dafe:	4413      	add	r3, r2
 800db00:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800db04:	881a      	ldrh	r2, [r3, #0]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	7b9b      	ldrb	r3, [r3, #14]
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 fd8a 	bl	800f62a <USBH_AllocPipe>
 800db16:	4603      	mov	r3, r0
 800db18:	461a      	mov	r2, r3
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	7bdb      	ldrb	r3, [r3, #15]
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f001 fd80 	bl	800f62a <USBH_AllocPipe>
 800db2a:	4603      	mov	r3, r0
 800db2c:	461a      	mov	r2, r3
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	7b59      	ldrb	r1, [r3, #13]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	7b98      	ldrb	r0, [r3, #14]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	8b12      	ldrh	r2, [r2, #24]
 800db4a:	9202      	str	r2, [sp, #8]
 800db4c:	2202      	movs	r2, #2
 800db4e:	9201      	str	r2, [sp, #4]
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4623      	mov	r3, r4
 800db54:	4602      	mov	r2, r0
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f001 fd38 	bl	800f5cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	7b19      	ldrb	r1, [r3, #12]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	7bd8      	ldrb	r0, [r3, #15]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	8b52      	ldrh	r2, [r2, #26]
 800db74:	9202      	str	r2, [sp, #8]
 800db76:	2202      	movs	r2, #2
 800db78:	9201      	str	r2, [sp, #4]
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	4623      	mov	r3, r4
 800db7e:	4602      	mov	r2, r0
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f001 fd23 	bl	800f5cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	7b5b      	ldrb	r3, [r3, #13]
 800db92:	2200      	movs	r2, #0
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f002 f87e 	bl	800fc98 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	7b1b      	ldrb	r3, [r3, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	4619      	mov	r1, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f002 f877 	bl	800fc98 <USBH_LL_SetToggle>

  return USBH_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd90      	pop	{r4, r7, pc}

0800dbb4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbc2:	69db      	ldr	r3, [r3, #28]
 800dbc4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00e      	beq.n	800dbec <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f001 fd18 	bl	800f60a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f001 fd43 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	7b1b      	ldrb	r3, [r3, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	7b1b      	ldrb	r3, [r3, #12]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f001 fd05 	bl	800f60a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	7b1b      	ldrb	r3, [r3, #12]
 800dc04:	4619      	mov	r1, r3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f001 fd30 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	7b5b      	ldrb	r3, [r3, #13]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00e      	beq.n	800dc38 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	7b5b      	ldrb	r3, [r3, #13]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fcf2 	bl	800f60a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7b5b      	ldrb	r3, [r3, #13]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 fd1d 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00b      	beq.n	800dc5c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc4a:	69db      	ldr	r3, [r3, #28]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f005 f98b 	bl	8012f68 <free>
    phost->pActiveClass->pData = 0U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc58:	2200      	movs	r2, #0
 800dc5a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3340      	adds	r3, #64	; 0x40
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f8b1 	bl	800dde6 <GetLineCoding>
 800dc84:	4603      	mov	r3, r0
 800dc86:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dc88:	7afb      	ldrb	r3, [r7, #11]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d105      	bne.n	800dc9a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc94:	2102      	movs	r1, #2
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dc9a:	7afb      	ldrb	r3, [r7, #11]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dcac:	2301      	movs	r3, #1
 800dcae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dcc4:	2b04      	cmp	r3, #4
 800dcc6:	d877      	bhi.n	800ddb8 <USBH_CDC_Process+0x114>
 800dcc8:	a201      	add	r2, pc, #4	; (adr r2, 800dcd0 <USBH_CDC_Process+0x2c>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dce5 	.word	0x0800dce5
 800dcd4:	0800dceb 	.word	0x0800dceb
 800dcd8:	0800dd1b 	.word	0x0800dd1b
 800dcdc:	0800dd8f 	.word	0x0800dd8f
 800dce0:	0800dd9d 	.word	0x0800dd9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
      break;
 800dce8:	e06d      	b.n	800ddc6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcee:	4619      	mov	r1, r3
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f897 	bl	800de24 <SetLineCoding>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d104      	bne.n	800dd0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2202      	movs	r2, #2
 800dd04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd08:	e058      	b.n	800ddbc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dd0a:	7bbb      	ldrb	r3, [r7, #14]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d055      	beq.n	800ddbc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2204      	movs	r2, #4
 800dd14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dd18:	e050      	b.n	800ddbc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3340      	adds	r3, #64	; 0x40
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f860 	bl	800dde6 <GetLineCoding>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d126      	bne.n	800dd7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd42:	791b      	ldrb	r3, [r3, #4]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d13b      	bne.n	800ddc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d133      	bne.n	800ddc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d12b      	bne.n	800ddc0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d124      	bne.n	800ddc0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f958 	bl	800e02c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd7c:	e020      	b.n	800ddc0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dd7e:	7bbb      	ldrb	r3, [r7, #14]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d01d      	beq.n	800ddc0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2204      	movs	r2, #4
 800dd88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dd8c:	e018      	b.n	800ddc0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f867 	bl	800de62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f8da 	bl	800df4e <CDC_ProcessReception>
      break;
 800dd9a:	e014      	b.n	800ddc6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 ffe3 	bl	800ed6a <USBH_ClrFeature>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dda8:	7bbb      	ldrb	r3, [r7, #14]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10a      	bne.n	800ddc4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ddb6:	e005      	b.n	800ddc4 <USBH_CDC_Process+0x120>

    default:
      break;
 800ddb8:	bf00      	nop
 800ddba:	e004      	b.n	800ddc6 <USBH_CDC_Process+0x122>
      break;
 800ddbc:	bf00      	nop
 800ddbe:	e002      	b.n	800ddc6 <USBH_CDC_Process+0x122>
      break;
 800ddc0:	bf00      	nop
 800ddc2:	e000      	b.n	800ddc6 <USBH_CDC_Process+0x122>
      break;
 800ddc4:	bf00      	nop

  }

  return status;
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	22a1      	movs	r2, #161	; 0xa1
 800ddf4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2221      	movs	r2, #33	; 0x21
 800ddfa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2207      	movs	r2, #7
 800de0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2207      	movs	r2, #7
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f001 f988 	bl	800f12a <USBH_CtlReq>
 800de1a:	4603      	mov	r3, r0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2221      	movs	r2, #33	; 0x21
 800de32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2220      	movs	r2, #32
 800de38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2207      	movs	r2, #7
 800de4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2207      	movs	r2, #7
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f001 f969 	bl	800f12a <USBH_CtlReq>
 800de58:	4603      	mov	r3, r0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b086      	sub	sp, #24
 800de66:	af02      	add	r7, sp, #8
 800de68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de74:	2300      	movs	r3, #0
 800de76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d002      	beq.n	800de88 <CDC_ProcessTransmission+0x26>
 800de82:	2b02      	cmp	r3, #2
 800de84:	d023      	beq.n	800dece <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800de86:	e05e      	b.n	800df46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	8b12      	ldrh	r2, [r2, #24]
 800de90:	4293      	cmp	r3, r2
 800de92:	d90b      	bls.n	800deac <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	69d9      	ldr	r1, [r3, #28]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	8b1a      	ldrh	r2, [r3, #24]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	7b5b      	ldrb	r3, [r3, #13]
 800dea0:	2001      	movs	r0, #1
 800dea2:	9000      	str	r0, [sp, #0]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f001 fb4e 	bl	800f546 <USBH_BulkSendData>
 800deaa:	e00b      	b.n	800dec4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7b5b      	ldrb	r3, [r3, #13]
 800deba:	2001      	movs	r0, #1
 800debc:	9000      	str	r0, [sp, #0]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f001 fb41 	bl	800f546 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800decc:	e03b      	b.n	800df46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	7b5b      	ldrb	r3, [r3, #13]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f001 feb5 	bl	800fc44 <USBH_LL_GetURBState>
 800deda:	4603      	mov	r3, r0
 800dedc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800dede:	7afb      	ldrb	r3, [r7, #11]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d128      	bne.n	800df36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	8b12      	ldrh	r2, [r2, #24]
 800deec:	4293      	cmp	r3, r2
 800deee:	d90e      	bls.n	800df0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	8b12      	ldrh	r2, [r2, #24]
 800def8:	1a9a      	subs	r2, r3, r2
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	8b12      	ldrh	r2, [r2, #24]
 800df06:	441a      	add	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	61da      	str	r2, [r3, #28]
 800df0c:	e002      	b.n	800df14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df24:	e00e      	b.n	800df44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f868 	bl	800e004 <USBH_CDC_TransmitCallback>
      break;
 800df34:	e006      	b.n	800df44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800df36:	7afb      	ldrb	r3, [r7, #11]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d103      	bne.n	800df44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df44:	bf00      	nop
  }
}
 800df46:	bf00      	nop
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df5c:	69db      	ldr	r3, [r3, #28]
 800df5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df60:	2300      	movs	r3, #0
 800df62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d002      	beq.n	800df74 <CDC_ProcessReception+0x26>
 800df6e:	2b04      	cmp	r3, #4
 800df70:	d00e      	beq.n	800df90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800df72:	e043      	b.n	800dffc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	6a19      	ldr	r1, [r3, #32]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	8b5a      	ldrh	r2, [r3, #26]
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	7b1b      	ldrb	r3, [r3, #12]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f001 fb05 	bl	800f590 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2204      	movs	r2, #4
 800df8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800df8e:	e035      	b.n	800dffc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	7b1b      	ldrb	r3, [r3, #12]
 800df94:	4619      	mov	r1, r3
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f001 fe54 	bl	800fc44 <USBH_LL_GetURBState>
 800df9c:	4603      	mov	r3, r0
 800df9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dfa0:	7cfb      	ldrb	r3, [r7, #19]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d129      	bne.n	800dffa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	7b1b      	ldrb	r3, [r3, #12]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f001 fdb7 	bl	800fb20 <USBH_LL_GetLastXferSize>
 800dfb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d016      	beq.n	800dfec <CDC_ProcessReception+0x9e>
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	8b5b      	ldrh	r3, [r3, #26]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d910      	bls.n	800dfec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	1ad2      	subs	r2, r2, r3
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	6a1a      	ldr	r2, [r3, #32]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	441a      	add	r2, r3
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	2203      	movs	r2, #3
 800dfe6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dfea:	e006      	b.n	800dffa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f80f 	bl	800e018 <USBH_CDC_ReceiveCallback>
      break;
 800dffa:	bf00      	nop
  }
}
 800dffc:	bf00      	nop
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e00c:	bf00      	nop
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4613      	mov	r3, r2
 800e04c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e054:	2302      	movs	r3, #2
 800e056:	e029      	b.n	800e0ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	79fa      	ldrb	r2, [r7, #7]
 800e05c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 f81f 	bl	800e0b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f001 fc87 	bl	800f9b8 <USBH_LL_Init>

  return USBH_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	e009      	b.n	800e0da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	33e0      	adds	r3, #224	; 0xe0
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b0e      	cmp	r3, #14
 800e0de:	d9f2      	bls.n	800e0c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	e009      	b.n	800e0fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	60fb      	str	r3, [r7, #12]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e100:	d3f1      	bcc.n	800e0e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2240      	movs	r2, #64	; 0x40
 800e126:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d016      	beq.n	800e19e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10e      	bne.n	800e198 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e180:	1c59      	adds	r1, r3, #1
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	33de      	adds	r3, #222	; 0xde
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	73fb      	strb	r3, [r7, #15]
 800e196:	e004      	b.n	800e1a2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e198:	2302      	movs	r3, #2
 800e19a:	73fb      	strb	r3, [r7, #15]
 800e19c:	e001      	b.n	800e1a2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e19e:	2302      	movs	r3, #2
 800e1a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3714      	adds	r7, #20
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e1c6:	78fa      	ldrb	r2, [r7, #3]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d204      	bcs.n	800e1d6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	78fa      	ldrb	r2, [r7, #3]
 800e1d0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e1d4:	e001      	b.n	800e1da <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3714      	adds	r7, #20
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	70fb      	strb	r3, [r7, #3]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	70bb      	strb	r3, [r7, #2]
 800e1fe:	4613      	mov	r3, r2
 800e200:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e202:	2300      	movs	r3, #0
 800e204:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e206:	2300      	movs	r3, #0
 800e208:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e210:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e212:	e025      	b.n	800e260 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	221a      	movs	r2, #26
 800e218:	fb02 f303 	mul.w	r3, r2, r3
 800e21c:	3308      	adds	r3, #8
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	4413      	add	r3, r2
 800e222:	3302      	adds	r3, #2
 800e224:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	795b      	ldrb	r3, [r3, #5]
 800e22a:	78fa      	ldrb	r2, [r7, #3]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d002      	beq.n	800e236 <USBH_FindInterface+0x4e>
 800e230:	78fb      	ldrb	r3, [r7, #3]
 800e232:	2bff      	cmp	r3, #255	; 0xff
 800e234:	d111      	bne.n	800e25a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e23a:	78ba      	ldrb	r2, [r7, #2]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d002      	beq.n	800e246 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e240:	78bb      	ldrb	r3, [r7, #2]
 800e242:	2bff      	cmp	r3, #255	; 0xff
 800e244:	d109      	bne.n	800e25a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e24a:	787a      	ldrb	r2, [r7, #1]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d002      	beq.n	800e256 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e250:	787b      	ldrb	r3, [r7, #1]
 800e252:	2bff      	cmp	r3, #255	; 0xff
 800e254:	d101      	bne.n	800e25a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e256:	7dfb      	ldrb	r3, [r7, #23]
 800e258:	e006      	b.n	800e268 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e25a:	7dfb      	ldrb	r3, [r7, #23]
 800e25c:	3301      	adds	r3, #1
 800e25e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e260:	7dfb      	ldrb	r3, [r7, #23]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d9d6      	bls.n	800e214 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e266:	23ff      	movs	r3, #255	; 0xff
}
 800e268:	4618      	mov	r0, r3
 800e26a:	371c      	adds	r7, #28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f001 fbd7 	bl	800fa30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e282:	2101      	movs	r1, #1
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f001 fcf0 	bl	800fc6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af04      	add	r7, sp, #16
 800e29a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e29c:	2302      	movs	r3, #2
 800e29e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d102      	bne.n	800e2b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2203      	movs	r2, #3
 800e2b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	2b0b      	cmp	r3, #11
 800e2be:	f200 81b3 	bhi.w	800e628 <USBH_Process+0x394>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <USBH_Process+0x34>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e2f9 	.word	0x0800e2f9
 800e2cc:	0800e32b 	.word	0x0800e32b
 800e2d0:	0800e393 	.word	0x0800e393
 800e2d4:	0800e5c3 	.word	0x0800e5c3
 800e2d8:	0800e629 	.word	0x0800e629
 800e2dc:	0800e437 	.word	0x0800e437
 800e2e0:	0800e569 	.word	0x0800e569
 800e2e4:	0800e46d 	.word	0x0800e46d
 800e2e8:	0800e48d 	.word	0x0800e48d
 800e2ec:	0800e4ad 	.word	0x0800e4ad
 800e2f0:	0800e4db 	.word	0x0800e4db
 800e2f4:	0800e5ab 	.word	0x0800e5ab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 8193 	beq.w	800e62c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e30c:	20c8      	movs	r0, #200	; 0xc8
 800e30e:	f001 fcf3 	bl	800fcf8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f001 fbe9 	bl	800faea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e328:	e180      	b.n	800e62c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e330:	2b01      	cmp	r3, #1
 800e332:	d107      	bne.n	800e344 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2202      	movs	r2, #2
 800e340:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e342:	e182      	b.n	800e64a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e34a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e34e:	d914      	bls.n	800e37a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e356:	3301      	adds	r3, #1
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e366:	2b03      	cmp	r3, #3
 800e368:	d903      	bls.n	800e372 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	220d      	movs	r2, #13
 800e36e:	701a      	strb	r2, [r3, #0]
      break;
 800e370:	e16b      	b.n	800e64a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	701a      	strb	r2, [r3, #0]
      break;
 800e378:	e167      	b.n	800e64a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e380:	f103 020a 	add.w	r2, r3, #10
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e38a:	200a      	movs	r0, #10
 800e38c:	f001 fcb4 	bl	800fcf8 <USBH_Delay>
      break;
 800e390:	e15b      	b.n	800e64a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d005      	beq.n	800e3a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3a2:	2104      	movs	r1, #4
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e3a8:	2064      	movs	r0, #100	; 0x64
 800e3aa:	f001 fca5 	bl	800fcf8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f001 fb74 	bl	800fa9c <USBH_LL_GetSpeed>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f001 f92f 	bl	800f62a <USBH_AllocPipe>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e3d4:	2180      	movs	r1, #128	; 0x80
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 f927 	bl	800f62a <USBH_AllocPipe>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7919      	ldrb	r1, [r3, #4]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e3f8:	b292      	uxth	r2, r2
 800e3fa:	9202      	str	r2, [sp, #8]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	9201      	str	r2, [sp, #4]
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	4603      	mov	r3, r0
 800e404:	2280      	movs	r2, #128	; 0x80
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f001 f8e0 	bl	800f5cc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	7959      	ldrb	r1, [r3, #5]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e420:	b292      	uxth	r2, r2
 800e422:	9202      	str	r2, [sp, #8]
 800e424:	2200      	movs	r2, #0
 800e426:	9201      	str	r2, [sp, #4]
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	4603      	mov	r3, r0
 800e42c:	2200      	movs	r2, #0
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f001 f8cc 	bl	800f5cc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e434:	e109      	b.n	800e64a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f90c 	bl	800e654 <USBH_HandleEnum>
 800e43c:	4603      	mov	r3, r0
 800e43e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e440:	7bbb      	ldrb	r3, [r7, #14]
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 80f3 	bne.w	800e630 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d103      	bne.n	800e464 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2208      	movs	r2, #8
 800e460:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e462:	e0e5      	b.n	800e630 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2207      	movs	r2, #7
 800e468:	701a      	strb	r2, [r3, #0]
      break;
 800e46a:	e0e1      	b.n	800e630 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 80de 	beq.w	800e634 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e47e:	2101      	movs	r1, #1
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2208      	movs	r2, #8
 800e488:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e48a:	e0d3      	b.n	800e634 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e492:	b29b      	uxth	r3, r3
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fc20 	bl	800ecdc <USBH_SetCfg>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f040 80ca 	bne.w	800e638 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2209      	movs	r2, #9
 800e4a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4aa:	e0c5      	b.n	800e638 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e4b2:	f003 0320 	and.w	r3, r3, #32
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fc30 	bl	800ed22 <USBH_SetFeature>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f040 80b9 	bne.w	800e63c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	220a      	movs	r2, #10
 800e4ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4d0:	e0b4      	b.n	800e63c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	701a      	strb	r2, [r3, #0]
      break;
 800e4d8:	e0b0      	b.n	800e63c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 80ad 	beq.w	800e640 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73fb      	strb	r3, [r7, #15]
 800e4f2:	e016      	b.n	800e522 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e4f4:	7bfa      	ldrb	r2, [r7, #15]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	32de      	adds	r2, #222	; 0xde
 800e4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fe:	791a      	ldrb	r2, [r3, #4]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e506:	429a      	cmp	r2, r3
 800e508:	d108      	bne.n	800e51c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e50a:	7bfa      	ldrb	r2, [r7, #15]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	32de      	adds	r2, #222	; 0xde
 800e510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e51a:	e005      	b.n	800e528 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	3301      	adds	r3, #1
 800e520:	73fb      	strb	r3, [r7, #15]
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0e5      	beq.n	800e4f4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d016      	beq.n	800e560 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	4798      	blx	r3
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d109      	bne.n	800e558 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2206      	movs	r2, #6
 800e548:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e550:	2103      	movs	r1, #3
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e556:	e073      	b.n	800e640 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	220d      	movs	r2, #13
 800e55c:	701a      	strb	r2, [r3, #0]
      break;
 800e55e:	e06f      	b.n	800e640 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	220d      	movs	r2, #13
 800e564:	701a      	strb	r2, [r3, #0]
      break;
 800e566:	e06b      	b.n	800e640 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d017      	beq.n	800e5a2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	4798      	blx	r3
 800e57e:	4603      	mov	r3, r0
 800e580:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e582:	7bbb      	ldrb	r3, [r7, #14]
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	220b      	movs	r2, #11
 800e58e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e590:	e058      	b.n	800e644 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b02      	cmp	r3, #2
 800e598:	d154      	bne.n	800e644 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	220d      	movs	r2, #13
 800e59e:	701a      	strb	r2, [r3, #0]
      break;
 800e5a0:	e050      	b.n	800e644 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	220d      	movs	r2, #13
 800e5a6:	701a      	strb	r2, [r3, #0]
      break;
 800e5a8:	e04c      	b.n	800e644 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d049      	beq.n	800e648 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5ba:	695b      	ldr	r3, [r3, #20]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	4798      	blx	r3
      }
      break;
 800e5c0:	e042      	b.n	800e648 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff fd72 	bl	800e0b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d009      	beq.n	800e5ee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5fe:	2105      	movs	r1, #5
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d107      	bne.n	800e620 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff fe2b 	bl	800e274 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e61e:	e014      	b.n	800e64a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 fa05 	bl	800fa30 <USBH_LL_Start>
      break;
 800e626:	e010      	b.n	800e64a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e628:	bf00      	nop
 800e62a:	e00e      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e62c:	bf00      	nop
 800e62e:	e00c      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e630:	bf00      	nop
 800e632:	e00a      	b.n	800e64a <USBH_Process+0x3b6>
    break;
 800e634:	bf00      	nop
 800e636:	e008      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e638:	bf00      	nop
 800e63a:	e006      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e63c:	bf00      	nop
 800e63e:	e004      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e640:	bf00      	nop
 800e642:	e002      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e644:	bf00      	nop
 800e646:	e000      	b.n	800e64a <USBH_Process+0x3b6>
      break;
 800e648:	bf00      	nop
  }
  return USBH_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b088      	sub	sp, #32
 800e658:	af04      	add	r7, sp, #16
 800e65a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e660:	2301      	movs	r3, #1
 800e662:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	785b      	ldrb	r3, [r3, #1]
 800e668:	2b07      	cmp	r3, #7
 800e66a:	f200 81c1 	bhi.w	800e9f0 <USBH_HandleEnum+0x39c>
 800e66e:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <USBH_HandleEnum+0x20>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e695 	.word	0x0800e695
 800e678:	0800e753 	.word	0x0800e753
 800e67c:	0800e7bd 	.word	0x0800e7bd
 800e680:	0800e84b 	.word	0x0800e84b
 800e684:	0800e8b5 	.word	0x0800e8b5
 800e688:	0800e925 	.word	0x0800e925
 800e68c:	0800e96b 	.word	0x0800e96b
 800e690:	0800e9b1 	.word	0x0800e9b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e694:	2108      	movs	r1, #8
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fa50 	bl	800eb3c <USBH_Get_DevDesc>
 800e69c:	4603      	mov	r3, r0
 800e69e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e6a0:	7bbb      	ldrb	r3, [r7, #14]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d130      	bne.n	800e708 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	7919      	ldrb	r1, [r3, #4]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e6ca:	b292      	uxth	r2, r2
 800e6cc:	9202      	str	r2, [sp, #8]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2280      	movs	r2, #128	; 0x80
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 ff77 	bl	800f5cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7959      	ldrb	r1, [r3, #5]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e6f2:	b292      	uxth	r2, r2
 800e6f4:	9202      	str	r2, [sp, #8]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	9201      	str	r2, [sp, #4]
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2200      	movs	r2, #0
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 ff63 	bl	800f5cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e706:	e175      	b.n	800e9f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e708:	7bbb      	ldrb	r3, [r7, #14]
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	f040 8172 	bne.w	800e9f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e716:	3301      	adds	r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e726:	2b03      	cmp	r3, #3
 800e728:	d903      	bls.n	800e732 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	220d      	movs	r2, #13
 800e72e:	701a      	strb	r2, [r3, #0]
      break;
 800e730:	e160      	b.n	800e9f4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	795b      	ldrb	r3, [r3, #5]
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 ff97 	bl	800f66c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	791b      	ldrb	r3, [r3, #4]
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 ff91 	bl	800f66c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	701a      	strb	r2, [r3, #0]
      break;
 800e750:	e150      	b.n	800e9f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e752:	2112      	movs	r1, #18
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f9f1 	bl	800eb3c <USBH_Get_DevDesc>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d103      	bne.n	800e76c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2202      	movs	r2, #2
 800e768:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e76a:	e145      	b.n	800e9f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
 800e76e:	2b03      	cmp	r3, #3
 800e770:	f040 8142 	bne.w	800e9f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e77a:	3301      	adds	r3, #1
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d903      	bls.n	800e796 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	220d      	movs	r2, #13
 800e792:	701a      	strb	r2, [r3, #0]
      break;
 800e794:	e130      	b.n	800e9f8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	795b      	ldrb	r3, [r3, #5]
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 ff65 	bl	800f66c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	791b      	ldrb	r3, [r3, #4]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 ff5f 	bl	800f66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	701a      	strb	r2, [r3, #0]
      break;
 800e7ba:	e11d      	b.n	800e9f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e7bc:	2101      	movs	r1, #1
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa68 	bl	800ec94 <USBH_SetAddress>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e7c8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d132      	bne.n	800e834 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e7ce:	2002      	movs	r0, #2
 800e7d0:	f001 fa92 	bl	800fcf8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2203      	movs	r2, #3
 800e7e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7919      	ldrb	r1, [r3, #4]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e7f6:	b292      	uxth	r2, r2
 800e7f8:	9202      	str	r2, [sp, #8]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	9201      	str	r2, [sp, #4]
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	4603      	mov	r3, r0
 800e802:	2280      	movs	r2, #128	; 0x80
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fee1 	bl	800f5cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7959      	ldrb	r1, [r3, #5]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e81e:	b292      	uxth	r2, r2
 800e820:	9202      	str	r2, [sp, #8]
 800e822:	2200      	movs	r2, #0
 800e824:	9201      	str	r2, [sp, #4]
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	4603      	mov	r3, r0
 800e82a:	2200      	movs	r2, #0
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fecd 	bl	800f5cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e832:	e0e3      	b.n	800e9fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	2b03      	cmp	r3, #3
 800e838:	f040 80e0 	bne.w	800e9fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	220d      	movs	r2, #13
 800e840:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	705a      	strb	r2, [r3, #1]
      break;
 800e848:	e0d8      	b.n	800e9fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e84a:	2109      	movs	r1, #9
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f99d 	bl	800eb8c <USBH_Get_CfgDesc>
 800e852:	4603      	mov	r3, r0
 800e854:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e856:	7bbb      	ldrb	r3, [r7, #14]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d103      	bne.n	800e864 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2204      	movs	r2, #4
 800e860:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e862:	e0cd      	b.n	800ea00 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	2b03      	cmp	r3, #3
 800e868:	f040 80ca 	bne.w	800ea00 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e872:	3301      	adds	r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e882:	2b03      	cmp	r3, #3
 800e884:	d903      	bls.n	800e88e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	220d      	movs	r2, #13
 800e88a:	701a      	strb	r2, [r3, #0]
      break;
 800e88c:	e0b8      	b.n	800ea00 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	795b      	ldrb	r3, [r3, #5]
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fee9 	bl	800f66c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	791b      	ldrb	r3, [r3, #4]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fee3 	bl	800f66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	701a      	strb	r2, [r3, #0]
      break;
 800e8b2:	e0a5      	b.n	800ea00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f965 	bl	800eb8c <USBH_Get_CfgDesc>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e8c6:	7bbb      	ldrb	r3, [r7, #14]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d103      	bne.n	800e8d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2205      	movs	r2, #5
 800e8d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e8d2:	e097      	b.n	800ea04 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8d4:	7bbb      	ldrb	r3, [r7, #14]
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	f040 8094 	bne.w	800ea04 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d903      	bls.n	800e8fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	220d      	movs	r2, #13
 800e8fa:	701a      	strb	r2, [r3, #0]
      break;
 800e8fc:	e082      	b.n	800ea04 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	795b      	ldrb	r3, [r3, #5]
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 feb1 	bl	800f66c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	791b      	ldrb	r3, [r3, #4]
 800e90e:	4619      	mov	r1, r3
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 feab 	bl	800f66c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	701a      	strb	r2, [r3, #0]
      break;
 800e922:	e06f      	b.n	800ea04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d019      	beq.n	800e962 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e93a:	23ff      	movs	r3, #255	; 0xff
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f949 	bl	800ebd4 <USBH_Get_StringDesc>
 800e942:	4603      	mov	r3, r0
 800e944:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e946:	7bbb      	ldrb	r3, [r7, #14]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d103      	bne.n	800e954 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2206      	movs	r2, #6
 800e950:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e952:	e059      	b.n	800ea08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e954:	7bbb      	ldrb	r3, [r7, #14]
 800e956:	2b03      	cmp	r3, #3
 800e958:	d156      	bne.n	800ea08 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2206      	movs	r2, #6
 800e95e:	705a      	strb	r2, [r3, #1]
      break;
 800e960:	e052      	b.n	800ea08 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2206      	movs	r2, #6
 800e966:	705a      	strb	r2, [r3, #1]
      break;
 800e968:	e04e      	b.n	800ea08 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e970:	2b00      	cmp	r3, #0
 800e972:	d019      	beq.n	800e9a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e980:	23ff      	movs	r3, #255	; 0xff
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f926 	bl	800ebd4 <USBH_Get_StringDesc>
 800e988:	4603      	mov	r3, r0
 800e98a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e98c:	7bbb      	ldrb	r3, [r7, #14]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d103      	bne.n	800e99a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2207      	movs	r2, #7
 800e996:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e998:	e038      	b.n	800ea0c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e99a:	7bbb      	ldrb	r3, [r7, #14]
 800e99c:	2b03      	cmp	r3, #3
 800e99e:	d135      	bne.n	800ea0c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2207      	movs	r2, #7
 800e9a4:	705a      	strb	r2, [r3, #1]
      break;
 800e9a6:	e031      	b.n	800ea0c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2207      	movs	r2, #7
 800e9ac:	705a      	strb	r2, [r3, #1]
      break;
 800e9ae:	e02d      	b.n	800ea0c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d017      	beq.n	800e9ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e9c6:	23ff      	movs	r3, #255	; 0xff
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f000 f903 	bl	800ebd4 <USBH_Get_StringDesc>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d102      	bne.n	800e9de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e9dc:	e018      	b.n	800ea10 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9de:	7bbb      	ldrb	r3, [r7, #14]
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d115      	bne.n	800ea10 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e8:	e012      	b.n	800ea10 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ee:	e00f      	b.n	800ea10 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e9f0:	bf00      	nop
 800e9f2:	e00e      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800e9f4:	bf00      	nop
 800e9f6:	e00c      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800e9f8:	bf00      	nop
 800e9fa:	e00a      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800e9fc:	bf00      	nop
 800e9fe:	e008      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800ea00:	bf00      	nop
 800ea02:	e006      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800ea04:	bf00      	nop
 800ea06:	e004      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800ea08:	bf00      	nop
 800ea0a:	e002      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800ea0c:	bf00      	nop
 800ea0e:	e000      	b.n	800ea12 <USBH_HandleEnum+0x3be>
      break;
 800ea10:	bf00      	nop
  }
  return Status;
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ea2e:	bf00      	nop
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f804 	bl	800ea5e <USBH_HandleSof>
}
 800ea56:	bf00      	nop
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b0b      	cmp	r3, #11
 800ea6e:	d10a      	bne.n	800ea86 <USBH_HandleSof+0x28>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d005      	beq.n	800ea86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	4798      	blx	r3
  }
}
 800ea86:	bf00      	nop
 800ea88:	3708      	adds	r7, #8
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ea9e:	bf00      	nop
}
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800eaba:	bf00      	nop
}
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b083      	sub	sp, #12
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 ffa6 	bl	800fa66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	791b      	ldrb	r3, [r3, #4]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 fda3 	bl	800f66c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	795b      	ldrb	r3, [r3, #5]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fd9d 	bl	800f66c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af02      	add	r7, sp, #8
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	4613      	mov	r3, r2
 800eb56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 f864 	bl	800ec2a <USBH_GetDescriptor>
 800eb62:	4603      	mov	r3, r0
 800eb64:	73fb      	strb	r3, [r7, #15]
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800eb78:	78fa      	ldrb	r2, [r7, #3]
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	f000 f918 	bl	800edb2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	460b      	mov	r3, r1
 800eb96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	331c      	adds	r3, #28
 800eb9c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800eb9e:	887b      	ldrh	r3, [r7, #2]
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eba8:	2100      	movs	r1, #0
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f83d 	bl	800ec2a <USBH_GetDescriptor>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	72fb      	strb	r3, [r7, #11]
 800ebb4:	7afb      	ldrb	r3, [r7, #11]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d107      	bne.n	800ebca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ebc0:	887a      	ldrh	r2, [r7, #2]
 800ebc2:	68f9      	ldr	r1, [r7, #12]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f964 	bl	800ee92 <USBH_ParseCfgDesc>
  }

  return status;
 800ebca:	7afb      	ldrb	r3, [r7, #11]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	607a      	str	r2, [r7, #4]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	72fb      	strb	r3, [r7, #11]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ebe8:	7afb      	ldrb	r3, [r7, #11]
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ebf0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ebf8:	893b      	ldrh	r3, [r7, #8]
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 f812 	bl	800ec2a <USBH_GetDescriptor>
 800ec06:	4603      	mov	r3, r0
 800ec08:	75fb      	strb	r3, [r7, #23]
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d107      	bne.n	800ec20 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec16:	893a      	ldrh	r2, [r7, #8]
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 fa37 	bl	800f08e <USBH_ParseStringDesc>
  }

  return status;
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b084      	sub	sp, #16
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	607b      	str	r3, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	72fb      	strb	r3, [r7, #11]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	789b      	ldrb	r3, [r3, #2]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d11c      	bne.n	800ec7e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ec44:	7afb      	ldrb	r3, [r7, #11]
 800ec46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2206      	movs	r2, #6
 800ec54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	893a      	ldrh	r2, [r7, #8]
 800ec5a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ec5c:	893b      	ldrh	r3, [r7, #8]
 800ec5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec66:	d104      	bne.n	800ec72 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f240 4209 	movw	r2, #1033	; 0x409
 800ec6e:	829a      	strh	r2, [r3, #20]
 800ec70:	e002      	b.n	800ec78 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2200      	movs	r2, #0
 800ec76:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8b3a      	ldrh	r2, [r7, #24]
 800ec7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ec7e:	8b3b      	ldrh	r3, [r7, #24]
 800ec80:	461a      	mov	r2, r3
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f000 fa50 	bl	800f12a <USBH_CtlReq>
 800ec8a:	4603      	mov	r3, r0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	789b      	ldrb	r3, [r3, #2]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d10f      	bne.n	800ecc8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2205      	movs	r2, #5
 800ecb2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ecb4:	78fb      	ldrb	r3, [r7, #3]
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fa2c 	bl	800f12a <USBH_CtlReq>
 800ecd2:	4603      	mov	r3, r0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	789b      	ldrb	r3, [r3, #2]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d10e      	bne.n	800ed0e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2209      	movs	r2, #9
 800ecfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	887a      	ldrh	r2, [r7, #2]
 800ed00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed0e:	2200      	movs	r2, #0
 800ed10:	2100      	movs	r1, #0
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 fa09 	bl	800f12a <USBH_CtlReq>
 800ed18:	4603      	mov	r3, r0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	789b      	ldrb	r3, [r3, #2]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d10f      	bne.n	800ed56 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2203      	movs	r2, #3
 800ed40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ed42:	78fb      	ldrb	r3, [r7, #3]
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed56:	2200      	movs	r2, #0
 800ed58:	2100      	movs	r1, #0
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f9e5 	bl	800f12a <USBH_CtlReq>
 800ed60:	4603      	mov	r3, r0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b082      	sub	sp, #8
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	460b      	mov	r3, r1
 800ed74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	789b      	ldrb	r3, [r3, #2]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d10f      	bne.n	800ed9e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2202      	movs	r2, #2
 800ed82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ed90:	78fb      	ldrb	r3, [r7, #3]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2100      	movs	r1, #0
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f9c1 	bl	800f12a <USBH_CtlReq>
 800eda8:	4603      	mov	r3, r0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b085      	sub	sp, #20
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	60f8      	str	r0, [r7, #12]
 800edba:	60b9      	str	r1, [r7, #8]
 800edbc:	4613      	mov	r3, r2
 800edbe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	781a      	ldrb	r2, [r3, #0]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	785a      	ldrb	r2, [r3, #1]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	3302      	adds	r3, #2
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	3303      	adds	r3, #3
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	021b      	lsls	r3, r3, #8
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	4313      	orrs	r3, r2
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	791a      	ldrb	r2, [r3, #4]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	795a      	ldrb	r2, [r3, #5]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	799a      	ldrb	r2, [r3, #6]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	79da      	ldrb	r2, [r3, #7]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	2b08      	cmp	r3, #8
 800ee10:	d939      	bls.n	800ee86 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	3308      	adds	r3, #8
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	3309      	adds	r3, #9
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	021b      	lsls	r3, r3, #8
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	4313      	orrs	r3, r2
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	330a      	adds	r3, #10
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	330b      	adds	r3, #11
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	021b      	lsls	r3, r3, #8
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	4313      	orrs	r3, r2
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	330c      	adds	r3, #12
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	330d      	adds	r3, #13
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	021b      	lsls	r3, r3, #8
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	7b9a      	ldrb	r2, [r3, #14]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	7bda      	ldrb	r2, [r3, #15]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	7c1a      	ldrb	r2, [r3, #16]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	7c5a      	ldrb	r2, [r3, #17]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	745a      	strb	r2, [r3, #17]
  }
}
 800ee86:	bf00      	nop
 800ee88:	3714      	adds	r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b08a      	sub	sp, #40	; 0x28
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	60f8      	str	r0, [r7, #12]
 800ee9a:	60b9      	str	r1, [r7, #8]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eea4:	2300      	movs	r3, #0
 800eea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	781a      	ldrb	r2, [r3, #0]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	785a      	ldrb	r2, [r3, #1]
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	3302      	adds	r3, #2
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	3303      	adds	r3, #3
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	021b      	lsls	r3, r3, #8
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	4313      	orrs	r3, r2
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	791a      	ldrb	r2, [r3, #4]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	795a      	ldrb	r2, [r3, #5]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	799a      	ldrb	r2, [r3, #6]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	79da      	ldrb	r2, [r3, #7]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	7a1a      	ldrb	r2, [r3, #8]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ef08:	88fb      	ldrh	r3, [r7, #6]
 800ef0a:	2b09      	cmp	r3, #9
 800ef0c:	d95f      	bls.n	800efce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ef0e:	2309      	movs	r3, #9
 800ef10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ef16:	e051      	b.n	800efbc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef18:	f107 0316 	add.w	r3, r7, #22
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef20:	f000 f8e8 	bl	800f0f4 <USBH_GetNextDesc>
 800ef24:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	785b      	ldrb	r3, [r3, #1]
 800ef2a:	2b04      	cmp	r3, #4
 800ef2c:	d146      	bne.n	800efbc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ef2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef32:	221a      	movs	r2, #26
 800ef34:	fb02 f303 	mul.w	r3, r2, r3
 800ef38:	3308      	adds	r3, #8
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	3302      	adds	r3, #2
 800ef40:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ef42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef44:	69f8      	ldr	r0, [r7, #28]
 800ef46:	f000 f846 	bl	800efd6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef54:	e022      	b.n	800ef9c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef56:	f107 0316 	add.w	r3, r7, #22
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef5e:	f000 f8c9 	bl	800f0f4 <USBH_GetNextDesc>
 800ef62:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	785b      	ldrb	r3, [r3, #1]
 800ef68:	2b05      	cmp	r3, #5
 800ef6a:	d117      	bne.n	800ef9c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ef6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ef74:	3201      	adds	r2, #1
 800ef76:	00d2      	lsls	r2, r2, #3
 800ef78:	211a      	movs	r1, #26
 800ef7a:	fb01 f303 	mul.w	r3, r1, r3
 800ef7e:	4413      	add	r3, r2
 800ef80:	3308      	adds	r3, #8
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	4413      	add	r3, r2
 800ef86:	3304      	adds	r3, #4
 800ef88:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ef8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef8c:	69b8      	ldr	r0, [r7, #24]
 800ef8e:	f000 f851 	bl	800f034 <USBH_ParseEPDesc>
            ep_ix++;
 800ef92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ef96:	3301      	adds	r3, #1
 800ef98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	791b      	ldrb	r3, [r3, #4]
 800efa0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d204      	bcs.n	800efb2 <USBH_ParseCfgDesc+0x120>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	885a      	ldrh	r2, [r3, #2]
 800efac:	8afb      	ldrh	r3, [r7, #22]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d8d1      	bhi.n	800ef56 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800efb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efb6:	3301      	adds	r3, #1
 800efb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800efbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d804      	bhi.n	800efce <USBH_ParseCfgDesc+0x13c>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	885a      	ldrh	r2, [r3, #2]
 800efc8:	8afb      	ldrh	r3, [r7, #22]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d8a4      	bhi.n	800ef18 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800efce:	bf00      	nop
 800efd0:	3728      	adds	r7, #40	; 0x28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	781a      	ldrb	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	785a      	ldrb	r2, [r3, #1]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	789a      	ldrb	r2, [r3, #2]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	78da      	ldrb	r2, [r3, #3]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	791a      	ldrb	r2, [r3, #4]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	795a      	ldrb	r2, [r3, #5]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	799a      	ldrb	r2, [r3, #6]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	79da      	ldrb	r2, [r3, #7]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	7a1a      	ldrb	r2, [r3, #8]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	721a      	strb	r2, [r3, #8]
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781a      	ldrb	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	785a      	ldrb	r2, [r3, #1]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	789a      	ldrb	r2, [r3, #2]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	78da      	ldrb	r2, [r3, #3]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	3304      	adds	r3, #4
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	b29a      	uxth	r2, r3
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	3305      	adds	r3, #5
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	021b      	lsls	r3, r3, #8
 800f070:	b29b      	uxth	r3, r3
 800f072:	4313      	orrs	r3, r2
 800f074:	b29a      	uxth	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	799a      	ldrb	r2, [r3, #6]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	719a      	strb	r2, [r3, #6]
}
 800f082:	bf00      	nop
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f08e:	b480      	push	{r7}
 800f090:	b087      	sub	sp, #28
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	4613      	mov	r3, r2
 800f09a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d120      	bne.n	800f0e8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	1e9a      	subs	r2, r3, #2
 800f0ac:	88fb      	ldrh	r3, [r7, #6]
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	bf28      	it	cs
 800f0b2:	4613      	movcs	r3, r2
 800f0b4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3302      	adds	r3, #2
 800f0ba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	82fb      	strh	r3, [r7, #22]
 800f0c0:	e00b      	b.n	800f0da <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f0c2:	8afb      	ldrh	r3, [r7, #22]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	781a      	ldrb	r2, [r3, #0]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f0d4:	8afb      	ldrh	r3, [r7, #22]
 800f0d6:	3302      	adds	r3, #2
 800f0d8:	82fb      	strh	r3, [r7, #22]
 800f0da:	8afa      	ldrh	r2, [r7, #22]
 800f0dc:	8abb      	ldrh	r3, [r7, #20]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d3ef      	bcc.n	800f0c2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	701a      	strb	r2, [r3, #0]
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	371c      	adds	r7, #28
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	881a      	ldrh	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	b29b      	uxth	r3, r3
 800f108:	4413      	add	r3, r2
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4413      	add	r3, r2
 800f11a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f11c:	68fb      	ldr	r3, [r7, #12]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	4613      	mov	r3, r2
 800f136:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f138:	2301      	movs	r3, #1
 800f13a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	789b      	ldrb	r3, [r3, #2]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d002      	beq.n	800f14a <USBH_CtlReq+0x20>
 800f144:	2b02      	cmp	r3, #2
 800f146:	d00f      	beq.n	800f168 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f148:	e027      	b.n	800f19a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	88fa      	ldrh	r2, [r7, #6]
 800f154:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2201      	movs	r2, #1
 800f15a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2202      	movs	r2, #2
 800f160:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f162:	2301      	movs	r3, #1
 800f164:	75fb      	strb	r3, [r7, #23]
      break;
 800f166:	e018      	b.n	800f19a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f81b 	bl	800f1a4 <USBH_HandleControl>
 800f16e:	4603      	mov	r3, r0
 800f170:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f172:	7dfb      	ldrb	r3, [r7, #23]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <USBH_CtlReq+0x54>
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	2b03      	cmp	r3, #3
 800f17c:	d106      	bne.n	800f18c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2201      	movs	r2, #1
 800f182:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	761a      	strb	r2, [r3, #24]
      break;
 800f18a:	e005      	b.n	800f198 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f18c:	7dfb      	ldrb	r3, [r7, #23]
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d102      	bne.n	800f198 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2201      	movs	r2, #1
 800f196:	709a      	strb	r2, [r3, #2]
      break;
 800f198:	bf00      	nop
  }
  return status;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7e1b      	ldrb	r3, [r3, #24]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	2b0a      	cmp	r3, #10
 800f1bc:	f200 8156 	bhi.w	800f46c <USBH_HandleControl+0x2c8>
 800f1c0:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <USBH_HandleControl+0x24>)
 800f1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c6:	bf00      	nop
 800f1c8:	0800f1f5 	.word	0x0800f1f5
 800f1cc:	0800f20f 	.word	0x0800f20f
 800f1d0:	0800f279 	.word	0x0800f279
 800f1d4:	0800f29f 	.word	0x0800f29f
 800f1d8:	0800f2d7 	.word	0x0800f2d7
 800f1dc:	0800f301 	.word	0x0800f301
 800f1e0:	0800f353 	.word	0x0800f353
 800f1e4:	0800f375 	.word	0x0800f375
 800f1e8:	0800f3b1 	.word	0x0800f3b1
 800f1ec:	0800f3d7 	.word	0x0800f3d7
 800f1f0:	0800f415 	.word	0x0800f415
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f103 0110 	add.w	r1, r3, #16
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	795b      	ldrb	r3, [r3, #5]
 800f1fe:	461a      	mov	r2, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 f943 	bl	800f48c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2202      	movs	r2, #2
 800f20a:	761a      	strb	r2, [r3, #24]
      break;
 800f20c:	e139      	b.n	800f482 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	795b      	ldrb	r3, [r3, #5]
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fd15 	bl	800fc44 <USBH_LL_GetURBState>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f21e:	7bbb      	ldrb	r3, [r7, #14]
 800f220:	2b01      	cmp	r3, #1
 800f222:	d11e      	bne.n	800f262 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	7c1b      	ldrb	r3, [r3, #16]
 800f228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f22c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8adb      	ldrh	r3, [r3, #22]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00a      	beq.n	800f24c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f236:	7b7b      	ldrb	r3, [r7, #13]
 800f238:	2b80      	cmp	r3, #128	; 0x80
 800f23a:	d103      	bne.n	800f244 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2203      	movs	r2, #3
 800f240:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f242:	e115      	b.n	800f470 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2205      	movs	r2, #5
 800f248:	761a      	strb	r2, [r3, #24]
      break;
 800f24a:	e111      	b.n	800f470 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f24c:	7b7b      	ldrb	r3, [r7, #13]
 800f24e:	2b80      	cmp	r3, #128	; 0x80
 800f250:	d103      	bne.n	800f25a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2209      	movs	r2, #9
 800f256:	761a      	strb	r2, [r3, #24]
      break;
 800f258:	e10a      	b.n	800f470 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2207      	movs	r2, #7
 800f25e:	761a      	strb	r2, [r3, #24]
      break;
 800f260:	e106      	b.n	800f470 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f262:	7bbb      	ldrb	r3, [r7, #14]
 800f264:	2b04      	cmp	r3, #4
 800f266:	d003      	beq.n	800f270 <USBH_HandleControl+0xcc>
 800f268:	7bbb      	ldrb	r3, [r7, #14]
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	f040 8100 	bne.w	800f470 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	220b      	movs	r2, #11
 800f274:	761a      	strb	r2, [r3, #24]
      break;
 800f276:	e0fb      	b.n	800f470 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6899      	ldr	r1, [r3, #8]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	899a      	ldrh	r2, [r3, #12]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	791b      	ldrb	r3, [r3, #4]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f93a 	bl	800f50a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2204      	movs	r2, #4
 800f29a:	761a      	strb	r2, [r3, #24]
      break;
 800f29c:	e0f1      	b.n	800f482 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	791b      	ldrb	r3, [r3, #4]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 fccd 	bl	800fc44 <USBH_LL_GetURBState>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f2ae:	7bbb      	ldrb	r3, [r7, #14]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d102      	bne.n	800f2ba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2209      	movs	r2, #9
 800f2b8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	2b05      	cmp	r3, #5
 800f2be:	d102      	bne.n	800f2c6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2c4:	e0d6      	b.n	800f474 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f2c6:	7bbb      	ldrb	r3, [r7, #14]
 800f2c8:	2b04      	cmp	r3, #4
 800f2ca:	f040 80d3 	bne.w	800f474 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	220b      	movs	r2, #11
 800f2d2:	761a      	strb	r2, [r3, #24]
      break;
 800f2d4:	e0ce      	b.n	800f474 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6899      	ldr	r1, [r3, #8]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	899a      	ldrh	r2, [r3, #12]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	795b      	ldrb	r3, [r3, #5]
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	9000      	str	r0, [sp, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 f8ea 	bl	800f4c0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2206      	movs	r2, #6
 800f2fc:	761a      	strb	r2, [r3, #24]
      break;
 800f2fe:	e0c0      	b.n	800f482 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	795b      	ldrb	r3, [r3, #5]
 800f304:	4619      	mov	r1, r3
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fc9c 	bl	800fc44 <USBH_LL_GetURBState>
 800f30c:	4603      	mov	r3, r0
 800f30e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	2b01      	cmp	r3, #1
 800f314:	d103      	bne.n	800f31e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2207      	movs	r2, #7
 800f31a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f31c:	e0ac      	b.n	800f478 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f31e:	7bbb      	ldrb	r3, [r7, #14]
 800f320:	2b05      	cmp	r3, #5
 800f322:	d105      	bne.n	800f330 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	220c      	movs	r2, #12
 800f328:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f32a:	2303      	movs	r3, #3
 800f32c:	73fb      	strb	r3, [r7, #15]
      break;
 800f32e:	e0a3      	b.n	800f478 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d103      	bne.n	800f33e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2205      	movs	r2, #5
 800f33a:	761a      	strb	r2, [r3, #24]
      break;
 800f33c:	e09c      	b.n	800f478 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	2b04      	cmp	r3, #4
 800f342:	f040 8099 	bne.w	800f478 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	220b      	movs	r2, #11
 800f34a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f34c:	2302      	movs	r3, #2
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e092      	b.n	800f478 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	791b      	ldrb	r3, [r3, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	2100      	movs	r1, #0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f8d5 	bl	800f50a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f366:	b29a      	uxth	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2208      	movs	r2, #8
 800f370:	761a      	strb	r2, [r3, #24]

      break;
 800f372:	e086      	b.n	800f482 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	791b      	ldrb	r3, [r3, #4]
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fc62 	bl	800fc44 <USBH_LL_GetURBState>
 800f380:	4603      	mov	r3, r0
 800f382:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f384:	7bbb      	ldrb	r3, [r7, #14]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d105      	bne.n	800f396 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	220d      	movs	r2, #13
 800f38e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f394:	e072      	b.n	800f47c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f396:	7bbb      	ldrb	r3, [r7, #14]
 800f398:	2b04      	cmp	r3, #4
 800f39a:	d103      	bne.n	800f3a4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	220b      	movs	r2, #11
 800f3a0:	761a      	strb	r2, [r3, #24]
      break;
 800f3a2:	e06b      	b.n	800f47c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	2b05      	cmp	r3, #5
 800f3a8:	d168      	bne.n	800f47c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f3ae:	e065      	b.n	800f47c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	795b      	ldrb	r3, [r3, #5]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	9200      	str	r2, [sp, #0]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f87f 	bl	800f4c0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	220a      	movs	r2, #10
 800f3d2:	761a      	strb	r2, [r3, #24]
      break;
 800f3d4:	e055      	b.n	800f482 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	795b      	ldrb	r3, [r3, #5]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fc31 	bl	800fc44 <USBH_LL_GetURBState>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d105      	bne.n	800f3f8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	220d      	movs	r2, #13
 800f3f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3f6:	e043      	b.n	800f480 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3f8:	7bbb      	ldrb	r3, [r7, #14]
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d103      	bne.n	800f406 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2209      	movs	r2, #9
 800f402:	761a      	strb	r2, [r3, #24]
      break;
 800f404:	e03c      	b.n	800f480 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f406:	7bbb      	ldrb	r3, [r7, #14]
 800f408:	2b04      	cmp	r3, #4
 800f40a:	d139      	bne.n	800f480 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	220b      	movs	r2, #11
 800f410:	761a      	strb	r2, [r3, #24]
      break;
 800f412:	e035      	b.n	800f480 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	7e5b      	ldrb	r3, [r3, #25]
 800f418:	3301      	adds	r3, #1
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	765a      	strb	r2, [r3, #25]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	7e5b      	ldrb	r3, [r3, #25]
 800f424:	2b02      	cmp	r3, #2
 800f426:	d806      	bhi.n	800f436 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f434:	e025      	b.n	800f482 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f43c:	2106      	movs	r1, #6
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	795b      	ldrb	r3, [r3, #5]
 800f44c:	4619      	mov	r1, r3
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 f90c 	bl	800f66c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	791b      	ldrb	r3, [r3, #4]
 800f458:	4619      	mov	r1, r3
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 f906 	bl	800f66c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f466:	2302      	movs	r3, #2
 800f468:	73fb      	strb	r3, [r7, #15]
      break;
 800f46a:	e00a      	b.n	800f482 <USBH_HandleControl+0x2de>

    default:
      break;
 800f46c:	bf00      	nop
 800f46e:	e008      	b.n	800f482 <USBH_HandleControl+0x2de>
      break;
 800f470:	bf00      	nop
 800f472:	e006      	b.n	800f482 <USBH_HandleControl+0x2de>
      break;
 800f474:	bf00      	nop
 800f476:	e004      	b.n	800f482 <USBH_HandleControl+0x2de>
      break;
 800f478:	bf00      	nop
 800f47a:	e002      	b.n	800f482 <USBH_HandleControl+0x2de>
      break;
 800f47c:	bf00      	nop
 800f47e:	e000      	b.n	800f482 <USBH_HandleControl+0x2de>
      break;
 800f480:	bf00      	nop
  }

  return status;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af04      	add	r7, sp, #16
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	4613      	mov	r3, r2
 800f498:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f49a:	79f9      	ldrb	r1, [r7, #7]
 800f49c:	2300      	movs	r3, #0
 800f49e:	9303      	str	r3, [sp, #12]
 800f4a0:	2308      	movs	r3, #8
 800f4a2:	9302      	str	r3, [sp, #8]
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	9301      	str	r3, [sp, #4]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f000 fb96 	bl	800fbe2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b088      	sub	sp, #32
 800f4c4:	af04      	add	r7, sp, #16
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	80fb      	strh	r3, [r7, #6]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f4e4:	7979      	ldrb	r1, [r7, #5]
 800f4e6:	7e3b      	ldrb	r3, [r7, #24]
 800f4e8:	9303      	str	r3, [sp, #12]
 800f4ea:	88fb      	ldrh	r3, [r7, #6]
 800f4ec:	9302      	str	r3, [sp, #8]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f000 fb71 	bl	800fbe2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b088      	sub	sp, #32
 800f50e:	af04      	add	r7, sp, #16
 800f510:	60f8      	str	r0, [r7, #12]
 800f512:	60b9      	str	r1, [r7, #8]
 800f514:	4611      	mov	r1, r2
 800f516:	461a      	mov	r2, r3
 800f518:	460b      	mov	r3, r1
 800f51a:	80fb      	strh	r3, [r7, #6]
 800f51c:	4613      	mov	r3, r2
 800f51e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f520:	7979      	ldrb	r1, [r7, #5]
 800f522:	2300      	movs	r3, #0
 800f524:	9303      	str	r3, [sp, #12]
 800f526:	88fb      	ldrh	r3, [r7, #6]
 800f528:	9302      	str	r3, [sp, #8]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	2301      	movs	r3, #1
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	2300      	movs	r3, #0
 800f534:	2201      	movs	r2, #1
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f000 fb53 	bl	800fbe2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f53c:	2300      	movs	r3, #0

}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}

0800f546 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b088      	sub	sp, #32
 800f54a:	af04      	add	r7, sp, #16
 800f54c:	60f8      	str	r0, [r7, #12]
 800f54e:	60b9      	str	r1, [r7, #8]
 800f550:	4611      	mov	r1, r2
 800f552:	461a      	mov	r2, r3
 800f554:	460b      	mov	r3, r1
 800f556:	80fb      	strh	r3, [r7, #6]
 800f558:	4613      	mov	r3, r2
 800f55a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f566:	2300      	movs	r3, #0
 800f568:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f56a:	7979      	ldrb	r1, [r7, #5]
 800f56c:	7e3b      	ldrb	r3, [r7, #24]
 800f56e:	9303      	str	r3, [sp, #12]
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	9302      	str	r3, [sp, #8]
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	2301      	movs	r3, #1
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	2302      	movs	r3, #2
 800f57e:	2200      	movs	r2, #0
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 fb2e 	bl	800fbe2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f586:	2300      	movs	r3, #0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3710      	adds	r7, #16
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af04      	add	r7, sp, #16
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	4611      	mov	r1, r2
 800f59c:	461a      	mov	r2, r3
 800f59e:	460b      	mov	r3, r1
 800f5a0:	80fb      	strh	r3, [r7, #6]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5a6:	7979      	ldrb	r1, [r7, #5]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9303      	str	r3, [sp, #12]
 800f5ac:	88fb      	ldrh	r3, [r7, #6]
 800f5ae:	9302      	str	r3, [sp, #8]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	9301      	str	r3, [sp, #4]
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 fb10 	bl	800fbe2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af04      	add	r7, sp, #16
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4603      	mov	r3, r0
 800f5dc:	70fb      	strb	r3, [r7, #3]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	70bb      	strb	r3, [r7, #2]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f5e6:	7878      	ldrb	r0, [r7, #1]
 800f5e8:	78ba      	ldrb	r2, [r7, #2]
 800f5ea:	78f9      	ldrb	r1, [r7, #3]
 800f5ec:	8b3b      	ldrh	r3, [r7, #24]
 800f5ee:	9302      	str	r3, [sp, #8]
 800f5f0:	7d3b      	ldrb	r3, [r7, #20]
 800f5f2:	9301      	str	r3, [sp, #4]
 800f5f4:	7c3b      	ldrb	r3, [r7, #16]
 800f5f6:	9300      	str	r3, [sp, #0]
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 faa3 	bl	800fb46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f616:	78fb      	ldrb	r3, [r7, #3]
 800f618:	4619      	mov	r1, r3
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fac2 	bl	800fba4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b084      	sub	sp, #16
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	460b      	mov	r3, r1
 800f634:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 f836 	bl	800f6a8 <USBH_GetFreePipe>
 800f63c:	4603      	mov	r3, r0
 800f63e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f640:	89fb      	ldrh	r3, [r7, #14]
 800f642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f646:	4293      	cmp	r3, r2
 800f648:	d00a      	beq.n	800f660 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f64a:	78fa      	ldrb	r2, [r7, #3]
 800f64c:	89fb      	ldrh	r3, [r7, #14]
 800f64e:	f003 030f 	and.w	r3, r3, #15
 800f652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f656:	6879      	ldr	r1, [r7, #4]
 800f658:	33e0      	adds	r3, #224	; 0xe0
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	440b      	add	r3, r1
 800f65e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f660:	89fb      	ldrh	r3, [r7, #14]
 800f662:	b2db      	uxtb	r3, r3
}
 800f664:	4618      	mov	r0, r3
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	460b      	mov	r3, r1
 800f676:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	2b0a      	cmp	r3, #10
 800f67c:	d80d      	bhi.n	800f69a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f67e:	78fb      	ldrb	r3, [r7, #3]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	33e0      	adds	r3, #224	; 0xe0
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	4413      	add	r3, r2
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	78fb      	ldrb	r3, [r7, #3]
 800f68c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	33e0      	adds	r3, #224	; 0xe0
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	440b      	add	r3, r1
 800f698:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	73fb      	strb	r3, [r7, #15]
 800f6b8:	e00f      	b.n	800f6da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f6ba:	7bfb      	ldrb	r3, [r7, #15]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	33e0      	adds	r3, #224	; 0xe0
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4413      	add	r3, r2
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d102      	bne.n	800f6d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f6ce:	7bfb      	ldrb	r3, [r7, #15]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	e007      	b.n	800f6e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	73fb      	strb	r3, [r7, #15]
 800f6da:	7bfb      	ldrb	r3, [r7, #15]
 800f6dc:	2b0a      	cmp	r3, #10
 800f6de:	d9ec      	bls.n	800f6ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f6e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f6fe:	2301      	movs	r3, #1
 800f700:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f706:	4b1f      	ldr	r3, [pc, #124]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f708:	7a5b      	ldrb	r3, [r3, #9]
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d131      	bne.n	800f774 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f710:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f712:	7a5b      	ldrb	r3, [r3, #9]
 800f714:	b2db      	uxtb	r3, r3
 800f716:	461a      	mov	r2, r3
 800f718:	4b1a      	ldr	r3, [pc, #104]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f71a:	2100      	movs	r1, #0
 800f71c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f71e:	4b19      	ldr	r3, [pc, #100]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f720:	7a5b      	ldrb	r3, [r3, #9]
 800f722:	b2db      	uxtb	r3, r3
 800f724:	4a17      	ldr	r2, [pc, #92]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f72e:	4b15      	ldr	r3, [pc, #84]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f730:	7a5b      	ldrb	r3, [r3, #9]
 800f732:	b2db      	uxtb	r3, r3
 800f734:	461a      	mov	r2, r3
 800f736:	4b13      	ldr	r3, [pc, #76]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f738:	4413      	add	r3, r2
 800f73a:	79fa      	ldrb	r2, [r7, #7]
 800f73c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f73e:	4b11      	ldr	r3, [pc, #68]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f740:	7a5b      	ldrb	r3, [r3, #9]
 800f742:	b2db      	uxtb	r3, r3
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	b2d1      	uxtb	r1, r2
 800f748:	4a0e      	ldr	r2, [pc, #56]	; (800f784 <FATFS_LinkDriverEx+0x94>)
 800f74a:	7251      	strb	r1, [r2, #9]
 800f74c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f74e:	7dbb      	ldrb	r3, [r7, #22]
 800f750:	3330      	adds	r3, #48	; 0x30
 800f752:	b2da      	uxtb	r2, r3
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	3301      	adds	r3, #1
 800f75c:	223a      	movs	r2, #58	; 0x3a
 800f75e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	3302      	adds	r3, #2
 800f764:	222f      	movs	r2, #47	; 0x2f
 800f766:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	3303      	adds	r3, #3
 800f76c:	2200      	movs	r2, #0
 800f76e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f770:	2300      	movs	r3, #0
 800f772:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
}
 800f776:	4618      	mov	r0, r3
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	2000097c 	.word	0x2000097c

0800f788 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f792:	2200      	movs	r2, #0
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff ffaa 	bl	800f6f0 <FATFS_LinkDriverEx>
 800f79c:	4603      	mov	r3, r0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
	...

0800f7a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	490e      	ldr	r1, [pc, #56]	; (800f7e8 <MX_USB_HOST_Init+0x40>)
 800f7b0:	480e      	ldr	r0, [pc, #56]	; (800f7ec <MX_USB_HOST_Init+0x44>)
 800f7b2:	f7fe fc45 	bl	800e040 <USBH_Init>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d001      	beq.n	800f7c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f7bc:	f7f2 ff80 	bl	80026c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f7c0:	490b      	ldr	r1, [pc, #44]	; (800f7f0 <MX_USB_HOST_Init+0x48>)
 800f7c2:	480a      	ldr	r0, [pc, #40]	; (800f7ec <MX_USB_HOST_Init+0x44>)
 800f7c4:	f7fe fcca 	bl	800e15c <USBH_RegisterClass>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f7ce:	f7f2 ff77 	bl	80026c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f7d2:	4806      	ldr	r0, [pc, #24]	; (800f7ec <MX_USB_HOST_Init+0x44>)
 800f7d4:	f7fe fd4e 	bl	800e274 <USBH_Start>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f7de:	f7f2 ff6f 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f7e2:	bf00      	nop
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	0800f809 	.word	0x0800f809
 800f7ec:	20001638 	.word	0x20001638
 800f7f0:	2000000c 	.word	0x2000000c

0800f7f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f7f8:	4802      	ldr	r0, [pc, #8]	; (800f804 <MX_USB_HOST_Process+0x10>)
 800f7fa:	f7fe fd4b 	bl	800e294 <USBH_Process>
}
 800f7fe:	bf00      	nop
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20001638 	.word	0x20001638

0800f808 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	3b01      	subs	r3, #1
 800f818:	2b04      	cmp	r3, #4
 800f81a:	d819      	bhi.n	800f850 <USBH_UserProcess+0x48>
 800f81c:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <USBH_UserProcess+0x1c>)
 800f81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f822:	bf00      	nop
 800f824:	0800f851 	.word	0x0800f851
 800f828:	0800f841 	.word	0x0800f841
 800f82c:	0800f851 	.word	0x0800f851
 800f830:	0800f849 	.word	0x0800f849
 800f834:	0800f839 	.word	0x0800f839
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f838:	4b09      	ldr	r3, [pc, #36]	; (800f860 <USBH_UserProcess+0x58>)
 800f83a:	2203      	movs	r2, #3
 800f83c:	701a      	strb	r2, [r3, #0]
  break;
 800f83e:	e008      	b.n	800f852 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f840:	4b07      	ldr	r3, [pc, #28]	; (800f860 <USBH_UserProcess+0x58>)
 800f842:	2202      	movs	r2, #2
 800f844:	701a      	strb	r2, [r3, #0]
  break;
 800f846:	e004      	b.n	800f852 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f848:	4b05      	ldr	r3, [pc, #20]	; (800f860 <USBH_UserProcess+0x58>)
 800f84a:	2201      	movs	r2, #1
 800f84c:	701a      	strb	r2, [r3, #0]
  break;
 800f84e:	e000      	b.n	800f852 <USBH_UserProcess+0x4a>

  default:
  break;
 800f850:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f852:	bf00      	nop
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	20000988 	.word	0x20000988

0800f864 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	; 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f86c:	f107 0314 	add.w	r3, r7, #20
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	605a      	str	r2, [r3, #4]
 800f876:	609a      	str	r2, [r3, #8]
 800f878:	60da      	str	r2, [r3, #12]
 800f87a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f884:	d13c      	bne.n	800f900 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f886:	4b20      	ldr	r3, [pc, #128]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f88a:	4a1f      	ldr	r2, [pc, #124]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f88c:	f043 0301 	orr.w	r3, r3, #1
 800f890:	6313      	str	r3, [r2, #48]	; 0x30
 800f892:	4b1d      	ldr	r3, [pc, #116]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	613b      	str	r3, [r7, #16]
 800f89c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800f89e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f8a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8ac:	2303      	movs	r3, #3
 800f8ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f8b0:	230a      	movs	r3, #10
 800f8b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8b4:	f107 0314 	add.w	r3, r7, #20
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4814      	ldr	r0, [pc, #80]	; (800f90c <HAL_HCD_MspInit+0xa8>)
 800f8bc:	f7f4 fe20 	bl	8004500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f8c0:	4b11      	ldr	r3, [pc, #68]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c4:	4a10      	ldr	r2, [pc, #64]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8ca:	6353      	str	r3, [r2, #52]	; 0x34
 800f8cc:	4b0e      	ldr	r3, [pc, #56]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8d4:	60fb      	str	r3, [r7, #12]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	4b0b      	ldr	r3, [pc, #44]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8dc:	4a0a      	ldr	r2, [pc, #40]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8e2:	6453      	str	r3, [r2, #68]	; 0x44
 800f8e4:	4b08      	ldr	r3, [pc, #32]	; (800f908 <HAL_HCD_MspInit+0xa4>)
 800f8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8ec:	60bb      	str	r3, [r7, #8]
 800f8ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	2043      	movs	r0, #67	; 0x43
 800f8f6:	f7f4 fa7c 	bl	8003df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8fa:	2043      	movs	r0, #67	; 0x43
 800f8fc:	f7f4 fa95 	bl	8003e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f900:	bf00      	nop
 800f902:	3728      	adds	r7, #40	; 0x28
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	40023800 	.word	0x40023800
 800f90c:	40020000 	.word	0x40020000

0800f910 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f91e:	4618      	mov	r0, r3
 800f920:	f7ff f88b 	bl	800ea3a <USBH_LL_IncTimer>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff f8c3 	bl	800eac6 <USBH_LL_Connect>
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff f8cc 	bl	800eaf4 <USBH_LL_Disconnect>
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	460b      	mov	r3, r1
 800f96e:	70fb      	strb	r3, [r7, #3]
 800f970:	4613      	mov	r3, r2
 800f972:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff f87d 	bl	800ea8e <USBH_LL_PortEnabled>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff f87d 	bl	800eaaa <USBH_LL_PortDisabled>
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d12a      	bne.n	800fa20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f9ca:	4a18      	ldr	r2, [pc, #96]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a15      	ldr	r2, [pc, #84]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9da:	4b14      	ldr	r3, [pc, #80]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f9e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f9e2:	4b12      	ldr	r3, [pc, #72]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9e4:	2208      	movs	r2, #8
 800f9e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f9e8:	4b10      	ldr	r3, [pc, #64]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9fa:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <USBH_LL_Init+0x74>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fa00:	480a      	ldr	r0, [pc, #40]	; (800fa2c <USBH_LL_Init+0x74>)
 800fa02:	f7f4 ff74 	bl	80048ee <HAL_HCD_Init>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fa0c:	f7f2 fe58 	bl	80026c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fa10:	4806      	ldr	r0, [pc, #24]	; (800fa2c <USBH_LL_Init+0x74>)
 800fa12:	f7f5 fb51 	bl	80050b8 <HAL_HCD_GetCurrentFrame>
 800fa16:	4603      	mov	r3, r0
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fe fffe 	bl	800ea1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3708      	adds	r7, #8
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20001a10 	.word	0x20001a10

0800fa30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f5 fac0 	bl	8004fcc <HAL_HCD_Start>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f000 f95c 	bl	800fd10 <USBH_Get_USB_Status>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3710      	adds	r7, #16
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b084      	sub	sp, #16
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7f5 fac8 	bl	8005012 <HAL_HCD_Stop>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 f941 	bl	800fd10 <USBH_Get_USB_Status>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800faa4:	2301      	movs	r3, #1
 800faa6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800faae:	4618      	mov	r0, r3
 800fab0:	f7f5 fb10 	bl	80050d4 <HAL_HCD_GetCurrentSpeed>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d00c      	beq.n	800fad4 <USBH_LL_GetSpeed+0x38>
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d80d      	bhi.n	800fada <USBH_LL_GetSpeed+0x3e>
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d002      	beq.n	800fac8 <USBH_LL_GetSpeed+0x2c>
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	d003      	beq.n	800face <USBH_LL_GetSpeed+0x32>
 800fac6:	e008      	b.n	800fada <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
    break;
 800facc:	e008      	b.n	800fae0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800face:	2301      	movs	r3, #1
 800fad0:	73fb      	strb	r3, [r7, #15]
    break;
 800fad2:	e005      	b.n	800fae0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fad4:	2302      	movs	r3, #2
 800fad6:	73fb      	strb	r3, [r7, #15]
    break;
 800fad8:	e002      	b.n	800fae0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fada:	2301      	movs	r3, #1
 800fadc:	73fb      	strb	r3, [r7, #15]
    break;
 800fade:	bf00      	nop
  }
  return  speed;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf2:	2300      	movs	r3, #0
 800faf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7f5 faa3 	bl	800504c <HAL_HCD_ResetPort>
 800fb06:	4603      	mov	r3, r0
 800fb08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 f8ff 	bl	800fd10 <USBH_Get_USB_Status>
 800fb12:	4603      	mov	r3, r0
 800fb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	460b      	mov	r3, r1
 800fb2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb32:	78fa      	ldrb	r2, [r7, #3]
 800fb34:	4611      	mov	r1, r2
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f5 faaa 	bl	8005090 <HAL_HCD_HC_GetXferCount>
 800fb3c:	4603      	mov	r3, r0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb46:	b590      	push	{r4, r7, lr}
 800fb48:	b089      	sub	sp, #36	; 0x24
 800fb4a:	af04      	add	r7, sp, #16
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	4608      	mov	r0, r1
 800fb50:	4611      	mov	r1, r2
 800fb52:	461a      	mov	r2, r3
 800fb54:	4603      	mov	r3, r0
 800fb56:	70fb      	strb	r3, [r7, #3]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70bb      	strb	r3, [r7, #2]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb60:	2300      	movs	r3, #0
 800fb62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fb6e:	787c      	ldrb	r4, [r7, #1]
 800fb70:	78ba      	ldrb	r2, [r7, #2]
 800fb72:	78f9      	ldrb	r1, [r7, #3]
 800fb74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb76:	9302      	str	r3, [sp, #8]
 800fb78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb7c:	9301      	str	r3, [sp, #4]
 800fb7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	4623      	mov	r3, r4
 800fb86:	f7f4 ff14 	bl	80049b2 <HAL_HCD_HC_Init>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 f8bd 	bl	800fd10 <USBH_Get_USB_Status>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd90      	pop	{r4, r7, pc}

0800fba4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbbe:	78fa      	ldrb	r2, [r7, #3]
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7f4 ff84 	bl	8004ad0 <HAL_HCD_HC_Halt>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f000 f89e 	bl	800fd10 <USBH_Get_USB_Status>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fbe2:	b590      	push	{r4, r7, lr}
 800fbe4:	b089      	sub	sp, #36	; 0x24
 800fbe6:	af04      	add	r7, sp, #16
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	4608      	mov	r0, r1
 800fbec:	4611      	mov	r1, r2
 800fbee:	461a      	mov	r2, r3
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	70fb      	strb	r3, [r7, #3]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70bb      	strb	r3, [r7, #2]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fc0a:	787c      	ldrb	r4, [r7, #1]
 800fc0c:	78ba      	ldrb	r2, [r7, #2]
 800fc0e:	78f9      	ldrb	r1, [r7, #3]
 800fc10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc14:	9303      	str	r3, [sp, #12]
 800fc16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc18:	9302      	str	r3, [sp, #8]
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	4623      	mov	r3, r4
 800fc26:	f7f4 ff77 	bl	8004b18 <HAL_HCD_HC_SubmitRequest>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 f86d 	bl	800fd10 <USBH_Get_USB_Status>
 800fc36:	4603      	mov	r3, r0
 800fc38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd90      	pop	{r4, r7, pc}

0800fc44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc56:	78fa      	ldrb	r2, [r7, #3]
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f5 fa04 	bl	8005068 <HAL_HCD_HC_GetURBState>
 800fc60:	4603      	mov	r3, r0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b082      	sub	sp, #8
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	460b      	mov	r3, r1
 800fc74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d103      	bne.n	800fc88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 f870 	bl	800fd68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fc88:	20c8      	movs	r0, #200	; 0xc8
 800fc8a:	f7f3 fd2b 	bl	80036e4 <HAL_Delay>
  return USBH_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
 800fca4:	4613      	mov	r3, r2
 800fca6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fcae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	212c      	movs	r1, #44	; 0x2c
 800fcb6:	fb01 f303 	mul.w	r3, r1, r3
 800fcba:	4413      	add	r3, r2
 800fcbc:	333b      	adds	r3, #59	; 0x3b
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d009      	beq.n	800fcd8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	212c      	movs	r1, #44	; 0x2c
 800fcca:	fb01 f303 	mul.w	r3, r1, r3
 800fcce:	4413      	add	r3, r2
 800fcd0:	3354      	adds	r3, #84	; 0x54
 800fcd2:	78ba      	ldrb	r2, [r7, #2]
 800fcd4:	701a      	strb	r2, [r3, #0]
 800fcd6:	e008      	b.n	800fcea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fcd8:	78fb      	ldrb	r3, [r7, #3]
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	212c      	movs	r1, #44	; 0x2c
 800fcde:	fb01 f303 	mul.w	r3, r1, r3
 800fce2:	4413      	add	r3, r2
 800fce4:	3355      	adds	r3, #85	; 0x55
 800fce6:	78ba      	ldrb	r2, [r7, #2]
 800fce8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7f3 fcef 	bl	80036e4 <HAL_Delay>
}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
	...

0800fd10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	4603      	mov	r3, r0
 800fd18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd1e:	79fb      	ldrb	r3, [r7, #7]
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d817      	bhi.n	800fd54 <USBH_Get_USB_Status+0x44>
 800fd24:	a201      	add	r2, pc, #4	; (adr r2, 800fd2c <USBH_Get_USB_Status+0x1c>)
 800fd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2a:	bf00      	nop
 800fd2c:	0800fd3d 	.word	0x0800fd3d
 800fd30:	0800fd43 	.word	0x0800fd43
 800fd34:	0800fd49 	.word	0x0800fd49
 800fd38:	0800fd4f 	.word	0x0800fd4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd40:	e00b      	b.n	800fd5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fd42:	2302      	movs	r3, #2
 800fd44:	73fb      	strb	r3, [r7, #15]
    break;
 800fd46:	e008      	b.n	800fd5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd4c:	e005      	b.n	800fd5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fd4e:	2302      	movs	r3, #2
 800fd50:	73fb      	strb	r3, [r7, #15]
    break;
 800fd52:	e002      	b.n	800fd5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fd54:	2302      	movs	r3, #2
 800fd56:	73fb      	strb	r3, [r7, #15]
    break;
 800fd58:	bf00      	nop
  }
  return usb_status;
 800fd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	4603      	mov	r3, r0
 800fd70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d102      	bne.n	800fd82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	73fb      	strb	r3, [r7, #15]
 800fd80:	e001      	b.n	800fd86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fd82:	2300      	movs	r3, #0
 800fd84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800fd86:	7bfb      	ldrb	r3, [r7, #15]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	2120      	movs	r1, #32
 800fd8c:	4803      	ldr	r0, [pc, #12]	; (800fd9c <MX_DriverVbusFS+0x34>)
 800fd8e:	f7f4 fd7b 	bl	8004888 <HAL_GPIO_WritePin>
}
 800fd92:	bf00      	nop
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	40020c00 	.word	0x40020c00

0800fda0 <tonecrafter_configure_activations>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	3303      	adds	r3, #3
 800fdb0:	f023 0303 	bic.w	r3, r3, #3
 800fdb4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    lstm_scratch0_array.data = AI_PTR(activations + 0);
 800fdb6:	4a1b      	ldr	r2, [pc, #108]	; (800fe24 <tonecrafter_configure_activations+0x84>)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(activations + 0);
 800fdbc:	4a19      	ldr	r2, [pc, #100]	; (800fe24 <tonecrafter_configure_activations+0x84>)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800fdc2:	4b19      	ldr	r3, [pc, #100]	; (800fe28 <tonecrafter_configure_activations+0x88>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800fdc8:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <tonecrafter_configure_activations+0x88>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations + 512);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fdd4:	4a15      	ldr	r2, [pc, #84]	; (800fe2c <tonecrafter_configure_activations+0x8c>)
 800fdd6:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations + 512);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fdde:	4a13      	ldr	r2, [pc, #76]	; (800fe2c <tonecrafter_configure_activations+0x8c>)
 800fde0:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations + 672);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800fde8:	4a11      	ldr	r2, [pc, #68]	; (800fe30 <tonecrafter_configure_activations+0x90>)
 800fdea:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations + 672);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800fdf2:	4a0f      	ldr	r2, [pc, #60]	; (800fe30 <tonecrafter_configure_activations+0x90>)
 800fdf4:	60d3      	str	r3, [r2, #12]
    lstm_output_array.data = AI_PTR(activations + 688);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fdfc:	4a0d      	ldr	r2, [pc, #52]	; (800fe34 <tonecrafter_configure_activations+0x94>)
 800fdfe:	6093      	str	r3, [r2, #8]
    lstm_output_array.data_start = AI_PTR(activations + 688);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fe06:	4a0b      	ldr	r2, [pc, #44]	; (800fe34 <tonecrafter_configure_activations+0x94>)
 800fe08:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(NULL);
 800fe0a:	4b0b      	ldr	r3, [pc, #44]	; (800fe38 <tonecrafter_configure_activations+0x98>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	609a      	str	r2, [r3, #8]
    dense_output_array.data_start = AI_PTR(NULL);
 800fe10:	4b09      	ldr	r3, [pc, #36]	; (800fe38 <tonecrafter_configure_activations+0x98>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800fe16:	2301      	movs	r3, #1
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	2000008c 	.word	0x2000008c
 800fe28:	2000013c 	.word	0x2000013c
 800fe2c:	2000014c 	.word	0x2000014c
 800fe30:	2000015c 	.word	0x2000015c
 800fe34:	2000016c 	.word	0x2000016c
 800fe38:	2000017c 	.word	0x2000017c

0800fe3c <tonecrafter_configure_weights>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b085      	sub	sp, #20
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	691b      	ldr	r3, [r3, #16]
 800fe4a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe4c:	4b51      	ldr	r3, [pc, #324]	; (800ff94 <tonecrafter_configure_weights+0x158>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe54:	4a4f      	ldr	r2, [pc, #316]	; (800ff94 <tonecrafter_configure_weights+0x158>)
 800fe56:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12512);
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800fe5e:	4413      	add	r3, r2
 800fe60:	4a4c      	ldr	r2, [pc, #304]	; (800ff94 <tonecrafter_configure_weights+0x158>)
 800fe62:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12512);
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800fe6a:	4413      	add	r3, r2
 800fe6c:	4a49      	ldr	r2, [pc, #292]	; (800ff94 <tonecrafter_configure_weights+0x158>)
 800fe6e:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800fe70:	4b49      	ldr	r3, [pc, #292]	; (800ff98 <tonecrafter_configure_weights+0x15c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe78:	4a47      	ldr	r2, [pc, #284]	; (800ff98 <tonecrafter_configure_weights+0x15c>)
 800fe7a:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 12416);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800fe82:	4a45      	ldr	r2, [pc, #276]	; (800ff98 <tonecrafter_configure_weights+0x15c>)
 800fe84:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 12416);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800fe8c:	4a42      	ldr	r2, [pc, #264]	; (800ff98 <tonecrafter_configure_weights+0x15c>)
 800fe8e:	60d3      	str	r3, [r2, #12]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 800fe90:	4b42      	ldr	r3, [pc, #264]	; (800ff9c <tonecrafter_configure_weights+0x160>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe98:	4a40      	ldr	r2, [pc, #256]	; (800ff9c <tonecrafter_configure_weights+0x160>)
 800fe9a:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(weights + 12032);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800fea2:	4a3e      	ldr	r2, [pc, #248]	; (800ff9c <tonecrafter_configure_weights+0x160>)
 800fea4:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(weights + 12032);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800feac:	4a3b      	ldr	r2, [pc, #236]	; (800ff9c <tonecrafter_configure_weights+0x160>)
 800feae:	60d3      	str	r3, [r2, #12]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 800feb0:	4b3b      	ldr	r3, [pc, #236]	; (800ffa0 <tonecrafter_configure_weights+0x164>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800feb8:	4a39      	ldr	r2, [pc, #228]	; (800ffa0 <tonecrafter_configure_weights+0x164>)
 800feba:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(weights + 11744);
 800febc:	68fa      	ldr	r2, [r7, #12]
 800febe:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800fec2:	4413      	add	r3, r2
 800fec4:	4a36      	ldr	r2, [pc, #216]	; (800ffa0 <tonecrafter_configure_weights+0x164>)
 800fec6:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(weights + 11744);
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800fece:	4413      	add	r3, r2
 800fed0:	4a33      	ldr	r2, [pc, #204]	; (800ffa0 <tonecrafter_configure_weights+0x164>)
 800fed2:	60d3      	str	r3, [r2, #12]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800fed4:	4b33      	ldr	r3, [pc, #204]	; (800ffa4 <tonecrafter_configure_weights+0x168>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fedc:	4a31      	ldr	r2, [pc, #196]	; (800ffa4 <tonecrafter_configure_weights+0x168>)
 800fede:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(weights + 2528);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800fee6:	4a2f      	ldr	r2, [pc, #188]	; (800ffa4 <tonecrafter_configure_weights+0x168>)
 800fee8:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(weights + 2528);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800fef0:	4a2c      	ldr	r2, [pc, #176]	; (800ffa4 <tonecrafter_configure_weights+0x168>)
 800fef2:	60d3      	str	r3, [r2, #12]
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 800fef4:	4b2c      	ldr	r3, [pc, #176]	; (800ffa8 <tonecrafter_configure_weights+0x16c>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fefc:	4a2a      	ldr	r2, [pc, #168]	; (800ffa8 <tonecrafter_configure_weights+0x16c>)
 800fefe:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(weights + 992);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800ff06:	4a28      	ldr	r2, [pc, #160]	; (800ffa8 <tonecrafter_configure_weights+0x16c>)
 800ff08:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(weights + 992);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800ff10:	4a25      	ldr	r2, [pc, #148]	; (800ffa8 <tonecrafter_configure_weights+0x16c>)
 800ff12:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff14:	4b25      	ldr	r3, [pc, #148]	; (800ffac <tonecrafter_configure_weights+0x170>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff1c:	4a23      	ldr	r2, [pc, #140]	; (800ffac <tonecrafter_configure_weights+0x170>)
 800ff1e:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 976);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800ff26:	4a21      	ldr	r2, [pc, #132]	; (800ffac <tonecrafter_configure_weights+0x170>)
 800ff28:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights + 976);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800ff30:	4a1e      	ldr	r2, [pc, #120]	; (800ffac <tonecrafter_configure_weights+0x170>)
 800ff32:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff34:	4b1e      	ldr	r3, [pc, #120]	; (800ffb0 <tonecrafter_configure_weights+0x174>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff3c:	4a1c      	ldr	r2, [pc, #112]	; (800ffb0 <tonecrafter_configure_weights+0x174>)
 800ff3e:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 208);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	33d0      	adds	r3, #208	; 0xd0
 800ff44:	4a1a      	ldr	r2, [pc, #104]	; (800ffb0 <tonecrafter_configure_weights+0x174>)
 800ff46:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights + 208);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	33d0      	adds	r3, #208	; 0xd0
 800ff4c:	4a18      	ldr	r2, [pc, #96]	; (800ffb0 <tonecrafter_configure_weights+0x174>)
 800ff4e:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff50:	4b18      	ldr	r3, [pc, #96]	; (800ffb4 <tonecrafter_configure_weights+0x178>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff58:	4a16      	ldr	r2, [pc, #88]	; (800ffb4 <tonecrafter_configure_weights+0x178>)
 800ff5a:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 192);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	33c0      	adds	r3, #192	; 0xc0
 800ff60:	4a14      	ldr	r2, [pc, #80]	; (800ffb4 <tonecrafter_configure_weights+0x178>)
 800ff62:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights + 192);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	33c0      	adds	r3, #192	; 0xc0
 800ff68:	4a12      	ldr	r2, [pc, #72]	; (800ffb4 <tonecrafter_configure_weights+0x178>)
 800ff6a:	60d3      	str	r3, [r2, #12]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff6c:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <tonecrafter_configure_weights+0x17c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff74:	4a10      	ldr	r2, [pc, #64]	; (800ffb8 <tonecrafter_configure_weights+0x17c>)
 800ff76:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights + 0);
 800ff78:	4a0f      	ldr	r2, [pc, #60]	; (800ffb8 <tonecrafter_configure_weights+0x17c>)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 800ff7e:	4a0e      	ldr	r2, [pc, #56]	; (800ffb8 <tonecrafter_configure_weights+0x17c>)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800ff84:	2301      	movs	r3, #1
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3714      	adds	r7, #20
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	2000009c 	.word	0x2000009c
 800ff98:	200000ac 	.word	0x200000ac
 800ff9c:	200000bc 	.word	0x200000bc
 800ffa0:	200000cc 	.word	0x200000cc
 800ffa4:	200000dc 	.word	0x200000dc
 800ffa8:	200000ec 	.word	0x200000ec
 800ffac:	200000fc 	.word	0x200000fc
 800ffb0:	2000010c 	.word	0x2000010c
 800ffb4:	2000011c 	.word	0x2000011c
 800ffb8:	2000012c 	.word	0x2000012c

0800ffbc <ai_tonecrafter_create>:
}

AI_API_ENTRY
ai_error ai_tonecrafter_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af02      	add	r7, sp, #8
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	2303      	movs	r3, #3
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4a04      	ldr	r2, [pc, #16]	; (800ffe4 <ai_tonecrafter_create+0x28>)
 800ffd2:	6839      	ldr	r1, [r7, #0]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 f861 	bl	801009c <ai_platform_network_create>
 800ffda:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	2000002c 	.word	0x2000002c

0800ffe8 <ai_tonecrafter_init>:
}

AI_API_ENTRY
ai_bool ai_tonecrafter_init(
  ai_handle network, const ai_network_params* params)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f8d5 	bl	80101a4 <ai_platform_network_init>
 800fffa:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <ai_tonecrafter_init+0x1e>
 8010002:	2300      	movs	r3, #0
 8010004:	e02b      	b.n	801005e <ai_tonecrafter_init+0x76>

  ai_bool ok = true;
 8010006:	2301      	movs	r3, #1
 8010008:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_weights(net_ctx, &params->params);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	4619      	mov	r1, r3
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7ff ff14 	bl	800fe3c <tonecrafter_configure_weights>
 8010014:	4603      	mov	r3, r0
 8010016:	461a      	mov	r2, r3
 8010018:	7afb      	ldrb	r3, [r7, #11]
 801001a:	4013      	ands	r3, r2
 801001c:	2b00      	cmp	r3, #0
 801001e:	bf14      	ite	ne
 8010020:	2301      	movne	r3, #1
 8010022:	2300      	moveq	r3, #0
 8010024:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_activations(net_ctx, &params->activations);
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	3318      	adds	r3, #24
 801002a:	4619      	mov	r1, r3
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7ff feb7 	bl	800fda0 <tonecrafter_configure_activations>
 8010032:	4603      	mov	r3, r0
 8010034:	461a      	mov	r2, r3
 8010036:	7afb      	ldrb	r3, [r7, #11]
 8010038:	4013      	ands	r3, r2
 801003a:	2b00      	cmp	r3, #0
 801003c:	bf14      	ite	ne
 801003e:	2301      	movne	r3, #1
 8010040:	2300      	moveq	r3, #0
 8010042:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f995 	bl	8010374 <ai_platform_network_post_init>
 801004a:	4603      	mov	r3, r0
 801004c:	461a      	mov	r2, r3
 801004e:	7afb      	ldrb	r3, [r7, #11]
 8010050:	4013      	ands	r3, r2
 8010052:	2b00      	cmp	r3, #0
 8010054:	bf14      	ite	ne
 8010056:	2301      	movne	r3, #1
 8010058:	2300      	moveq	r3, #0
 801005a:	72fb      	strb	r3, [r7, #11]

  return ok;
 801005c:	7afb      	ldrb	r3, [r7, #11]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <ai_tonecrafter_run>:


AI_API_ENTRY
ai_i32 ai_tonecrafter_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b084      	sub	sp, #16
 801006a:	af00      	add	r7, sp, #0
 801006c:	60f8      	str	r0, [r7, #12]
 801006e:	60b9      	str	r1, [r7, #8]
 8010070:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	68b9      	ldr	r1, [r7, #8]
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f000 fa28 	bl	80104cc <ai_platform_network_process>
 801007c:	4603      	mov	r3, r0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
	...

08010088 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8010088:	b480      	push	{r7}
 801008a:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 801008c:	4b02      	ldr	r3, [pc, #8]	; (8010098 <ai_tonecrafter_data_weights_get+0x10>)

}
 801008e:	4618      	mov	r0, r3
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	080163e0 	.word	0x080163e0

0801009c <ai_platform_network_create>:
 801009c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801009e:	4d36      	ldr	r5, [pc, #216]	; (8010178 <ai_platform_network_create+0xdc>)
 80100a0:	b083      	sub	sp, #12
 80100a2:	4e36      	ldr	r6, [pc, #216]	; (801017c <ai_platform_network_create+0xe0>)
 80100a4:	6829      	ldr	r1, [r5, #0]
 80100a6:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80100aa:	f021 0101 	bic.w	r1, r1, #1
 80100ae:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80100b2:	6029      	str	r1, [r5, #0]
 80100b4:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 80100b8:	6831      	ldr	r1, [r6, #0]
 80100ba:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80100be:	194d      	adds	r5, r1, r5
 80100c0:	2d01      	cmp	r5, #1
 80100c2:	d92f      	bls.n	8010124 <ai_platform_network_create+0x88>
 80100c4:	f240 4549 	movw	r5, #1097	; 0x449
 80100c8:	42a9      	cmp	r1, r5
 80100ca:	d02b      	beq.n	8010124 <ai_platform_network_create+0x88>
 80100cc:	492c      	ldr	r1, [pc, #176]	; (8010180 <ai_platform_network_create+0xe4>)
 80100ce:	6809      	ldr	r1, [r1, #0]
 80100d0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80100d4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80100d8:	d015      	beq.n	8010106 <ai_platform_network_create+0x6a>
 80100da:	2800      	cmp	r0, #0
 80100dc:	d031      	beq.n	8010142 <ai_platform_network_create+0xa6>
 80100de:	461e      	mov	r6, r3
 80100e0:	4613      	mov	r3, r2
 80100e2:	4a28      	ldr	r2, [pc, #160]	; (8010184 <ai_platform_network_create+0xe8>)
 80100e4:	4605      	mov	r5, r0
 80100e6:	601a      	str	r2, [r3, #0]
 80100e8:	6003      	str	r3, [r0, #0]
 80100ea:	f000 fc9f 	bl	8010a2c <core_init>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d02b      	beq.n	801014a <ai_platform_network_create+0xae>
 80100f2:	0223      	lsls	r3, r4, #8
 80100f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100f8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80100fc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010100:	d92e      	bls.n	8010160 <ai_platform_network_create+0xc4>
 8010102:	2301      	movs	r3, #1
 8010104:	e022      	b.n	801014c <ai_platform_network_create+0xb0>
 8010106:	4920      	ldr	r1, [pc, #128]	; (8010188 <ai_platform_network_create+0xec>)
 8010108:	2501      	movs	r5, #1
 801010a:	460e      	mov	r6, r1
 801010c:	600d      	str	r5, [r1, #0]
 801010e:	6831      	ldr	r1, [r6, #0]
 8010110:	2900      	cmp	r1, #0
 8010112:	d1fc      	bne.n	801010e <ai_platform_network_create+0x72>
 8010114:	491d      	ldr	r1, [pc, #116]	; (801018c <ai_platform_network_create+0xf0>)
 8010116:	4e1e      	ldr	r6, [pc, #120]	; (8010190 <ai_platform_network_create+0xf4>)
 8010118:	4d1e      	ldr	r5, [pc, #120]	; (8010194 <ai_platform_network_create+0xf8>)
 801011a:	600e      	str	r6, [r1, #0]
 801011c:	6809      	ldr	r1, [r1, #0]
 801011e:	42a9      	cmp	r1, r5
 8010120:	d0db      	beq.n	80100da <ai_platform_network_create+0x3e>
 8010122:	e7fe      	b.n	8010122 <ai_platform_network_create+0x86>
 8010124:	491c      	ldr	r1, [pc, #112]	; (8010198 <ai_platform_network_create+0xfc>)
 8010126:	2501      	movs	r5, #1
 8010128:	460e      	mov	r6, r1
 801012a:	600d      	str	r5, [r1, #0]
 801012c:	6831      	ldr	r1, [r6, #0]
 801012e:	2900      	cmp	r1, #0
 8010130:	d1fc      	bne.n	801012c <ai_platform_network_create+0x90>
 8010132:	491a      	ldr	r1, [pc, #104]	; (801019c <ai_platform_network_create+0x100>)
 8010134:	4e16      	ldr	r6, [pc, #88]	; (8010190 <ai_platform_network_create+0xf4>)
 8010136:	4d17      	ldr	r5, [pc, #92]	; (8010194 <ai_platform_network_create+0xf8>)
 8010138:	600e      	str	r6, [r1, #0]
 801013a:	6809      	ldr	r1, [r1, #0]
 801013c:	42a9      	cmp	r1, r5
 801013e:	d0cc      	beq.n	80100da <ai_platform_network_create+0x3e>
 8010140:	e7fe      	b.n	8010140 <ai_platform_network_create+0xa4>
 8010142:	f241 0010 	movw	r0, #4112	; 0x1010
 8010146:	b003      	add	sp, #12
 8010148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801014a:	2330      	movs	r3, #48	; 0x30
 801014c:	2100      	movs	r1, #0
 801014e:	2210      	movs	r2, #16
 8010150:	6029      	str	r1, [r5, #0]
 8010152:	2000      	movs	r0, #0
 8010154:	f363 0007 	bfi	r0, r3, #0, #8
 8010158:	f362 201f 	bfi	r0, r2, #8, #24
 801015c:	b003      	add	sp, #12
 801015e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010160:	4b0f      	ldr	r3, [pc, #60]	; (80101a0 <ai_platform_network_create+0x104>)
 8010162:	a802      	add	r0, sp, #8
 8010164:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010168:	f002 fdf4 	bl	8012d54 <ai_check_custom_types>
 801016c:	b110      	cbz	r0, 8010174 <ai_platform_network_create+0xd8>
 801016e:	2200      	movs	r2, #0
 8010170:	4613      	mov	r3, r2
 8010172:	e7ee      	b.n	8010152 <ai_platform_network_create+0xb6>
 8010174:	2302      	movs	r3, #2
 8010176:	e7e9      	b.n	801014c <ai_platform_network_create+0xb0>
 8010178:	e0002000 	.word	0xe0002000
 801017c:	e0042000 	.word	0xe0042000
 8010180:	5c001000 	.word	0x5c001000
 8010184:	a1c00100 	.word	0xa1c00100
 8010188:	58024c08 	.word	0x58024c08
 801018c:	58024c00 	.word	0x58024c00
 8010190:	f407a5c2 	.word	0xf407a5c2
 8010194:	b5e8b5cd 	.word	0xb5e8b5cd
 8010198:	40023008 	.word	0x40023008
 801019c:	40023000 	.word	0x40023000
 80101a0:	84048403 	.word	0x84048403

080101a4 <ai_platform_network_init>:
 80101a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d05e      	beq.n	8010268 <ai_platform_network_init+0xc4>
 80101aa:	4b68      	ldr	r3, [pc, #416]	; (801034c <ai_platform_network_init+0x1a8>)
 80101ac:	6802      	ldr	r2, [r0, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d15a      	bne.n	8010268 <ai_platform_network_init+0xc4>
 80101b2:	4a67      	ldr	r2, [pc, #412]	; (8010350 <ai_platform_network_init+0x1ac>)
 80101b4:	4c67      	ldr	r4, [pc, #412]	; (8010354 <ai_platform_network_init+0x1b0>)
 80101b6:	6813      	ldr	r3, [r2, #0]
 80101b8:	f023 0301 	bic.w	r3, r3, #1
 80101bc:	6013      	str	r3, [r2, #0]
 80101be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101c8:	189a      	adds	r2, r3, r2
 80101ca:	2a01      	cmp	r2, #1
 80101cc:	d93d      	bls.n	801024a <ai_platform_network_init+0xa6>
 80101ce:	f240 4249 	movw	r2, #1097	; 0x449
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d039      	beq.n	801024a <ai_platform_network_init+0xa6>
 80101d6:	4b60      	ldr	r3, [pc, #384]	; (8010358 <ai_platform_network_init+0x1b4>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80101e2:	d06b      	beq.n	80102bc <ai_platform_network_init+0x118>
 80101e4:	4605      	mov	r5, r0
 80101e6:	460c      	mov	r4, r1
 80101e8:	2900      	cmp	r1, #0
 80101ea:	f000 80a8 	beq.w	801033e <ai_platform_network_init+0x19a>
 80101ee:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80101f0:	690e      	ldr	r6, [r1, #16]
 80101f2:	2f00      	cmp	r7, #0
 80101f4:	f000 8092 	beq.w	801031c <ai_platform_network_init+0x178>
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d07d      	beq.n	80102f8 <ai_platform_network_init+0x154>
 80101fc:	f104 0718 	add.w	r7, r4, #24
 8010200:	f105 0c18 	add.w	ip, r5, #24
 8010204:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8010208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801020a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801020e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010212:	2403      	movs	r4, #3
 8010214:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010218:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801021a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801021c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010220:	e886 0003 	stmia.w	r6, {r0, r1}
 8010224:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010226:	60ec      	str	r4, [r5, #12]
 8010228:	b16a      	cbz	r2, 8010246 <ai_platform_network_init+0xa2>
 801022a:	68d3      	ldr	r3, [r2, #12]
 801022c:	6095      	str	r5, [r2, #8]
 801022e:	b153      	cbz	r3, 8010246 <ai_platform_network_init+0xa2>
 8010230:	429a      	cmp	r2, r3
 8010232:	d104      	bne.n	801023e <ai_platform_network_init+0x9a>
 8010234:	e007      	b.n	8010246 <ai_platform_network_init+0xa2>
 8010236:	429a      	cmp	r2, r3
 8010238:	4613      	mov	r3, r2
 801023a:	d004      	beq.n	8010246 <ai_platform_network_init+0xa2>
 801023c:	b11a      	cbz	r2, 8010246 <ai_platform_network_init+0xa2>
 801023e:	68da      	ldr	r2, [r3, #12]
 8010240:	609d      	str	r5, [r3, #8]
 8010242:	2a00      	cmp	r2, #0
 8010244:	d1f7      	bne.n	8010236 <ai_platform_network_init+0x92>
 8010246:	4628      	mov	r0, r5
 8010248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024a:	4b44      	ldr	r3, [pc, #272]	; (801035c <ai_platform_network_init+0x1b8>)
 801024c:	2201      	movs	r2, #1
 801024e:	461c      	mov	r4, r3
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1fc      	bne.n	8010252 <ai_platform_network_init+0xae>
 8010258:	4b41      	ldr	r3, [pc, #260]	; (8010360 <ai_platform_network_init+0x1bc>)
 801025a:	4c42      	ldr	r4, [pc, #264]	; (8010364 <ai_platform_network_init+0x1c0>)
 801025c:	4a42      	ldr	r2, [pc, #264]	; (8010368 <ai_platform_network_init+0x1c4>)
 801025e:	601c      	str	r4, [r3, #0]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4293      	cmp	r3, r2
 8010264:	d0be      	beq.n	80101e4 <ai_platform_network_init+0x40>
 8010266:	e7fe      	b.n	8010266 <ai_platform_network_init+0xc2>
 8010268:	4a39      	ldr	r2, [pc, #228]	; (8010350 <ai_platform_network_init+0x1ac>)
 801026a:	493a      	ldr	r1, [pc, #232]	; (8010354 <ai_platform_network_init+0x1b0>)
 801026c:	6813      	ldr	r3, [r2, #0]
 801026e:	f023 0301 	bic.w	r3, r3, #1
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	680b      	ldr	r3, [r1, #0]
 8010276:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801027a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801027e:	185a      	adds	r2, r3, r1
 8010280:	2a01      	cmp	r2, #1
 8010282:	d90c      	bls.n	801029e <ai_platform_network_init+0xfa>
 8010284:	f240 4249 	movw	r2, #1097	; 0x449
 8010288:	4293      	cmp	r3, r2
 801028a:	d008      	beq.n	801029e <ai_platform_network_init+0xfa>
 801028c:	4b32      	ldr	r3, [pc, #200]	; (8010358 <ai_platform_network_init+0x1b4>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010294:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010298:	d01f      	beq.n	80102da <ai_platform_network_init+0x136>
 801029a:	2000      	movs	r0, #0
 801029c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801029e:	4b2f      	ldr	r3, [pc, #188]	; (801035c <ai_platform_network_init+0x1b8>)
 80102a0:	2201      	movs	r2, #1
 80102a2:	4619      	mov	r1, r3
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	680b      	ldr	r3, [r1, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1fc      	bne.n	80102a6 <ai_platform_network_init+0x102>
 80102ac:	4b2c      	ldr	r3, [pc, #176]	; (8010360 <ai_platform_network_init+0x1bc>)
 80102ae:	492d      	ldr	r1, [pc, #180]	; (8010364 <ai_platform_network_init+0x1c0>)
 80102b0:	4a2d      	ldr	r2, [pc, #180]	; (8010368 <ai_platform_network_init+0x1c4>)
 80102b2:	6019      	str	r1, [r3, #0]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d0ef      	beq.n	801029a <ai_platform_network_init+0xf6>
 80102ba:	e7fe      	b.n	80102ba <ai_platform_network_init+0x116>
 80102bc:	4b2b      	ldr	r3, [pc, #172]	; (801036c <ai_platform_network_init+0x1c8>)
 80102be:	2201      	movs	r2, #1
 80102c0:	461c      	mov	r4, r3
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1fc      	bne.n	80102c4 <ai_platform_network_init+0x120>
 80102ca:	4b29      	ldr	r3, [pc, #164]	; (8010370 <ai_platform_network_init+0x1cc>)
 80102cc:	4c25      	ldr	r4, [pc, #148]	; (8010364 <ai_platform_network_init+0x1c0>)
 80102ce:	4a26      	ldr	r2, [pc, #152]	; (8010368 <ai_platform_network_init+0x1c4>)
 80102d0:	601c      	str	r4, [r3, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d085      	beq.n	80101e4 <ai_platform_network_init+0x40>
 80102d8:	e7fe      	b.n	80102d8 <ai_platform_network_init+0x134>
 80102da:	4b24      	ldr	r3, [pc, #144]	; (801036c <ai_platform_network_init+0x1c8>)
 80102dc:	2201      	movs	r2, #1
 80102de:	4619      	mov	r1, r3
 80102e0:	601a      	str	r2, [r3, #0]
 80102e2:	680b      	ldr	r3, [r1, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1fc      	bne.n	80102e2 <ai_platform_network_init+0x13e>
 80102e8:	4b21      	ldr	r3, [pc, #132]	; (8010370 <ai_platform_network_init+0x1cc>)
 80102ea:	491e      	ldr	r1, [pc, #120]	; (8010364 <ai_platform_network_init+0x1c0>)
 80102ec:	4a1e      	ldr	r2, [pc, #120]	; (8010368 <ai_platform_network_init+0x1c4>)
 80102ee:	6019      	str	r1, [r3, #0]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d0d1      	beq.n	801029a <ai_platform_network_init+0xf6>
 80102f6:	e7fe      	b.n	80102f6 <ai_platform_network_init+0x152>
 80102f8:	8921      	ldrh	r1, [r4, #8]
 80102fa:	88e2      	ldrh	r2, [r4, #6]
 80102fc:	68e3      	ldr	r3, [r4, #12]
 80102fe:	fb02 f201 	mul.w	r2, r2, r1
 8010302:	fb03 f302 	mul.w	r3, r3, r2
 8010306:	2b00      	cmp	r3, #0
 8010308:	f43f af78 	beq.w	80101fc <ai_platform_network_init+0x58>
 801030c:	f105 0010 	add.w	r0, r5, #16
 8010310:	2212      	movs	r2, #18
 8010312:	2110      	movs	r1, #16
 8010314:	f000 fb8c 	bl	8010a30 <core_set_error>
 8010318:	4630      	mov	r0, r6
 801031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801031c:	8c09      	ldrh	r1, [r1, #32]
 801031e:	8be2      	ldrh	r2, [r4, #30]
 8010320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010322:	fb02 f201 	mul.w	r2, r2, r1
 8010326:	fb03 f302 	mul.w	r3, r3, r2
 801032a:	2b00      	cmp	r3, #0
 801032c:	f43f af64 	beq.w	80101f8 <ai_platform_network_init+0x54>
 8010330:	2213      	movs	r2, #19
 8010332:	2110      	movs	r1, #16
 8010334:	3010      	adds	r0, #16
 8010336:	f000 fb7b 	bl	8010a30 <core_set_error>
 801033a:	4638      	mov	r0, r7
 801033c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033e:	2211      	movs	r2, #17
 8010340:	2110      	movs	r1, #16
 8010342:	3010      	adds	r0, #16
 8010344:	f000 fb74 	bl	8010a30 <core_set_error>
 8010348:	4620      	mov	r0, r4
 801034a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801034c:	a1c00100 	.word	0xa1c00100
 8010350:	e0002000 	.word	0xe0002000
 8010354:	e0042000 	.word	0xe0042000
 8010358:	5c001000 	.word	0x5c001000
 801035c:	40023008 	.word	0x40023008
 8010360:	40023000 	.word	0x40023000
 8010364:	f407a5c2 	.word	0xf407a5c2
 8010368:	b5e8b5cd 	.word	0xb5e8b5cd
 801036c:	58024c08 	.word	0x58024c08
 8010370:	58024c00 	.word	0x58024c00

08010374 <ai_platform_network_post_init>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	b118      	cbz	r0, 8010380 <ai_platform_network_post_init+0xc>
 8010378:	4b4a      	ldr	r3, [pc, #296]	; (80104a4 <ai_platform_network_post_init+0x130>)
 801037a:	6802      	ldr	r2, [r0, #0]
 801037c:	429a      	cmp	r2, r3
 801037e:	d029      	beq.n	80103d4 <ai_platform_network_post_init+0x60>
 8010380:	4a49      	ldr	r2, [pc, #292]	; (80104a8 <ai_platform_network_post_init+0x134>)
 8010382:	494a      	ldr	r1, [pc, #296]	; (80104ac <ai_platform_network_post_init+0x138>)
 8010384:	6813      	ldr	r3, [r2, #0]
 8010386:	f023 0301 	bic.w	r3, r3, #1
 801038a:	6013      	str	r3, [r2, #0]
 801038c:	680b      	ldr	r3, [r1, #0]
 801038e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010396:	185a      	adds	r2, r3, r1
 8010398:	2a01      	cmp	r2, #1
 801039a:	d90c      	bls.n	80103b6 <ai_platform_network_post_init+0x42>
 801039c:	f240 4249 	movw	r2, #1097	; 0x449
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d008      	beq.n	80103b6 <ai_platform_network_post_init+0x42>
 80103a4:	4b42      	ldr	r3, [pc, #264]	; (80104b0 <ai_platform_network_post_init+0x13c>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80103b0:	d044      	beq.n	801043c <ai_platform_network_post_init+0xc8>
 80103b2:	2000      	movs	r0, #0
 80103b4:	bd38      	pop	{r3, r4, r5, pc}
 80103b6:	4b3f      	ldr	r3, [pc, #252]	; (80104b4 <ai_platform_network_post_init+0x140>)
 80103b8:	2201      	movs	r2, #1
 80103ba:	4619      	mov	r1, r3
 80103bc:	601a      	str	r2, [r3, #0]
 80103be:	680b      	ldr	r3, [r1, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1fc      	bne.n	80103be <ai_platform_network_post_init+0x4a>
 80103c4:	4b3c      	ldr	r3, [pc, #240]	; (80104b8 <ai_platform_network_post_init+0x144>)
 80103c6:	493d      	ldr	r1, [pc, #244]	; (80104bc <ai_platform_network_post_init+0x148>)
 80103c8:	4a3d      	ldr	r2, [pc, #244]	; (80104c0 <ai_platform_network_post_init+0x14c>)
 80103ca:	6019      	str	r1, [r3, #0]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d0ef      	beq.n	80103b2 <ai_platform_network_post_init+0x3e>
 80103d2:	e7fe      	b.n	80103d2 <ai_platform_network_post_init+0x5e>
 80103d4:	4a34      	ldr	r2, [pc, #208]	; (80104a8 <ai_platform_network_post_init+0x134>)
 80103d6:	4935      	ldr	r1, [pc, #212]	; (80104ac <ai_platform_network_post_init+0x138>)
 80103d8:	6813      	ldr	r3, [r2, #0]
 80103da:	f023 0301 	bic.w	r3, r3, #1
 80103de:	6013      	str	r3, [r2, #0]
 80103e0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80103e4:	680b      	ldr	r3, [r1, #0]
 80103e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103ea:	189a      	adds	r2, r3, r2
 80103ec:	2a01      	cmp	r2, #1
 80103ee:	d94a      	bls.n	8010486 <ai_platform_network_post_init+0x112>
 80103f0:	f240 4249 	movw	r2, #1097	; 0x449
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d046      	beq.n	8010486 <ai_platform_network_post_init+0x112>
 80103f8:	4b2d      	ldr	r3, [pc, #180]	; (80104b0 <ai_platform_network_post_init+0x13c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010400:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010404:	d030      	beq.n	8010468 <ai_platform_network_post_init+0xf4>
 8010406:	68c3      	ldr	r3, [r0, #12]
 8010408:	4604      	mov	r4, r0
 801040a:	f013 0502 	ands.w	r5, r3, #2
 801040e:	d024      	beq.n	801045a <ai_platform_network_post_init+0xe6>
 8010410:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010412:	b18b      	cbz	r3, 8010438 <ai_platform_network_post_init+0xc4>
 8010414:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8010416:	b90d      	cbnz	r5, 801041c <ai_platform_network_post_init+0xa8>
 8010418:	e00e      	b.n	8010438 <ai_platform_network_post_init+0xc4>
 801041a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801041c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801041e:	4629      	mov	r1, r5
 8010420:	2000      	movs	r0, #0
 8010422:	4798      	blx	r3
 8010424:	68ea      	ldr	r2, [r5, #12]
 8010426:	1b53      	subs	r3, r2, r5
 8010428:	4615      	mov	r5, r2
 801042a:	bf18      	it	ne
 801042c:	2301      	movne	r3, #1
 801042e:	2a00      	cmp	r2, #0
 8010430:	bf08      	it	eq
 8010432:	2300      	moveq	r3, #0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d1f0      	bne.n	801041a <ai_platform_network_post_init+0xa6>
 8010438:	2001      	movs	r0, #1
 801043a:	bd38      	pop	{r3, r4, r5, pc}
 801043c:	4b21      	ldr	r3, [pc, #132]	; (80104c4 <ai_platform_network_post_init+0x150>)
 801043e:	2201      	movs	r2, #1
 8010440:	4619      	mov	r1, r3
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	680b      	ldr	r3, [r1, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1fc      	bne.n	8010444 <ai_platform_network_post_init+0xd0>
 801044a:	4b1f      	ldr	r3, [pc, #124]	; (80104c8 <ai_platform_network_post_init+0x154>)
 801044c:	491b      	ldr	r1, [pc, #108]	; (80104bc <ai_platform_network_post_init+0x148>)
 801044e:	4a1c      	ldr	r2, [pc, #112]	; (80104c0 <ai_platform_network_post_init+0x14c>)
 8010450:	6019      	str	r1, [r3, #0]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4293      	cmp	r3, r2
 8010456:	d0ac      	beq.n	80103b2 <ai_platform_network_post_init+0x3e>
 8010458:	e7fe      	b.n	8010458 <ai_platform_network_post_init+0xe4>
 801045a:	2210      	movs	r2, #16
 801045c:	2111      	movs	r1, #17
 801045e:	3010      	adds	r0, #16
 8010460:	f000 fae6 	bl	8010a30 <core_set_error>
 8010464:	4628      	mov	r0, r5
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	4b16      	ldr	r3, [pc, #88]	; (80104c4 <ai_platform_network_post_init+0x150>)
 801046a:	2201      	movs	r2, #1
 801046c:	4619      	mov	r1, r3
 801046e:	601a      	str	r2, [r3, #0]
 8010470:	680b      	ldr	r3, [r1, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1fc      	bne.n	8010470 <ai_platform_network_post_init+0xfc>
 8010476:	4b14      	ldr	r3, [pc, #80]	; (80104c8 <ai_platform_network_post_init+0x154>)
 8010478:	4910      	ldr	r1, [pc, #64]	; (80104bc <ai_platform_network_post_init+0x148>)
 801047a:	4a11      	ldr	r2, [pc, #68]	; (80104c0 <ai_platform_network_post_init+0x14c>)
 801047c:	6019      	str	r1, [r3, #0]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4293      	cmp	r3, r2
 8010482:	d0c0      	beq.n	8010406 <ai_platform_network_post_init+0x92>
 8010484:	e7fe      	b.n	8010484 <ai_platform_network_post_init+0x110>
 8010486:	4b0b      	ldr	r3, [pc, #44]	; (80104b4 <ai_platform_network_post_init+0x140>)
 8010488:	2201      	movs	r2, #1
 801048a:	4619      	mov	r1, r3
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	680b      	ldr	r3, [r1, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d1fc      	bne.n	801048e <ai_platform_network_post_init+0x11a>
 8010494:	4b08      	ldr	r3, [pc, #32]	; (80104b8 <ai_platform_network_post_init+0x144>)
 8010496:	4909      	ldr	r1, [pc, #36]	; (80104bc <ai_platform_network_post_init+0x148>)
 8010498:	4a09      	ldr	r2, [pc, #36]	; (80104c0 <ai_platform_network_post_init+0x14c>)
 801049a:	6019      	str	r1, [r3, #0]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4293      	cmp	r3, r2
 80104a0:	d0b1      	beq.n	8010406 <ai_platform_network_post_init+0x92>
 80104a2:	e7fe      	b.n	80104a2 <ai_platform_network_post_init+0x12e>
 80104a4:	a1c00100 	.word	0xa1c00100
 80104a8:	e0002000 	.word	0xe0002000
 80104ac:	e0042000 	.word	0xe0042000
 80104b0:	5c001000 	.word	0x5c001000
 80104b4:	40023008 	.word	0x40023008
 80104b8:	40023000 	.word	0x40023000
 80104bc:	f407a5c2 	.word	0xf407a5c2
 80104c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80104c4:	58024c08 	.word	0x58024c08
 80104c8:	58024c00 	.word	0x58024c00

080104cc <ai_platform_network_process>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	4692      	mov	sl, r2
 80104d2:	b083      	sub	sp, #12
 80104d4:	4604      	mov	r4, r0
 80104d6:	b120      	cbz	r0, 80104e2 <ai_platform_network_process+0x16>
 80104d8:	4b86      	ldr	r3, [pc, #536]	; (80106f4 <ai_platform_network_process+0x228>)
 80104da:	6802      	ldr	r2, [r0, #0]
 80104dc:	429a      	cmp	r2, r3
 80104de:	bf18      	it	ne
 80104e0:	2400      	movne	r4, #0
 80104e2:	4a85      	ldr	r2, [pc, #532]	; (80106f8 <ai_platform_network_process+0x22c>)
 80104e4:	4885      	ldr	r0, [pc, #532]	; (80106fc <ai_platform_network_process+0x230>)
 80104e6:	6813      	ldr	r3, [r2, #0]
 80104e8:	f023 0301 	bic.w	r3, r3, #1
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	6803      	ldr	r3, [r0, #0]
 80104f0:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 80104f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104f8:	181a      	adds	r2, r3, r0
 80104fa:	2a01      	cmp	r2, #1
 80104fc:	f240 80c6 	bls.w	801068c <ai_platform_network_process+0x1c0>
 8010500:	f240 4249 	movw	r2, #1097	; 0x449
 8010504:	4293      	cmp	r3, r2
 8010506:	f000 80c1 	beq.w	801068c <ai_platform_network_process+0x1c0>
 801050a:	4b7d      	ldr	r3, [pc, #500]	; (8010700 <ai_platform_network_process+0x234>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010512:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010516:	f000 80a9 	beq.w	801066c <ai_platform_network_process+0x1a0>
 801051a:	2c00      	cmp	r4, #0
 801051c:	f000 80db 	beq.w	80106d6 <ai_platform_network_process+0x20a>
 8010520:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010524:	68e0      	ldr	r0, [r4, #12]
 8010526:	461a      	mov	r2, r3
 8010528:	f000 0003 	and.w	r0, r0, #3
 801052c:	2b00      	cmp	r3, #0
 801052e:	f000 80bd 	beq.w	80106ac <ai_platform_network_process+0x1e0>
 8010532:	2600      	movs	r6, #0
 8010534:	2803      	cmp	r0, #3
 8010536:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010538:	6166      	str	r6, [r4, #20]
 801053a:	f040 80c6 	bne.w	80106ca <ai_platform_network_process+0x1fe>
 801053e:	2900      	cmp	r1, #0
 8010540:	f000 80b7 	beq.w	80106b2 <ai_platform_network_process+0x1e6>
 8010544:	fab5 f085 	clz	r0, r5
 8010548:	0940      	lsrs	r0, r0, #5
 801054a:	2800      	cmp	r0, #0
 801054c:	f040 80b1 	bne.w	80106b2 <ai_platform_network_process+0x1e6>
 8010550:	882e      	ldrh	r6, [r5, #0]
 8010552:	2e00      	cmp	r6, #0
 8010554:	f000 80ad 	beq.w	80106b2 <ai_platform_network_process+0x1e6>
 8010558:	888f      	ldrh	r7, [r1, #4]
 801055a:	686e      	ldr	r6, [r5, #4]
 801055c:	9701      	str	r7, [sp, #4]
 801055e:	2e00      	cmp	r6, #0
 8010560:	f000 825f 	beq.w	8010a22 <ai_platform_network_process+0x556>
 8010564:	6836      	ldr	r6, [r6, #0]
 8010566:	2e00      	cmp	r6, #0
 8010568:	f000 825b 	beq.w	8010a22 <ai_platform_network_process+0x556>
 801056c:	68ab      	ldr	r3, [r5, #8]
 801056e:	f8d3 9000 	ldr.w	r9, [r3]
 8010572:	f1b9 0f00 	cmp.w	r9, #0
 8010576:	f000 809c 	beq.w	80106b2 <ai_platform_network_process+0x1e6>
 801057a:	460f      	mov	r7, r1
 801057c:	4680      	mov	r8, r0
 801057e:	e05e      	b.n	801063e <ai_platform_network_process+0x172>
 8010580:	68f3      	ldr	r3, [r6, #12]
 8010582:	68da      	ldr	r2, [r3, #12]
 8010584:	455a      	cmp	r2, fp
 8010586:	d168      	bne.n	801065a <ai_platform_network_process+0x18e>
 8010588:	689a      	ldr	r2, [r3, #8]
 801058a:	4572      	cmp	r2, lr
 801058c:	d165      	bne.n	801065a <ai_platform_network_process+0x18e>
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	459c      	cmp	ip, r3
 8010592:	d162      	bne.n	801065a <ai_platform_network_process+0x18e>
 8010594:	6800      	ldr	r0, [r0, #0]
 8010596:	f002 fc8d 	bl	8012eb4 <ai_array_get_byte_size>
 801059a:	68f2      	ldr	r2, [r6, #12]
 801059c:	6973      	ldr	r3, [r6, #20]
 801059e:	68d2      	ldr	r2, [r2, #12]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	fb03 f302 	mul.w	r3, r3, r2
 80105a6:	4298      	cmp	r0, r3
 80105a8:	d357      	bcc.n	801065a <ai_platform_network_process+0x18e>
 80105aa:	69b3      	ldr	r3, [r6, #24]
 80105ac:	6818      	ldr	r0, [r3, #0]
 80105ae:	f002 fc35 	bl	8012e1c <ai_array_to_buffer_fmt>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	4043      	eors	r3, r0
 80105b6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80105ba:	f040 8229 	bne.w	8010a10 <ai_platform_network_process+0x544>
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f000 821d 	beq.w	8010a00 <ai_platform_network_process+0x534>
 80105c6:	88bb      	ldrh	r3, [r7, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 808a 	beq.w	80106e2 <ai_platform_network_process+0x216>
 80105ce:	9a01      	ldr	r2, [sp, #4]
 80105d0:	68f1      	ldr	r1, [r6, #12]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	68c9      	ldr	r1, [r1, #12]
 80105d6:	bf38      	it	cc
 80105d8:	461a      	movcc	r2, r3
 80105da:	9201      	str	r2, [sp, #4]
 80105dc:	6972      	ldr	r2, [r6, #20]
 80105de:	68d3      	ldr	r3, [r2, #12]
 80105e0:	fb03 f301 	mul.w	r3, r3, r1
 80105e4:	f8c9 3008 	str.w	r3, [r9, #8]
 80105e8:	88ba      	ldrh	r2, [r7, #4]
 80105ea:	fb03 f302 	mul.w	r3, r3, r2
 80105ee:	f8c9 300c 	str.w	r3, [r9, #12]
 80105f2:	6939      	ldr	r1, [r7, #16]
 80105f4:	f8c9 1004 	str.w	r1, [r9, #4]
 80105f8:	693a      	ldr	r2, [r7, #16]
 80105fa:	4413      	add	r3, r2
 80105fc:	f8c9 3000 	str.w	r3, [r9]
 8010600:	69b0      	ldr	r0, [r6, #24]
 8010602:	6803      	ldr	r3, [r0, #0]
 8010604:	009a      	lsls	r2, r3, #2
 8010606:	d408      	bmi.n	801061a <ai_platform_network_process+0x14e>
 8010608:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801060c:	1a9b      	subs	r3, r3, r2
 801060e:	4419      	add	r1, r3
 8010610:	6081      	str	r1, [r0, #8]
 8010612:	69b3      	ldr	r3, [r6, #24]
 8010614:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010618:	60da      	str	r2, [r3, #12]
 801061a:	f108 0801 	add.w	r8, r8, #1
 801061e:	882b      	ldrh	r3, [r5, #0]
 8010620:	4598      	cmp	r8, r3
 8010622:	d27b      	bcs.n	801071c <ai_platform_network_process+0x250>
 8010624:	686b      	ldr	r3, [r5, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d078      	beq.n	801071c <ai_platform_network_process+0x250>
 801062a:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 801062e:	2e00      	cmp	r6, #0
 8010630:	d074      	beq.n	801071c <ai_platform_network_process+0x250>
 8010632:	68ab      	ldr	r3, [r5, #8]
 8010634:	3718      	adds	r7, #24
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 801063c:	d039      	beq.n	80106b2 <ai_platform_network_process+0x1e6>
 801063e:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8010642:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8010646:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 801064a:	fb0b f30e 	mul.w	r3, fp, lr
 801064e:	69b0      	ldr	r0, [r6, #24]
 8010650:	fb0c f303 	mul.w	r3, ip, r3
 8010654:	6841      	ldr	r1, [r0, #4]
 8010656:	4299      	cmp	r1, r3
 8010658:	d292      	bcs.n	8010580 <ai_platform_network_process+0xb4>
 801065a:	f104 0010 	add.w	r0, r4, #16
 801065e:	2218      	movs	r2, #24
 8010660:	2112      	movs	r1, #18
 8010662:	f04f 0b00 	mov.w	fp, #0
 8010666:	f000 f9e3 	bl	8010a30 <core_set_error>
 801066a:	e02a      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 801066c:	4b25      	ldr	r3, [pc, #148]	; (8010704 <ai_platform_network_process+0x238>)
 801066e:	2201      	movs	r2, #1
 8010670:	4618      	mov	r0, r3
 8010672:	601a      	str	r2, [r3, #0]
 8010674:	6803      	ldr	r3, [r0, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1fc      	bne.n	8010674 <ai_platform_network_process+0x1a8>
 801067a:	4b23      	ldr	r3, [pc, #140]	; (8010708 <ai_platform_network_process+0x23c>)
 801067c:	4823      	ldr	r0, [pc, #140]	; (801070c <ai_platform_network_process+0x240>)
 801067e:	4a24      	ldr	r2, [pc, #144]	; (8010710 <ai_platform_network_process+0x244>)
 8010680:	6018      	str	r0, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4293      	cmp	r3, r2
 8010686:	f43f af48 	beq.w	801051a <ai_platform_network_process+0x4e>
 801068a:	e7fe      	b.n	801068a <ai_platform_network_process+0x1be>
 801068c:	4b21      	ldr	r3, [pc, #132]	; (8010714 <ai_platform_network_process+0x248>)
 801068e:	2201      	movs	r2, #1
 8010690:	4618      	mov	r0, r3
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	6803      	ldr	r3, [r0, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1fc      	bne.n	8010694 <ai_platform_network_process+0x1c8>
 801069a:	4b1f      	ldr	r3, [pc, #124]	; (8010718 <ai_platform_network_process+0x24c>)
 801069c:	481b      	ldr	r0, [pc, #108]	; (801070c <ai_platform_network_process+0x240>)
 801069e:	4a1c      	ldr	r2, [pc, #112]	; (8010710 <ai_platform_network_process+0x244>)
 80106a0:	6018      	str	r0, [r3, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4293      	cmp	r3, r2
 80106a6:	f43f af38 	beq.w	801051a <ai_platform_network_process+0x4e>
 80106aa:	e7fe      	b.n	80106aa <ai_platform_network_process+0x1de>
 80106ac:	2803      	cmp	r0, #3
 80106ae:	6163      	str	r3, [r4, #20]
 80106b0:	d10b      	bne.n	80106ca <ai_platform_network_process+0x1fe>
 80106b2:	f04f 0b00 	mov.w	fp, #0
 80106b6:	f104 0010 	add.w	r0, r4, #16
 80106ba:	2217      	movs	r2, #23
 80106bc:	2112      	movs	r1, #18
 80106be:	f000 f9b7 	bl	8010a30 <core_set_error>
 80106c2:	4658      	mov	r0, fp
 80106c4:	b003      	add	sp, #12
 80106c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ca:	f104 0010 	add.w	r0, r4, #16
 80106ce:	2230      	movs	r2, #48	; 0x30
 80106d0:	2111      	movs	r1, #17
 80106d2:	f000 f9ad 	bl	8010a30 <core_set_error>
 80106d6:	f04f 0b00 	mov.w	fp, #0
 80106da:	4658      	mov	r0, fp
 80106dc:	b003      	add	sp, #12
 80106de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e2:	f104 0010 	add.w	r0, r4, #16
 80106e6:	2221      	movs	r2, #33	; 0x21
 80106e8:	2112      	movs	r1, #18
 80106ea:	469b      	mov	fp, r3
 80106ec:	f000 f9a0 	bl	8010a30 <core_set_error>
 80106f0:	e7e7      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 80106f2:	bf00      	nop
 80106f4:	a1c00100 	.word	0xa1c00100
 80106f8:	e0002000 	.word	0xe0002000
 80106fc:	e0042000 	.word	0xe0042000
 8010700:	5c001000 	.word	0x5c001000
 8010704:	58024c08 	.word	0x58024c08
 8010708:	58024c00 	.word	0x58024c00
 801070c:	f407a5c2 	.word	0xf407a5c2
 8010710:	b5e8b5cd 	.word	0xb5e8b5cd
 8010714:	40023008 	.word	0x40023008
 8010718:	40023000 	.word	0x40023000
 801071c:	f1ba 0f00 	cmp.w	sl, #0
 8010720:	f000 808c 	beq.w	801083c <ai_platform_network_process+0x370>
 8010724:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010728:	2b01      	cmp	r3, #1
 801072a:	f240 813b 	bls.w	80109a4 <ai_platform_network_process+0x4d8>
 801072e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010730:	f115 0f0c 	cmn.w	r5, #12
 8010734:	f000 8136 	beq.w	80109a4 <ai_platform_network_process+0x4d8>
 8010738:	89ab      	ldrh	r3, [r5, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 8132 	beq.w	80109a4 <ai_platform_network_process+0x4d8>
 8010740:	4656      	mov	r6, sl
 8010742:	f04f 0900 	mov.w	r9, #0
 8010746:	9400      	str	r4, [sp, #0]
 8010748:	4599      	cmp	r9, r3
 801074a:	d274      	bcs.n	8010836 <ai_platform_network_process+0x36a>
 801074c:	692b      	ldr	r3, [r5, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d071      	beq.n	8010836 <ai_platform_network_process+0x36a>
 8010752:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8010756:	2f00      	cmp	r7, #0
 8010758:	d06d      	beq.n	8010836 <ai_platform_network_process+0x36a>
 801075a:	696b      	ldr	r3, [r5, #20]
 801075c:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8010760:	f8d3 8000 	ldr.w	r8, [r3]
 8010764:	eb18 0a04 	adds.w	sl, r8, r4
 8010768:	f000 8125 	beq.w	80109b6 <ai_platform_network_process+0x4ea>
 801076c:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 8010770:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8010774:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8010778:	fb0b f30e 	mul.w	r3, fp, lr
 801077c:	69b8      	ldr	r0, [r7, #24]
 801077e:	fb0c f303 	mul.w	r3, ip, r3
 8010782:	6841      	ldr	r1, [r0, #4]
 8010784:	4299      	cmp	r1, r3
 8010786:	f0c0 810c 	bcc.w	80109a2 <ai_platform_network_process+0x4d6>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	455a      	cmp	r2, fp
 8010790:	f040 8107 	bne.w	80109a2 <ai_platform_network_process+0x4d6>
 8010794:	689a      	ldr	r2, [r3, #8]
 8010796:	4572      	cmp	r2, lr
 8010798:	f040 8103 	bne.w	80109a2 <ai_platform_network_process+0x4d6>
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	459c      	cmp	ip, r3
 80107a0:	f040 80ff 	bne.w	80109a2 <ai_platform_network_process+0x4d6>
 80107a4:	6800      	ldr	r0, [r0, #0]
 80107a6:	f002 fb85 	bl	8012eb4 <ai_array_get_byte_size>
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	68d2      	ldr	r2, [r2, #12]
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	fb03 f302 	mul.w	r3, r3, r2
 80107b6:	4298      	cmp	r0, r3
 80107b8:	f0c0 80f3 	bcc.w	80109a2 <ai_platform_network_process+0x4d6>
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	6818      	ldr	r0, [r3, #0]
 80107c0:	f002 fb2c 	bl	8012e1c <ai_array_to_buffer_fmt>
 80107c4:	6833      	ldr	r3, [r6, #0]
 80107c6:	4043      	eors	r3, r0
 80107c8:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80107cc:	f040 810e 	bne.w	80109ec <ai_platform_network_process+0x520>
 80107d0:	6933      	ldr	r3, [r6, #16]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 8101 	beq.w	80109da <ai_platform_network_process+0x50e>
 80107d8:	88b3      	ldrh	r3, [r6, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 80f4 	beq.w	80109c8 <ai_platform_network_process+0x4fc>
 80107e0:	9a01      	ldr	r2, [sp, #4]
 80107e2:	68f9      	ldr	r1, [r7, #12]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	68c9      	ldr	r1, [r1, #12]
 80107e8:	bf38      	it	cc
 80107ea:	461a      	movcc	r2, r3
 80107ec:	9201      	str	r2, [sp, #4]
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	68d3      	ldr	r3, [r2, #12]
 80107f2:	fb03 f301 	mul.w	r3, r3, r1
 80107f6:	f8ca 3008 	str.w	r3, [sl, #8]
 80107fa:	88b2      	ldrh	r2, [r6, #4]
 80107fc:	fb03 f302 	mul.w	r3, r3, r2
 8010800:	f8ca 300c 	str.w	r3, [sl, #12]
 8010804:	6931      	ldr	r1, [r6, #16]
 8010806:	f8ca 1004 	str.w	r1, [sl, #4]
 801080a:	6932      	ldr	r2, [r6, #16]
 801080c:	4413      	add	r3, r2
 801080e:	f848 3004 	str.w	r3, [r8, r4]
 8010812:	69b8      	ldr	r0, [r7, #24]
 8010814:	6803      	ldr	r3, [r0, #0]
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	d408      	bmi.n	801082c <ai_platform_network_process+0x360>
 801081a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	4419      	add	r1, r3
 8010822:	6081      	str	r1, [r0, #8]
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	f8da 2004 	ldr.w	r2, [sl, #4]
 801082a:	60da      	str	r2, [r3, #12]
 801082c:	f109 0901 	add.w	r9, r9, #1
 8010830:	3618      	adds	r6, #24
 8010832:	89ab      	ldrh	r3, [r5, #12]
 8010834:	e788      	b.n	8010748 <ai_platform_network_process+0x27c>
 8010836:	e9dd 4300 	ldrd	r4, r3, [sp]
 801083a:	82a3      	strh	r3, [r4, #20]
 801083c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010840:	2a00      	cmp	r2, #0
 8010842:	f000 80a9 	beq.w	8010998 <ai_platform_network_process+0x4cc>
 8010846:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010848:	2a01      	cmp	r2, #1
 801084a:	f240 80a8 	bls.w	801099e <ai_platform_network_process+0x4d2>
 801084e:	f105 060c 	add.w	r6, r5, #12
 8010852:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8010856:	8aa3      	ldrh	r3, [r4, #20]
 8010858:	455b      	cmp	r3, fp
 801085a:	f67f af32 	bls.w	80106c2 <ai_platform_network_process+0x1f6>
 801085e:	9400      	str	r4, [sp, #0]
 8010860:	2d00      	cmp	r5, #0
 8010862:	d037      	beq.n	80108d4 <ai_platform_network_process+0x408>
 8010864:	882b      	ldrh	r3, [r5, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d034      	beq.n	80108d4 <ai_platform_network_process+0x408>
 801086a:	686b      	ldr	r3, [r5, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d031      	beq.n	80108d4 <ai_platform_network_process+0x408>
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d02e      	beq.n	80108d4 <ai_platform_network_process+0x408>
 8010876:	f04f 0800 	mov.w	r8, #0
 801087a:	e01a      	b.n	80108b2 <ai_platform_network_process+0x3e6>
 801087c:	68d4      	ldr	r4, [r2, #12]
 801087e:	1b00      	subs	r0, r0, r4
 8010880:	4401      	add	r1, r0
 8010882:	6091      	str	r1, [r2, #8]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	699b      	ldr	r3, [r3, #24]
 8010888:	60da      	str	r2, [r3, #12]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f108 0801 	add.w	r8, r8, #1
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010896:	440b      	add	r3, r1
 8010898:	4293      	cmp	r3, r2
 801089a:	d301      	bcc.n	80108a0 <ai_platform_network_process+0x3d4>
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	607b      	str	r3, [r7, #4]
 80108a2:	882b      	ldrh	r3, [r5, #0]
 80108a4:	4598      	cmp	r8, r3
 80108a6:	d215      	bcs.n	80108d4 <ai_platform_network_process+0x408>
 80108a8:	686b      	ldr	r3, [r5, #4]
 80108aa:	b19b      	cbz	r3, 80108d4 <ai_platform_network_process+0x408>
 80108ac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80108b0:	b183      	cbz	r3, 80108d4 <ai_platform_network_process+0x408>
 80108b2:	68a9      	ldr	r1, [r5, #8]
 80108b4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80108b8:	699a      	ldr	r2, [r3, #24]
 80108ba:	f8d1 a000 	ldr.w	sl, [r1]
 80108be:	6814      	ldr	r4, [r2, #0]
 80108c0:	eb0a 0709 	add.w	r7, sl, r9
 80108c4:	6890      	ldr	r0, [r2, #8]
 80108c6:	00a4      	lsls	r4, r4, #2
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	d5d7      	bpl.n	801087c <ai_platform_network_process+0x3b0>
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	f002 fb53 	bl	8012f78 <memcpy>
 80108d2:	e7da      	b.n	801088a <ai_platform_network_process+0x3be>
 80108d4:	9800      	ldr	r0, [sp, #0]
 80108d6:	f002 fa67 	bl	8012da8 <ai_layers_forward_all>
 80108da:	2e00      	cmp	r6, #0
 80108dc:	d04a      	beq.n	8010974 <ai_platform_network_process+0x4a8>
 80108de:	8833      	ldrh	r3, [r6, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d047      	beq.n	8010974 <ai_platform_network_process+0x4a8>
 80108e4:	6873      	ldr	r3, [r6, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d044      	beq.n	8010974 <ai_platform_network_process+0x4a8>
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d041      	beq.n	8010974 <ai_platform_network_process+0x4a8>
 80108f0:	f04f 0800 	mov.w	r8, #0
 80108f4:	e019      	b.n	801092a <ai_platform_network_process+0x45e>
 80108f6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80108fa:	4291      	cmp	r1, r2
 80108fc:	d301      	bcc.n	8010902 <ai_platform_network_process+0x436>
 80108fe:	68f9      	ldr	r1, [r7, #12]
 8010900:	1a51      	subs	r1, r2, r1
 8010902:	6079      	str	r1, [r7, #4]
 8010904:	f108 0801 	add.w	r8, r8, #1
 8010908:	6998      	ldr	r0, [r3, #24]
 801090a:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 801090e:	1b12      	subs	r2, r2, r4
 8010910:	440a      	add	r2, r1
 8010912:	6082      	str	r2, [r0, #8]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	60da      	str	r2, [r3, #12]
 801091a:	8833      	ldrh	r3, [r6, #0]
 801091c:	4598      	cmp	r8, r3
 801091e:	d229      	bcs.n	8010974 <ai_platform_network_process+0x4a8>
 8010920:	6873      	ldr	r3, [r6, #4]
 8010922:	b33b      	cbz	r3, 8010974 <ai_platform_network_process+0x4a8>
 8010924:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010928:	b323      	cbz	r3, 8010974 <ai_platform_network_process+0x4a8>
 801092a:	68b2      	ldr	r2, [r6, #8]
 801092c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010930:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8010934:	f8d2 a000 	ldr.w	sl, [r2]
 8010938:	f8de 1000 	ldr.w	r1, [lr]
 801093c:	eb0a 0709 	add.w	r7, sl, r9
 8010940:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8010944:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8010948:	eb00 0102 	add.w	r1, r0, r2
 801094c:	d0d3      	beq.n	80108f6 <ai_platform_network_process+0x42a>
 801094e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8010952:	f002 fb11 	bl	8012f78 <memcpy>
 8010956:	f85a 2009 	ldr.w	r2, [sl, r9]
 801095a:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 801095e:	440b      	add	r3, r1
 8010960:	4293      	cmp	r3, r2
 8010962:	d301      	bcc.n	8010968 <ai_platform_network_process+0x49c>
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	607b      	str	r3, [r7, #4]
 801096a:	f108 0801 	add.w	r8, r8, #1
 801096e:	8833      	ldrh	r3, [r6, #0]
 8010970:	4598      	cmp	r8, r3
 8010972:	d3d5      	bcc.n	8010920 <ai_platform_network_process+0x454>
 8010974:	9b00      	ldr	r3, [sp, #0]
 8010976:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 801097a:	461a      	mov	r2, r3
 801097c:	8a9b      	ldrh	r3, [r3, #20]
 801097e:	f10b 0b01 	add.w	fp, fp, #1
 8010982:	fa1f fb8b 	uxth.w	fp, fp
 8010986:	455b      	cmp	r3, fp
 8010988:	f8a2 b016 	strh.w	fp, [r2, #22]
 801098c:	f63f af68 	bhi.w	8010860 <ai_platform_network_process+0x394>
 8010990:	4658      	mov	r0, fp
 8010992:	b003      	add	sp, #12
 8010994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010998:	4615      	mov	r5, r2
 801099a:	4616      	mov	r6, r2
 801099c:	e759      	b.n	8010852 <ai_platform_network_process+0x386>
 801099e:	2600      	movs	r6, #0
 80109a0:	e757      	b.n	8010852 <ai_platform_network_process+0x386>
 80109a2:	9c00      	ldr	r4, [sp, #0]
 80109a4:	f104 0010 	add.w	r0, r4, #16
 80109a8:	2218      	movs	r2, #24
 80109aa:	2113      	movs	r1, #19
 80109ac:	f04f 0b00 	mov.w	fp, #0
 80109b0:	f000 f83e 	bl	8010a30 <core_set_error>
 80109b4:	e685      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 80109b6:	9c00      	ldr	r4, [sp, #0]
 80109b8:	2217      	movs	r2, #23
 80109ba:	2113      	movs	r1, #19
 80109bc:	46d3      	mov	fp, sl
 80109be:	f104 0010 	add.w	r0, r4, #16
 80109c2:	f000 f835 	bl	8010a30 <core_set_error>
 80109c6:	e67c      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 80109c8:	9c00      	ldr	r4, [sp, #0]
 80109ca:	2221      	movs	r2, #33	; 0x21
 80109cc:	2113      	movs	r1, #19
 80109ce:	469b      	mov	fp, r3
 80109d0:	f104 0010 	add.w	r0, r4, #16
 80109d4:	f000 f82c 	bl	8010a30 <core_set_error>
 80109d8:	e673      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 80109da:	9c00      	ldr	r4, [sp, #0]
 80109dc:	2217      	movs	r2, #23
 80109de:	2113      	movs	r1, #19
 80109e0:	469b      	mov	fp, r3
 80109e2:	f104 0010 	add.w	r0, r4, #16
 80109e6:	f000 f823 	bl	8010a30 <core_set_error>
 80109ea:	e66a      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 80109ec:	9c00      	ldr	r4, [sp, #0]
 80109ee:	2219      	movs	r2, #25
 80109f0:	2113      	movs	r1, #19
 80109f2:	f04f 0b00 	mov.w	fp, #0
 80109f6:	f104 0010 	add.w	r0, r4, #16
 80109fa:	f000 f819 	bl	8010a30 <core_set_error>
 80109fe:	e660      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 8010a00:	f104 0010 	add.w	r0, r4, #16
 8010a04:	2217      	movs	r2, #23
 8010a06:	2112      	movs	r1, #18
 8010a08:	469b      	mov	fp, r3
 8010a0a:	f000 f811 	bl	8010a30 <core_set_error>
 8010a0e:	e658      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 8010a10:	f104 0010 	add.w	r0, r4, #16
 8010a14:	2219      	movs	r2, #25
 8010a16:	2112      	movs	r1, #18
 8010a18:	f04f 0b00 	mov.w	fp, #0
 8010a1c:	f000 f808 	bl	8010a30 <core_set_error>
 8010a20:	e64f      	b.n	80106c2 <ai_platform_network_process+0x1f6>
 8010a22:	f1ba 0f00 	cmp.w	sl, #0
 8010a26:	f47f ae7f 	bne.w	8010728 <ai_platform_network_process+0x25c>
 8010a2a:	e70d      	b.n	8010848 <ai_platform_network_process+0x37c>

08010a2c <core_init>:
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	4770      	bx	lr

08010a30 <core_set_error>:
 8010a30:	4603      	mov	r3, r0
 8010a32:	7800      	ldrb	r0, [r0, #0]
 8010a34:	b930      	cbnz	r0, 8010a44 <core_set_error+0x14>
 8010a36:	7019      	strb	r1, [r3, #0]
 8010a38:	2001      	movs	r0, #1
 8010a3a:	6819      	ldr	r1, [r3, #0]
 8010a3c:	f362 211f 	bfi	r1, r2, #8, #24
 8010a40:	6019      	str	r1, [r3, #0]
 8010a42:	4770      	bx	lr
 8010a44:	2000      	movs	r0, #0
 8010a46:	4770      	bx	lr

08010a48 <func_dummy>:
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop

08010a4c <ai_dict8_dot_array_f32>:
 8010a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a50:	9d06      	ldr	r5, [sp, #24]
 8010a52:	4c88      	ldr	r4, [pc, #544]	; (8010c74 <ai_dict8_dot_array_f32+0x228>)
 8010a54:	2d07      	cmp	r5, #7
 8010a56:	442c      	add	r4, r5
 8010a58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a5c:	f104 0620 	add.w	r6, r4, #32
 8010a60:	d817      	bhi.n	8010a92 <ai_dict8_dot_array_f32+0x46>
 8010a62:	42b3      	cmp	r3, r6
 8010a64:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010c78 <ai_dict8_dot_array_f32+0x22c>
 8010a68:	d20b      	bcs.n	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a6e:	ecf3 7a01 	vldmia	r3!, {s15}
 8010a72:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010a76:	42b3      	cmp	r3, r6
 8010a78:	edd4 6a00 	vldr	s13, [r4]
 8010a7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a80:	d3f3      	bcc.n	8010a6a <ai_dict8_dot_array_f32+0x1e>
 8010a82:	edd0 7a00 	vldr	s15, [r0]
 8010a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a8a:	ed80 7a00 	vstr	s14, [r0]
 8010a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a92:	f001 0503 	and.w	r5, r1, #3
 8010a96:	2d02      	cmp	r5, #2
 8010a98:	f000 80f0 	beq.w	8010c7c <ai_dict8_dot_array_f32+0x230>
 8010a9c:	2d03      	cmp	r5, #3
 8010a9e:	f000 81ff 	beq.w	8010ea0 <ai_dict8_dot_array_f32+0x454>
 8010aa2:	2d01      	cmp	r5, #1
 8010aa4:	f000 81f0 	beq.w	8010e88 <ai_dict8_dot_array_f32+0x43c>
 8010aa8:	42a3      	cmp	r3, r4
 8010aaa:	f200 81fc 	bhi.w	8010ea6 <ai_dict8_dot_array_f32+0x45a>
 8010aae:	1ae4      	subs	r4, r4, r3
 8010ab0:	f101 0810 	add.w	r8, r1, #16
 8010ab4:	f101 0508 	add.w	r5, r1, #8
 8010ab8:	f103 0720 	add.w	r7, r3, #32
 8010abc:	0964      	lsrs	r4, r4, #5
 8010abe:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8010c78 <ai_dict8_dot_array_f32+0x22c>
 8010ac2:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8010ac6:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8010aca:	3508      	adds	r5, #8
 8010acc:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8010ad0:	3720      	adds	r7, #32
 8010ad2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010ad6:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8010ada:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010ade:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8010ae2:	edde 7a00 	vldr	s15, [lr]
 8010ae6:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8010aea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010aee:	eddc 5a00 	vldr	s11, [ip]
 8010af2:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8010af6:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8010afa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010afe:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b02:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8010b06:	ed9c 4a00 	vldr	s8, [ip]
 8010b0a:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8010b0e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b12:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8010b16:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b1a:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8010b1e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010b22:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8010b26:	ed9c 4a00 	vldr	s8, [ip]
 8010b2a:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8010b2e:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8010b32:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b36:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010b3a:	ed9e 5a00 	vldr	s10, [lr]
 8010b3e:	ed9c 4a00 	vldr	s8, [ip]
 8010b42:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8010b46:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8010b4a:	4545      	cmp	r5, r8
 8010b4c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b50:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b54:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010b58:	ed9e 5a00 	vldr	s10, [lr]
 8010b5c:	ed9c 6a00 	vldr	s12, [ip]
 8010b60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010b64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010b68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b70:	d1a9      	bne.n	8010ac6 <ai_dict8_dot_array_f32+0x7a>
 8010b72:	3401      	adds	r4, #1
 8010b74:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010b78:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010b7c:	42b3      	cmp	r3, r6
 8010b7e:	d280      	bcs.n	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010b80:	461c      	mov	r4, r3
 8010b82:	780d      	ldrb	r5, [r1, #0]
 8010b84:	ecf4 6a01 	vldmia	r4!, {s13}
 8010b88:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010b8c:	42a6      	cmp	r6, r4
 8010b8e:	edd5 7a00 	vldr	s15, [r5]
 8010b92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010b96:	f67f af74 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010b9a:	784d      	ldrb	r5, [r1, #1]
 8010b9c:	f103 0408 	add.w	r4, r3, #8
 8010ba0:	edd3 6a01 	vldr	s13, [r3, #4]
 8010ba4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ba8:	42a6      	cmp	r6, r4
 8010baa:	edd5 7a00 	vldr	s15, [r5]
 8010bae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bb2:	f67f af66 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010bb6:	788d      	ldrb	r5, [r1, #2]
 8010bb8:	f103 040c 	add.w	r4, r3, #12
 8010bbc:	edd3 6a02 	vldr	s13, [r3, #8]
 8010bc0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bc4:	42a6      	cmp	r6, r4
 8010bc6:	edd5 7a00 	vldr	s15, [r5]
 8010bca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bce:	f67f af58 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010bd2:	78cd      	ldrb	r5, [r1, #3]
 8010bd4:	f103 0410 	add.w	r4, r3, #16
 8010bd8:	edd3 6a03 	vldr	s13, [r3, #12]
 8010bdc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010be0:	42a6      	cmp	r6, r4
 8010be2:	edd5 7a00 	vldr	s15, [r5]
 8010be6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bea:	f67f af4a 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010bee:	790d      	ldrb	r5, [r1, #4]
 8010bf0:	f103 0414 	add.w	r4, r3, #20
 8010bf4:	edd3 6a04 	vldr	s13, [r3, #16]
 8010bf8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	edd5 7a00 	vldr	s15, [r5]
 8010c02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c06:	f67f af3c 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010c0a:	794d      	ldrb	r5, [r1, #5]
 8010c0c:	f103 0418 	add.w	r4, r3, #24
 8010c10:	edd3 6a05 	vldr	s13, [r3, #20]
 8010c14:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c18:	42a6      	cmp	r6, r4
 8010c1a:	edd5 7a00 	vldr	s15, [r5]
 8010c1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c22:	f67f af2e 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010c26:	798d      	ldrb	r5, [r1, #6]
 8010c28:	f103 041c 	add.w	r4, r3, #28
 8010c2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8010c30:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c34:	42a6      	cmp	r6, r4
 8010c36:	edd5 7a00 	vldr	s15, [r5]
 8010c3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c3e:	f67f af20 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010c42:	79cd      	ldrb	r5, [r1, #7]
 8010c44:	f103 0420 	add.w	r4, r3, #32
 8010c48:	edd3 6a07 	vldr	s13, [r3, #28]
 8010c4c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c50:	42a6      	cmp	r6, r4
 8010c52:	edd5 7a00 	vldr	s15, [r5]
 8010c56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c5a:	f67f af12 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010c5e:	7a09      	ldrb	r1, [r1, #8]
 8010c60:	edd3 7a08 	vldr	s15, [r3, #32]
 8010c64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c68:	edd2 6a00 	vldr	s13, [r2]
 8010c6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c70:	e707      	b.n	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010c72:	bf00      	nop
 8010c74:	3ffffff8 	.word	0x3ffffff8
 8010c78:	00000000 	.word	0x00000000
 8010c7c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8010c78 <ai_dict8_dot_array_f32+0x22c>
 8010c80:	780d      	ldrb	r5, [r1, #0]
 8010c82:	3304      	adds	r3, #4
 8010c84:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010c88:	3101      	adds	r1, #1
 8010c8a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c8e:	edd5 6a00 	vldr	s13, [r5]
 8010c92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c96:	780d      	ldrb	r5, [r1, #0]
 8010c98:	1d1f      	adds	r7, r3, #4
 8010c9a:	edd3 7a00 	vldr	s15, [r3]
 8010c9e:	f101 0c01 	add.w	ip, r1, #1
 8010ca2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ca6:	42bc      	cmp	r4, r7
 8010ca8:	edd5 6a00 	vldr	s13, [r5]
 8010cac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cb0:	d365      	bcc.n	8010d7e <ai_dict8_dot_array_f32+0x332>
 8010cb2:	3324      	adds	r3, #36	; 0x24
 8010cb4:	f101 0e11 	add.w	lr, r1, #17
 8010cb8:	3109      	adds	r1, #9
 8010cba:	eba6 0803 	sub.w	r8, r6, r3
 8010cbe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010cc2:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8010cc6:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010cca:	3108      	adds	r1, #8
 8010ccc:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010cd0:	3320      	adds	r3, #32
 8010cd2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010cd6:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8010cda:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010cde:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8010ce2:	edd5 7a00 	vldr	s15, [r5]
 8010ce6:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8010cea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010cee:	edd4 5a00 	vldr	s11, [r4]
 8010cf2:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8010cf6:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8010cfa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010cfe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d02:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010d06:	ed94 4a00 	vldr	s8, [r4]
 8010d0a:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8010d0e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d12:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8010d16:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d1a:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8010d1e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010d22:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8010d26:	ed94 4a00 	vldr	s8, [r4]
 8010d2a:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8010d2e:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8010d32:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d36:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010d3a:	ed95 5a00 	vldr	s10, [r5]
 8010d3e:	ed94 4a00 	vldr	s8, [r4]
 8010d42:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8010d46:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8010d4a:	458e      	cmp	lr, r1
 8010d4c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d50:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d54:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010d58:	ed95 5a00 	vldr	s10, [r5]
 8010d5c:	ed94 6a00 	vldr	s12, [r4]
 8010d60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010d64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010d68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d70:	d1a9      	bne.n	8010cc6 <ai_dict8_dot_array_f32+0x27a>
 8010d72:	f108 0801 	add.w	r8, r8, #1
 8010d76:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8010d7a:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8010d7e:	42b7      	cmp	r7, r6
 8010d80:	f4bf ae7f 	bcs.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010d84:	463b      	mov	r3, r7
 8010d86:	f89c 1000 	ldrb.w	r1, [ip]
 8010d8a:	ecf3 6a01 	vldmia	r3!, {s13}
 8010d8e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010d92:	429e      	cmp	r6, r3
 8010d94:	edd1 7a00 	vldr	s15, [r1]
 8010d98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d9c:	f67f ae71 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010da0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8010da4:	f107 0308 	add.w	r3, r7, #8
 8010da8:	edd7 6a01 	vldr	s13, [r7, #4]
 8010dac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010db0:	429e      	cmp	r6, r3
 8010db2:	edd1 7a00 	vldr	s15, [r1]
 8010db6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dba:	f67f ae62 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010dbe:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010dc2:	f107 030c 	add.w	r3, r7, #12
 8010dc6:	edd7 6a02 	vldr	s13, [r7, #8]
 8010dca:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010dce:	429e      	cmp	r6, r3
 8010dd0:	edd1 7a00 	vldr	s15, [r1]
 8010dd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dd8:	f67f ae53 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010ddc:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010de0:	f107 0310 	add.w	r3, r7, #16
 8010de4:	edd7 6a03 	vldr	s13, [r7, #12]
 8010de8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010dec:	429e      	cmp	r6, r3
 8010dee:	edd1 7a00 	vldr	s15, [r1]
 8010df2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010df6:	f67f ae44 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010dfa:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010dfe:	f107 0314 	add.w	r3, r7, #20
 8010e02:	edd7 6a04 	vldr	s13, [r7, #16]
 8010e06:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e0a:	429e      	cmp	r6, r3
 8010e0c:	edd1 7a00 	vldr	s15, [r1]
 8010e10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e14:	f67f ae35 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010e18:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010e1c:	f107 0318 	add.w	r3, r7, #24
 8010e20:	edd7 6a05 	vldr	s13, [r7, #20]
 8010e24:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e28:	429e      	cmp	r6, r3
 8010e2a:	edd1 7a00 	vldr	s15, [r1]
 8010e2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e32:	f67f ae26 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010e36:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8010e3a:	f107 031c 	add.w	r3, r7, #28
 8010e3e:	edd7 6a06 	vldr	s13, [r7, #24]
 8010e42:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e46:	429e      	cmp	r6, r3
 8010e48:	edd1 7a00 	vldr	s15, [r1]
 8010e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e50:	f67f ae17 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010e54:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8010e58:	f107 0320 	add.w	r3, r7, #32
 8010e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e60:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e64:	429e      	cmp	r6, r3
 8010e66:	edd1 7a00 	vldr	s15, [r1]
 8010e6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e6e:	f67f ae08 	bls.w	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010e72:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8010e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e7e:	edd2 6a00 	vldr	s13, [r2]
 8010e82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e86:	e5fc      	b.n	8010a82 <ai_dict8_dot_array_f32+0x36>
 8010e88:	780d      	ldrb	r5, [r1, #0]
 8010e8a:	3304      	adds	r3, #4
 8010e8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010e90:	3101      	adds	r1, #1
 8010e92:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010e96:	ed95 7a00 	vldr	s14, [r5]
 8010e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e9e:	e6ef      	b.n	8010c80 <ai_dict8_dot_array_f32+0x234>
 8010ea0:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8010c78 <ai_dict8_dot_array_f32+0x22c>
 8010ea4:	e6f7      	b.n	8010c96 <ai_dict8_dot_array_f32+0x24a>
 8010ea6:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8010c78 <ai_dict8_dot_array_f32+0x22c>
 8010eaa:	e667      	b.n	8010b7c <ai_dict8_dot_array_f32+0x130>

08010eac <ai_dict4_dot_array_f32>:
 8010eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010eb2:	f027 0c01 	bic.w	ip, r7, #1
 8010eb6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8010eba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010ebe:	f000 80ad 	beq.w	801101c <ai_dict4_dot_array_f32+0x170>
 8010ec2:	1d0d      	adds	r5, r1, #4
 8010ec4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8010ec8:	f103 0420 	add.w	r4, r3, #32
 8010ecc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011024 <ai_dict4_dot_array_f32+0x178>
 8010ed0:	eb05 0e09 	add.w	lr, r5, r9
 8010ed4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8010ed8:	3504      	adds	r5, #4
 8010eda:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8010ede:	3420      	adds	r4, #32
 8010ee0:	f006 0a0f 	and.w	sl, r6, #15
 8010ee4:	0936      	lsrs	r6, r6, #4
 8010ee6:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8010eea:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010eee:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8010ef2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ef6:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8010efa:	edda 7a00 	vldr	s15, [sl]
 8010efe:	edd6 5a00 	vldr	s11, [r6]
 8010f02:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010f06:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8010f0a:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8010f0e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8010f12:	f006 060f 	and.w	r6, r6, #15
 8010f16:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010f1a:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8010f1e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f22:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8010f26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f2a:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8010f2e:	ed9a 3a00 	vldr	s6, [sl]
 8010f32:	ed96 5a00 	vldr	s10, [r6]
 8010f36:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8010f3a:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010f3e:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8010f42:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8010f46:	f00a 0a0f 	and.w	sl, sl, #15
 8010f4a:	45ae      	cmp	lr, r5
 8010f4c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8010f50:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f54:	ed9b 3a00 	vldr	s6, [fp]
 8010f58:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8010f5c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010f60:	ed9a 4a00 	vldr	s8, [sl]
 8010f64:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8010f68:	f006 060f 	and.w	r6, r6, #15
 8010f6c:	ed9a 5a00 	vldr	s10, [sl]
 8010f70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f74:	ed96 6a00 	vldr	s12, [r6]
 8010f78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010f7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010f80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010f84:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f8c:	d1a2      	bne.n	8010ed4 <ai_dict4_dot_array_f32+0x28>
 8010f8e:	4449      	add	r1, r9
 8010f90:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8010f94:	459c      	cmp	ip, r3
 8010f96:	d92d      	bls.n	8010ff4 <ai_dict4_dot_array_f32+0x148>
 8010f98:	f10c 0c07 	add.w	ip, ip, #7
 8010f9c:	f103 0508 	add.w	r5, r3, #8
 8010fa0:	f103 0810 	add.w	r8, r3, #16
 8010fa4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8010fa8:	ebac 0c05 	sub.w	ip, ip, r5
 8010fac:	f02c 0407 	bic.w	r4, ip, #7
 8010fb0:	44a0      	add	r8, r4
 8010fb2:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010fb6:	3508      	adds	r5, #8
 8010fb8:	ed55 5a03 	vldr	s11, [r5, #-12]
 8010fbc:	f004 060f 	and.w	r6, r4, #15
 8010fc0:	0924      	lsrs	r4, r4, #4
 8010fc2:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010fc6:	45a8      	cmp	r8, r5
 8010fc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fcc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010fd0:	edd6 7a00 	vldr	s15, [r6]
 8010fd4:	ed94 6a00 	vldr	s12, [r4]
 8010fd8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010fdc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fe4:	d1e5      	bne.n	8010fb2 <ai_dict4_dot_array_f32+0x106>
 8010fe6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8010fea:	f10c 0c01 	add.w	ip, ip, #1
 8010fee:	4461      	add	r1, ip
 8010ff0:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8010ff4:	07fc      	lsls	r4, r7, #31
 8010ff6:	d509      	bpl.n	801100c <ai_dict4_dot_array_f32+0x160>
 8010ff8:	7809      	ldrb	r1, [r1, #0]
 8010ffa:	edd3 7a00 	vldr	s15, [r3]
 8010ffe:	090b      	lsrs	r3, r1, #4
 8011000:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011004:	edd2 6a00 	vldr	s13, [r2]
 8011008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801100c:	edd0 7a00 	vldr	s15, [r0]
 8011010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011014:	ed80 7a00 	vstr	s14, [r0]
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011024 <ai_dict4_dot_array_f32+0x178>
 8011020:	e7b8      	b.n	8010f94 <ai_dict4_dot_array_f32+0xe8>
 8011022:	bf00      	nop
 8011024:	00000000 	.word	0x00000000

08011028 <ai_dict_decompress_f32>:
 8011028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801102c:	9f08      	ldr	r7, [sp, #32]
 801102e:	2b04      	cmp	r3, #4
 8011030:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8011034:	d00e      	beq.n	8011054 <ai_dict_decompress_f32+0x2c>
 8011036:	2b08      	cmp	r3, #8
 8011038:	d10a      	bne.n	8011050 <ai_dict_decompress_f32+0x28>
 801103a:	42b8      	cmp	r0, r7
 801103c:	d208      	bcs.n	8011050 <ai_dict_decompress_f32+0x28>
 801103e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f840 3b04 	str.w	r3, [r0], #4
 801104c:	4287      	cmp	r7, r0
 801104e:	d8f6      	bhi.n	801103e <ai_dict_decompress_f32+0x16>
 8011050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011054:	9b07      	ldr	r3, [sp, #28]
 8011056:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801105a:	f003 0e01 	and.w	lr, r3, #1
 801105e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8011062:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8011066:	42b8      	cmp	r0, r7
 8011068:	d2f2      	bcs.n	8011050 <ai_dict_decompress_f32+0x28>
 801106a:	f1bc 0f00 	cmp.w	ip, #0
 801106e:	d019      	beq.n	80110a4 <ai_dict_decompress_f32+0x7c>
 8011070:	f100 0508 	add.w	r5, r0, #8
 8011074:	1e4c      	subs	r4, r1, #1
 8011076:	eb01 0608 	add.w	r6, r1, r8
 801107a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801107e:	3508      	adds	r5, #8
 8011080:	091b      	lsrs	r3, r3, #4
 8011082:	42a6      	cmp	r6, r4
 8011084:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f845 3c10 	str.w	r3, [r5, #-16]
 801108e:	7823      	ldrb	r3, [r4, #0]
 8011090:	f003 030f 	and.w	r3, r3, #15
 8011094:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801109e:	d1ec      	bne.n	801107a <ai_dict_decompress_f32+0x52>
 80110a0:	4461      	add	r1, ip
 80110a2:	4448      	add	r0, r9
 80110a4:	f1be 0f00 	cmp.w	lr, #0
 80110a8:	d103      	bne.n	80110b2 <ai_dict_decompress_f32+0x8a>
 80110aa:	4287      	cmp	r7, r0
 80110ac:	d8dd      	bhi.n	801106a <ai_dict_decompress_f32+0x42>
 80110ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110b2:	780b      	ldrb	r3, [r1, #0]
 80110b4:	3004      	adds	r0, #4
 80110b6:	3101      	adds	r1, #1
 80110b8:	091b      	lsrs	r3, r3, #4
 80110ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f840 3c04 	str.w	r3, [r0, #-4]
 80110c4:	e7cf      	b.n	8011066 <ai_dict_decompress_f32+0x3e>
 80110c6:	bf00      	nop

080110c8 <forward_conv2d>:
 80110c8:	6942      	ldr	r2, [r0, #20]
 80110ca:	8813      	ldrh	r3, [r2, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f000 8639 	beq.w	8011d44 <forward_conv2d+0xc7c>
 80110d2:	6852      	ldr	r2, [r2, #4]
 80110d4:	6851      	ldr	r1, [r2, #4]
 80110d6:	b101      	cbz	r1, 80110da <forward_conv2d+0x12>
 80110d8:	6809      	ldr	r1, [r1, #0]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	f240 862f 	bls.w	8011d3e <forward_conv2d+0xc76>
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	ed2d 8b08 	vpush	{d8-d11}
 80110e8:	b0c9      	sub	sp, #292	; 0x124
 80110ea:	6914      	ldr	r4, [r2, #16]
 80110ec:	af02      	add	r7, sp, #8
 80110ee:	2c00      	cmp	r4, #0
 80110f0:	f000 8621 	beq.w	8011d36 <forward_conv2d+0xc6e>
 80110f4:	6824      	ldr	r4, [r4, #0]
 80110f6:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	f000 8616 	beq.w	8011d2c <forward_conv2d+0xc64>
 8011100:	69d5      	ldr	r5, [r2, #28]
 8011102:	2d00      	cmp	r5, #0
 8011104:	f000 860b 	beq.w	8011d1e <forward_conv2d+0xc56>
 8011108:	f112 0318 	adds.w	r3, r2, #24
 801110c:	682c      	ldr	r4, [r5, #0]
 801110e:	d004      	beq.n	801111a <forward_conv2d+0x52>
 8011110:	8b13      	ldrh	r3, [r2, #24]
 8011112:	2b01      	cmp	r3, #1
 8011114:	f240 8618 	bls.w	8011d48 <forward_conv2d+0xc80>
 8011118:	686b      	ldr	r3, [r5, #4]
 801111a:	68aa      	ldr	r2, [r5, #8]
 801111c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8011120:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8011124:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8011128:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801112c:	68ce      	ldr	r6, [r1, #12]
 801112e:	69a1      	ldr	r1, [r4, #24]
 8011130:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8011132:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8011136:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801113a:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 801113e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8011142:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8011146:	f8de 100c 	ldr.w	r1, [lr, #12]
 801114a:	64f9      	str	r1, [r7, #76]	; 0x4c
 801114c:	f8de 1008 	ldr.w	r1, [lr, #8]
 8011150:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8011154:	6871      	ldr	r1, [r6, #4]
 8011156:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 801115a:	68f1      	ldr	r1, [r6, #12]
 801115c:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8011160:	68b1      	ldr	r1, [r6, #8]
 8011162:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8011166:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801116a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801116e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011172:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8011176:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801117a:	6889      	ldr	r1, [r1, #8]
 801117c:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8011180:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011182:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8011186:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801118a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801118c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011190:	6981      	ldr	r1, [r0, #24]
 8011192:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8011196:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 85b0 	beq.w	8011d00 <forward_conv2d+0xc38>
 80111a0:	699b      	ldr	r3, [r3, #24]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80111a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111ac:	4606      	mov	r6, r0
 80111ae:	69c0      	ldr	r0, [r0, #28]
 80111b0:	699b      	ldr	r3, [r3, #24]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	f000 8594 	beq.w	8011ce6 <forward_conv2d+0xc1e>
 80111be:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 80111c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111c6:	6892      	ldr	r2, [r2, #8]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80111ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80111d2:	f001 fe6f 	bl	8012eb4 <ai_array_get_byte_size>
 80111d6:	69a3      	ldr	r3, [r4, #24]
 80111d8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80111dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80111e0:	681c      	ldr	r4, [r3, #0]
 80111e2:	fa1f f289 	uxth.w	r2, r9
 80111e6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80111ea:	fa1f f388 	uxth.w	r3, r8
 80111ee:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 80111f2:	f3c4 5041 	ubfx	r0, r4, #21, #2
 80111f6:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80111fa:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 80111fe:	3a01      	subs	r2, #1
 8011200:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8011204:	fa45 f000 	asr.w	r0, r5, r0
 8011208:	6a35      	ldr	r5, [r6, #32]
 801120a:	fb0e 1202 	mla	r2, lr, r2, r1
 801120e:	3b01      	subs	r3, #1
 8011210:	3c01      	subs	r4, #1
 8011212:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8011216:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 801121a:	b285      	uxth	r5, r0
 801121c:	fb04 1103 	mla	r1, r4, r3, r1
 8011220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011224:	64ba      	str	r2, [r7, #72]	; 0x48
 8011226:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801122a:	4619      	mov	r1, r3
 801122c:	4ad1      	ldr	r2, [pc, #836]	; (8011574 <forward_conv2d+0x4ac>)
 801122e:	2b00      	cmp	r3, #0
 8011230:	bf08      	it	eq
 8011232:	4611      	moveq	r1, r2
 8011234:	f1bc 0f04 	cmp.w	ip, #4
 8011238:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801123c:	f000 852a 	beq.w	8011c94 <forward_conv2d+0xbcc>
 8011240:	f1bc 0f08 	cmp.w	ip, #8
 8011244:	f000 8526 	beq.w	8011c94 <forward_conv2d+0xbcc>
 8011248:	fa1f f38a 	uxth.w	r3, sl
 801124c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011254:	425b      	negs	r3, r3
 8011256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801125a:	2a00      	cmp	r2, #0
 801125c:	f000 8222 	beq.w	80116a4 <forward_conv2d+0x5dc>
 8011260:	fa1f f48b 	uxth.w	r4, fp
 8011264:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011268:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 801126c:	fa0f f588 	sxth.w	r5, r8
 8011270:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8011274:	fa0f f689 	sxth.w	r6, r9
 8011278:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 801127c:	4264      	negs	r4, r4
 801127e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8011282:	fb02 f200 	mul.w	r2, r2, r0
 8011286:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 801128a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801128e:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 8011292:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8011296:	0084      	lsls	r4, r0, #2
 8011298:	fb01 f300 	mul.w	r3, r1, r0
 801129c:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8011578 <forward_conv2d+0x4b0>
 80112a0:	fb00 f202 	mul.w	r2, r0, r2
 80112a4:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 80112a8:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 80112ac:	fb06 fc05 	mul.w	ip, r6, r5
 80112b0:	fb05 f500 	mul.w	r5, r5, r0
 80112b4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80112b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80112bc:	460a      	mov	r2, r1
 80112be:	637d      	str	r5, [r7, #52]	; 0x34
 80112c0:	4605      	mov	r5, r0
 80112c2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80112c6:	fb04 f505 	mul.w	r5, r4, r5
 80112ca:	653e      	str	r6, [r7, #80]	; 0x50
 80112cc:	66fc      	str	r4, [r7, #108]	; 0x6c
 80112ce:	fb01 f606 	mul.w	r6, r1, r6
 80112d2:	4621      	mov	r1, r4
 80112d4:	607d      	str	r5, [r7, #4]
 80112d6:	0085      	lsls	r5, r0, #2
 80112d8:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80112dc:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 80112e0:	4625      	mov	r5, r4
 80112e2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80112e4:	63be      	str	r6, [r7, #56]	; 0x38
 80112e6:	fb01 f505 	mul.w	r5, r1, r5
 80112ea:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 80112ee:	fb04 f402 	mul.w	r4, r4, r2
 80112f2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80112f6:	00b6      	lsls	r6, r6, #2
 80112f8:	62bd      	str	r5, [r7, #40]	; 0x28
 80112fa:	fb00 f001 	mul.w	r0, r0, r1
 80112fe:	009d      	lsls	r5, r3, #2
 8011300:	61bc      	str	r4, [r7, #24]
 8011302:	0094      	lsls	r4, r2, #2
 8011304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011308:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 801130c:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 8011310:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8011314:	62fd      	str	r5, [r7, #44]	; 0x2c
 8011316:	633c      	str	r4, [r7, #48]	; 0x30
 8011318:	6238      	str	r0, [r7, #32]
 801131a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801131e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8011322:	fb06 f000 	mul.w	r0, r6, r0
 8011326:	fb02 f201 	mul.w	r2, r2, r1
 801132a:	61f8      	str	r0, [r7, #28]
 801132c:	0118      	lsls	r0, r3, #4
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8011334:	60b8      	str	r0, [r7, #8]
 8011336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801133a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801133e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011340:	2300      	movs	r3, #0
 8011342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011346:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801134a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801134e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011350:	2900      	cmp	r1, #0
 8011352:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011354:	4413      	add	r3, r2
 8011356:	bfb4      	ite	lt
 8011358:	2100      	movlt	r1, #0
 801135a:	2200      	movge	r2, #0
 801135c:	4283      	cmp	r3, r0
 801135e:	bf28      	it	cs
 8011360:	4603      	movcs	r3, r0
 8011362:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011366:	2801      	cmp	r0, #1
 8011368:	f000 82f9 	beq.w	801195e <forward_conv2d+0x896>
 801136c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8011370:	4281      	cmp	r1, r0
 8011372:	f000 81b5 	beq.w	80116e0 <forward_conv2d+0x618>
 8011376:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801137a:	2900      	cmp	r1, #0
 801137c:	f000 8171 	beq.w	8011662 <forward_conv2d+0x59a>
 8011380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011382:	1a9b      	subs	r3, r3, r2
 8011384:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011388:	1815      	adds	r5, r2, r0
 801138a:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 801138e:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8011392:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8011396:	3d01      	subs	r5, #1
 8011398:	fb92 f1f0 	sdiv	r1, r2, r0
 801139c:	fb00 2111 	mls	r1, r0, r1, r2
 80113a0:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80113a4:	2400      	movs	r4, #0
 80113a6:	1a41      	subs	r1, r0, r1
 80113a8:	67bc      	str	r4, [r7, #120]	; 0x78
 80113aa:	4604      	mov	r4, r0
 80113ac:	fb91 f0f0 	sdiv	r0, r1, r0
 80113b0:	fb04 1110 	mls	r1, r4, r0, r1
 80113b4:	4620      	mov	r0, r4
 80113b6:	1a5b      	subs	r3, r3, r1
 80113b8:	4411      	add	r1, r2
 80113ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80113be:	4423      	add	r3, r4
 80113c0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80113c4:	fb02 f201 	mul.w	r2, r2, r1
 80113c8:	677a      	str	r2, [r7, #116]	; 0x74
 80113ca:	1e5a      	subs	r2, r3, #1
 80113cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80113d0:	fb92 f8f0 	sdiv	r8, r2, r0
 80113d4:	4619      	mov	r1, r3
 80113d6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80113da:	46c2      	mov	sl, r8
 80113dc:	fbb1 f3f4 	udiv	r3, r1, r4
 80113e0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80113e4:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80113e8:	fb95 f5f0 	sdiv	r5, r5, r0
 80113ec:	eba1 0008 	sub.w	r0, r1, r8
 80113f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113f2:	eba1 0c03 	sub.w	ip, r1, r3
 80113f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113fa:	fbb2 f2f4 	udiv	r2, r2, r4
 80113fe:	fb0e f403 	mul.w	r4, lr, r3
 8011402:	0096      	lsls	r6, r2, #2
 8011404:	fb03 f305 	mul.w	r3, r3, r5
 8011408:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 801140c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801140e:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8011412:	65bb      	str	r3, [r7, #88]	; 0x58
 8011414:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8011418:	fb04 f300 	mul.w	r3, r4, r0
 801141c:	663e      	str	r6, [r7, #96]	; 0x60
 801141e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011426:	1b9b      	subs	r3, r3, r6
 8011428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801142c:	008b      	lsls	r3, r1, #2
 801142e:	647b      	str	r3, [r7, #68]	; 0x44
 8011430:	00d3      	lsls	r3, r2, #3
 8011432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801143a:	189e      	adds	r6, r3, r2
 801143c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011440:	2b00      	cmp	r3, #0
 8011442:	f2c0 8138 	blt.w	80116b6 <forward_conv2d+0x5ee>
 8011446:	2100      	movs	r1, #0
 8011448:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801144a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801144e:	4688      	mov	r8, r1
 8011450:	460d      	mov	r5, r1
 8011452:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8011456:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 801145a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801145e:	0080      	lsls	r0, r0, #2
 8011460:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011464:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011468:	4422      	add	r2, r4
 801146a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 801146e:	4423      	add	r3, r4
 8011470:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8011474:	42a2      	cmp	r2, r4
 8011476:	bf94      	ite	ls
 8011478:	ebc5 0202 	rsbls	r2, r5, r2
 801147c:	ebc5 0204 	rsbhi	r2, r5, r4
 8011480:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8011484:	eb08 0403 	add.w	r4, r8, r3
 8011488:	1a52      	subs	r2, r2, r1
 801148a:	462b      	mov	r3, r5
 801148c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011490:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011494:	2d00      	cmp	r5, #0
 8011496:	bf08      	it	eq
 8011498:	4633      	moveq	r3, r6
 801149a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801149e:	440a      	add	r2, r1
 80114a0:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80114a4:	42b3      	cmp	r3, r6
 80114a6:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80114aa:	fb00 5004 	mla	r0, r0, r4, r5
 80114ae:	460a      	mov	r2, r1
 80114b0:	fe08 6a06 	vseleq.f32	s12, s16, s12
 80114b4:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80114b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114ba:	fb96 f6f1 	sdiv	r6, r6, r1
 80114be:	fb9c f5f1 	sdiv	r5, ip, r1
 80114c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80114c4:	440d      	add	r5, r1
 80114c6:	fb06 0112 	mls	r1, r6, r2, r0
 80114ca:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80114ce:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80114d2:	fb0e 0505 	mla	r5, lr, r5, r0
 80114d6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80114da:	1b92      	subs	r2, r2, r6
 80114dc:	2800      	cmp	r0, #0
 80114de:	d073      	beq.n	80115c8 <forward_conv2d+0x500>
 80114e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80114e2:	fb02 f80e 	mul.w	r8, r2, lr
 80114e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114e8:	fb00 fb01 	mul.w	fp, r0, r1
 80114ec:	2a00      	cmp	r2, #0
 80114ee:	d06b      	beq.n	80115c8 <forward_conv2d+0x500>
 80114f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114f2:	189a      	adds	r2, r3, r2
 80114f4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80114f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	643b      	str	r3, [r7, #64]	; 0x40
 8011500:	2300      	movs	r3, #0
 8011502:	673b      	str	r3, [r7, #112]	; 0x70
 8011504:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801150c:	4413      	add	r3, r2
 801150e:	188a      	adds	r2, r1, r2
 8011510:	657b      	str	r3, [r7, #84]	; 0x54
 8011512:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8011516:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801151a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801151e:	f1ba 0f00 	cmp.w	sl, #0
 8011522:	ecf3 7a01 	vldmia	r3!, {s15}
 8011526:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801152a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801152e:	f340 80c0 	ble.w	80116b2 <forward_conv2d+0x5ea>
 8011532:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8011536:	f04f 0c00 	mov.w	ip, #0
 801153a:	2e00      	cmp	r6, #0
 801153c:	dd1e      	ble.n	801157c <forward_conv2d+0x4b4>
 801153e:	2100      	movs	r1, #0
 8011540:	eb00 040e 	add.w	r4, r0, lr
 8011544:	4284      	cmp	r4, r0
 8011546:	d910      	bls.n	801156a <forward_conv2d+0x4a2>
 8011548:	4603      	mov	r3, r0
 801154a:	462a      	mov	r2, r5
 801154c:	ecb3 7a01 	vldmia	r3!, {s14}
 8011550:	ecf2 6a01 	vldmia	r2!, {s13}
 8011554:	429c      	cmp	r4, r3
 8011556:	eee6 7a87 	vfma.f32	s15, s13, s14
 801155a:	d8f7      	bhi.n	801154c <forward_conv2d+0x484>
 801155c:	43c3      	mvns	r3, r0
 801155e:	441c      	add	r4, r3
 8011560:	f024 0403 	bic.w	r4, r4, #3
 8011564:	3404      	adds	r4, #4
 8011566:	4425      	add	r5, r4
 8011568:	4420      	add	r0, r4
 801156a:	3101      	adds	r1, #1
 801156c:	4448      	add	r0, r9
 801156e:	428e      	cmp	r6, r1
 8011570:	d1e6      	bne.n	8011540 <forward_conv2d+0x478>
 8011572:	e003      	b.n	801157c <forward_conv2d+0x4b4>
 8011574:	08010a49 	.word	0x08010a49
 8011578:	00000000 	.word	0x00000000
 801157c:	f10c 0c01 	add.w	ip, ip, #1
 8011580:	4458      	add	r0, fp
 8011582:	4445      	add	r5, r8
 8011584:	45e2      	cmp	sl, ip
 8011586:	d1d8      	bne.n	801153a <forward_conv2d+0x472>
 8011588:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801158c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011590:	441d      	add	r5, r3
 8011592:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011596:	ece3 7a01 	vstmia	r3!, {s15}
 801159a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801159e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d1b9      	bne.n	801151a <forward_conv2d+0x452>
 80115a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80115aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115ac:	4472      	add	r2, lr
 80115ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80115b0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80115b4:	3301      	adds	r3, #1
 80115b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80115b8:	673b      	str	r3, [r7, #112]	; 0x70
 80115ba:	1a52      	subs	r2, r2, r1
 80115bc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80115c0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d19d      	bne.n	8011504 <forward_conv2d+0x43c>
 80115c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80115cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80115d0:	4608      	mov	r0, r1
 80115d2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80115d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115d8:	4410      	add	r0, r2
 80115da:	3301      	adds	r3, #1
 80115dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80115e0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80115e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80115e6:	4401      	add	r1, r0
 80115e8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80115ec:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80115f0:	1a8a      	subs	r2, r1, r2
 80115f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80115f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80115fa:	429a      	cmp	r2, r3
 80115fc:	f47f af1a 	bne.w	8011434 <forward_conv2d+0x36c>
 8011600:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8011604:	2400      	movs	r4, #0
 8011606:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 801160a:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 801160e:	46a2      	mov	sl, r4
 8011610:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8011612:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 8011616:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801161a:	4633      	mov	r3, r6
 801161c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011620:	f10a 0a01 	add.w	sl, sl, #1
 8011624:	608d      	str	r5, [r1, #8]
 8011626:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801162a:	4416      	add	r6, r2
 801162c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011630:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011634:	4405      	add	r5, r0
 8011636:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 801163a:	4608      	mov	r0, r1
 801163c:	47a0      	blx	r4
 801163e:	eba6 0309 	sub.w	r3, r6, r9
 8011642:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011646:	4293      	cmp	r3, r2
 8011648:	bfa8      	it	ge
 801164a:	464e      	movge	r6, r9
 801164c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011650:	4553      	cmp	r3, sl
 8011652:	d1e0      	bne.n	8011616 <forward_conv2d+0x54e>
 8011654:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011658:	69fa      	ldr	r2, [r7, #28]
 801165a:	66be      	str	r6, [r7, #104]	; 0x68
 801165c:	4413      	add	r3, r2
 801165e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011662:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8011666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011668:	4604      	mov	r4, r0
 801166a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801166e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011672:	699b      	ldr	r3, [r3, #24]
 8011674:	4414      	add	r4, r2
 8011676:	1a82      	subs	r2, r0, r2
 8011678:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801167c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8011680:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8011684:	3101      	adds	r1, #1
 8011686:	68da      	ldr	r2, [r3, #12]
 8011688:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 801168c:	609a      	str	r2, [r3, #8]
 801168e:	69bc      	ldr	r4, [r7, #24]
 8011690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011694:	4420      	add	r0, r4
 8011696:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 801169a:	428b      	cmp	r3, r1
 801169c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80116a0:	f47f ae51 	bne.w	8011346 <forward_conv2d+0x27e>
 80116a4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80116a8:	46bd      	mov	sp, r7
 80116aa:	ecbd 8b08 	vpop	{d8-d11}
 80116ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b2:	461a      	mov	r2, r3
 80116b4:	e76a      	b.n	801158c <forward_conv2d+0x4c4>
 80116b6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80116ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80116be:	460d      	mov	r5, r1
 80116c0:	4688      	mov	r8, r1
 80116c2:	1853      	adds	r3, r2, r1
 80116c4:	4611      	mov	r1, r2
 80116c6:	fb95 f2f2 	sdiv	r2, r5, r2
 80116ca:	fb01 5212 	mls	r2, r1, r2, r5
 80116ce:	460c      	mov	r4, r1
 80116d0:	1a8a      	subs	r2, r1, r2
 80116d2:	fb92 f1f1 	sdiv	r1, r2, r1
 80116d6:	fb04 2111 	mls	r1, r4, r1, r2
 80116da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80116dc:	1888      	adds	r0, r1, r2
 80116de:	e6b8      	b.n	8011452 <forward_conv2d+0x38a>
 80116e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80116e2:	2901      	cmp	r1, #1
 80116e4:	f47f ae47 	bne.w	8011376 <forward_conv2d+0x2ae>
 80116e8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80116ec:	2900      	cmp	r1, #0
 80116ee:	d0b8      	beq.n	8011662 <forward_conv2d+0x59a>
 80116f0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80116f4:	1a99      	subs	r1, r3, r2
 80116f6:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80116fa:	0083      	lsls	r3, r0, #2
 80116fc:	fb02 f000 	mul.w	r0, r2, r0
 8011700:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011704:	6778      	str	r0, [r7, #116]	; 0x74
 8011706:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801170a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801170e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011712:	1a41      	subs	r1, r0, r1
 8011714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011716:	fb00 f202 	mul.w	r2, r0, r2
 801171a:	fb03 f301 	mul.w	r3, r3, r1
 801171e:	627a      	str	r2, [r7, #36]	; 0x24
 8011720:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011726:	2300      	movs	r3, #0
 8011728:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801172c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011730:	67bb      	str	r3, [r7, #120]	; 0x78
 8011732:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801173a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801173e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011742:	4619      	mov	r1, r3
 8011744:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8011748:	643b      	str	r3, [r7, #64]	; 0x40
 801174a:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 801174e:	0092      	lsls	r2, r2, #2
 8011750:	00db      	lsls	r3, r3, #3
 8011752:	657a      	str	r2, [r7, #84]	; 0x54
 8011754:	603b      	str	r3, [r7, #0]
 8011756:	008b      	lsls	r3, r1, #2
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801175e:	2b00      	cmp	r3, #0
 8011760:	f2c0 8280 	blt.w	8011c64 <forward_conv2d+0xb9c>
 8011764:	2400      	movs	r4, #0
 8011766:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011768:	4621      	mov	r1, r4
 801176a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801176e:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8011772:	1818      	adds	r0, r3, r0
 8011774:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011778:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 801177c:	18f3      	adds	r3, r6, r3
 801177e:	4420      	add	r0, r4
 8011780:	461c      	mov	r4, r3
 8011782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011786:	0080      	lsls	r0, r0, #2
 8011788:	429c      	cmp	r4, r3
 801178a:	bf28      	it	cs
 801178c:	461c      	movcs	r4, r3
 801178e:	1a64      	subs	r4, r4, r1
 8011790:	2d00      	cmp	r5, #0
 8011792:	f000 8258 	beq.w	8011c46 <forward_conv2d+0xb7e>
 8011796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801179a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801179e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80117a2:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80117a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80117aa:	428d      	cmp	r5, r1
 80117ac:	462a      	mov	r2, r5
 80117ae:	eba6 0104 	sub.w	r1, r6, r4
 80117b2:	eba3 0304 	sub.w	r3, r3, r4
 80117b6:	fe08 4a04 	vseleq.f32	s8, s16, s8
 80117ba:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80117bc:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 80117c0:	4428      	add	r0, r5
 80117c2:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 80117c6:	fb05 6e00 	mla	lr, r5, r0, r6
 80117ca:	eb0e 000b 	add.w	r0, lr, fp
 80117ce:	4570      	cmp	r0, lr
 80117d0:	6478      	str	r0, [r7, #68]	; 0x44
 80117d2:	f240 80a7 	bls.w	8011924 <forward_conv2d+0x85c>
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	fb01 f10b 	mul.w	r1, r1, fp
 80117dc:	f024 0803 	bic.w	r8, r4, #3
 80117e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f000 809a 	beq.w	8011924 <forward_conv2d+0x85c>
 80117f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117f2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80117f6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80117fa:	089b      	lsrs	r3, r3, #2
 80117fc:	4401      	add	r1, r0
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	3301      	adds	r3, #1
 8011802:	1810      	adds	r0, r2, r0
 8011804:	1a8a      	subs	r2, r1, r2
 8011806:	617a      	str	r2, [r7, #20]
 8011808:	fb03 f20a 	mul.w	r2, r3, sl
 801180c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8011810:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011812:	011a      	lsls	r2, r3, #4
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	663a      	str	r2, [r7, #96]	; 0x60
 8011818:	65bb      	str	r3, [r7, #88]	; 0x58
 801181a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801181e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011820:	6979      	ldr	r1, [r7, #20]
 8011822:	4413      	add	r3, r2
 8011824:	188a      	adds	r2, r1, r2
 8011826:	613b      	str	r3, [r7, #16]
 8011828:	673a      	str	r2, [r7, #112]	; 0x70
 801182a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801182e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011832:	ecf3 6a01 	vldmia	r3!, {s13}
 8011836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801183a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801183e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011842:	2b00      	cmp	r3, #0
 8011844:	dd57      	ble.n	80118f6 <forward_conv2d+0x82e>
 8011846:	4676      	mov	r6, lr
 8011848:	f04f 0c00 	mov.w	ip, #0
 801184c:	f1b8 0f00 	cmp.w	r8, #0
 8011850:	f340 81f7 	ble.w	8011c42 <forward_conv2d+0xb7a>
 8011854:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011858:	f109 0310 	add.w	r3, r9, #16
 801185c:	2000      	movs	r0, #0
 801185e:	18b1      	adds	r1, r6, r2
 8011860:	4632      	mov	r2, r6
 8011862:	eb02 050b 	add.w	r5, r2, fp
 8011866:	ed53 7a03 	vldr	s15, [r3, #-12]
 801186a:	ed92 6a00 	vldr	s12, [r2]
 801186e:	3004      	adds	r0, #4
 8011870:	ed95 7a00 	vldr	s14, [r5]
 8011874:	eb01 050b 	add.w	r5, r1, fp
 8011878:	ed53 4a04 	vldr	s9, [r3, #-16]
 801187c:	4540      	cmp	r0, r8
 801187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011882:	ed13 5a02 	vldr	s10, [r3, #-8]
 8011886:	edd1 5a00 	vldr	s11, [r1]
 801188a:	4452      	add	r2, sl
 801188c:	ed95 7a00 	vldr	s14, [r5]
 8011890:	4451      	add	r1, sl
 8011892:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011896:	ed13 6a01 	vldr	s12, [r3, #-4]
 801189a:	f103 0310 	add.w	r3, r3, #16
 801189e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118a2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80118a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80118aa:	dbda      	blt.n	8011862 <forward_conv2d+0x79a>
 80118ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80118b0:	441e      	add	r6, r3
 80118b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118b4:	4499      	add	r9, r3
 80118b6:	4284      	cmp	r4, r0
 80118b8:	dd11      	ble.n	80118de <forward_conv2d+0x816>
 80118ba:	4602      	mov	r2, r0
 80118bc:	4633      	mov	r3, r6
 80118be:	4649      	mov	r1, r9
 80118c0:	3201      	adds	r2, #1
 80118c2:	edd3 7a00 	vldr	s15, [r3]
 80118c6:	ecb1 7a01 	vldmia	r1!, {s14}
 80118ca:	445b      	add	r3, fp
 80118cc:	42a2      	cmp	r2, r4
 80118ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80118d2:	d1f5      	bne.n	80118c0 <forward_conv2d+0x7f8>
 80118d4:	1a20      	subs	r0, r4, r0
 80118d6:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80118da:	fb00 660b 	mla	r6, r0, fp, r6
 80118de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118e2:	f10c 0c01 	add.w	ip, ip, #1
 80118e6:	441e      	add	r6, r3
 80118e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80118ec:	4499      	add	r9, r3
 80118ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80118f2:	4563      	cmp	r3, ip
 80118f4:	d1aa      	bne.n	801184c <forward_conv2d+0x784>
 80118f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80118fc:	4499      	add	r9, r3
 80118fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011900:	ece3 6a01 	vstmia	r3!, {s13}
 8011904:	673b      	str	r3, [r7, #112]	; 0x70
 8011906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801190a:	4293      	cmp	r3, r2
 801190c:	d18f      	bne.n	801182e <forward_conv2d+0x766>
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	f10e 0e04 	add.w	lr, lr, #4
 8011914:	683a      	ldr	r2, [r7, #0]
 8011916:	1a9b      	subs	r3, r3, r2
 8011918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801191c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801191e:	4573      	cmp	r3, lr
 8011920:	f63f af7b 	bhi.w	801181a <forward_conv2d+0x752>
 8011924:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011928:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801192c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801192e:	440a      	add	r2, r1
 8011930:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011934:	3301      	adds	r3, #1
 8011936:	4608      	mov	r0, r1
 8011938:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 801193c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011940:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011944:	67bb      	str	r3, [r7, #120]	; 0x78
 8011946:	4410      	add	r0, r2
 8011948:	1a8a      	subs	r2, r1, r2
 801194a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801194e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011952:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011956:	429a      	cmp	r2, r3
 8011958:	f47f aeff 	bne.w	801175a <forward_conv2d+0x692>
 801195c:	e652      	b.n	8011604 <forward_conv2d+0x53c>
 801195e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011960:	2801      	cmp	r0, #1
 8011962:	f47f ad08 	bne.w	8011376 <forward_conv2d+0x2ae>
 8011966:	1a9b      	subs	r3, r3, r2
 8011968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801196a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801196e:	fb00 f101 	mul.w	r1, r0, r1
 8011972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011976:	6779      	str	r1, [r7, #116]	; 0x74
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 815c 	beq.w	8011c36 <forward_conv2d+0xb6e>
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	fb03 f202 	mul.w	r2, r3, r2
 8011986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801198a:	4401      	add	r1, r0
 801198c:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8011990:	330a      	adds	r3, #10
 8011992:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011994:	6439      	str	r1, [r7, #64]	; 0x40
 8011996:	1a12      	subs	r2, r2, r0
 8011998:	f023 0307 	bic.w	r3, r3, #7
 801199c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80119a0:	647a      	str	r2, [r7, #68]	; 0x44
 80119a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119a8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80119ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80119b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80119b8:	2300      	movs	r3, #0
 80119ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80119be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c0:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80119c4:	ebad 0d03 	sub.w	sp, sp, r3
 80119c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80119cc:	ab02      	add	r3, sp, #8
 80119ce:	663b      	str	r3, [r7, #96]	; 0x60
 80119d0:	b132      	cbz	r2, 80119e0 <forward_conv2d+0x918>
 80119d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80119dc:	f001 facc 	bl	8012f78 <memcpy>
 80119e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f000 8152 	beq.w	8011c8e <forward_conv2d+0xbc6>
 80119ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119ee:	ed93 2a00 	vldr	s4, [r3]
 80119f2:	3304      	adds	r3, #4
 80119f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80119f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f000 8100 	beq.w	8011c02 <forward_conv2d+0xb3a>
 8011a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a06:	f04f 0b00 	mov.w	fp, #0
 8011a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a0e:	eb03 0802 	add.w	r8, r3, r2
 8011a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f2c0 8124 	blt.w	8011c7e <forward_conv2d+0xbb6>
 8011a36:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a3e:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8011a42:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8011a46:	4421      	add	r1, r4
 8011a48:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8011a4a:	4540      	cmp	r0, r8
 8011a4c:	bf94      	ite	ls
 8011a4e:	ebc3 0300 	rsbls	r3, r3, r0
 8011a52:	ebc3 0308 	rsbhi	r3, r3, r8
 8011a56:	4422      	add	r2, r4
 8011a58:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011a5c:	1ac0      	subs	r0, r0, r3
 8011a5e:	eba4 0903 	sub.w	r9, r4, r3
 8011a62:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8011a66:	fb03 f304 	mul.w	r3, r3, r4
 8011a6a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8011a6e:	2c00      	cmp	r4, #0
 8011a70:	f340 8102 	ble.w	8011c78 <forward_conv2d+0xbb0>
 8011a74:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8011a76:	f023 0c0f 	bic.w	ip, r3, #15
 8011a7a:	eef0 6a42 	vmov.f32	s13, s4
 8011a7e:	f04f 0e00 	mov.w	lr, #0
 8011a82:	fb04 f000 	mul.w	r0, r4, r0
 8011a86:	fb04 f909 	mul.w	r9, r4, r9
 8011a8a:	65b8      	str	r0, [r7, #88]	; 0x58
 8011a8c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8011a90:	0900      	lsrs	r0, r0, #4
 8011a92:	3001      	adds	r0, #1
 8011a94:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8011a98:	0100      	lsls	r0, r0, #4
 8011a9a:	6578      	str	r0, [r7, #84]	; 0x54
 8011a9c:	f1bc 0f00 	cmp.w	ip, #0
 8011aa0:	f340 80e8 	ble.w	8011c74 <forward_conv2d+0xbac>
 8011aa4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8011aa8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8011aac:	2500      	movs	r5, #0
 8011aae:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 8011ab2:	3510      	adds	r5, #16
 8011ab4:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8011ab8:	3440      	adds	r4, #64	; 0x40
 8011aba:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 8011abe:	4565      	cmp	r5, ip
 8011ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ac4:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 8011ac8:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8011acc:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8011ad0:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 8011ad4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ad8:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 8011adc:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 8011ae0:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8011ae4:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 8011ae8:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 8011aec:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 8011af0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011af4:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8011af8:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8011afc:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8011b00:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8011b04:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8011b08:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8011b0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011b10:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8011b14:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8011b18:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 8011b1c:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 8011b20:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8011b24:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 8011b28:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011b2c:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8011b30:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 8011b34:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8011b38:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8011b3c:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8011b40:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8011b44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b48:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8011b4c:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8011b50:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011b54:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011b58:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011b5c:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011b60:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011b64:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8011b68:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011b6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011b70:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011b74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011b78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011b7c:	db97      	blt.n	8011aae <forward_conv2d+0x9e6>
 8011b7e:	4451      	add	r1, sl
 8011b80:	4452      	add	r2, sl
 8011b82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b84:	4283      	cmp	r3, r0
 8011b86:	dd0f      	ble.n	8011ba8 <forward_conv2d+0xae0>
 8011b88:	4604      	mov	r4, r0
 8011b8a:	460e      	mov	r6, r1
 8011b8c:	4615      	mov	r5, r2
 8011b8e:	3401      	adds	r4, #1
 8011b90:	ecb5 7a01 	vldmia	r5!, {s14}
 8011b94:	ecf6 7a01 	vldmia	r6!, {s15}
 8011b98:	42a3      	cmp	r3, r4
 8011b9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011b9e:	d1f6      	bne.n	8011b8e <forward_conv2d+0xac6>
 8011ba0:	1a18      	subs	r0, r3, r0
 8011ba2:	0080      	lsls	r0, r0, #2
 8011ba4:	4402      	add	r2, r0
 8011ba6:	4401      	add	r1, r0
 8011ba8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011baa:	f10e 0e01 	add.w	lr, lr, #1
 8011bae:	4449      	add	r1, r9
 8011bb0:	4402      	add	r2, r0
 8011bb2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8011bb6:	4570      	cmp	r0, lr
 8011bb8:	f47f af70 	bne.w	8011a9c <forward_conv2d+0x9d4>
 8011bbc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011bc0:	f10b 0b01 	add.w	fp, fp, #1
 8011bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bc6:	4608      	mov	r0, r1
 8011bc8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011bcc:	edc3 6a00 	vstr	s13, [r3]
 8011bd0:	440b      	add	r3, r1
 8011bd2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011bda:	67bb      	str	r3, [r7, #120]	; 0x78
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	4410      	add	r0, r2
 8011be0:	eba8 0802 	sub.w	r8, r8, r2
 8011be4:	1ac9      	subs	r1, r1, r3
 8011be6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011bea:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8011bee:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011bf2:	4419      	add	r1, r3
 8011bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011bf8:	455b      	cmp	r3, fp
 8011bfa:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8011bfe:	f47f af15 	bne.w	8011a2c <forward_conv2d+0x964>
 8011c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c06:	3301      	adds	r3, #1
 8011c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011c0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011c10:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8011c14:	440a      	add	r2, r1
 8011c16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011c1a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011c1e:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8011c22:	3204      	adds	r2, #4
 8011c24:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8011c28:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	f47f aec6 	bne.w	80119be <forward_conv2d+0x8f6>
 8011c32:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8011c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f47f ace2 	bne.w	8011604 <forward_conv2d+0x53c>
 8011c40:	e50f      	b.n	8011662 <forward_conv2d+0x59a>
 8011c42:	2000      	movs	r0, #0
 8011c44:	e637      	b.n	80118b6 <forward_conv2d+0x7ee>
 8011c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c4a:	eeb0 4a48 	vmov.f32	s8, s16
 8011c4e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8011c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011c5a:	1b19      	subs	r1, r3, r4
 8011c5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011c60:	1b1b      	subs	r3, r3, r4
 8011c62:	e5aa      	b.n	80117ba <forward_conv2d+0x6f2>
 8011c64:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8011c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	191a      	adds	r2, r3, r4
 8011c6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011c72:	e57a      	b.n	801176a <forward_conv2d+0x6a2>
 8011c74:	2000      	movs	r0, #0
 8011c76:	e785      	b.n	8011b84 <forward_conv2d+0xabc>
 8011c78:	eef0 6a42 	vmov.f32	s13, s4
 8011c7c:	e79e      	b.n	8011bbc <forward_conv2d+0xaf4>
 8011c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c82:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011c84:	eba8 0303 	sub.w	r3, r8, r3
 8011c88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011c8c:	e6d7      	b.n	8011a3e <forward_conv2d+0x976>
 8011c8e:	eeb0 2a48 	vmov.f32	s4, s16
 8011c92:	e6b1      	b.n	80119f8 <forward_conv2d+0x930>
 8011c94:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011c98:	68ca      	ldr	r2, [r1, #12]
 8011c9a:	2a00      	cmp	r2, #0
 8011c9c:	f43f aad4 	beq.w	8011248 <forward_conv2d+0x180>
 8011ca0:	6973      	ldr	r3, [r6, #20]
 8011ca2:	8818      	ldrh	r0, [r3, #0]
 8011ca4:	2803      	cmp	r0, #3
 8011ca6:	d91b      	bls.n	8011ce0 <forward_conv2d+0xc18>
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cac:	b1ab      	cbz	r3, 8011cda <forward_conv2d+0xc12>
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	b19b      	cbz	r3, 8011cda <forward_conv2d+0xc12>
 8011cb2:	699c      	ldr	r4, [r3, #24]
 8011cb4:	462b      	mov	r3, r5
 8011cb6:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8011cba:	6889      	ldr	r1, [r1, #8]
 8011cbc:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	bf18      	it	ne
 8011cc4:	4605      	movne	r5, r0
 8011cc6:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8011cca:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8011cce:	e9cd 5400 	strd	r5, r4, [sp]
 8011cd2:	f7ff f9a9 	bl	8011028 <ai_dict_decompress_f32>
 8011cd6:	f7ff bab7 	b.w	8011248 <forward_conv2d+0x180>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	699b      	ldr	r3, [r3, #24]
 8011cde:	deff      	udf	#255	; 0xff
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	deff      	udf	#255	; 0xff
 8011ce6:	b178      	cbz	r0, 8011d08 <forward_conv2d+0xc40>
 8011ce8:	6883      	ldr	r3, [r0, #8]
 8011cea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011cee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011cfc:	f7ff ba70 	b.w	80111e0 <forward_conv2d+0x118>
 8011d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011d04:	f7ff ba50 	b.w	80111a8 <forward_conv2d+0xe0>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011d0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011d1a:	f7ff ba61 	b.w	80111e0 <forward_conv2d+0x118>
 8011d1e:	3218      	adds	r2, #24
 8011d20:	d007      	beq.n	8011d32 <forward_conv2d+0xc6a>
 8011d22:	462b      	mov	r3, r5
 8011d24:	462c      	mov	r4, r5
 8011d26:	462a      	mov	r2, r5
 8011d28:	f7ff b9f8 	b.w	801111c <forward_conv2d+0x54>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	deff      	udf	#255	; 0xff
 8011d32:	68d3      	ldr	r3, [r2, #12]
 8011d34:	deff      	udf	#255	; 0xff
 8011d36:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8011d3a:	f7ff b9de 	b.w	80110fa <forward_conv2d+0x32>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	deff      	udf	#255	; 0xff
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	deff      	udf	#255	; 0xff
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f7ff b9e6 	b.w	801111a <forward_conv2d+0x52>
 8011d4e:	bf00      	nop

08011d50 <forward_dense>:
 8011d50:	6942      	ldr	r2, [r0, #20]
 8011d52:	8813      	ldrh	r3, [r2, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	f000 81c8 	beq.w	80120ea <forward_dense+0x39a>
 8011d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d5e:	ed2d 8b08 	vpush	{d8-d11}
 8011d62:	6851      	ldr	r1, [r2, #4]
 8011d64:	b091      	sub	sp, #68	; 0x44
 8011d66:	684d      	ldr	r5, [r1, #4]
 8011d68:	b105      	cbz	r5, 8011d6c <forward_dense+0x1c>
 8011d6a:	682d      	ldr	r5, [r5, #0]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	f240 81b9 	bls.w	80120e4 <forward_dense+0x394>
 8011d72:	690a      	ldr	r2, [r1, #16]
 8011d74:	b102      	cbz	r2, 8011d78 <forward_dense+0x28>
 8011d76:	6812      	ldr	r2, [r2, #0]
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	f000 81b8 	beq.w	80120ee <forward_dense+0x39e>
 8011d7e:	69cb      	ldr	r3, [r1, #28]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f000 8209 	beq.w	8012198 <forward_dense+0x448>
 8011d86:	6818      	ldr	r0, [r3, #0]
 8011d88:	9008      	str	r0, [sp, #32]
 8011d8a:	f111 0018 	adds.w	r0, r1, #24
 8011d8e:	f000 81dc 	beq.w	801214a <forward_dense+0x3fa>
 8011d92:	8b09      	ldrh	r1, [r1, #24]
 8011d94:	2901      	cmp	r1, #1
 8011d96:	f240 81fc 	bls.w	8012192 <forward_dense+0x442>
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	f000 81d7 	beq.w	801214e <forward_dense+0x3fe>
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	9306      	str	r3, [sp, #24]
 8011da4:	9b08      	ldr	r3, [sp, #32]
 8011da6:	68d6      	ldr	r6, [r2, #12]
 8011da8:	699b      	ldr	r3, [r3, #24]
 8011daa:	68b0      	ldr	r0, [r6, #8]
 8011dac:	681f      	ldr	r7, [r3, #0]
 8011dae:	68f4      	ldr	r4, [r6, #12]
 8011db0:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8011db4:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8011db8:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8011dbc:	fb04 f000 	mul.w	r0, r4, r0
 8011dc0:	fa4e f10c 	asr.w	r1, lr, ip
 8011dc4:	2f04      	cmp	r7, #4
 8011dc6:	9007      	str	r0, [sp, #28]
 8011dc8:	910b      	str	r1, [sp, #44]	; 0x2c
 8011dca:	68e9      	ldr	r1, [r5, #12]
 8011dcc:	6870      	ldr	r0, [r6, #4]
 8011dce:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8011dd2:	f000 81db 	beq.w	801218c <forward_dense+0x43c>
 8011dd6:	2f08      	cmp	r7, #8
 8011dd8:	f000 81d8 	beq.w	801218c <forward_dense+0x43c>
 8011ddc:	f04f 0a00 	mov.w	sl, #0
 8011de0:	6992      	ldr	r2, [r2, #24]
 8011de2:	0080      	lsls	r0, r0, #2
 8011de4:	69a9      	ldr	r1, [r5, #24]
 8011de6:	6894      	ldr	r4, [r2, #8]
 8011de8:	9a08      	ldr	r2, [sp, #32]
 8011dea:	9009      	str	r0, [sp, #36]	; 0x24
 8011dec:	1826      	adds	r6, r4, r0
 8011dee:	6952      	ldr	r2, [r2, #20]
 8011df0:	9404      	str	r4, [sp, #16]
 8011df2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8011df6:	9a07      	ldr	r2, [sp, #28]
 8011df8:	688f      	ldr	r7, [r1, #8]
 8011dfa:	2a00      	cmp	r2, #0
 8011dfc:	f000 81c1 	beq.w	8012182 <forward_dense+0x432>
 8011e00:	f1a8 0210 	sub.w	r2, r8, #16
 8011e04:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011e08:	689d      	ldr	r5, [r3, #8]
 8011e0a:	0912      	lsrs	r2, r2, #4
 8011e0c:	910a      	str	r1, [sp, #40]	; 0x28
 8011e0e:	2100      	movs	r1, #0
 8011e10:	9b06      	ldr	r3, [sp, #24]
 8011e12:	3201      	adds	r2, #1
 8011e14:	eddf 2acf 	vldr	s5, [pc, #828]	; 8012154 <forward_dense+0x404>
 8011e18:	9105      	str	r1, [sp, #20]
 8011e1a:	f008 010f 	and.w	r1, r8, #15
 8011e1e:	0192      	lsls	r2, r2, #6
 8011e20:	910d      	str	r1, [sp, #52]	; 0x34
 8011e22:	920c      	str	r2, [sp, #48]	; 0x30
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d042      	beq.n	8011eae <forward_dense+0x15e>
 8011e28:	699b      	ldr	r3, [r3, #24]
 8011e2a:	689c      	ldr	r4, [r3, #8]
 8011e2c:	9b04      	ldr	r3, [sp, #16]
 8011e2e:	f1ba 0f00 	cmp.w	sl, #0
 8011e32:	d041      	beq.n	8011eb8 <forward_dense+0x168>
 8011e34:	42b3      	cmp	r3, r6
 8011e36:	d229      	bcs.n	8011e8c <forward_dense+0x13c>
 8011e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e3a:	469b      	mov	fp, r3
 8011e3c:	ab0f      	add	r3, sp, #60	; 0x3c
 8011e3e:	2a04      	cmp	r2, #4
 8011e40:	9303      	str	r3, [sp, #12]
 8011e42:	4633      	mov	r3, r6
 8011e44:	4646      	mov	r6, r8
 8011e46:	4698      	mov	r8, r3
 8011e48:	f000 8154 	beq.w	80120f4 <forward_dense+0x3a4>
 8011e4c:	2c00      	cmp	r4, #0
 8011e4e:	f000 8183 	beq.w	8012158 <forward_dense+0x408>
 8011e52:	f8d4 c000 	ldr.w	ip, [r4]
 8011e56:	463b      	mov	r3, r7
 8011e58:	4629      	mov	r1, r5
 8011e5a:	9600      	str	r6, [sp, #0]
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	9803      	ldr	r0, [sp, #12]
 8011e60:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011e64:	f7fe fdf2 	bl	8010a4c <ai_dict8_dot_array_f32>
 8011e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e6a:	3404      	adds	r4, #4
 8011e6c:	444d      	add	r5, r9
 8011e6e:	f84b 3b04 	str.w	r3, [fp], #4
 8011e72:	45c3      	cmp	fp, r8
 8011e74:	d3ea      	bcc.n	8011e4c <forward_dense+0xfc>
 8011e76:	4643      	mov	r3, r8
 8011e78:	46b0      	mov	r8, r6
 8011e7a:	461e      	mov	r6, r3
 8011e7c:	9a04      	ldr	r2, [sp, #16]
 8011e7e:	43d3      	mvns	r3, r2
 8011e80:	4433      	add	r3, r6
 8011e82:	f023 0303 	bic.w	r3, r3, #3
 8011e86:	3304      	adds	r3, #4
 8011e88:	18d3      	adds	r3, r2, r3
 8011e8a:	9304      	str	r3, [sp, #16]
 8011e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e8e:	9b05      	ldr	r3, [sp, #20]
 8011e90:	4417      	add	r7, r2
 8011e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e94:	3301      	adds	r3, #1
 8011e96:	4416      	add	r6, r2
 8011e98:	9a07      	ldr	r2, [sp, #28]
 8011e9a:	9305      	str	r3, [sp, #20]
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	f000 8170 	beq.w	8012182 <forward_dense+0x432>
 8011ea2:	9b08      	ldr	r3, [sp, #32]
 8011ea4:	699b      	ldr	r3, [r3, #24]
 8011ea6:	689d      	ldr	r5, [r3, #8]
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1bc      	bne.n	8011e28 <forward_dense+0xd8>
 8011eae:	461c      	mov	r4, r3
 8011eb0:	9b04      	ldr	r3, [sp, #16]
 8011eb2:	f1ba 0f00 	cmp.w	sl, #0
 8011eb6:	d1bd      	bne.n	8011e34 <forward_dense+0xe4>
 8011eb8:	42b3      	cmp	r3, r6
 8011eba:	d2e7      	bcs.n	8011e8c <forward_dense+0x13c>
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ec0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011ec4:	eb07 0c03 	add.w	ip, r7, r3
 8011ec8:	469e      	mov	lr, r3
 8011eca:	2c00      	cmp	r4, #0
 8011ecc:	f000 80fe 	beq.w	80120cc <forward_dense+0x37c>
 8011ed0:	f1b8 0f0f 	cmp.w	r8, #15
 8011ed4:	ed94 6a00 	vldr	s12, [r4]
 8011ed8:	f104 0404 	add.w	r4, r4, #4
 8011edc:	f240 80fc 	bls.w	80120d8 <forward_dense+0x388>
 8011ee0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011ee4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011ee8:	4641      	mov	r1, r8
 8011eea:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8012154 <forward_dense+0x404>
 8011eee:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8011ef2:	3910      	subs	r1, #16
 8011ef4:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8011ef8:	3240      	adds	r2, #64	; 0x40
 8011efa:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8011efe:	290f      	cmp	r1, #15
 8011f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f04:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011f08:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011f0c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011f10:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8011f14:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011f18:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011f1c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8011f20:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8011f24:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011f28:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011f2c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8011f30:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011f34:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011f38:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011f3c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8011f40:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8011f44:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011f48:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011f4c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011f50:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8011f54:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011f58:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8011f5c:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8011f60:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8011f64:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8011f68:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011f6c:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8011f70:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011f74:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8011f78:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8011f7c:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8011f80:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8011f84:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011f88:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8011f8c:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8011f90:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011f94:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011f98:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011f9c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011fa0:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011fa4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011fa8:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011fac:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011fb0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011fb4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011fb8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011fbc:	d897      	bhi.n	8011eee <forward_dense+0x19e>
 8011fbe:	eb05 010e 	add.w	r1, r5, lr
 8011fc2:	465b      	mov	r3, fp
 8011fc4:	4662      	mov	r2, ip
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d075      	beq.n	80120b6 <forward_dense+0x366>
 8011fca:	ed91 7a00 	vldr	s14, [r1]
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	edd2 7a00 	vldr	s15, [r2]
 8011fd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fd8:	d06d      	beq.n	80120b6 <forward_dense+0x366>
 8011fda:	ed91 7a01 	vldr	s14, [r1, #4]
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	edd2 7a01 	vldr	s15, [r2, #4]
 8011fe4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011fe8:	d065      	beq.n	80120b6 <forward_dense+0x366>
 8011fea:	ed91 7a02 	vldr	s14, [r1, #8]
 8011fee:	2b03      	cmp	r3, #3
 8011ff0:	edd2 7a02 	vldr	s15, [r2, #8]
 8011ff4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ff8:	d05d      	beq.n	80120b6 <forward_dense+0x366>
 8011ffa:	ed91 7a03 	vldr	s14, [r1, #12]
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	edd2 7a03 	vldr	s15, [r2, #12]
 8012004:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012008:	d055      	beq.n	80120b6 <forward_dense+0x366>
 801200a:	ed91 7a04 	vldr	s14, [r1, #16]
 801200e:	2b05      	cmp	r3, #5
 8012010:	edd2 7a04 	vldr	s15, [r2, #16]
 8012014:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012018:	d04d      	beq.n	80120b6 <forward_dense+0x366>
 801201a:	ed91 7a05 	vldr	s14, [r1, #20]
 801201e:	2b06      	cmp	r3, #6
 8012020:	edd2 7a05 	vldr	s15, [r2, #20]
 8012024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012028:	d045      	beq.n	80120b6 <forward_dense+0x366>
 801202a:	ed91 7a06 	vldr	s14, [r1, #24]
 801202e:	2b07      	cmp	r3, #7
 8012030:	edd2 7a06 	vldr	s15, [r2, #24]
 8012034:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012038:	d03d      	beq.n	80120b6 <forward_dense+0x366>
 801203a:	ed91 7a07 	vldr	s14, [r1, #28]
 801203e:	2b08      	cmp	r3, #8
 8012040:	edd2 7a07 	vldr	s15, [r2, #28]
 8012044:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012048:	d035      	beq.n	80120b6 <forward_dense+0x366>
 801204a:	ed91 7a08 	vldr	s14, [r1, #32]
 801204e:	2b09      	cmp	r3, #9
 8012050:	edd2 7a08 	vldr	s15, [r2, #32]
 8012054:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012058:	d02d      	beq.n	80120b6 <forward_dense+0x366>
 801205a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 801205e:	2b0a      	cmp	r3, #10
 8012060:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8012064:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012068:	d025      	beq.n	80120b6 <forward_dense+0x366>
 801206a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 801206e:	2b0b      	cmp	r3, #11
 8012070:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8012074:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012078:	d01d      	beq.n	80120b6 <forward_dense+0x366>
 801207a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 801207e:	2b0c      	cmp	r3, #12
 8012080:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8012084:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012088:	d015      	beq.n	80120b6 <forward_dense+0x366>
 801208a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 801208e:	2b0d      	cmp	r3, #13
 8012090:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8012094:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012098:	d00d      	beq.n	80120b6 <forward_dense+0x366>
 801209a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801209e:	2b0e      	cmp	r3, #14
 80120a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80120a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80120a8:	d005      	beq.n	80120b6 <forward_dense+0x366>
 80120aa:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80120ae:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80120b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80120b6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80120ba:	444d      	add	r5, r9
 80120bc:	ece0 6a01 	vstmia	r0!, {s13}
 80120c0:	42b0      	cmp	r0, r6
 80120c2:	f4bf aedb 	bcs.w	8011e7c <forward_dense+0x12c>
 80120c6:	2c00      	cmp	r4, #0
 80120c8:	f47f af02 	bne.w	8011ed0 <forward_dense+0x180>
 80120cc:	f1b8 0f0f 	cmp.w	r8, #15
 80120d0:	eeb0 6a62 	vmov.f32	s12, s5
 80120d4:	f63f af04 	bhi.w	8011ee0 <forward_dense+0x190>
 80120d8:	4643      	mov	r3, r8
 80120da:	4629      	mov	r1, r5
 80120dc:	463a      	mov	r2, r7
 80120de:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8012154 <forward_dense+0x404>
 80120e2:	e770      	b.n	8011fc6 <forward_dense+0x276>
 80120e4:	2300      	movs	r3, #0
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	deff      	udf	#255	; 0xff
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	deff      	udf	#255	; 0xff
 80120ee:	2300      	movs	r3, #0
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	deff      	udf	#255	; 0xff
 80120f4:	b1a4      	cbz	r4, 8012120 <forward_dense+0x3d0>
 80120f6:	f8d4 c000 	ldr.w	ip, [r4]
 80120fa:	463b      	mov	r3, r7
 80120fc:	4629      	mov	r1, r5
 80120fe:	9600      	str	r6, [sp, #0]
 8012100:	4652      	mov	r2, sl
 8012102:	9803      	ldr	r0, [sp, #12]
 8012104:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8012108:	f7fe fed0 	bl	8010eac <ai_dict4_dot_array_f32>
 801210c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801210e:	3404      	adds	r4, #4
 8012110:	444d      	add	r5, r9
 8012112:	f84b 3b04 	str.w	r3, [fp], #4
 8012116:	45c3      	cmp	fp, r8
 8012118:	f4bf aead 	bcs.w	8011e76 <forward_dense+0x126>
 801211c:	2c00      	cmp	r4, #0
 801211e:	d1ea      	bne.n	80120f6 <forward_dense+0x3a6>
 8012120:	4634      	mov	r4, r6
 8012122:	4646      	mov	r6, r8
 8012124:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012128:	463b      	mov	r3, r7
 801212a:	4629      	mov	r1, r5
 801212c:	9400      	str	r4, [sp, #0]
 801212e:	4652      	mov	r2, sl
 8012130:	4640      	mov	r0, r8
 8012132:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8012136:	f7fe feb9 	bl	8010eac <ai_dict4_dot_array_f32>
 801213a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801213c:	444d      	add	r5, r9
 801213e:	f84b 3b04 	str.w	r3, [fp], #4
 8012142:	45b3      	cmp	fp, r6
 8012144:	d3f0      	bcc.n	8012128 <forward_dense+0x3d8>
 8012146:	46a0      	mov	r8, r4
 8012148:	e698      	b.n	8011e7c <forward_dense+0x12c>
 801214a:	9006      	str	r0, [sp, #24]
 801214c:	e62a      	b.n	8011da4 <forward_dense+0x54>
 801214e:	9306      	str	r3, [sp, #24]
 8012150:	e628      	b.n	8011da4 <forward_dense+0x54>
 8012152:	bf00      	nop
 8012154:	00000000 	.word	0x00000000
 8012158:	4634      	mov	r4, r6
 801215a:	4646      	mov	r6, r8
 801215c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012160:	463b      	mov	r3, r7
 8012162:	4629      	mov	r1, r5
 8012164:	9400      	str	r4, [sp, #0]
 8012166:	4652      	mov	r2, sl
 8012168:	4640      	mov	r0, r8
 801216a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 801216e:	f7fe fc6d 	bl	8010a4c <ai_dict8_dot_array_f32>
 8012172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012174:	444d      	add	r5, r9
 8012176:	f84b 3b04 	str.w	r3, [fp], #4
 801217a:	45b3      	cmp	fp, r6
 801217c:	d3f0      	bcc.n	8012160 <forward_dense+0x410>
 801217e:	46a0      	mov	r8, r4
 8012180:	e67c      	b.n	8011e7c <forward_dense+0x12c>
 8012182:	b011      	add	sp, #68	; 0x44
 8012184:	ecbd 8b08 	vpop	{d8-d11}
 8012188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8012190:	e626      	b.n	8011de0 <forward_dense+0x90>
 8012192:	2300      	movs	r3, #0
 8012194:	9306      	str	r3, [sp, #24]
 8012196:	e605      	b.n	8011da4 <forward_dense+0x54>
 8012198:	9308      	str	r3, [sp, #32]
 801219a:	e5f6      	b.n	8011d8a <forward_dense+0x3a>

0801219c <array_f32_identity>:
 801219c:	4288      	cmp	r0, r1
 801219e:	d004      	beq.n	80121aa <array_f32_identity+0xe>
 80121a0:	0092      	lsls	r2, r2, #2
 80121a2:	68c9      	ldr	r1, [r1, #12]
 80121a4:	68c0      	ldr	r0, [r0, #12]
 80121a6:	f000 bee7 	b.w	8012f78 <memcpy>
 80121aa:	4770      	bx	lr

080121ac <lstm_cell>:
 80121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b0:	460c      	mov	r4, r1
 80121b2:	b0b5      	sub	sp, #212	; 0xd4
 80121b4:	8ccd      	ldrh	r5, [r1, #38]	; 0x26
 80121b6:	4682      	mov	sl, r0
 80121b8:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 80121ba:	4613      	mov	r3, r2
 80121bc:	9005      	str	r0, [sp, #20]
 80121be:	00af      	lsls	r7, r5, #2
 80121c0:	910a      	str	r1, [sp, #40]	; 0x28
 80121c2:	fb05 f005 	mul.w	r0, r5, r5
 80121c6:	6822      	ldr	r2, [r4, #0]
 80121c8:	fb01 f105 	mul.w	r1, r1, r5
 80121cc:	6866      	ldr	r6, [r4, #4]
 80121ce:	0080      	lsls	r0, r0, #2
 80121d0:	9206      	str	r2, [sp, #24]
 80121d2:	0089      	lsls	r1, r1, #2
 80121d4:	9607      	str	r6, [sp, #28]
 80121d6:	4406      	add	r6, r0
 80121d8:	9701      	str	r7, [sp, #4]
 80121da:	440a      	add	r2, r1
 80121dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80121de:	441f      	add	r7, r3
 80121e0:	9609      	str	r6, [sp, #36]	; 0x24
 80121e2:	4613      	mov	r3, r2
 80121e4:	4406      	add	r6, r0
 80121e6:	9208      	str	r2, [sp, #32]
 80121e8:	9603      	str	r6, [sp, #12]
 80121ea:	461e      	mov	r6, r3
 80121ec:	9a01      	ldr	r2, [sp, #4]
 80121ee:	440e      	add	r6, r1
 80121f0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80121f4:	eb07 0e02 	add.w	lr, r7, r2
 80121f8:	9602      	str	r6, [sp, #8]
 80121fa:	eb09 0c02 	add.w	ip, r9, r2
 80121fe:	9e03      	ldr	r6, [sp, #12]
 8012200:	eb0e 0802 	add.w	r8, lr, r2
 8012204:	9a01      	ldr	r2, [sp, #4]
 8012206:	1830      	adds	r0, r6, r0
 8012208:	9e02      	ldr	r6, [sp, #8]
 801220a:	4643      	mov	r3, r8
 801220c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8012210:	1871      	adds	r1, r6, r1
 8012212:	eb0c 0602 	add.w	r6, ip, r2
 8012216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012218:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 801221c:	921e      	str	r2, [sp, #120]	; 0x78
 801221e:	9a01      	ldr	r2, [sp, #4]
 8012220:	901b      	str	r0, [sp, #108]	; 0x6c
 8012222:	eb08 0b02 	add.w	fp, r8, r2
 8012226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012228:	6a20      	ldr	r0, [r4, #32]
 801222a:	911a      	str	r1, [sp, #104]	; 0x68
 801222c:	9619      	str	r6, [sp, #100]	; 0x64
 801222e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012230:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8012234:	921f      	str	r2, [sp, #124]	; 0x7c
 8012236:	951d      	str	r5, [sp, #116]	; 0x74
 8012238:	9521      	str	r5, [sp, #132]	; 0x84
 801223a:	9525      	str	r5, [sp, #148]	; 0x94
 801223c:	9529      	str	r5, [sp, #164]	; 0xa4
 801223e:	952d      	str	r5, [sp, #180]	; 0xb4
 8012240:	9531      	str	r5, [sp, #196]	; 0xc4
 8012242:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8012246:	4bd9      	ldr	r3, [pc, #868]	; (80125ac <lstm_cell+0x400>)
 8012248:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
 801224c:	e9cd ee26 	strd	lr, lr, [sp, #152]	; 0x98
 8012250:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
 8012254:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
 8012258:	931c      	str	r3, [sp, #112]	; 0x70
 801225a:	9320      	str	r3, [sp, #128]	; 0x80
 801225c:	9324      	str	r3, [sp, #144]	; 0x90
 801225e:	9328      	str	r3, [sp, #160]	; 0xa0
 8012260:	932c      	str	r3, [sp, #176]	; 0xb0
 8012262:	9330      	str	r3, [sp, #192]	; 0xc0
 8012264:	2d00      	cmp	r5, #0
 8012266:	f000 83c1 	beq.w	80129ec <lstm_cell+0x840>
 801226a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226c:	46f3      	mov	fp, lr
 801226e:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 8012272:	46be      	mov	lr, r7
 8012274:	3b04      	subs	r3, #4
 8012276:	9712      	str	r7, [sp, #72]	; 0x48
 8012278:	1f28      	subs	r0, r5, #4
 801227a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801227e:	461a      	mov	r2, r3
 8012280:	089b      	lsrs	r3, r3, #2
 8012282:	0881      	lsrs	r1, r0, #2
 8012284:	9610      	str	r6, [sp, #64]	; 0x40
 8012286:	1c5f      	adds	r7, r3, #1
 8012288:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 801228c:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
 8012290:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012296:	9a01      	ldr	r2, [sp, #4]
 8012298:	013f      	lsls	r7, r7, #4
 801229a:	3101      	adds	r1, #1
 801229c:	930c      	str	r3, [sp, #48]	; 0x30
 801229e:	4653      	mov	r3, sl
 80122a0:	970b      	str	r7, [sp, #44]	; 0x2c
 80122a2:	2e03      	cmp	r6, #3
 80122a4:	443b      	add	r3, r7
 80122a6:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80125b0 <lstm_cell+0x404>
 80122aa:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 80122ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80122b0:	930d      	str	r3, [sp, #52]	; 0x34
 80122b2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80122b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122b8:	46dc      	mov	ip, fp
 80122ba:	edc0 6a00 	vstr	s13, [r0]
 80122be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122c2:	9304      	str	r3, [sp, #16]
 80122c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80122c6:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80122ca:	eb03 0802 	add.w	r8, r3, r2
 80122ce:	f04f 0300 	mov.w	r3, #0
 80122d2:	930e      	str	r3, [sp, #56]	; 0x38
 80122d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80122d8:	930a      	str	r3, [sp, #40]	; 0x28
 80122da:	f240 823e 	bls.w	801275a <lstm_cell+0x5ae>
 80122de:	9b06      	ldr	r3, [sp, #24]
 80122e0:	46b1      	mov	r9, r6
 80122e2:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 80125b0 <lstm_cell+0x404>
 80122e6:	f103 0210 	add.w	r2, r3, #16
 80122ea:	9b05      	ldr	r3, [sp, #20]
 80122ec:	3310      	adds	r3, #16
 80122ee:	ed12 7a03 	vldr	s14, [r2, #-12]
 80122f2:	f1a9 0904 	sub.w	r9, r9, #4
 80122f6:	ed53 7a03 	vldr	s15, [r3, #-12]
 80122fa:	3210      	adds	r2, #16
 80122fc:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8012300:	f1b9 0f03 	cmp.w	r9, #3
 8012304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012308:	ed13 7a04 	vldr	s14, [r3, #-16]
 801230c:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8012310:	f103 0310 	add.w	r3, r3, #16
 8012314:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012318:	eee5 7a87 	vfma.f32	s15, s11, s14
 801231c:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8012320:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012324:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012328:	eee5 7a87 	vfma.f32	s15, s11, s14
 801232c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012330:	d8dd      	bhi.n	80122ee <lstm_cell+0x142>
 8012332:	9b06      	ldr	r3, [sp, #24]
 8012334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012336:	eb03 0902 	add.w	r9, r3, r2
 801233a:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801233e:	b1ab      	cbz	r3, 801236c <lstm_cell+0x1c0>
 8012340:	ed99 7a00 	vldr	s14, [r9]
 8012344:	2b01      	cmp	r3, #1
 8012346:	edd2 7a00 	vldr	s15, [r2]
 801234a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801234e:	d00d      	beq.n	801236c <lstm_cell+0x1c0>
 8012350:	ed99 7a01 	vldr	s14, [r9, #4]
 8012354:	2b02      	cmp	r3, #2
 8012356:	edd2 7a01 	vldr	s15, [r2, #4]
 801235a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801235e:	d005      	beq.n	801236c <lstm_cell+0x1c0>
 8012360:	ed99 7a02 	vldr	s14, [r9, #8]
 8012364:	edd2 7a02 	vldr	s15, [r2, #8]
 8012368:	eea7 6a27 	vfma.f32	s12, s14, s15
 801236c:	2d03      	cmp	r5, #3
 801236e:	ed80 6a00 	vstr	s12, [r0]
 8012372:	9b07      	ldr	r3, [sp, #28]
 8012374:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8012378:	f240 8334 	bls.w	80129e4 <lstm_cell+0x838>
 801237c:	f103 0210 	add.w	r2, r3, #16
 8012380:	46a9      	mov	r9, r5
 8012382:	f10a 0310 	add.w	r3, sl, #16
 8012386:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80125b0 <lstm_cell+0x404>
 801238a:	ed12 7a03 	vldr	s14, [r2, #-12]
 801238e:	f1a9 0904 	sub.w	r9, r9, #4
 8012392:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012396:	3210      	adds	r2, #16
 8012398:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 801239c:	f1b9 0f03 	cmp.w	r9, #3
 80123a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123a4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80123a8:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 80123ac:	f103 0310 	add.w	r3, r3, #16
 80123b0:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 80123b4:	eee5 7a07 	vfma.f32	s15, s10, s14
 80123b8:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 80123bc:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80123c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80123c4:	eee5 7a07 	vfma.f32	s15, s10, s14
 80123c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80123cc:	d8dd      	bhi.n	801238a <lstm_cell+0x1de>
 80123ce:	9b07      	ldr	r3, [sp, #28]
 80123d0:	448a      	add	sl, r1
 80123d2:	440b      	add	r3, r1
 80123d4:	b1b7      	cbz	r7, 8012404 <lstm_cell+0x258>
 80123d6:	463a      	mov	r2, r7
 80123d8:	ed93 7a00 	vldr	s14, [r3]
 80123dc:	2a01      	cmp	r2, #1
 80123de:	edda 7a00 	vldr	s15, [sl]
 80123e2:	eee7 5a27 	vfma.f32	s11, s14, s15
 80123e6:	d00d      	beq.n	8012404 <lstm_cell+0x258>
 80123e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80123ec:	2a02      	cmp	r2, #2
 80123ee:	edda 7a01 	vldr	s15, [sl, #4]
 80123f2:	eee7 5a27 	vfma.f32	s11, s14, s15
 80123f6:	d005      	beq.n	8012404 <lstm_cell+0x258>
 80123f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80123fc:	edda 7a02 	vldr	s15, [sl, #8]
 8012400:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012404:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801240a:	2e03      	cmp	r6, #3
 801240c:	ed80 6a00 	vstr	s12, [r0]
 8012410:	ecb2 7a01 	vldmia	r2!, {s14}
 8012414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012416:	9214      	str	r2, [sp, #80]	; 0x50
 8012418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801241a:	4413      	add	r3, r2
 801241c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801241e:	edd3 7a00 	vldr	s15, [r3]
 8012422:	ecf2 5a01 	vldmia	r2!, {s11}
 8012426:	eee7 5a27 	vfma.f32	s11, s14, s15
 801242a:	9215      	str	r2, [sp, #84]	; 0x54
 801242c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012430:	eca0 6a01 	vstmia	r0!, {s12}
 8012434:	edce 6a00 	vstr	s13, [lr]
 8012438:	f240 82cd 	bls.w	80129d6 <lstm_cell+0x82a>
 801243c:	9b08      	ldr	r3, [sp, #32]
 801243e:	46b1      	mov	r9, r6
 8012440:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80125b0 <lstm_cell+0x404>
 8012444:	f103 0210 	add.w	r2, r3, #16
 8012448:	9b05      	ldr	r3, [sp, #20]
 801244a:	3310      	adds	r3, #16
 801244c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012450:	f1a9 0904 	sub.w	r9, r9, #4
 8012454:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012458:	3210      	adds	r2, #16
 801245a:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 801245e:	f1b9 0f03 	cmp.w	r9, #3
 8012462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012466:	ed13 7a04 	vldr	s14, [r3, #-16]
 801246a:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 801246e:	f103 0310 	add.w	r3, r3, #16
 8012472:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012476:	eee5 7a87 	vfma.f32	s15, s11, s14
 801247a:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 801247e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012482:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012486:	eee5 7a87 	vfma.f32	s15, s11, s14
 801248a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801248e:	d8dd      	bhi.n	801244c <lstm_cell+0x2a0>
 8012490:	9b08      	ldr	r3, [sp, #32]
 8012492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012494:	eb03 0902 	add.w	r9, r3, r2
 8012498:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801249c:	b1ab      	cbz	r3, 80124ca <lstm_cell+0x31e>
 801249e:	ed99 7a00 	vldr	s14, [r9]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	edd2 7a00 	vldr	s15, [r2]
 80124a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80124ac:	d00d      	beq.n	80124ca <lstm_cell+0x31e>
 80124ae:	ed99 7a01 	vldr	s14, [r9, #4]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80124b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80124bc:	d005      	beq.n	80124ca <lstm_cell+0x31e>
 80124be:	ed99 7a02 	vldr	s14, [r9, #8]
 80124c2:	edd2 7a02 	vldr	s15, [r2, #8]
 80124c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80124ca:	2d03      	cmp	r5, #3
 80124cc:	ed8e 6a00 	vstr	s12, [lr]
 80124d0:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 80124d4:	f240 827a 	bls.w	80129cc <lstm_cell+0x820>
 80124d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124da:	46a9      	mov	r9, r5
 80124dc:	eddf 5a34 	vldr	s11, [pc, #208]	; 80125b0 <lstm_cell+0x404>
 80124e0:	f103 0210 	add.w	r2, r3, #16
 80124e4:	f10a 0310 	add.w	r3, sl, #16
 80124e8:	ed12 7a03 	vldr	s14, [r2, #-12]
 80124ec:	f1a9 0904 	sub.w	r9, r9, #4
 80124f0:	ed53 7a03 	vldr	s15, [r3, #-12]
 80124f4:	3210      	adds	r2, #16
 80124f6:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 80124fa:	f1b9 0f03 	cmp.w	r9, #3
 80124fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012502:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012506:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 801250a:	f103 0310 	add.w	r3, r3, #16
 801250e:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012512:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012516:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 801251a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 801251e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012522:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012526:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801252a:	d8dd      	bhi.n	80124e8 <lstm_cell+0x33c>
 801252c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801252e:	448a      	add	sl, r1
 8012530:	440b      	add	r3, r1
 8012532:	b1b7      	cbz	r7, 8012562 <lstm_cell+0x3b6>
 8012534:	463a      	mov	r2, r7
 8012536:	ed93 7a00 	vldr	s14, [r3]
 801253a:	2a01      	cmp	r2, #1
 801253c:	edda 7a00 	vldr	s15, [sl]
 8012540:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012544:	d00d      	beq.n	8012562 <lstm_cell+0x3b6>
 8012546:	ed93 7a01 	vldr	s14, [r3, #4]
 801254a:	2a02      	cmp	r2, #2
 801254c:	edda 7a01 	vldr	s15, [sl, #4]
 8012550:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012554:	d005      	beq.n	8012562 <lstm_cell+0x3b6>
 8012556:	ed93 7a02 	vldr	s14, [r3, #8]
 801255a:	edda 7a02 	vldr	s15, [sl, #8]
 801255e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012562:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012566:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012568:	2e03      	cmp	r6, #3
 801256a:	46c1      	mov	r9, r8
 801256c:	ed8e 6a00 	vstr	s12, [lr]
 8012570:	ecf2 5a01 	vldmia	r2!, {s11}
 8012574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012576:	9213      	str	r2, [sp, #76]	; 0x4c
 8012578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801257a:	ed98 7a00 	vldr	s14, [r8]
 801257e:	4413      	add	r3, r2
 8012580:	edd3 7a00 	vldr	s15, [r3]
 8012584:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012588:	ee35 6a86 	vadd.f32	s12, s11, s12
 801258c:	ecae 6a01 	vstmia	lr!, {s12}
 8012590:	edcc 6a00 	vstr	s13, [ip]
 8012594:	f240 80ec 	bls.w	8012770 <lstm_cell+0x5c4>
 8012598:	9b02      	ldr	r3, [sp, #8]
 801259a:	46b2      	mov	sl, r6
 801259c:	ed9f 6a04 	vldr	s12, [pc, #16]	; 80125b0 <lstm_cell+0x404>
 80125a0:	f103 0210 	add.w	r2, r3, #16
 80125a4:	9b05      	ldr	r3, [sp, #20]
 80125a6:	3310      	adds	r3, #16
 80125a8:	e004      	b.n	80125b4 <lstm_cell+0x408>
 80125aa:	bf00      	nop
 80125ac:	01821040 	.word	0x01821040
 80125b0:	00000000 	.word	0x00000000
 80125b4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80125b8:	f1aa 0a04 	sub.w	sl, sl, #4
 80125bc:	ed53 7a03 	vldr	s15, [r3, #-12]
 80125c0:	3210      	adds	r2, #16
 80125c2:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80125c6:	f1ba 0f03 	cmp.w	sl, #3
 80125ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125ce:	ed13 7a04 	vldr	s14, [r3, #-16]
 80125d2:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80125d6:	f103 0310 	add.w	r3, r3, #16
 80125da:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80125de:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125e2:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80125e6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80125ea:	eee4 7a85 	vfma.f32	s15, s9, s10
 80125ee:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80125f6:	d8dd      	bhi.n	80125b4 <lstm_cell+0x408>
 80125f8:	9b02      	ldr	r3, [sp, #8]
 80125fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80125fc:	eb03 0a02 	add.w	sl, r3, r2
 8012600:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012604:	b1ab      	cbz	r3, 8012632 <lstm_cell+0x486>
 8012606:	ed9a 7a00 	vldr	s14, [sl]
 801260a:	2b01      	cmp	r3, #1
 801260c:	edd2 7a00 	vldr	s15, [r2]
 8012610:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012614:	d00d      	beq.n	8012632 <lstm_cell+0x486>
 8012616:	ed9a 7a01 	vldr	s14, [sl, #4]
 801261a:	2b02      	cmp	r3, #2
 801261c:	edd2 7a01 	vldr	s15, [r2, #4]
 8012620:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012624:	d005      	beq.n	8012632 <lstm_cell+0x486>
 8012626:	ed9a 7a02 	vldr	s14, [sl, #8]
 801262a:	edd2 7a02 	vldr	s15, [r2, #8]
 801262e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012632:	2d03      	cmp	r5, #3
 8012634:	ed8c 6a00 	vstr	s12, [ip]
 8012638:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 801263c:	f240 8093 	bls.w	8012766 <lstm_cell+0x5ba>
 8012640:	9b03      	ldr	r3, [sp, #12]
 8012642:	46aa      	mov	sl, r5
 8012644:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 80125b0 <lstm_cell+0x404>
 8012648:	f103 0210 	add.w	r2, r3, #16
 801264c:	f10b 0310 	add.w	r3, fp, #16
 8012650:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012654:	f1aa 0a04 	sub.w	sl, sl, #4
 8012658:	ed53 7a03 	vldr	s15, [r3, #-12]
 801265c:	3210      	adds	r2, #16
 801265e:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8012662:	f1ba 0f03 	cmp.w	sl, #3
 8012666:	ee67 7a27 	vmul.f32	s15, s14, s15
 801266a:	ed13 7a04 	vldr	s14, [r3, #-16]
 801266e:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8012672:	f103 0310 	add.w	r3, r3, #16
 8012676:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 801267a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801267e:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8012682:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012686:	eee4 7a24 	vfma.f32	s15, s8, s9
 801268a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801268e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012692:	d8dd      	bhi.n	8012650 <lstm_cell+0x4a4>
 8012694:	9b03      	ldr	r3, [sp, #12]
 8012696:	448b      	add	fp, r1
 8012698:	440b      	add	r3, r1
 801269a:	b1b7      	cbz	r7, 80126ca <lstm_cell+0x51e>
 801269c:	463a      	mov	r2, r7
 801269e:	ed93 7a00 	vldr	s14, [r3]
 80126a2:	2a01      	cmp	r2, #1
 80126a4:	eddb 7a00 	vldr	s15, [fp]
 80126a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80126ac:	d00d      	beq.n	80126ca <lstm_cell+0x51e>
 80126ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80126b2:	2a02      	cmp	r2, #2
 80126b4:	eddb 7a01 	vldr	s15, [fp, #4]
 80126b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80126bc:	d005      	beq.n	80126ca <lstm_cell+0x51e>
 80126be:	ed93 7a02 	vldr	s14, [r3, #8]
 80126c2:	eddb 7a02 	vldr	s15, [fp, #8]
 80126c6:	eee7 5a27 	vfma.f32	s11, s14, s15
 80126ca:	9a06      	ldr	r2, [sp, #24]
 80126cc:	ee35 6a86 	vadd.f32	s12, s11, s12
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	f108 0804 	add.w	r8, r8, #4
 80126d6:	4692      	mov	sl, r2
 80126d8:	9a07      	ldr	r2, [sp, #28]
 80126da:	ed8c 6a00 	vstr	s12, [ip]
 80126de:	449a      	add	sl, r3
 80126e0:	ed99 7a00 	vldr	s14, [r9]
 80126e4:	f8cd a018 	str.w	sl, [sp, #24]
 80126e8:	4692      	mov	sl, r2
 80126ea:	9a01      	ldr	r2, [sp, #4]
 80126ec:	4492      	add	sl, r2
 80126ee:	9a08      	ldr	r2, [sp, #32]
 80126f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80126f4:	4692      	mov	sl, r2
 80126f6:	9a01      	ldr	r2, [sp, #4]
 80126f8:	449a      	add	sl, r3
 80126fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126fc:	f8cd a020 	str.w	sl, [sp, #32]
 8012700:	469a      	mov	sl, r3
 8012702:	9b02      	ldr	r3, [sp, #8]
 8012704:	4492      	add	sl, r2
 8012706:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801270a:	469a      	mov	sl, r3
 801270c:	9b04      	ldr	r3, [sp, #16]
 801270e:	449a      	add	sl, r3
 8012710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012712:	9316      	str	r3, [sp, #88]	; 0x58
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	f8cd a008 	str.w	sl, [sp, #8]
 801271a:	4413      	add	r3, r2
 801271c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801271e:	9303      	str	r3, [sp, #12]
 8012720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012722:	ecf3 5a01 	vldmia	r3!, {s11}
 8012726:	9310      	str	r3, [sp, #64]	; 0x40
 8012728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801272a:	441a      	add	r2, r3
 801272c:	4613      	mov	r3, r2
 801272e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012730:	edd3 7a00 	vldr	s15, [r3]
 8012734:	3201      	adds	r2, #1
 8012736:	eee7 5a27 	vfma.f32	s11, s14, s15
 801273a:	4295      	cmp	r5, r2
 801273c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012740:	ecac 6a01 	vstmia	ip!, {s12}
 8012744:	d01b      	beq.n	801277e <lstm_cell+0x5d2>
 8012746:	4613      	mov	r3, r2
 8012748:	2e03      	cmp	r6, #3
 801274a:	920e      	str	r2, [sp, #56]	; 0x38
 801274c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012750:	edc0 6a00 	vstr	s13, [r0]
 8012754:	930a      	str	r3, [sp, #40]	; 0x28
 8012756:	f63f adc2 	bhi.w	80122de <lstm_cell+0x132>
 801275a:	4633      	mov	r3, r6
 801275c:	ed1f 6a6c 	vldr	s12, [pc, #-432]	; 80125b0 <lstm_cell+0x404>
 8012760:	e9dd 2905 	ldrd	r2, r9, [sp, #20]
 8012764:	e5eb      	b.n	801233e <lstm_cell+0x192>
 8012766:	462a      	mov	r2, r5
 8012768:	9b03      	ldr	r3, [sp, #12]
 801276a:	ed5f 5a6f 	vldr	s11, [pc, #-444]	; 80125b0 <lstm_cell+0x404>
 801276e:	e796      	b.n	801269e <lstm_cell+0x4f2>
 8012770:	4633      	mov	r3, r6
 8012772:	9a05      	ldr	r2, [sp, #20]
 8012774:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012778:	ed1f 6a73 	vldr	s12, [pc, #-460]	; 80125b0 <lstm_cell+0x404>
 801277c:	e742      	b.n	8012604 <lstm_cell+0x458>
 801277e:	a91c      	add	r1, sp, #112	; 0x70
 8012780:	4617      	mov	r7, r2
 8012782:	960a      	str	r6, [sp, #40]	; 0x28
 8012784:	4608      	mov	r0, r1
 8012786:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 801278a:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 801278e:	47a8      	blx	r5
 8012790:	a920      	add	r1, sp, #128	; 0x80
 8012792:	6965      	ldr	r5, [r4, #20]
 8012794:	463a      	mov	r2, r7
 8012796:	4608      	mov	r0, r1
 8012798:	69a3      	ldr	r3, [r4, #24]
 801279a:	47a8      	blx	r5
 801279c:	a924      	add	r1, sp, #144	; 0x90
 801279e:	68e5      	ldr	r5, [r4, #12]
 80127a0:	463a      	mov	r2, r7
 80127a2:	4608      	mov	r0, r1
 80127a4:	6923      	ldr	r3, [r4, #16]
 80127a6:	47a8      	blx	r5
 80127a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127aa:	9a01      	ldr	r2, [sp, #4]
 80127ac:	2100      	movs	r1, #0
 80127ae:	f1a3 0803 	sub.w	r8, r3, #3
 80127b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127b4:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80127b8:	ea4f 0598 	mov.w	r5, r8, lsr #2
 80127bc:	4413      	add	r3, r2
 80127be:	9818      	ldr	r0, [sp, #96]	; 0x60
 80127c0:	469c      	mov	ip, r3
 80127c2:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
 80127c6:	3501      	adds	r5, #1
 80127c8:	ed1f 4a87 	vldr	s8, [pc, #-540]	; 80125b0 <lstm_cell+0x404>
 80127cc:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80127d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80127d2:	012d      	lsls	r5, r5, #4
 80127d4:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80127d8:	e9cd b802 	strd	fp, r8, [sp, #8]
 80127dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80127e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127e2:	2e03      	cmp	r6, #3
 80127e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80127e6:	ecb2 7a01 	vldmia	r2!, {s14}
 80127ea:	440b      	add	r3, r1
 80127ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80127ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127f0:	ecf2 7a01 	vldmia	r2!, {s15}
 80127f4:	9211      	str	r2, [sp, #68]	; 0x44
 80127f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80127fc:	ed93 7a00 	vldr	s14, [r3]
 8012800:	ecf2 6a01 	vldmia	r2!, {s13}
 8012804:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012808:	9212      	str	r2, [sp, #72]	; 0x48
 801280a:	edc3 7a00 	vstr	s15, [r3]
 801280e:	ed80 4a00 	vstr	s8, [r0]
 8012812:	f240 80d5 	bls.w	80129c0 <lstm_cell+0x814>
 8012816:	9b05      	ldr	r3, [sp, #20]
 8012818:	f108 0210 	add.w	r2, r8, #16
 801281c:	46b2      	mov	sl, r6
 801281e:	ed5f 6a9c 	vldr	s13, [pc, #-624]	; 80125b0 <lstm_cell+0x404>
 8012822:	3310      	adds	r3, #16
 8012824:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012828:	f1aa 0a04 	sub.w	sl, sl, #4
 801282c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012830:	3210      	adds	r2, #16
 8012832:	ed12 6a08 	vldr	s12, [r2, #-32]	; 0xffffffe0
 8012836:	f1ba 0f03 	cmp.w	sl, #3
 801283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801283e:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012842:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 8012846:	f103 0310 	add.w	r3, r3, #16
 801284a:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 801284e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012852:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 8012856:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 801285a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801285e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012862:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012866:	d8dd      	bhi.n	8012824 <lstm_cell+0x678>
 8012868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801286a:	eb08 0a03 	add.w	sl, r8, r3
 801286e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012872:	b1ab      	cbz	r3, 80128a0 <lstm_cell+0x6f4>
 8012874:	ed9a 7a00 	vldr	s14, [sl]
 8012878:	2b01      	cmp	r3, #1
 801287a:	edd2 7a00 	vldr	s15, [r2]
 801287e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012882:	d00d      	beq.n	80128a0 <lstm_cell+0x6f4>
 8012884:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012888:	2b02      	cmp	r3, #2
 801288a:	edd2 7a01 	vldr	s15, [r2, #4]
 801288e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012892:	d005      	beq.n	80128a0 <lstm_cell+0x6f4>
 8012894:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012898:	edd2 7a02 	vldr	s15, [r2, #8]
 801289c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80128a0:	2f03      	cmp	r7, #3
 80128a2:	edc0 6a00 	vstr	s13, [r0]
 80128a6:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 80128aa:	f240 8084 	bls.w	80129b6 <lstm_cell+0x80a>
 80128ae:	f109 0210 	add.w	r2, r9, #16
 80128b2:	f10b 0310 	add.w	r3, fp, #16
 80128b6:	46ba      	mov	sl, r7
 80128b8:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 80125b0 <lstm_cell+0x404>
 80128bc:	ed12 7a03 	vldr	s14, [r2, #-12]
 80128c0:	f1aa 0a04 	sub.w	sl, sl, #4
 80128c4:	ed53 7a03 	vldr	s15, [r3, #-12]
 80128c8:	3210      	adds	r2, #16
 80128ca:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80128ce:	f1ba 0f03 	cmp.w	sl, #3
 80128d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128d6:	ed13 7a04 	vldr	s14, [r3, #-16]
 80128da:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80128de:	f103 0310 	add.w	r3, r3, #16
 80128e2:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80128e6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128ea:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80128ee:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80128f2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80128f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80128fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80128fe:	d8dd      	bhi.n	80128bc <lstm_cell+0x710>
 8012900:	9a03      	ldr	r2, [sp, #12]
 8012902:	44ab      	add	fp, r5
 8012904:	eb09 0305 	add.w	r3, r9, r5
 8012908:	b1aa      	cbz	r2, 8012936 <lstm_cell+0x78a>
 801290a:	ed93 7a00 	vldr	s14, [r3]
 801290e:	2a01      	cmp	r2, #1
 8012910:	eddb 7a00 	vldr	s15, [fp]
 8012914:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012918:	d00d      	beq.n	8012936 <lstm_cell+0x78a>
 801291a:	ed93 7a01 	vldr	s14, [r3, #4]
 801291e:	2a02      	cmp	r2, #2
 8012920:	eddb 7a01 	vldr	s15, [fp, #4]
 8012924:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012928:	d005      	beq.n	8012936 <lstm_cell+0x78a>
 801292a:	ed93 7a02 	vldr	s14, [r3, #8]
 801292e:	eddb 7a02 	vldr	s15, [fp, #8]
 8012932:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012936:	9b04      	ldr	r3, [sp, #16]
 8012938:	ee76 6a26 	vadd.f32	s13, s12, s13
 801293c:	4498      	add	r8, r3
 801293e:	9b01      	ldr	r3, [sp, #4]
 8012940:	edc0 6a00 	vstr	s13, [r0]
 8012944:	4499      	add	r9, r3
 8012946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012948:	ecbe 7a01 	vldmia	lr!, {s14}
 801294c:	440b      	add	r3, r1
 801294e:	ecbc 6a01 	vldmia	ip!, {s12}
 8012952:	3104      	adds	r1, #4
 8012954:	edd3 7a00 	vldr	s15, [r3]
 8012958:	9b02      	ldr	r3, [sp, #8]
 801295a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801295e:	428b      	cmp	r3, r1
 8012960:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012964:	ece0 6a01 	vstmia	r0!, {s13}
 8012968:	f47f af3a 	bne.w	80127e0 <lstm_cell+0x634>
 801296c:	a928      	add	r1, sp, #160	; 0xa0
 801296e:	469b      	mov	fp, r3
 8012970:	463a      	mov	r2, r7
 8012972:	4608      	mov	r0, r1
 8012974:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 8012978:	47a8      	blx	r5
 801297a:	a930      	add	r1, sp, #192	; 0xc0
 801297c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801297e:	a82c      	add	r0, sp, #176	; 0xb0
 8012980:	463a      	mov	r2, r7
 8012982:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012984:	47a8      	blx	r5
 8012986:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012988:	449b      	add	fp, r3
 801298a:	4619      	mov	r1, r3
 801298c:	4618      	mov	r0, r3
 801298e:	1a0a      	subs	r2, r1, r0
 8012990:	6a23      	ldr	r3, [r4, #32]
 8012992:	ecf1 7a01 	vldmia	r1!, {s15}
 8012996:	4413      	add	r3, r2
 8012998:	458b      	cmp	fp, r1
 801299a:	ed93 7a00 	vldr	s14, [r3]
 801299e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129a2:	edc3 7a00 	vstr	s15, [r3]
 80129a6:	d1f2      	bne.n	801298e <lstm_cell+0x7e2>
 80129a8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80129ac:	e9c4 2307 	strd	r2, r3, [r4, #28]
 80129b0:	b035      	add	sp, #212	; 0xd4
 80129b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b6:	464b      	mov	r3, r9
 80129b8:	463a      	mov	r2, r7
 80129ba:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8012a38 <lstm_cell+0x88c>
 80129be:	e7a4      	b.n	801290a <lstm_cell+0x75e>
 80129c0:	4633      	mov	r3, r6
 80129c2:	9a05      	ldr	r2, [sp, #20]
 80129c4:	46c2      	mov	sl, r8
 80129c6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8012a38 <lstm_cell+0x88c>
 80129ca:	e752      	b.n	8012872 <lstm_cell+0x6c6>
 80129cc:	462a      	mov	r2, r5
 80129ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129d0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012a38 <lstm_cell+0x88c>
 80129d4:	e5af      	b.n	8012536 <lstm_cell+0x38a>
 80129d6:	4633      	mov	r3, r6
 80129d8:	9a05      	ldr	r2, [sp, #20]
 80129da:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129de:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8012a38 <lstm_cell+0x88c>
 80129e2:	e55b      	b.n	801249c <lstm_cell+0x2f0>
 80129e4:	462a      	mov	r2, r5
 80129e6:	eddf 5a14 	vldr	s11, [pc, #80]	; 8012a38 <lstm_cell+0x88c>
 80129ea:	e4f5      	b.n	80123d8 <lstm_cell+0x22c>
 80129ec:	a91c      	add	r1, sp, #112	; 0x70
 80129ee:	462a      	mov	r2, r5
 80129f0:	e9d4 6305 	ldrd	r6, r3, [r4, #20]
 80129f4:	4608      	mov	r0, r1
 80129f6:	47b0      	blx	r6
 80129f8:	a920      	add	r1, sp, #128	; 0x80
 80129fa:	6966      	ldr	r6, [r4, #20]
 80129fc:	462a      	mov	r2, r5
 80129fe:	4608      	mov	r0, r1
 8012a00:	69a3      	ldr	r3, [r4, #24]
 8012a02:	47b0      	blx	r6
 8012a04:	a924      	add	r1, sp, #144	; 0x90
 8012a06:	68e6      	ldr	r6, [r4, #12]
 8012a08:	462a      	mov	r2, r5
 8012a0a:	4608      	mov	r0, r1
 8012a0c:	6923      	ldr	r3, [r4, #16]
 8012a0e:	47b0      	blx	r6
 8012a10:	a928      	add	r1, sp, #160	; 0xa0
 8012a12:	462a      	mov	r2, r5
 8012a14:	69a3      	ldr	r3, [r4, #24]
 8012a16:	4608      	mov	r0, r1
 8012a18:	6966      	ldr	r6, [r4, #20]
 8012a1a:	47b0      	blx	r6
 8012a1c:	462a      	mov	r2, r5
 8012a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a20:	a930      	add	r1, sp, #192	; 0xc0
 8012a22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012a24:	a82c      	add	r0, sp, #176	; 0xb0
 8012a26:	47a8      	blx	r5
 8012a28:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8012a2c:	e9c4 2307 	strd	r2, r3, [r4, #28]
 8012a30:	b035      	add	sp, #212	; 0xd4
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	bf00      	nop
 8012a38:	00000000 	.word	0x00000000

08012a3c <forward_lstm>:
 8012a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a40:	6943      	ldr	r3, [r0, #20]
 8012a42:	b099      	sub	sp, #100	; 0x64
 8012a44:	881c      	ldrh	r4, [r3, #0]
 8012a46:	2c00      	cmp	r4, #0
 8012a48:	f000 80ea 	beq.w	8012c20 <forward_lstm+0x1e4>
 8012a4c:	6859      	ldr	r1, [r3, #4]
 8012a4e:	684b      	ldr	r3, [r1, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f000 8130 	beq.w	8012cb6 <forward_lstm+0x27a>
 8012a56:	f8d3 b000 	ldr.w	fp, [r3]
 8012a5a:	2c01      	cmp	r4, #1
 8012a5c:	f240 80db 	bls.w	8012c16 <forward_lstm+0x1da>
 8012a60:	690e      	ldr	r6, [r1, #16]
 8012a62:	b106      	cbz	r6, 8012a66 <forward_lstm+0x2a>
 8012a64:	6836      	ldr	r6, [r6, #0]
 8012a66:	2c02      	cmp	r4, #2
 8012a68:	f000 80d5 	beq.w	8012c16 <forward_lstm+0x1da>
 8012a6c:	69ca      	ldr	r2, [r1, #28]
 8012a6e:	2a00      	cmp	r2, #0
 8012a70:	f000 8114 	beq.w	8012c9c <forward_lstm+0x260>
 8012a74:	f111 0818 	adds.w	r8, r1, #24
 8012a78:	6815      	ldr	r5, [r2, #0]
 8012a7a:	d008      	beq.n	8012a8e <forward_lstm+0x52>
 8012a7c:	8b0f      	ldrh	r7, [r1, #24]
 8012a7e:	2f01      	cmp	r7, #1
 8012a80:	f240 8114 	bls.w	8012cac <forward_lstm+0x270>
 8012a84:	2a00      	cmp	r2, #0
 8012a86:	f000 80d0 	beq.w	8012c2a <forward_lstm+0x1ee>
 8012a8a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8012a8e:	f8db 700c 	ldr.w	r7, [fp, #12]
 8012a92:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	69b6      	ldr	r6, [r6, #24]
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8012aa2:	9303      	str	r3, [sp, #12]
 8012aa4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012aa8:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8012aac:	9309      	str	r3, [sp, #36]	; 0x24
 8012aae:	68b3      	ldr	r3, [r6, #8]
 8012ab0:	9304      	str	r3, [sp, #16]
 8012ab2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8012ab6:	e9d2 7205 	ldrd	r7, r2, [r2, #20]
 8012aba:	f1b9 0f00 	cmp.w	r9, #0
 8012abe:	f000 80fe 	beq.w	8012cbe <forward_lstm+0x282>
 8012ac2:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8012ac6:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8012aca:	9605      	str	r6, [sp, #20]
 8012acc:	2f00      	cmp	r7, #0
 8012ace:	f000 80f4 	beq.w	8012cba <forward_lstm+0x27e>
 8012ad2:	69bf      	ldr	r7, [r7, #24]
 8012ad4:	68be      	ldr	r6, [r7, #8]
 8012ad6:	9606      	str	r6, [sp, #24]
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	f000 80f3 	beq.w	8012cc4 <forward_lstm+0x288>
 8012ade:	6992      	ldr	r2, [r2, #24]
 8012ae0:	6892      	ldr	r2, [r2, #8]
 8012ae2:	9207      	str	r2, [sp, #28]
 8012ae4:	2c03      	cmp	r4, #3
 8012ae6:	f000 8096 	beq.w	8012c16 <forward_lstm+0x1da>
 8012aea:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8012aec:	2a00      	cmp	r2, #0
 8012aee:	f000 8095 	beq.w	8012c1c <forward_lstm+0x1e0>
 8012af2:	6812      	ldr	r2, [r2, #0]
 8012af4:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
 8012af8:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8012afc:	4681      	mov	r9, r0
 8012afe:	6992      	ldr	r2, [r2, #24]
 8012b00:	ea4f 008a 	mov.w	r0, sl, lsl #2
 8012b04:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8012b08:	00bf      	lsls	r7, r7, #2
 8012b0a:	6894      	ldr	r4, [r2, #8]
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012b12:	463a      	mov	r2, r7
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	4427      	add	r7, r4
 8012b18:	69ad      	ldr	r5, [r5, #24]
 8012b1a:	9002      	str	r0, [sp, #8]
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8012b22:	68ad      	ldr	r5, [r5, #8]
 8012b24:	f8de 8008 	ldr.w	r8, [lr, #8]
 8012b28:	9308      	str	r3, [sp, #32]
 8012b2a:	f000 fa33 	bl	8012f94 <memset>
 8012b2e:	9b02      	ldr	r3, [sp, #8]
 8012b30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8012b34:	eb04 0e03 	add.w	lr, r4, r3
 8012b38:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8012b3c:	4b62      	ldr	r3, [pc, #392]	; (8012cc8 <forward_lstm+0x28c>)
 8012b3e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8012b42:	960b      	str	r6, [sp, #44]	; 0x2c
 8012b44:	2800      	cmp	r0, #0
 8012b46:	bf08      	it	eq
 8012b48:	4618      	moveq	r0, r3
 8012b4a:	9e05      	ldr	r6, [sp, #20]
 8012b4c:	2900      	cmp	r1, #0
 8012b4e:	bf08      	it	eq
 8012b50:	4619      	moveq	r1, r3
 8012b52:	2a00      	cmp	r2, #0
 8012b54:	bf08      	it	eq
 8012b56:	461a      	moveq	r2, r3
 8012b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b5a:	960e      	str	r6, [sp, #56]	; 0x38
 8012b5c:	9e06      	ldr	r6, [sp, #24]
 8012b5e:	2b01      	cmp	r3, #1
 8012b60:	950a      	str	r5, [sp, #40]	; 0x28
 8012b62:	9b02      	ldr	r3, [sp, #8]
 8012b64:	9d03      	ldr	r5, [sp, #12]
 8012b66:	9610      	str	r6, [sp, #64]	; 0x40
 8012b68:	4473      	add	r3, lr
 8012b6a:	9e03      	ldr	r6, [sp, #12]
 8012b6c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8012b70:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
 8012b74:	bf98      	it	ls
 8012b76:	f04f 0a00 	movls.w	sl, #0
 8012b7a:	9d08      	ldr	r5, [sp, #32]
 8012b7c:	9415      	str	r4, [sp, #84]	; 0x54
 8012b7e:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 8012b82:	f899 4028 	ldrb.w	r4, [r9, #40]	; 0x28
 8012b86:	9e07      	ldr	r6, [sp, #28]
 8012b88:	950c      	str	r5, [sp, #48]	; 0x30
 8012b8a:	4655      	mov	r5, sl
 8012b8c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012b90:	9617      	str	r6, [sp, #92]	; 0x5c
 8012b92:	900d      	str	r0, [sp, #52]	; 0x34
 8012b94:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b96:	9216      	str	r2, [sp, #88]	; 0x58
 8012b98:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
 8012b9c:	2c00      	cmp	r4, #0
 8012b9e:	d041      	beq.n	8012c24 <forward_lstm+0x1e8>
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012ba6:	1e5c      	subs	r4, r3, #1
 8012ba8:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8012bac:	b14a      	cbz	r2, 8012bc2 <forward_lstm+0x186>
 8012bae:	9b01      	ldr	r3, [sp, #4]
 8012bb0:	f1ca 0500 	rsb	r5, sl, #0
 8012bb4:	1e5a      	subs	r2, r3, #1
 8012bb6:	9b04      	ldr	r3, [sp, #16]
 8012bb8:	fb0a fa02 	mul.w	sl, sl, r2
 8012bbc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8012bc0:	9304      	str	r3, [sp, #16]
 8012bc2:	fb0c f308 	mul.w	r3, ip, r8
 8012bc6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012bca:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8012bce:	9303      	str	r3, [sp, #12]
 8012bd0:	2d00      	cmp	r5, #0
 8012bd2:	d143      	bne.n	8012c5c <forward_lstm+0x220>
 8012bd4:	4653      	mov	r3, sl
 8012bd6:	fb0c f504 	mul.w	r5, ip, r4
 8012bda:	46ba      	mov	sl, r7
 8012bdc:	9e04      	ldr	r6, [sp, #16]
 8012bde:	465f      	mov	r7, fp
 8012be0:	469b      	mov	fp, r3
 8012be2:	e002      	b.n	8012bea <forward_lstm+0x1ae>
 8012be4:	9b01      	ldr	r3, [sp, #4]
 8012be6:	429c      	cmp	r4, r3
 8012be8:	da0c      	bge.n	8012c04 <forward_lstm+0x1c8>
 8012bea:	69b8      	ldr	r0, [r7, #24]
 8012bec:	4444      	add	r4, r8
 8012bee:	9b03      	ldr	r3, [sp, #12]
 8012bf0:	4652      	mov	r2, sl
 8012bf2:	6880      	ldr	r0, [r0, #8]
 8012bf4:	4659      	mov	r1, fp
 8012bf6:	444e      	add	r6, r9
 8012bf8:	4428      	add	r0, r5
 8012bfa:	441d      	add	r5, r3
 8012bfc:	f7ff fad6 	bl	80121ac <lstm_cell>
 8012c00:	2c00      	cmp	r4, #0
 8012c02:	daef      	bge.n	8012be4 <forward_lstm+0x1a8>
 8012c04:	4630      	mov	r0, r6
 8012c06:	9a02      	ldr	r2, [sp, #8]
 8012c08:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c0a:	9604      	str	r6, [sp, #16]
 8012c0c:	f000 f9b4 	bl	8012f78 <memcpy>
 8012c10:	b019      	add	sp, #100	; 0x64
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c16:	2300      	movs	r3, #0
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	deff      	udf	#255	; 0xff
 8012c1c:	6993      	ldr	r3, [r2, #24]
 8012c1e:	deff      	udf	#255	; 0xff
 8012c20:	6863      	ldr	r3, [r4, #4]
 8012c22:	deff      	udf	#255	; 0xff
 8012c24:	f04f 0801 	mov.w	r8, #1
 8012c28:	e7be      	b.n	8012ba8 <forward_lstm+0x16c>
 8012c2a:	f8db 300c 	ldr.w	r3, [fp, #12]
 8012c2e:	f04f 0800 	mov.w	r8, #0
 8012c32:	68f7      	ldr	r7, [r6, #12]
 8012c34:	69b2      	ldr	r2, [r6, #24]
 8012c36:	46c4      	mov	ip, r8
 8012c38:	68de      	ldr	r6, [r3, #12]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	6892      	ldr	r2, [r2, #8]
 8012c3e:	9303      	str	r3, [sp, #12]
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f8cd 8014 	str.w	r8, [sp, #20]
 8012c46:	9309      	str	r3, [sp, #36]	; 0x24
 8012c48:	4643      	mov	r3, r8
 8012c4a:	9601      	str	r6, [sp, #4]
 8012c4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c50:	9204      	str	r2, [sp, #16]
 8012c52:	f8cd 801c 	str.w	r8, [sp, #28]
 8012c56:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8012c5a:	e743      	b.n	8012ae4 <forward_lstm+0xa8>
 8012c5c:	4653      	mov	r3, sl
 8012c5e:	fb0c f504 	mul.w	r5, ip, r4
 8012c62:	46da      	mov	sl, fp
 8012c64:	9e04      	ldr	r6, [sp, #16]
 8012c66:	469b      	mov	fp, r3
 8012c68:	e001      	b.n	8012c6e <forward_lstm+0x232>
 8012c6a:	2c00      	cmp	r4, #0
 8012c6c:	dbd0      	blt.n	8012c10 <forward_lstm+0x1d4>
 8012c6e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8012c72:	463a      	mov	r2, r7
 8012c74:	9b03      	ldr	r3, [sp, #12]
 8012c76:	4659      	mov	r1, fp
 8012c78:	6880      	ldr	r0, [r0, #8]
 8012c7a:	4444      	add	r4, r8
 8012c7c:	4428      	add	r0, r5
 8012c7e:	441d      	add	r5, r3
 8012c80:	f7ff fa94 	bl	80121ac <lstm_cell>
 8012c84:	4630      	mov	r0, r6
 8012c86:	9a02      	ldr	r2, [sp, #8]
 8012c88:	444e      	add	r6, r9
 8012c8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c8c:	f000 f974 	bl	8012f78 <memcpy>
 8012c90:	9b01      	ldr	r3, [sp, #4]
 8012c92:	429c      	cmp	r4, r3
 8012c94:	dbe9      	blt.n	8012c6a <forward_lstm+0x22e>
 8012c96:	b019      	add	sp, #100	; 0x64
 8012c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9c:	f111 0518 	adds.w	r5, r1, #24
 8012ca0:	d0c3      	beq.n	8012c2a <forward_lstm+0x1ee>
 8012ca2:	8b0f      	ldrh	r7, [r1, #24]
 8012ca4:	4615      	mov	r5, r2
 8012ca6:	2f01      	cmp	r7, #1
 8012ca8:	f63f aeec 	bhi.w	8012a84 <forward_lstm+0x48>
 8012cac:	2a00      	cmp	r2, #0
 8012cae:	d0bc      	beq.n	8012c2a <forward_lstm+0x1ee>
 8012cb0:	f04f 0800 	mov.w	r8, #0
 8012cb4:	e6eb      	b.n	8012a8e <forward_lstm+0x52>
 8012cb6:	469b      	mov	fp, r3
 8012cb8:	e6cf      	b.n	8012a5a <forward_lstm+0x1e>
 8012cba:	9706      	str	r7, [sp, #24]
 8012cbc:	e70c      	b.n	8012ad8 <forward_lstm+0x9c>
 8012cbe:	f8cd 9014 	str.w	r9, [sp, #20]
 8012cc2:	e703      	b.n	8012acc <forward_lstm+0x90>
 8012cc4:	9207      	str	r2, [sp, #28]
 8012cc6:	e70d      	b.n	8012ae4 <forward_lstm+0xa8>
 8012cc8:	0801219d 	.word	0x0801219d

08012ccc <nl_func_sigmoid_array_f32>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cd2:	688c      	ldr	r4, [r1, #8]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	18e4      	adds	r4, r4, r3
 8012cda:	ed2d 8b02 	vpush	{d8}
 8012cde:	6885      	ldr	r5, [r0, #8]
 8012ce0:	d218      	bcs.n	8012d14 <nl_func_sigmoid_array_f32+0x48>
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012ce8:	460f      	mov	r7, r1
 8012cea:	3404      	adds	r4, #4
 8012cec:	441d      	add	r5, r3
 8012cee:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012cf2:	1f26      	subs	r6, r4, #4
 8012cf4:	eeb1 0a40 	vneg.f32	s0, s0
 8012cf8:	f003 f82c 	bl	8015d54 <expf>
 8012cfc:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012d00:	f1a4 0308 	sub.w	r3, r4, #8
 8012d04:	4634      	mov	r4, r6
 8012d06:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8012d0a:	ed65 7a01 	vstmdb	r5!, {s15}
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d9ec      	bls.n	8012cee <nl_func_sigmoid_array_f32+0x22>
 8012d14:	ecbd 8b02 	vpop	{d8}
 8012d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d1a:	bf00      	nop

08012d1c <nl_func_tanh_array_f32>:
 8012d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012d22:	688c      	ldr	r4, [r1, #8]
 8012d24:	6885      	ldr	r5, [r0, #8]
 8012d26:	4413      	add	r3, r2
 8012d28:	009b      	lsls	r3, r3, #2
 8012d2a:	18e4      	adds	r4, r4, r3
 8012d2c:	d210      	bcs.n	8012d50 <nl_func_tanh_array_f32+0x34>
 8012d2e:	3304      	adds	r3, #4
 8012d30:	460f      	mov	r7, r1
 8012d32:	3404      	adds	r4, #4
 8012d34:	441d      	add	r5, r3
 8012d36:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012d3a:	1f26      	subs	r6, r4, #4
 8012d3c:	f002 ffb8 	bl	8015cb0 <tanhf>
 8012d40:	ed25 0a01 	vstmdb	r5!, {s0}
 8012d44:	f1a4 0308 	sub.w	r3, r4, #8
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	4634      	mov	r4, r6
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d9f2      	bls.n	8012d36 <nl_func_tanh_array_f32+0x1a>
 8012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d52:	bf00      	nop

08012d54 <ai_check_custom_types>:
 8012d54:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <ai_check_custom_types+0x50>)
 8012d56:	b082      	sub	sp, #8
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	9301      	str	r3, [sp, #4]
 8012d5c:	b118      	cbz	r0, 8012d66 <ai_check_custom_types+0x12>
 8012d5e:	7803      	ldrb	r3, [r0, #0]
 8012d60:	2b03      	cmp	r3, #3
 8012d62:	d002      	beq.n	8012d6a <ai_check_custom_types+0x16>
 8012d64:	2000      	movs	r0, #0
 8012d66:	b002      	add	sp, #8
 8012d68:	4770      	bx	lr
 8012d6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d004      	beq.n	8012d7c <ai_check_custom_types+0x28>
 8012d72:	2001      	movs	r0, #1
 8012d74:	f080 0001 	eor.w	r0, r0, #1
 8012d78:	b002      	add	sp, #8
 8012d7a:	4770      	bx	lr
 8012d7c:	7842      	ldrb	r2, [r0, #1]
 8012d7e:	3001      	adds	r0, #1
 8012d80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d1f4      	bne.n	8012d72 <ai_check_custom_types+0x1e>
 8012d88:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012d8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d1ee      	bne.n	8012d72 <ai_check_custom_types+0x1e>
 8012d94:	7842      	ldrb	r2, [r0, #1]
 8012d96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d1e9      	bne.n	8012d72 <ai_check_custom_types+0x1e>
 8012d9e:	2000      	movs	r0, #0
 8012da0:	e7e8      	b.n	8012d74 <ai_check_custom_types+0x20>
 8012da2:	bf00      	nop
 8012da4:	08016390 	.word	0x08016390

08012da8 <ai_layers_forward_all>:
 8012da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012daa:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8012dac:	4604      	mov	r4, r0
 8012dae:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8012db0:	b316      	cbz	r6, 8012df8 <ai_layers_forward_all+0x50>
 8012db2:	b1c5      	cbz	r5, 8012de6 <ai_layers_forward_all+0x3e>
 8012db4:	6545      	str	r5, [r0, #84]	; 0x54
 8012db6:	4629      	mov	r1, r5
 8012db8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012dba:	2001      	movs	r0, #1
 8012dbc:	47b0      	blx	r6
 8012dbe:	2700      	movs	r7, #0
 8012dc0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012dc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dc4:	2002      	movs	r0, #2
 8012dc6:	47b0      	blx	r6
 8012dc8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012dca:	692b      	ldr	r3, [r5, #16]
 8012dcc:	4628      	mov	r0, r5
 8012dce:	4798      	blx	r3
 8012dd0:	68eb      	ldr	r3, [r5, #12]
 8012dd2:	2003      	movs	r0, #3
 8012dd4:	429d      	cmp	r5, r3
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	d006      	beq.n	8012de8 <ai_layers_forward_all+0x40>
 8012dda:	6563      	str	r3, [r4, #84]	; 0x54
 8012ddc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dde:	47b0      	blx	r6
 8012de0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012de2:	2900      	cmp	r1, #0
 8012de4:	d1ed      	bne.n	8012dc2 <ai_layers_forward_all+0x1a>
 8012de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012de8:	2100      	movs	r1, #0
 8012dea:	6567      	str	r7, [r4, #84]	; 0x54
 8012dec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dee:	47b0      	blx	r6
 8012df0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8012df2:	2900      	cmp	r1, #0
 8012df4:	d1e5      	bne.n	8012dc2 <ai_layers_forward_all+0x1a>
 8012df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df8:	2d00      	cmp	r5, #0
 8012dfa:	d0f4      	beq.n	8012de6 <ai_layers_forward_all+0x3e>
 8012dfc:	6545      	str	r5, [r0, #84]	; 0x54
 8012dfe:	692b      	ldr	r3, [r5, #16]
 8012e00:	4628      	mov	r0, r5
 8012e02:	4798      	blx	r3
 8012e04:	68eb      	ldr	r3, [r5, #12]
 8012e06:	42ab      	cmp	r3, r5
 8012e08:	461d      	mov	r5, r3
 8012e0a:	d003      	beq.n	8012e14 <ai_layers_forward_all+0x6c>
 8012e0c:	6563      	str	r3, [r4, #84]	; 0x54
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1f5      	bne.n	8012dfe <ai_layers_forward_all+0x56>
 8012e12:	e7e8      	b.n	8012de6 <ai_layers_forward_all+0x3e>
 8012e14:	2300      	movs	r3, #0
 8012e16:	6563      	str	r3, [r4, #84]	; 0x54
 8012e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e1a:	bf00      	nop

08012e1c <ai_array_to_buffer_fmt>:
 8012e1c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d01f      	beq.n	8012e64 <ai_array_to_buffer_fmt+0x48>
 8012e24:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8012e28:	4a1b      	ldr	r2, [pc, #108]	; (8012e98 <ai_array_to_buffer_fmt+0x7c>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d00a      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e2e:	dc0d      	bgt.n	8012e4c <ai_array_to_buffer_fmt+0x30>
 8012e30:	4a1a      	ldr	r2, [pc, #104]	; (8012e9c <ai_array_to_buffer_fmt+0x80>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d006      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e36:	dd1d      	ble.n	8012e74 <ai_array_to_buffer_fmt+0x58>
 8012e38:	4a19      	ldr	r2, [pc, #100]	; (8012ea0 <ai_array_to_buffer_fmt+0x84>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d002      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e3e:	320f      	adds	r2, #15
 8012e40:	4293      	cmp	r3, r2
 8012e42:	d10d      	bne.n	8012e60 <ai_array_to_buffer_fmt+0x44>
 8012e44:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012e48:	4318      	orrs	r0, r3
 8012e4a:	4770      	bx	lr
 8012e4c:	4a15      	ldr	r2, [pc, #84]	; (8012ea4 <ai_array_to_buffer_fmt+0x88>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d0f8      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e52:	dd18      	ble.n	8012e86 <ai_array_to_buffer_fmt+0x6a>
 8012e54:	4a14      	ldr	r2, [pc, #80]	; (8012ea8 <ai_array_to_buffer_fmt+0x8c>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d0f4      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e5a:	4a14      	ldr	r2, [pc, #80]	; (8012eac <ai_array_to_buffer_fmt+0x90>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d0f1      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e60:	2340      	movs	r3, #64	; 0x40
 8012e62:	e7ef      	b.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e64:	4b12      	ldr	r3, [pc, #72]	; (8012eb0 <ai_array_to_buffer_fmt+0x94>)
 8012e66:	4003      	ands	r3, r0
 8012e68:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012e70:	4318      	orrs	r0, r3
 8012e72:	4770      	bx	lr
 8012e74:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d0e3      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d0df      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e84:	e7ec      	b.n	8012e60 <ai_array_to_buffer_fmt+0x44>
 8012e86:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d0da      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e8e:	3207      	adds	r2, #7
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d0d7      	beq.n	8012e44 <ai_array_to_buffer_fmt+0x28>
 8012e94:	e7e4      	b.n	8012e60 <ai_array_to_buffer_fmt+0x44>
 8012e96:	bf00      	nop
 8012e98:	00840040 	.word	0x00840040
 8012e9c:	00040447 	.word	0x00040447
 8012ea0:	00040840 	.word	0x00040840
 8012ea4:	00840840 	.word	0x00840840
 8012ea8:	0084084f 	.word	0x0084084f
 8012eac:	01821040 	.word	0x01821040
 8012eb0:	00803fff 	.word	0x00803fff

08012eb4 <ai_array_get_byte_size>:
 8012eb4:	b1e1      	cbz	r1, 8012ef0 <ai_array_get_byte_size+0x3c>
 8012eb6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012eba:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012ebe:	b410      	push	{r4}
 8012ec0:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8012ec4:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8012ec8:	4423      	add	r3, r4
 8012eca:	2804      	cmp	r0, #4
 8012ecc:	fb01 f103 	mul.w	r1, r1, r3
 8012ed0:	f101 0107 	add.w	r1, r1, #7
 8012ed4:	f021 0107 	bic.w	r1, r1, #7
 8012ed8:	fa21 f102 	lsr.w	r1, r1, r2
 8012edc:	d00a      	beq.n	8012ef4 <ai_array_get_byte_size+0x40>
 8012ede:	2808      	cmp	r0, #8
 8012ee0:	d101      	bne.n	8012ee6 <ai_array_get_byte_size+0x32>
 8012ee2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012ee6:	3107      	adds	r1, #7
 8012ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012eec:	08c8      	lsrs	r0, r1, #3
 8012eee:	4770      	bx	lr
 8012ef0:	4608      	mov	r0, r1
 8012ef2:	4770      	bx	lr
 8012ef4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8012ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012efc:	3107      	adds	r1, #7
 8012efe:	08c8      	lsrs	r0, r1, #3
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop

08012f04 <__errno>:
 8012f04:	4b01      	ldr	r3, [pc, #4]	; (8012f0c <__errno+0x8>)
 8012f06:	6818      	ldr	r0, [r3, #0]
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop
 8012f0c:	20000780 	.word	0x20000780

08012f10 <__libc_init_array>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	4d0d      	ldr	r5, [pc, #52]	; (8012f48 <__libc_init_array+0x38>)
 8012f14:	4c0d      	ldr	r4, [pc, #52]	; (8012f4c <__libc_init_array+0x3c>)
 8012f16:	1b64      	subs	r4, r4, r5
 8012f18:	10a4      	asrs	r4, r4, #2
 8012f1a:	2600      	movs	r6, #0
 8012f1c:	42a6      	cmp	r6, r4
 8012f1e:	d109      	bne.n	8012f34 <__libc_init_array+0x24>
 8012f20:	4d0b      	ldr	r5, [pc, #44]	; (8012f50 <__libc_init_array+0x40>)
 8012f22:	4c0c      	ldr	r4, [pc, #48]	; (8012f54 <__libc_init_array+0x44>)
 8012f24:	f003 f9b8 	bl	8016298 <_init>
 8012f28:	1b64      	subs	r4, r4, r5
 8012f2a:	10a4      	asrs	r4, r4, #2
 8012f2c:	2600      	movs	r6, #0
 8012f2e:	42a6      	cmp	r6, r4
 8012f30:	d105      	bne.n	8012f3e <__libc_init_array+0x2e>
 8012f32:	bd70      	pop	{r4, r5, r6, pc}
 8012f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f38:	4798      	blx	r3
 8012f3a:	3601      	adds	r6, #1
 8012f3c:	e7ee      	b.n	8012f1c <__libc_init_array+0xc>
 8012f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f42:	4798      	blx	r3
 8012f44:	3601      	adds	r6, #1
 8012f46:	e7f2      	b.n	8012f2e <__libc_init_array+0x1e>
 8012f48:	080198c4 	.word	0x080198c4
 8012f4c:	080198c4 	.word	0x080198c4
 8012f50:	080198c4 	.word	0x080198c4
 8012f54:	080198c8 	.word	0x080198c8

08012f58 <malloc>:
 8012f58:	4b02      	ldr	r3, [pc, #8]	; (8012f64 <malloc+0xc>)
 8012f5a:	4601      	mov	r1, r0
 8012f5c:	6818      	ldr	r0, [r3, #0]
 8012f5e:	f000 b871 	b.w	8013044 <_malloc_r>
 8012f62:	bf00      	nop
 8012f64:	20000780 	.word	0x20000780

08012f68 <free>:
 8012f68:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <free+0xc>)
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	f000 b819 	b.w	8012fa4 <_free_r>
 8012f72:	bf00      	nop
 8012f74:	20000780 	.word	0x20000780

08012f78 <memcpy>:
 8012f78:	440a      	add	r2, r1
 8012f7a:	4291      	cmp	r1, r2
 8012f7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012f80:	d100      	bne.n	8012f84 <memcpy+0xc>
 8012f82:	4770      	bx	lr
 8012f84:	b510      	push	{r4, lr}
 8012f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f8e:	4291      	cmp	r1, r2
 8012f90:	d1f9      	bne.n	8012f86 <memcpy+0xe>
 8012f92:	bd10      	pop	{r4, pc}

08012f94 <memset>:
 8012f94:	4402      	add	r2, r0
 8012f96:	4603      	mov	r3, r0
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d100      	bne.n	8012f9e <memset+0xa>
 8012f9c:	4770      	bx	lr
 8012f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8012fa2:	e7f9      	b.n	8012f98 <memset+0x4>

08012fa4 <_free_r>:
 8012fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fa6:	2900      	cmp	r1, #0
 8012fa8:	d048      	beq.n	801303c <_free_r+0x98>
 8012faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fae:	9001      	str	r0, [sp, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8012fb6:	bfb8      	it	lt
 8012fb8:	18e4      	addlt	r4, r4, r3
 8012fba:	f001 fbb5 	bl	8014728 <__malloc_lock>
 8012fbe:	4a20      	ldr	r2, [pc, #128]	; (8013040 <_free_r+0x9c>)
 8012fc0:	9801      	ldr	r0, [sp, #4]
 8012fc2:	6813      	ldr	r3, [r2, #0]
 8012fc4:	4615      	mov	r5, r2
 8012fc6:	b933      	cbnz	r3, 8012fd6 <_free_r+0x32>
 8012fc8:	6063      	str	r3, [r4, #4]
 8012fca:	6014      	str	r4, [r2, #0]
 8012fcc:	b003      	add	sp, #12
 8012fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012fd2:	f001 bbaf 	b.w	8014734 <__malloc_unlock>
 8012fd6:	42a3      	cmp	r3, r4
 8012fd8:	d90b      	bls.n	8012ff2 <_free_r+0x4e>
 8012fda:	6821      	ldr	r1, [r4, #0]
 8012fdc:	1862      	adds	r2, r4, r1
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	bf04      	itt	eq
 8012fe2:	681a      	ldreq	r2, [r3, #0]
 8012fe4:	685b      	ldreq	r3, [r3, #4]
 8012fe6:	6063      	str	r3, [r4, #4]
 8012fe8:	bf04      	itt	eq
 8012fea:	1852      	addeq	r2, r2, r1
 8012fec:	6022      	streq	r2, [r4, #0]
 8012fee:	602c      	str	r4, [r5, #0]
 8012ff0:	e7ec      	b.n	8012fcc <_free_r+0x28>
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	b10b      	cbz	r3, 8012ffc <_free_r+0x58>
 8012ff8:	42a3      	cmp	r3, r4
 8012ffa:	d9fa      	bls.n	8012ff2 <_free_r+0x4e>
 8012ffc:	6811      	ldr	r1, [r2, #0]
 8012ffe:	1855      	adds	r5, r2, r1
 8013000:	42a5      	cmp	r5, r4
 8013002:	d10b      	bne.n	801301c <_free_r+0x78>
 8013004:	6824      	ldr	r4, [r4, #0]
 8013006:	4421      	add	r1, r4
 8013008:	1854      	adds	r4, r2, r1
 801300a:	42a3      	cmp	r3, r4
 801300c:	6011      	str	r1, [r2, #0]
 801300e:	d1dd      	bne.n	8012fcc <_free_r+0x28>
 8013010:	681c      	ldr	r4, [r3, #0]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	6053      	str	r3, [r2, #4]
 8013016:	4421      	add	r1, r4
 8013018:	6011      	str	r1, [r2, #0]
 801301a:	e7d7      	b.n	8012fcc <_free_r+0x28>
 801301c:	d902      	bls.n	8013024 <_free_r+0x80>
 801301e:	230c      	movs	r3, #12
 8013020:	6003      	str	r3, [r0, #0]
 8013022:	e7d3      	b.n	8012fcc <_free_r+0x28>
 8013024:	6825      	ldr	r5, [r4, #0]
 8013026:	1961      	adds	r1, r4, r5
 8013028:	428b      	cmp	r3, r1
 801302a:	bf04      	itt	eq
 801302c:	6819      	ldreq	r1, [r3, #0]
 801302e:	685b      	ldreq	r3, [r3, #4]
 8013030:	6063      	str	r3, [r4, #4]
 8013032:	bf04      	itt	eq
 8013034:	1949      	addeq	r1, r1, r5
 8013036:	6021      	streq	r1, [r4, #0]
 8013038:	6054      	str	r4, [r2, #4]
 801303a:	e7c7      	b.n	8012fcc <_free_r+0x28>
 801303c:	b003      	add	sp, #12
 801303e:	bd30      	pop	{r4, r5, pc}
 8013040:	200009f8 	.word	0x200009f8

08013044 <_malloc_r>:
 8013044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013046:	1ccd      	adds	r5, r1, #3
 8013048:	f025 0503 	bic.w	r5, r5, #3
 801304c:	3508      	adds	r5, #8
 801304e:	2d0c      	cmp	r5, #12
 8013050:	bf38      	it	cc
 8013052:	250c      	movcc	r5, #12
 8013054:	2d00      	cmp	r5, #0
 8013056:	4606      	mov	r6, r0
 8013058:	db01      	blt.n	801305e <_malloc_r+0x1a>
 801305a:	42a9      	cmp	r1, r5
 801305c:	d903      	bls.n	8013066 <_malloc_r+0x22>
 801305e:	230c      	movs	r3, #12
 8013060:	6033      	str	r3, [r6, #0]
 8013062:	2000      	movs	r0, #0
 8013064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013066:	f001 fb5f 	bl	8014728 <__malloc_lock>
 801306a:	4921      	ldr	r1, [pc, #132]	; (80130f0 <_malloc_r+0xac>)
 801306c:	680a      	ldr	r2, [r1, #0]
 801306e:	4614      	mov	r4, r2
 8013070:	b99c      	cbnz	r4, 801309a <_malloc_r+0x56>
 8013072:	4f20      	ldr	r7, [pc, #128]	; (80130f4 <_malloc_r+0xb0>)
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	b923      	cbnz	r3, 8013082 <_malloc_r+0x3e>
 8013078:	4621      	mov	r1, r4
 801307a:	4630      	mov	r0, r6
 801307c:	f000 fca6 	bl	80139cc <_sbrk_r>
 8013080:	6038      	str	r0, [r7, #0]
 8013082:	4629      	mov	r1, r5
 8013084:	4630      	mov	r0, r6
 8013086:	f000 fca1 	bl	80139cc <_sbrk_r>
 801308a:	1c43      	adds	r3, r0, #1
 801308c:	d123      	bne.n	80130d6 <_malloc_r+0x92>
 801308e:	230c      	movs	r3, #12
 8013090:	6033      	str	r3, [r6, #0]
 8013092:	4630      	mov	r0, r6
 8013094:	f001 fb4e 	bl	8014734 <__malloc_unlock>
 8013098:	e7e3      	b.n	8013062 <_malloc_r+0x1e>
 801309a:	6823      	ldr	r3, [r4, #0]
 801309c:	1b5b      	subs	r3, r3, r5
 801309e:	d417      	bmi.n	80130d0 <_malloc_r+0x8c>
 80130a0:	2b0b      	cmp	r3, #11
 80130a2:	d903      	bls.n	80130ac <_malloc_r+0x68>
 80130a4:	6023      	str	r3, [r4, #0]
 80130a6:	441c      	add	r4, r3
 80130a8:	6025      	str	r5, [r4, #0]
 80130aa:	e004      	b.n	80130b6 <_malloc_r+0x72>
 80130ac:	6863      	ldr	r3, [r4, #4]
 80130ae:	42a2      	cmp	r2, r4
 80130b0:	bf0c      	ite	eq
 80130b2:	600b      	streq	r3, [r1, #0]
 80130b4:	6053      	strne	r3, [r2, #4]
 80130b6:	4630      	mov	r0, r6
 80130b8:	f001 fb3c 	bl	8014734 <__malloc_unlock>
 80130bc:	f104 000b 	add.w	r0, r4, #11
 80130c0:	1d23      	adds	r3, r4, #4
 80130c2:	f020 0007 	bic.w	r0, r0, #7
 80130c6:	1ac2      	subs	r2, r0, r3
 80130c8:	d0cc      	beq.n	8013064 <_malloc_r+0x20>
 80130ca:	1a1b      	subs	r3, r3, r0
 80130cc:	50a3      	str	r3, [r4, r2]
 80130ce:	e7c9      	b.n	8013064 <_malloc_r+0x20>
 80130d0:	4622      	mov	r2, r4
 80130d2:	6864      	ldr	r4, [r4, #4]
 80130d4:	e7cc      	b.n	8013070 <_malloc_r+0x2c>
 80130d6:	1cc4      	adds	r4, r0, #3
 80130d8:	f024 0403 	bic.w	r4, r4, #3
 80130dc:	42a0      	cmp	r0, r4
 80130de:	d0e3      	beq.n	80130a8 <_malloc_r+0x64>
 80130e0:	1a21      	subs	r1, r4, r0
 80130e2:	4630      	mov	r0, r6
 80130e4:	f000 fc72 	bl	80139cc <_sbrk_r>
 80130e8:	3001      	adds	r0, #1
 80130ea:	d1dd      	bne.n	80130a8 <_malloc_r+0x64>
 80130ec:	e7cf      	b.n	801308e <_malloc_r+0x4a>
 80130ee:	bf00      	nop
 80130f0:	200009f8 	.word	0x200009f8
 80130f4:	200009fc 	.word	0x200009fc

080130f8 <__cvt>:
 80130f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130fc:	ec55 4b10 	vmov	r4, r5, d0
 8013100:	2d00      	cmp	r5, #0
 8013102:	460e      	mov	r6, r1
 8013104:	4619      	mov	r1, r3
 8013106:	462b      	mov	r3, r5
 8013108:	bfbb      	ittet	lt
 801310a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801310e:	461d      	movlt	r5, r3
 8013110:	2300      	movge	r3, #0
 8013112:	232d      	movlt	r3, #45	; 0x2d
 8013114:	700b      	strb	r3, [r1, #0]
 8013116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013118:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801311c:	4691      	mov	r9, r2
 801311e:	f023 0820 	bic.w	r8, r3, #32
 8013122:	bfbc      	itt	lt
 8013124:	4622      	movlt	r2, r4
 8013126:	4614      	movlt	r4, r2
 8013128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801312c:	d005      	beq.n	801313a <__cvt+0x42>
 801312e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013132:	d100      	bne.n	8013136 <__cvt+0x3e>
 8013134:	3601      	adds	r6, #1
 8013136:	2102      	movs	r1, #2
 8013138:	e000      	b.n	801313c <__cvt+0x44>
 801313a:	2103      	movs	r1, #3
 801313c:	ab03      	add	r3, sp, #12
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	ab02      	add	r3, sp, #8
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	ec45 4b10 	vmov	d0, r4, r5
 8013148:	4653      	mov	r3, sl
 801314a:	4632      	mov	r2, r6
 801314c:	f000 fcfc 	bl	8013b48 <_dtoa_r>
 8013150:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013154:	4607      	mov	r7, r0
 8013156:	d102      	bne.n	801315e <__cvt+0x66>
 8013158:	f019 0f01 	tst.w	r9, #1
 801315c:	d022      	beq.n	80131a4 <__cvt+0xac>
 801315e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013162:	eb07 0906 	add.w	r9, r7, r6
 8013166:	d110      	bne.n	801318a <__cvt+0x92>
 8013168:	783b      	ldrb	r3, [r7, #0]
 801316a:	2b30      	cmp	r3, #48	; 0x30
 801316c:	d10a      	bne.n	8013184 <__cvt+0x8c>
 801316e:	2200      	movs	r2, #0
 8013170:	2300      	movs	r3, #0
 8013172:	4620      	mov	r0, r4
 8013174:	4629      	mov	r1, r5
 8013176:	f7ed fcc7 	bl	8000b08 <__aeabi_dcmpeq>
 801317a:	b918      	cbnz	r0, 8013184 <__cvt+0x8c>
 801317c:	f1c6 0601 	rsb	r6, r6, #1
 8013180:	f8ca 6000 	str.w	r6, [sl]
 8013184:	f8da 3000 	ldr.w	r3, [sl]
 8013188:	4499      	add	r9, r3
 801318a:	2200      	movs	r2, #0
 801318c:	2300      	movs	r3, #0
 801318e:	4620      	mov	r0, r4
 8013190:	4629      	mov	r1, r5
 8013192:	f7ed fcb9 	bl	8000b08 <__aeabi_dcmpeq>
 8013196:	b108      	cbz	r0, 801319c <__cvt+0xa4>
 8013198:	f8cd 900c 	str.w	r9, [sp, #12]
 801319c:	2230      	movs	r2, #48	; 0x30
 801319e:	9b03      	ldr	r3, [sp, #12]
 80131a0:	454b      	cmp	r3, r9
 80131a2:	d307      	bcc.n	80131b4 <__cvt+0xbc>
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131a8:	1bdb      	subs	r3, r3, r7
 80131aa:	4638      	mov	r0, r7
 80131ac:	6013      	str	r3, [r2, #0]
 80131ae:	b004      	add	sp, #16
 80131b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131b4:	1c59      	adds	r1, r3, #1
 80131b6:	9103      	str	r1, [sp, #12]
 80131b8:	701a      	strb	r2, [r3, #0]
 80131ba:	e7f0      	b.n	801319e <__cvt+0xa6>

080131bc <__exponent>:
 80131bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131be:	4603      	mov	r3, r0
 80131c0:	2900      	cmp	r1, #0
 80131c2:	bfb8      	it	lt
 80131c4:	4249      	neglt	r1, r1
 80131c6:	f803 2b02 	strb.w	r2, [r3], #2
 80131ca:	bfb4      	ite	lt
 80131cc:	222d      	movlt	r2, #45	; 0x2d
 80131ce:	222b      	movge	r2, #43	; 0x2b
 80131d0:	2909      	cmp	r1, #9
 80131d2:	7042      	strb	r2, [r0, #1]
 80131d4:	dd2a      	ble.n	801322c <__exponent+0x70>
 80131d6:	f10d 0407 	add.w	r4, sp, #7
 80131da:	46a4      	mov	ip, r4
 80131dc:	270a      	movs	r7, #10
 80131de:	46a6      	mov	lr, r4
 80131e0:	460a      	mov	r2, r1
 80131e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80131e6:	fb07 1516 	mls	r5, r7, r6, r1
 80131ea:	3530      	adds	r5, #48	; 0x30
 80131ec:	2a63      	cmp	r2, #99	; 0x63
 80131ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80131f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80131f6:	4631      	mov	r1, r6
 80131f8:	dcf1      	bgt.n	80131de <__exponent+0x22>
 80131fa:	3130      	adds	r1, #48	; 0x30
 80131fc:	f1ae 0502 	sub.w	r5, lr, #2
 8013200:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013204:	1c44      	adds	r4, r0, #1
 8013206:	4629      	mov	r1, r5
 8013208:	4561      	cmp	r1, ip
 801320a:	d30a      	bcc.n	8013222 <__exponent+0x66>
 801320c:	f10d 0209 	add.w	r2, sp, #9
 8013210:	eba2 020e 	sub.w	r2, r2, lr
 8013214:	4565      	cmp	r5, ip
 8013216:	bf88      	it	hi
 8013218:	2200      	movhi	r2, #0
 801321a:	4413      	add	r3, r2
 801321c:	1a18      	subs	r0, r3, r0
 801321e:	b003      	add	sp, #12
 8013220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013226:	f804 2f01 	strb.w	r2, [r4, #1]!
 801322a:	e7ed      	b.n	8013208 <__exponent+0x4c>
 801322c:	2330      	movs	r3, #48	; 0x30
 801322e:	3130      	adds	r1, #48	; 0x30
 8013230:	7083      	strb	r3, [r0, #2]
 8013232:	70c1      	strb	r1, [r0, #3]
 8013234:	1d03      	adds	r3, r0, #4
 8013236:	e7f1      	b.n	801321c <__exponent+0x60>

08013238 <_printf_float>:
 8013238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	ed2d 8b02 	vpush	{d8}
 8013240:	b08d      	sub	sp, #52	; 0x34
 8013242:	460c      	mov	r4, r1
 8013244:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013248:	4616      	mov	r6, r2
 801324a:	461f      	mov	r7, r3
 801324c:	4605      	mov	r5, r0
 801324e:	f001 fa67 	bl	8014720 <_localeconv_r>
 8013252:	f8d0 a000 	ldr.w	sl, [r0]
 8013256:	4650      	mov	r0, sl
 8013258:	f7ec ffda 	bl	8000210 <strlen>
 801325c:	2300      	movs	r3, #0
 801325e:	930a      	str	r3, [sp, #40]	; 0x28
 8013260:	6823      	ldr	r3, [r4, #0]
 8013262:	9305      	str	r3, [sp, #20]
 8013264:	f8d8 3000 	ldr.w	r3, [r8]
 8013268:	f894 b018 	ldrb.w	fp, [r4, #24]
 801326c:	3307      	adds	r3, #7
 801326e:	f023 0307 	bic.w	r3, r3, #7
 8013272:	f103 0208 	add.w	r2, r3, #8
 8013276:	f8c8 2000 	str.w	r2, [r8]
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013282:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801328a:	9307      	str	r3, [sp, #28]
 801328c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013290:	ee08 0a10 	vmov	s16, r0
 8013294:	4b9f      	ldr	r3, [pc, #636]	; (8013514 <_printf_float+0x2dc>)
 8013296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801329a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801329e:	f7ed fc65 	bl	8000b6c <__aeabi_dcmpun>
 80132a2:	bb88      	cbnz	r0, 8013308 <_printf_float+0xd0>
 80132a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132a8:	4b9a      	ldr	r3, [pc, #616]	; (8013514 <_printf_float+0x2dc>)
 80132aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132ae:	f7ed fc3f 	bl	8000b30 <__aeabi_dcmple>
 80132b2:	bb48      	cbnz	r0, 8013308 <_printf_float+0xd0>
 80132b4:	2200      	movs	r2, #0
 80132b6:	2300      	movs	r3, #0
 80132b8:	4640      	mov	r0, r8
 80132ba:	4649      	mov	r1, r9
 80132bc:	f7ed fc2e 	bl	8000b1c <__aeabi_dcmplt>
 80132c0:	b110      	cbz	r0, 80132c8 <_printf_float+0x90>
 80132c2:	232d      	movs	r3, #45	; 0x2d
 80132c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132c8:	4b93      	ldr	r3, [pc, #588]	; (8013518 <_printf_float+0x2e0>)
 80132ca:	4894      	ldr	r0, [pc, #592]	; (801351c <_printf_float+0x2e4>)
 80132cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80132d0:	bf94      	ite	ls
 80132d2:	4698      	movls	r8, r3
 80132d4:	4680      	movhi	r8, r0
 80132d6:	2303      	movs	r3, #3
 80132d8:	6123      	str	r3, [r4, #16]
 80132da:	9b05      	ldr	r3, [sp, #20]
 80132dc:	f023 0204 	bic.w	r2, r3, #4
 80132e0:	6022      	str	r2, [r4, #0]
 80132e2:	f04f 0900 	mov.w	r9, #0
 80132e6:	9700      	str	r7, [sp, #0]
 80132e8:	4633      	mov	r3, r6
 80132ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80132ec:	4621      	mov	r1, r4
 80132ee:	4628      	mov	r0, r5
 80132f0:	f000 f9d8 	bl	80136a4 <_printf_common>
 80132f4:	3001      	adds	r0, #1
 80132f6:	f040 8090 	bne.w	801341a <_printf_float+0x1e2>
 80132fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132fe:	b00d      	add	sp, #52	; 0x34
 8013300:	ecbd 8b02 	vpop	{d8}
 8013304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013308:	4642      	mov	r2, r8
 801330a:	464b      	mov	r3, r9
 801330c:	4640      	mov	r0, r8
 801330e:	4649      	mov	r1, r9
 8013310:	f7ed fc2c 	bl	8000b6c <__aeabi_dcmpun>
 8013314:	b140      	cbz	r0, 8013328 <_printf_float+0xf0>
 8013316:	464b      	mov	r3, r9
 8013318:	2b00      	cmp	r3, #0
 801331a:	bfbc      	itt	lt
 801331c:	232d      	movlt	r3, #45	; 0x2d
 801331e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013322:	487f      	ldr	r0, [pc, #508]	; (8013520 <_printf_float+0x2e8>)
 8013324:	4b7f      	ldr	r3, [pc, #508]	; (8013524 <_printf_float+0x2ec>)
 8013326:	e7d1      	b.n	80132cc <_printf_float+0x94>
 8013328:	6863      	ldr	r3, [r4, #4]
 801332a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801332e:	9206      	str	r2, [sp, #24]
 8013330:	1c5a      	adds	r2, r3, #1
 8013332:	d13f      	bne.n	80133b4 <_printf_float+0x17c>
 8013334:	2306      	movs	r3, #6
 8013336:	6063      	str	r3, [r4, #4]
 8013338:	9b05      	ldr	r3, [sp, #20]
 801333a:	6861      	ldr	r1, [r4, #4]
 801333c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013340:	2300      	movs	r3, #0
 8013342:	9303      	str	r3, [sp, #12]
 8013344:	ab0a      	add	r3, sp, #40	; 0x28
 8013346:	e9cd b301 	strd	fp, r3, [sp, #4]
 801334a:	ab09      	add	r3, sp, #36	; 0x24
 801334c:	ec49 8b10 	vmov	d0, r8, r9
 8013350:	9300      	str	r3, [sp, #0]
 8013352:	6022      	str	r2, [r4, #0]
 8013354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013358:	4628      	mov	r0, r5
 801335a:	f7ff fecd 	bl	80130f8 <__cvt>
 801335e:	9b06      	ldr	r3, [sp, #24]
 8013360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013362:	2b47      	cmp	r3, #71	; 0x47
 8013364:	4680      	mov	r8, r0
 8013366:	d108      	bne.n	801337a <_printf_float+0x142>
 8013368:	1cc8      	adds	r0, r1, #3
 801336a:	db02      	blt.n	8013372 <_printf_float+0x13a>
 801336c:	6863      	ldr	r3, [r4, #4]
 801336e:	4299      	cmp	r1, r3
 8013370:	dd41      	ble.n	80133f6 <_printf_float+0x1be>
 8013372:	f1ab 0b02 	sub.w	fp, fp, #2
 8013376:	fa5f fb8b 	uxtb.w	fp, fp
 801337a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801337e:	d820      	bhi.n	80133c2 <_printf_float+0x18a>
 8013380:	3901      	subs	r1, #1
 8013382:	465a      	mov	r2, fp
 8013384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013388:	9109      	str	r1, [sp, #36]	; 0x24
 801338a:	f7ff ff17 	bl	80131bc <__exponent>
 801338e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013390:	1813      	adds	r3, r2, r0
 8013392:	2a01      	cmp	r2, #1
 8013394:	4681      	mov	r9, r0
 8013396:	6123      	str	r3, [r4, #16]
 8013398:	dc02      	bgt.n	80133a0 <_printf_float+0x168>
 801339a:	6822      	ldr	r2, [r4, #0]
 801339c:	07d2      	lsls	r2, r2, #31
 801339e:	d501      	bpl.n	80133a4 <_printf_float+0x16c>
 80133a0:	3301      	adds	r3, #1
 80133a2:	6123      	str	r3, [r4, #16]
 80133a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d09c      	beq.n	80132e6 <_printf_float+0xae>
 80133ac:	232d      	movs	r3, #45	; 0x2d
 80133ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133b2:	e798      	b.n	80132e6 <_printf_float+0xae>
 80133b4:	9a06      	ldr	r2, [sp, #24]
 80133b6:	2a47      	cmp	r2, #71	; 0x47
 80133b8:	d1be      	bne.n	8013338 <_printf_float+0x100>
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d1bc      	bne.n	8013338 <_printf_float+0x100>
 80133be:	2301      	movs	r3, #1
 80133c0:	e7b9      	b.n	8013336 <_printf_float+0xfe>
 80133c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80133c6:	d118      	bne.n	80133fa <_printf_float+0x1c2>
 80133c8:	2900      	cmp	r1, #0
 80133ca:	6863      	ldr	r3, [r4, #4]
 80133cc:	dd0b      	ble.n	80133e6 <_printf_float+0x1ae>
 80133ce:	6121      	str	r1, [r4, #16]
 80133d0:	b913      	cbnz	r3, 80133d8 <_printf_float+0x1a0>
 80133d2:	6822      	ldr	r2, [r4, #0]
 80133d4:	07d0      	lsls	r0, r2, #31
 80133d6:	d502      	bpl.n	80133de <_printf_float+0x1a6>
 80133d8:	3301      	adds	r3, #1
 80133da:	440b      	add	r3, r1
 80133dc:	6123      	str	r3, [r4, #16]
 80133de:	65a1      	str	r1, [r4, #88]	; 0x58
 80133e0:	f04f 0900 	mov.w	r9, #0
 80133e4:	e7de      	b.n	80133a4 <_printf_float+0x16c>
 80133e6:	b913      	cbnz	r3, 80133ee <_printf_float+0x1b6>
 80133e8:	6822      	ldr	r2, [r4, #0]
 80133ea:	07d2      	lsls	r2, r2, #31
 80133ec:	d501      	bpl.n	80133f2 <_printf_float+0x1ba>
 80133ee:	3302      	adds	r3, #2
 80133f0:	e7f4      	b.n	80133dc <_printf_float+0x1a4>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e7f2      	b.n	80133dc <_printf_float+0x1a4>
 80133f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80133fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133fc:	4299      	cmp	r1, r3
 80133fe:	db05      	blt.n	801340c <_printf_float+0x1d4>
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	6121      	str	r1, [r4, #16]
 8013404:	07d8      	lsls	r0, r3, #31
 8013406:	d5ea      	bpl.n	80133de <_printf_float+0x1a6>
 8013408:	1c4b      	adds	r3, r1, #1
 801340a:	e7e7      	b.n	80133dc <_printf_float+0x1a4>
 801340c:	2900      	cmp	r1, #0
 801340e:	bfd4      	ite	le
 8013410:	f1c1 0202 	rsble	r2, r1, #2
 8013414:	2201      	movgt	r2, #1
 8013416:	4413      	add	r3, r2
 8013418:	e7e0      	b.n	80133dc <_printf_float+0x1a4>
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	055a      	lsls	r2, r3, #21
 801341e:	d407      	bmi.n	8013430 <_printf_float+0x1f8>
 8013420:	6923      	ldr	r3, [r4, #16]
 8013422:	4642      	mov	r2, r8
 8013424:	4631      	mov	r1, r6
 8013426:	4628      	mov	r0, r5
 8013428:	47b8      	blx	r7
 801342a:	3001      	adds	r0, #1
 801342c:	d12c      	bne.n	8013488 <_printf_float+0x250>
 801342e:	e764      	b.n	80132fa <_printf_float+0xc2>
 8013430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013434:	f240 80e0 	bls.w	80135f8 <_printf_float+0x3c0>
 8013438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801343c:	2200      	movs	r2, #0
 801343e:	2300      	movs	r3, #0
 8013440:	f7ed fb62 	bl	8000b08 <__aeabi_dcmpeq>
 8013444:	2800      	cmp	r0, #0
 8013446:	d034      	beq.n	80134b2 <_printf_float+0x27a>
 8013448:	4a37      	ldr	r2, [pc, #220]	; (8013528 <_printf_float+0x2f0>)
 801344a:	2301      	movs	r3, #1
 801344c:	4631      	mov	r1, r6
 801344e:	4628      	mov	r0, r5
 8013450:	47b8      	blx	r7
 8013452:	3001      	adds	r0, #1
 8013454:	f43f af51 	beq.w	80132fa <_printf_float+0xc2>
 8013458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801345c:	429a      	cmp	r2, r3
 801345e:	db02      	blt.n	8013466 <_printf_float+0x22e>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	07d8      	lsls	r0, r3, #31
 8013464:	d510      	bpl.n	8013488 <_printf_float+0x250>
 8013466:	ee18 3a10 	vmov	r3, s16
 801346a:	4652      	mov	r2, sl
 801346c:	4631      	mov	r1, r6
 801346e:	4628      	mov	r0, r5
 8013470:	47b8      	blx	r7
 8013472:	3001      	adds	r0, #1
 8013474:	f43f af41 	beq.w	80132fa <_printf_float+0xc2>
 8013478:	f04f 0800 	mov.w	r8, #0
 801347c:	f104 091a 	add.w	r9, r4, #26
 8013480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013482:	3b01      	subs	r3, #1
 8013484:	4543      	cmp	r3, r8
 8013486:	dc09      	bgt.n	801349c <_printf_float+0x264>
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	079b      	lsls	r3, r3, #30
 801348c:	f100 8105 	bmi.w	801369a <_printf_float+0x462>
 8013490:	68e0      	ldr	r0, [r4, #12]
 8013492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013494:	4298      	cmp	r0, r3
 8013496:	bfb8      	it	lt
 8013498:	4618      	movlt	r0, r3
 801349a:	e730      	b.n	80132fe <_printf_float+0xc6>
 801349c:	2301      	movs	r3, #1
 801349e:	464a      	mov	r2, r9
 80134a0:	4631      	mov	r1, r6
 80134a2:	4628      	mov	r0, r5
 80134a4:	47b8      	blx	r7
 80134a6:	3001      	adds	r0, #1
 80134a8:	f43f af27 	beq.w	80132fa <_printf_float+0xc2>
 80134ac:	f108 0801 	add.w	r8, r8, #1
 80134b0:	e7e6      	b.n	8013480 <_printf_float+0x248>
 80134b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	dc39      	bgt.n	801352c <_printf_float+0x2f4>
 80134b8:	4a1b      	ldr	r2, [pc, #108]	; (8013528 <_printf_float+0x2f0>)
 80134ba:	2301      	movs	r3, #1
 80134bc:	4631      	mov	r1, r6
 80134be:	4628      	mov	r0, r5
 80134c0:	47b8      	blx	r7
 80134c2:	3001      	adds	r0, #1
 80134c4:	f43f af19 	beq.w	80132fa <_printf_float+0xc2>
 80134c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134cc:	4313      	orrs	r3, r2
 80134ce:	d102      	bne.n	80134d6 <_printf_float+0x29e>
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	07d9      	lsls	r1, r3, #31
 80134d4:	d5d8      	bpl.n	8013488 <_printf_float+0x250>
 80134d6:	ee18 3a10 	vmov	r3, s16
 80134da:	4652      	mov	r2, sl
 80134dc:	4631      	mov	r1, r6
 80134de:	4628      	mov	r0, r5
 80134e0:	47b8      	blx	r7
 80134e2:	3001      	adds	r0, #1
 80134e4:	f43f af09 	beq.w	80132fa <_printf_float+0xc2>
 80134e8:	f04f 0900 	mov.w	r9, #0
 80134ec:	f104 0a1a 	add.w	sl, r4, #26
 80134f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134f2:	425b      	negs	r3, r3
 80134f4:	454b      	cmp	r3, r9
 80134f6:	dc01      	bgt.n	80134fc <_printf_float+0x2c4>
 80134f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134fa:	e792      	b.n	8013422 <_printf_float+0x1ea>
 80134fc:	2301      	movs	r3, #1
 80134fe:	4652      	mov	r2, sl
 8013500:	4631      	mov	r1, r6
 8013502:	4628      	mov	r0, r5
 8013504:	47b8      	blx	r7
 8013506:	3001      	adds	r0, #1
 8013508:	f43f aef7 	beq.w	80132fa <_printf_float+0xc2>
 801350c:	f109 0901 	add.w	r9, r9, #1
 8013510:	e7ee      	b.n	80134f0 <_printf_float+0x2b8>
 8013512:	bf00      	nop
 8013514:	7fefffff 	.word	0x7fefffff
 8013518:	080194c8 	.word	0x080194c8
 801351c:	080194cc 	.word	0x080194cc
 8013520:	080194d4 	.word	0x080194d4
 8013524:	080194d0 	.word	0x080194d0
 8013528:	080194d8 	.word	0x080194d8
 801352c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801352e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013530:	429a      	cmp	r2, r3
 8013532:	bfa8      	it	ge
 8013534:	461a      	movge	r2, r3
 8013536:	2a00      	cmp	r2, #0
 8013538:	4691      	mov	r9, r2
 801353a:	dc37      	bgt.n	80135ac <_printf_float+0x374>
 801353c:	f04f 0b00 	mov.w	fp, #0
 8013540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013544:	f104 021a 	add.w	r2, r4, #26
 8013548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801354a:	9305      	str	r3, [sp, #20]
 801354c:	eba3 0309 	sub.w	r3, r3, r9
 8013550:	455b      	cmp	r3, fp
 8013552:	dc33      	bgt.n	80135bc <_printf_float+0x384>
 8013554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013558:	429a      	cmp	r2, r3
 801355a:	db3b      	blt.n	80135d4 <_printf_float+0x39c>
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	07da      	lsls	r2, r3, #31
 8013560:	d438      	bmi.n	80135d4 <_printf_float+0x39c>
 8013562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013564:	9b05      	ldr	r3, [sp, #20]
 8013566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	eba2 0901 	sub.w	r9, r2, r1
 801356e:	4599      	cmp	r9, r3
 8013570:	bfa8      	it	ge
 8013572:	4699      	movge	r9, r3
 8013574:	f1b9 0f00 	cmp.w	r9, #0
 8013578:	dc35      	bgt.n	80135e6 <_printf_float+0x3ae>
 801357a:	f04f 0800 	mov.w	r8, #0
 801357e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013582:	f104 0a1a 	add.w	sl, r4, #26
 8013586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801358a:	1a9b      	subs	r3, r3, r2
 801358c:	eba3 0309 	sub.w	r3, r3, r9
 8013590:	4543      	cmp	r3, r8
 8013592:	f77f af79 	ble.w	8013488 <_printf_float+0x250>
 8013596:	2301      	movs	r3, #1
 8013598:	4652      	mov	r2, sl
 801359a:	4631      	mov	r1, r6
 801359c:	4628      	mov	r0, r5
 801359e:	47b8      	blx	r7
 80135a0:	3001      	adds	r0, #1
 80135a2:	f43f aeaa 	beq.w	80132fa <_printf_float+0xc2>
 80135a6:	f108 0801 	add.w	r8, r8, #1
 80135aa:	e7ec      	b.n	8013586 <_printf_float+0x34e>
 80135ac:	4613      	mov	r3, r2
 80135ae:	4631      	mov	r1, r6
 80135b0:	4642      	mov	r2, r8
 80135b2:	4628      	mov	r0, r5
 80135b4:	47b8      	blx	r7
 80135b6:	3001      	adds	r0, #1
 80135b8:	d1c0      	bne.n	801353c <_printf_float+0x304>
 80135ba:	e69e      	b.n	80132fa <_printf_float+0xc2>
 80135bc:	2301      	movs	r3, #1
 80135be:	4631      	mov	r1, r6
 80135c0:	4628      	mov	r0, r5
 80135c2:	9205      	str	r2, [sp, #20]
 80135c4:	47b8      	blx	r7
 80135c6:	3001      	adds	r0, #1
 80135c8:	f43f ae97 	beq.w	80132fa <_printf_float+0xc2>
 80135cc:	9a05      	ldr	r2, [sp, #20]
 80135ce:	f10b 0b01 	add.w	fp, fp, #1
 80135d2:	e7b9      	b.n	8013548 <_printf_float+0x310>
 80135d4:	ee18 3a10 	vmov	r3, s16
 80135d8:	4652      	mov	r2, sl
 80135da:	4631      	mov	r1, r6
 80135dc:	4628      	mov	r0, r5
 80135de:	47b8      	blx	r7
 80135e0:	3001      	adds	r0, #1
 80135e2:	d1be      	bne.n	8013562 <_printf_float+0x32a>
 80135e4:	e689      	b.n	80132fa <_printf_float+0xc2>
 80135e6:	9a05      	ldr	r2, [sp, #20]
 80135e8:	464b      	mov	r3, r9
 80135ea:	4442      	add	r2, r8
 80135ec:	4631      	mov	r1, r6
 80135ee:	4628      	mov	r0, r5
 80135f0:	47b8      	blx	r7
 80135f2:	3001      	adds	r0, #1
 80135f4:	d1c1      	bne.n	801357a <_printf_float+0x342>
 80135f6:	e680      	b.n	80132fa <_printf_float+0xc2>
 80135f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135fa:	2a01      	cmp	r2, #1
 80135fc:	dc01      	bgt.n	8013602 <_printf_float+0x3ca>
 80135fe:	07db      	lsls	r3, r3, #31
 8013600:	d538      	bpl.n	8013674 <_printf_float+0x43c>
 8013602:	2301      	movs	r3, #1
 8013604:	4642      	mov	r2, r8
 8013606:	4631      	mov	r1, r6
 8013608:	4628      	mov	r0, r5
 801360a:	47b8      	blx	r7
 801360c:	3001      	adds	r0, #1
 801360e:	f43f ae74 	beq.w	80132fa <_printf_float+0xc2>
 8013612:	ee18 3a10 	vmov	r3, s16
 8013616:	4652      	mov	r2, sl
 8013618:	4631      	mov	r1, r6
 801361a:	4628      	mov	r0, r5
 801361c:	47b8      	blx	r7
 801361e:	3001      	adds	r0, #1
 8013620:	f43f ae6b 	beq.w	80132fa <_printf_float+0xc2>
 8013624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013628:	2200      	movs	r2, #0
 801362a:	2300      	movs	r3, #0
 801362c:	f7ed fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8013630:	b9d8      	cbnz	r0, 801366a <_printf_float+0x432>
 8013632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013634:	f108 0201 	add.w	r2, r8, #1
 8013638:	3b01      	subs	r3, #1
 801363a:	4631      	mov	r1, r6
 801363c:	4628      	mov	r0, r5
 801363e:	47b8      	blx	r7
 8013640:	3001      	adds	r0, #1
 8013642:	d10e      	bne.n	8013662 <_printf_float+0x42a>
 8013644:	e659      	b.n	80132fa <_printf_float+0xc2>
 8013646:	2301      	movs	r3, #1
 8013648:	4652      	mov	r2, sl
 801364a:	4631      	mov	r1, r6
 801364c:	4628      	mov	r0, r5
 801364e:	47b8      	blx	r7
 8013650:	3001      	adds	r0, #1
 8013652:	f43f ae52 	beq.w	80132fa <_printf_float+0xc2>
 8013656:	f108 0801 	add.w	r8, r8, #1
 801365a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801365c:	3b01      	subs	r3, #1
 801365e:	4543      	cmp	r3, r8
 8013660:	dcf1      	bgt.n	8013646 <_printf_float+0x40e>
 8013662:	464b      	mov	r3, r9
 8013664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013668:	e6dc      	b.n	8013424 <_printf_float+0x1ec>
 801366a:	f04f 0800 	mov.w	r8, #0
 801366e:	f104 0a1a 	add.w	sl, r4, #26
 8013672:	e7f2      	b.n	801365a <_printf_float+0x422>
 8013674:	2301      	movs	r3, #1
 8013676:	4642      	mov	r2, r8
 8013678:	e7df      	b.n	801363a <_printf_float+0x402>
 801367a:	2301      	movs	r3, #1
 801367c:	464a      	mov	r2, r9
 801367e:	4631      	mov	r1, r6
 8013680:	4628      	mov	r0, r5
 8013682:	47b8      	blx	r7
 8013684:	3001      	adds	r0, #1
 8013686:	f43f ae38 	beq.w	80132fa <_printf_float+0xc2>
 801368a:	f108 0801 	add.w	r8, r8, #1
 801368e:	68e3      	ldr	r3, [r4, #12]
 8013690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013692:	1a5b      	subs	r3, r3, r1
 8013694:	4543      	cmp	r3, r8
 8013696:	dcf0      	bgt.n	801367a <_printf_float+0x442>
 8013698:	e6fa      	b.n	8013490 <_printf_float+0x258>
 801369a:	f04f 0800 	mov.w	r8, #0
 801369e:	f104 0919 	add.w	r9, r4, #25
 80136a2:	e7f4      	b.n	801368e <_printf_float+0x456>

080136a4 <_printf_common>:
 80136a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a8:	4616      	mov	r6, r2
 80136aa:	4699      	mov	r9, r3
 80136ac:	688a      	ldr	r2, [r1, #8]
 80136ae:	690b      	ldr	r3, [r1, #16]
 80136b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136b4:	4293      	cmp	r3, r2
 80136b6:	bfb8      	it	lt
 80136b8:	4613      	movlt	r3, r2
 80136ba:	6033      	str	r3, [r6, #0]
 80136bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136c0:	4607      	mov	r7, r0
 80136c2:	460c      	mov	r4, r1
 80136c4:	b10a      	cbz	r2, 80136ca <_printf_common+0x26>
 80136c6:	3301      	adds	r3, #1
 80136c8:	6033      	str	r3, [r6, #0]
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	0699      	lsls	r1, r3, #26
 80136ce:	bf42      	ittt	mi
 80136d0:	6833      	ldrmi	r3, [r6, #0]
 80136d2:	3302      	addmi	r3, #2
 80136d4:	6033      	strmi	r3, [r6, #0]
 80136d6:	6825      	ldr	r5, [r4, #0]
 80136d8:	f015 0506 	ands.w	r5, r5, #6
 80136dc:	d106      	bne.n	80136ec <_printf_common+0x48>
 80136de:	f104 0a19 	add.w	sl, r4, #25
 80136e2:	68e3      	ldr	r3, [r4, #12]
 80136e4:	6832      	ldr	r2, [r6, #0]
 80136e6:	1a9b      	subs	r3, r3, r2
 80136e8:	42ab      	cmp	r3, r5
 80136ea:	dc26      	bgt.n	801373a <_printf_common+0x96>
 80136ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136f0:	1e13      	subs	r3, r2, #0
 80136f2:	6822      	ldr	r2, [r4, #0]
 80136f4:	bf18      	it	ne
 80136f6:	2301      	movne	r3, #1
 80136f8:	0692      	lsls	r2, r2, #26
 80136fa:	d42b      	bmi.n	8013754 <_printf_common+0xb0>
 80136fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013700:	4649      	mov	r1, r9
 8013702:	4638      	mov	r0, r7
 8013704:	47c0      	blx	r8
 8013706:	3001      	adds	r0, #1
 8013708:	d01e      	beq.n	8013748 <_printf_common+0xa4>
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	68e5      	ldr	r5, [r4, #12]
 801370e:	6832      	ldr	r2, [r6, #0]
 8013710:	f003 0306 	and.w	r3, r3, #6
 8013714:	2b04      	cmp	r3, #4
 8013716:	bf08      	it	eq
 8013718:	1aad      	subeq	r5, r5, r2
 801371a:	68a3      	ldr	r3, [r4, #8]
 801371c:	6922      	ldr	r2, [r4, #16]
 801371e:	bf0c      	ite	eq
 8013720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013724:	2500      	movne	r5, #0
 8013726:	4293      	cmp	r3, r2
 8013728:	bfc4      	itt	gt
 801372a:	1a9b      	subgt	r3, r3, r2
 801372c:	18ed      	addgt	r5, r5, r3
 801372e:	2600      	movs	r6, #0
 8013730:	341a      	adds	r4, #26
 8013732:	42b5      	cmp	r5, r6
 8013734:	d11a      	bne.n	801376c <_printf_common+0xc8>
 8013736:	2000      	movs	r0, #0
 8013738:	e008      	b.n	801374c <_printf_common+0xa8>
 801373a:	2301      	movs	r3, #1
 801373c:	4652      	mov	r2, sl
 801373e:	4649      	mov	r1, r9
 8013740:	4638      	mov	r0, r7
 8013742:	47c0      	blx	r8
 8013744:	3001      	adds	r0, #1
 8013746:	d103      	bne.n	8013750 <_printf_common+0xac>
 8013748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013750:	3501      	adds	r5, #1
 8013752:	e7c6      	b.n	80136e2 <_printf_common+0x3e>
 8013754:	18e1      	adds	r1, r4, r3
 8013756:	1c5a      	adds	r2, r3, #1
 8013758:	2030      	movs	r0, #48	; 0x30
 801375a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801375e:	4422      	add	r2, r4
 8013760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013768:	3302      	adds	r3, #2
 801376a:	e7c7      	b.n	80136fc <_printf_common+0x58>
 801376c:	2301      	movs	r3, #1
 801376e:	4622      	mov	r2, r4
 8013770:	4649      	mov	r1, r9
 8013772:	4638      	mov	r0, r7
 8013774:	47c0      	blx	r8
 8013776:	3001      	adds	r0, #1
 8013778:	d0e6      	beq.n	8013748 <_printf_common+0xa4>
 801377a:	3601      	adds	r6, #1
 801377c:	e7d9      	b.n	8013732 <_printf_common+0x8e>
	...

08013780 <_printf_i>:
 8013780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013784:	460c      	mov	r4, r1
 8013786:	4691      	mov	r9, r2
 8013788:	7e27      	ldrb	r7, [r4, #24]
 801378a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801378c:	2f78      	cmp	r7, #120	; 0x78
 801378e:	4680      	mov	r8, r0
 8013790:	469a      	mov	sl, r3
 8013792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013796:	d807      	bhi.n	80137a8 <_printf_i+0x28>
 8013798:	2f62      	cmp	r7, #98	; 0x62
 801379a:	d80a      	bhi.n	80137b2 <_printf_i+0x32>
 801379c:	2f00      	cmp	r7, #0
 801379e:	f000 80d8 	beq.w	8013952 <_printf_i+0x1d2>
 80137a2:	2f58      	cmp	r7, #88	; 0x58
 80137a4:	f000 80a3 	beq.w	80138ee <_printf_i+0x16e>
 80137a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80137ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137b0:	e03a      	b.n	8013828 <_printf_i+0xa8>
 80137b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137b6:	2b15      	cmp	r3, #21
 80137b8:	d8f6      	bhi.n	80137a8 <_printf_i+0x28>
 80137ba:	a001      	add	r0, pc, #4	; (adr r0, 80137c0 <_printf_i+0x40>)
 80137bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80137c0:	08013819 	.word	0x08013819
 80137c4:	0801382d 	.word	0x0801382d
 80137c8:	080137a9 	.word	0x080137a9
 80137cc:	080137a9 	.word	0x080137a9
 80137d0:	080137a9 	.word	0x080137a9
 80137d4:	080137a9 	.word	0x080137a9
 80137d8:	0801382d 	.word	0x0801382d
 80137dc:	080137a9 	.word	0x080137a9
 80137e0:	080137a9 	.word	0x080137a9
 80137e4:	080137a9 	.word	0x080137a9
 80137e8:	080137a9 	.word	0x080137a9
 80137ec:	08013939 	.word	0x08013939
 80137f0:	0801385d 	.word	0x0801385d
 80137f4:	0801391b 	.word	0x0801391b
 80137f8:	080137a9 	.word	0x080137a9
 80137fc:	080137a9 	.word	0x080137a9
 8013800:	0801395b 	.word	0x0801395b
 8013804:	080137a9 	.word	0x080137a9
 8013808:	0801385d 	.word	0x0801385d
 801380c:	080137a9 	.word	0x080137a9
 8013810:	080137a9 	.word	0x080137a9
 8013814:	08013923 	.word	0x08013923
 8013818:	680b      	ldr	r3, [r1, #0]
 801381a:	1d1a      	adds	r2, r3, #4
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	600a      	str	r2, [r1, #0]
 8013820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013828:	2301      	movs	r3, #1
 801382a:	e0a3      	b.n	8013974 <_printf_i+0x1f4>
 801382c:	6825      	ldr	r5, [r4, #0]
 801382e:	6808      	ldr	r0, [r1, #0]
 8013830:	062e      	lsls	r6, r5, #24
 8013832:	f100 0304 	add.w	r3, r0, #4
 8013836:	d50a      	bpl.n	801384e <_printf_i+0xce>
 8013838:	6805      	ldr	r5, [r0, #0]
 801383a:	600b      	str	r3, [r1, #0]
 801383c:	2d00      	cmp	r5, #0
 801383e:	da03      	bge.n	8013848 <_printf_i+0xc8>
 8013840:	232d      	movs	r3, #45	; 0x2d
 8013842:	426d      	negs	r5, r5
 8013844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013848:	485e      	ldr	r0, [pc, #376]	; (80139c4 <_printf_i+0x244>)
 801384a:	230a      	movs	r3, #10
 801384c:	e019      	b.n	8013882 <_printf_i+0x102>
 801384e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013852:	6805      	ldr	r5, [r0, #0]
 8013854:	600b      	str	r3, [r1, #0]
 8013856:	bf18      	it	ne
 8013858:	b22d      	sxthne	r5, r5
 801385a:	e7ef      	b.n	801383c <_printf_i+0xbc>
 801385c:	680b      	ldr	r3, [r1, #0]
 801385e:	6825      	ldr	r5, [r4, #0]
 8013860:	1d18      	adds	r0, r3, #4
 8013862:	6008      	str	r0, [r1, #0]
 8013864:	0628      	lsls	r0, r5, #24
 8013866:	d501      	bpl.n	801386c <_printf_i+0xec>
 8013868:	681d      	ldr	r5, [r3, #0]
 801386a:	e002      	b.n	8013872 <_printf_i+0xf2>
 801386c:	0669      	lsls	r1, r5, #25
 801386e:	d5fb      	bpl.n	8013868 <_printf_i+0xe8>
 8013870:	881d      	ldrh	r5, [r3, #0]
 8013872:	4854      	ldr	r0, [pc, #336]	; (80139c4 <_printf_i+0x244>)
 8013874:	2f6f      	cmp	r7, #111	; 0x6f
 8013876:	bf0c      	ite	eq
 8013878:	2308      	moveq	r3, #8
 801387a:	230a      	movne	r3, #10
 801387c:	2100      	movs	r1, #0
 801387e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013882:	6866      	ldr	r6, [r4, #4]
 8013884:	60a6      	str	r6, [r4, #8]
 8013886:	2e00      	cmp	r6, #0
 8013888:	bfa2      	ittt	ge
 801388a:	6821      	ldrge	r1, [r4, #0]
 801388c:	f021 0104 	bicge.w	r1, r1, #4
 8013890:	6021      	strge	r1, [r4, #0]
 8013892:	b90d      	cbnz	r5, 8013898 <_printf_i+0x118>
 8013894:	2e00      	cmp	r6, #0
 8013896:	d04d      	beq.n	8013934 <_printf_i+0x1b4>
 8013898:	4616      	mov	r6, r2
 801389a:	fbb5 f1f3 	udiv	r1, r5, r3
 801389e:	fb03 5711 	mls	r7, r3, r1, r5
 80138a2:	5dc7      	ldrb	r7, [r0, r7]
 80138a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80138a8:	462f      	mov	r7, r5
 80138aa:	42bb      	cmp	r3, r7
 80138ac:	460d      	mov	r5, r1
 80138ae:	d9f4      	bls.n	801389a <_printf_i+0x11a>
 80138b0:	2b08      	cmp	r3, #8
 80138b2:	d10b      	bne.n	80138cc <_printf_i+0x14c>
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	07df      	lsls	r7, r3, #31
 80138b8:	d508      	bpl.n	80138cc <_printf_i+0x14c>
 80138ba:	6923      	ldr	r3, [r4, #16]
 80138bc:	6861      	ldr	r1, [r4, #4]
 80138be:	4299      	cmp	r1, r3
 80138c0:	bfde      	ittt	le
 80138c2:	2330      	movle	r3, #48	; 0x30
 80138c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138c8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80138cc:	1b92      	subs	r2, r2, r6
 80138ce:	6122      	str	r2, [r4, #16]
 80138d0:	f8cd a000 	str.w	sl, [sp]
 80138d4:	464b      	mov	r3, r9
 80138d6:	aa03      	add	r2, sp, #12
 80138d8:	4621      	mov	r1, r4
 80138da:	4640      	mov	r0, r8
 80138dc:	f7ff fee2 	bl	80136a4 <_printf_common>
 80138e0:	3001      	adds	r0, #1
 80138e2:	d14c      	bne.n	801397e <_printf_i+0x1fe>
 80138e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138e8:	b004      	add	sp, #16
 80138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ee:	4835      	ldr	r0, [pc, #212]	; (80139c4 <_printf_i+0x244>)
 80138f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	680e      	ldr	r6, [r1, #0]
 80138f8:	061f      	lsls	r7, r3, #24
 80138fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80138fe:	600e      	str	r6, [r1, #0]
 8013900:	d514      	bpl.n	801392c <_printf_i+0x1ac>
 8013902:	07d9      	lsls	r1, r3, #31
 8013904:	bf44      	itt	mi
 8013906:	f043 0320 	orrmi.w	r3, r3, #32
 801390a:	6023      	strmi	r3, [r4, #0]
 801390c:	b91d      	cbnz	r5, 8013916 <_printf_i+0x196>
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	f023 0320 	bic.w	r3, r3, #32
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	2310      	movs	r3, #16
 8013918:	e7b0      	b.n	801387c <_printf_i+0xfc>
 801391a:	6823      	ldr	r3, [r4, #0]
 801391c:	f043 0320 	orr.w	r3, r3, #32
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	2378      	movs	r3, #120	; 0x78
 8013924:	4828      	ldr	r0, [pc, #160]	; (80139c8 <_printf_i+0x248>)
 8013926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801392a:	e7e3      	b.n	80138f4 <_printf_i+0x174>
 801392c:	065e      	lsls	r6, r3, #25
 801392e:	bf48      	it	mi
 8013930:	b2ad      	uxthmi	r5, r5
 8013932:	e7e6      	b.n	8013902 <_printf_i+0x182>
 8013934:	4616      	mov	r6, r2
 8013936:	e7bb      	b.n	80138b0 <_printf_i+0x130>
 8013938:	680b      	ldr	r3, [r1, #0]
 801393a:	6826      	ldr	r6, [r4, #0]
 801393c:	6960      	ldr	r0, [r4, #20]
 801393e:	1d1d      	adds	r5, r3, #4
 8013940:	600d      	str	r5, [r1, #0]
 8013942:	0635      	lsls	r5, r6, #24
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	d501      	bpl.n	801394c <_printf_i+0x1cc>
 8013948:	6018      	str	r0, [r3, #0]
 801394a:	e002      	b.n	8013952 <_printf_i+0x1d2>
 801394c:	0671      	lsls	r1, r6, #25
 801394e:	d5fb      	bpl.n	8013948 <_printf_i+0x1c8>
 8013950:	8018      	strh	r0, [r3, #0]
 8013952:	2300      	movs	r3, #0
 8013954:	6123      	str	r3, [r4, #16]
 8013956:	4616      	mov	r6, r2
 8013958:	e7ba      	b.n	80138d0 <_printf_i+0x150>
 801395a:	680b      	ldr	r3, [r1, #0]
 801395c:	1d1a      	adds	r2, r3, #4
 801395e:	600a      	str	r2, [r1, #0]
 8013960:	681e      	ldr	r6, [r3, #0]
 8013962:	6862      	ldr	r2, [r4, #4]
 8013964:	2100      	movs	r1, #0
 8013966:	4630      	mov	r0, r6
 8013968:	f7ec fc5a 	bl	8000220 <memchr>
 801396c:	b108      	cbz	r0, 8013972 <_printf_i+0x1f2>
 801396e:	1b80      	subs	r0, r0, r6
 8013970:	6060      	str	r0, [r4, #4]
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	6123      	str	r3, [r4, #16]
 8013976:	2300      	movs	r3, #0
 8013978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801397c:	e7a8      	b.n	80138d0 <_printf_i+0x150>
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	4632      	mov	r2, r6
 8013982:	4649      	mov	r1, r9
 8013984:	4640      	mov	r0, r8
 8013986:	47d0      	blx	sl
 8013988:	3001      	adds	r0, #1
 801398a:	d0ab      	beq.n	80138e4 <_printf_i+0x164>
 801398c:	6823      	ldr	r3, [r4, #0]
 801398e:	079b      	lsls	r3, r3, #30
 8013990:	d413      	bmi.n	80139ba <_printf_i+0x23a>
 8013992:	68e0      	ldr	r0, [r4, #12]
 8013994:	9b03      	ldr	r3, [sp, #12]
 8013996:	4298      	cmp	r0, r3
 8013998:	bfb8      	it	lt
 801399a:	4618      	movlt	r0, r3
 801399c:	e7a4      	b.n	80138e8 <_printf_i+0x168>
 801399e:	2301      	movs	r3, #1
 80139a0:	4632      	mov	r2, r6
 80139a2:	4649      	mov	r1, r9
 80139a4:	4640      	mov	r0, r8
 80139a6:	47d0      	blx	sl
 80139a8:	3001      	adds	r0, #1
 80139aa:	d09b      	beq.n	80138e4 <_printf_i+0x164>
 80139ac:	3501      	adds	r5, #1
 80139ae:	68e3      	ldr	r3, [r4, #12]
 80139b0:	9903      	ldr	r1, [sp, #12]
 80139b2:	1a5b      	subs	r3, r3, r1
 80139b4:	42ab      	cmp	r3, r5
 80139b6:	dcf2      	bgt.n	801399e <_printf_i+0x21e>
 80139b8:	e7eb      	b.n	8013992 <_printf_i+0x212>
 80139ba:	2500      	movs	r5, #0
 80139bc:	f104 0619 	add.w	r6, r4, #25
 80139c0:	e7f5      	b.n	80139ae <_printf_i+0x22e>
 80139c2:	bf00      	nop
 80139c4:	080194da 	.word	0x080194da
 80139c8:	080194eb 	.word	0x080194eb

080139cc <_sbrk_r>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4d06      	ldr	r5, [pc, #24]	; (80139e8 <_sbrk_r+0x1c>)
 80139d0:	2300      	movs	r3, #0
 80139d2:	4604      	mov	r4, r0
 80139d4:	4608      	mov	r0, r1
 80139d6:	602b      	str	r3, [r5, #0]
 80139d8:	f7ef fdb6 	bl	8003548 <_sbrk>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	d102      	bne.n	80139e6 <_sbrk_r+0x1a>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	b103      	cbz	r3, 80139e6 <_sbrk_r+0x1a>
 80139e4:	6023      	str	r3, [r4, #0]
 80139e6:	bd38      	pop	{r3, r4, r5, pc}
 80139e8:	20001d14 	.word	0x20001d14

080139ec <siprintf>:
 80139ec:	b40e      	push	{r1, r2, r3}
 80139ee:	b500      	push	{lr}
 80139f0:	b09c      	sub	sp, #112	; 0x70
 80139f2:	ab1d      	add	r3, sp, #116	; 0x74
 80139f4:	9002      	str	r0, [sp, #8]
 80139f6:	9006      	str	r0, [sp, #24]
 80139f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139fc:	4809      	ldr	r0, [pc, #36]	; (8013a24 <siprintf+0x38>)
 80139fe:	9107      	str	r1, [sp, #28]
 8013a00:	9104      	str	r1, [sp, #16]
 8013a02:	4909      	ldr	r1, [pc, #36]	; (8013a28 <siprintf+0x3c>)
 8013a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a08:	9105      	str	r1, [sp, #20]
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	a902      	add	r1, sp, #8
 8013a10:	f001 faa4 	bl	8014f5c <_svfiprintf_r>
 8013a14:	9b02      	ldr	r3, [sp, #8]
 8013a16:	2200      	movs	r2, #0
 8013a18:	701a      	strb	r2, [r3, #0]
 8013a1a:	b01c      	add	sp, #112	; 0x70
 8013a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a20:	b003      	add	sp, #12
 8013a22:	4770      	bx	lr
 8013a24:	20000780 	.word	0x20000780
 8013a28:	ffff0208 	.word	0xffff0208

08013a2c <quorem>:
 8013a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a30:	6903      	ldr	r3, [r0, #16]
 8013a32:	690c      	ldr	r4, [r1, #16]
 8013a34:	42a3      	cmp	r3, r4
 8013a36:	4607      	mov	r7, r0
 8013a38:	f2c0 8081 	blt.w	8013b3e <quorem+0x112>
 8013a3c:	3c01      	subs	r4, #1
 8013a3e:	f101 0814 	add.w	r8, r1, #20
 8013a42:	f100 0514 	add.w	r5, r0, #20
 8013a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a4a:	9301      	str	r3, [sp, #4]
 8013a4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a54:	3301      	adds	r3, #1
 8013a56:	429a      	cmp	r2, r3
 8013a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013a5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a64:	d331      	bcc.n	8013aca <quorem+0x9e>
 8013a66:	f04f 0e00 	mov.w	lr, #0
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	46ac      	mov	ip, r5
 8013a6e:	46f2      	mov	sl, lr
 8013a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8013a74:	b293      	uxth	r3, r2
 8013a76:	fb06 e303 	mla	r3, r6, r3, lr
 8013a7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013a7e:	b29b      	uxth	r3, r3
 8013a80:	ebaa 0303 	sub.w	r3, sl, r3
 8013a84:	0c12      	lsrs	r2, r2, #16
 8013a86:	f8dc a000 	ldr.w	sl, [ip]
 8013a8a:	fb06 e202 	mla	r2, r6, r2, lr
 8013a8e:	fa13 f38a 	uxtah	r3, r3, sl
 8013a92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013a96:	fa1f fa82 	uxth.w	sl, r2
 8013a9a:	f8dc 2000 	ldr.w	r2, [ip]
 8013a9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013aa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013aac:	4581      	cmp	r9, r0
 8013aae:	f84c 3b04 	str.w	r3, [ip], #4
 8013ab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ab6:	d2db      	bcs.n	8013a70 <quorem+0x44>
 8013ab8:	f855 300b 	ldr.w	r3, [r5, fp]
 8013abc:	b92b      	cbnz	r3, 8013aca <quorem+0x9e>
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	3b04      	subs	r3, #4
 8013ac2:	429d      	cmp	r5, r3
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	d32e      	bcc.n	8013b26 <quorem+0xfa>
 8013ac8:	613c      	str	r4, [r7, #16]
 8013aca:	4638      	mov	r0, r7
 8013acc:	f001 f8b6 	bl	8014c3c <__mcmp>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	db24      	blt.n	8013b1e <quorem+0xf2>
 8013ad4:	3601      	adds	r6, #1
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f04f 0c00 	mov.w	ip, #0
 8013adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ae0:	f8d0 e000 	ldr.w	lr, [r0]
 8013ae4:	b293      	uxth	r3, r2
 8013ae6:	ebac 0303 	sub.w	r3, ip, r3
 8013aea:	0c12      	lsrs	r2, r2, #16
 8013aec:	fa13 f38e 	uxtah	r3, r3, lr
 8013af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013afe:	45c1      	cmp	r9, r8
 8013b00:	f840 3b04 	str.w	r3, [r0], #4
 8013b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013b08:	d2e8      	bcs.n	8013adc <quorem+0xb0>
 8013b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b12:	b922      	cbnz	r2, 8013b1e <quorem+0xf2>
 8013b14:	3b04      	subs	r3, #4
 8013b16:	429d      	cmp	r5, r3
 8013b18:	461a      	mov	r2, r3
 8013b1a:	d30a      	bcc.n	8013b32 <quorem+0x106>
 8013b1c:	613c      	str	r4, [r7, #16]
 8013b1e:	4630      	mov	r0, r6
 8013b20:	b003      	add	sp, #12
 8013b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b26:	6812      	ldr	r2, [r2, #0]
 8013b28:	3b04      	subs	r3, #4
 8013b2a:	2a00      	cmp	r2, #0
 8013b2c:	d1cc      	bne.n	8013ac8 <quorem+0x9c>
 8013b2e:	3c01      	subs	r4, #1
 8013b30:	e7c7      	b.n	8013ac2 <quorem+0x96>
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	3b04      	subs	r3, #4
 8013b36:	2a00      	cmp	r2, #0
 8013b38:	d1f0      	bne.n	8013b1c <quorem+0xf0>
 8013b3a:	3c01      	subs	r4, #1
 8013b3c:	e7eb      	b.n	8013b16 <quorem+0xea>
 8013b3e:	2000      	movs	r0, #0
 8013b40:	e7ee      	b.n	8013b20 <quorem+0xf4>
 8013b42:	0000      	movs	r0, r0
 8013b44:	0000      	movs	r0, r0
	...

08013b48 <_dtoa_r>:
 8013b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4c:	ed2d 8b02 	vpush	{d8}
 8013b50:	ec57 6b10 	vmov	r6, r7, d0
 8013b54:	b095      	sub	sp, #84	; 0x54
 8013b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013b5c:	9105      	str	r1, [sp, #20]
 8013b5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013b62:	4604      	mov	r4, r0
 8013b64:	9209      	str	r2, [sp, #36]	; 0x24
 8013b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b68:	b975      	cbnz	r5, 8013b88 <_dtoa_r+0x40>
 8013b6a:	2010      	movs	r0, #16
 8013b6c:	f7ff f9f4 	bl	8012f58 <malloc>
 8013b70:	4602      	mov	r2, r0
 8013b72:	6260      	str	r0, [r4, #36]	; 0x24
 8013b74:	b920      	cbnz	r0, 8013b80 <_dtoa_r+0x38>
 8013b76:	4bb2      	ldr	r3, [pc, #712]	; (8013e40 <_dtoa_r+0x2f8>)
 8013b78:	21ea      	movs	r1, #234	; 0xea
 8013b7a:	48b2      	ldr	r0, [pc, #712]	; (8013e44 <_dtoa_r+0x2fc>)
 8013b7c:	f001 faee 	bl	801515c <__assert_func>
 8013b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013b84:	6005      	str	r5, [r0, #0]
 8013b86:	60c5      	str	r5, [r0, #12]
 8013b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b8a:	6819      	ldr	r1, [r3, #0]
 8013b8c:	b151      	cbz	r1, 8013ba4 <_dtoa_r+0x5c>
 8013b8e:	685a      	ldr	r2, [r3, #4]
 8013b90:	604a      	str	r2, [r1, #4]
 8013b92:	2301      	movs	r3, #1
 8013b94:	4093      	lsls	r3, r2
 8013b96:	608b      	str	r3, [r1, #8]
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f000 fe11 	bl	80147c0 <_Bfree>
 8013b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	601a      	str	r2, [r3, #0]
 8013ba4:	1e3b      	subs	r3, r7, #0
 8013ba6:	bfb9      	ittee	lt
 8013ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013bac:	9303      	strlt	r3, [sp, #12]
 8013bae:	2300      	movge	r3, #0
 8013bb0:	f8c8 3000 	strge.w	r3, [r8]
 8013bb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013bb8:	4ba3      	ldr	r3, [pc, #652]	; (8013e48 <_dtoa_r+0x300>)
 8013bba:	bfbc      	itt	lt
 8013bbc:	2201      	movlt	r2, #1
 8013bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8013bc2:	ea33 0309 	bics.w	r3, r3, r9
 8013bc6:	d11b      	bne.n	8013c00 <_dtoa_r+0xb8>
 8013bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bd4:	4333      	orrs	r3, r6
 8013bd6:	f000 857a 	beq.w	80146ce <_dtoa_r+0xb86>
 8013bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bdc:	b963      	cbnz	r3, 8013bf8 <_dtoa_r+0xb0>
 8013bde:	4b9b      	ldr	r3, [pc, #620]	; (8013e4c <_dtoa_r+0x304>)
 8013be0:	e024      	b.n	8013c2c <_dtoa_r+0xe4>
 8013be2:	4b9b      	ldr	r3, [pc, #620]	; (8013e50 <_dtoa_r+0x308>)
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	3308      	adds	r3, #8
 8013be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013bea:	6013      	str	r3, [r2, #0]
 8013bec:	9800      	ldr	r0, [sp, #0]
 8013bee:	b015      	add	sp, #84	; 0x54
 8013bf0:	ecbd 8b02 	vpop	{d8}
 8013bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf8:	4b94      	ldr	r3, [pc, #592]	; (8013e4c <_dtoa_r+0x304>)
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	3303      	adds	r3, #3
 8013bfe:	e7f3      	b.n	8013be8 <_dtoa_r+0xa0>
 8013c00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c04:	2200      	movs	r2, #0
 8013c06:	ec51 0b17 	vmov	r0, r1, d7
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013c10:	f7ec ff7a 	bl	8000b08 <__aeabi_dcmpeq>
 8013c14:	4680      	mov	r8, r0
 8013c16:	b158      	cbz	r0, 8013c30 <_dtoa_r+0xe8>
 8013c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	6013      	str	r3, [r2, #0]
 8013c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 8551 	beq.w	80146c8 <_dtoa_r+0xb80>
 8013c26:	488b      	ldr	r0, [pc, #556]	; (8013e54 <_dtoa_r+0x30c>)
 8013c28:	6018      	str	r0, [r3, #0]
 8013c2a:	1e43      	subs	r3, r0, #1
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	e7dd      	b.n	8013bec <_dtoa_r+0xa4>
 8013c30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013c34:	aa12      	add	r2, sp, #72	; 0x48
 8013c36:	a913      	add	r1, sp, #76	; 0x4c
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f001 f8a3 	bl	8014d84 <__d2b>
 8013c3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013c42:	4683      	mov	fp, r0
 8013c44:	2d00      	cmp	r5, #0
 8013c46:	d07c      	beq.n	8013d42 <_dtoa_r+0x1fa>
 8013c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013c56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013c62:	4b7d      	ldr	r3, [pc, #500]	; (8013e58 <_dtoa_r+0x310>)
 8013c64:	2200      	movs	r2, #0
 8013c66:	4630      	mov	r0, r6
 8013c68:	4639      	mov	r1, r7
 8013c6a:	f7ec fb2d 	bl	80002c8 <__aeabi_dsub>
 8013c6e:	a36e      	add	r3, pc, #440	; (adr r3, 8013e28 <_dtoa_r+0x2e0>)
 8013c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c74:	f7ec fce0 	bl	8000638 <__aeabi_dmul>
 8013c78:	a36d      	add	r3, pc, #436	; (adr r3, 8013e30 <_dtoa_r+0x2e8>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec fb25 	bl	80002cc <__adddf3>
 8013c82:	4606      	mov	r6, r0
 8013c84:	4628      	mov	r0, r5
 8013c86:	460f      	mov	r7, r1
 8013c88:	f7ec fc6c 	bl	8000564 <__aeabi_i2d>
 8013c8c:	a36a      	add	r3, pc, #424	; (adr r3, 8013e38 <_dtoa_r+0x2f0>)
 8013c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c92:	f7ec fcd1 	bl	8000638 <__aeabi_dmul>
 8013c96:	4602      	mov	r2, r0
 8013c98:	460b      	mov	r3, r1
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	4639      	mov	r1, r7
 8013c9e:	f7ec fb15 	bl	80002cc <__adddf3>
 8013ca2:	4606      	mov	r6, r0
 8013ca4:	460f      	mov	r7, r1
 8013ca6:	f7ec ff77 	bl	8000b98 <__aeabi_d2iz>
 8013caa:	2200      	movs	r2, #0
 8013cac:	4682      	mov	sl, r0
 8013cae:	2300      	movs	r3, #0
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	4639      	mov	r1, r7
 8013cb4:	f7ec ff32 	bl	8000b1c <__aeabi_dcmplt>
 8013cb8:	b148      	cbz	r0, 8013cce <_dtoa_r+0x186>
 8013cba:	4650      	mov	r0, sl
 8013cbc:	f7ec fc52 	bl	8000564 <__aeabi_i2d>
 8013cc0:	4632      	mov	r2, r6
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	f7ec ff20 	bl	8000b08 <__aeabi_dcmpeq>
 8013cc8:	b908      	cbnz	r0, 8013cce <_dtoa_r+0x186>
 8013cca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013cce:	f1ba 0f16 	cmp.w	sl, #22
 8013cd2:	d854      	bhi.n	8013d7e <_dtoa_r+0x236>
 8013cd4:	4b61      	ldr	r3, [pc, #388]	; (8013e5c <_dtoa_r+0x314>)
 8013cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ce2:	f7ec ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d04b      	beq.n	8013d82 <_dtoa_r+0x23a>
 8013cea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013cee:	2300      	movs	r3, #0
 8013cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8013cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cf4:	1b5d      	subs	r5, r3, r5
 8013cf6:	1e6b      	subs	r3, r5, #1
 8013cf8:	9304      	str	r3, [sp, #16]
 8013cfa:	bf43      	ittte	mi
 8013cfc:	2300      	movmi	r3, #0
 8013cfe:	f1c5 0801 	rsbmi	r8, r5, #1
 8013d02:	9304      	strmi	r3, [sp, #16]
 8013d04:	f04f 0800 	movpl.w	r8, #0
 8013d08:	f1ba 0f00 	cmp.w	sl, #0
 8013d0c:	db3b      	blt.n	8013d86 <_dtoa_r+0x23e>
 8013d0e:	9b04      	ldr	r3, [sp, #16]
 8013d10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013d14:	4453      	add	r3, sl
 8013d16:	9304      	str	r3, [sp, #16]
 8013d18:	2300      	movs	r3, #0
 8013d1a:	9306      	str	r3, [sp, #24]
 8013d1c:	9b05      	ldr	r3, [sp, #20]
 8013d1e:	2b09      	cmp	r3, #9
 8013d20:	d869      	bhi.n	8013df6 <_dtoa_r+0x2ae>
 8013d22:	2b05      	cmp	r3, #5
 8013d24:	bfc4      	itt	gt
 8013d26:	3b04      	subgt	r3, #4
 8013d28:	9305      	strgt	r3, [sp, #20]
 8013d2a:	9b05      	ldr	r3, [sp, #20]
 8013d2c:	f1a3 0302 	sub.w	r3, r3, #2
 8013d30:	bfcc      	ite	gt
 8013d32:	2500      	movgt	r5, #0
 8013d34:	2501      	movle	r5, #1
 8013d36:	2b03      	cmp	r3, #3
 8013d38:	d869      	bhi.n	8013e0e <_dtoa_r+0x2c6>
 8013d3a:	e8df f003 	tbb	[pc, r3]
 8013d3e:	4e2c      	.short	0x4e2c
 8013d40:	5a4c      	.short	0x5a4c
 8013d42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013d46:	441d      	add	r5, r3
 8013d48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013d4c:	2b20      	cmp	r3, #32
 8013d4e:	bfc1      	itttt	gt
 8013d50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013d54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013d58:	fa09 f303 	lslgt.w	r3, r9, r3
 8013d5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013d60:	bfda      	itte	le
 8013d62:	f1c3 0320 	rsble	r3, r3, #32
 8013d66:	fa06 f003 	lslle.w	r0, r6, r3
 8013d6a:	4318      	orrgt	r0, r3
 8013d6c:	f7ec fbea 	bl	8000544 <__aeabi_ui2d>
 8013d70:	2301      	movs	r3, #1
 8013d72:	4606      	mov	r6, r0
 8013d74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013d78:	3d01      	subs	r5, #1
 8013d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8013d7c:	e771      	b.n	8013c62 <_dtoa_r+0x11a>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e7b6      	b.n	8013cf0 <_dtoa_r+0x1a8>
 8013d82:	900e      	str	r0, [sp, #56]	; 0x38
 8013d84:	e7b5      	b.n	8013cf2 <_dtoa_r+0x1aa>
 8013d86:	f1ca 0300 	rsb	r3, sl, #0
 8013d8a:	9306      	str	r3, [sp, #24]
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	eba8 080a 	sub.w	r8, r8, sl
 8013d92:	930d      	str	r3, [sp, #52]	; 0x34
 8013d94:	e7c2      	b.n	8013d1c <_dtoa_r+0x1d4>
 8013d96:	2300      	movs	r3, #0
 8013d98:	9308      	str	r3, [sp, #32]
 8013d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	dc39      	bgt.n	8013e14 <_dtoa_r+0x2cc>
 8013da0:	f04f 0901 	mov.w	r9, #1
 8013da4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013da8:	464b      	mov	r3, r9
 8013daa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013dae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013db0:	2200      	movs	r2, #0
 8013db2:	6042      	str	r2, [r0, #4]
 8013db4:	2204      	movs	r2, #4
 8013db6:	f102 0614 	add.w	r6, r2, #20
 8013dba:	429e      	cmp	r6, r3
 8013dbc:	6841      	ldr	r1, [r0, #4]
 8013dbe:	d92f      	bls.n	8013e20 <_dtoa_r+0x2d8>
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f000 fcbd 	bl	8014740 <_Balloc>
 8013dc6:	9000      	str	r0, [sp, #0]
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d14b      	bne.n	8013e64 <_dtoa_r+0x31c>
 8013dcc:	4b24      	ldr	r3, [pc, #144]	; (8013e60 <_dtoa_r+0x318>)
 8013dce:	4602      	mov	r2, r0
 8013dd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013dd4:	e6d1      	b.n	8013b7a <_dtoa_r+0x32>
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e7de      	b.n	8013d98 <_dtoa_r+0x250>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	9308      	str	r3, [sp, #32]
 8013dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013de0:	eb0a 0903 	add.w	r9, sl, r3
 8013de4:	f109 0301 	add.w	r3, r9, #1
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	9301      	str	r3, [sp, #4]
 8013dec:	bfb8      	it	lt
 8013dee:	2301      	movlt	r3, #1
 8013df0:	e7dd      	b.n	8013dae <_dtoa_r+0x266>
 8013df2:	2301      	movs	r3, #1
 8013df4:	e7f2      	b.n	8013ddc <_dtoa_r+0x294>
 8013df6:	2501      	movs	r5, #1
 8013df8:	2300      	movs	r3, #0
 8013dfa:	9305      	str	r3, [sp, #20]
 8013dfc:	9508      	str	r5, [sp, #32]
 8013dfe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013e02:	2200      	movs	r2, #0
 8013e04:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e08:	2312      	movs	r3, #18
 8013e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8013e0c:	e7cf      	b.n	8013dae <_dtoa_r+0x266>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	9308      	str	r3, [sp, #32]
 8013e12:	e7f4      	b.n	8013dfe <_dtoa_r+0x2b6>
 8013e14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013e18:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e1c:	464b      	mov	r3, r9
 8013e1e:	e7c6      	b.n	8013dae <_dtoa_r+0x266>
 8013e20:	3101      	adds	r1, #1
 8013e22:	6041      	str	r1, [r0, #4]
 8013e24:	0052      	lsls	r2, r2, #1
 8013e26:	e7c6      	b.n	8013db6 <_dtoa_r+0x26e>
 8013e28:	636f4361 	.word	0x636f4361
 8013e2c:	3fd287a7 	.word	0x3fd287a7
 8013e30:	8b60c8b3 	.word	0x8b60c8b3
 8013e34:	3fc68a28 	.word	0x3fc68a28
 8013e38:	509f79fb 	.word	0x509f79fb
 8013e3c:	3fd34413 	.word	0x3fd34413
 8013e40:	08019509 	.word	0x08019509
 8013e44:	08019520 	.word	0x08019520
 8013e48:	7ff00000 	.word	0x7ff00000
 8013e4c:	08019505 	.word	0x08019505
 8013e50:	080194fc 	.word	0x080194fc
 8013e54:	080194d9 	.word	0x080194d9
 8013e58:	3ff80000 	.word	0x3ff80000
 8013e5c:	08019618 	.word	0x08019618
 8013e60:	0801957f 	.word	0x0801957f
 8013e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e66:	9a00      	ldr	r2, [sp, #0]
 8013e68:	601a      	str	r2, [r3, #0]
 8013e6a:	9b01      	ldr	r3, [sp, #4]
 8013e6c:	2b0e      	cmp	r3, #14
 8013e6e:	f200 80ad 	bhi.w	8013fcc <_dtoa_r+0x484>
 8013e72:	2d00      	cmp	r5, #0
 8013e74:	f000 80aa 	beq.w	8013fcc <_dtoa_r+0x484>
 8013e78:	f1ba 0f00 	cmp.w	sl, #0
 8013e7c:	dd36      	ble.n	8013eec <_dtoa_r+0x3a4>
 8013e7e:	4ac3      	ldr	r2, [pc, #780]	; (801418c <_dtoa_r+0x644>)
 8013e80:	f00a 030f 	and.w	r3, sl, #15
 8013e84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e88:	ed93 7b00 	vldr	d7, [r3]
 8013e8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013e90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013e94:	eeb0 8a47 	vmov.f32	s16, s14
 8013e98:	eef0 8a67 	vmov.f32	s17, s15
 8013e9c:	d016      	beq.n	8013ecc <_dtoa_r+0x384>
 8013e9e:	4bbc      	ldr	r3, [pc, #752]	; (8014190 <_dtoa_r+0x648>)
 8013ea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013ea8:	f7ec fcf0 	bl	800088c <__aeabi_ddiv>
 8013eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eb0:	f007 070f 	and.w	r7, r7, #15
 8013eb4:	2503      	movs	r5, #3
 8013eb6:	4eb6      	ldr	r6, [pc, #728]	; (8014190 <_dtoa_r+0x648>)
 8013eb8:	b957      	cbnz	r7, 8013ed0 <_dtoa_r+0x388>
 8013eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ebe:	ec53 2b18 	vmov	r2, r3, d8
 8013ec2:	f7ec fce3 	bl	800088c <__aeabi_ddiv>
 8013ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eca:	e029      	b.n	8013f20 <_dtoa_r+0x3d8>
 8013ecc:	2502      	movs	r5, #2
 8013ece:	e7f2      	b.n	8013eb6 <_dtoa_r+0x36e>
 8013ed0:	07f9      	lsls	r1, r7, #31
 8013ed2:	d508      	bpl.n	8013ee6 <_dtoa_r+0x39e>
 8013ed4:	ec51 0b18 	vmov	r0, r1, d8
 8013ed8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013edc:	f7ec fbac 	bl	8000638 <__aeabi_dmul>
 8013ee0:	ec41 0b18 	vmov	d8, r0, r1
 8013ee4:	3501      	adds	r5, #1
 8013ee6:	107f      	asrs	r7, r7, #1
 8013ee8:	3608      	adds	r6, #8
 8013eea:	e7e5      	b.n	8013eb8 <_dtoa_r+0x370>
 8013eec:	f000 80a6 	beq.w	801403c <_dtoa_r+0x4f4>
 8013ef0:	f1ca 0600 	rsb	r6, sl, #0
 8013ef4:	4ba5      	ldr	r3, [pc, #660]	; (801418c <_dtoa_r+0x644>)
 8013ef6:	4fa6      	ldr	r7, [pc, #664]	; (8014190 <_dtoa_r+0x648>)
 8013ef8:	f006 020f 	and.w	r2, r6, #15
 8013efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f08:	f7ec fb96 	bl	8000638 <__aeabi_dmul>
 8013f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f10:	1136      	asrs	r6, r6, #4
 8013f12:	2300      	movs	r3, #0
 8013f14:	2502      	movs	r5, #2
 8013f16:	2e00      	cmp	r6, #0
 8013f18:	f040 8085 	bne.w	8014026 <_dtoa_r+0x4de>
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d1d2      	bne.n	8013ec6 <_dtoa_r+0x37e>
 8013f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	f000 808c 	beq.w	8014040 <_dtoa_r+0x4f8>
 8013f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f2c:	4b99      	ldr	r3, [pc, #612]	; (8014194 <_dtoa_r+0x64c>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4630      	mov	r0, r6
 8013f32:	4639      	mov	r1, r7
 8013f34:	f7ec fdf2 	bl	8000b1c <__aeabi_dcmplt>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	f000 8081 	beq.w	8014040 <_dtoa_r+0x4f8>
 8013f3e:	9b01      	ldr	r3, [sp, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d07d      	beq.n	8014040 <_dtoa_r+0x4f8>
 8013f44:	f1b9 0f00 	cmp.w	r9, #0
 8013f48:	dd3c      	ble.n	8013fc4 <_dtoa_r+0x47c>
 8013f4a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8013f4e:	9307      	str	r3, [sp, #28]
 8013f50:	2200      	movs	r2, #0
 8013f52:	4b91      	ldr	r3, [pc, #580]	; (8014198 <_dtoa_r+0x650>)
 8013f54:	4630      	mov	r0, r6
 8013f56:	4639      	mov	r1, r7
 8013f58:	f7ec fb6e 	bl	8000638 <__aeabi_dmul>
 8013f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f60:	3501      	adds	r5, #1
 8013f62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013f66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	f7ec fafa 	bl	8000564 <__aeabi_i2d>
 8013f70:	4632      	mov	r2, r6
 8013f72:	463b      	mov	r3, r7
 8013f74:	f7ec fb60 	bl	8000638 <__aeabi_dmul>
 8013f78:	4b88      	ldr	r3, [pc, #544]	; (801419c <_dtoa_r+0x654>)
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f7ec f9a6 	bl	80002cc <__adddf3>
 8013f80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f88:	9303      	str	r3, [sp, #12]
 8013f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d15c      	bne.n	801404a <_dtoa_r+0x502>
 8013f90:	4b83      	ldr	r3, [pc, #524]	; (80141a0 <_dtoa_r+0x658>)
 8013f92:	2200      	movs	r2, #0
 8013f94:	4630      	mov	r0, r6
 8013f96:	4639      	mov	r1, r7
 8013f98:	f7ec f996 	bl	80002c8 <__aeabi_dsub>
 8013f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fa0:	4606      	mov	r6, r0
 8013fa2:	460f      	mov	r7, r1
 8013fa4:	f7ec fdd8 	bl	8000b58 <__aeabi_dcmpgt>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	f040 8296 	bne.w	80144da <_dtoa_r+0x992>
 8013fae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fb8:	4639      	mov	r1, r7
 8013fba:	f7ec fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	f040 8288 	bne.w	80144d4 <_dtoa_r+0x98c>
 8013fc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f2c0 8158 	blt.w	8014284 <_dtoa_r+0x73c>
 8013fd4:	f1ba 0f0e 	cmp.w	sl, #14
 8013fd8:	f300 8154 	bgt.w	8014284 <_dtoa_r+0x73c>
 8013fdc:	4b6b      	ldr	r3, [pc, #428]	; (801418c <_dtoa_r+0x644>)
 8013fde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013fe2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f280 80e3 	bge.w	80141b4 <_dtoa_r+0x66c>
 8013fee:	9b01      	ldr	r3, [sp, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f300 80df 	bgt.w	80141b4 <_dtoa_r+0x66c>
 8013ff6:	f040 826d 	bne.w	80144d4 <_dtoa_r+0x98c>
 8013ffa:	4b69      	ldr	r3, [pc, #420]	; (80141a0 <_dtoa_r+0x658>)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	4640      	mov	r0, r8
 8014000:	4649      	mov	r1, r9
 8014002:	f7ec fb19 	bl	8000638 <__aeabi_dmul>
 8014006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801400a:	f7ec fd9b 	bl	8000b44 <__aeabi_dcmpge>
 801400e:	9e01      	ldr	r6, [sp, #4]
 8014010:	4637      	mov	r7, r6
 8014012:	2800      	cmp	r0, #0
 8014014:	f040 8243 	bne.w	801449e <_dtoa_r+0x956>
 8014018:	9d00      	ldr	r5, [sp, #0]
 801401a:	2331      	movs	r3, #49	; 0x31
 801401c:	f805 3b01 	strb.w	r3, [r5], #1
 8014020:	f10a 0a01 	add.w	sl, sl, #1
 8014024:	e23f      	b.n	80144a6 <_dtoa_r+0x95e>
 8014026:	07f2      	lsls	r2, r6, #31
 8014028:	d505      	bpl.n	8014036 <_dtoa_r+0x4ee>
 801402a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801402e:	f7ec fb03 	bl	8000638 <__aeabi_dmul>
 8014032:	3501      	adds	r5, #1
 8014034:	2301      	movs	r3, #1
 8014036:	1076      	asrs	r6, r6, #1
 8014038:	3708      	adds	r7, #8
 801403a:	e76c      	b.n	8013f16 <_dtoa_r+0x3ce>
 801403c:	2502      	movs	r5, #2
 801403e:	e76f      	b.n	8013f20 <_dtoa_r+0x3d8>
 8014040:	9b01      	ldr	r3, [sp, #4]
 8014042:	f8cd a01c 	str.w	sl, [sp, #28]
 8014046:	930c      	str	r3, [sp, #48]	; 0x30
 8014048:	e78d      	b.n	8013f66 <_dtoa_r+0x41e>
 801404a:	9900      	ldr	r1, [sp, #0]
 801404c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801404e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014050:	4b4e      	ldr	r3, [pc, #312]	; (801418c <_dtoa_r+0x644>)
 8014052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014056:	4401      	add	r1, r0
 8014058:	9102      	str	r1, [sp, #8]
 801405a:	9908      	ldr	r1, [sp, #32]
 801405c:	eeb0 8a47 	vmov.f32	s16, s14
 8014060:	eef0 8a67 	vmov.f32	s17, s15
 8014064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014068:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801406c:	2900      	cmp	r1, #0
 801406e:	d045      	beq.n	80140fc <_dtoa_r+0x5b4>
 8014070:	494c      	ldr	r1, [pc, #304]	; (80141a4 <_dtoa_r+0x65c>)
 8014072:	2000      	movs	r0, #0
 8014074:	f7ec fc0a 	bl	800088c <__aeabi_ddiv>
 8014078:	ec53 2b18 	vmov	r2, r3, d8
 801407c:	f7ec f924 	bl	80002c8 <__aeabi_dsub>
 8014080:	9d00      	ldr	r5, [sp, #0]
 8014082:	ec41 0b18 	vmov	d8, r0, r1
 8014086:	4639      	mov	r1, r7
 8014088:	4630      	mov	r0, r6
 801408a:	f7ec fd85 	bl	8000b98 <__aeabi_d2iz>
 801408e:	900c      	str	r0, [sp, #48]	; 0x30
 8014090:	f7ec fa68 	bl	8000564 <__aeabi_i2d>
 8014094:	4602      	mov	r2, r0
 8014096:	460b      	mov	r3, r1
 8014098:	4630      	mov	r0, r6
 801409a:	4639      	mov	r1, r7
 801409c:	f7ec f914 	bl	80002c8 <__aeabi_dsub>
 80140a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140a2:	3330      	adds	r3, #48	; 0x30
 80140a4:	f805 3b01 	strb.w	r3, [r5], #1
 80140a8:	ec53 2b18 	vmov	r2, r3, d8
 80140ac:	4606      	mov	r6, r0
 80140ae:	460f      	mov	r7, r1
 80140b0:	f7ec fd34 	bl	8000b1c <__aeabi_dcmplt>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d165      	bne.n	8014184 <_dtoa_r+0x63c>
 80140b8:	4632      	mov	r2, r6
 80140ba:	463b      	mov	r3, r7
 80140bc:	4935      	ldr	r1, [pc, #212]	; (8014194 <_dtoa_r+0x64c>)
 80140be:	2000      	movs	r0, #0
 80140c0:	f7ec f902 	bl	80002c8 <__aeabi_dsub>
 80140c4:	ec53 2b18 	vmov	r2, r3, d8
 80140c8:	f7ec fd28 	bl	8000b1c <__aeabi_dcmplt>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	f040 80b9 	bne.w	8014244 <_dtoa_r+0x6fc>
 80140d2:	9b02      	ldr	r3, [sp, #8]
 80140d4:	429d      	cmp	r5, r3
 80140d6:	f43f af75 	beq.w	8013fc4 <_dtoa_r+0x47c>
 80140da:	4b2f      	ldr	r3, [pc, #188]	; (8014198 <_dtoa_r+0x650>)
 80140dc:	ec51 0b18 	vmov	r0, r1, d8
 80140e0:	2200      	movs	r2, #0
 80140e2:	f7ec faa9 	bl	8000638 <__aeabi_dmul>
 80140e6:	4b2c      	ldr	r3, [pc, #176]	; (8014198 <_dtoa_r+0x650>)
 80140e8:	ec41 0b18 	vmov	d8, r0, r1
 80140ec:	2200      	movs	r2, #0
 80140ee:	4630      	mov	r0, r6
 80140f0:	4639      	mov	r1, r7
 80140f2:	f7ec faa1 	bl	8000638 <__aeabi_dmul>
 80140f6:	4606      	mov	r6, r0
 80140f8:	460f      	mov	r7, r1
 80140fa:	e7c4      	b.n	8014086 <_dtoa_r+0x53e>
 80140fc:	ec51 0b17 	vmov	r0, r1, d7
 8014100:	f7ec fa9a 	bl	8000638 <__aeabi_dmul>
 8014104:	9b02      	ldr	r3, [sp, #8]
 8014106:	9d00      	ldr	r5, [sp, #0]
 8014108:	930c      	str	r3, [sp, #48]	; 0x30
 801410a:	ec41 0b18 	vmov	d8, r0, r1
 801410e:	4639      	mov	r1, r7
 8014110:	4630      	mov	r0, r6
 8014112:	f7ec fd41 	bl	8000b98 <__aeabi_d2iz>
 8014116:	9011      	str	r0, [sp, #68]	; 0x44
 8014118:	f7ec fa24 	bl	8000564 <__aeabi_i2d>
 801411c:	4602      	mov	r2, r0
 801411e:	460b      	mov	r3, r1
 8014120:	4630      	mov	r0, r6
 8014122:	4639      	mov	r1, r7
 8014124:	f7ec f8d0 	bl	80002c8 <__aeabi_dsub>
 8014128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801412a:	3330      	adds	r3, #48	; 0x30
 801412c:	f805 3b01 	strb.w	r3, [r5], #1
 8014130:	9b02      	ldr	r3, [sp, #8]
 8014132:	429d      	cmp	r5, r3
 8014134:	4606      	mov	r6, r0
 8014136:	460f      	mov	r7, r1
 8014138:	f04f 0200 	mov.w	r2, #0
 801413c:	d134      	bne.n	80141a8 <_dtoa_r+0x660>
 801413e:	4b19      	ldr	r3, [pc, #100]	; (80141a4 <_dtoa_r+0x65c>)
 8014140:	ec51 0b18 	vmov	r0, r1, d8
 8014144:	f7ec f8c2 	bl	80002cc <__adddf3>
 8014148:	4602      	mov	r2, r0
 801414a:	460b      	mov	r3, r1
 801414c:	4630      	mov	r0, r6
 801414e:	4639      	mov	r1, r7
 8014150:	f7ec fd02 	bl	8000b58 <__aeabi_dcmpgt>
 8014154:	2800      	cmp	r0, #0
 8014156:	d175      	bne.n	8014244 <_dtoa_r+0x6fc>
 8014158:	ec53 2b18 	vmov	r2, r3, d8
 801415c:	4911      	ldr	r1, [pc, #68]	; (80141a4 <_dtoa_r+0x65c>)
 801415e:	2000      	movs	r0, #0
 8014160:	f7ec f8b2 	bl	80002c8 <__aeabi_dsub>
 8014164:	4602      	mov	r2, r0
 8014166:	460b      	mov	r3, r1
 8014168:	4630      	mov	r0, r6
 801416a:	4639      	mov	r1, r7
 801416c:	f7ec fcd6 	bl	8000b1c <__aeabi_dcmplt>
 8014170:	2800      	cmp	r0, #0
 8014172:	f43f af27 	beq.w	8013fc4 <_dtoa_r+0x47c>
 8014176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014178:	1e6b      	subs	r3, r5, #1
 801417a:	930c      	str	r3, [sp, #48]	; 0x30
 801417c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014180:	2b30      	cmp	r3, #48	; 0x30
 8014182:	d0f8      	beq.n	8014176 <_dtoa_r+0x62e>
 8014184:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014188:	e04a      	b.n	8014220 <_dtoa_r+0x6d8>
 801418a:	bf00      	nop
 801418c:	08019618 	.word	0x08019618
 8014190:	080195f0 	.word	0x080195f0
 8014194:	3ff00000 	.word	0x3ff00000
 8014198:	40240000 	.word	0x40240000
 801419c:	401c0000 	.word	0x401c0000
 80141a0:	40140000 	.word	0x40140000
 80141a4:	3fe00000 	.word	0x3fe00000
 80141a8:	4baf      	ldr	r3, [pc, #700]	; (8014468 <_dtoa_r+0x920>)
 80141aa:	f7ec fa45 	bl	8000638 <__aeabi_dmul>
 80141ae:	4606      	mov	r6, r0
 80141b0:	460f      	mov	r7, r1
 80141b2:	e7ac      	b.n	801410e <_dtoa_r+0x5c6>
 80141b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80141b8:	9d00      	ldr	r5, [sp, #0]
 80141ba:	4642      	mov	r2, r8
 80141bc:	464b      	mov	r3, r9
 80141be:	4630      	mov	r0, r6
 80141c0:	4639      	mov	r1, r7
 80141c2:	f7ec fb63 	bl	800088c <__aeabi_ddiv>
 80141c6:	f7ec fce7 	bl	8000b98 <__aeabi_d2iz>
 80141ca:	9002      	str	r0, [sp, #8]
 80141cc:	f7ec f9ca 	bl	8000564 <__aeabi_i2d>
 80141d0:	4642      	mov	r2, r8
 80141d2:	464b      	mov	r3, r9
 80141d4:	f7ec fa30 	bl	8000638 <__aeabi_dmul>
 80141d8:	4602      	mov	r2, r0
 80141da:	460b      	mov	r3, r1
 80141dc:	4630      	mov	r0, r6
 80141de:	4639      	mov	r1, r7
 80141e0:	f7ec f872 	bl	80002c8 <__aeabi_dsub>
 80141e4:	9e02      	ldr	r6, [sp, #8]
 80141e6:	9f01      	ldr	r7, [sp, #4]
 80141e8:	3630      	adds	r6, #48	; 0x30
 80141ea:	f805 6b01 	strb.w	r6, [r5], #1
 80141ee:	9e00      	ldr	r6, [sp, #0]
 80141f0:	1bae      	subs	r6, r5, r6
 80141f2:	42b7      	cmp	r7, r6
 80141f4:	4602      	mov	r2, r0
 80141f6:	460b      	mov	r3, r1
 80141f8:	d137      	bne.n	801426a <_dtoa_r+0x722>
 80141fa:	f7ec f867 	bl	80002cc <__adddf3>
 80141fe:	4642      	mov	r2, r8
 8014200:	464b      	mov	r3, r9
 8014202:	4606      	mov	r6, r0
 8014204:	460f      	mov	r7, r1
 8014206:	f7ec fca7 	bl	8000b58 <__aeabi_dcmpgt>
 801420a:	b9c8      	cbnz	r0, 8014240 <_dtoa_r+0x6f8>
 801420c:	4642      	mov	r2, r8
 801420e:	464b      	mov	r3, r9
 8014210:	4630      	mov	r0, r6
 8014212:	4639      	mov	r1, r7
 8014214:	f7ec fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8014218:	b110      	cbz	r0, 8014220 <_dtoa_r+0x6d8>
 801421a:	9b02      	ldr	r3, [sp, #8]
 801421c:	07d9      	lsls	r1, r3, #31
 801421e:	d40f      	bmi.n	8014240 <_dtoa_r+0x6f8>
 8014220:	4620      	mov	r0, r4
 8014222:	4659      	mov	r1, fp
 8014224:	f000 facc 	bl	80147c0 <_Bfree>
 8014228:	2300      	movs	r3, #0
 801422a:	702b      	strb	r3, [r5, #0]
 801422c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801422e:	f10a 0001 	add.w	r0, sl, #1
 8014232:	6018      	str	r0, [r3, #0]
 8014234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014236:	2b00      	cmp	r3, #0
 8014238:	f43f acd8 	beq.w	8013bec <_dtoa_r+0xa4>
 801423c:	601d      	str	r5, [r3, #0]
 801423e:	e4d5      	b.n	8013bec <_dtoa_r+0xa4>
 8014240:	f8cd a01c 	str.w	sl, [sp, #28]
 8014244:	462b      	mov	r3, r5
 8014246:	461d      	mov	r5, r3
 8014248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801424c:	2a39      	cmp	r2, #57	; 0x39
 801424e:	d108      	bne.n	8014262 <_dtoa_r+0x71a>
 8014250:	9a00      	ldr	r2, [sp, #0]
 8014252:	429a      	cmp	r2, r3
 8014254:	d1f7      	bne.n	8014246 <_dtoa_r+0x6fe>
 8014256:	9a07      	ldr	r2, [sp, #28]
 8014258:	9900      	ldr	r1, [sp, #0]
 801425a:	3201      	adds	r2, #1
 801425c:	9207      	str	r2, [sp, #28]
 801425e:	2230      	movs	r2, #48	; 0x30
 8014260:	700a      	strb	r2, [r1, #0]
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	3201      	adds	r2, #1
 8014266:	701a      	strb	r2, [r3, #0]
 8014268:	e78c      	b.n	8014184 <_dtoa_r+0x63c>
 801426a:	4b7f      	ldr	r3, [pc, #508]	; (8014468 <_dtoa_r+0x920>)
 801426c:	2200      	movs	r2, #0
 801426e:	f7ec f9e3 	bl	8000638 <__aeabi_dmul>
 8014272:	2200      	movs	r2, #0
 8014274:	2300      	movs	r3, #0
 8014276:	4606      	mov	r6, r0
 8014278:	460f      	mov	r7, r1
 801427a:	f7ec fc45 	bl	8000b08 <__aeabi_dcmpeq>
 801427e:	2800      	cmp	r0, #0
 8014280:	d09b      	beq.n	80141ba <_dtoa_r+0x672>
 8014282:	e7cd      	b.n	8014220 <_dtoa_r+0x6d8>
 8014284:	9a08      	ldr	r2, [sp, #32]
 8014286:	2a00      	cmp	r2, #0
 8014288:	f000 80c4 	beq.w	8014414 <_dtoa_r+0x8cc>
 801428c:	9a05      	ldr	r2, [sp, #20]
 801428e:	2a01      	cmp	r2, #1
 8014290:	f300 80a8 	bgt.w	80143e4 <_dtoa_r+0x89c>
 8014294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014296:	2a00      	cmp	r2, #0
 8014298:	f000 80a0 	beq.w	80143dc <_dtoa_r+0x894>
 801429c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80142a0:	9e06      	ldr	r6, [sp, #24]
 80142a2:	4645      	mov	r5, r8
 80142a4:	9a04      	ldr	r2, [sp, #16]
 80142a6:	2101      	movs	r1, #1
 80142a8:	441a      	add	r2, r3
 80142aa:	4620      	mov	r0, r4
 80142ac:	4498      	add	r8, r3
 80142ae:	9204      	str	r2, [sp, #16]
 80142b0:	f000 fb42 	bl	8014938 <__i2b>
 80142b4:	4607      	mov	r7, r0
 80142b6:	2d00      	cmp	r5, #0
 80142b8:	dd0b      	ble.n	80142d2 <_dtoa_r+0x78a>
 80142ba:	9b04      	ldr	r3, [sp, #16]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	dd08      	ble.n	80142d2 <_dtoa_r+0x78a>
 80142c0:	42ab      	cmp	r3, r5
 80142c2:	9a04      	ldr	r2, [sp, #16]
 80142c4:	bfa8      	it	ge
 80142c6:	462b      	movge	r3, r5
 80142c8:	eba8 0803 	sub.w	r8, r8, r3
 80142cc:	1aed      	subs	r5, r5, r3
 80142ce:	1ad3      	subs	r3, r2, r3
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	9b06      	ldr	r3, [sp, #24]
 80142d4:	b1fb      	cbz	r3, 8014316 <_dtoa_r+0x7ce>
 80142d6:	9b08      	ldr	r3, [sp, #32]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	f000 809f 	beq.w	801441c <_dtoa_r+0x8d4>
 80142de:	2e00      	cmp	r6, #0
 80142e0:	dd11      	ble.n	8014306 <_dtoa_r+0x7be>
 80142e2:	4639      	mov	r1, r7
 80142e4:	4632      	mov	r2, r6
 80142e6:	4620      	mov	r0, r4
 80142e8:	f000 fbe2 	bl	8014ab0 <__pow5mult>
 80142ec:	465a      	mov	r2, fp
 80142ee:	4601      	mov	r1, r0
 80142f0:	4607      	mov	r7, r0
 80142f2:	4620      	mov	r0, r4
 80142f4:	f000 fb36 	bl	8014964 <__multiply>
 80142f8:	4659      	mov	r1, fp
 80142fa:	9007      	str	r0, [sp, #28]
 80142fc:	4620      	mov	r0, r4
 80142fe:	f000 fa5f 	bl	80147c0 <_Bfree>
 8014302:	9b07      	ldr	r3, [sp, #28]
 8014304:	469b      	mov	fp, r3
 8014306:	9b06      	ldr	r3, [sp, #24]
 8014308:	1b9a      	subs	r2, r3, r6
 801430a:	d004      	beq.n	8014316 <_dtoa_r+0x7ce>
 801430c:	4659      	mov	r1, fp
 801430e:	4620      	mov	r0, r4
 8014310:	f000 fbce 	bl	8014ab0 <__pow5mult>
 8014314:	4683      	mov	fp, r0
 8014316:	2101      	movs	r1, #1
 8014318:	4620      	mov	r0, r4
 801431a:	f000 fb0d 	bl	8014938 <__i2b>
 801431e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014320:	2b00      	cmp	r3, #0
 8014322:	4606      	mov	r6, r0
 8014324:	dd7c      	ble.n	8014420 <_dtoa_r+0x8d8>
 8014326:	461a      	mov	r2, r3
 8014328:	4601      	mov	r1, r0
 801432a:	4620      	mov	r0, r4
 801432c:	f000 fbc0 	bl	8014ab0 <__pow5mult>
 8014330:	9b05      	ldr	r3, [sp, #20]
 8014332:	2b01      	cmp	r3, #1
 8014334:	4606      	mov	r6, r0
 8014336:	dd76      	ble.n	8014426 <_dtoa_r+0x8de>
 8014338:	2300      	movs	r3, #0
 801433a:	9306      	str	r3, [sp, #24]
 801433c:	6933      	ldr	r3, [r6, #16]
 801433e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014342:	6918      	ldr	r0, [r3, #16]
 8014344:	f000 faa8 	bl	8014898 <__hi0bits>
 8014348:	f1c0 0020 	rsb	r0, r0, #32
 801434c:	9b04      	ldr	r3, [sp, #16]
 801434e:	4418      	add	r0, r3
 8014350:	f010 001f 	ands.w	r0, r0, #31
 8014354:	f000 8086 	beq.w	8014464 <_dtoa_r+0x91c>
 8014358:	f1c0 0320 	rsb	r3, r0, #32
 801435c:	2b04      	cmp	r3, #4
 801435e:	dd7f      	ble.n	8014460 <_dtoa_r+0x918>
 8014360:	f1c0 001c 	rsb	r0, r0, #28
 8014364:	9b04      	ldr	r3, [sp, #16]
 8014366:	4403      	add	r3, r0
 8014368:	4480      	add	r8, r0
 801436a:	4405      	add	r5, r0
 801436c:	9304      	str	r3, [sp, #16]
 801436e:	f1b8 0f00 	cmp.w	r8, #0
 8014372:	dd05      	ble.n	8014380 <_dtoa_r+0x838>
 8014374:	4659      	mov	r1, fp
 8014376:	4642      	mov	r2, r8
 8014378:	4620      	mov	r0, r4
 801437a:	f000 fbf3 	bl	8014b64 <__lshift>
 801437e:	4683      	mov	fp, r0
 8014380:	9b04      	ldr	r3, [sp, #16]
 8014382:	2b00      	cmp	r3, #0
 8014384:	dd05      	ble.n	8014392 <_dtoa_r+0x84a>
 8014386:	4631      	mov	r1, r6
 8014388:	461a      	mov	r2, r3
 801438a:	4620      	mov	r0, r4
 801438c:	f000 fbea 	bl	8014b64 <__lshift>
 8014390:	4606      	mov	r6, r0
 8014392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014394:	2b00      	cmp	r3, #0
 8014396:	d069      	beq.n	801446c <_dtoa_r+0x924>
 8014398:	4631      	mov	r1, r6
 801439a:	4658      	mov	r0, fp
 801439c:	f000 fc4e 	bl	8014c3c <__mcmp>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	da63      	bge.n	801446c <_dtoa_r+0x924>
 80143a4:	2300      	movs	r3, #0
 80143a6:	4659      	mov	r1, fp
 80143a8:	220a      	movs	r2, #10
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 fa2a 	bl	8014804 <__multadd>
 80143b0:	9b08      	ldr	r3, [sp, #32]
 80143b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80143b6:	4683      	mov	fp, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f000 818f 	beq.w	80146dc <_dtoa_r+0xb94>
 80143be:	4639      	mov	r1, r7
 80143c0:	2300      	movs	r3, #0
 80143c2:	220a      	movs	r2, #10
 80143c4:	4620      	mov	r0, r4
 80143c6:	f000 fa1d 	bl	8014804 <__multadd>
 80143ca:	f1b9 0f00 	cmp.w	r9, #0
 80143ce:	4607      	mov	r7, r0
 80143d0:	f300 808e 	bgt.w	80144f0 <_dtoa_r+0x9a8>
 80143d4:	9b05      	ldr	r3, [sp, #20]
 80143d6:	2b02      	cmp	r3, #2
 80143d8:	dc50      	bgt.n	801447c <_dtoa_r+0x934>
 80143da:	e089      	b.n	80144f0 <_dtoa_r+0x9a8>
 80143dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80143de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80143e2:	e75d      	b.n	80142a0 <_dtoa_r+0x758>
 80143e4:	9b01      	ldr	r3, [sp, #4]
 80143e6:	1e5e      	subs	r6, r3, #1
 80143e8:	9b06      	ldr	r3, [sp, #24]
 80143ea:	42b3      	cmp	r3, r6
 80143ec:	bfbf      	itttt	lt
 80143ee:	9b06      	ldrlt	r3, [sp, #24]
 80143f0:	9606      	strlt	r6, [sp, #24]
 80143f2:	1af2      	sublt	r2, r6, r3
 80143f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80143f6:	bfb6      	itet	lt
 80143f8:	189b      	addlt	r3, r3, r2
 80143fa:	1b9e      	subge	r6, r3, r6
 80143fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80143fe:	9b01      	ldr	r3, [sp, #4]
 8014400:	bfb8      	it	lt
 8014402:	2600      	movlt	r6, #0
 8014404:	2b00      	cmp	r3, #0
 8014406:	bfb5      	itete	lt
 8014408:	eba8 0503 	sublt.w	r5, r8, r3
 801440c:	9b01      	ldrge	r3, [sp, #4]
 801440e:	2300      	movlt	r3, #0
 8014410:	4645      	movge	r5, r8
 8014412:	e747      	b.n	80142a4 <_dtoa_r+0x75c>
 8014414:	9e06      	ldr	r6, [sp, #24]
 8014416:	9f08      	ldr	r7, [sp, #32]
 8014418:	4645      	mov	r5, r8
 801441a:	e74c      	b.n	80142b6 <_dtoa_r+0x76e>
 801441c:	9a06      	ldr	r2, [sp, #24]
 801441e:	e775      	b.n	801430c <_dtoa_r+0x7c4>
 8014420:	9b05      	ldr	r3, [sp, #20]
 8014422:	2b01      	cmp	r3, #1
 8014424:	dc18      	bgt.n	8014458 <_dtoa_r+0x910>
 8014426:	9b02      	ldr	r3, [sp, #8]
 8014428:	b9b3      	cbnz	r3, 8014458 <_dtoa_r+0x910>
 801442a:	9b03      	ldr	r3, [sp, #12]
 801442c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014430:	b9a3      	cbnz	r3, 801445c <_dtoa_r+0x914>
 8014432:	9b03      	ldr	r3, [sp, #12]
 8014434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014438:	0d1b      	lsrs	r3, r3, #20
 801443a:	051b      	lsls	r3, r3, #20
 801443c:	b12b      	cbz	r3, 801444a <_dtoa_r+0x902>
 801443e:	9b04      	ldr	r3, [sp, #16]
 8014440:	3301      	adds	r3, #1
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	f108 0801 	add.w	r8, r8, #1
 8014448:	2301      	movs	r3, #1
 801444a:	9306      	str	r3, [sp, #24]
 801444c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801444e:	2b00      	cmp	r3, #0
 8014450:	f47f af74 	bne.w	801433c <_dtoa_r+0x7f4>
 8014454:	2001      	movs	r0, #1
 8014456:	e779      	b.n	801434c <_dtoa_r+0x804>
 8014458:	2300      	movs	r3, #0
 801445a:	e7f6      	b.n	801444a <_dtoa_r+0x902>
 801445c:	9b02      	ldr	r3, [sp, #8]
 801445e:	e7f4      	b.n	801444a <_dtoa_r+0x902>
 8014460:	d085      	beq.n	801436e <_dtoa_r+0x826>
 8014462:	4618      	mov	r0, r3
 8014464:	301c      	adds	r0, #28
 8014466:	e77d      	b.n	8014364 <_dtoa_r+0x81c>
 8014468:	40240000 	.word	0x40240000
 801446c:	9b01      	ldr	r3, [sp, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	dc38      	bgt.n	80144e4 <_dtoa_r+0x99c>
 8014472:	9b05      	ldr	r3, [sp, #20]
 8014474:	2b02      	cmp	r3, #2
 8014476:	dd35      	ble.n	80144e4 <_dtoa_r+0x99c>
 8014478:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801447c:	f1b9 0f00 	cmp.w	r9, #0
 8014480:	d10d      	bne.n	801449e <_dtoa_r+0x956>
 8014482:	4631      	mov	r1, r6
 8014484:	464b      	mov	r3, r9
 8014486:	2205      	movs	r2, #5
 8014488:	4620      	mov	r0, r4
 801448a:	f000 f9bb 	bl	8014804 <__multadd>
 801448e:	4601      	mov	r1, r0
 8014490:	4606      	mov	r6, r0
 8014492:	4658      	mov	r0, fp
 8014494:	f000 fbd2 	bl	8014c3c <__mcmp>
 8014498:	2800      	cmp	r0, #0
 801449a:	f73f adbd 	bgt.w	8014018 <_dtoa_r+0x4d0>
 801449e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a0:	9d00      	ldr	r5, [sp, #0]
 80144a2:	ea6f 0a03 	mvn.w	sl, r3
 80144a6:	f04f 0800 	mov.w	r8, #0
 80144aa:	4631      	mov	r1, r6
 80144ac:	4620      	mov	r0, r4
 80144ae:	f000 f987 	bl	80147c0 <_Bfree>
 80144b2:	2f00      	cmp	r7, #0
 80144b4:	f43f aeb4 	beq.w	8014220 <_dtoa_r+0x6d8>
 80144b8:	f1b8 0f00 	cmp.w	r8, #0
 80144bc:	d005      	beq.n	80144ca <_dtoa_r+0x982>
 80144be:	45b8      	cmp	r8, r7
 80144c0:	d003      	beq.n	80144ca <_dtoa_r+0x982>
 80144c2:	4641      	mov	r1, r8
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 f97b 	bl	80147c0 <_Bfree>
 80144ca:	4639      	mov	r1, r7
 80144cc:	4620      	mov	r0, r4
 80144ce:	f000 f977 	bl	80147c0 <_Bfree>
 80144d2:	e6a5      	b.n	8014220 <_dtoa_r+0x6d8>
 80144d4:	2600      	movs	r6, #0
 80144d6:	4637      	mov	r7, r6
 80144d8:	e7e1      	b.n	801449e <_dtoa_r+0x956>
 80144da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80144dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80144e0:	4637      	mov	r7, r6
 80144e2:	e599      	b.n	8014018 <_dtoa_r+0x4d0>
 80144e4:	9b08      	ldr	r3, [sp, #32]
 80144e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f000 80fd 	beq.w	80146ea <_dtoa_r+0xba2>
 80144f0:	2d00      	cmp	r5, #0
 80144f2:	dd05      	ble.n	8014500 <_dtoa_r+0x9b8>
 80144f4:	4639      	mov	r1, r7
 80144f6:	462a      	mov	r2, r5
 80144f8:	4620      	mov	r0, r4
 80144fa:	f000 fb33 	bl	8014b64 <__lshift>
 80144fe:	4607      	mov	r7, r0
 8014500:	9b06      	ldr	r3, [sp, #24]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d05c      	beq.n	80145c0 <_dtoa_r+0xa78>
 8014506:	6879      	ldr	r1, [r7, #4]
 8014508:	4620      	mov	r0, r4
 801450a:	f000 f919 	bl	8014740 <_Balloc>
 801450e:	4605      	mov	r5, r0
 8014510:	b928      	cbnz	r0, 801451e <_dtoa_r+0x9d6>
 8014512:	4b80      	ldr	r3, [pc, #512]	; (8014714 <_dtoa_r+0xbcc>)
 8014514:	4602      	mov	r2, r0
 8014516:	f240 21ea 	movw	r1, #746	; 0x2ea
 801451a:	f7ff bb2e 	b.w	8013b7a <_dtoa_r+0x32>
 801451e:	693a      	ldr	r2, [r7, #16]
 8014520:	3202      	adds	r2, #2
 8014522:	0092      	lsls	r2, r2, #2
 8014524:	f107 010c 	add.w	r1, r7, #12
 8014528:	300c      	adds	r0, #12
 801452a:	f7fe fd25 	bl	8012f78 <memcpy>
 801452e:	2201      	movs	r2, #1
 8014530:	4629      	mov	r1, r5
 8014532:	4620      	mov	r0, r4
 8014534:	f000 fb16 	bl	8014b64 <__lshift>
 8014538:	9b00      	ldr	r3, [sp, #0]
 801453a:	3301      	adds	r3, #1
 801453c:	9301      	str	r3, [sp, #4]
 801453e:	9b00      	ldr	r3, [sp, #0]
 8014540:	444b      	add	r3, r9
 8014542:	9307      	str	r3, [sp, #28]
 8014544:	9b02      	ldr	r3, [sp, #8]
 8014546:	f003 0301 	and.w	r3, r3, #1
 801454a:	46b8      	mov	r8, r7
 801454c:	9306      	str	r3, [sp, #24]
 801454e:	4607      	mov	r7, r0
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	4631      	mov	r1, r6
 8014554:	3b01      	subs	r3, #1
 8014556:	4658      	mov	r0, fp
 8014558:	9302      	str	r3, [sp, #8]
 801455a:	f7ff fa67 	bl	8013a2c <quorem>
 801455e:	4603      	mov	r3, r0
 8014560:	3330      	adds	r3, #48	; 0x30
 8014562:	9004      	str	r0, [sp, #16]
 8014564:	4641      	mov	r1, r8
 8014566:	4658      	mov	r0, fp
 8014568:	9308      	str	r3, [sp, #32]
 801456a:	f000 fb67 	bl	8014c3c <__mcmp>
 801456e:	463a      	mov	r2, r7
 8014570:	4681      	mov	r9, r0
 8014572:	4631      	mov	r1, r6
 8014574:	4620      	mov	r0, r4
 8014576:	f000 fb7d 	bl	8014c74 <__mdiff>
 801457a:	68c2      	ldr	r2, [r0, #12]
 801457c:	9b08      	ldr	r3, [sp, #32]
 801457e:	4605      	mov	r5, r0
 8014580:	bb02      	cbnz	r2, 80145c4 <_dtoa_r+0xa7c>
 8014582:	4601      	mov	r1, r0
 8014584:	4658      	mov	r0, fp
 8014586:	f000 fb59 	bl	8014c3c <__mcmp>
 801458a:	9b08      	ldr	r3, [sp, #32]
 801458c:	4602      	mov	r2, r0
 801458e:	4629      	mov	r1, r5
 8014590:	4620      	mov	r0, r4
 8014592:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014596:	f000 f913 	bl	80147c0 <_Bfree>
 801459a:	9b05      	ldr	r3, [sp, #20]
 801459c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801459e:	9d01      	ldr	r5, [sp, #4]
 80145a0:	ea43 0102 	orr.w	r1, r3, r2
 80145a4:	9b06      	ldr	r3, [sp, #24]
 80145a6:	430b      	orrs	r3, r1
 80145a8:	9b08      	ldr	r3, [sp, #32]
 80145aa:	d10d      	bne.n	80145c8 <_dtoa_r+0xa80>
 80145ac:	2b39      	cmp	r3, #57	; 0x39
 80145ae:	d029      	beq.n	8014604 <_dtoa_r+0xabc>
 80145b0:	f1b9 0f00 	cmp.w	r9, #0
 80145b4:	dd01      	ble.n	80145ba <_dtoa_r+0xa72>
 80145b6:	9b04      	ldr	r3, [sp, #16]
 80145b8:	3331      	adds	r3, #49	; 0x31
 80145ba:	9a02      	ldr	r2, [sp, #8]
 80145bc:	7013      	strb	r3, [r2, #0]
 80145be:	e774      	b.n	80144aa <_dtoa_r+0x962>
 80145c0:	4638      	mov	r0, r7
 80145c2:	e7b9      	b.n	8014538 <_dtoa_r+0x9f0>
 80145c4:	2201      	movs	r2, #1
 80145c6:	e7e2      	b.n	801458e <_dtoa_r+0xa46>
 80145c8:	f1b9 0f00 	cmp.w	r9, #0
 80145cc:	db06      	blt.n	80145dc <_dtoa_r+0xa94>
 80145ce:	9905      	ldr	r1, [sp, #20]
 80145d0:	ea41 0909 	orr.w	r9, r1, r9
 80145d4:	9906      	ldr	r1, [sp, #24]
 80145d6:	ea59 0101 	orrs.w	r1, r9, r1
 80145da:	d120      	bne.n	801461e <_dtoa_r+0xad6>
 80145dc:	2a00      	cmp	r2, #0
 80145de:	ddec      	ble.n	80145ba <_dtoa_r+0xa72>
 80145e0:	4659      	mov	r1, fp
 80145e2:	2201      	movs	r2, #1
 80145e4:	4620      	mov	r0, r4
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	f000 fabc 	bl	8014b64 <__lshift>
 80145ec:	4631      	mov	r1, r6
 80145ee:	4683      	mov	fp, r0
 80145f0:	f000 fb24 	bl	8014c3c <__mcmp>
 80145f4:	2800      	cmp	r0, #0
 80145f6:	9b01      	ldr	r3, [sp, #4]
 80145f8:	dc02      	bgt.n	8014600 <_dtoa_r+0xab8>
 80145fa:	d1de      	bne.n	80145ba <_dtoa_r+0xa72>
 80145fc:	07da      	lsls	r2, r3, #31
 80145fe:	d5dc      	bpl.n	80145ba <_dtoa_r+0xa72>
 8014600:	2b39      	cmp	r3, #57	; 0x39
 8014602:	d1d8      	bne.n	80145b6 <_dtoa_r+0xa6e>
 8014604:	9a02      	ldr	r2, [sp, #8]
 8014606:	2339      	movs	r3, #57	; 0x39
 8014608:	7013      	strb	r3, [r2, #0]
 801460a:	462b      	mov	r3, r5
 801460c:	461d      	mov	r5, r3
 801460e:	3b01      	subs	r3, #1
 8014610:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014614:	2a39      	cmp	r2, #57	; 0x39
 8014616:	d050      	beq.n	80146ba <_dtoa_r+0xb72>
 8014618:	3201      	adds	r2, #1
 801461a:	701a      	strb	r2, [r3, #0]
 801461c:	e745      	b.n	80144aa <_dtoa_r+0x962>
 801461e:	2a00      	cmp	r2, #0
 8014620:	dd03      	ble.n	801462a <_dtoa_r+0xae2>
 8014622:	2b39      	cmp	r3, #57	; 0x39
 8014624:	d0ee      	beq.n	8014604 <_dtoa_r+0xabc>
 8014626:	3301      	adds	r3, #1
 8014628:	e7c7      	b.n	80145ba <_dtoa_r+0xa72>
 801462a:	9a01      	ldr	r2, [sp, #4]
 801462c:	9907      	ldr	r1, [sp, #28]
 801462e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014632:	428a      	cmp	r2, r1
 8014634:	d02a      	beq.n	801468c <_dtoa_r+0xb44>
 8014636:	4659      	mov	r1, fp
 8014638:	2300      	movs	r3, #0
 801463a:	220a      	movs	r2, #10
 801463c:	4620      	mov	r0, r4
 801463e:	f000 f8e1 	bl	8014804 <__multadd>
 8014642:	45b8      	cmp	r8, r7
 8014644:	4683      	mov	fp, r0
 8014646:	f04f 0300 	mov.w	r3, #0
 801464a:	f04f 020a 	mov.w	r2, #10
 801464e:	4641      	mov	r1, r8
 8014650:	4620      	mov	r0, r4
 8014652:	d107      	bne.n	8014664 <_dtoa_r+0xb1c>
 8014654:	f000 f8d6 	bl	8014804 <__multadd>
 8014658:	4680      	mov	r8, r0
 801465a:	4607      	mov	r7, r0
 801465c:	9b01      	ldr	r3, [sp, #4]
 801465e:	3301      	adds	r3, #1
 8014660:	9301      	str	r3, [sp, #4]
 8014662:	e775      	b.n	8014550 <_dtoa_r+0xa08>
 8014664:	f000 f8ce 	bl	8014804 <__multadd>
 8014668:	4639      	mov	r1, r7
 801466a:	4680      	mov	r8, r0
 801466c:	2300      	movs	r3, #0
 801466e:	220a      	movs	r2, #10
 8014670:	4620      	mov	r0, r4
 8014672:	f000 f8c7 	bl	8014804 <__multadd>
 8014676:	4607      	mov	r7, r0
 8014678:	e7f0      	b.n	801465c <_dtoa_r+0xb14>
 801467a:	f1b9 0f00 	cmp.w	r9, #0
 801467e:	9a00      	ldr	r2, [sp, #0]
 8014680:	bfcc      	ite	gt
 8014682:	464d      	movgt	r5, r9
 8014684:	2501      	movle	r5, #1
 8014686:	4415      	add	r5, r2
 8014688:	f04f 0800 	mov.w	r8, #0
 801468c:	4659      	mov	r1, fp
 801468e:	2201      	movs	r2, #1
 8014690:	4620      	mov	r0, r4
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	f000 fa66 	bl	8014b64 <__lshift>
 8014698:	4631      	mov	r1, r6
 801469a:	4683      	mov	fp, r0
 801469c:	f000 face 	bl	8014c3c <__mcmp>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	dcb2      	bgt.n	801460a <_dtoa_r+0xac2>
 80146a4:	d102      	bne.n	80146ac <_dtoa_r+0xb64>
 80146a6:	9b01      	ldr	r3, [sp, #4]
 80146a8:	07db      	lsls	r3, r3, #31
 80146aa:	d4ae      	bmi.n	801460a <_dtoa_r+0xac2>
 80146ac:	462b      	mov	r3, r5
 80146ae:	461d      	mov	r5, r3
 80146b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146b4:	2a30      	cmp	r2, #48	; 0x30
 80146b6:	d0fa      	beq.n	80146ae <_dtoa_r+0xb66>
 80146b8:	e6f7      	b.n	80144aa <_dtoa_r+0x962>
 80146ba:	9a00      	ldr	r2, [sp, #0]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d1a5      	bne.n	801460c <_dtoa_r+0xac4>
 80146c0:	f10a 0a01 	add.w	sl, sl, #1
 80146c4:	2331      	movs	r3, #49	; 0x31
 80146c6:	e779      	b.n	80145bc <_dtoa_r+0xa74>
 80146c8:	4b13      	ldr	r3, [pc, #76]	; (8014718 <_dtoa_r+0xbd0>)
 80146ca:	f7ff baaf 	b.w	8013c2c <_dtoa_r+0xe4>
 80146ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	f47f aa86 	bne.w	8013be2 <_dtoa_r+0x9a>
 80146d6:	4b11      	ldr	r3, [pc, #68]	; (801471c <_dtoa_r+0xbd4>)
 80146d8:	f7ff baa8 	b.w	8013c2c <_dtoa_r+0xe4>
 80146dc:	f1b9 0f00 	cmp.w	r9, #0
 80146e0:	dc03      	bgt.n	80146ea <_dtoa_r+0xba2>
 80146e2:	9b05      	ldr	r3, [sp, #20]
 80146e4:	2b02      	cmp	r3, #2
 80146e6:	f73f aec9 	bgt.w	801447c <_dtoa_r+0x934>
 80146ea:	9d00      	ldr	r5, [sp, #0]
 80146ec:	4631      	mov	r1, r6
 80146ee:	4658      	mov	r0, fp
 80146f0:	f7ff f99c 	bl	8013a2c <quorem>
 80146f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80146f8:	f805 3b01 	strb.w	r3, [r5], #1
 80146fc:	9a00      	ldr	r2, [sp, #0]
 80146fe:	1aaa      	subs	r2, r5, r2
 8014700:	4591      	cmp	r9, r2
 8014702:	ddba      	ble.n	801467a <_dtoa_r+0xb32>
 8014704:	4659      	mov	r1, fp
 8014706:	2300      	movs	r3, #0
 8014708:	220a      	movs	r2, #10
 801470a:	4620      	mov	r0, r4
 801470c:	f000 f87a 	bl	8014804 <__multadd>
 8014710:	4683      	mov	fp, r0
 8014712:	e7eb      	b.n	80146ec <_dtoa_r+0xba4>
 8014714:	0801957f 	.word	0x0801957f
 8014718:	080194d8 	.word	0x080194d8
 801471c:	080194fc 	.word	0x080194fc

08014720 <_localeconv_r>:
 8014720:	4800      	ldr	r0, [pc, #0]	; (8014724 <_localeconv_r+0x4>)
 8014722:	4770      	bx	lr
 8014724:	200008d4 	.word	0x200008d4

08014728 <__malloc_lock>:
 8014728:	4801      	ldr	r0, [pc, #4]	; (8014730 <__malloc_lock+0x8>)
 801472a:	f000 bd48 	b.w	80151be <__retarget_lock_acquire_recursive>
 801472e:	bf00      	nop
 8014730:	20001d1c 	.word	0x20001d1c

08014734 <__malloc_unlock>:
 8014734:	4801      	ldr	r0, [pc, #4]	; (801473c <__malloc_unlock+0x8>)
 8014736:	f000 bd43 	b.w	80151c0 <__retarget_lock_release_recursive>
 801473a:	bf00      	nop
 801473c:	20001d1c 	.word	0x20001d1c

08014740 <_Balloc>:
 8014740:	b570      	push	{r4, r5, r6, lr}
 8014742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014744:	4604      	mov	r4, r0
 8014746:	460d      	mov	r5, r1
 8014748:	b976      	cbnz	r6, 8014768 <_Balloc+0x28>
 801474a:	2010      	movs	r0, #16
 801474c:	f7fe fc04 	bl	8012f58 <malloc>
 8014750:	4602      	mov	r2, r0
 8014752:	6260      	str	r0, [r4, #36]	; 0x24
 8014754:	b920      	cbnz	r0, 8014760 <_Balloc+0x20>
 8014756:	4b18      	ldr	r3, [pc, #96]	; (80147b8 <_Balloc+0x78>)
 8014758:	4818      	ldr	r0, [pc, #96]	; (80147bc <_Balloc+0x7c>)
 801475a:	2166      	movs	r1, #102	; 0x66
 801475c:	f000 fcfe 	bl	801515c <__assert_func>
 8014760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014764:	6006      	str	r6, [r0, #0]
 8014766:	60c6      	str	r6, [r0, #12]
 8014768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801476a:	68f3      	ldr	r3, [r6, #12]
 801476c:	b183      	cbz	r3, 8014790 <_Balloc+0x50>
 801476e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014776:	b9b8      	cbnz	r0, 80147a8 <_Balloc+0x68>
 8014778:	2101      	movs	r1, #1
 801477a:	fa01 f605 	lsl.w	r6, r1, r5
 801477e:	1d72      	adds	r2, r6, #5
 8014780:	0092      	lsls	r2, r2, #2
 8014782:	4620      	mov	r0, r4
 8014784:	f000 fb5a 	bl	8014e3c <_calloc_r>
 8014788:	b160      	cbz	r0, 80147a4 <_Balloc+0x64>
 801478a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801478e:	e00e      	b.n	80147ae <_Balloc+0x6e>
 8014790:	2221      	movs	r2, #33	; 0x21
 8014792:	2104      	movs	r1, #4
 8014794:	4620      	mov	r0, r4
 8014796:	f000 fb51 	bl	8014e3c <_calloc_r>
 801479a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801479c:	60f0      	str	r0, [r6, #12]
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d1e4      	bne.n	801476e <_Balloc+0x2e>
 80147a4:	2000      	movs	r0, #0
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	6802      	ldr	r2, [r0, #0]
 80147aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147ae:	2300      	movs	r3, #0
 80147b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80147b4:	e7f7      	b.n	80147a6 <_Balloc+0x66>
 80147b6:	bf00      	nop
 80147b8:	08019509 	.word	0x08019509
 80147bc:	08019590 	.word	0x08019590

080147c0 <_Bfree>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80147c4:	4605      	mov	r5, r0
 80147c6:	460c      	mov	r4, r1
 80147c8:	b976      	cbnz	r6, 80147e8 <_Bfree+0x28>
 80147ca:	2010      	movs	r0, #16
 80147cc:	f7fe fbc4 	bl	8012f58 <malloc>
 80147d0:	4602      	mov	r2, r0
 80147d2:	6268      	str	r0, [r5, #36]	; 0x24
 80147d4:	b920      	cbnz	r0, 80147e0 <_Bfree+0x20>
 80147d6:	4b09      	ldr	r3, [pc, #36]	; (80147fc <_Bfree+0x3c>)
 80147d8:	4809      	ldr	r0, [pc, #36]	; (8014800 <_Bfree+0x40>)
 80147da:	218a      	movs	r1, #138	; 0x8a
 80147dc:	f000 fcbe 	bl	801515c <__assert_func>
 80147e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147e4:	6006      	str	r6, [r0, #0]
 80147e6:	60c6      	str	r6, [r0, #12]
 80147e8:	b13c      	cbz	r4, 80147fa <_Bfree+0x3a>
 80147ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147ec:	6862      	ldr	r2, [r4, #4]
 80147ee:	68db      	ldr	r3, [r3, #12]
 80147f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80147f4:	6021      	str	r1, [r4, #0]
 80147f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80147fa:	bd70      	pop	{r4, r5, r6, pc}
 80147fc:	08019509 	.word	0x08019509
 8014800:	08019590 	.word	0x08019590

08014804 <__multadd>:
 8014804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014808:	690e      	ldr	r6, [r1, #16]
 801480a:	4607      	mov	r7, r0
 801480c:	4698      	mov	r8, r3
 801480e:	460c      	mov	r4, r1
 8014810:	f101 0014 	add.w	r0, r1, #20
 8014814:	2300      	movs	r3, #0
 8014816:	6805      	ldr	r5, [r0, #0]
 8014818:	b2a9      	uxth	r1, r5
 801481a:	fb02 8101 	mla	r1, r2, r1, r8
 801481e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014822:	0c2d      	lsrs	r5, r5, #16
 8014824:	fb02 c505 	mla	r5, r2, r5, ip
 8014828:	b289      	uxth	r1, r1
 801482a:	3301      	adds	r3, #1
 801482c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014830:	429e      	cmp	r6, r3
 8014832:	f840 1b04 	str.w	r1, [r0], #4
 8014836:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801483a:	dcec      	bgt.n	8014816 <__multadd+0x12>
 801483c:	f1b8 0f00 	cmp.w	r8, #0
 8014840:	d022      	beq.n	8014888 <__multadd+0x84>
 8014842:	68a3      	ldr	r3, [r4, #8]
 8014844:	42b3      	cmp	r3, r6
 8014846:	dc19      	bgt.n	801487c <__multadd+0x78>
 8014848:	6861      	ldr	r1, [r4, #4]
 801484a:	4638      	mov	r0, r7
 801484c:	3101      	adds	r1, #1
 801484e:	f7ff ff77 	bl	8014740 <_Balloc>
 8014852:	4605      	mov	r5, r0
 8014854:	b928      	cbnz	r0, 8014862 <__multadd+0x5e>
 8014856:	4602      	mov	r2, r0
 8014858:	4b0d      	ldr	r3, [pc, #52]	; (8014890 <__multadd+0x8c>)
 801485a:	480e      	ldr	r0, [pc, #56]	; (8014894 <__multadd+0x90>)
 801485c:	21b5      	movs	r1, #181	; 0xb5
 801485e:	f000 fc7d 	bl	801515c <__assert_func>
 8014862:	6922      	ldr	r2, [r4, #16]
 8014864:	3202      	adds	r2, #2
 8014866:	f104 010c 	add.w	r1, r4, #12
 801486a:	0092      	lsls	r2, r2, #2
 801486c:	300c      	adds	r0, #12
 801486e:	f7fe fb83 	bl	8012f78 <memcpy>
 8014872:	4621      	mov	r1, r4
 8014874:	4638      	mov	r0, r7
 8014876:	f7ff ffa3 	bl	80147c0 <_Bfree>
 801487a:	462c      	mov	r4, r5
 801487c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014880:	3601      	adds	r6, #1
 8014882:	f8c3 8014 	str.w	r8, [r3, #20]
 8014886:	6126      	str	r6, [r4, #16]
 8014888:	4620      	mov	r0, r4
 801488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488e:	bf00      	nop
 8014890:	0801957f 	.word	0x0801957f
 8014894:	08019590 	.word	0x08019590

08014898 <__hi0bits>:
 8014898:	0c03      	lsrs	r3, r0, #16
 801489a:	041b      	lsls	r3, r3, #16
 801489c:	b9d3      	cbnz	r3, 80148d4 <__hi0bits+0x3c>
 801489e:	0400      	lsls	r0, r0, #16
 80148a0:	2310      	movs	r3, #16
 80148a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80148a6:	bf04      	itt	eq
 80148a8:	0200      	lsleq	r0, r0, #8
 80148aa:	3308      	addeq	r3, #8
 80148ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80148b0:	bf04      	itt	eq
 80148b2:	0100      	lsleq	r0, r0, #4
 80148b4:	3304      	addeq	r3, #4
 80148b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80148ba:	bf04      	itt	eq
 80148bc:	0080      	lsleq	r0, r0, #2
 80148be:	3302      	addeq	r3, #2
 80148c0:	2800      	cmp	r0, #0
 80148c2:	db05      	blt.n	80148d0 <__hi0bits+0x38>
 80148c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80148c8:	f103 0301 	add.w	r3, r3, #1
 80148cc:	bf08      	it	eq
 80148ce:	2320      	moveq	r3, #32
 80148d0:	4618      	mov	r0, r3
 80148d2:	4770      	bx	lr
 80148d4:	2300      	movs	r3, #0
 80148d6:	e7e4      	b.n	80148a2 <__hi0bits+0xa>

080148d8 <__lo0bits>:
 80148d8:	6803      	ldr	r3, [r0, #0]
 80148da:	f013 0207 	ands.w	r2, r3, #7
 80148de:	4601      	mov	r1, r0
 80148e0:	d00b      	beq.n	80148fa <__lo0bits+0x22>
 80148e2:	07da      	lsls	r2, r3, #31
 80148e4:	d424      	bmi.n	8014930 <__lo0bits+0x58>
 80148e6:	0798      	lsls	r0, r3, #30
 80148e8:	bf49      	itett	mi
 80148ea:	085b      	lsrmi	r3, r3, #1
 80148ec:	089b      	lsrpl	r3, r3, #2
 80148ee:	2001      	movmi	r0, #1
 80148f0:	600b      	strmi	r3, [r1, #0]
 80148f2:	bf5c      	itt	pl
 80148f4:	600b      	strpl	r3, [r1, #0]
 80148f6:	2002      	movpl	r0, #2
 80148f8:	4770      	bx	lr
 80148fa:	b298      	uxth	r0, r3
 80148fc:	b9b0      	cbnz	r0, 801492c <__lo0bits+0x54>
 80148fe:	0c1b      	lsrs	r3, r3, #16
 8014900:	2010      	movs	r0, #16
 8014902:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014906:	bf04      	itt	eq
 8014908:	0a1b      	lsreq	r3, r3, #8
 801490a:	3008      	addeq	r0, #8
 801490c:	071a      	lsls	r2, r3, #28
 801490e:	bf04      	itt	eq
 8014910:	091b      	lsreq	r3, r3, #4
 8014912:	3004      	addeq	r0, #4
 8014914:	079a      	lsls	r2, r3, #30
 8014916:	bf04      	itt	eq
 8014918:	089b      	lsreq	r3, r3, #2
 801491a:	3002      	addeq	r0, #2
 801491c:	07da      	lsls	r2, r3, #31
 801491e:	d403      	bmi.n	8014928 <__lo0bits+0x50>
 8014920:	085b      	lsrs	r3, r3, #1
 8014922:	f100 0001 	add.w	r0, r0, #1
 8014926:	d005      	beq.n	8014934 <__lo0bits+0x5c>
 8014928:	600b      	str	r3, [r1, #0]
 801492a:	4770      	bx	lr
 801492c:	4610      	mov	r0, r2
 801492e:	e7e8      	b.n	8014902 <__lo0bits+0x2a>
 8014930:	2000      	movs	r0, #0
 8014932:	4770      	bx	lr
 8014934:	2020      	movs	r0, #32
 8014936:	4770      	bx	lr

08014938 <__i2b>:
 8014938:	b510      	push	{r4, lr}
 801493a:	460c      	mov	r4, r1
 801493c:	2101      	movs	r1, #1
 801493e:	f7ff feff 	bl	8014740 <_Balloc>
 8014942:	4602      	mov	r2, r0
 8014944:	b928      	cbnz	r0, 8014952 <__i2b+0x1a>
 8014946:	4b05      	ldr	r3, [pc, #20]	; (801495c <__i2b+0x24>)
 8014948:	4805      	ldr	r0, [pc, #20]	; (8014960 <__i2b+0x28>)
 801494a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801494e:	f000 fc05 	bl	801515c <__assert_func>
 8014952:	2301      	movs	r3, #1
 8014954:	6144      	str	r4, [r0, #20]
 8014956:	6103      	str	r3, [r0, #16]
 8014958:	bd10      	pop	{r4, pc}
 801495a:	bf00      	nop
 801495c:	0801957f 	.word	0x0801957f
 8014960:	08019590 	.word	0x08019590

08014964 <__multiply>:
 8014964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014968:	4614      	mov	r4, r2
 801496a:	690a      	ldr	r2, [r1, #16]
 801496c:	6923      	ldr	r3, [r4, #16]
 801496e:	429a      	cmp	r2, r3
 8014970:	bfb8      	it	lt
 8014972:	460b      	movlt	r3, r1
 8014974:	460d      	mov	r5, r1
 8014976:	bfbc      	itt	lt
 8014978:	4625      	movlt	r5, r4
 801497a:	461c      	movlt	r4, r3
 801497c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014980:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014984:	68ab      	ldr	r3, [r5, #8]
 8014986:	6869      	ldr	r1, [r5, #4]
 8014988:	eb0a 0709 	add.w	r7, sl, r9
 801498c:	42bb      	cmp	r3, r7
 801498e:	b085      	sub	sp, #20
 8014990:	bfb8      	it	lt
 8014992:	3101      	addlt	r1, #1
 8014994:	f7ff fed4 	bl	8014740 <_Balloc>
 8014998:	b930      	cbnz	r0, 80149a8 <__multiply+0x44>
 801499a:	4602      	mov	r2, r0
 801499c:	4b42      	ldr	r3, [pc, #264]	; (8014aa8 <__multiply+0x144>)
 801499e:	4843      	ldr	r0, [pc, #268]	; (8014aac <__multiply+0x148>)
 80149a0:	f240 115d 	movw	r1, #349	; 0x15d
 80149a4:	f000 fbda 	bl	801515c <__assert_func>
 80149a8:	f100 0614 	add.w	r6, r0, #20
 80149ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80149b0:	4633      	mov	r3, r6
 80149b2:	2200      	movs	r2, #0
 80149b4:	4543      	cmp	r3, r8
 80149b6:	d31e      	bcc.n	80149f6 <__multiply+0x92>
 80149b8:	f105 0c14 	add.w	ip, r5, #20
 80149bc:	f104 0314 	add.w	r3, r4, #20
 80149c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80149c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80149c8:	9202      	str	r2, [sp, #8]
 80149ca:	ebac 0205 	sub.w	r2, ip, r5
 80149ce:	3a15      	subs	r2, #21
 80149d0:	f022 0203 	bic.w	r2, r2, #3
 80149d4:	3204      	adds	r2, #4
 80149d6:	f105 0115 	add.w	r1, r5, #21
 80149da:	458c      	cmp	ip, r1
 80149dc:	bf38      	it	cc
 80149de:	2204      	movcc	r2, #4
 80149e0:	9201      	str	r2, [sp, #4]
 80149e2:	9a02      	ldr	r2, [sp, #8]
 80149e4:	9303      	str	r3, [sp, #12]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d808      	bhi.n	80149fc <__multiply+0x98>
 80149ea:	2f00      	cmp	r7, #0
 80149ec:	dc55      	bgt.n	8014a9a <__multiply+0x136>
 80149ee:	6107      	str	r7, [r0, #16]
 80149f0:	b005      	add	sp, #20
 80149f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f6:	f843 2b04 	str.w	r2, [r3], #4
 80149fa:	e7db      	b.n	80149b4 <__multiply+0x50>
 80149fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8014a00:	f1ba 0f00 	cmp.w	sl, #0
 8014a04:	d020      	beq.n	8014a48 <__multiply+0xe4>
 8014a06:	f105 0e14 	add.w	lr, r5, #20
 8014a0a:	46b1      	mov	r9, r6
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014a12:	f8d9 b000 	ldr.w	fp, [r9]
 8014a16:	b2a1      	uxth	r1, r4
 8014a18:	fa1f fb8b 	uxth.w	fp, fp
 8014a1c:	fb0a b101 	mla	r1, sl, r1, fp
 8014a20:	4411      	add	r1, r2
 8014a22:	f8d9 2000 	ldr.w	r2, [r9]
 8014a26:	0c24      	lsrs	r4, r4, #16
 8014a28:	0c12      	lsrs	r2, r2, #16
 8014a2a:	fb0a 2404 	mla	r4, sl, r4, r2
 8014a2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014a32:	b289      	uxth	r1, r1
 8014a34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014a38:	45f4      	cmp	ip, lr
 8014a3a:	f849 1b04 	str.w	r1, [r9], #4
 8014a3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014a42:	d8e4      	bhi.n	8014a0e <__multiply+0xaa>
 8014a44:	9901      	ldr	r1, [sp, #4]
 8014a46:	5072      	str	r2, [r6, r1]
 8014a48:	9a03      	ldr	r2, [sp, #12]
 8014a4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014a4e:	3304      	adds	r3, #4
 8014a50:	f1b9 0f00 	cmp.w	r9, #0
 8014a54:	d01f      	beq.n	8014a96 <__multiply+0x132>
 8014a56:	6834      	ldr	r4, [r6, #0]
 8014a58:	f105 0114 	add.w	r1, r5, #20
 8014a5c:	46b6      	mov	lr, r6
 8014a5e:	f04f 0a00 	mov.w	sl, #0
 8014a62:	880a      	ldrh	r2, [r1, #0]
 8014a64:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014a68:	fb09 b202 	mla	r2, r9, r2, fp
 8014a6c:	4492      	add	sl, r2
 8014a6e:	b2a4      	uxth	r4, r4
 8014a70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014a74:	f84e 4b04 	str.w	r4, [lr], #4
 8014a78:	f851 4b04 	ldr.w	r4, [r1], #4
 8014a7c:	f8be 2000 	ldrh.w	r2, [lr]
 8014a80:	0c24      	lsrs	r4, r4, #16
 8014a82:	fb09 2404 	mla	r4, r9, r4, r2
 8014a86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014a8a:	458c      	cmp	ip, r1
 8014a8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014a90:	d8e7      	bhi.n	8014a62 <__multiply+0xfe>
 8014a92:	9a01      	ldr	r2, [sp, #4]
 8014a94:	50b4      	str	r4, [r6, r2]
 8014a96:	3604      	adds	r6, #4
 8014a98:	e7a3      	b.n	80149e2 <__multiply+0x7e>
 8014a9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1a5      	bne.n	80149ee <__multiply+0x8a>
 8014aa2:	3f01      	subs	r7, #1
 8014aa4:	e7a1      	b.n	80149ea <__multiply+0x86>
 8014aa6:	bf00      	nop
 8014aa8:	0801957f 	.word	0x0801957f
 8014aac:	08019590 	.word	0x08019590

08014ab0 <__pow5mult>:
 8014ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ab4:	4615      	mov	r5, r2
 8014ab6:	f012 0203 	ands.w	r2, r2, #3
 8014aba:	4606      	mov	r6, r0
 8014abc:	460f      	mov	r7, r1
 8014abe:	d007      	beq.n	8014ad0 <__pow5mult+0x20>
 8014ac0:	4c25      	ldr	r4, [pc, #148]	; (8014b58 <__pow5mult+0xa8>)
 8014ac2:	3a01      	subs	r2, #1
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014aca:	f7ff fe9b 	bl	8014804 <__multadd>
 8014ace:	4607      	mov	r7, r0
 8014ad0:	10ad      	asrs	r5, r5, #2
 8014ad2:	d03d      	beq.n	8014b50 <__pow5mult+0xa0>
 8014ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014ad6:	b97c      	cbnz	r4, 8014af8 <__pow5mult+0x48>
 8014ad8:	2010      	movs	r0, #16
 8014ada:	f7fe fa3d 	bl	8012f58 <malloc>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	6270      	str	r0, [r6, #36]	; 0x24
 8014ae2:	b928      	cbnz	r0, 8014af0 <__pow5mult+0x40>
 8014ae4:	4b1d      	ldr	r3, [pc, #116]	; (8014b5c <__pow5mult+0xac>)
 8014ae6:	481e      	ldr	r0, [pc, #120]	; (8014b60 <__pow5mult+0xb0>)
 8014ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014aec:	f000 fb36 	bl	801515c <__assert_func>
 8014af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014af4:	6004      	str	r4, [r0, #0]
 8014af6:	60c4      	str	r4, [r0, #12]
 8014af8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014b00:	b94c      	cbnz	r4, 8014b16 <__pow5mult+0x66>
 8014b02:	f240 2171 	movw	r1, #625	; 0x271
 8014b06:	4630      	mov	r0, r6
 8014b08:	f7ff ff16 	bl	8014938 <__i2b>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b12:	4604      	mov	r4, r0
 8014b14:	6003      	str	r3, [r0, #0]
 8014b16:	f04f 0900 	mov.w	r9, #0
 8014b1a:	07eb      	lsls	r3, r5, #31
 8014b1c:	d50a      	bpl.n	8014b34 <__pow5mult+0x84>
 8014b1e:	4639      	mov	r1, r7
 8014b20:	4622      	mov	r2, r4
 8014b22:	4630      	mov	r0, r6
 8014b24:	f7ff ff1e 	bl	8014964 <__multiply>
 8014b28:	4639      	mov	r1, r7
 8014b2a:	4680      	mov	r8, r0
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	f7ff fe47 	bl	80147c0 <_Bfree>
 8014b32:	4647      	mov	r7, r8
 8014b34:	106d      	asrs	r5, r5, #1
 8014b36:	d00b      	beq.n	8014b50 <__pow5mult+0xa0>
 8014b38:	6820      	ldr	r0, [r4, #0]
 8014b3a:	b938      	cbnz	r0, 8014b4c <__pow5mult+0x9c>
 8014b3c:	4622      	mov	r2, r4
 8014b3e:	4621      	mov	r1, r4
 8014b40:	4630      	mov	r0, r6
 8014b42:	f7ff ff0f 	bl	8014964 <__multiply>
 8014b46:	6020      	str	r0, [r4, #0]
 8014b48:	f8c0 9000 	str.w	r9, [r0]
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	e7e4      	b.n	8014b1a <__pow5mult+0x6a>
 8014b50:	4638      	mov	r0, r7
 8014b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b56:	bf00      	nop
 8014b58:	080196e0 	.word	0x080196e0
 8014b5c:	08019509 	.word	0x08019509
 8014b60:	08019590 	.word	0x08019590

08014b64 <__lshift>:
 8014b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b68:	460c      	mov	r4, r1
 8014b6a:	6849      	ldr	r1, [r1, #4]
 8014b6c:	6923      	ldr	r3, [r4, #16]
 8014b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b72:	68a3      	ldr	r3, [r4, #8]
 8014b74:	4607      	mov	r7, r0
 8014b76:	4691      	mov	r9, r2
 8014b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b7c:	f108 0601 	add.w	r6, r8, #1
 8014b80:	42b3      	cmp	r3, r6
 8014b82:	db0b      	blt.n	8014b9c <__lshift+0x38>
 8014b84:	4638      	mov	r0, r7
 8014b86:	f7ff fddb 	bl	8014740 <_Balloc>
 8014b8a:	4605      	mov	r5, r0
 8014b8c:	b948      	cbnz	r0, 8014ba2 <__lshift+0x3e>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	4b28      	ldr	r3, [pc, #160]	; (8014c34 <__lshift+0xd0>)
 8014b92:	4829      	ldr	r0, [pc, #164]	; (8014c38 <__lshift+0xd4>)
 8014b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014b98:	f000 fae0 	bl	801515c <__assert_func>
 8014b9c:	3101      	adds	r1, #1
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	e7ee      	b.n	8014b80 <__lshift+0x1c>
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	f100 0114 	add.w	r1, r0, #20
 8014ba8:	f100 0210 	add.w	r2, r0, #16
 8014bac:	4618      	mov	r0, r3
 8014bae:	4553      	cmp	r3, sl
 8014bb0:	db33      	blt.n	8014c1a <__lshift+0xb6>
 8014bb2:	6920      	ldr	r0, [r4, #16]
 8014bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014bb8:	f104 0314 	add.w	r3, r4, #20
 8014bbc:	f019 091f 	ands.w	r9, r9, #31
 8014bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014bc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014bc8:	d02b      	beq.n	8014c22 <__lshift+0xbe>
 8014bca:	f1c9 0e20 	rsb	lr, r9, #32
 8014bce:	468a      	mov	sl, r1
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	6818      	ldr	r0, [r3, #0]
 8014bd4:	fa00 f009 	lsl.w	r0, r0, r9
 8014bd8:	4302      	orrs	r2, r0
 8014bda:	f84a 2b04 	str.w	r2, [sl], #4
 8014bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8014be2:	459c      	cmp	ip, r3
 8014be4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014be8:	d8f3      	bhi.n	8014bd2 <__lshift+0x6e>
 8014bea:	ebac 0304 	sub.w	r3, ip, r4
 8014bee:	3b15      	subs	r3, #21
 8014bf0:	f023 0303 	bic.w	r3, r3, #3
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	f104 0015 	add.w	r0, r4, #21
 8014bfa:	4584      	cmp	ip, r0
 8014bfc:	bf38      	it	cc
 8014bfe:	2304      	movcc	r3, #4
 8014c00:	50ca      	str	r2, [r1, r3]
 8014c02:	b10a      	cbz	r2, 8014c08 <__lshift+0xa4>
 8014c04:	f108 0602 	add.w	r6, r8, #2
 8014c08:	3e01      	subs	r6, #1
 8014c0a:	4638      	mov	r0, r7
 8014c0c:	612e      	str	r6, [r5, #16]
 8014c0e:	4621      	mov	r1, r4
 8014c10:	f7ff fdd6 	bl	80147c0 <_Bfree>
 8014c14:	4628      	mov	r0, r5
 8014c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014c1e:	3301      	adds	r3, #1
 8014c20:	e7c5      	b.n	8014bae <__lshift+0x4a>
 8014c22:	3904      	subs	r1, #4
 8014c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c28:	f841 2f04 	str.w	r2, [r1, #4]!
 8014c2c:	459c      	cmp	ip, r3
 8014c2e:	d8f9      	bhi.n	8014c24 <__lshift+0xc0>
 8014c30:	e7ea      	b.n	8014c08 <__lshift+0xa4>
 8014c32:	bf00      	nop
 8014c34:	0801957f 	.word	0x0801957f
 8014c38:	08019590 	.word	0x08019590

08014c3c <__mcmp>:
 8014c3c:	b530      	push	{r4, r5, lr}
 8014c3e:	6902      	ldr	r2, [r0, #16]
 8014c40:	690c      	ldr	r4, [r1, #16]
 8014c42:	1b12      	subs	r2, r2, r4
 8014c44:	d10e      	bne.n	8014c64 <__mcmp+0x28>
 8014c46:	f100 0314 	add.w	r3, r0, #20
 8014c4a:	3114      	adds	r1, #20
 8014c4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014c50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014c54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014c58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014c5c:	42a5      	cmp	r5, r4
 8014c5e:	d003      	beq.n	8014c68 <__mcmp+0x2c>
 8014c60:	d305      	bcc.n	8014c6e <__mcmp+0x32>
 8014c62:	2201      	movs	r2, #1
 8014c64:	4610      	mov	r0, r2
 8014c66:	bd30      	pop	{r4, r5, pc}
 8014c68:	4283      	cmp	r3, r0
 8014c6a:	d3f3      	bcc.n	8014c54 <__mcmp+0x18>
 8014c6c:	e7fa      	b.n	8014c64 <__mcmp+0x28>
 8014c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c72:	e7f7      	b.n	8014c64 <__mcmp+0x28>

08014c74 <__mdiff>:
 8014c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c78:	460c      	mov	r4, r1
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	4620      	mov	r0, r4
 8014c80:	4617      	mov	r7, r2
 8014c82:	f7ff ffdb 	bl	8014c3c <__mcmp>
 8014c86:	1e05      	subs	r5, r0, #0
 8014c88:	d110      	bne.n	8014cac <__mdiff+0x38>
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f7ff fd57 	bl	8014740 <_Balloc>
 8014c92:	b930      	cbnz	r0, 8014ca2 <__mdiff+0x2e>
 8014c94:	4b39      	ldr	r3, [pc, #228]	; (8014d7c <__mdiff+0x108>)
 8014c96:	4602      	mov	r2, r0
 8014c98:	f240 2132 	movw	r1, #562	; 0x232
 8014c9c:	4838      	ldr	r0, [pc, #224]	; (8014d80 <__mdiff+0x10c>)
 8014c9e:	f000 fa5d 	bl	801515c <__assert_func>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cac:	bfa4      	itt	ge
 8014cae:	463b      	movge	r3, r7
 8014cb0:	4627      	movge	r7, r4
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	6879      	ldr	r1, [r7, #4]
 8014cb6:	bfa6      	itte	ge
 8014cb8:	461c      	movge	r4, r3
 8014cba:	2500      	movge	r5, #0
 8014cbc:	2501      	movlt	r5, #1
 8014cbe:	f7ff fd3f 	bl	8014740 <_Balloc>
 8014cc2:	b920      	cbnz	r0, 8014cce <__mdiff+0x5a>
 8014cc4:	4b2d      	ldr	r3, [pc, #180]	; (8014d7c <__mdiff+0x108>)
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014ccc:	e7e6      	b.n	8014c9c <__mdiff+0x28>
 8014cce:	693e      	ldr	r6, [r7, #16]
 8014cd0:	60c5      	str	r5, [r0, #12]
 8014cd2:	6925      	ldr	r5, [r4, #16]
 8014cd4:	f107 0114 	add.w	r1, r7, #20
 8014cd8:	f104 0914 	add.w	r9, r4, #20
 8014cdc:	f100 0e14 	add.w	lr, r0, #20
 8014ce0:	f107 0210 	add.w	r2, r7, #16
 8014ce4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014ce8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014cec:	46f2      	mov	sl, lr
 8014cee:	2700      	movs	r7, #0
 8014cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8014cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014cf8:	fa1f f883 	uxth.w	r8, r3
 8014cfc:	fa17 f78b 	uxtah	r7, r7, fp
 8014d00:	0c1b      	lsrs	r3, r3, #16
 8014d02:	eba7 0808 	sub.w	r8, r7, r8
 8014d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014d0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014d0e:	fa1f f888 	uxth.w	r8, r8
 8014d12:	141f      	asrs	r7, r3, #16
 8014d14:	454d      	cmp	r5, r9
 8014d16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8014d1e:	d8e7      	bhi.n	8014cf0 <__mdiff+0x7c>
 8014d20:	1b2b      	subs	r3, r5, r4
 8014d22:	3b15      	subs	r3, #21
 8014d24:	f023 0303 	bic.w	r3, r3, #3
 8014d28:	3304      	adds	r3, #4
 8014d2a:	3415      	adds	r4, #21
 8014d2c:	42a5      	cmp	r5, r4
 8014d2e:	bf38      	it	cc
 8014d30:	2304      	movcc	r3, #4
 8014d32:	4419      	add	r1, r3
 8014d34:	4473      	add	r3, lr
 8014d36:	469e      	mov	lr, r3
 8014d38:	460d      	mov	r5, r1
 8014d3a:	4565      	cmp	r5, ip
 8014d3c:	d30e      	bcc.n	8014d5c <__mdiff+0xe8>
 8014d3e:	f10c 0203 	add.w	r2, ip, #3
 8014d42:	1a52      	subs	r2, r2, r1
 8014d44:	f022 0203 	bic.w	r2, r2, #3
 8014d48:	3903      	subs	r1, #3
 8014d4a:	458c      	cmp	ip, r1
 8014d4c:	bf38      	it	cc
 8014d4e:	2200      	movcc	r2, #0
 8014d50:	441a      	add	r2, r3
 8014d52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014d56:	b17b      	cbz	r3, 8014d78 <__mdiff+0x104>
 8014d58:	6106      	str	r6, [r0, #16]
 8014d5a:	e7a5      	b.n	8014ca8 <__mdiff+0x34>
 8014d5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014d60:	fa17 f488 	uxtah	r4, r7, r8
 8014d64:	1422      	asrs	r2, r4, #16
 8014d66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014d6a:	b2a4      	uxth	r4, r4
 8014d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014d70:	f84e 4b04 	str.w	r4, [lr], #4
 8014d74:	1417      	asrs	r7, r2, #16
 8014d76:	e7e0      	b.n	8014d3a <__mdiff+0xc6>
 8014d78:	3e01      	subs	r6, #1
 8014d7a:	e7ea      	b.n	8014d52 <__mdiff+0xde>
 8014d7c:	0801957f 	.word	0x0801957f
 8014d80:	08019590 	.word	0x08019590

08014d84 <__d2b>:
 8014d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d88:	4689      	mov	r9, r1
 8014d8a:	2101      	movs	r1, #1
 8014d8c:	ec57 6b10 	vmov	r6, r7, d0
 8014d90:	4690      	mov	r8, r2
 8014d92:	f7ff fcd5 	bl	8014740 <_Balloc>
 8014d96:	4604      	mov	r4, r0
 8014d98:	b930      	cbnz	r0, 8014da8 <__d2b+0x24>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	4b25      	ldr	r3, [pc, #148]	; (8014e34 <__d2b+0xb0>)
 8014d9e:	4826      	ldr	r0, [pc, #152]	; (8014e38 <__d2b+0xb4>)
 8014da0:	f240 310a 	movw	r1, #778	; 0x30a
 8014da4:	f000 f9da 	bl	801515c <__assert_func>
 8014da8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014db0:	bb35      	cbnz	r5, 8014e00 <__d2b+0x7c>
 8014db2:	2e00      	cmp	r6, #0
 8014db4:	9301      	str	r3, [sp, #4]
 8014db6:	d028      	beq.n	8014e0a <__d2b+0x86>
 8014db8:	4668      	mov	r0, sp
 8014dba:	9600      	str	r6, [sp, #0]
 8014dbc:	f7ff fd8c 	bl	80148d8 <__lo0bits>
 8014dc0:	9900      	ldr	r1, [sp, #0]
 8014dc2:	b300      	cbz	r0, 8014e06 <__d2b+0x82>
 8014dc4:	9a01      	ldr	r2, [sp, #4]
 8014dc6:	f1c0 0320 	rsb	r3, r0, #32
 8014dca:	fa02 f303 	lsl.w	r3, r2, r3
 8014dce:	430b      	orrs	r3, r1
 8014dd0:	40c2      	lsrs	r2, r0
 8014dd2:	6163      	str	r3, [r4, #20]
 8014dd4:	9201      	str	r2, [sp, #4]
 8014dd6:	9b01      	ldr	r3, [sp, #4]
 8014dd8:	61a3      	str	r3, [r4, #24]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	bf14      	ite	ne
 8014dde:	2202      	movne	r2, #2
 8014de0:	2201      	moveq	r2, #1
 8014de2:	6122      	str	r2, [r4, #16]
 8014de4:	b1d5      	cbz	r5, 8014e1c <__d2b+0x98>
 8014de6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014dea:	4405      	add	r5, r0
 8014dec:	f8c9 5000 	str.w	r5, [r9]
 8014df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014df4:	f8c8 0000 	str.w	r0, [r8]
 8014df8:	4620      	mov	r0, r4
 8014dfa:	b003      	add	sp, #12
 8014dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e04:	e7d5      	b.n	8014db2 <__d2b+0x2e>
 8014e06:	6161      	str	r1, [r4, #20]
 8014e08:	e7e5      	b.n	8014dd6 <__d2b+0x52>
 8014e0a:	a801      	add	r0, sp, #4
 8014e0c:	f7ff fd64 	bl	80148d8 <__lo0bits>
 8014e10:	9b01      	ldr	r3, [sp, #4]
 8014e12:	6163      	str	r3, [r4, #20]
 8014e14:	2201      	movs	r2, #1
 8014e16:	6122      	str	r2, [r4, #16]
 8014e18:	3020      	adds	r0, #32
 8014e1a:	e7e3      	b.n	8014de4 <__d2b+0x60>
 8014e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014e24:	f8c9 0000 	str.w	r0, [r9]
 8014e28:	6918      	ldr	r0, [r3, #16]
 8014e2a:	f7ff fd35 	bl	8014898 <__hi0bits>
 8014e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e32:	e7df      	b.n	8014df4 <__d2b+0x70>
 8014e34:	0801957f 	.word	0x0801957f
 8014e38:	08019590 	.word	0x08019590

08014e3c <_calloc_r>:
 8014e3c:	b513      	push	{r0, r1, r4, lr}
 8014e3e:	434a      	muls	r2, r1
 8014e40:	4611      	mov	r1, r2
 8014e42:	9201      	str	r2, [sp, #4]
 8014e44:	f7fe f8fe 	bl	8013044 <_malloc_r>
 8014e48:	4604      	mov	r4, r0
 8014e4a:	b118      	cbz	r0, 8014e54 <_calloc_r+0x18>
 8014e4c:	9a01      	ldr	r2, [sp, #4]
 8014e4e:	2100      	movs	r1, #0
 8014e50:	f7fe f8a0 	bl	8012f94 <memset>
 8014e54:	4620      	mov	r0, r4
 8014e56:	b002      	add	sp, #8
 8014e58:	bd10      	pop	{r4, pc}

08014e5a <_realloc_r>:
 8014e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e5c:	4607      	mov	r7, r0
 8014e5e:	4614      	mov	r4, r2
 8014e60:	460e      	mov	r6, r1
 8014e62:	b921      	cbnz	r1, 8014e6e <_realloc_r+0x14>
 8014e64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e68:	4611      	mov	r1, r2
 8014e6a:	f7fe b8eb 	b.w	8013044 <_malloc_r>
 8014e6e:	b922      	cbnz	r2, 8014e7a <_realloc_r+0x20>
 8014e70:	f7fe f898 	bl	8012fa4 <_free_r>
 8014e74:	4625      	mov	r5, r4
 8014e76:	4628      	mov	r0, r5
 8014e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e7a:	f000 f9ce 	bl	801521a <_malloc_usable_size_r>
 8014e7e:	42a0      	cmp	r0, r4
 8014e80:	d20f      	bcs.n	8014ea2 <_realloc_r+0x48>
 8014e82:	4621      	mov	r1, r4
 8014e84:	4638      	mov	r0, r7
 8014e86:	f7fe f8dd 	bl	8013044 <_malloc_r>
 8014e8a:	4605      	mov	r5, r0
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d0f2      	beq.n	8014e76 <_realloc_r+0x1c>
 8014e90:	4631      	mov	r1, r6
 8014e92:	4622      	mov	r2, r4
 8014e94:	f7fe f870 	bl	8012f78 <memcpy>
 8014e98:	4631      	mov	r1, r6
 8014e9a:	4638      	mov	r0, r7
 8014e9c:	f7fe f882 	bl	8012fa4 <_free_r>
 8014ea0:	e7e9      	b.n	8014e76 <_realloc_r+0x1c>
 8014ea2:	4635      	mov	r5, r6
 8014ea4:	e7e7      	b.n	8014e76 <_realloc_r+0x1c>

08014ea6 <__ssputs_r>:
 8014ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eaa:	688e      	ldr	r6, [r1, #8]
 8014eac:	429e      	cmp	r6, r3
 8014eae:	4682      	mov	sl, r0
 8014eb0:	460c      	mov	r4, r1
 8014eb2:	4690      	mov	r8, r2
 8014eb4:	461f      	mov	r7, r3
 8014eb6:	d838      	bhi.n	8014f2a <__ssputs_r+0x84>
 8014eb8:	898a      	ldrh	r2, [r1, #12]
 8014eba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014ebe:	d032      	beq.n	8014f26 <__ssputs_r+0x80>
 8014ec0:	6825      	ldr	r5, [r4, #0]
 8014ec2:	6909      	ldr	r1, [r1, #16]
 8014ec4:	eba5 0901 	sub.w	r9, r5, r1
 8014ec8:	6965      	ldr	r5, [r4, #20]
 8014eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	444b      	add	r3, r9
 8014ed6:	106d      	asrs	r5, r5, #1
 8014ed8:	429d      	cmp	r5, r3
 8014eda:	bf38      	it	cc
 8014edc:	461d      	movcc	r5, r3
 8014ede:	0553      	lsls	r3, r2, #21
 8014ee0:	d531      	bpl.n	8014f46 <__ssputs_r+0xa0>
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	f7fe f8ae 	bl	8013044 <_malloc_r>
 8014ee8:	4606      	mov	r6, r0
 8014eea:	b950      	cbnz	r0, 8014f02 <__ssputs_r+0x5c>
 8014eec:	230c      	movs	r3, #12
 8014eee:	f8ca 3000 	str.w	r3, [sl]
 8014ef2:	89a3      	ldrh	r3, [r4, #12]
 8014ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ef8:	81a3      	strh	r3, [r4, #12]
 8014efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f02:	6921      	ldr	r1, [r4, #16]
 8014f04:	464a      	mov	r2, r9
 8014f06:	f7fe f837 	bl	8012f78 <memcpy>
 8014f0a:	89a3      	ldrh	r3, [r4, #12]
 8014f0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f14:	81a3      	strh	r3, [r4, #12]
 8014f16:	6126      	str	r6, [r4, #16]
 8014f18:	6165      	str	r5, [r4, #20]
 8014f1a:	444e      	add	r6, r9
 8014f1c:	eba5 0509 	sub.w	r5, r5, r9
 8014f20:	6026      	str	r6, [r4, #0]
 8014f22:	60a5      	str	r5, [r4, #8]
 8014f24:	463e      	mov	r6, r7
 8014f26:	42be      	cmp	r6, r7
 8014f28:	d900      	bls.n	8014f2c <__ssputs_r+0x86>
 8014f2a:	463e      	mov	r6, r7
 8014f2c:	4632      	mov	r2, r6
 8014f2e:	6820      	ldr	r0, [r4, #0]
 8014f30:	4641      	mov	r1, r8
 8014f32:	f000 f958 	bl	80151e6 <memmove>
 8014f36:	68a3      	ldr	r3, [r4, #8]
 8014f38:	6822      	ldr	r2, [r4, #0]
 8014f3a:	1b9b      	subs	r3, r3, r6
 8014f3c:	4432      	add	r2, r6
 8014f3e:	60a3      	str	r3, [r4, #8]
 8014f40:	6022      	str	r2, [r4, #0]
 8014f42:	2000      	movs	r0, #0
 8014f44:	e7db      	b.n	8014efe <__ssputs_r+0x58>
 8014f46:	462a      	mov	r2, r5
 8014f48:	f7ff ff87 	bl	8014e5a <_realloc_r>
 8014f4c:	4606      	mov	r6, r0
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d1e1      	bne.n	8014f16 <__ssputs_r+0x70>
 8014f52:	6921      	ldr	r1, [r4, #16]
 8014f54:	4650      	mov	r0, sl
 8014f56:	f7fe f825 	bl	8012fa4 <_free_r>
 8014f5a:	e7c7      	b.n	8014eec <__ssputs_r+0x46>

08014f5c <_svfiprintf_r>:
 8014f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f60:	4698      	mov	r8, r3
 8014f62:	898b      	ldrh	r3, [r1, #12]
 8014f64:	061b      	lsls	r3, r3, #24
 8014f66:	b09d      	sub	sp, #116	; 0x74
 8014f68:	4607      	mov	r7, r0
 8014f6a:	460d      	mov	r5, r1
 8014f6c:	4614      	mov	r4, r2
 8014f6e:	d50e      	bpl.n	8014f8e <_svfiprintf_r+0x32>
 8014f70:	690b      	ldr	r3, [r1, #16]
 8014f72:	b963      	cbnz	r3, 8014f8e <_svfiprintf_r+0x32>
 8014f74:	2140      	movs	r1, #64	; 0x40
 8014f76:	f7fe f865 	bl	8013044 <_malloc_r>
 8014f7a:	6028      	str	r0, [r5, #0]
 8014f7c:	6128      	str	r0, [r5, #16]
 8014f7e:	b920      	cbnz	r0, 8014f8a <_svfiprintf_r+0x2e>
 8014f80:	230c      	movs	r3, #12
 8014f82:	603b      	str	r3, [r7, #0]
 8014f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f88:	e0d1      	b.n	801512e <_svfiprintf_r+0x1d2>
 8014f8a:	2340      	movs	r3, #64	; 0x40
 8014f8c:	616b      	str	r3, [r5, #20]
 8014f8e:	2300      	movs	r3, #0
 8014f90:	9309      	str	r3, [sp, #36]	; 0x24
 8014f92:	2320      	movs	r3, #32
 8014f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f9c:	2330      	movs	r3, #48	; 0x30
 8014f9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015148 <_svfiprintf_r+0x1ec>
 8014fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fa6:	f04f 0901 	mov.w	r9, #1
 8014faa:	4623      	mov	r3, r4
 8014fac:	469a      	mov	sl, r3
 8014fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fb2:	b10a      	cbz	r2, 8014fb8 <_svfiprintf_r+0x5c>
 8014fb4:	2a25      	cmp	r2, #37	; 0x25
 8014fb6:	d1f9      	bne.n	8014fac <_svfiprintf_r+0x50>
 8014fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8014fbc:	d00b      	beq.n	8014fd6 <_svfiprintf_r+0x7a>
 8014fbe:	465b      	mov	r3, fp
 8014fc0:	4622      	mov	r2, r4
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	4638      	mov	r0, r7
 8014fc6:	f7ff ff6e 	bl	8014ea6 <__ssputs_r>
 8014fca:	3001      	adds	r0, #1
 8014fcc:	f000 80aa 	beq.w	8015124 <_svfiprintf_r+0x1c8>
 8014fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fd2:	445a      	add	r2, fp
 8014fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8014fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 80a2 	beq.w	8015124 <_svfiprintf_r+0x1c8>
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fea:	f10a 0a01 	add.w	sl, sl, #1
 8014fee:	9304      	str	r3, [sp, #16]
 8014ff0:	9307      	str	r3, [sp, #28]
 8014ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8014ff8:	4654      	mov	r4, sl
 8014ffa:	2205      	movs	r2, #5
 8014ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015000:	4851      	ldr	r0, [pc, #324]	; (8015148 <_svfiprintf_r+0x1ec>)
 8015002:	f7eb f90d 	bl	8000220 <memchr>
 8015006:	9a04      	ldr	r2, [sp, #16]
 8015008:	b9d8      	cbnz	r0, 8015042 <_svfiprintf_r+0xe6>
 801500a:	06d0      	lsls	r0, r2, #27
 801500c:	bf44      	itt	mi
 801500e:	2320      	movmi	r3, #32
 8015010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015014:	0711      	lsls	r1, r2, #28
 8015016:	bf44      	itt	mi
 8015018:	232b      	movmi	r3, #43	; 0x2b
 801501a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801501e:	f89a 3000 	ldrb.w	r3, [sl]
 8015022:	2b2a      	cmp	r3, #42	; 0x2a
 8015024:	d015      	beq.n	8015052 <_svfiprintf_r+0xf6>
 8015026:	9a07      	ldr	r2, [sp, #28]
 8015028:	4654      	mov	r4, sl
 801502a:	2000      	movs	r0, #0
 801502c:	f04f 0c0a 	mov.w	ip, #10
 8015030:	4621      	mov	r1, r4
 8015032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015036:	3b30      	subs	r3, #48	; 0x30
 8015038:	2b09      	cmp	r3, #9
 801503a:	d94e      	bls.n	80150da <_svfiprintf_r+0x17e>
 801503c:	b1b0      	cbz	r0, 801506c <_svfiprintf_r+0x110>
 801503e:	9207      	str	r2, [sp, #28]
 8015040:	e014      	b.n	801506c <_svfiprintf_r+0x110>
 8015042:	eba0 0308 	sub.w	r3, r0, r8
 8015046:	fa09 f303 	lsl.w	r3, r9, r3
 801504a:	4313      	orrs	r3, r2
 801504c:	9304      	str	r3, [sp, #16]
 801504e:	46a2      	mov	sl, r4
 8015050:	e7d2      	b.n	8014ff8 <_svfiprintf_r+0x9c>
 8015052:	9b03      	ldr	r3, [sp, #12]
 8015054:	1d19      	adds	r1, r3, #4
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	9103      	str	r1, [sp, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	bfbb      	ittet	lt
 801505e:	425b      	neglt	r3, r3
 8015060:	f042 0202 	orrlt.w	r2, r2, #2
 8015064:	9307      	strge	r3, [sp, #28]
 8015066:	9307      	strlt	r3, [sp, #28]
 8015068:	bfb8      	it	lt
 801506a:	9204      	strlt	r2, [sp, #16]
 801506c:	7823      	ldrb	r3, [r4, #0]
 801506e:	2b2e      	cmp	r3, #46	; 0x2e
 8015070:	d10c      	bne.n	801508c <_svfiprintf_r+0x130>
 8015072:	7863      	ldrb	r3, [r4, #1]
 8015074:	2b2a      	cmp	r3, #42	; 0x2a
 8015076:	d135      	bne.n	80150e4 <_svfiprintf_r+0x188>
 8015078:	9b03      	ldr	r3, [sp, #12]
 801507a:	1d1a      	adds	r2, r3, #4
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	9203      	str	r2, [sp, #12]
 8015080:	2b00      	cmp	r3, #0
 8015082:	bfb8      	it	lt
 8015084:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015088:	3402      	adds	r4, #2
 801508a:	9305      	str	r3, [sp, #20]
 801508c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015158 <_svfiprintf_r+0x1fc>
 8015090:	7821      	ldrb	r1, [r4, #0]
 8015092:	2203      	movs	r2, #3
 8015094:	4650      	mov	r0, sl
 8015096:	f7eb f8c3 	bl	8000220 <memchr>
 801509a:	b140      	cbz	r0, 80150ae <_svfiprintf_r+0x152>
 801509c:	2340      	movs	r3, #64	; 0x40
 801509e:	eba0 000a 	sub.w	r0, r0, sl
 80150a2:	fa03 f000 	lsl.w	r0, r3, r0
 80150a6:	9b04      	ldr	r3, [sp, #16]
 80150a8:	4303      	orrs	r3, r0
 80150aa:	3401      	adds	r4, #1
 80150ac:	9304      	str	r3, [sp, #16]
 80150ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150b2:	4826      	ldr	r0, [pc, #152]	; (801514c <_svfiprintf_r+0x1f0>)
 80150b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150b8:	2206      	movs	r2, #6
 80150ba:	f7eb f8b1 	bl	8000220 <memchr>
 80150be:	2800      	cmp	r0, #0
 80150c0:	d038      	beq.n	8015134 <_svfiprintf_r+0x1d8>
 80150c2:	4b23      	ldr	r3, [pc, #140]	; (8015150 <_svfiprintf_r+0x1f4>)
 80150c4:	bb1b      	cbnz	r3, 801510e <_svfiprintf_r+0x1b2>
 80150c6:	9b03      	ldr	r3, [sp, #12]
 80150c8:	3307      	adds	r3, #7
 80150ca:	f023 0307 	bic.w	r3, r3, #7
 80150ce:	3308      	adds	r3, #8
 80150d0:	9303      	str	r3, [sp, #12]
 80150d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d4:	4433      	add	r3, r6
 80150d6:	9309      	str	r3, [sp, #36]	; 0x24
 80150d8:	e767      	b.n	8014faa <_svfiprintf_r+0x4e>
 80150da:	fb0c 3202 	mla	r2, ip, r2, r3
 80150de:	460c      	mov	r4, r1
 80150e0:	2001      	movs	r0, #1
 80150e2:	e7a5      	b.n	8015030 <_svfiprintf_r+0xd4>
 80150e4:	2300      	movs	r3, #0
 80150e6:	3401      	adds	r4, #1
 80150e8:	9305      	str	r3, [sp, #20]
 80150ea:	4619      	mov	r1, r3
 80150ec:	f04f 0c0a 	mov.w	ip, #10
 80150f0:	4620      	mov	r0, r4
 80150f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150f6:	3a30      	subs	r2, #48	; 0x30
 80150f8:	2a09      	cmp	r2, #9
 80150fa:	d903      	bls.n	8015104 <_svfiprintf_r+0x1a8>
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d0c5      	beq.n	801508c <_svfiprintf_r+0x130>
 8015100:	9105      	str	r1, [sp, #20]
 8015102:	e7c3      	b.n	801508c <_svfiprintf_r+0x130>
 8015104:	fb0c 2101 	mla	r1, ip, r1, r2
 8015108:	4604      	mov	r4, r0
 801510a:	2301      	movs	r3, #1
 801510c:	e7f0      	b.n	80150f0 <_svfiprintf_r+0x194>
 801510e:	ab03      	add	r3, sp, #12
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	462a      	mov	r2, r5
 8015114:	4b0f      	ldr	r3, [pc, #60]	; (8015154 <_svfiprintf_r+0x1f8>)
 8015116:	a904      	add	r1, sp, #16
 8015118:	4638      	mov	r0, r7
 801511a:	f7fe f88d 	bl	8013238 <_printf_float>
 801511e:	1c42      	adds	r2, r0, #1
 8015120:	4606      	mov	r6, r0
 8015122:	d1d6      	bne.n	80150d2 <_svfiprintf_r+0x176>
 8015124:	89ab      	ldrh	r3, [r5, #12]
 8015126:	065b      	lsls	r3, r3, #25
 8015128:	f53f af2c 	bmi.w	8014f84 <_svfiprintf_r+0x28>
 801512c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801512e:	b01d      	add	sp, #116	; 0x74
 8015130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015134:	ab03      	add	r3, sp, #12
 8015136:	9300      	str	r3, [sp, #0]
 8015138:	462a      	mov	r2, r5
 801513a:	4b06      	ldr	r3, [pc, #24]	; (8015154 <_svfiprintf_r+0x1f8>)
 801513c:	a904      	add	r1, sp, #16
 801513e:	4638      	mov	r0, r7
 8015140:	f7fe fb1e 	bl	8013780 <_printf_i>
 8015144:	e7eb      	b.n	801511e <_svfiprintf_r+0x1c2>
 8015146:	bf00      	nop
 8015148:	080196ec 	.word	0x080196ec
 801514c:	080196f6 	.word	0x080196f6
 8015150:	08013239 	.word	0x08013239
 8015154:	08014ea7 	.word	0x08014ea7
 8015158:	080196f2 	.word	0x080196f2

0801515c <__assert_func>:
 801515c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801515e:	4614      	mov	r4, r2
 8015160:	461a      	mov	r2, r3
 8015162:	4b09      	ldr	r3, [pc, #36]	; (8015188 <__assert_func+0x2c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	4605      	mov	r5, r0
 8015168:	68d8      	ldr	r0, [r3, #12]
 801516a:	b14c      	cbz	r4, 8015180 <__assert_func+0x24>
 801516c:	4b07      	ldr	r3, [pc, #28]	; (801518c <__assert_func+0x30>)
 801516e:	9100      	str	r1, [sp, #0]
 8015170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015174:	4906      	ldr	r1, [pc, #24]	; (8015190 <__assert_func+0x34>)
 8015176:	462b      	mov	r3, r5
 8015178:	f000 f80e 	bl	8015198 <fiprintf>
 801517c:	f000 fa7c 	bl	8015678 <abort>
 8015180:	4b04      	ldr	r3, [pc, #16]	; (8015194 <__assert_func+0x38>)
 8015182:	461c      	mov	r4, r3
 8015184:	e7f3      	b.n	801516e <__assert_func+0x12>
 8015186:	bf00      	nop
 8015188:	20000780 	.word	0x20000780
 801518c:	080196fd 	.word	0x080196fd
 8015190:	0801970a 	.word	0x0801970a
 8015194:	08019738 	.word	0x08019738

08015198 <fiprintf>:
 8015198:	b40e      	push	{r1, r2, r3}
 801519a:	b503      	push	{r0, r1, lr}
 801519c:	4601      	mov	r1, r0
 801519e:	ab03      	add	r3, sp, #12
 80151a0:	4805      	ldr	r0, [pc, #20]	; (80151b8 <fiprintf+0x20>)
 80151a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80151a6:	6800      	ldr	r0, [r0, #0]
 80151a8:	9301      	str	r3, [sp, #4]
 80151aa:	f000 f867 	bl	801527c <_vfiprintf_r>
 80151ae:	b002      	add	sp, #8
 80151b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80151b4:	b003      	add	sp, #12
 80151b6:	4770      	bx	lr
 80151b8:	20000780 	.word	0x20000780

080151bc <__retarget_lock_init_recursive>:
 80151bc:	4770      	bx	lr

080151be <__retarget_lock_acquire_recursive>:
 80151be:	4770      	bx	lr

080151c0 <__retarget_lock_release_recursive>:
 80151c0:	4770      	bx	lr

080151c2 <__ascii_mbtowc>:
 80151c2:	b082      	sub	sp, #8
 80151c4:	b901      	cbnz	r1, 80151c8 <__ascii_mbtowc+0x6>
 80151c6:	a901      	add	r1, sp, #4
 80151c8:	b142      	cbz	r2, 80151dc <__ascii_mbtowc+0x1a>
 80151ca:	b14b      	cbz	r3, 80151e0 <__ascii_mbtowc+0x1e>
 80151cc:	7813      	ldrb	r3, [r2, #0]
 80151ce:	600b      	str	r3, [r1, #0]
 80151d0:	7812      	ldrb	r2, [r2, #0]
 80151d2:	1e10      	subs	r0, r2, #0
 80151d4:	bf18      	it	ne
 80151d6:	2001      	movne	r0, #1
 80151d8:	b002      	add	sp, #8
 80151da:	4770      	bx	lr
 80151dc:	4610      	mov	r0, r2
 80151de:	e7fb      	b.n	80151d8 <__ascii_mbtowc+0x16>
 80151e0:	f06f 0001 	mvn.w	r0, #1
 80151e4:	e7f8      	b.n	80151d8 <__ascii_mbtowc+0x16>

080151e6 <memmove>:
 80151e6:	4288      	cmp	r0, r1
 80151e8:	b510      	push	{r4, lr}
 80151ea:	eb01 0402 	add.w	r4, r1, r2
 80151ee:	d902      	bls.n	80151f6 <memmove+0x10>
 80151f0:	4284      	cmp	r4, r0
 80151f2:	4623      	mov	r3, r4
 80151f4:	d807      	bhi.n	8015206 <memmove+0x20>
 80151f6:	1e43      	subs	r3, r0, #1
 80151f8:	42a1      	cmp	r1, r4
 80151fa:	d008      	beq.n	801520e <memmove+0x28>
 80151fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015200:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015204:	e7f8      	b.n	80151f8 <memmove+0x12>
 8015206:	4402      	add	r2, r0
 8015208:	4601      	mov	r1, r0
 801520a:	428a      	cmp	r2, r1
 801520c:	d100      	bne.n	8015210 <memmove+0x2a>
 801520e:	bd10      	pop	{r4, pc}
 8015210:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015214:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015218:	e7f7      	b.n	801520a <memmove+0x24>

0801521a <_malloc_usable_size_r>:
 801521a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801521e:	1f18      	subs	r0, r3, #4
 8015220:	2b00      	cmp	r3, #0
 8015222:	bfbc      	itt	lt
 8015224:	580b      	ldrlt	r3, [r1, r0]
 8015226:	18c0      	addlt	r0, r0, r3
 8015228:	4770      	bx	lr

0801522a <__sfputc_r>:
 801522a:	6893      	ldr	r3, [r2, #8]
 801522c:	3b01      	subs	r3, #1
 801522e:	2b00      	cmp	r3, #0
 8015230:	b410      	push	{r4}
 8015232:	6093      	str	r3, [r2, #8]
 8015234:	da08      	bge.n	8015248 <__sfputc_r+0x1e>
 8015236:	6994      	ldr	r4, [r2, #24]
 8015238:	42a3      	cmp	r3, r4
 801523a:	db01      	blt.n	8015240 <__sfputc_r+0x16>
 801523c:	290a      	cmp	r1, #10
 801523e:	d103      	bne.n	8015248 <__sfputc_r+0x1e>
 8015240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015244:	f000 b94a 	b.w	80154dc <__swbuf_r>
 8015248:	6813      	ldr	r3, [r2, #0]
 801524a:	1c58      	adds	r0, r3, #1
 801524c:	6010      	str	r0, [r2, #0]
 801524e:	7019      	strb	r1, [r3, #0]
 8015250:	4608      	mov	r0, r1
 8015252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015256:	4770      	bx	lr

08015258 <__sfputs_r>:
 8015258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525a:	4606      	mov	r6, r0
 801525c:	460f      	mov	r7, r1
 801525e:	4614      	mov	r4, r2
 8015260:	18d5      	adds	r5, r2, r3
 8015262:	42ac      	cmp	r4, r5
 8015264:	d101      	bne.n	801526a <__sfputs_r+0x12>
 8015266:	2000      	movs	r0, #0
 8015268:	e007      	b.n	801527a <__sfputs_r+0x22>
 801526a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801526e:	463a      	mov	r2, r7
 8015270:	4630      	mov	r0, r6
 8015272:	f7ff ffda 	bl	801522a <__sfputc_r>
 8015276:	1c43      	adds	r3, r0, #1
 8015278:	d1f3      	bne.n	8015262 <__sfputs_r+0xa>
 801527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801527c <_vfiprintf_r>:
 801527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015280:	460d      	mov	r5, r1
 8015282:	b09d      	sub	sp, #116	; 0x74
 8015284:	4614      	mov	r4, r2
 8015286:	4698      	mov	r8, r3
 8015288:	4606      	mov	r6, r0
 801528a:	b118      	cbz	r0, 8015294 <_vfiprintf_r+0x18>
 801528c:	6983      	ldr	r3, [r0, #24]
 801528e:	b90b      	cbnz	r3, 8015294 <_vfiprintf_r+0x18>
 8015290:	f000 fb14 	bl	80158bc <__sinit>
 8015294:	4b89      	ldr	r3, [pc, #548]	; (80154bc <_vfiprintf_r+0x240>)
 8015296:	429d      	cmp	r5, r3
 8015298:	d11b      	bne.n	80152d2 <_vfiprintf_r+0x56>
 801529a:	6875      	ldr	r5, [r6, #4]
 801529c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801529e:	07d9      	lsls	r1, r3, #31
 80152a0:	d405      	bmi.n	80152ae <_vfiprintf_r+0x32>
 80152a2:	89ab      	ldrh	r3, [r5, #12]
 80152a4:	059a      	lsls	r2, r3, #22
 80152a6:	d402      	bmi.n	80152ae <_vfiprintf_r+0x32>
 80152a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152aa:	f7ff ff88 	bl	80151be <__retarget_lock_acquire_recursive>
 80152ae:	89ab      	ldrh	r3, [r5, #12]
 80152b0:	071b      	lsls	r3, r3, #28
 80152b2:	d501      	bpl.n	80152b8 <_vfiprintf_r+0x3c>
 80152b4:	692b      	ldr	r3, [r5, #16]
 80152b6:	b9eb      	cbnz	r3, 80152f4 <_vfiprintf_r+0x78>
 80152b8:	4629      	mov	r1, r5
 80152ba:	4630      	mov	r0, r6
 80152bc:	f000 f96e 	bl	801559c <__swsetup_r>
 80152c0:	b1c0      	cbz	r0, 80152f4 <_vfiprintf_r+0x78>
 80152c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152c4:	07dc      	lsls	r4, r3, #31
 80152c6:	d50e      	bpl.n	80152e6 <_vfiprintf_r+0x6a>
 80152c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152cc:	b01d      	add	sp, #116	; 0x74
 80152ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d2:	4b7b      	ldr	r3, [pc, #492]	; (80154c0 <_vfiprintf_r+0x244>)
 80152d4:	429d      	cmp	r5, r3
 80152d6:	d101      	bne.n	80152dc <_vfiprintf_r+0x60>
 80152d8:	68b5      	ldr	r5, [r6, #8]
 80152da:	e7df      	b.n	801529c <_vfiprintf_r+0x20>
 80152dc:	4b79      	ldr	r3, [pc, #484]	; (80154c4 <_vfiprintf_r+0x248>)
 80152de:	429d      	cmp	r5, r3
 80152e0:	bf08      	it	eq
 80152e2:	68f5      	ldreq	r5, [r6, #12]
 80152e4:	e7da      	b.n	801529c <_vfiprintf_r+0x20>
 80152e6:	89ab      	ldrh	r3, [r5, #12]
 80152e8:	0598      	lsls	r0, r3, #22
 80152ea:	d4ed      	bmi.n	80152c8 <_vfiprintf_r+0x4c>
 80152ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152ee:	f7ff ff67 	bl	80151c0 <__retarget_lock_release_recursive>
 80152f2:	e7e9      	b.n	80152c8 <_vfiprintf_r+0x4c>
 80152f4:	2300      	movs	r3, #0
 80152f6:	9309      	str	r3, [sp, #36]	; 0x24
 80152f8:	2320      	movs	r3, #32
 80152fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015302:	2330      	movs	r3, #48	; 0x30
 8015304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80154c8 <_vfiprintf_r+0x24c>
 8015308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801530c:	f04f 0901 	mov.w	r9, #1
 8015310:	4623      	mov	r3, r4
 8015312:	469a      	mov	sl, r3
 8015314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015318:	b10a      	cbz	r2, 801531e <_vfiprintf_r+0xa2>
 801531a:	2a25      	cmp	r2, #37	; 0x25
 801531c:	d1f9      	bne.n	8015312 <_vfiprintf_r+0x96>
 801531e:	ebba 0b04 	subs.w	fp, sl, r4
 8015322:	d00b      	beq.n	801533c <_vfiprintf_r+0xc0>
 8015324:	465b      	mov	r3, fp
 8015326:	4622      	mov	r2, r4
 8015328:	4629      	mov	r1, r5
 801532a:	4630      	mov	r0, r6
 801532c:	f7ff ff94 	bl	8015258 <__sfputs_r>
 8015330:	3001      	adds	r0, #1
 8015332:	f000 80aa 	beq.w	801548a <_vfiprintf_r+0x20e>
 8015336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015338:	445a      	add	r2, fp
 801533a:	9209      	str	r2, [sp, #36]	; 0x24
 801533c:	f89a 3000 	ldrb.w	r3, [sl]
 8015340:	2b00      	cmp	r3, #0
 8015342:	f000 80a2 	beq.w	801548a <_vfiprintf_r+0x20e>
 8015346:	2300      	movs	r3, #0
 8015348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801534c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015350:	f10a 0a01 	add.w	sl, sl, #1
 8015354:	9304      	str	r3, [sp, #16]
 8015356:	9307      	str	r3, [sp, #28]
 8015358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801535c:	931a      	str	r3, [sp, #104]	; 0x68
 801535e:	4654      	mov	r4, sl
 8015360:	2205      	movs	r2, #5
 8015362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015366:	4858      	ldr	r0, [pc, #352]	; (80154c8 <_vfiprintf_r+0x24c>)
 8015368:	f7ea ff5a 	bl	8000220 <memchr>
 801536c:	9a04      	ldr	r2, [sp, #16]
 801536e:	b9d8      	cbnz	r0, 80153a8 <_vfiprintf_r+0x12c>
 8015370:	06d1      	lsls	r1, r2, #27
 8015372:	bf44      	itt	mi
 8015374:	2320      	movmi	r3, #32
 8015376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801537a:	0713      	lsls	r3, r2, #28
 801537c:	bf44      	itt	mi
 801537e:	232b      	movmi	r3, #43	; 0x2b
 8015380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015384:	f89a 3000 	ldrb.w	r3, [sl]
 8015388:	2b2a      	cmp	r3, #42	; 0x2a
 801538a:	d015      	beq.n	80153b8 <_vfiprintf_r+0x13c>
 801538c:	9a07      	ldr	r2, [sp, #28]
 801538e:	4654      	mov	r4, sl
 8015390:	2000      	movs	r0, #0
 8015392:	f04f 0c0a 	mov.w	ip, #10
 8015396:	4621      	mov	r1, r4
 8015398:	f811 3b01 	ldrb.w	r3, [r1], #1
 801539c:	3b30      	subs	r3, #48	; 0x30
 801539e:	2b09      	cmp	r3, #9
 80153a0:	d94e      	bls.n	8015440 <_vfiprintf_r+0x1c4>
 80153a2:	b1b0      	cbz	r0, 80153d2 <_vfiprintf_r+0x156>
 80153a4:	9207      	str	r2, [sp, #28]
 80153a6:	e014      	b.n	80153d2 <_vfiprintf_r+0x156>
 80153a8:	eba0 0308 	sub.w	r3, r0, r8
 80153ac:	fa09 f303 	lsl.w	r3, r9, r3
 80153b0:	4313      	orrs	r3, r2
 80153b2:	9304      	str	r3, [sp, #16]
 80153b4:	46a2      	mov	sl, r4
 80153b6:	e7d2      	b.n	801535e <_vfiprintf_r+0xe2>
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	1d19      	adds	r1, r3, #4
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	9103      	str	r1, [sp, #12]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	bfbb      	ittet	lt
 80153c4:	425b      	neglt	r3, r3
 80153c6:	f042 0202 	orrlt.w	r2, r2, #2
 80153ca:	9307      	strge	r3, [sp, #28]
 80153cc:	9307      	strlt	r3, [sp, #28]
 80153ce:	bfb8      	it	lt
 80153d0:	9204      	strlt	r2, [sp, #16]
 80153d2:	7823      	ldrb	r3, [r4, #0]
 80153d4:	2b2e      	cmp	r3, #46	; 0x2e
 80153d6:	d10c      	bne.n	80153f2 <_vfiprintf_r+0x176>
 80153d8:	7863      	ldrb	r3, [r4, #1]
 80153da:	2b2a      	cmp	r3, #42	; 0x2a
 80153dc:	d135      	bne.n	801544a <_vfiprintf_r+0x1ce>
 80153de:	9b03      	ldr	r3, [sp, #12]
 80153e0:	1d1a      	adds	r2, r3, #4
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	9203      	str	r2, [sp, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	bfb8      	it	lt
 80153ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80153ee:	3402      	adds	r4, #2
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80154d8 <_vfiprintf_r+0x25c>
 80153f6:	7821      	ldrb	r1, [r4, #0]
 80153f8:	2203      	movs	r2, #3
 80153fa:	4650      	mov	r0, sl
 80153fc:	f7ea ff10 	bl	8000220 <memchr>
 8015400:	b140      	cbz	r0, 8015414 <_vfiprintf_r+0x198>
 8015402:	2340      	movs	r3, #64	; 0x40
 8015404:	eba0 000a 	sub.w	r0, r0, sl
 8015408:	fa03 f000 	lsl.w	r0, r3, r0
 801540c:	9b04      	ldr	r3, [sp, #16]
 801540e:	4303      	orrs	r3, r0
 8015410:	3401      	adds	r4, #1
 8015412:	9304      	str	r3, [sp, #16]
 8015414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015418:	482c      	ldr	r0, [pc, #176]	; (80154cc <_vfiprintf_r+0x250>)
 801541a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801541e:	2206      	movs	r2, #6
 8015420:	f7ea fefe 	bl	8000220 <memchr>
 8015424:	2800      	cmp	r0, #0
 8015426:	d03f      	beq.n	80154a8 <_vfiprintf_r+0x22c>
 8015428:	4b29      	ldr	r3, [pc, #164]	; (80154d0 <_vfiprintf_r+0x254>)
 801542a:	bb1b      	cbnz	r3, 8015474 <_vfiprintf_r+0x1f8>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	3307      	adds	r3, #7
 8015430:	f023 0307 	bic.w	r3, r3, #7
 8015434:	3308      	adds	r3, #8
 8015436:	9303      	str	r3, [sp, #12]
 8015438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543a:	443b      	add	r3, r7
 801543c:	9309      	str	r3, [sp, #36]	; 0x24
 801543e:	e767      	b.n	8015310 <_vfiprintf_r+0x94>
 8015440:	fb0c 3202 	mla	r2, ip, r2, r3
 8015444:	460c      	mov	r4, r1
 8015446:	2001      	movs	r0, #1
 8015448:	e7a5      	b.n	8015396 <_vfiprintf_r+0x11a>
 801544a:	2300      	movs	r3, #0
 801544c:	3401      	adds	r4, #1
 801544e:	9305      	str	r3, [sp, #20]
 8015450:	4619      	mov	r1, r3
 8015452:	f04f 0c0a 	mov.w	ip, #10
 8015456:	4620      	mov	r0, r4
 8015458:	f810 2b01 	ldrb.w	r2, [r0], #1
 801545c:	3a30      	subs	r2, #48	; 0x30
 801545e:	2a09      	cmp	r2, #9
 8015460:	d903      	bls.n	801546a <_vfiprintf_r+0x1ee>
 8015462:	2b00      	cmp	r3, #0
 8015464:	d0c5      	beq.n	80153f2 <_vfiprintf_r+0x176>
 8015466:	9105      	str	r1, [sp, #20]
 8015468:	e7c3      	b.n	80153f2 <_vfiprintf_r+0x176>
 801546a:	fb0c 2101 	mla	r1, ip, r1, r2
 801546e:	4604      	mov	r4, r0
 8015470:	2301      	movs	r3, #1
 8015472:	e7f0      	b.n	8015456 <_vfiprintf_r+0x1da>
 8015474:	ab03      	add	r3, sp, #12
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	462a      	mov	r2, r5
 801547a:	4b16      	ldr	r3, [pc, #88]	; (80154d4 <_vfiprintf_r+0x258>)
 801547c:	a904      	add	r1, sp, #16
 801547e:	4630      	mov	r0, r6
 8015480:	f7fd feda 	bl	8013238 <_printf_float>
 8015484:	4607      	mov	r7, r0
 8015486:	1c78      	adds	r0, r7, #1
 8015488:	d1d6      	bne.n	8015438 <_vfiprintf_r+0x1bc>
 801548a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801548c:	07d9      	lsls	r1, r3, #31
 801548e:	d405      	bmi.n	801549c <_vfiprintf_r+0x220>
 8015490:	89ab      	ldrh	r3, [r5, #12]
 8015492:	059a      	lsls	r2, r3, #22
 8015494:	d402      	bmi.n	801549c <_vfiprintf_r+0x220>
 8015496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015498:	f7ff fe92 	bl	80151c0 <__retarget_lock_release_recursive>
 801549c:	89ab      	ldrh	r3, [r5, #12]
 801549e:	065b      	lsls	r3, r3, #25
 80154a0:	f53f af12 	bmi.w	80152c8 <_vfiprintf_r+0x4c>
 80154a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154a6:	e711      	b.n	80152cc <_vfiprintf_r+0x50>
 80154a8:	ab03      	add	r3, sp, #12
 80154aa:	9300      	str	r3, [sp, #0]
 80154ac:	462a      	mov	r2, r5
 80154ae:	4b09      	ldr	r3, [pc, #36]	; (80154d4 <_vfiprintf_r+0x258>)
 80154b0:	a904      	add	r1, sp, #16
 80154b2:	4630      	mov	r0, r6
 80154b4:	f7fe f964 	bl	8013780 <_printf_i>
 80154b8:	e7e4      	b.n	8015484 <_vfiprintf_r+0x208>
 80154ba:	bf00      	nop
 80154bc:	08019864 	.word	0x08019864
 80154c0:	08019884 	.word	0x08019884
 80154c4:	08019844 	.word	0x08019844
 80154c8:	080196ec 	.word	0x080196ec
 80154cc:	080196f6 	.word	0x080196f6
 80154d0:	08013239 	.word	0x08013239
 80154d4:	08015259 	.word	0x08015259
 80154d8:	080196f2 	.word	0x080196f2

080154dc <__swbuf_r>:
 80154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154de:	460e      	mov	r6, r1
 80154e0:	4614      	mov	r4, r2
 80154e2:	4605      	mov	r5, r0
 80154e4:	b118      	cbz	r0, 80154ee <__swbuf_r+0x12>
 80154e6:	6983      	ldr	r3, [r0, #24]
 80154e8:	b90b      	cbnz	r3, 80154ee <__swbuf_r+0x12>
 80154ea:	f000 f9e7 	bl	80158bc <__sinit>
 80154ee:	4b21      	ldr	r3, [pc, #132]	; (8015574 <__swbuf_r+0x98>)
 80154f0:	429c      	cmp	r4, r3
 80154f2:	d12b      	bne.n	801554c <__swbuf_r+0x70>
 80154f4:	686c      	ldr	r4, [r5, #4]
 80154f6:	69a3      	ldr	r3, [r4, #24]
 80154f8:	60a3      	str	r3, [r4, #8]
 80154fa:	89a3      	ldrh	r3, [r4, #12]
 80154fc:	071a      	lsls	r2, r3, #28
 80154fe:	d52f      	bpl.n	8015560 <__swbuf_r+0x84>
 8015500:	6923      	ldr	r3, [r4, #16]
 8015502:	b36b      	cbz	r3, 8015560 <__swbuf_r+0x84>
 8015504:	6923      	ldr	r3, [r4, #16]
 8015506:	6820      	ldr	r0, [r4, #0]
 8015508:	1ac0      	subs	r0, r0, r3
 801550a:	6963      	ldr	r3, [r4, #20]
 801550c:	b2f6      	uxtb	r6, r6
 801550e:	4283      	cmp	r3, r0
 8015510:	4637      	mov	r7, r6
 8015512:	dc04      	bgt.n	801551e <__swbuf_r+0x42>
 8015514:	4621      	mov	r1, r4
 8015516:	4628      	mov	r0, r5
 8015518:	f000 f93c 	bl	8015794 <_fflush_r>
 801551c:	bb30      	cbnz	r0, 801556c <__swbuf_r+0x90>
 801551e:	68a3      	ldr	r3, [r4, #8]
 8015520:	3b01      	subs	r3, #1
 8015522:	60a3      	str	r3, [r4, #8]
 8015524:	6823      	ldr	r3, [r4, #0]
 8015526:	1c5a      	adds	r2, r3, #1
 8015528:	6022      	str	r2, [r4, #0]
 801552a:	701e      	strb	r6, [r3, #0]
 801552c:	6963      	ldr	r3, [r4, #20]
 801552e:	3001      	adds	r0, #1
 8015530:	4283      	cmp	r3, r0
 8015532:	d004      	beq.n	801553e <__swbuf_r+0x62>
 8015534:	89a3      	ldrh	r3, [r4, #12]
 8015536:	07db      	lsls	r3, r3, #31
 8015538:	d506      	bpl.n	8015548 <__swbuf_r+0x6c>
 801553a:	2e0a      	cmp	r6, #10
 801553c:	d104      	bne.n	8015548 <__swbuf_r+0x6c>
 801553e:	4621      	mov	r1, r4
 8015540:	4628      	mov	r0, r5
 8015542:	f000 f927 	bl	8015794 <_fflush_r>
 8015546:	b988      	cbnz	r0, 801556c <__swbuf_r+0x90>
 8015548:	4638      	mov	r0, r7
 801554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801554c:	4b0a      	ldr	r3, [pc, #40]	; (8015578 <__swbuf_r+0x9c>)
 801554e:	429c      	cmp	r4, r3
 8015550:	d101      	bne.n	8015556 <__swbuf_r+0x7a>
 8015552:	68ac      	ldr	r4, [r5, #8]
 8015554:	e7cf      	b.n	80154f6 <__swbuf_r+0x1a>
 8015556:	4b09      	ldr	r3, [pc, #36]	; (801557c <__swbuf_r+0xa0>)
 8015558:	429c      	cmp	r4, r3
 801555a:	bf08      	it	eq
 801555c:	68ec      	ldreq	r4, [r5, #12]
 801555e:	e7ca      	b.n	80154f6 <__swbuf_r+0x1a>
 8015560:	4621      	mov	r1, r4
 8015562:	4628      	mov	r0, r5
 8015564:	f000 f81a 	bl	801559c <__swsetup_r>
 8015568:	2800      	cmp	r0, #0
 801556a:	d0cb      	beq.n	8015504 <__swbuf_r+0x28>
 801556c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015570:	e7ea      	b.n	8015548 <__swbuf_r+0x6c>
 8015572:	bf00      	nop
 8015574:	08019864 	.word	0x08019864
 8015578:	08019884 	.word	0x08019884
 801557c:	08019844 	.word	0x08019844

08015580 <__ascii_wctomb>:
 8015580:	b149      	cbz	r1, 8015596 <__ascii_wctomb+0x16>
 8015582:	2aff      	cmp	r2, #255	; 0xff
 8015584:	bf85      	ittet	hi
 8015586:	238a      	movhi	r3, #138	; 0x8a
 8015588:	6003      	strhi	r3, [r0, #0]
 801558a:	700a      	strbls	r2, [r1, #0]
 801558c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015590:	bf98      	it	ls
 8015592:	2001      	movls	r0, #1
 8015594:	4770      	bx	lr
 8015596:	4608      	mov	r0, r1
 8015598:	4770      	bx	lr
	...

0801559c <__swsetup_r>:
 801559c:	4b32      	ldr	r3, [pc, #200]	; (8015668 <__swsetup_r+0xcc>)
 801559e:	b570      	push	{r4, r5, r6, lr}
 80155a0:	681d      	ldr	r5, [r3, #0]
 80155a2:	4606      	mov	r6, r0
 80155a4:	460c      	mov	r4, r1
 80155a6:	b125      	cbz	r5, 80155b2 <__swsetup_r+0x16>
 80155a8:	69ab      	ldr	r3, [r5, #24]
 80155aa:	b913      	cbnz	r3, 80155b2 <__swsetup_r+0x16>
 80155ac:	4628      	mov	r0, r5
 80155ae:	f000 f985 	bl	80158bc <__sinit>
 80155b2:	4b2e      	ldr	r3, [pc, #184]	; (801566c <__swsetup_r+0xd0>)
 80155b4:	429c      	cmp	r4, r3
 80155b6:	d10f      	bne.n	80155d8 <__swsetup_r+0x3c>
 80155b8:	686c      	ldr	r4, [r5, #4]
 80155ba:	89a3      	ldrh	r3, [r4, #12]
 80155bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155c0:	0719      	lsls	r1, r3, #28
 80155c2:	d42c      	bmi.n	801561e <__swsetup_r+0x82>
 80155c4:	06dd      	lsls	r5, r3, #27
 80155c6:	d411      	bmi.n	80155ec <__swsetup_r+0x50>
 80155c8:	2309      	movs	r3, #9
 80155ca:	6033      	str	r3, [r6, #0]
 80155cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80155d0:	81a3      	strh	r3, [r4, #12]
 80155d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155d6:	e03e      	b.n	8015656 <__swsetup_r+0xba>
 80155d8:	4b25      	ldr	r3, [pc, #148]	; (8015670 <__swsetup_r+0xd4>)
 80155da:	429c      	cmp	r4, r3
 80155dc:	d101      	bne.n	80155e2 <__swsetup_r+0x46>
 80155de:	68ac      	ldr	r4, [r5, #8]
 80155e0:	e7eb      	b.n	80155ba <__swsetup_r+0x1e>
 80155e2:	4b24      	ldr	r3, [pc, #144]	; (8015674 <__swsetup_r+0xd8>)
 80155e4:	429c      	cmp	r4, r3
 80155e6:	bf08      	it	eq
 80155e8:	68ec      	ldreq	r4, [r5, #12]
 80155ea:	e7e6      	b.n	80155ba <__swsetup_r+0x1e>
 80155ec:	0758      	lsls	r0, r3, #29
 80155ee:	d512      	bpl.n	8015616 <__swsetup_r+0x7a>
 80155f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155f2:	b141      	cbz	r1, 8015606 <__swsetup_r+0x6a>
 80155f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155f8:	4299      	cmp	r1, r3
 80155fa:	d002      	beq.n	8015602 <__swsetup_r+0x66>
 80155fc:	4630      	mov	r0, r6
 80155fe:	f7fd fcd1 	bl	8012fa4 <_free_r>
 8015602:	2300      	movs	r3, #0
 8015604:	6363      	str	r3, [r4, #52]	; 0x34
 8015606:	89a3      	ldrh	r3, [r4, #12]
 8015608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801560c:	81a3      	strh	r3, [r4, #12]
 801560e:	2300      	movs	r3, #0
 8015610:	6063      	str	r3, [r4, #4]
 8015612:	6923      	ldr	r3, [r4, #16]
 8015614:	6023      	str	r3, [r4, #0]
 8015616:	89a3      	ldrh	r3, [r4, #12]
 8015618:	f043 0308 	orr.w	r3, r3, #8
 801561c:	81a3      	strh	r3, [r4, #12]
 801561e:	6923      	ldr	r3, [r4, #16]
 8015620:	b94b      	cbnz	r3, 8015636 <__swsetup_r+0x9a>
 8015622:	89a3      	ldrh	r3, [r4, #12]
 8015624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801562c:	d003      	beq.n	8015636 <__swsetup_r+0x9a>
 801562e:	4621      	mov	r1, r4
 8015630:	4630      	mov	r0, r6
 8015632:	f000 fa05 	bl	8015a40 <__smakebuf_r>
 8015636:	89a0      	ldrh	r0, [r4, #12]
 8015638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801563c:	f010 0301 	ands.w	r3, r0, #1
 8015640:	d00a      	beq.n	8015658 <__swsetup_r+0xbc>
 8015642:	2300      	movs	r3, #0
 8015644:	60a3      	str	r3, [r4, #8]
 8015646:	6963      	ldr	r3, [r4, #20]
 8015648:	425b      	negs	r3, r3
 801564a:	61a3      	str	r3, [r4, #24]
 801564c:	6923      	ldr	r3, [r4, #16]
 801564e:	b943      	cbnz	r3, 8015662 <__swsetup_r+0xc6>
 8015650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015654:	d1ba      	bne.n	80155cc <__swsetup_r+0x30>
 8015656:	bd70      	pop	{r4, r5, r6, pc}
 8015658:	0781      	lsls	r1, r0, #30
 801565a:	bf58      	it	pl
 801565c:	6963      	ldrpl	r3, [r4, #20]
 801565e:	60a3      	str	r3, [r4, #8]
 8015660:	e7f4      	b.n	801564c <__swsetup_r+0xb0>
 8015662:	2000      	movs	r0, #0
 8015664:	e7f7      	b.n	8015656 <__swsetup_r+0xba>
 8015666:	bf00      	nop
 8015668:	20000780 	.word	0x20000780
 801566c:	08019864 	.word	0x08019864
 8015670:	08019884 	.word	0x08019884
 8015674:	08019844 	.word	0x08019844

08015678 <abort>:
 8015678:	b508      	push	{r3, lr}
 801567a:	2006      	movs	r0, #6
 801567c:	f000 fa48 	bl	8015b10 <raise>
 8015680:	2001      	movs	r0, #1
 8015682:	f000 fe07 	bl	8016294 <_exit>
	...

08015688 <__sflush_r>:
 8015688:	898a      	ldrh	r2, [r1, #12]
 801568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801568e:	4605      	mov	r5, r0
 8015690:	0710      	lsls	r0, r2, #28
 8015692:	460c      	mov	r4, r1
 8015694:	d458      	bmi.n	8015748 <__sflush_r+0xc0>
 8015696:	684b      	ldr	r3, [r1, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	dc05      	bgt.n	80156a8 <__sflush_r+0x20>
 801569c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801569e:	2b00      	cmp	r3, #0
 80156a0:	dc02      	bgt.n	80156a8 <__sflush_r+0x20>
 80156a2:	2000      	movs	r0, #0
 80156a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156aa:	2e00      	cmp	r6, #0
 80156ac:	d0f9      	beq.n	80156a2 <__sflush_r+0x1a>
 80156ae:	2300      	movs	r3, #0
 80156b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156b4:	682f      	ldr	r7, [r5, #0]
 80156b6:	602b      	str	r3, [r5, #0]
 80156b8:	d032      	beq.n	8015720 <__sflush_r+0x98>
 80156ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80156bc:	89a3      	ldrh	r3, [r4, #12]
 80156be:	075a      	lsls	r2, r3, #29
 80156c0:	d505      	bpl.n	80156ce <__sflush_r+0x46>
 80156c2:	6863      	ldr	r3, [r4, #4]
 80156c4:	1ac0      	subs	r0, r0, r3
 80156c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156c8:	b10b      	cbz	r3, 80156ce <__sflush_r+0x46>
 80156ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156cc:	1ac0      	subs	r0, r0, r3
 80156ce:	2300      	movs	r3, #0
 80156d0:	4602      	mov	r2, r0
 80156d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156d4:	6a21      	ldr	r1, [r4, #32]
 80156d6:	4628      	mov	r0, r5
 80156d8:	47b0      	blx	r6
 80156da:	1c43      	adds	r3, r0, #1
 80156dc:	89a3      	ldrh	r3, [r4, #12]
 80156de:	d106      	bne.n	80156ee <__sflush_r+0x66>
 80156e0:	6829      	ldr	r1, [r5, #0]
 80156e2:	291d      	cmp	r1, #29
 80156e4:	d82c      	bhi.n	8015740 <__sflush_r+0xb8>
 80156e6:	4a2a      	ldr	r2, [pc, #168]	; (8015790 <__sflush_r+0x108>)
 80156e8:	40ca      	lsrs	r2, r1
 80156ea:	07d6      	lsls	r6, r2, #31
 80156ec:	d528      	bpl.n	8015740 <__sflush_r+0xb8>
 80156ee:	2200      	movs	r2, #0
 80156f0:	6062      	str	r2, [r4, #4]
 80156f2:	04d9      	lsls	r1, r3, #19
 80156f4:	6922      	ldr	r2, [r4, #16]
 80156f6:	6022      	str	r2, [r4, #0]
 80156f8:	d504      	bpl.n	8015704 <__sflush_r+0x7c>
 80156fa:	1c42      	adds	r2, r0, #1
 80156fc:	d101      	bne.n	8015702 <__sflush_r+0x7a>
 80156fe:	682b      	ldr	r3, [r5, #0]
 8015700:	b903      	cbnz	r3, 8015704 <__sflush_r+0x7c>
 8015702:	6560      	str	r0, [r4, #84]	; 0x54
 8015704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015706:	602f      	str	r7, [r5, #0]
 8015708:	2900      	cmp	r1, #0
 801570a:	d0ca      	beq.n	80156a2 <__sflush_r+0x1a>
 801570c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015710:	4299      	cmp	r1, r3
 8015712:	d002      	beq.n	801571a <__sflush_r+0x92>
 8015714:	4628      	mov	r0, r5
 8015716:	f7fd fc45 	bl	8012fa4 <_free_r>
 801571a:	2000      	movs	r0, #0
 801571c:	6360      	str	r0, [r4, #52]	; 0x34
 801571e:	e7c1      	b.n	80156a4 <__sflush_r+0x1c>
 8015720:	6a21      	ldr	r1, [r4, #32]
 8015722:	2301      	movs	r3, #1
 8015724:	4628      	mov	r0, r5
 8015726:	47b0      	blx	r6
 8015728:	1c41      	adds	r1, r0, #1
 801572a:	d1c7      	bne.n	80156bc <__sflush_r+0x34>
 801572c:	682b      	ldr	r3, [r5, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d0c4      	beq.n	80156bc <__sflush_r+0x34>
 8015732:	2b1d      	cmp	r3, #29
 8015734:	d001      	beq.n	801573a <__sflush_r+0xb2>
 8015736:	2b16      	cmp	r3, #22
 8015738:	d101      	bne.n	801573e <__sflush_r+0xb6>
 801573a:	602f      	str	r7, [r5, #0]
 801573c:	e7b1      	b.n	80156a2 <__sflush_r+0x1a>
 801573e:	89a3      	ldrh	r3, [r4, #12]
 8015740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015744:	81a3      	strh	r3, [r4, #12]
 8015746:	e7ad      	b.n	80156a4 <__sflush_r+0x1c>
 8015748:	690f      	ldr	r7, [r1, #16]
 801574a:	2f00      	cmp	r7, #0
 801574c:	d0a9      	beq.n	80156a2 <__sflush_r+0x1a>
 801574e:	0793      	lsls	r3, r2, #30
 8015750:	680e      	ldr	r6, [r1, #0]
 8015752:	bf08      	it	eq
 8015754:	694b      	ldreq	r3, [r1, #20]
 8015756:	600f      	str	r7, [r1, #0]
 8015758:	bf18      	it	ne
 801575a:	2300      	movne	r3, #0
 801575c:	eba6 0807 	sub.w	r8, r6, r7
 8015760:	608b      	str	r3, [r1, #8]
 8015762:	f1b8 0f00 	cmp.w	r8, #0
 8015766:	dd9c      	ble.n	80156a2 <__sflush_r+0x1a>
 8015768:	6a21      	ldr	r1, [r4, #32]
 801576a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801576c:	4643      	mov	r3, r8
 801576e:	463a      	mov	r2, r7
 8015770:	4628      	mov	r0, r5
 8015772:	47b0      	blx	r6
 8015774:	2800      	cmp	r0, #0
 8015776:	dc06      	bgt.n	8015786 <__sflush_r+0xfe>
 8015778:	89a3      	ldrh	r3, [r4, #12]
 801577a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015784:	e78e      	b.n	80156a4 <__sflush_r+0x1c>
 8015786:	4407      	add	r7, r0
 8015788:	eba8 0800 	sub.w	r8, r8, r0
 801578c:	e7e9      	b.n	8015762 <__sflush_r+0xda>
 801578e:	bf00      	nop
 8015790:	20400001 	.word	0x20400001

08015794 <_fflush_r>:
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	690b      	ldr	r3, [r1, #16]
 8015798:	4605      	mov	r5, r0
 801579a:	460c      	mov	r4, r1
 801579c:	b913      	cbnz	r3, 80157a4 <_fflush_r+0x10>
 801579e:	2500      	movs	r5, #0
 80157a0:	4628      	mov	r0, r5
 80157a2:	bd38      	pop	{r3, r4, r5, pc}
 80157a4:	b118      	cbz	r0, 80157ae <_fflush_r+0x1a>
 80157a6:	6983      	ldr	r3, [r0, #24]
 80157a8:	b90b      	cbnz	r3, 80157ae <_fflush_r+0x1a>
 80157aa:	f000 f887 	bl	80158bc <__sinit>
 80157ae:	4b14      	ldr	r3, [pc, #80]	; (8015800 <_fflush_r+0x6c>)
 80157b0:	429c      	cmp	r4, r3
 80157b2:	d11b      	bne.n	80157ec <_fflush_r+0x58>
 80157b4:	686c      	ldr	r4, [r5, #4]
 80157b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d0ef      	beq.n	801579e <_fflush_r+0xa>
 80157be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80157c0:	07d0      	lsls	r0, r2, #31
 80157c2:	d404      	bmi.n	80157ce <_fflush_r+0x3a>
 80157c4:	0599      	lsls	r1, r3, #22
 80157c6:	d402      	bmi.n	80157ce <_fflush_r+0x3a>
 80157c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157ca:	f7ff fcf8 	bl	80151be <__retarget_lock_acquire_recursive>
 80157ce:	4628      	mov	r0, r5
 80157d0:	4621      	mov	r1, r4
 80157d2:	f7ff ff59 	bl	8015688 <__sflush_r>
 80157d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157d8:	07da      	lsls	r2, r3, #31
 80157da:	4605      	mov	r5, r0
 80157dc:	d4e0      	bmi.n	80157a0 <_fflush_r+0xc>
 80157de:	89a3      	ldrh	r3, [r4, #12]
 80157e0:	059b      	lsls	r3, r3, #22
 80157e2:	d4dd      	bmi.n	80157a0 <_fflush_r+0xc>
 80157e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157e6:	f7ff fceb 	bl	80151c0 <__retarget_lock_release_recursive>
 80157ea:	e7d9      	b.n	80157a0 <_fflush_r+0xc>
 80157ec:	4b05      	ldr	r3, [pc, #20]	; (8015804 <_fflush_r+0x70>)
 80157ee:	429c      	cmp	r4, r3
 80157f0:	d101      	bne.n	80157f6 <_fflush_r+0x62>
 80157f2:	68ac      	ldr	r4, [r5, #8]
 80157f4:	e7df      	b.n	80157b6 <_fflush_r+0x22>
 80157f6:	4b04      	ldr	r3, [pc, #16]	; (8015808 <_fflush_r+0x74>)
 80157f8:	429c      	cmp	r4, r3
 80157fa:	bf08      	it	eq
 80157fc:	68ec      	ldreq	r4, [r5, #12]
 80157fe:	e7da      	b.n	80157b6 <_fflush_r+0x22>
 8015800:	08019864 	.word	0x08019864
 8015804:	08019884 	.word	0x08019884
 8015808:	08019844 	.word	0x08019844

0801580c <std>:
 801580c:	2300      	movs	r3, #0
 801580e:	b510      	push	{r4, lr}
 8015810:	4604      	mov	r4, r0
 8015812:	e9c0 3300 	strd	r3, r3, [r0]
 8015816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801581a:	6083      	str	r3, [r0, #8]
 801581c:	8181      	strh	r1, [r0, #12]
 801581e:	6643      	str	r3, [r0, #100]	; 0x64
 8015820:	81c2      	strh	r2, [r0, #14]
 8015822:	6183      	str	r3, [r0, #24]
 8015824:	4619      	mov	r1, r3
 8015826:	2208      	movs	r2, #8
 8015828:	305c      	adds	r0, #92	; 0x5c
 801582a:	f7fd fbb3 	bl	8012f94 <memset>
 801582e:	4b05      	ldr	r3, [pc, #20]	; (8015844 <std+0x38>)
 8015830:	6263      	str	r3, [r4, #36]	; 0x24
 8015832:	4b05      	ldr	r3, [pc, #20]	; (8015848 <std+0x3c>)
 8015834:	62a3      	str	r3, [r4, #40]	; 0x28
 8015836:	4b05      	ldr	r3, [pc, #20]	; (801584c <std+0x40>)
 8015838:	62e3      	str	r3, [r4, #44]	; 0x2c
 801583a:	4b05      	ldr	r3, [pc, #20]	; (8015850 <std+0x44>)
 801583c:	6224      	str	r4, [r4, #32]
 801583e:	6323      	str	r3, [r4, #48]	; 0x30
 8015840:	bd10      	pop	{r4, pc}
 8015842:	bf00      	nop
 8015844:	08015b49 	.word	0x08015b49
 8015848:	08015b6b 	.word	0x08015b6b
 801584c:	08015ba3 	.word	0x08015ba3
 8015850:	08015bc7 	.word	0x08015bc7

08015854 <_cleanup_r>:
 8015854:	4901      	ldr	r1, [pc, #4]	; (801585c <_cleanup_r+0x8>)
 8015856:	f000 b8af 	b.w	80159b8 <_fwalk_reent>
 801585a:	bf00      	nop
 801585c:	08015795 	.word	0x08015795

08015860 <__sfmoreglue>:
 8015860:	b570      	push	{r4, r5, r6, lr}
 8015862:	1e4a      	subs	r2, r1, #1
 8015864:	2568      	movs	r5, #104	; 0x68
 8015866:	4355      	muls	r5, r2
 8015868:	460e      	mov	r6, r1
 801586a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801586e:	f7fd fbe9 	bl	8013044 <_malloc_r>
 8015872:	4604      	mov	r4, r0
 8015874:	b140      	cbz	r0, 8015888 <__sfmoreglue+0x28>
 8015876:	2100      	movs	r1, #0
 8015878:	e9c0 1600 	strd	r1, r6, [r0]
 801587c:	300c      	adds	r0, #12
 801587e:	60a0      	str	r0, [r4, #8]
 8015880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015884:	f7fd fb86 	bl	8012f94 <memset>
 8015888:	4620      	mov	r0, r4
 801588a:	bd70      	pop	{r4, r5, r6, pc}

0801588c <__sfp_lock_acquire>:
 801588c:	4801      	ldr	r0, [pc, #4]	; (8015894 <__sfp_lock_acquire+0x8>)
 801588e:	f7ff bc96 	b.w	80151be <__retarget_lock_acquire_recursive>
 8015892:	bf00      	nop
 8015894:	20001d20 	.word	0x20001d20

08015898 <__sfp_lock_release>:
 8015898:	4801      	ldr	r0, [pc, #4]	; (80158a0 <__sfp_lock_release+0x8>)
 801589a:	f7ff bc91 	b.w	80151c0 <__retarget_lock_release_recursive>
 801589e:	bf00      	nop
 80158a0:	20001d20 	.word	0x20001d20

080158a4 <__sinit_lock_acquire>:
 80158a4:	4801      	ldr	r0, [pc, #4]	; (80158ac <__sinit_lock_acquire+0x8>)
 80158a6:	f7ff bc8a 	b.w	80151be <__retarget_lock_acquire_recursive>
 80158aa:	bf00      	nop
 80158ac:	20001d1b 	.word	0x20001d1b

080158b0 <__sinit_lock_release>:
 80158b0:	4801      	ldr	r0, [pc, #4]	; (80158b8 <__sinit_lock_release+0x8>)
 80158b2:	f7ff bc85 	b.w	80151c0 <__retarget_lock_release_recursive>
 80158b6:	bf00      	nop
 80158b8:	20001d1b 	.word	0x20001d1b

080158bc <__sinit>:
 80158bc:	b510      	push	{r4, lr}
 80158be:	4604      	mov	r4, r0
 80158c0:	f7ff fff0 	bl	80158a4 <__sinit_lock_acquire>
 80158c4:	69a3      	ldr	r3, [r4, #24]
 80158c6:	b11b      	cbz	r3, 80158d0 <__sinit+0x14>
 80158c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158cc:	f7ff bff0 	b.w	80158b0 <__sinit_lock_release>
 80158d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80158d4:	6523      	str	r3, [r4, #80]	; 0x50
 80158d6:	4b13      	ldr	r3, [pc, #76]	; (8015924 <__sinit+0x68>)
 80158d8:	4a13      	ldr	r2, [pc, #76]	; (8015928 <__sinit+0x6c>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80158de:	42a3      	cmp	r3, r4
 80158e0:	bf04      	itt	eq
 80158e2:	2301      	moveq	r3, #1
 80158e4:	61a3      	streq	r3, [r4, #24]
 80158e6:	4620      	mov	r0, r4
 80158e8:	f000 f820 	bl	801592c <__sfp>
 80158ec:	6060      	str	r0, [r4, #4]
 80158ee:	4620      	mov	r0, r4
 80158f0:	f000 f81c 	bl	801592c <__sfp>
 80158f4:	60a0      	str	r0, [r4, #8]
 80158f6:	4620      	mov	r0, r4
 80158f8:	f000 f818 	bl	801592c <__sfp>
 80158fc:	2200      	movs	r2, #0
 80158fe:	60e0      	str	r0, [r4, #12]
 8015900:	2104      	movs	r1, #4
 8015902:	6860      	ldr	r0, [r4, #4]
 8015904:	f7ff ff82 	bl	801580c <std>
 8015908:	68a0      	ldr	r0, [r4, #8]
 801590a:	2201      	movs	r2, #1
 801590c:	2109      	movs	r1, #9
 801590e:	f7ff ff7d 	bl	801580c <std>
 8015912:	68e0      	ldr	r0, [r4, #12]
 8015914:	2202      	movs	r2, #2
 8015916:	2112      	movs	r1, #18
 8015918:	f7ff ff78 	bl	801580c <std>
 801591c:	2301      	movs	r3, #1
 801591e:	61a3      	str	r3, [r4, #24]
 8015920:	e7d2      	b.n	80158c8 <__sinit+0xc>
 8015922:	bf00      	nop
 8015924:	080194c4 	.word	0x080194c4
 8015928:	08015855 	.word	0x08015855

0801592c <__sfp>:
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592e:	4607      	mov	r7, r0
 8015930:	f7ff ffac 	bl	801588c <__sfp_lock_acquire>
 8015934:	4b1e      	ldr	r3, [pc, #120]	; (80159b0 <__sfp+0x84>)
 8015936:	681e      	ldr	r6, [r3, #0]
 8015938:	69b3      	ldr	r3, [r6, #24]
 801593a:	b913      	cbnz	r3, 8015942 <__sfp+0x16>
 801593c:	4630      	mov	r0, r6
 801593e:	f7ff ffbd 	bl	80158bc <__sinit>
 8015942:	3648      	adds	r6, #72	; 0x48
 8015944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015948:	3b01      	subs	r3, #1
 801594a:	d503      	bpl.n	8015954 <__sfp+0x28>
 801594c:	6833      	ldr	r3, [r6, #0]
 801594e:	b30b      	cbz	r3, 8015994 <__sfp+0x68>
 8015950:	6836      	ldr	r6, [r6, #0]
 8015952:	e7f7      	b.n	8015944 <__sfp+0x18>
 8015954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015958:	b9d5      	cbnz	r5, 8015990 <__sfp+0x64>
 801595a:	4b16      	ldr	r3, [pc, #88]	; (80159b4 <__sfp+0x88>)
 801595c:	60e3      	str	r3, [r4, #12]
 801595e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015962:	6665      	str	r5, [r4, #100]	; 0x64
 8015964:	f7ff fc2a 	bl	80151bc <__retarget_lock_init_recursive>
 8015968:	f7ff ff96 	bl	8015898 <__sfp_lock_release>
 801596c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015974:	6025      	str	r5, [r4, #0]
 8015976:	61a5      	str	r5, [r4, #24]
 8015978:	2208      	movs	r2, #8
 801597a:	4629      	mov	r1, r5
 801597c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015980:	f7fd fb08 	bl	8012f94 <memset>
 8015984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801598c:	4620      	mov	r0, r4
 801598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015990:	3468      	adds	r4, #104	; 0x68
 8015992:	e7d9      	b.n	8015948 <__sfp+0x1c>
 8015994:	2104      	movs	r1, #4
 8015996:	4638      	mov	r0, r7
 8015998:	f7ff ff62 	bl	8015860 <__sfmoreglue>
 801599c:	4604      	mov	r4, r0
 801599e:	6030      	str	r0, [r6, #0]
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d1d5      	bne.n	8015950 <__sfp+0x24>
 80159a4:	f7ff ff78 	bl	8015898 <__sfp_lock_release>
 80159a8:	230c      	movs	r3, #12
 80159aa:	603b      	str	r3, [r7, #0]
 80159ac:	e7ee      	b.n	801598c <__sfp+0x60>
 80159ae:	bf00      	nop
 80159b0:	080194c4 	.word	0x080194c4
 80159b4:	ffff0001 	.word	0xffff0001

080159b8 <_fwalk_reent>:
 80159b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159bc:	4606      	mov	r6, r0
 80159be:	4688      	mov	r8, r1
 80159c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80159c4:	2700      	movs	r7, #0
 80159c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80159ca:	f1b9 0901 	subs.w	r9, r9, #1
 80159ce:	d505      	bpl.n	80159dc <_fwalk_reent+0x24>
 80159d0:	6824      	ldr	r4, [r4, #0]
 80159d2:	2c00      	cmp	r4, #0
 80159d4:	d1f7      	bne.n	80159c6 <_fwalk_reent+0xe>
 80159d6:	4638      	mov	r0, r7
 80159d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159dc:	89ab      	ldrh	r3, [r5, #12]
 80159de:	2b01      	cmp	r3, #1
 80159e0:	d907      	bls.n	80159f2 <_fwalk_reent+0x3a>
 80159e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159e6:	3301      	adds	r3, #1
 80159e8:	d003      	beq.n	80159f2 <_fwalk_reent+0x3a>
 80159ea:	4629      	mov	r1, r5
 80159ec:	4630      	mov	r0, r6
 80159ee:	47c0      	blx	r8
 80159f0:	4307      	orrs	r7, r0
 80159f2:	3568      	adds	r5, #104	; 0x68
 80159f4:	e7e9      	b.n	80159ca <_fwalk_reent+0x12>

080159f6 <__swhatbuf_r>:
 80159f6:	b570      	push	{r4, r5, r6, lr}
 80159f8:	460e      	mov	r6, r1
 80159fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159fe:	2900      	cmp	r1, #0
 8015a00:	b096      	sub	sp, #88	; 0x58
 8015a02:	4614      	mov	r4, r2
 8015a04:	461d      	mov	r5, r3
 8015a06:	da07      	bge.n	8015a18 <__swhatbuf_r+0x22>
 8015a08:	2300      	movs	r3, #0
 8015a0a:	602b      	str	r3, [r5, #0]
 8015a0c:	89b3      	ldrh	r3, [r6, #12]
 8015a0e:	061a      	lsls	r2, r3, #24
 8015a10:	d410      	bmi.n	8015a34 <__swhatbuf_r+0x3e>
 8015a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a16:	e00e      	b.n	8015a36 <__swhatbuf_r+0x40>
 8015a18:	466a      	mov	r2, sp
 8015a1a:	f000 f8fb 	bl	8015c14 <_fstat_r>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	dbf2      	blt.n	8015a08 <__swhatbuf_r+0x12>
 8015a22:	9a01      	ldr	r2, [sp, #4]
 8015a24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a2c:	425a      	negs	r2, r3
 8015a2e:	415a      	adcs	r2, r3
 8015a30:	602a      	str	r2, [r5, #0]
 8015a32:	e7ee      	b.n	8015a12 <__swhatbuf_r+0x1c>
 8015a34:	2340      	movs	r3, #64	; 0x40
 8015a36:	2000      	movs	r0, #0
 8015a38:	6023      	str	r3, [r4, #0]
 8015a3a:	b016      	add	sp, #88	; 0x58
 8015a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a40 <__smakebuf_r>:
 8015a40:	898b      	ldrh	r3, [r1, #12]
 8015a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a44:	079d      	lsls	r5, r3, #30
 8015a46:	4606      	mov	r6, r0
 8015a48:	460c      	mov	r4, r1
 8015a4a:	d507      	bpl.n	8015a5c <__smakebuf_r+0x1c>
 8015a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a50:	6023      	str	r3, [r4, #0]
 8015a52:	6123      	str	r3, [r4, #16]
 8015a54:	2301      	movs	r3, #1
 8015a56:	6163      	str	r3, [r4, #20]
 8015a58:	b002      	add	sp, #8
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	ab01      	add	r3, sp, #4
 8015a5e:	466a      	mov	r2, sp
 8015a60:	f7ff ffc9 	bl	80159f6 <__swhatbuf_r>
 8015a64:	9900      	ldr	r1, [sp, #0]
 8015a66:	4605      	mov	r5, r0
 8015a68:	4630      	mov	r0, r6
 8015a6a:	f7fd faeb 	bl	8013044 <_malloc_r>
 8015a6e:	b948      	cbnz	r0, 8015a84 <__smakebuf_r+0x44>
 8015a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a74:	059a      	lsls	r2, r3, #22
 8015a76:	d4ef      	bmi.n	8015a58 <__smakebuf_r+0x18>
 8015a78:	f023 0303 	bic.w	r3, r3, #3
 8015a7c:	f043 0302 	orr.w	r3, r3, #2
 8015a80:	81a3      	strh	r3, [r4, #12]
 8015a82:	e7e3      	b.n	8015a4c <__smakebuf_r+0xc>
 8015a84:	4b0d      	ldr	r3, [pc, #52]	; (8015abc <__smakebuf_r+0x7c>)
 8015a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	6020      	str	r0, [r4, #0]
 8015a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a90:	81a3      	strh	r3, [r4, #12]
 8015a92:	9b00      	ldr	r3, [sp, #0]
 8015a94:	6163      	str	r3, [r4, #20]
 8015a96:	9b01      	ldr	r3, [sp, #4]
 8015a98:	6120      	str	r0, [r4, #16]
 8015a9a:	b15b      	cbz	r3, 8015ab4 <__smakebuf_r+0x74>
 8015a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f000 f8c9 	bl	8015c38 <_isatty_r>
 8015aa6:	b128      	cbz	r0, 8015ab4 <__smakebuf_r+0x74>
 8015aa8:	89a3      	ldrh	r3, [r4, #12]
 8015aaa:	f023 0303 	bic.w	r3, r3, #3
 8015aae:	f043 0301 	orr.w	r3, r3, #1
 8015ab2:	81a3      	strh	r3, [r4, #12]
 8015ab4:	89a0      	ldrh	r0, [r4, #12]
 8015ab6:	4305      	orrs	r5, r0
 8015ab8:	81a5      	strh	r5, [r4, #12]
 8015aba:	e7cd      	b.n	8015a58 <__smakebuf_r+0x18>
 8015abc:	08015855 	.word	0x08015855

08015ac0 <_raise_r>:
 8015ac0:	291f      	cmp	r1, #31
 8015ac2:	b538      	push	{r3, r4, r5, lr}
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	d904      	bls.n	8015ad4 <_raise_r+0x14>
 8015aca:	2316      	movs	r3, #22
 8015acc:	6003      	str	r3, [r0, #0]
 8015ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad2:	bd38      	pop	{r3, r4, r5, pc}
 8015ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ad6:	b112      	cbz	r2, 8015ade <_raise_r+0x1e>
 8015ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015adc:	b94b      	cbnz	r3, 8015af2 <_raise_r+0x32>
 8015ade:	4620      	mov	r0, r4
 8015ae0:	f000 f830 	bl	8015b44 <_getpid_r>
 8015ae4:	462a      	mov	r2, r5
 8015ae6:	4601      	mov	r1, r0
 8015ae8:	4620      	mov	r0, r4
 8015aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015aee:	f000 b817 	b.w	8015b20 <_kill_r>
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d00a      	beq.n	8015b0c <_raise_r+0x4c>
 8015af6:	1c59      	adds	r1, r3, #1
 8015af8:	d103      	bne.n	8015b02 <_raise_r+0x42>
 8015afa:	2316      	movs	r3, #22
 8015afc:	6003      	str	r3, [r0, #0]
 8015afe:	2001      	movs	r0, #1
 8015b00:	e7e7      	b.n	8015ad2 <_raise_r+0x12>
 8015b02:	2400      	movs	r4, #0
 8015b04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015b08:	4628      	mov	r0, r5
 8015b0a:	4798      	blx	r3
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	e7e0      	b.n	8015ad2 <_raise_r+0x12>

08015b10 <raise>:
 8015b10:	4b02      	ldr	r3, [pc, #8]	; (8015b1c <raise+0xc>)
 8015b12:	4601      	mov	r1, r0
 8015b14:	6818      	ldr	r0, [r3, #0]
 8015b16:	f7ff bfd3 	b.w	8015ac0 <_raise_r>
 8015b1a:	bf00      	nop
 8015b1c:	20000780 	.word	0x20000780

08015b20 <_kill_r>:
 8015b20:	b538      	push	{r3, r4, r5, lr}
 8015b22:	4d07      	ldr	r5, [pc, #28]	; (8015b40 <_kill_r+0x20>)
 8015b24:	2300      	movs	r3, #0
 8015b26:	4604      	mov	r4, r0
 8015b28:	4608      	mov	r0, r1
 8015b2a:	4611      	mov	r1, r2
 8015b2c:	602b      	str	r3, [r5, #0]
 8015b2e:	f000 fb91 	bl	8016254 <_kill>
 8015b32:	1c43      	adds	r3, r0, #1
 8015b34:	d102      	bne.n	8015b3c <_kill_r+0x1c>
 8015b36:	682b      	ldr	r3, [r5, #0]
 8015b38:	b103      	cbz	r3, 8015b3c <_kill_r+0x1c>
 8015b3a:	6023      	str	r3, [r4, #0]
 8015b3c:	bd38      	pop	{r3, r4, r5, pc}
 8015b3e:	bf00      	nop
 8015b40:	20001d14 	.word	0x20001d14

08015b44 <_getpid_r>:
 8015b44:	f000 bb76 	b.w	8016234 <_getpid>

08015b48 <__sread>:
 8015b48:	b510      	push	{r4, lr}
 8015b4a:	460c      	mov	r4, r1
 8015b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b50:	f000 f894 	bl	8015c7c <_read_r>
 8015b54:	2800      	cmp	r0, #0
 8015b56:	bfab      	itete	ge
 8015b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8015b5c:	181b      	addge	r3, r3, r0
 8015b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015b62:	bfac      	ite	ge
 8015b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8015b66:	81a3      	strhlt	r3, [r4, #12]
 8015b68:	bd10      	pop	{r4, pc}

08015b6a <__swrite>:
 8015b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b6e:	461f      	mov	r7, r3
 8015b70:	898b      	ldrh	r3, [r1, #12]
 8015b72:	05db      	lsls	r3, r3, #23
 8015b74:	4605      	mov	r5, r0
 8015b76:	460c      	mov	r4, r1
 8015b78:	4616      	mov	r6, r2
 8015b7a:	d505      	bpl.n	8015b88 <__swrite+0x1e>
 8015b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b80:	2302      	movs	r3, #2
 8015b82:	2200      	movs	r2, #0
 8015b84:	f000 f868 	bl	8015c58 <_lseek_r>
 8015b88:	89a3      	ldrh	r3, [r4, #12]
 8015b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015b92:	81a3      	strh	r3, [r4, #12]
 8015b94:	4632      	mov	r2, r6
 8015b96:	463b      	mov	r3, r7
 8015b98:	4628      	mov	r0, r5
 8015b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9e:	f000 b817 	b.w	8015bd0 <_write_r>

08015ba2 <__sseek>:
 8015ba2:	b510      	push	{r4, lr}
 8015ba4:	460c      	mov	r4, r1
 8015ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015baa:	f000 f855 	bl	8015c58 <_lseek_r>
 8015bae:	1c43      	adds	r3, r0, #1
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	bf15      	itete	ne
 8015bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015bbe:	81a3      	strheq	r3, [r4, #12]
 8015bc0:	bf18      	it	ne
 8015bc2:	81a3      	strhne	r3, [r4, #12]
 8015bc4:	bd10      	pop	{r4, pc}

08015bc6 <__sclose>:
 8015bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bca:	f000 b813 	b.w	8015bf4 <_close_r>
	...

08015bd0 <_write_r>:
 8015bd0:	b538      	push	{r3, r4, r5, lr}
 8015bd2:	4d07      	ldr	r5, [pc, #28]	; (8015bf0 <_write_r+0x20>)
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	4608      	mov	r0, r1
 8015bd8:	4611      	mov	r1, r2
 8015bda:	2200      	movs	r2, #0
 8015bdc:	602a      	str	r2, [r5, #0]
 8015bde:	461a      	mov	r2, r3
 8015be0:	f000 fb50 	bl	8016284 <_write>
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d102      	bne.n	8015bee <_write_r+0x1e>
 8015be8:	682b      	ldr	r3, [r5, #0]
 8015bea:	b103      	cbz	r3, 8015bee <_write_r+0x1e>
 8015bec:	6023      	str	r3, [r4, #0]
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
 8015bf0:	20001d14 	.word	0x20001d14

08015bf4 <_close_r>:
 8015bf4:	b538      	push	{r3, r4, r5, lr}
 8015bf6:	4d06      	ldr	r5, [pc, #24]	; (8015c10 <_close_r+0x1c>)
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	4608      	mov	r0, r1
 8015bfe:	602b      	str	r3, [r5, #0]
 8015c00:	f000 fb08 	bl	8016214 <_close>
 8015c04:	1c43      	adds	r3, r0, #1
 8015c06:	d102      	bne.n	8015c0e <_close_r+0x1a>
 8015c08:	682b      	ldr	r3, [r5, #0]
 8015c0a:	b103      	cbz	r3, 8015c0e <_close_r+0x1a>
 8015c0c:	6023      	str	r3, [r4, #0]
 8015c0e:	bd38      	pop	{r3, r4, r5, pc}
 8015c10:	20001d14 	.word	0x20001d14

08015c14 <_fstat_r>:
 8015c14:	b538      	push	{r3, r4, r5, lr}
 8015c16:	4d07      	ldr	r5, [pc, #28]	; (8015c34 <_fstat_r+0x20>)
 8015c18:	2300      	movs	r3, #0
 8015c1a:	4604      	mov	r4, r0
 8015c1c:	4608      	mov	r0, r1
 8015c1e:	4611      	mov	r1, r2
 8015c20:	602b      	str	r3, [r5, #0]
 8015c22:	f000 faff 	bl	8016224 <_fstat>
 8015c26:	1c43      	adds	r3, r0, #1
 8015c28:	d102      	bne.n	8015c30 <_fstat_r+0x1c>
 8015c2a:	682b      	ldr	r3, [r5, #0]
 8015c2c:	b103      	cbz	r3, 8015c30 <_fstat_r+0x1c>
 8015c2e:	6023      	str	r3, [r4, #0]
 8015c30:	bd38      	pop	{r3, r4, r5, pc}
 8015c32:	bf00      	nop
 8015c34:	20001d14 	.word	0x20001d14

08015c38 <_isatty_r>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	4d06      	ldr	r5, [pc, #24]	; (8015c54 <_isatty_r+0x1c>)
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	4604      	mov	r4, r0
 8015c40:	4608      	mov	r0, r1
 8015c42:	602b      	str	r3, [r5, #0]
 8015c44:	f000 fafe 	bl	8016244 <_isatty>
 8015c48:	1c43      	adds	r3, r0, #1
 8015c4a:	d102      	bne.n	8015c52 <_isatty_r+0x1a>
 8015c4c:	682b      	ldr	r3, [r5, #0]
 8015c4e:	b103      	cbz	r3, 8015c52 <_isatty_r+0x1a>
 8015c50:	6023      	str	r3, [r4, #0]
 8015c52:	bd38      	pop	{r3, r4, r5, pc}
 8015c54:	20001d14 	.word	0x20001d14

08015c58 <_lseek_r>:
 8015c58:	b538      	push	{r3, r4, r5, lr}
 8015c5a:	4d07      	ldr	r5, [pc, #28]	; (8015c78 <_lseek_r+0x20>)
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	4608      	mov	r0, r1
 8015c60:	4611      	mov	r1, r2
 8015c62:	2200      	movs	r2, #0
 8015c64:	602a      	str	r2, [r5, #0]
 8015c66:	461a      	mov	r2, r3
 8015c68:	f000 fafc 	bl	8016264 <_lseek>
 8015c6c:	1c43      	adds	r3, r0, #1
 8015c6e:	d102      	bne.n	8015c76 <_lseek_r+0x1e>
 8015c70:	682b      	ldr	r3, [r5, #0]
 8015c72:	b103      	cbz	r3, 8015c76 <_lseek_r+0x1e>
 8015c74:	6023      	str	r3, [r4, #0]
 8015c76:	bd38      	pop	{r3, r4, r5, pc}
 8015c78:	20001d14 	.word	0x20001d14

08015c7c <_read_r>:
 8015c7c:	b538      	push	{r3, r4, r5, lr}
 8015c7e:	4d07      	ldr	r5, [pc, #28]	; (8015c9c <_read_r+0x20>)
 8015c80:	4604      	mov	r4, r0
 8015c82:	4608      	mov	r0, r1
 8015c84:	4611      	mov	r1, r2
 8015c86:	2200      	movs	r2, #0
 8015c88:	602a      	str	r2, [r5, #0]
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	f000 faf2 	bl	8016274 <_read>
 8015c90:	1c43      	adds	r3, r0, #1
 8015c92:	d102      	bne.n	8015c9a <_read_r+0x1e>
 8015c94:	682b      	ldr	r3, [r5, #0]
 8015c96:	b103      	cbz	r3, 8015c9a <_read_r+0x1e>
 8015c98:	6023      	str	r3, [r4, #0]
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}
 8015c9c:	20001d14 	.word	0x20001d14

08015ca0 <fabsf>:
 8015ca0:	ee10 3a10 	vmov	r3, s0
 8015ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ca8:	ee00 3a10 	vmov	s0, r3
 8015cac:	4770      	bx	lr
	...

08015cb0 <tanhf>:
 8015cb0:	b510      	push	{r4, lr}
 8015cb2:	ee10 4a10 	vmov	r4, s0
 8015cb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015cba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015cbe:	ed2d 8b02 	vpush	{d8}
 8015cc2:	eeb0 7a40 	vmov.f32	s14, s0
 8015cc6:	db0c      	blt.n	8015ce2 <tanhf+0x32>
 8015cc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015ccc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015cd0:	2c00      	cmp	r4, #0
 8015cd2:	bfac      	ite	ge
 8015cd4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015cd8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015cdc:	ecbd 8b02 	vpop	{d8}
 8015ce0:	bd10      	pop	{r4, pc}
 8015ce2:	4a1b      	ldr	r2, [pc, #108]	; (8015d50 <tanhf+0xa0>)
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	dc30      	bgt.n	8015d4a <tanhf+0x9a>
 8015ce8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015cec:	da06      	bge.n	8015cfc <tanhf+0x4c>
 8015cee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015cf2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015cf6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015cfa:	e7ef      	b.n	8015cdc <tanhf+0x2c>
 8015cfc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015d00:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015d04:	db12      	blt.n	8015d2c <tanhf+0x7c>
 8015d06:	f7ff ffcb 	bl	8015ca0 <fabsf>
 8015d0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d0e:	f000 f953 	bl	8015fb8 <expm1f>
 8015d12:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015d16:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015d1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d22:	2c00      	cmp	r4, #0
 8015d24:	bfb8      	it	lt
 8015d26:	eeb1 0a40 	vneglt.f32	s0, s0
 8015d2a:	e7d7      	b.n	8015cdc <tanhf+0x2c>
 8015d2c:	f7ff ffb8 	bl	8015ca0 <fabsf>
 8015d30:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d38:	f000 f93e 	bl	8015fb8 <expm1f>
 8015d3c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015d40:	eeb1 7a40 	vneg.f32	s14, s0
 8015d44:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015d48:	e7eb      	b.n	8015d22 <tanhf+0x72>
 8015d4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d4e:	e7e8      	b.n	8015d22 <tanhf+0x72>
 8015d50:	41afffff 	.word	0x41afffff

08015d54 <expf>:
 8015d54:	b508      	push	{r3, lr}
 8015d56:	ed2d 8b02 	vpush	{d8}
 8015d5a:	eef0 8a40 	vmov.f32	s17, s0
 8015d5e:	f000 f837 	bl	8015dd0 <__ieee754_expf>
 8015d62:	4b16      	ldr	r3, [pc, #88]	; (8015dbc <expf+0x68>)
 8015d64:	f993 3000 	ldrsb.w	r3, [r3]
 8015d68:	3301      	adds	r3, #1
 8015d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8015d6e:	d011      	beq.n	8015d94 <expf+0x40>
 8015d70:	eeb0 0a68 	vmov.f32	s0, s17
 8015d74:	f000 fa40 	bl	80161f8 <finitef>
 8015d78:	b160      	cbz	r0, 8015d94 <expf+0x40>
 8015d7a:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015dc0 <expf+0x6c>
 8015d7e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d86:	dd0a      	ble.n	8015d9e <expf+0x4a>
 8015d88:	f7fd f8bc 	bl	8012f04 <__errno>
 8015d8c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8015dc4 <expf+0x70>
 8015d90:	2322      	movs	r3, #34	; 0x22
 8015d92:	6003      	str	r3, [r0, #0]
 8015d94:	eeb0 0a48 	vmov.f32	s0, s16
 8015d98:	ecbd 8b02 	vpop	{d8}
 8015d9c:	bd08      	pop	{r3, pc}
 8015d9e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015dc8 <expf+0x74>
 8015da2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015daa:	d5f3      	bpl.n	8015d94 <expf+0x40>
 8015dac:	f7fd f8aa 	bl	8012f04 <__errno>
 8015db0:	2322      	movs	r3, #34	; 0x22
 8015db2:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8015dcc <expf+0x78>
 8015db6:	6003      	str	r3, [r0, #0]
 8015db8:	e7ec      	b.n	8015d94 <expf+0x40>
 8015dba:	bf00      	nop
 8015dbc:	20000950 	.word	0x20000950
 8015dc0:	42b17180 	.word	0x42b17180
 8015dc4:	7f800000 	.word	0x7f800000
 8015dc8:	c2cff1b5 	.word	0xc2cff1b5
 8015dcc:	00000000 	.word	0x00000000

08015dd0 <__ieee754_expf>:
 8015dd0:	ee10 2a10 	vmov	r2, s0
 8015dd4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015dd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015ddc:	d902      	bls.n	8015de4 <__ieee754_expf+0x14>
 8015dde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015de2:	4770      	bx	lr
 8015de4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8015de8:	d106      	bne.n	8015df8 <__ieee754_expf+0x28>
 8015dea:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015f30 <__ieee754_expf+0x160>
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	bf18      	it	ne
 8015df2:	eeb0 0a67 	vmovne.f32	s0, s15
 8015df6:	4770      	bx	lr
 8015df8:	484e      	ldr	r0, [pc, #312]	; (8015f34 <__ieee754_expf+0x164>)
 8015dfa:	4282      	cmp	r2, r0
 8015dfc:	dd04      	ble.n	8015e08 <__ieee754_expf+0x38>
 8015dfe:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015f38 <__ieee754_expf+0x168>
 8015e02:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015e06:	4770      	bx	lr
 8015e08:	2a00      	cmp	r2, #0
 8015e0a:	da03      	bge.n	8015e14 <__ieee754_expf+0x44>
 8015e0c:	4a4b      	ldr	r2, [pc, #300]	; (8015f3c <__ieee754_expf+0x16c>)
 8015e0e:	4291      	cmp	r1, r2
 8015e10:	f200 808a 	bhi.w	8015f28 <__ieee754_expf+0x158>
 8015e14:	4a4a      	ldr	r2, [pc, #296]	; (8015f40 <__ieee754_expf+0x170>)
 8015e16:	4291      	cmp	r1, r2
 8015e18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015e1c:	d954      	bls.n	8015ec8 <__ieee754_expf+0xf8>
 8015e1e:	4a49      	ldr	r2, [pc, #292]	; (8015f44 <__ieee754_expf+0x174>)
 8015e20:	4291      	cmp	r1, r2
 8015e22:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015e26:	d836      	bhi.n	8015e96 <__ieee754_expf+0xc6>
 8015e28:	4947      	ldr	r1, [pc, #284]	; (8015f48 <__ieee754_expf+0x178>)
 8015e2a:	4411      	add	r1, r2
 8015e2c:	ed91 7a00 	vldr	s14, [r1]
 8015e30:	4946      	ldr	r1, [pc, #280]	; (8015f4c <__ieee754_expf+0x17c>)
 8015e32:	440a      	add	r2, r1
 8015e34:	edd2 7a00 	vldr	s15, [r2]
 8015e38:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015e3c:	f1c3 0201 	rsb	r2, r3, #1
 8015e40:	1ad2      	subs	r2, r2, r3
 8015e42:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015e46:	ee60 6a00 	vmul.f32	s13, s0, s0
 8015e4a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015f50 <__ieee754_expf+0x180>
 8015e4e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015f54 <__ieee754_expf+0x184>
 8015e52:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015e56:	eddf 5a40 	vldr	s11, [pc, #256]	; 8015f58 <__ieee754_expf+0x188>
 8015e5a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015e5e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015f5c <__ieee754_expf+0x18c>
 8015e62:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015e66:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015f60 <__ieee754_expf+0x190>
 8015e6a:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015e6e:	eeb0 5a40 	vmov.f32	s10, s0
 8015e72:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8015e76:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015e7a:	eef0 6a45 	vmov.f32	s13, s10
 8015e7e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015e82:	bb92      	cbnz	r2, 8015eea <__ieee754_expf+0x11a>
 8015e84:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015e88:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015e8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015e90:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015e94:	4770      	bx	lr
 8015e96:	4b33      	ldr	r3, [pc, #204]	; (8015f64 <__ieee754_expf+0x194>)
 8015e98:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8015f68 <__ieee754_expf+0x198>
 8015e9c:	4413      	add	r3, r2
 8015e9e:	edd3 7a00 	vldr	s15, [r3]
 8015ea2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015ea6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015f6c <__ieee754_expf+0x19c>
 8015eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015eae:	ee17 2a90 	vmov	r2, s15
 8015eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eb6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015eba:	eeb0 7a40 	vmov.f32	s14, s0
 8015ebe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015f70 <__ieee754_expf+0x1a0>
 8015ec2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015ec6:	e7bc      	b.n	8015e42 <__ieee754_expf+0x72>
 8015ec8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015ecc:	d20b      	bcs.n	8015ee6 <__ieee754_expf+0x116>
 8015ece:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015f38 <__ieee754_expf+0x168>
 8015ed2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8015ed6:	eef4 6ac6 	vcmpe.f32	s13, s12
 8015eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ede:	dd02      	ble.n	8015ee6 <__ieee754_expf+0x116>
 8015ee0:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015ee4:	4770      	bx	lr
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	e7ad      	b.n	8015e46 <__ieee754_expf+0x76>
 8015eea:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8015eee:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015ef2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8015ef6:	bfb8      	it	lt
 8015ef8:	3264      	addlt	r2, #100	; 0x64
 8015efa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015efe:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015f02:	ee76 7a40 	vsub.f32	s15, s12, s0
 8015f06:	ee17 3a90 	vmov	r3, s15
 8015f0a:	bfab      	itete	ge
 8015f0c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015f10:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015f14:	ee00 3a10 	vmovge	s0, r3
 8015f18:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015f74 <__ieee754_expf+0x1a4>
 8015f1c:	bfbc      	itt	lt
 8015f1e:	ee00 3a10 	vmovlt	s0, r3
 8015f22:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015f26:	4770      	bx	lr
 8015f28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f30 <__ieee754_expf+0x160>
 8015f2c:	4770      	bx	lr
 8015f2e:	bf00      	nop
 8015f30:	00000000 	.word	0x00000000
 8015f34:	42b17217 	.word	0x42b17217
 8015f38:	7149f2ca 	.word	0x7149f2ca
 8015f3c:	42cff1b5 	.word	0x42cff1b5
 8015f40:	3eb17218 	.word	0x3eb17218
 8015f44:	3f851591 	.word	0x3f851591
 8015f48:	080198ac 	.word	0x080198ac
 8015f4c:	080198b4 	.word	0x080198b4
 8015f50:	3331bb4c 	.word	0x3331bb4c
 8015f54:	b5ddea0e 	.word	0xb5ddea0e
 8015f58:	388ab355 	.word	0x388ab355
 8015f5c:	bb360b61 	.word	0xbb360b61
 8015f60:	3e2aaaab 	.word	0x3e2aaaab
 8015f64:	080198a4 	.word	0x080198a4
 8015f68:	3fb8aa3b 	.word	0x3fb8aa3b
 8015f6c:	3f317180 	.word	0x3f317180
 8015f70:	3717f7d1 	.word	0x3717f7d1
 8015f74:	0d800000 	.word	0x0d800000

08015f78 <with_errnof>:
 8015f78:	b513      	push	{r0, r1, r4, lr}
 8015f7a:	4604      	mov	r4, r0
 8015f7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015f80:	f7fc ffc0 	bl	8012f04 <__errno>
 8015f84:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015f88:	6004      	str	r4, [r0, #0]
 8015f8a:	b002      	add	sp, #8
 8015f8c:	bd10      	pop	{r4, pc}
	...

08015f90 <xflowf.constprop.0>:
 8015f90:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015fac <xflowf.constprop.0+0x1c>
 8015f94:	eddf 7a06 	vldr	s15, [pc, #24]	; 8015fb0 <xflowf.constprop.0+0x20>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	bf08      	it	eq
 8015f9c:	eef0 7a40 	vmoveq.f32	s15, s0
 8015fa0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015fa4:	2022      	movs	r0, #34	; 0x22
 8015fa6:	f7ff bfe7 	b.w	8015f78 <with_errnof>
 8015faa:	bf00      	nop
 8015fac:	70000000 	.word	0x70000000
 8015fb0:	f0000000 	.word	0xf0000000

08015fb4 <__math_oflowf>:
 8015fb4:	f7ff bfec 	b.w	8015f90 <xflowf.constprop.0>

08015fb8 <expm1f>:
 8015fb8:	ee10 2a10 	vmov	r2, s0
 8015fbc:	497f      	ldr	r1, [pc, #508]	; (80161bc <expm1f+0x204>)
 8015fbe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015fc2:	428b      	cmp	r3, r1
 8015fc4:	d921      	bls.n	801600a <expm1f+0x52>
 8015fc6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015fca:	d902      	bls.n	8015fd2 <expm1f+0x1a>
 8015fcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015fd0:	4770      	bx	lr
 8015fd2:	d106      	bne.n	8015fe2 <expm1f+0x2a>
 8015fd4:	2a00      	cmp	r2, #0
 8015fd6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015fda:	bfb8      	it	lt
 8015fdc:	eeb0 0a67 	vmovlt.f32	s0, s15
 8015fe0:	4770      	bx	lr
 8015fe2:	2a00      	cmp	r2, #0
 8015fe4:	db05      	blt.n	8015ff2 <expm1f+0x3a>
 8015fe6:	4976      	ldr	r1, [pc, #472]	; (80161c0 <expm1f+0x208>)
 8015fe8:	428b      	cmp	r3, r1
 8015fea:	d960      	bls.n	80160ae <expm1f+0xf6>
 8015fec:	2000      	movs	r0, #0
 8015fee:	f7ff bfe1 	b.w	8015fb4 <__math_oflowf>
 8015ff2:	eddf 7a74 	vldr	s15, [pc, #464]	; 80161c4 <expm1f+0x20c>
 8015ff6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016002:	d554      	bpl.n	80160ae <expm1f+0xf6>
 8016004:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016008:	4770      	bx	lr
 801600a:	496f      	ldr	r1, [pc, #444]	; (80161c8 <expm1f+0x210>)
 801600c:	428b      	cmp	r3, r1
 801600e:	d96b      	bls.n	80160e8 <expm1f+0x130>
 8016010:	496e      	ldr	r1, [pc, #440]	; (80161cc <expm1f+0x214>)
 8016012:	428b      	cmp	r3, r1
 8016014:	d84b      	bhi.n	80160ae <expm1f+0xf6>
 8016016:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80161d0 <expm1f+0x218>
 801601a:	2a00      	cmp	r2, #0
 801601c:	bfa7      	ittee	ge
 801601e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016022:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 80161d4 <expm1f+0x21c>
 8016026:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 80161d8 <expm1f+0x220>
 801602a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801602e:	bfac      	ite	ge
 8016030:	2301      	movge	r3, #1
 8016032:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016036:	ee37 0a67 	vsub.f32	s0, s14, s15
 801603a:	ee37 7a40 	vsub.f32	s14, s14, s0
 801603e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016042:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016046:	ee20 5a25 	vmul.f32	s10, s0, s11
 801604a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80161dc <expm1f+0x224>
 801604e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80161e0 <expm1f+0x228>
 8016052:	ee20 7a05 	vmul.f32	s14, s0, s10
 8016056:	eea7 6a26 	vfma.f32	s12, s14, s13
 801605a:	eddf 6a62 	vldr	s13, [pc, #392]	; 80161e4 <expm1f+0x22c>
 801605e:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016062:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80161e8 <expm1f+0x230>
 8016066:	eea6 6a87 	vfma.f32	s12, s13, s14
 801606a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80161ec <expm1f+0x234>
 801606e:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016072:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016076:	eef0 4a46 	vmov.f32	s9, s12
 801607a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801607e:	eef0 6a64 	vmov.f32	s13, s9
 8016082:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016086:	eee5 4a66 	vfms.f32	s9, s10, s13
 801608a:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801608e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8016092:	eee0 6a64 	vfms.f32	s13, s0, s9
 8016096:	eef0 4a66 	vmov.f32	s9, s13
 801609a:	eec5 6a24 	vdiv.f32	s13, s10, s9
 801609e:	ee66 6a87 	vmul.f32	s13, s13, s14
 80160a2:	bb7b      	cbnz	r3, 8016104 <expm1f+0x14c>
 80160a4:	eef0 7a47 	vmov.f32	s15, s14
 80160a8:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80160ac:	e025      	b.n	80160fa <expm1f+0x142>
 80160ae:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80160b2:	2a00      	cmp	r2, #0
 80160b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80160b8:	bfb8      	it	lt
 80160ba:	eef0 7a47 	vmovlt.f32	s15, s14
 80160be:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80161f0 <expm1f+0x238>
 80160c2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80161d4 <expm1f+0x21c>
 80160c6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80160ca:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80161d0 <expm1f+0x218>
 80160ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160d2:	ee17 3a90 	vmov	r3, s15
 80160d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80160da:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80160de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80160e2:	eeb0 7a40 	vmov.f32	s14, s0
 80160e6:	e7a6      	b.n	8016036 <expm1f+0x7e>
 80160e8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80160ec:	d208      	bcs.n	8016100 <expm1f+0x148>
 80160ee:	eddf 7a41 	vldr	s15, [pc, #260]	; 80161f4 <expm1f+0x23c>
 80160f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80160f6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80160fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80160fe:	4770      	bx	lr
 8016100:	2300      	movs	r3, #0
 8016102:	e79e      	b.n	8016042 <expm1f+0x8a>
 8016104:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016108:	1c5a      	adds	r2, r3, #1
 801610a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801610e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016112:	d106      	bne.n	8016122 <expm1f+0x16a>
 8016114:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016118:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801611c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016120:	4770      	bx	lr
 8016122:	2b01      	cmp	r3, #1
 8016124:	d118      	bne.n	8016158 <expm1f+0x1a0>
 8016126:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801612a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016132:	bf41      	itttt	mi
 8016134:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016138:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 801613c:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8016140:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8016144:	bf5f      	itttt	pl
 8016146:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 801614a:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 801614e:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8016152:	eeb0 0a46 	vmovpl.f32	s0, s12
 8016156:	4770      	bx	lr
 8016158:	1c5a      	adds	r2, r3, #1
 801615a:	2a39      	cmp	r2, #57	; 0x39
 801615c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016160:	d90b      	bls.n	801617a <expm1f+0x1c2>
 8016162:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016166:	ee36 0a40 	vsub.f32	s0, s12, s0
 801616a:	ee10 3a10 	vmov	r3, s0
 801616e:	440b      	add	r3, r1
 8016170:	ee00 3a10 	vmov	s0, r3
 8016174:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016178:	4770      	bx	lr
 801617a:	2b16      	cmp	r3, #22
 801617c:	dc11      	bgt.n	80161a2 <expm1f+0x1ea>
 801617e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016182:	fa42 f303 	asr.w	r3, r2, r3
 8016186:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801618a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801618e:	ee07 3a90 	vmov	s15, r3
 8016192:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016196:	ee10 3a10 	vmov	r3, s0
 801619a:	440b      	add	r3, r1
 801619c:	ee00 3a10 	vmov	s0, r3
 80161a0:	4770      	bx	lr
 80161a2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80161a6:	05db      	lsls	r3, r3, #23
 80161a8:	ee07 3a10 	vmov	s14, r3
 80161ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80161b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80161b4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80161b8:	e7ed      	b.n	8016196 <expm1f+0x1de>
 80161ba:	bf00      	nop
 80161bc:	4195b843 	.word	0x4195b843
 80161c0:	42b17217 	.word	0x42b17217
 80161c4:	0da24260 	.word	0x0da24260
 80161c8:	3eb17218 	.word	0x3eb17218
 80161cc:	3f851591 	.word	0x3f851591
 80161d0:	3f317180 	.word	0x3f317180
 80161d4:	3717f7d1 	.word	0x3717f7d1
 80161d8:	b717f7d1 	.word	0xb717f7d1
 80161dc:	b457edbb 	.word	0xb457edbb
 80161e0:	36867e54 	.word	0x36867e54
 80161e4:	b8a670cd 	.word	0xb8a670cd
 80161e8:	3ad00d01 	.word	0x3ad00d01
 80161ec:	bd088889 	.word	0xbd088889
 80161f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80161f4:	7149f2ca 	.word	0x7149f2ca

080161f8 <finitef>:
 80161f8:	b082      	sub	sp, #8
 80161fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80161fe:	9801      	ldr	r0, [sp, #4]
 8016200:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016204:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016208:	bfac      	ite	ge
 801620a:	2000      	movge	r0, #0
 801620c:	2001      	movlt	r0, #1
 801620e:	b002      	add	sp, #8
 8016210:	4770      	bx	lr
	...

08016214 <_close>:
 8016214:	4b02      	ldr	r3, [pc, #8]	; (8016220 <_close+0xc>)
 8016216:	2258      	movs	r2, #88	; 0x58
 8016218:	601a      	str	r2, [r3, #0]
 801621a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801621e:	4770      	bx	lr
 8016220:	20001d14 	.word	0x20001d14

08016224 <_fstat>:
 8016224:	4b02      	ldr	r3, [pc, #8]	; (8016230 <_fstat+0xc>)
 8016226:	2258      	movs	r2, #88	; 0x58
 8016228:	601a      	str	r2, [r3, #0]
 801622a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801622e:	4770      	bx	lr
 8016230:	20001d14 	.word	0x20001d14

08016234 <_getpid>:
 8016234:	4b02      	ldr	r3, [pc, #8]	; (8016240 <_getpid+0xc>)
 8016236:	2258      	movs	r2, #88	; 0x58
 8016238:	601a      	str	r2, [r3, #0]
 801623a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801623e:	4770      	bx	lr
 8016240:	20001d14 	.word	0x20001d14

08016244 <_isatty>:
 8016244:	4b02      	ldr	r3, [pc, #8]	; (8016250 <_isatty+0xc>)
 8016246:	2258      	movs	r2, #88	; 0x58
 8016248:	601a      	str	r2, [r3, #0]
 801624a:	2000      	movs	r0, #0
 801624c:	4770      	bx	lr
 801624e:	bf00      	nop
 8016250:	20001d14 	.word	0x20001d14

08016254 <_kill>:
 8016254:	4b02      	ldr	r3, [pc, #8]	; (8016260 <_kill+0xc>)
 8016256:	2258      	movs	r2, #88	; 0x58
 8016258:	601a      	str	r2, [r3, #0]
 801625a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801625e:	4770      	bx	lr
 8016260:	20001d14 	.word	0x20001d14

08016264 <_lseek>:
 8016264:	4b02      	ldr	r3, [pc, #8]	; (8016270 <_lseek+0xc>)
 8016266:	2258      	movs	r2, #88	; 0x58
 8016268:	601a      	str	r2, [r3, #0]
 801626a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801626e:	4770      	bx	lr
 8016270:	20001d14 	.word	0x20001d14

08016274 <_read>:
 8016274:	4b02      	ldr	r3, [pc, #8]	; (8016280 <_read+0xc>)
 8016276:	2258      	movs	r2, #88	; 0x58
 8016278:	601a      	str	r2, [r3, #0]
 801627a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801627e:	4770      	bx	lr
 8016280:	20001d14 	.word	0x20001d14

08016284 <_write>:
 8016284:	4b02      	ldr	r3, [pc, #8]	; (8016290 <_write+0xc>)
 8016286:	2258      	movs	r2, #88	; 0x58
 8016288:	601a      	str	r2, [r3, #0]
 801628a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801628e:	4770      	bx	lr
 8016290:	20001d14 	.word	0x20001d14

08016294 <_exit>:
 8016294:	e7fe      	b.n	8016294 <_exit>
	...

08016298 <_init>:
 8016298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801629a:	bf00      	nop
 801629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801629e:	bc08      	pop	{r3}
 80162a0:	469e      	mov	lr, r3
 80162a2:	4770      	bx	lr

080162a4 <_fini>:
 80162a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162a6:	bf00      	nop
 80162a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162aa:	bc08      	pop	{r3}
 80162ac:	469e      	mov	lr, r3
 80162ae:	4770      	bx	lr
