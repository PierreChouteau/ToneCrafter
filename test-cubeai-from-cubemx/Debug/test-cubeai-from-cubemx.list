
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005070  08012c40  08012c40  00022c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cb0  08017cb0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08017cb0  08017cb0  00027cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cb8  08017cb8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017cb8  08017cb8  00027cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017cbc  08017cbc  00027cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08017cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040df4  200001e8  08017ea8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20040fdc  08017ea8  00030fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e40e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007dd7  00000000  00000000  0006e626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002eb8  00000000  00000000  00076400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b50  00000000  00000000  000792b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e6cb  00000000  00000000  0007be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c074  00000000  00000000  0008a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c37f  00000000  00000000  000c6547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f28c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d5b8  00000000  00000000  001f291c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012c28 	.word	0x08012c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08012c28 	.word	0x08012c28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f02:	f3bf 8f6f 	isb	sy
}
 8000f06:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
}
 8000f14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f16:	f3bf 8f6f 	isb	sy
}
 8000f1a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f2e:	f3bf 8f6f 	isb	sy
}
 8000f32:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000f48:	f3bf 8f4f 	dsb	sy
}
 8000f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <SCB_InvalidateICache+0x30>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5c:	f3bf 8f4f 	dsb	sy
}
 8000f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f62:	f3bf 8f6f 	isb	sy
}
 8000f66:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
}
 8000f8a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f92:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0b5b      	lsrs	r3, r3, #13
 8000f98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fa6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fb0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb6:	4911      	ldr	r1, [pc, #68]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1ef      	bne.n	8000fa8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	60fa      	str	r2, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e5      	bne.n	8000f9e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd2:	f3bf 8f4f 	dsb	sy
}
 8000fd6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
}
 8000fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fea:	f3bf 8f6f 	isb	sy
}
 8000fee:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0b5b      	lsrs	r3, r3, #13
 8001020:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001024:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800102e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001038:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001040:	4313      	orrs	r3, r2
 8001042:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ef      	bne.n	8001030 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	60fa      	str	r2, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1e5      	bne.n	8001026 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800105a:	f3bf 8f4f 	dsb	sy
}
 800105e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001060:	f3bf 8f6f 	isb	sy
}
 8001064:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	f5ad 6db3 	sub.w	sp, sp, #1432	; 0x598
 800107e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001080:	f7ff ffbe 	bl	8001000 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001084:	f7ff ff5e 	bl	8000f44 <SCB_InvalidateICache>

	char buf[50];
	int buf_len = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	float y_val;
	float test = 0.0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001096:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 800109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a2:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <main+0x168>)
 80010a4:	461c      	mov	r4, r3
 80010a6:	4615      	mov	r5, r2
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b0:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <main+0x16c>)
 80010ba:	461c      	mov	r4, r3
 80010bc:	4615      	mov	r5, r2
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c6:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 80010ca:	463b      	mov	r3, r7
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <main+0x170>)
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	463b      	mov	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	809a      	strh	r2, [r3, #4]
 80010d6:	463b      	mov	r3, r7
 80010d8:	2201      	movs	r2, #1
 80010da:	80da      	strh	r2, [r3, #6]
 80010dc:	463b      	mov	r3, r7
 80010de:	2201      	movs	r2, #1
 80010e0:	811a      	strh	r2, [r3, #8]
 80010e2:	463b      	mov	r3, r7
 80010e4:	f243 02e4 	movw	r2, #12516	; 0x30e4
 80010e8:	60da      	str	r2, [r3, #12]
	AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 80010ea:	f00e ffa5 	bl	8010038 <ai_tonecrafter_data_weights_get>
 80010ee:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 80010f0:	463b      	mov	r3, r7
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	463b      	mov	r3, r7
 80010fc:	4a3b      	ldr	r2, [pc, #236]	; (80011ec <main+0x174>)
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	463b      	mov	r3, r7
 8001102:	2201      	movs	r2, #1
 8001104:	839a      	strh	r2, [r3, #28]
 8001106:	463b      	mov	r3, r7
 8001108:	2201      	movs	r2, #1
 800110a:	83da      	strh	r2, [r3, #30]
 800110c:	463b      	mov	r3, r7
 800110e:	2201      	movs	r2, #1
 8001110:	841a      	strh	r2, [r3, #32]
 8001112:	463b      	mov	r3, r7
 8001114:	f44f 7244 	mov.w	r2, #784	; 0x310
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
 800111a:	463b      	mov	r3, r7
 800111c:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001128:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112c:	2201      	movs	r2, #1
 800112e:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001134:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001138:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 800113a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113e:	2201      	movs	r2, #1
 8001140:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001146:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800114a:	611a      	str	r2, [r3, #16]

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800114c:	f7ff fed4 	bl	8000ef8 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8001150:	f7ff ff12 	bl	8000f78 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001154:	f003 f87f 	bl	8004256 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001158:	f000 f84c 	bl	80011f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800115c:	f001 f8aa 	bl	80022b4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001160:	f000 ffe6 	bl	8002130 <MX_DMA_Init>
	MX_ADC3_Init();
 8001164:	f000 f906 	bl	8001374 <MX_ADC3_Init>
	MX_CRC_Init();
 8001168:	f000 f956 	bl	8001418 <MX_CRC_Init>
	MX_DCMI_Init();
 800116c:	f000 f976 	bl	800145c <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001170:	f000 f9a8 	bl	80014c4 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001174:	f001 f84a 	bl	800220c <MX_FMC_Init>
	MX_I2C1_Init();
 8001178:	f000 f9d6 	bl	8001528 <MX_I2C1_Init>
	MX_I2C3_Init();
 800117c:	f000 fa14 	bl	80015a8 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001180:	f000 fa52 	bl	8001628 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001184:	f000 fad4 	bl	8001730 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001188:	f000 fb14 	bl	80017b4 <MX_RTC_Init>
	MX_SAI2_Init();
 800118c:	f000 fbb8 	bl	8001900 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001190:	f000 fc72 	bl	8001a78 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8001194:	f000 fc90 	bl	8001ab8 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8001198:	f000 fcbe 	bl	8001b18 <MX_TIM1_Init>
	MX_TIM2_Init();
 800119c:	f000 fd68 	bl	8001c70 <MX_TIM2_Init>
	MX_TIM3_Init();
 80011a0:	f000 fddc 	bl	8001d5c <MX_TIM3_Init>
	MX_TIM5_Init();
 80011a4:	f000 fe52 	bl	8001e4c <MX_TIM5_Init>
	MX_TIM8_Init();
 80011a8:	f000 fec8 	bl	8001f3c <MX_TIM8_Init>
	MX_TIM12_Init();
 80011ac:	f000 ff1a 	bl	8001fe4 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80011b0:	f000 ff5e 	bl	8002070 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80011b4:	f000 ff8c 	bl	80020d0 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80011b8:	f00e f9ec 	bl	800f594 <MX_FATFS_Init>
	// MX_LIBJPEG_Init();

	/* USER CODE BEGIN 2 */

	MPU_Init();
 80011bc:	f002 ffa9 	bl	8004112 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c8:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 80011ca:	f002 ff89 	bl	80040e0 <TS_Init>
	printf("Touchscreen Init: OK\n");
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <main+0x178>)
 80011d0:	f00f fd34 	bl	8010c3c <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 80011d4:	f7ff fe90 	bl	8000ef8 <SCB_EnableICache>
	SCB_EnableDCache();
 80011d8:	f7ff fece 	bl	8000f78 <SCB_EnableDCache>
	// osKernelStart();

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80011dc:	e7fe      	b.n	80011dc <main+0x164>
 80011de:	bf00      	nop
 80011e0:	08012c58 	.word	0x08012c58
 80011e4:	08012c70 	.word	0x08012c70
 80011e8:	40040440 	.word	0x40040440
 80011ec:	00040440 	.word	0x00040440
 80011f0:	08012c40 	.word	0x08012c40

080011f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0b4      	sub	sp, #208	; 0xd0
 80011f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00e ff62 	bl	80100cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2284      	movs	r2, #132	; 0x84
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00e ff53 	bl	80100cc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001226:	f007 f8d9 	bl	80083dc <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <SystemClock_Config+0x174>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <SystemClock_Config+0x174>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <SystemClock_Config+0x174>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <SystemClock_Config+0x178>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a49      	ldr	r2, [pc, #292]	; (800136c <SystemClock_Config+0x178>)
 8001248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <SystemClock_Config+0x178>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800125a:	2309      	movs	r3, #9
 800125c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800127c:	2319      	movs	r3, #25
 800127e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001282:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001290:	2309      	movs	r3, #9
 8001292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800129a:	4618      	mov	r0, r3
 800129c:	f008 f8c2 	bl	8009424 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80012a6:	f001 fa43 	bl	8002730 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012aa:	f007 f8a7 	bl	80083fc <HAL_PWREx_EnableOverDrive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80012b4:	f001 fa3c 	bl	8002730 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012de:	2106      	movs	r1, #6
 80012e0:	4618      	mov	r0, r3
 80012e2:	f008 fb43 	bl	800996c <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 80012ec:	f001 fa20 	bl	8002730 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <SystemClock_Config+0x17c>)
 80012f2:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001304:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001308:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800130a:	2305      	movs	r3, #5
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800130e:	2308      	movs	r3, #8
 8001310:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001312:	2303      	movs	r3, #3
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800132a:	2300      	movs	r3, #0
 800132c:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800132e:	2300      	movs	r3, #0
 8001330:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001332:	2300      	movs	r3, #0
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800133a:	2300      	movs	r3, #0
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800133e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f008 fd13 	bl	8009d7c <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 800135c:	f001 f9e8 	bl	8002730 <Error_Handler>
	}
}
 8001360:	bf00      	nop
 8001362:	37d0      	adds	r7, #208	; 0xd0
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000
 8001370:	01b14868 	.word	0x01b14868

08001374 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_ADC3_Init+0x98>)
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <MX_ADC3_Init+0x9c>)
 800138a:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_ADC3_Init+0x98>)
 800138e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001392:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_ADC3_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_ADC3_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_ADC3_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC3_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_ADC3_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_ADC3_Init+0x98>)
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_ADC3_Init+0xa0>)
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_ADC3_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_ADC3_Init+0x98>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_ADC3_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_ADC3_Init+0x98>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_ADC3_Init+0x98>)
 80013d6:	f002 ff8f 	bl	80042f8 <HAL_ADC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80013e0:	f001 f9a6 	bl	8002730 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_ADC3_Init+0x98>)
 80013f6:	f002 ffc3 	bl	8004380 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001400:	f001 f996 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000084c 	.word	0x2000084c
 8001410:	40012200 	.word	0x40012200
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_CRC_Init+0x3c>)
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <MX_CRC_Init+0x40>)
 8001420:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_CRC_Init+0x3c>)
 8001424:	2200      	movs	r2, #0
 8001426:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_CRC_Init+0x3c>)
 800142a:	2200      	movs	r2, #0
 800142c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_CRC_Init+0x3c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_CRC_Init+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_CRC_Init+0x3c>)
 800143c:	2201      	movs	r2, #1
 800143e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_CRC_Init+0x3c>)
 8001442:	f003 fb71 	bl	8004b28 <HAL_CRC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 800144c:	f001 f970 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000600 	.word	0x20000600
 8001458:	40023000 	.word	0x40023000

0800145c <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_DCMI_Init+0x60>)
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <MX_DCMI_Init+0x64>)
 8001464:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_DCMI_Init+0x60>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_DCMI_Init+0x60>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_DCMI_Init+0x60>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_DCMI_Init+0x60>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_DCMI_Init+0x60>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_DCMI_Init+0x60>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_DCMI_Init+0x60>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_DCMI_Init+0x60>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_DCMI_Init+0x60>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_DCMI_Init+0x60>)
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_DCMI_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_DCMI_Init+0x60>)
 80014aa:	f003 fc27 	bl	8004cfc <HAL_DCMI_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 80014b4:	f001 f93c 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000894 	.word	0x20000894
 80014c0:	50050000 	.word	0x50050000

080014c4 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014ca:	4a16      	ldr	r2, [pc, #88]	; (8001524 <MX_DMA2D_Init+0x60>)
 80014cc:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_DMA2D_Init+0x5c>)
 80014fa:	f004 f8c5 	bl	8005688 <HAL_DMA2D_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001504:	f001 f914 	bl	8002730 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001508:	2101      	movs	r1, #1
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_DMA2D_Init+0x5c>)
 800150c:	f004 fa16 	bl	800593c <HAL_DMA2D_ConfigLayer>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8001516:	f001 f90b 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000ab8 	.word	0x20000ab8
 8001524:	4002b000 	.word	0x4002b000

08001528 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_I2C1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_I2C1_Init+0x74>)
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x7c>)
 8001536:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_I2C1_Init+0x74>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_I2C1_Init+0x74>)
 8001564:	f006 f828 	bl	80075b8 <HAL_I2C_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800156e:	f001 f8df 	bl	8002730 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001572:	2100      	movs	r1, #0
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <MX_I2C1_Init+0x74>)
 8001576:	f006 fbbb 	bl	8007cf0 <HAL_I2CEx_ConfigAnalogFilter>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001580:	f001 f8d6 	bl	8002730 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_I2C1_Init+0x74>)
 8001588:	f006 fbfd 	bl	8007d86 <HAL_I2CEx_ConfigDigitalFilter>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001592:	f001 f8cd 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200005b4 	.word	0x200005b4
 80015a0:	40005400 	.word	0x40005400
 80015a4:	00c0eaff 	.word	0x00c0eaff

080015a8 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_I2C3_Init+0x74>)
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MX_I2C3_Init+0x78>)
 80015b0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_I2C3_Init+0x74>)
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <MX_I2C3_Init+0x7c>)
 80015b6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_I2C3_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_I2C3_Init+0x74>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_I2C3_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_I2C3_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C3_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_I2C3_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C3_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <MX_I2C3_Init+0x74>)
 80015e4:	f005 ffe8 	bl	80075b8 <HAL_I2C_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 80015ee:	f001 f89f 	bl	8002730 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_I2C3_Init+0x74>)
 80015f6:	f006 fb7b 	bl	8007cf0 <HAL_I2CEx_ConfigAnalogFilter>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001600:	f001 f896 	bl	8002730 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_I2C3_Init+0x74>)
 8001608:	f006 fbbd 	bl	8007d86 <HAL_I2CEx_ConfigDigitalFilter>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001612:	f001 f88d 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000038c 	.word	0x2000038c
 8001620:	40005c00 	.word	0x40005c00
 8001624:	00c0eaff 	.word	0x00c0eaff

08001628 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2234      	movs	r2, #52	; 0x34
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00e fd49 	bl	80100cc <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <MX_LTDC_Init+0x100>)
 800163c:	4a3b      	ldr	r2, [pc, #236]	; (800172c <MX_LTDC_Init+0x104>)
 800163e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <MX_LTDC_Init+0x100>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <MX_LTDC_Init+0x100>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <MX_LTDC_Init+0x100>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <MX_LTDC_Init+0x100>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <MX_LTDC_Init+0x100>)
 800165a:	2228      	movs	r2, #40	; 0x28
 800165c:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <MX_LTDC_Init+0x100>)
 8001660:	2209      	movs	r2, #9
 8001662:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <MX_LTDC_Init+0x100>)
 8001666:	2235      	movs	r2, #53	; 0x35
 8001668:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MX_LTDC_Init+0x100>)
 800166c:	220b      	movs	r2, #11
 800166e:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <MX_LTDC_Init+0x100>)
 8001672:	f240 2215 	movw	r2, #533	; 0x215
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_LTDC_Init+0x100>)
 800167a:	f240 121b 	movw	r2, #283	; 0x11b
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <MX_LTDC_Init+0x100>)
 8001682:	f240 2235 	movw	r2, #565	; 0x235
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_LTDC_Init+0x100>)
 800168a:	f240 121d 	movw	r2, #285	; 0x11d
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_LTDC_Init+0x100>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_LTDC_Init+0x100>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_LTDC_Init+0x100>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016a8:	481f      	ldr	r0, [pc, #124]	; (8001728 <MX_LTDC_Init+0x100>)
 80016aa:	f006 fbb9 	bl	8007e20 <HAL_LTDC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 80016b4:	f001 f83c 	bl	8002730 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80016bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016c0:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80016c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016ca:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016cc:	2302      	movs	r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80016d0:	23ff      	movs	r3, #255	; 0xff
 80016d2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016dc:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016de:	2307      	movs	r3, #7
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 80016e2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 80016e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 80016ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_LTDC_Init+0x100>)
 800170e:	f006 fc57 	bl	8007fc0 <HAL_LTDC_ConfigLayer>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001718:	f001 f80a 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 800171c:	f002 fa46 	bl	8003bac <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3738      	adds	r7, #56	; 0x38
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200007a4 	.word	0x200007a4
 800172c:	40016800 	.word	0x40016800

08001730 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <MX_QUADSPI_Init+0x80>)
 8001738:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800173c:	2201      	movs	r2, #1
 800173e:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001742:	2204      	movs	r2, #4
 8001744:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001748:	2210      	movs	r2, #16
 800174a:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800174e:	2218      	movs	r2, #24
 8001750:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001754:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001758:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800176e:	f006 fe95 	bl	800849c <HAL_QSPI_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001778:	f000 ffda 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800177e:	f002 fb17 	bl	8003db0 <DISCO_QSPI_ResetMemory>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_QUADSPI_Init+0x5c>
 8001788:	f000 ffd2 	bl	8002730 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <MX_QUADSPI_Init+0x7c>)
 800178e:	f002 fb51 	bl	8003e34 <DISCO_QSPI_DummyCyclesCfg>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_QUADSPI_Init+0x6c>
 8001798:	f000 ffca 	bl	8002730 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 800179c:	f002 fad6 	bl	8003d4c <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80017a0:	205c      	movs	r0, #92	; 0x5c
 80017a2:	f003 f937 	bl	8004a14 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000bc4 	.word	0x20000bc4
 80017b0:	a0001000 	.word	0xa0001000

080017b4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b092      	sub	sp, #72	; 0x48
 80017b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	222c      	movs	r2, #44	; 0x2c
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00e fc78 	bl	80100cc <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <MX_RTC_Init+0x144>)
 80017de:	4a47      	ldr	r2, [pc, #284]	; (80018fc <MX_RTC_Init+0x148>)
 80017e0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <MX_RTC_Init+0x144>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <MX_RTC_Init+0x144>)
 80017ea:	227f      	movs	r2, #127	; 0x7f
 80017ec:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <MX_RTC_Init+0x144>)
 80017f0:	22ff      	movs	r2, #255	; 0xff
 80017f2:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <MX_RTC_Init+0x144>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <MX_RTC_Init+0x144>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_RTC_Init+0x144>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001806:	483c      	ldr	r0, [pc, #240]	; (80018f8 <MX_RTC_Init+0x144>)
 8001808:	f008 ffec 	bl	800a7e4 <HAL_RTC_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001812:	f000 ff8d 	bl	8002730 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001828:	2300      	movs	r3, #0
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	482f      	ldr	r0, [pc, #188]	; (80018f8 <MX_RTC_Init+0x144>)
 800183a:	f009 f865 	bl	800a908 <HAL_RTC_SetTime>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001844:	f000 ff74 	bl	8002730 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	2201      	movs	r2, #1
 8001866:	4619      	mov	r1, r3
 8001868:	4823      	ldr	r0, [pc, #140]	; (80018f8 <MX_RTC_Init+0x144>)
 800186a:	f009 f90b 	bl	800aa84 <HAL_RTC_SetDate>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001874:	f000 ff5c 	bl	8002730 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001878:	2300      	movs	r3, #0
 800187a:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 800187c:	2300      	movs	r3, #0
 800187e:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001880:	2300      	movs	r3, #0
 8001882:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 80018a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <MX_RTC_Init+0x144>)
 80018b0:	f009 f990 	bl	800abd4 <HAL_RTC_SetAlarm>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 80018ba:	f000 ff39 	bl	8002730 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80018be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	2201      	movs	r2, #1
 80018c8:	4619      	mov	r1, r3
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <MX_RTC_Init+0x144>)
 80018cc:	f009 f982 	bl	800abd4 <HAL_RTC_SetAlarm>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_RTC_Init+0x126>
	{
		Error_Handler();
 80018d6:	f000 ff2b 	bl	8002730 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80018da:	2202      	movs	r2, #2
 80018dc:	2100      	movs	r1, #0
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_RTC_Init+0x144>)
 80018e0:	f009 fb02 	bl	800aee8 <HAL_RTCEx_SetTimeStamp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 80018ea:	f000 ff21 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3748      	adds	r7, #72	; 0x48
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000968 	.word	0x20000968
 80018fc:	40002800 	.word	0x40002800

08001900 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001906:	4a59      	ldr	r2, [pc, #356]	; (8001a6c <MX_SAI2_Init+0x16c>)
 8001908:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <MX_SAI2_Init+0x168>)
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001916:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800191c:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <MX_SAI2_Init+0x168>)
 800191e:	2200      	movs	r2, #0
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001922:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001924:	2201      	movs	r2, #1
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <MX_SAI2_Init+0x168>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800192e:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001934:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <MX_SAI2_Init+0x168>)
 800193e:	2201      	movs	r2, #1
 8001940:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001944:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001948:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <MX_SAI2_Init+0x168>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <MX_SAI2_Init+0x168>)
 800195e:	2200      	movs	r2, #0
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001964:	2240      	movs	r2, #64	; 0x40
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <MX_SAI2_Init+0x168>)
 800196a:	2220      	movs	r2, #32
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800196e:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001970:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001974:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001978:	2200      	movs	r2, #0
 800197a:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <MX_SAI2_Init+0x168>)
 800197e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001982:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001986:	2200      	movs	r2, #0
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <MX_SAI2_Init+0x168>)
 800198c:	2200      	movs	r2, #0
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001992:	2204      	movs	r2, #4
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001998:	2205      	movs	r2, #5
 800199a:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <MX_SAI2_Init+0x168>)
 800199e:	f009 faf9 	bl	800af94 <HAL_SAI_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 80019a8:	f000 fec2 	bl	8002730 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <MX_SAI2_Init+0x174>)
 80019b0:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019de:	2201      	movs	r2, #1
 80019e0:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_SAI2_Init+0x170>)
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a02:	2220      	movs	r2, #32
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001a34:	480e      	ldr	r0, [pc, #56]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a36:	f009 faad 	bl	800af94 <HAL_SAI_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001a40:	f000 fe76 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SAI2_Init+0x168>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a52:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <MX_SAI2_Init+0x170>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a62:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000530 	.word	0x20000530
 8001a6c:	40015c04 	.word	0x40015c04
 8001a70:	20000304 	.word	0x20000304
 8001a74:	40015c24 	.word	0x40015c24

08001a78 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <MX_SDMMC1_SD_Init+0x3c>)
 8001a80:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <MX_SDMMC1_SD_Init+0x38>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000684 	.word	0x20000684
 8001ab4:	40012c00 	.word	0x40012c00

08001ab8 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001abe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ac2:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_SPDIFRX_Init+0x5c>)
 8001b02:	f00a fe0b 	bl	800c71c <HAL_SPDIFRX_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001b0c:	f000 fe10 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200004e4 	.word	0x200004e4

08001b18 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b09a      	sub	sp, #104	; 0x68
 8001b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	222c      	movs	r2, #44	; 0x2c
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00e faba 	bl	80100cc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001b58:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b5a:	4a44      	ldr	r2, [pc, #272]	; (8001c6c <MX_TIM1_Init+0x154>)
 8001b5c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b70:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b78:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b84:	4838      	ldr	r0, [pc, #224]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001b86:	f00a fe25 	bl	800c7d4 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001b90:	f000 fdce 	bl	8002730 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4831      	ldr	r0, [pc, #196]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001ba2:	f00b f96d 	bl	800ce80 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001bac:	f000 fdc0 	bl	8002730 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bb0:	482d      	ldr	r0, [pc, #180]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001bb2:	f00a fedf 	bl	800c974 <HAL_TIM_PWM_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001bbc:	f000 fdb8 	bl	8002730 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4825      	ldr	r0, [pc, #148]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001bd4:	f00b fdda 	bl	800d78c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001bde:	f000 fda7 	bl	8002730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	; 0x60
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4818      	ldr	r0, [pc, #96]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001c08:	f00b f82a 	bl	800cc60 <HAL_TIM_PWM_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001c12:	f000 fd8d 	bl	8002730 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001c4c:	f00b fe2c 	bl	800d8a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001c56:	f000 fd6b 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <MX_TIM1_Init+0x150>)
 8001c5c:	f001 fa8a 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8001c60:	bf00      	nop
 8001c62:	3768      	adds	r7, #104	; 0x68
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000988 	.word	0x20000988
 8001c6c:	40010000 	.word	0x40010000

08001c70 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cbc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cca:	4823      	ldr	r0, [pc, #140]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001ccc:	f00a fd82 	bl	800c7d4 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001cd6:	f000 fd2b 	bl	8002730 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001ce8:	f00b f8ca 	bl	800ce80 <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8001cf2:	f000 fd1d 	bl	8002730 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001cf8:	f00a fe3c 	bl	800c974 <HAL_TIM_PWM_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001d02:	f000 fd15 	bl	8002730 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4810      	ldr	r0, [pc, #64]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d16:	f00b fd39 	bl	800d78c <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001d20:	f000 fd06 	bl	8002730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d24:	2360      	movs	r3, #96	; 0x60
 8001d26:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d3c:	f00a ff90 	bl	800cc60 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001d46:	f000 fcf3 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001d4a:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM2_Init+0xe8>)
 8001d4c:	f001 fa12 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3738      	adds	r7, #56	; 0x38
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000af8 	.word	0x20000af8

08001d5c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d90:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <MX_TIM3_Init+0xec>)
 8001d92:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db4:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001db6:	f00a fd0d 	bl	800c7d4 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001dc0:	f000 fcb6 	bl	8002730 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001dd2:	f00b f855 	bl	800ce80 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8001ddc:	f000 fca8 	bl	8002730 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001de2:	f00a fdc7 	bl	800c974 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8001dec:	f000 fca0 	bl	8002730 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4811      	ldr	r0, [pc, #68]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e00:	f00b fcc4 	bl	800d78c <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001e0a:	f000 fc91 	bl	8002730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0e:	2360      	movs	r3, #96	; 0x60
 8001e10:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e26:	f00a ff1b 	bl	800cc60 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001e30:	f000 fc7e 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM3_Init+0xe8>)
 8001e36:	f001 f99d 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3738      	adds	r7, #56	; 0x38
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000758 	.word	0x20000758
 8001e48:	40000400 	.word	0x40000400

08001e4c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001e80:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <MX_TIM5_Init+0xec>)
 8001e82:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e96:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ea4:	4823      	ldr	r0, [pc, #140]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001ea6:	f00a fc95 	bl	800c7d4 <HAL_TIM_Base_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001eb0:	f000 fc3e 	bl	8002730 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001ec2:	f00a ffdd 	bl	800ce80 <HAL_TIM_ConfigClockSource>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001ecc:	f000 fc30 	bl	8002730 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ed0:	4818      	ldr	r0, [pc, #96]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001ed2:	f00a fd4f 	bl	800c974 <HAL_TIM_PWM_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001edc:	f000 fc28 	bl	8002730 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4811      	ldr	r0, [pc, #68]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001ef0:	f00b fc4c 	bl	800d78c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001efa:	f000 fc19 	bl	8002730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efe:	2360      	movs	r3, #96	; 0x60
 8001f00:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	220c      	movs	r2, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001f16:	f00a fea3 	bl	800cc60 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8001f20:	f000 fc06 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <MX_TIM5_Init+0xe8>)
 8001f26:	f001 f925 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8001f2a:	bf00      	nop
 8001f2c:	3738      	adds	r7, #56	; 0x38
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000708 	.word	0x20000708
 8001f38:	40000c00 	.word	0x40000c00

08001f3c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <MX_TIM8_Init+0xa4>)
 8001f5e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f72:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f86:	4815      	ldr	r0, [pc, #84]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001f88:	f00a fc24 	bl	800c7d4 <HAL_TIM_Base_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001f92:	f000 fbcd 	bl	8002730 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001fa4:	f00a ff6c 	bl	800ce80 <HAL_TIM_ConfigClockSource>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001fae:	f000 fbbf 	bl	8002730 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_TIM8_Init+0xa0>)
 8001fc4:	f00b fbe2 	bl	800d78c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001fce:	f000 fbaf 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000438 	.word	0x20000438
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM12_Init+0x84>)
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <MX_TIM12_Init+0x88>)
 8002000:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM12_Init+0x84>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_TIM12_Init+0x84>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_TIM12_Init+0x84>)
 8002010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002014:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_TIM12_Init+0x84>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_TIM12_Init+0x84>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002022:	4811      	ldr	r0, [pc, #68]	; (8002068 <MX_TIM12_Init+0x84>)
 8002024:	f00a fca6 	bl	800c974 <HAL_TIM_PWM_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 800202e:	f000 fb7f 	bl	8002730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM12_Init+0x84>)
 800204a:	f00a fe09 	bl	800cc60 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002054:	f000 fb6c 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM12_Init+0x84>)
 800205a:	f001 f88b 	bl	8003174 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000b44 	.word	0x20000b44
 800206c:	40001800 	.word	0x40001800

08002070 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <MX_USART1_UART_Init+0x5c>)
 8002078:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020b4:	f00b fc94 	bl	800d9e0 <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80020be:	f000 fb37 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200008e4 	.word	0x200008e4
 80020cc:	40011000 	.word	0x40011000

080020d0 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <MX_USART6_UART_Init+0x5c>)
 80020d8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART6_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART6_UART_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART6_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART6_UART_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART6_UART_Init+0x58>)
 8002114:	f00b fc64 	bl	800d9e0 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 800211e:	f000 fb07 	bl	8002730 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000a34 	.word	0x20000a34
 800212c:	40011400 	.word	0x40011400

08002130 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <MX_DMA_Init+0xd0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a31      	ldr	r2, [pc, #196]	; (8002200 <MX_DMA_Init+0xd0>)
 800213c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <MX_DMA_Init+0xd0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <MX_DMA_Init+0xd4>)
 8002150:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <MX_DMA_Init+0xd8>)
 8002152:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <MX_DMA_Init+0xd4>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <MX_DMA_Init+0xd4>)
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <MX_DMA_Init+0xd4>)
 8002162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002166:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_DMA_Init+0xd4>)
 800216a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216e:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_DMA_Init+0xd4>)
 8002172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002176:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <MX_DMA_Init+0xd4>)
 800217a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217e:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <MX_DMA_Init+0xd4>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_DMA_Init+0xd4>)
 8002188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800218c:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <MX_DMA_Init+0xd4>)
 8002190:	2204      	movs	r2, #4
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_DMA_Init+0xd4>)
 8002196:	2203      	movs	r2, #3
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_DMA_Init+0xd4>)
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <MX_DMA_Init+0xd4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80021a6:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_DMA_Init+0xd4>)
 80021a8:	f002 fef2 	bl	8004f90 <HAL_DMA_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 80021b2:	f000 fabd 	bl	8002730 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2105      	movs	r1, #5
 80021ba:	2038      	movs	r0, #56	; 0x38
 80021bc:	f002 fc00 	bl	80049c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021c0:	2038      	movs	r0, #56	; 0x38
 80021c2:	f002 fc19 	bl	80049f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2105      	movs	r1, #5
 80021ca:	2039      	movs	r0, #57	; 0x39
 80021cc:	f002 fbf8 	bl	80049c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021d0:	2039      	movs	r0, #57	; 0x39
 80021d2:	f002 fc11 	bl	80049f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	203c      	movs	r0, #60	; 0x3c
 80021dc:	f002 fbf0 	bl	80049c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80021e0:	203c      	movs	r0, #60	; 0x3c
 80021e2:	f002 fc09 	bl	80049f8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	2046      	movs	r0, #70	; 0x46
 80021ec:	f002 fbe8 	bl	80049c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021f0:	2046      	movs	r0, #70	; 0x46
 80021f2:	f002 fc01 	bl	80049f8 <HAL_NVIC_EnableIRQ>

}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	200003d8 	.word	0x200003d8
 8002208:	40026410 	.word	0x40026410

0800220c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	615a      	str	r2, [r3, #20]
 8002222:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_FMC_Init+0xa0>)
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <MX_FMC_Init+0xa4>)
 8002228:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <MX_FMC_Init+0xa0>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_FMC_Init+0xa0>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_FMC_Init+0xa0>)
 8002238:	2204      	movs	r2, #4
 800223a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_FMC_Init+0xa0>)
 800223e:	2210      	movs	r2, #16
 8002240:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_FMC_Init+0xa0>)
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_FMC_Init+0xa0>)
 800224a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <MX_FMC_Init+0xa0>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_FMC_Init+0xa0>)
 8002258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800225c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_FMC_Init+0xa0>)
 8002260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_FMC_Init+0xa0>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800226c:	2302      	movs	r3, #2
 800226e:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002270:	2307      	movs	r3, #7
 8002272:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002274:	2304      	movs	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002278:	2307      	movs	r3, #7
 800227a:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 800227c:	2303      	movs	r3, #3
 800227e:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <MX_FMC_Init+0xa0>)
 800228e:	f00a f9c6 	bl	800c61e <HAL_SDRAM_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002298:	f000 fa4a 	bl	8002730 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800229c:	f240 6003 	movw	r0, #1539	; 0x603
 80022a0:	f001 febe 	bl	8004020 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000b90 	.word	0x20000b90
 80022b0:	a0000140 	.word	0xa0000140

080022b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	; 0x40
 80022b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022ca:	4baf      	ldr	r3, [pc, #700]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4aae      	ldr	r2, [pc, #696]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4bac      	ldr	r3, [pc, #688]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80022e2:	4ba9      	ldr	r3, [pc, #676]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4aa8      	ldr	r2, [pc, #672]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4ba6      	ldr	r3, [pc, #664]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4ba3      	ldr	r3, [pc, #652]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4aa2      	ldr	r2, [pc, #648]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002312:	4b9d      	ldr	r3, [pc, #628]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a9c      	ldr	r2, [pc, #624]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b9a      	ldr	r3, [pc, #616]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b97      	ldr	r3, [pc, #604]	; (8002588 <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a96      	ldr	r2, [pc, #600]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b94      	ldr	r3, [pc, #592]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b91      	ldr	r3, [pc, #580]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a90      	ldr	r2, [pc, #576]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800235a:	4b8b      	ldr	r3, [pc, #556]	; (8002588 <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a8a      	ldr	r2, [pc, #552]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002372:	4b85      	ldr	r3, [pc, #532]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a84      	ldr	r2, [pc, #528]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a7e      	ldr	r2, [pc, #504]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b7c      	ldr	r3, [pc, #496]	; (8002588 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80023a2:	4b79      	ldr	r3, [pc, #484]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a78      	ldr	r2, [pc, #480]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023a8:	f043 0320 	orr.w	r3, r3, #32
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023d2:	2201      	movs	r2, #1
 80023d4:	2120      	movs	r1, #32
 80023d6:	486d      	ldr	r0, [pc, #436]	; (800258c <MX_GPIO_Init+0x2d8>)
 80023d8:	f003 fe12 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	210e      	movs	r1, #14
 80023e0:	486b      	ldr	r0, [pc, #428]	; (8002590 <MX_GPIO_Init+0x2dc>)
 80023e2:	f003 fe0d 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	2108      	movs	r1, #8
 80023ea:	486a      	ldr	r0, [pc, #424]	; (8002594 <MX_GPIO_Init+0x2e0>)
 80023ec:	f003 fe08 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f6:	4866      	ldr	r0, [pc, #408]	; (8002590 <MX_GPIO_Init+0x2dc>)
 80023f8:	f003 fe02 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002402:	4865      	ldr	r0, [pc, #404]	; (8002598 <MX_GPIO_Init+0x2e4>)
 8002404:	f003 fdfc 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	21c8      	movs	r1, #200	; 0xc8
 800240c:	4863      	ldr	r0, [pc, #396]	; (800259c <MX_GPIO_Init+0x2e8>)
 800240e:	f003 fdf7 	bl	8006000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002412:	2308      	movs	r3, #8
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	485e      	ldr	r0, [pc, #376]	; (80025a0 <MX_GPIO_Init+0x2ec>)
 8002426:	f003 fb1b 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800242a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800243c:	230b      	movs	r3, #11
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	4855      	ldr	r0, [pc, #340]	; (800259c <MX_GPIO_Init+0x2e8>)
 8002448:	f003 fb0a 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800244c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245a:	2303      	movs	r3, #3
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800245e:	230a      	movs	r3, #10
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002466:	4619      	mov	r1, r3
 8002468:	484e      	ldr	r0, [pc, #312]	; (80025a4 <MX_GPIO_Init+0x2f0>)
 800246a:	f003 faf9 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800246e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800247c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002480:	4619      	mov	r1, r3
 8002482:	4849      	ldr	r0, [pc, #292]	; (80025a8 <MX_GPIO_Init+0x2f4>)
 8002484:	f003 faec 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002488:	2340      	movs	r3, #64	; 0x40
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800248c:	4b47      	ldr	r3, [pc, #284]	; (80025ac <MX_GPIO_Init+0x2f8>)
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	483c      	ldr	r0, [pc, #240]	; (800258c <MX_GPIO_Init+0x2d8>)
 800249c:	f003 fae0 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024a0:	2320      	movs	r3, #32
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b4:	4619      	mov	r1, r3
 80024b6:	4835      	ldr	r0, [pc, #212]	; (800258c <MX_GPIO_Init+0x2d8>)
 80024b8:	f003 fad2 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024bc:	f241 030e 	movw	r3, #4110	; 0x100e
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	482e      	ldr	r0, [pc, #184]	; (8002590 <MX_GPIO_Init+0x2dc>)
 80024d6:	f003 fac3 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4830      	ldr	r0, [pc, #192]	; (80025b0 <MX_GPIO_Init+0x2fc>)
 80024f0:	f003 fab6 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024f4:	2308      	movs	r3, #8
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002508:	4619      	mov	r1, r3
 800250a:	4822      	ldr	r0, [pc, #136]	; (8002594 <MX_GPIO_Init+0x2e0>)
 800250c:	f003 faa8 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002510:	2310      	movs	r3, #16
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002520:	4619      	mov	r1, r3
 8002522:	481a      	ldr	r0, [pc, #104]	; (800258c <MX_GPIO_Init+0x2d8>)
 8002524:	f003 fa9c 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002528:	f248 0304 	movw	r3, #32772	; 0x8004
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	4816      	ldr	r0, [pc, #88]	; (8002598 <MX_GPIO_Init+0x2e4>)
 800253e:	f003 fa8f 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	4619      	mov	r1, r3
 800255a:	480f      	ldr	r0, [pc, #60]	; (8002598 <MX_GPIO_Init+0x2e4>)
 800255c:	f003 fa80 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <MX_GPIO_Init+0x2dc>)
 8002576:	f003 fa73 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800257a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <MX_GPIO_Init+0x300>)
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	e017      	b.n	80025b8 <MX_GPIO_Init+0x304>
 8002588:	40023800 	.word	0x40023800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40022000 	.word	0x40022000
 8002594:	40022800 	.word	0x40022800
 8002598:	40021c00 	.word	0x40021c00
 800259c:	40021800 	.word	0x40021800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40022400 	.word	0x40022400
 80025ac:	10120000 	.word	0x10120000
 80025b0:	40020800 	.word	0x40020800
 80025b4:	10110000 	.word	0x10110000
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025be:	4619      	mov	r1, r3
 80025c0:	4844      	ldr	r0, [pc, #272]	; (80026d4 <MX_GPIO_Init+0x420>)
 80025c2:	f003 fa4d 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80025c6:	2310      	movs	r3, #16
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025d6:	230a      	movs	r3, #10
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	483d      	ldr	r0, [pc, #244]	; (80026d8 <MX_GPIO_Init+0x424>)
 80025e2:	f003 fa3d 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80025e6:	23c8      	movs	r3, #200	; 0xc8
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fa:	4619      	mov	r1, r3
 80025fc:	4837      	ldr	r0, [pc, #220]	; (80026dc <MX_GPIO_Init+0x428>)
 80025fe:	f003 fa2f 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002602:	2305      	movs	r3, #5
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002612:	230a      	movs	r3, #10
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	4830      	ldr	r0, [pc, #192]	; (80026e0 <MX_GPIO_Init+0x42c>)
 800261e:	f003 fa1f 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002622:	2332      	movs	r3, #50	; 0x32
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002632:	230b      	movs	r3, #11
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263a:	4619      	mov	r1, r3
 800263c:	4828      	ldr	r0, [pc, #160]	; (80026e0 <MX_GPIO_Init+0x42c>)
 800263e:	f003 fa0f 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002642:	2304      	movs	r3, #4
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002646:	2300      	movs	r3, #0
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002652:	4619      	mov	r1, r3
 8002654:	4821      	ldr	r0, [pc, #132]	; (80026dc <MX_GPIO_Init+0x428>)
 8002656:	f003 fa03 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800265a:	2386      	movs	r3, #134	; 0x86
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800266a:	230b      	movs	r3, #11
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	4619      	mov	r1, r3
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <MX_GPIO_Init+0x430>)
 8002676:	f003 f9f3 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800267a:	2328      	movs	r3, #40	; 0x28
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800268a:	230a      	movs	r3, #10
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002692:	4619      	mov	r1, r3
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <MX_GPIO_Init+0x430>)
 8002696:	f003 f9e3 	bl	8005a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800269a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026ac:	2305      	movs	r3, #5
 80026ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <MX_GPIO_Init+0x434>)
 80026b8:	f003 f9d2 	bl	8005a60 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2105      	movs	r1, #5
 80026c0:	2028      	movs	r0, #40	; 0x28
 80026c2:	f002 f97d 	bl	80049c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026c6:	2028      	movs	r0, #40	; 0x28
 80026c8:	f002 f996 	bl	80049f8 <HAL_NVIC_EnableIRQ>

}
 80026cc:	bf00      	nop
 80026ce:	3740      	adds	r7, #64	; 0x40
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40021c00 	.word	0x40021c00
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400

080026ec <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	printf(msg);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f00e fa05 	bl	8010b04 <iprintf>
	printf("\n");
 80026fa:	200a      	movs	r0, #10
 80026fc:	f00e fa1a 	bl	8010b34 <putchar>
	Error_Handler();
 8002700:	f000 f816 	bl	8002730 <Error_Handler>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800271e:	f001 fda7 	bl	8004270 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40001000 	.word	0x40001000

08002730 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002734:	f001 f9c6 	bl	8003ac4 <LED_Toggle>
		HAL_Delay(100);
 8002738:	2064      	movs	r0, #100	; 0x64
 800273a:	f001 fdb9 	bl	80042b0 <HAL_Delay>
		LED_Toggle();
 800273e:	e7f9      	b.n	8002734 <Error_Handler+0x4>

08002740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_MspInit+0x4c>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_MspInit+0x4c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	210f      	movs	r1, #15
 800277a:	f06f 0001 	mvn.w	r0, #1
 800277e:	f002 f91f 	bl	80049c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_ADC_MspInit+0xa4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13c      	bne.n	800282c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a20      	ldr	r2, [pc, #128]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_ADC_MspInit+0xa8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80027fa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80027fe:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002800:	2303      	movs	r3, #3
 8002802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	480b      	ldr	r0, [pc, #44]	; (800283c <HAL_ADC_MspInit+0xac>)
 8002810:	f003 f926 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	2303      	movs	r3, #3
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <HAL_ADC_MspInit+0xb0>)
 8002828:	f003 f91a 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40012200 	.word	0x40012200
 8002838:	40023800 	.word	0x40023800
 800283c:	40021400 	.word	0x40021400
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_CRC_MspInit+0x38>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10b      	bne.n	800286e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_CRC_MspInit+0x3c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_CRC_MspInit+0x3c>)
 800285c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_CRC_MspInit+0x3c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023000 	.word	0x40023000
 8002880:	40023800 	.word	0x40023800

08002884 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <HAL_DCMI_MspInit+0x1d0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	f040 80d2 	bne.w	8002a4c <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028a8:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6353      	str	r3, [r2, #52]	; 0x34
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4a64      	ldr	r2, [pc, #400]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	6313      	str	r3, [r2, #48]	; 0x30
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d8:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a5e      	ldr	r2, [pc, #376]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_DCMI_MspInit+0x1d4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002938:	2360      	movs	r3, #96	; 0x60
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002948:	230d      	movs	r3, #13
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4842      	ldr	r0, [pc, #264]	; (8002a5c <HAL_DCMI_MspInit+0x1d8>)
 8002954:	f003 f884 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002958:	2308      	movs	r3, #8
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002968:	230d      	movs	r3, #13
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	483b      	ldr	r0, [pc, #236]	; (8002a60 <HAL_DCMI_MspInit+0x1dc>)
 8002974:	f003 f874 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800298a:	230d      	movs	r3, #13
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	4619      	mov	r1, r3
 8002994:	4833      	ldr	r0, [pc, #204]	; (8002a64 <HAL_DCMI_MspInit+0x1e0>)
 8002996:	f003 f863 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800299a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029ac:	230d      	movs	r3, #13
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	482c      	ldr	r0, [pc, #176]	; (8002a68 <HAL_DCMI_MspInit+0x1e4>)
 80029b8:	f003 f852 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029bc:	2350      	movs	r3, #80	; 0x50
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029cc:	230d      	movs	r3, #13
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4825      	ldr	r0, [pc, #148]	; (8002a6c <HAL_DCMI_MspInit+0x1e8>)
 80029d8:	f003 f842 	bl	8005a60 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_DCMI_MspInit+0x1f0>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 80029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 80029f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a04:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a0c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a20:	4813      	ldr	r0, [pc, #76]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a22:	f002 fab5 	bl	8004f90 <HAL_DMA_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002a2c:	f7ff fe80 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a34:	649a      	str	r2, [r3, #72]	; 0x48
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <HAL_DCMI_MspInit+0x1ec>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2105      	movs	r1, #5
 8002a40:	204e      	movs	r0, #78	; 0x4e
 8002a42:	f001 ffbd 	bl	80049c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002a46:	204e      	movs	r0, #78	; 0x4e
 8002a48:	f001 ffd6 	bl	80049f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	3738      	adds	r7, #56	; 0x38
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	50050000 	.word	0x50050000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40021c00 	.word	0x40021c00
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	20000624 	.word	0x20000624
 8002a74:	40026428 	.word	0x40026428

08002a78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_DMA2D_MspInit+0x44>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_DMA2D_MspInit+0x48>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_DMA2D_MspInit+0x48>)
 8002a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_DMA2D_MspInit+0x48>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	205a      	movs	r0, #90	; 0x5a
 8002aa8:	f001 ff8a 	bl	80049c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002aac:	205a      	movs	r0, #90	; 0x5a
 8002aae:	f001 ffa3 	bl	80049f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	4002b000 	.word	0x4002b000
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_I2C_MspInit+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d129      	bne.n	8002b3a <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b04:	2312      	movs	r3, #18
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b10:	2304      	movs	r3, #4
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4823      	ldr	r0, [pc, #140]	; (8002ba8 <HAL_I2C_MspInit+0xe4>)
 8002b1c:	f002 ffa0 	bl	8005a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b38:	e02d      	b.n	8002b96 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_I2C_MspInit+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d128      	bne.n	8002b96 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b62:	2312      	movs	r3, #18
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b72:	f107 031c 	add.w	r3, r7, #28
 8002b76:	4619      	mov	r1, r3
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <HAL_I2C_MspInit+0xec>)
 8002b7a:	f002 ff71 	bl	8005a60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_I2C_MspInit+0xe0>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
}
 8002b96:	bf00      	nop
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40005400 	.word	0x40005400
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40005c00 	.word	0x40005c00
 8002bb0:	40021c00 	.word	0x40021c00

08002bb4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <HAL_I2C_MspDeInit+0x64>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d110      	bne.n	8002be8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_I2C_MspDeInit+0x68>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_I2C_MspDeInit+0x68>)
 8002bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bd6:	4812      	ldr	r0, [pc, #72]	; (8002c20 <HAL_I2C_MspDeInit+0x6c>)
 8002bd8:	f003 f8ee 	bl	8005db8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be0:	480f      	ldr	r0, [pc, #60]	; (8002c20 <HAL_I2C_MspDeInit+0x6c>)
 8002be2:	f003 f8e9 	bl	8005db8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002be6:	e013      	b.n	8002c10 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_I2C_MspDeInit+0x70>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10e      	bne.n	8002c10 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_I2C_MspDeInit+0x68>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_I2C_MspDeInit+0x68>)
 8002bf8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	4809      	ldr	r0, [pc, #36]	; (8002c28 <HAL_I2C_MspDeInit+0x74>)
 8002c02:	f003 f8d9 	bl	8005db8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c0a:	4807      	ldr	r0, [pc, #28]	; (8002c28 <HAL_I2C_MspDeInit+0x74>)
 8002c0c:	f003 f8d4 	bl	8005db8 <HAL_GPIO_DeInit>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40005c00 	.word	0x40005c00
 8002c28:	40021c00 	.word	0x40021c00

08002c2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	; 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a51      	ldr	r2, [pc, #324]	; (8002d90 <HAL_LTDC_MspInit+0x164>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f040 809b 	bne.w	8002d86 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c6e:	f043 0310 	orr.w	r3, r3, #16
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c80:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a43      	ldr	r2, [pc, #268]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c98:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a37      	ldr	r2, [pc, #220]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a31      	ldr	r2, [pc, #196]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <HAL_LTDC_MspInit+0x168>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cf0:	230e      	movs	r3, #14
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4827      	ldr	r0, [pc, #156]	; (8002d98 <HAL_LTDC_MspInit+0x16c>)
 8002cfc:	f002 feb0 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002d00:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d12:	230e      	movs	r3, #14
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481f      	ldr	r0, [pc, #124]	; (8002d9c <HAL_LTDC_MspInit+0x170>)
 8002d1e:	f002 fe9f 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002d22:	23f7      	movs	r3, #247	; 0xf7
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d32:	230e      	movs	r3, #14
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4818      	ldr	r0, [pc, #96]	; (8002da0 <HAL_LTDC_MspInit+0x174>)
 8002d3e:	f002 fe8f 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d54:	2309      	movs	r3, #9
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <HAL_LTDC_MspInit+0x178>)
 8002d60:	f002 fe7e 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002d64:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d76:	230e      	movs	r3, #14
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HAL_LTDC_MspInit+0x17c>)
 8002d82:	f002 fe6d 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3738      	adds	r7, #56	; 0x38
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40016800 	.word	0x40016800
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40022400 	.word	0x40022400
 8002da0:	40022800 	.word	0x40022800
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40022000 	.word	0x40022000

08002dac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <HAL_QSPI_MspInit+0x11c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d178      	bne.n	8002ec0 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4a3e      	ldr	r2, [pc, #248]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dda:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a38      	ldr	r2, [pc, #224]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002dec:	f043 0310 	orr.w	r3, r3, #16
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_QSPI_MspInit+0x120>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e3e:	2309      	movs	r3, #9
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	4821      	ldr	r0, [pc, #132]	; (8002ed0 <HAL_QSPI_MspInit+0x124>)
 8002e4a:	f002 fe09 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e5e:	230a      	movs	r3, #10
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <HAL_QSPI_MspInit+0x128>)
 8002e6a:	f002 fdf9 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 031c 	add.w	r3, r7, #28
 8002e86:	4619      	mov	r1, r3
 8002e88:	4812      	ldr	r0, [pc, #72]	; (8002ed4 <HAL_QSPI_MspInit+0x128>)
 8002e8a:	f002 fde9 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ea0:	2309      	movs	r3, #9
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <HAL_QSPI_MspInit+0x12c>)
 8002eac:	f002 fdd8 	bl	8005a60 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2105      	movs	r1, #5
 8002eb4:	205c      	movs	r0, #92	; 0x5c
 8002eb6:	f001 fd83 	bl	80049c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002eba:	205c      	movs	r0, #92	; 0x5c
 8002ebc:	f001 fd9c 	bl	80049f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ec0:	bf00      	nop
 8002ec2:	3730      	adds	r7, #48	; 0x30
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	a0001000 	.word	0xa0001000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020c00 	.word	0x40020c00

08002edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_RTC_MspInit+0x2c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d105      	bne.n	8002efa <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002eee:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <HAL_RTC_MspInit+0x30>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <HAL_RTC_MspInit+0x30>)
 8002ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40002800 	.word	0x40002800
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <HAL_SD_MspInit+0xb4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d144      	bne.n	8002fbc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_SD_MspInit+0xb8>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002f7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4619      	mov	r1, r3
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <HAL_SD_MspInit+0xbc>)
 8002f98:	f002 fd62 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fac:	230c      	movs	r3, #12
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <HAL_SD_MspInit+0xc0>)
 8002fb8:	f002 fd52 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	; 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020c00 	.word	0x40020c00

08002fd4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002ff4:	d127      	bne.n	8003046 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_SPDIFRX_MspInit+0x7c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003036:	2308      	movs	r3, #8
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <HAL_SPDIFRX_MspInit+0x80>)
 8003042:	f002 fd0d 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40020c00 	.word	0x40020c00

08003058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <HAL_TIM_Base_MspInit+0xc8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003082:	e046      	b.n	8003112 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d10c      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	69bb      	ldr	r3, [r7, #24]
}
 80030a6:	e034      	b.n	8003112 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_TIM_Base_MspInit+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10c      	bne.n	80030cc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
}
 80030ca:	e022      	b.n	8003112 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_TIM_Base_MspInit+0xd4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
}
 80030ee:	e010      	b.n	8003112 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_TIM_Base_MspInit+0xd8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10b      	bne.n	8003112 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_TIM_Base_MspInit+0xcc>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40023800 	.word	0x40023800
 8003128:	40000400 	.word	0x40000400
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_TIM_PWM_MspInit+0x38>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10b      	bne.n	800315e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_TIM_PWM_MspInit+0x3c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_TIM_PWM_MspInit+0x3c>)
 800314c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_TIM_PWM_MspInit+0x3c>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40001800 	.word	0x40001800
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a56      	ldr	r2, [pc, #344]	; (80032ec <HAL_TIM_MspPostInit+0x178>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d11d      	bne.n	80031d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	484a      	ldr	r0, [pc, #296]	; (80032f4 <HAL_TIM_MspPostInit+0x180>)
 80031cc:	f002 fc48 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80031d0:	e087      	b.n	80032e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d11d      	bne.n	8003218 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6313      	str	r3, [r2, #48]	; 0x30
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80031f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4838      	ldr	r0, [pc, #224]	; (80032f4 <HAL_TIM_MspPostInit+0x180>)
 8003212:	f002 fc25 	bl	8005a60 <HAL_GPIO_Init>
}
 8003216:	e064      	b.n	80032e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <HAL_TIM_MspPostInit+0x184>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d11c      	bne.n	800325c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a32      	ldr	r2, [pc, #200]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800323a:	2310      	movs	r3, #16
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800324a:	2302      	movs	r3, #2
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4619      	mov	r1, r3
 8003254:	4829      	ldr	r0, [pc, #164]	; (80032fc <HAL_TIM_MspPostInit+0x188>)
 8003256:	f002 fc03 	bl	8005a60 <HAL_GPIO_Init>
}
 800325a:	e042      	b.n	80032e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_TIM_MspPostInit+0x18c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d11c      	bne.n	80032a0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800328e:	2302      	movs	r3, #2
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	481a      	ldr	r0, [pc, #104]	; (8003304 <HAL_TIM_MspPostInit+0x190>)
 800329a:	f002 fbe1 	bl	8005a60 <HAL_GPIO_Init>
}
 800329e:	e020      	b.n	80032e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_TIM_MspPostInit+0x194>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d11b      	bne.n	80032e2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_TIM_MspPostInit+0x17c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032d2:	2309      	movs	r3, #9
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <HAL_TIM_MspPostInit+0x198>)
 80032de:	f002 fbbf 	bl	8005a60 <HAL_GPIO_Init>
}
 80032e2:	bf00      	nop
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40020400 	.word	0x40020400
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40022000 	.word	0x40022000
 8003308:	40001800 	.word	0x40001800
 800330c:	40021c00 	.word	0x40021c00

08003310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <HAL_UART_MspInit+0x110>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d145      	bne.n	80033be <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003332:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_UART_MspInit+0x114>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a35      	ldr	r2, [pc, #212]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_UART_MspInit+0x114>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338a:	2307      	movs	r3, #7
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	4619      	mov	r1, r3
 8003394:	4824      	ldr	r0, [pc, #144]	; (8003428 <HAL_UART_MspInit+0x118>)
 8003396:	f002 fb63 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800339a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033ac:	2307      	movs	r3, #7
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	481d      	ldr	r0, [pc, #116]	; (800342c <HAL_UART_MspInit+0x11c>)
 80033b8:	f002 fb52 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033bc:	e02c      	b.n	8003418 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_UART_MspInit+0x120>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d127      	bne.n	8003418 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033ce:	f043 0320 	orr.w	r3, r3, #32
 80033d2:	6453      	str	r3, [r2, #68]	; 0x44
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_UART_MspInit+0x114>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80033f8:	23c0      	movs	r3, #192	; 0xc0
 80033fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003408:	2308      	movs	r3, #8
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	4808      	ldr	r0, [pc, #32]	; (8003434 <HAL_UART_MspInit+0x124>)
 8003414:	f002 fb24 	bl	8005a60 <HAL_GPIO_Init>
}
 8003418:	bf00      	nop
 800341a:	3730      	adds	r7, #48	; 0x30
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40011000 	.word	0x40011000
 8003424:	40023800 	.word	0x40023800
 8003428:	40020400 	.word	0x40020400
 800342c:	40020000 	.word	0x40020000
 8003430:	40011400 	.word	0x40011400
 8003434:	40020800 	.word	0x40020800

08003438 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800344c:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_FMC_MspInit+0x10c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d173      	bne.n	800353c <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_FMC_MspInit+0x10c>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_FMC_MspInit+0x110>)
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <HAL_FMC_MspInit+0x110>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6393      	str	r3, [r2, #56]	; 0x38
 8003466:	4b38      	ldr	r3, [pc, #224]	; (8003548 <HAL_FMC_MspInit+0x110>)
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003472:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003476:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003484:	230c      	movs	r3, #12
 8003486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	482f      	ldr	r0, [pc, #188]	; (800354c <HAL_FMC_MspInit+0x114>)
 800348e:	f002 fae7 	bl	8005a60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003492:	f248 1333 	movw	r3, #33075	; 0x8133
 8003496:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4828      	ldr	r0, [pc, #160]	; (8003550 <HAL_FMC_MspInit+0x118>)
 80034ae:	f002 fad7 	bl	8005a60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80034b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034b6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c4:	230c      	movs	r3, #12
 80034c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4821      	ldr	r0, [pc, #132]	; (8003554 <HAL_FMC_MspInit+0x11c>)
 80034ce:	f002 fac7 	bl	8005a60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80034d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80034d6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e4:	230c      	movs	r3, #12
 80034e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	481a      	ldr	r0, [pc, #104]	; (8003558 <HAL_FMC_MspInit+0x120>)
 80034ee:	f002 fab7 	bl	8005a60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80034f2:	2328      	movs	r3, #40	; 0x28
 80034f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003502:	230c      	movs	r3, #12
 8003504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4814      	ldr	r0, [pc, #80]	; (800355c <HAL_FMC_MspInit+0x124>)
 800350c:	f002 faa8 	bl	8005a60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003510:	2308      	movs	r3, #8
 8003512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003520:	230c      	movs	r3, #12
 8003522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	4619      	mov	r1, r3
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <HAL_FMC_MspInit+0x128>)
 800352a:	f002 fa99 	bl	8005a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_FMC_MspInit+0x12c>)
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_FMC_MspInit+0x130>)
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_FMC_MspInit+0x130>)
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <HAL_FMC_MspInit+0x12c>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
 800353a:	e000      	b.n	800353e <HAL_FMC_MspInit+0x106>
    return;
 800353c:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000204 	.word	0x20000204
 8003548:	40023800 	.word	0x40023800
 800354c:	40021000 	.word	0x40021000
 8003550:	40021800 	.word	0x40021800
 8003554:	40020c00 	.word	0x40020c00
 8003558:	40021400 	.word	0x40021400
 800355c:	40021c00 	.word	0x40021c00
 8003560:	40020800 	.word	0x40020800
 8003564:	20000b90 	.word	0x20000b90
 8003568:	200003d8 	.word	0x200003d8

0800356c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003574:	f7ff ff60 	bl	8003438 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6f      	ldr	r2, [pc, #444]	; (800374c <HAL_SAI_MspInit+0x1cc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d175      	bne.n	800367e <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a6d      	ldr	r2, [pc, #436]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 80035a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 80035ba:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 80035bc:	2310      	movs	r3, #16
 80035be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035cc:	230a      	movs	r3, #10
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	4619      	mov	r1, r3
 80035d6:	4860      	ldr	r0, [pc, #384]	; (8003758 <HAL_SAI_MspInit+0x1d8>)
 80035d8:	f002 fa42 	bl	8005a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035dc:	23e0      	movs	r3, #224	; 0xe0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e8:	2302      	movs	r3, #2
 80035ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035ec:	230a      	movs	r3, #10
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	4858      	ldr	r0, [pc, #352]	; (8003758 <HAL_SAI_MspInit+0x1d8>)
 80035f8:	f002 fa32 	bl	8005a60 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 80035fe:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_SAI_MspInit+0x1e0>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003602:	4b56      	ldr	r3, [pc, #344]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003604:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003608:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360a:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003610:	4b52      	ldr	r3, [pc, #328]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003616:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003624:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003634:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003636:	4b49      	ldr	r3, [pc, #292]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003640:	2204      	movs	r2, #4
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003644:	4b45      	ldr	r3, [pc, #276]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003646:	2203      	movs	r2, #3
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 800364c:	2200      	movs	r2, #0
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003650:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003656:	4841      	ldr	r0, [pc, #260]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003658:	f001 fc9a 	bl	8004f90 <HAL_DMA_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003662:	f7ff f865 	bl	8002730 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a3c      	ldr	r2, [pc, #240]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 800366a:	671a      	str	r2, [r3, #112]	; 0x70
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 8003676:	66da      	str	r2, [r3, #108]	; 0x6c
 8003678:	4a38      	ldr	r2, [pc, #224]	; (800375c <HAL_SAI_MspInit+0x1dc>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a38      	ldr	r2, [pc, #224]	; (8003764 <HAL_SAI_MspInit+0x1e4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d15c      	bne.n	8003742 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003688:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	4a2f      	ldr	r2, [pc, #188]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 8003696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800369a:	6453      	str	r3, [r2, #68]	; 0x44
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_SAI_MspInit+0x1d4>)
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_SAI_MspInit+0x1d0>)
 80036b0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c0:	2302      	movs	r3, #2
 80036c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036c4:	230a      	movs	r3, #10
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	4826      	ldr	r0, [pc, #152]	; (8003768 <HAL_SAI_MspInit+0x1e8>)
 80036d0:	f002 f9c6 	bl	8005a60 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036d6:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_SAI_MspInit+0x1f0>)
 80036d8:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80036ec:	4b1f      	ldr	r3, [pc, #124]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fa:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 80036fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003702:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 8003706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 800370e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003712:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 8003716:	2200      	movs	r2, #0
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800371a:	4814      	ldr	r0, [pc, #80]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 800371c:	f001 fc38 	bl	8004f90 <HAL_DMA_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003726:	f7ff f803 	bl	8002730 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a0f      	ldr	r2, [pc, #60]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 800372e:	671a      	str	r2, [r3, #112]	; 0x70
 8003730:	4a0e      	ldr	r2, [pc, #56]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 800373a:	66da      	str	r2, [r3, #108]	; 0x6c
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_SAI_MspInit+0x1ec>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003742:	bf00      	nop
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40015c04 	.word	0x40015c04
 8003750:	20000208 	.word	0x20000208
 8003754:	40023800 	.word	0x40023800
 8003758:	40022000 	.word	0x40022000
 800375c:	200009d4 	.word	0x200009d4
 8003760:	40026470 	.word	0x40026470
 8003764:	40015c24 	.word	0x40015c24
 8003768:	40021800 	.word	0x40021800
 800376c:	20000484 	.word	0x20000484
 8003770:	400264b8 	.word	0x400264b8

08003774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003784:	2200      	movs	r2, #0
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	2036      	movs	r0, #54	; 0x36
 800378a:	f001 f919 	bl	80049c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800378e:	2036      	movs	r0, #54	; 0x36
 8003790:	f001 f932 	bl	80049f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_InitTick+0xa0>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_InitTick+0xa0>)
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	6413      	str	r3, [r2, #64]	; 0x40
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_InitTick+0xa0>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037ac:	f107 0210 	add.w	r2, r7, #16
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f006 faae 	bl	8009d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037bc:	f006 fa84 	bl	8009cc8 <HAL_RCC_GetPCLK1Freq>
 80037c0:	4603      	mov	r3, r0
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_InitTick+0xa4>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	3b01      	subs	r3, #1
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_InitTick+0xa8>)
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <HAL_InitTick+0xac>)
 80037d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_InitTick+0xa8>)
 80037dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037e2:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_InitTick+0xa8>)
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_InitTick+0xa8>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_InitTick+0xa8>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037f4:	4809      	ldr	r0, [pc, #36]	; (800381c <HAL_InitTick+0xa8>)
 80037f6:	f008 ffed 	bl	800c7d4 <HAL_TIM_Base_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003800:	4806      	ldr	r0, [pc, #24]	; (800381c <HAL_InitTick+0xa8>)
 8003802:	f009 f83f 	bl	800c884 <HAL_TIM_Base_Start_IT>
 8003806:	4603      	mov	r3, r0
 8003808:	e000      	b.n	800380c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
}
 800380c:	4618      	mov	r0, r3
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	431bde83 	.word	0x431bde83
 800381c:	20000c10 	.word	0x20000c10
 8003820:	40001000 	.word	0x40001000

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <NMI_Handler+0x4>

0800382a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382e:	e7fe      	b.n	800382e <HardFault_Handler+0x4>

08003830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003834:	e7fe      	b.n	8003834 <MemManage_Handler+0x4>

08003836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <BusFault_Handler+0x4>

0800383c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <UsageFault_Handler+0x4>

08003842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003858:	f002 fc06 	bl	8006068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}

08003860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <TIM6_DAC_IRQHandler+0x10>)
 8003866:	f009 f8dc 	bl	800ca22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000c10 	.word	0x20000c10

08003874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <DMA2_Stream0_IRQHandler+0x10>)
 800387a:	f001 fcc9 	bl	8005210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200003d8 	.word	0x200003d8

08003888 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <DMA2_Stream1_IRQHandler+0x10>)
 800388e:	f001 fcbf 	bl	8005210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000624 	.word	0x20000624

0800389c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <DMA2_Stream4_IRQHandler+0x10>)
 80038a2:	f001 fcb5 	bl	8005210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200009d4 	.word	0x200009d4

080038b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <OTG_FS_IRQHandler+0x10>)
 80038b6:	f002 fbfa 	bl	80060ae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20040cc8 	.word	0x20040cc8

080038c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA2_Stream7_IRQHandler+0x10>)
 80038ca:	f001 fca1 	bl	8005210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000484 	.word	0x20000484

080038d8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DCMI_IRQHandler+0x10>)
 80038de:	f001 fa87 	bl	8004df0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000894 	.word	0x20000894

080038ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <DMA2D_IRQHandler+0x10>)
 80038f2:	f001 ff13 	bl	800571c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000ab8 	.word	0x20000ab8

08003900 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <QUADSPI_IRQHandler+0x10>)
 8003906:	f004 fe45 	bl	8008594 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000bc4 	.word	0x20000bc4

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_kill>:

int _kill(int pid, int sig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800392e:	f00c fb8d 	bl	801004c <__errno>
 8003932:	4603      	mov	r3, r0
 8003934:	2216      	movs	r2, #22
 8003936:	601a      	str	r2, [r3, #0]
	return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800394c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffe7 	bl	8003924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003956:	e7fe      	b.n	8003956 <_exit+0x12>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800396a:	f3af 8000 	nop.w
 800396e:	4601      	mov	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
	}

return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f893 	bl	8003ad8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
	}
	return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f2:	605a      	str	r2, [r3, #4]
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_isatty>:

int _isatty(int file)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
	return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f00c faf2 	bl	801004c <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20050000 	.word	0x20050000
 8003a94:	00000800 	.word	0x00000800
 8003a98:	2000020c 	.word	0x2000020c
 8003a9c:	20040fe0 	.word	0x20040fe0

08003aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <SystemInit+0x20>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <SystemInit+0x20>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <LED_Toggle+0x10>)
 8003acc:	f002 fab1 	bl	8006032 <HAL_GPIO_TogglePin>

}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40022000 	.word	0x40022000

08003ad8 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003ae0:	1d39      	adds	r1, r7, #4
 8003ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4803      	ldr	r0, [pc, #12]	; (8003af8 <__io_putchar+0x20>)
 8003aea:	f009 ffc7 	bl	800da7c <HAL_UART_Transmit>
	return ch;
 8003aee:	687b      	ldr	r3, [r7, #4]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200008e4 	.word	0x200008e4

08003afc <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	72fb      	strb	r3, [r7, #11]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	813b      	strh	r3, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	b299      	uxth	r1, r3
 8003b1e:	88f8      	ldrh	r0, [r7, #6]
 8003b20:	893a      	ldrh	r2, [r7, #8]
 8003b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b26:	9302      	str	r3, [sp, #8]
 8003b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4603      	mov	r3, r0
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f003 fe00 	bl	8007738 <HAL_I2C_Mem_Write>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	4619      	mov	r1, r3
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f805 	bl	8003b56 <I2Cx_Error>
  }
  return status;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f003 fdb8 	bl	80076d8 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f003 fd25 	bl	80075b8 <HAL_I2C_Init>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460a      	mov	r2, r1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	1dbb      	adds	r3, r7, #6
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2301      	movs	r3, #1
 8003b96:	2170      	movs	r1, #112	; 0x70
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <TS_I2C_Write+0x30>)
 8003b9a:	f7ff ffaf 	bl	8003afc <I2Cx_WriteMultiple>

}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000038c 	.word	0x2000038c

08003bac <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <LCD_Init+0x44>)
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d002      	beq.n	8003bbe <LCD_Init+0x12>
 8003bb8:	480e      	ldr	r0, [pc, #56]	; (8003bf4 <LCD_Init+0x48>)
 8003bba:	f7fe fd97 	bl	80026ec <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <LCD_Init+0x4c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	480a      	ldr	r0, [pc, #40]	; (8003bf0 <LCD_Init+0x44>)
 8003bc8:	f004 fa38 	bl	800803c <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003bcc:	f000 f81a 	bl	8003c04 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <LCD_Init+0x50>)
 8003bd2:	f000 f87d 	bl	8003cd0 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bda:	f000 f861 	bl	8003ca0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003bde:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003be2:	f000 f82d 	bl	8003c40 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8003be6:	4806      	ldr	r0, [pc, #24]	; (8003c00 <LCD_Init+0x54>)
 8003be8:	f000 f842 	bl	8003c70 <LCD_SetFillColor>


}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	200007a4 	.word	0x200007a4
 8003bf4:	08012cac 	.word	0x08012cac
 8003bf8:	20000004 	.word	0x20000004
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	ffff0000 	.word	0xffff0000

08003c04 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <LCD_DisplayOn+0x30>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <LCD_DisplayOn+0x30>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c1e:	4806      	ldr	r0, [pc, #24]	; (8003c38 <LCD_DisplayOn+0x34>)
 8003c20:	f002 f9ee 	bl	8006000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003c24:	2201      	movs	r2, #1
 8003c26:	2108      	movs	r1, #8
 8003c28:	4804      	ldr	r0, [pc, #16]	; (8003c3c <LCD_DisplayOn+0x38>)
 8003c2a:	f002 f9e9 	bl	8006000 <HAL_GPIO_WritePin>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200007a4 	.word	0x200007a4
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40022800 	.word	0x40022800

08003c40 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <LCD_SetStrokeColor+0x28>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <LCD_SetStrokeColor+0x28>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f84c 	bl	8003cf0 <ARGB888ToRGB565>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <LCD_SetStrokeColor+0x2c>)
 8003c5e:	601a      	str	r2, [r3, #0]
#endif
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000210 	.word	0x20000210
 8003c6c:	2000021c 	.word	0x2000021c

08003c70 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <LCD_SetFillColor+0x28>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <LCD_SetFillColor+0x28>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f834 	bl	8003cf0 <ARGB888ToRGB565>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <LCD_SetFillColor+0x2c>)
 8003c8e:	601a      	str	r2, [r3, #0]
#endif
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000214 	.word	0x20000214
 8003c9c:	20000220 	.word	0x20000220

08003ca0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <LCD_SetBackColor+0x28>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <LCD_SetBackColor+0x28>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f81c 	bl	8003cf0 <ARGB888ToRGB565>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <LCD_SetBackColor+0x2c>)
 8003cbe:	601a      	str	r2, [r3, #0]
#endif
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000218 	.word	0x20000218
 8003ccc:	20000224 	.word	0x20000224

08003cd0 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <LCD_SetFont+0x1c>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000228 	.word	0x20000228

08003cf0 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8003d08:	7d7b      	ldrb	r3, [r7, #21]
 8003d0a:	08db      	lsrs	r3, r3, #3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8003d16:	7dbb      	ldrb	r3, [r7, #22]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	015b      	lsls	r3, r3, #5
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003d24:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	02db      	lsls	r3, r3, #11
 8003d2e:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8003d30:	89fa      	ldrh	r2, [r7, #14]
 8003d32:	8a3b      	ldrh	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	8a7b      	ldrh	r3, [r7, #18]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	b29b      	uxth	r3, r3
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d56:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003d58:	23eb      	movs	r3, #235	; 0xeb
 8003d5a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d66:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003d6c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003d72:	230a      	movs	r3, #10
 8003d74:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003d8a:	463a      	mov	r2, r7
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	4619      	mov	r1, r3
 8003d92:	4806      	ldr	r0, [pc, #24]	; (8003dac <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8003d94:	f004 ffcc 	bl	8008d30 <HAL_QSPI_MemoryMapped>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3740      	adds	r7, #64	; 0x40
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000bc4 	.word	0x20000bc4

08003db0 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b090      	sub	sp, #64	; 0x40
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003dbe:	2366      	movs	r3, #102	; 0x66
 8003dc0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f004 fd93 	bl	8008914 <HAL_QSPI_Command>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e019      	b.n	8003e2c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8003df8:	2399      	movs	r3, #153	; 0x99
 8003dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f004 fd84 	bl	8008914 <HAL_QSPI_Command>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00a      	b.n	8003e2c <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e16:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8c7 	bl	8003fae <QSPI_AutoPollingMemReady>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3740      	adds	r7, #64	; 0x40
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b094      	sub	sp, #80	; 0x50
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003e42:	2385      	movs	r3, #133	; 0x85
 8003e44:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e60:	2300      	movs	r3, #0
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e64:	2300      	movs	r3, #0
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e68:	f107 0310 	add.w	r3, r7, #16
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f004 fd4e 	bl	8008914 <HAL_QSPI_Command>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e048      	b.n	8003f14 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e82:	f107 030f 	add.w	r3, r7, #15
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f004 fe36 	bl	8008afe <HAL_QSPI_Receive>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e03b      	b.n	8003f14 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f83d 	bl	8003f1c <QSPI_WriteEnable>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e033      	b.n	8003f14 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003eac:	2381      	movs	r3, #129	; 0x81
 8003eae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b25a      	sxtb	r2, r3
 8003eba:	23f0      	movs	r3, #240	; 0xf0
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	4619      	mov	r1, r3
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	408b      	lsls	r3, r1
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ede:	f107 0310 	add.w	r3, r7, #16
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f004 fd13 	bl	8008914 <HAL_QSPI_Command>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e00d      	b.n	8003f14 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ef8:	f107 030f 	add.w	r3, r7, #15
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f004 fd64 	bl	80089d0 <HAL_QSPI_Transmit>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3750      	adds	r7, #80	; 0x50
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b096      	sub	sp, #88	; 0x58
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f28:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003f42:	2300      	movs	r3, #0
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f46:	2300      	movs	r3, #0
 8003f48:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f4a:	f107 0320 	add.w	r3, r7, #32
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f004 fcdd 	bl	8008914 <HAL_QSPI_Command>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e020      	b.n	8003fa6 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8003f64:	2302      	movs	r3, #2
 8003f66:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003f74:	2310      	movs	r3, #16
 8003f76:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f7c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003f7e:	2305      	movs	r3, #5
 8003f80:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f88:	f107 0208 	add.w	r2, r7, #8
 8003f8c:	f107 0120 	add.w	r1, r7, #32
 8003f90:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f004 fe54 	bl	8008c42 <HAL_QSPI_AutoPolling>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3758      	adds	r7, #88	; 0x58
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b096      	sub	sp, #88	; 0x58
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003ff4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	f107 0120 	add.w	r1, r7, #32
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f004 fe1c 	bl	8008c42 <HAL_QSPI_AutoPolling>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3758      	adds	r7, #88	; 0x58
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004032:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004034:	2210      	movs	r2, #16
 8004036:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800403a:	2201      	movs	r2, #1
 800403c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004040:	2200      	movs	r2, #0
 8004042:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004048:	4923      	ldr	r1, [pc, #140]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800404a:	4824      	ldr	r0, [pc, #144]	; (80040dc <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800404c:	f008 fb1b 	bl	800c686 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004050:	2001      	movs	r0, #1
 8004052:	f000 f92d 	bl	80042b0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004058:	2202      	movs	r2, #2
 800405a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800405c:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800405e:	2210      	movs	r2, #16
 8004060:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004064:	2201      	movs	r2, #1
 8004066:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800406a:	2200      	movs	r2, #0
 800406c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800406e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004072:	4919      	ldr	r1, [pc, #100]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004074:	4819      	ldr	r0, [pc, #100]	; (80040dc <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004076:	f008 fb06 	bl	800c686 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800407c:	2203      	movs	r2, #3
 800407e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004082:	2210      	movs	r2, #16
 8004084:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004088:	2208      	movs	r2, #8
 800408a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800408e:	2200      	movs	r2, #0
 8004090:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004096:	4910      	ldr	r1, [pc, #64]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004098:	4810      	ldr	r0, [pc, #64]	; (80040dc <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800409a:	f008 faf4 	bl	800c686 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800409e:	f44f 7308 	mov.w	r3, #544	; 0x220
 80040a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80040a6:	2204      	movs	r2, #4
 80040a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80040ac:	2210      	movs	r2, #16
 80040ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80040ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80040bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80040c2:	4806      	ldr	r0, [pc, #24]	; (80040dc <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80040c4:	f008 fadf 	bl	800c686 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4804      	ldr	r0, [pc, #16]	; (80040dc <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80040cc:	f008 fb06 	bl	800c6dc <HAL_SDRAM_ProgramRefreshRate>
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	2000022c 	.word	0x2000022c
 80040dc:	20000b90 	.word	0x20000b90

080040e0 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 80040e4:	20c8      	movs	r0, #200	; 0xc8
 80040e6:	f000 f8e3 	bl	80042b0 <HAL_Delay>

	TS_DisableIT();
 80040ea:	f000 f802 	bl	80040f2 <TS_DisableIT>

}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80040fc:	2300      	movs	r3, #0
 80040fe:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	4619      	mov	r1, r3
 8004104:	20a4      	movs	r0, #164	; 0xa4
 8004106:	f7ff fd37 	bl	8003b78 <TS_I2C_Write>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8004118:	f000 fc8a 	bl	8004a30 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800411c:	2301      	movs	r3, #1
 800411e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004120:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004124:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8004126:	231b      	movs	r3, #27
 8004128:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800412a:	2303      	movs	r3, #3
 800412c:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800413a:	2302      	movs	r3, #2
 800413c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800413e:	2300      	movs	r3, #0
 8004140:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004142:	2300      	movs	r3, #0
 8004144:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800414a:	463b      	mov	r3, r7
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fca7 	bl	8004aa0 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004152:	2301      	movs	r3, #1
 8004154:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004156:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800415a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800415c:	2317      	movs	r3, #23
 800415e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004160:	2303      	movs	r3, #3
 8004162:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8004170:	2303      	movs	r3, #3
 8004172:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004174:	2300      	movs	r3, #0
 8004176:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004178:	2300      	movs	r3, #0
 800417a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004180:	463b      	mov	r3, r7
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc8c 	bl	8004aa0 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004188:	2301      	movs	r3, #1
 800418a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 800418c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004190:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8004192:	2316      	movs	r3, #22
 8004194:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004196:	2303      	movs	r3, #3
 8004198:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800419e:	2301      	movs	r3, #1
 80041a0:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80041ae:	2300      	movs	r3, #0
 80041b0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80041b6:	463b      	mov	r3, r7
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fc71 	bl	8004aa0 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80041be:	2301      	movs	r3, #1
 80041c0:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 80041c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80041c6:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80041c8:	2312      	movs	r3, #18
 80041ca:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80041cc:	2303      	movs	r3, #3
 80041ce:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80041dc:	2301      	movs	r3, #1
 80041de:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80041e4:	2300      	movs	r3, #0
 80041e6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80041ec:	463b      	mov	r3, r7
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fc56 	bl	8004aa0 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80041f4:	2004      	movs	r0, #4
 80041f6:	f000 fc33 	bl	8004a60 <HAL_MPU_Enable>

}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800423c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004208:	480d      	ldr	r0, [pc, #52]	; (8004240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800420a:	490e      	ldr	r1, [pc, #56]	; (8004244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800420c:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800420e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004210:	e002      	b.n	8004218 <LoopCopyDataInit>

08004212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004216:	3304      	adds	r3, #4

08004218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800421c:	d3f9      	bcc.n	8004212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004220:	4c0b      	ldr	r4, [pc, #44]	; (8004250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004224:	e001      	b.n	800422a <LoopFillZerobss>

08004226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004228:	3204      	adds	r2, #4

0800422a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800422c:	d3fb      	bcc.n	8004226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800422e:	f7ff fc37 	bl	8003aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004232:	f00b ff11 	bl	8010058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004236:	f7fc ff1f 	bl	8001078 <main>
  bx  lr    
 800423a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800423c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004244:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004248:	08017cc0 	.word	0x08017cc0
  ldr r2, =_sbss
 800424c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004250:	20040fdc 	.word	0x20040fdc

08004254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004254:	e7fe      	b.n	8004254 <ADC_IRQHandler>

08004256 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425a:	2003      	movs	r0, #3
 800425c:	f000 fba5 	bl	80049aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004260:	2000      	movs	r0, #0
 8004262:	f7ff fa87 	bl	8003774 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004266:	f7fe fa6b 	bl	8002740 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_IncTick+0x20>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_IncTick+0x24>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4413      	add	r3, r2
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <HAL_IncTick+0x24>)
 8004282:	6013      	str	r3, [r2, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000014 	.word	0x20000014
 8004294:	2004085c 	.word	0x2004085c

08004298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return uwTick;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_GetTick+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2004085c 	.word	0x2004085c

080042b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b8:	f7ff ffee 	bl	8004298 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c8:	d005      	beq.n	80042d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_Delay+0x44>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042d6:	bf00      	nop
 80042d8:	f7ff ffde 	bl	8004298 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d8f7      	bhi.n	80042d8 <HAL_Delay+0x28>
  {
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000014 	.word	0x20000014

080042f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e031      	b.n	8004372 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fe fa3a 	bl	8002790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_ADC_Init+0x84>)
 800433c:	4013      	ands	r3, r2
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f964 	bl	8004614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	f043 0201 	orr.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
 8004362:	e001      	b.n	8004368 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	ffffeefd 	.word	0xffffeefd

08004380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e12a      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x272>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d93a      	bls.n	8004422 <HAL_ADC_ConfigChannel+0xa2>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b4:	d035      	beq.n	8004422 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	3b1e      	subs	r3, #30
 80043cc:	2207      	movs	r2, #7
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	400a      	ands	r2, r1
 80043da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a87      	ldr	r2, [pc, #540]	; (8004600 <HAL_ADC_ConfigChannel+0x280>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10a      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68d9      	ldr	r1, [r3, #12]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	061a      	lsls	r2, r3, #24
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043fa:	e035      	b.n	8004468 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	4618      	mov	r0, r3
 800440e:	4603      	mov	r3, r0
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4403      	add	r3, r0
 8004414:	3b1e      	subs	r3, #30
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004420:	e022      	b.n	8004468 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6919      	ldr	r1, [r3, #16]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	2207      	movs	r2, #7
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43da      	mvns	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	400a      	ands	r2, r1
 8004444:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6919      	ldr	r1, [r3, #16]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4618      	mov	r0, r3
 8004458:	4603      	mov	r3, r0
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4403      	add	r3, r0
 800445e:	409a      	lsls	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b06      	cmp	r3, #6
 800446e:	d824      	bhi.n	80044ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	3b05      	subs	r3, #5
 8004482:	221f      	movs	r2, #31
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43da      	mvns	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	400a      	ands	r2, r1
 8004490:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	3b05      	subs	r3, #5
 80044ac:	fa00 f203 	lsl.w	r2, r0, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34
 80044b8:	e04c      	b.n	8004554 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d824      	bhi.n	800450c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	3b23      	subs	r3, #35	; 0x23
 80044d4:	221f      	movs	r2, #31
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	400a      	ands	r2, r1
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b23      	subs	r3, #35	; 0x23
 80044fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
 800450a:	e023      	b.n	8004554 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	3b41      	subs	r3, #65	; 0x41
 800451e:	221f      	movs	r2, #31
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43da      	mvns	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	400a      	ands	r2, r1
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	4618      	mov	r0, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	3b41      	subs	r3, #65	; 0x41
 8004548:	fa00 f203 	lsl.w	r2, r0, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_ADC_ConfigChannel+0x284>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10a      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x1f4>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004566:	d105      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 800456e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004572:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a22      	ldr	r2, [pc, #136]	; (8004604 <HAL_ADC_ConfigChannel+0x284>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d109      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x212>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b12      	cmp	r3, #18
 8004584:	d105      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 800458c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004590:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_ADC_ConfigChannel+0x284>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d125      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x268>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_ADC_ConfigChannel+0x280>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x22e>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b11      	cmp	r3, #17
 80045ac:	d11c      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_ADC_ConfigChannel+0x288>)
 80045b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_ADC_ConfigChannel+0x280>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_ADC_ConfigChannel+0x28c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <HAL_ADC_ConfigChannel+0x290>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0c9a      	lsrs	r2, r3, #18
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80045da:	e002      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f9      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	10000012 	.word	0x10000012
 8004604:	40012000 	.word	0x40012000
 8004608:	40012300 	.word	0x40012300
 800460c:	20000000 	.word	0x20000000
 8004610:	431bde83 	.word	0x431bde83

08004614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800461c:	4b78      	ldr	r3, [pc, #480]	; (8004800 <ADC_Init+0x1ec>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a77      	ldr	r2, [pc, #476]	; (8004800 <ADC_Init+0x1ec>)
 8004622:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004626:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004628:	4b75      	ldr	r3, [pc, #468]	; (8004800 <ADC_Init+0x1ec>)
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4973      	ldr	r1, [pc, #460]	; (8004800 <ADC_Init+0x1ec>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	4a58      	ldr	r2, [pc, #352]	; (8004804 <ADC_Init+0x1f0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6899      	ldr	r1, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	e00f      	b.n	800470e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800470c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0202 	bic.w	r2, r2, #2
 800471c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6899      	ldr	r1, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	005a      	lsls	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800474a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800475a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	3b01      	subs	r3, #1
 8004768:	035a      	lsls	r2, r3, #13
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	e007      	b.n	8004784 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004782:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	3b01      	subs	r3, #1
 80047a0:	051a      	lsls	r2, r3, #20
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047c6:	025a      	lsls	r2, r3, #9
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	029a      	lsls	r2, r3, #10
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40012300 	.word	0x40012300
 8004804:	0f000001 	.word	0x0f000001

08004808 <__NVIC_SetPriorityGrouping>:
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	4313      	orrs	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	60d3      	str	r3, [r2, #12]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	05fa0000 	.word	0x05fa0000

08004850 <__NVIC_GetPriorityGrouping>:
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_EnableIRQ>:
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0b      	blt.n	8004896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <__NVIC_EnableIRQ+0x38>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000e100 	.word	0xe000e100

080048a8 <__NVIC_DisableIRQ>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db12      	blt.n	80048e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	490a      	ldr	r1, [pc, #40]	; (80048ec <__NVIC_DisableIRQ+0x44>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	3320      	adds	r3, #32
 80048d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048d4:	f3bf 8f4f 	dsb	sy
}
 80048d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048da:	f3bf 8f6f 	isb	sy
}
 80048de:	bf00      	nop
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100

080048f0 <__NVIC_SetPriority>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	6039      	str	r1, [r7, #0]
 80048fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004900:	2b00      	cmp	r3, #0
 8004902:	db0a      	blt.n	800491a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	490c      	ldr	r1, [pc, #48]	; (800493c <__NVIC_SetPriority+0x4c>)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	0112      	lsls	r2, r2, #4
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	440b      	add	r3, r1
 8004914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004918:	e00a      	b.n	8004930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	4908      	ldr	r1, [pc, #32]	; (8004940 <__NVIC_SetPriority+0x50>)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	3b04      	subs	r3, #4
 8004928:	0112      	lsls	r2, r2, #4
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	440b      	add	r3, r1
 800492e:	761a      	strb	r2, [r3, #24]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	e000e100 	.word	0xe000e100
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <NVIC_EncodePriority>:
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f1c3 0307 	rsb	r3, r3, #7
 800495e:	2b04      	cmp	r3, #4
 8004960:	bf28      	it	cs
 8004962:	2304      	movcs	r3, #4
 8004964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3304      	adds	r3, #4
 800496a:	2b06      	cmp	r3, #6
 800496c:	d902      	bls.n	8004974 <NVIC_EncodePriority+0x30>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3b03      	subs	r3, #3
 8004972:	e000      	b.n	8004976 <NVIC_EncodePriority+0x32>
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43da      	mvns	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	401a      	ands	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800498c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	43d9      	mvns	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800499c:	4313      	orrs	r3, r2
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff28 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d2:	f7ff ff3d 	bl	8004850 <__NVIC_GetPriorityGrouping>
 80049d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f7ff ffb1 	bl	8004944 <NVIC_EncodePriority>
 80049e2:	4602      	mov	r2, r0
 80049e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff80 	bl	80048f0 <__NVIC_SetPriority>
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff30 	bl	800486c <__NVIC_EnableIRQ>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff ff40 	bl	80048a8 <__NVIC_DisableIRQ>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004a34:	f3bf 8f5f 	dmb	sy
}
 8004a38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_MPU_Disable+0x28>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	4a06      	ldr	r2, [pc, #24]	; (8004a58 <HAL_MPU_Disable+0x28>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_MPU_Disable+0x2c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000ed00 	.word	0xe000ed00
 8004a5c:	e000ed90 	.word	0xe000ed90

08004a60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <HAL_MPU_Enable+0x38>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <HAL_MPU_Enable+0x3c>)
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <HAL_MPU_Enable+0x3c>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004a7e:	f3bf 8f4f 	dsb	sy
}
 8004a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a84:	f3bf 8f6f 	isb	sy
}
 8004a88:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed90 	.word	0xe000ed90
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	785a      	ldrb	r2, [r3, #1]
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_MPU_ConfigRegion+0x84>)
 8004aae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d029      	beq.n	8004b0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_MPU_ConfigRegion+0x84>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	7b1b      	ldrb	r3, [r3, #12]
 8004ac4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7adb      	ldrb	r3, [r3, #11]
 8004aca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004acc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	7a9b      	ldrb	r3, [r3, #10]
 8004ad2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ad4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7b5b      	ldrb	r3, [r3, #13]
 8004ada:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004adc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7b9b      	ldrb	r3, [r3, #14]
 8004ae2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004ae4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7bdb      	ldrb	r3, [r3, #15]
 8004aea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004aec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7a5b      	ldrb	r3, [r3, #9]
 8004af2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004af4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7a1b      	ldrb	r3, [r3, #8]
 8004afa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004afc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b04:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004b0a:	e005      	b.n	8004b18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_MPU_ConfigRegion+0x84>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_MPU_ConfigRegion+0x84>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	611a      	str	r2, [r3, #16]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed90 	.word	0xe000ed90

08004b28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e054      	b.n	8004be4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7f5b      	ldrb	r3, [r3, #29]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd fe7a 	bl	8002844 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	791b      	ldrb	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_CRC_Init+0xc4>)
 8004b64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0218 	bic.w	r2, r2, #24
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	e00c      	b.n	8004b92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6899      	ldr	r1, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f834 	bl	8004bf0 <HAL_CRCEx_Polynomial_Set>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e028      	b.n	8004be4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	795b      	ldrb	r3, [r3, #5]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba2:	611a      	str	r2, [r3, #16]
 8004ba4:	e004      	b.n	8004bb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6912      	ldr	r2, [r2, #16]
 8004bae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	04c11db7 	.word	0x04c11db7

08004bf0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c00:	231f      	movs	r3, #31
 8004c02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c04:	bf00      	nop
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	613a      	str	r2, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_CRCEx_Polynomial_Set+0x34>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_CRCEx_Polynomial_Set+0x16>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b18      	cmp	r3, #24
 8004c28:	d846      	bhi.n	8004cb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004cbf 	.word	0x08004cbf
 8004c34:	08004cb9 	.word	0x08004cb9
 8004c38:	08004cb9 	.word	0x08004cb9
 8004c3c:	08004cb9 	.word	0x08004cb9
 8004c40:	08004cb9 	.word	0x08004cb9
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004cb9 	.word	0x08004cb9
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004cb9 	.word	0x08004cb9
 8004c5c:	08004cb9 	.word	0x08004cb9
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004cb9 	.word	0x08004cb9
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004cb9 	.word	0x08004cb9
 8004c78:	08004cb9 	.word	0x08004cb9
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004cb9 	.word	0x08004cb9
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004c95 	.word	0x08004c95
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d913      	bls.n	8004cc2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c9e:	e010      	b.n	8004cc2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d90f      	bls.n	8004cc6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d90b      	bls.n	8004cca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cb6:	e008      	b.n	8004cca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbc:	e006      	b.n	8004ccc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e004      	b.n	8004ccc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cca:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 0118 	bic.w	r1, r3, #24
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e069      	b.n	8004de2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd fdb2 	bl	8002884 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6819      	ldr	r1, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_DCMI_Init+0xf0>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6819      	ldr	r1, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d5a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d66:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d72:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d8a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d112      	bne.n	8004dc2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7f1b      	ldrb	r3, [r3, #28]
 8004da0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7f5b      	ldrb	r3, [r3, #29]
 8004da6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004da8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	7f9b      	ldrb	r3, [r3, #30]
 8004dae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004db0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7fdb      	ldrb	r3, [r3, #31]
 8004db8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004dbe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004dc0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 021e 	orr.w	r2, r2, #30
 8004dd0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	ffe0f007 	.word	0xffe0f007

08004df0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	4a35      	ldr	r2, [pc, #212]	; (8004f00 <HAL_DCMI_IRQHandler+0x110>)
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f9ca 	bl	80051cc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01e      	beq.n	8004e80 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2202      	movs	r2, #2
 8004e48:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e62:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <HAL_DCMI_IRQHandler+0x110>)
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f9ae 	bl	80051cc <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f86a 	bl	8004f54 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f840 	bl	8004f18 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d006      	beq.n	8004eb0 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f83e 	bl	8004f2c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d107      	bne.n	8004ed8 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 021e 	bic.w	r2, r2, #30
 8004ed6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f825 	bl	8004f40 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	08004f55 	.word	0x08004f55

08004f04 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d009      	beq.n	8004f80 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ffbf 	bl	8004f04 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f9c:	f7ff f97c 	bl	8004298 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e099      	b.n	80050e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fcc:	e00f      	b.n	8004fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fce:	f7ff f963 	bl	8004298 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d908      	bls.n	8004fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e078      	b.n	80050e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e8      	bne.n	8004fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4b38      	ldr	r3, [pc, #224]	; (80050e8 <HAL_DMA_Init+0x158>)
 8005008:	4013      	ands	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800501a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2b04      	cmp	r3, #4
 8005046:	d107      	bne.n	8005058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	4313      	orrs	r3, r2
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0307 	bic.w	r3, r3, #7
 800506e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b04      	cmp	r3, #4
 8005080:	d117      	bne.n	80050b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00e      	beq.n	80050b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa7b 	bl	8005590 <DMA_CheckFifoParam>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2240      	movs	r2, #64	; 0x40
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050ae:	2301      	movs	r3, #1
 80050b0:	e016      	b.n	80050e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa32 	bl	8005524 <DMA_CalcBaseAndBitshift>
 80050c0:	4603      	mov	r3, r0
 80050c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	223f      	movs	r2, #63	; 0x3f
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	f010803f 	.word	0xf010803f

080050ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050fa:	f7ff f8cd 	bl	8004298 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d008      	beq.n	800511e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2280      	movs	r2, #128	; 0x80
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e052      	b.n	80051c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0216 	bic.w	r2, r2, #22
 800512c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800513c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_DMA_Abort+0x62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0208 	bic.w	r2, r2, #8
 800515c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800516e:	e013      	b.n	8005198 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005170:	f7ff f892 	bl	8004298 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b05      	cmp	r3, #5
 800517c:	d90c      	bls.n	8005198 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e015      	b.n	80051c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e4      	bne.n	8005170 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	223f      	movs	r2, #63	; 0x3f
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00c      	b.n	8005204 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2205      	movs	r2, #5
 80051ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800521c:	4b92      	ldr	r3, [pc, #584]	; (8005468 <HAL_DMA_IRQHandler+0x258>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a92      	ldr	r2, [pc, #584]	; (800546c <HAL_DMA_IRQHandler+0x25c>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	0a9b      	lsrs	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	2208      	movs	r2, #8
 800523c:	409a      	lsls	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01a      	beq.n	800527c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005268:	2208      	movs	r2, #8
 800526a:	409a      	lsls	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	f043 0201 	orr.w	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	2201      	movs	r2, #1
 8005282:	409a      	lsls	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529e:	2201      	movs	r2, #1
 80052a0:	409a      	lsls	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	2204      	movs	r2, #4
 80052b8:	409a      	lsls	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d012      	beq.n	80052e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	2204      	movs	r2, #4
 80052d6:	409a      	lsls	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f043 0204 	orr.w	r2, r3, #4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ec:	2210      	movs	r2, #16
 80052ee:	409a      	lsls	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d043      	beq.n	8005380 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03c      	beq.n	8005380 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	2210      	movs	r2, #16
 800530c:	409a      	lsls	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d018      	beq.n	8005352 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d024      	beq.n	8005380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
 800533e:	e01f      	b.n	8005380 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
 8005350:	e016      	b.n	8005380 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d107      	bne.n	8005370 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0208 	bic.w	r2, r2, #8
 800536e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	2220      	movs	r2, #32
 8005386:	409a      	lsls	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 808e 	beq.w	80054ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8086 	beq.w	80054ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	2220      	movs	r2, #32
 80053a8:	409a      	lsls	r2, r3
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d136      	bne.n	8005428 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0216 	bic.w	r2, r2, #22
 80053c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <HAL_DMA_IRQHandler+0x1da>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0208 	bic.w	r2, r2, #8
 80053f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	223f      	movs	r2, #63	; 0x3f
 8005400:	409a      	lsls	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	2b00      	cmp	r3, #0
 800541c:	d07d      	beq.n	800551a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
        }
        return;
 8005426:	e078      	b.n	800551a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01c      	beq.n	8005470 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	2b00      	cmp	r3, #0
 800544a:	d030      	beq.n	80054ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
 8005454:	e02b      	b.n	80054ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d027      	beq.n	80054ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
 8005466:	e022      	b.n	80054ae <HAL_DMA_IRQHandler+0x29e>
 8005468:	20000000 	.word	0x20000000
 800546c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0210 	bic.w	r2, r2, #16
 800548c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d032      	beq.n	800551c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2205      	movs	r2, #5
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	3301      	adds	r3, #1
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d307      	bcc.n	80054f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f2      	bne.n	80054da <HAL_DMA_IRQHandler+0x2ca>
 80054f4:	e000      	b.n	80054f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80054f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
 8005518:	e000      	b.n	800551c <HAL_DMA_IRQHandler+0x30c>
        return;
 800551a:	bf00      	nop
    }
  }
}
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop

08005524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	3b10      	subs	r3, #16
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <DMA_CalcBaseAndBitshift+0x60>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <DMA_CalcBaseAndBitshift+0x64>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d908      	bls.n	8005564 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <DMA_CalcBaseAndBitshift+0x68>)
 800555a:	4013      	ands	r3, r2
 800555c:	1d1a      	adds	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	659a      	str	r2, [r3, #88]	; 0x58
 8005562:	e006      	b.n	8005572 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <DMA_CalcBaseAndBitshift+0x68>)
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	aaaaaaab 	.word	0xaaaaaaab
 8005588:	080147cc 	.word	0x080147cc
 800558c:	fffffc00 	.word	0xfffffc00

08005590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11f      	bne.n	80055ea <DMA_CheckFifoParam+0x5a>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d856      	bhi.n	800565e <DMA_CheckFifoParam+0xce>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <DMA_CheckFifoParam+0x28>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055c9 	.word	0x080055c9
 80055c4:	0800565f 	.word	0x0800565f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d046      	beq.n	8005662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e043      	b.n	8005662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e2:	d140      	bne.n	8005666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e8:	e03d      	b.n	8005666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d121      	bne.n	8005638 <DMA_CheckFifoParam+0xa8>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d837      	bhi.n	800566a <DMA_CheckFifoParam+0xda>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <DMA_CheckFifoParam+0x70>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005611 	.word	0x08005611
 8005604:	08005617 	.word	0x08005617
 8005608:	08005611 	.word	0x08005611
 800560c:	08005629 	.word	0x08005629
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e030      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d025      	beq.n	800566e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005626:	e022      	b.n	800566e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005630:	d11f      	bne.n	8005672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005636:	e01c      	b.n	8005672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d903      	bls.n	8005646 <DMA_CheckFifoParam+0xb6>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d003      	beq.n	800564c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005644:	e018      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
      break;
 800564a:	e015      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      break;
 800565c:	e00b      	b.n	8005676 <DMA_CheckFifoParam+0xe6>
      break;
 800565e:	bf00      	nop
 8005660:	e00a      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;
 8005662:	bf00      	nop
 8005664:	e008      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;
 8005666:	bf00      	nop
 8005668:	e006      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;
 800566a:	bf00      	nop
 800566c:	e004      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;   
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <DMA_CheckFifoParam+0xe8>
      break;
 8005676:	bf00      	nop
    }
  } 
  
  return status; 
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e039      	b.n	800570e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd f9e2 	bl	8002a78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	f023 0107 	bic.w	r1, r3, #7
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_DMA2D_Init+0x90>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d1      	ldr	r1, [r2, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	ffffc000 	.word	0xffffc000

0800571c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d026      	beq.n	800578c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d021      	beq.n	800578c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005756:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2204      	movs	r2, #4
 8005770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d026      	beq.n	80057e4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d021      	beq.n	80057e4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ae:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2220      	movs	r2, #32
 80057b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	f043 0202 	orr.w	r2, r3, #2
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2204      	movs	r2, #4
 80057c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d026      	beq.n	800583c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d021      	beq.n	800583c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005806:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2208      	movs	r2, #8
 800580e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2204      	movs	r2, #4
 8005866:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f853 	bl	8005914 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d024      	beq.n	80058c2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01f      	beq.n	80058c2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005890:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2202      	movs	r2, #2
 8005898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01f      	beq.n	800590c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01a      	beq.n	800590c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f80e 	bl	8005928 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_DMA2D_ConfigLayer+0x20>
 8005958:	2302      	movs	r3, #2
 800595a:	e079      	b.n	8005a50 <HAL_DMA2D_ConfigLayer+0x114>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	3318      	adds	r3, #24
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005986:	4b35      	ldr	r3, [pc, #212]	; (8005a5c <HAL_DMA2D_ConfigLayer+0x120>)
 8005988:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b0a      	cmp	r3, #10
 8005990:	d003      	beq.n	800599a <HAL_DMA2D_ConfigLayer+0x5e>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b09      	cmp	r3, #9
 8005998:	d107      	bne.n	80059aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e005      	b.n	80059b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d120      	bne.n	80059fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	ea02 0103 	and.w	r1, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b0a      	cmp	r3, #10
 80059e4:	d003      	beq.n	80059ee <HAL_DMA2D_ConfigLayer+0xb2>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d127      	bne.n	8005a3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
 80059fc:	e01f      	b.n	8005a3e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	ea02 0103 	and.w	r1, r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b0a      	cmp	r3, #10
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA2D_ConfigLayer+0xf4>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b09      	cmp	r3, #9
 8005a2e:	d106      	bne.n	8005a3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a3c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	ff03000f 	.word	0xff03000f

08005a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e175      	b.n	8005d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a80:	2201      	movs	r2, #1
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 8164 	bne.w	8005d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d00b      	beq.n	8005abe <HAL_GPIO_Init+0x5e>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d007      	beq.n	8005abe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ab2:	2b11      	cmp	r3, #17
 8005ab4:	d003      	beq.n	8005abe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b12      	cmp	r3, #18
 8005abc:	d130      	bne.n	8005b20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	2203      	movs	r2, #3
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005af4:	2201      	movs	r2, #1
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4013      	ands	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 0201 	and.w	r2, r3, #1
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4013      	ands	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d003      	beq.n	8005b60 <HAL_GPIO_Init+0x100>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b12      	cmp	r3, #18
 8005b5e:	d123      	bne.n	8005ba8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	08da      	lsrs	r2, r3, #3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3208      	adds	r2, #8
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	220f      	movs	r2, #15
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	08da      	lsrs	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0203 	and.w	r2, r3, #3
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80be 	beq.w	8005d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bea:	4b66      	ldr	r3, [pc, #408]	; (8005d84 <HAL_GPIO_Init+0x324>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	4a65      	ldr	r2, [pc, #404]	; (8005d84 <HAL_GPIO_Init+0x324>)
 8005bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bf6:	4b63      	ldr	r3, [pc, #396]	; (8005d84 <HAL_GPIO_Init+0x324>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c02:	4a61      	ldr	r2, [pc, #388]	; (8005d88 <HAL_GPIO_Init+0x328>)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	3302      	adds	r3, #2
 8005c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	220f      	movs	r2, #15
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <HAL_GPIO_Init+0x32c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d037      	beq.n	8005c9e <HAL_GPIO_Init+0x23e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a57      	ldr	r2, [pc, #348]	; (8005d90 <HAL_GPIO_Init+0x330>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_GPIO_Init+0x23a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a56      	ldr	r2, [pc, #344]	; (8005d94 <HAL_GPIO_Init+0x334>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02b      	beq.n	8005c96 <HAL_GPIO_Init+0x236>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a55      	ldr	r2, [pc, #340]	; (8005d98 <HAL_GPIO_Init+0x338>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d025      	beq.n	8005c92 <HAL_GPIO_Init+0x232>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a54      	ldr	r2, [pc, #336]	; (8005d9c <HAL_GPIO_Init+0x33c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <HAL_GPIO_Init+0x22e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a53      	ldr	r2, [pc, #332]	; (8005da0 <HAL_GPIO_Init+0x340>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d019      	beq.n	8005c8a <HAL_GPIO_Init+0x22a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a52      	ldr	r2, [pc, #328]	; (8005da4 <HAL_GPIO_Init+0x344>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_GPIO_Init+0x226>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a51      	ldr	r2, [pc, #324]	; (8005da8 <HAL_GPIO_Init+0x348>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_GPIO_Init+0x222>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a50      	ldr	r2, [pc, #320]	; (8005dac <HAL_GPIO_Init+0x34c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <HAL_GPIO_Init+0x21e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a4f      	ldr	r2, [pc, #316]	; (8005db0 <HAL_GPIO_Init+0x350>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_GPIO_Init+0x21a>
 8005c76:	2309      	movs	r3, #9
 8005c78:	e012      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c7a:	230a      	movs	r3, #10
 8005c7c:	e010      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c7e:	2308      	movs	r3, #8
 8005c80:	e00e      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c82:	2307      	movs	r3, #7
 8005c84:	e00c      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c86:	2306      	movs	r3, #6
 8005c88:	e00a      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c8a:	2305      	movs	r3, #5
 8005c8c:	e008      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e006      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c92:	2303      	movs	r3, #3
 8005c94:	e004      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e002      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <HAL_GPIO_Init+0x240>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	f002 0203 	and.w	r2, r2, #3
 8005ca6:	0092      	lsls	r2, r2, #2
 8005ca8:	4093      	lsls	r3, r2
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cb0:	4935      	ldr	r1, [pc, #212]	; (8005d88 <HAL_GPIO_Init+0x328>)
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	089b      	lsrs	r3, r3, #2
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cbe:	4b3d      	ldr	r3, [pc, #244]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ce2:	4a34      	ldr	r2, [pc, #208]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ce8:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d0c:	4a29      	ldr	r2, [pc, #164]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d12:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d36:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <HAL_GPIO_Init+0x354>)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	f67f ae86 	bls.w	8005a80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3724      	adds	r7, #36	; 0x24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40020000 	.word	0x40020000
 8005d90:	40020400 	.word	0x40020400
 8005d94:	40020800 	.word	0x40020800
 8005d98:	40020c00 	.word	0x40020c00
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40021400 	.word	0x40021400
 8005da4:	40021800 	.word	0x40021800
 8005da8:	40021c00 	.word	0x40021c00
 8005dac:	40022000 	.word	0x40022000
 8005db0:	40022400 	.word	0x40022400
 8005db4:	40013c00 	.word	0x40013c00

08005db8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e0d9      	b.n	8005f88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	f040 80c9 	bne.w	8005f82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005df0:	4a6b      	ldr	r2, [pc, #428]	; (8005fa0 <HAL_GPIO_DeInit+0x1e8>)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	3302      	adds	r3, #2
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	220f      	movs	r2, #15
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a63      	ldr	r2, [pc, #396]	; (8005fa4 <HAL_GPIO_DeInit+0x1ec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d037      	beq.n	8005e8a <HAL_GPIO_DeInit+0xd2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a62      	ldr	r2, [pc, #392]	; (8005fa8 <HAL_GPIO_DeInit+0x1f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_GPIO_DeInit+0xce>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a61      	ldr	r2, [pc, #388]	; (8005fac <HAL_GPIO_DeInit+0x1f4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d02b      	beq.n	8005e82 <HAL_GPIO_DeInit+0xca>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a60      	ldr	r2, [pc, #384]	; (8005fb0 <HAL_GPIO_DeInit+0x1f8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d025      	beq.n	8005e7e <HAL_GPIO_DeInit+0xc6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a5f      	ldr	r2, [pc, #380]	; (8005fb4 <HAL_GPIO_DeInit+0x1fc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01f      	beq.n	8005e7a <HAL_GPIO_DeInit+0xc2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a5e      	ldr	r2, [pc, #376]	; (8005fb8 <HAL_GPIO_DeInit+0x200>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d019      	beq.n	8005e76 <HAL_GPIO_DeInit+0xbe>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a5d      	ldr	r2, [pc, #372]	; (8005fbc <HAL_GPIO_DeInit+0x204>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_GPIO_DeInit+0xba>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a5c      	ldr	r2, [pc, #368]	; (8005fc0 <HAL_GPIO_DeInit+0x208>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00d      	beq.n	8005e6e <HAL_GPIO_DeInit+0xb6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a5b      	ldr	r2, [pc, #364]	; (8005fc4 <HAL_GPIO_DeInit+0x20c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <HAL_GPIO_DeInit+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a5a      	ldr	r2, [pc, #360]	; (8005fc8 <HAL_GPIO_DeInit+0x210>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <HAL_GPIO_DeInit+0xae>
 8005e62:	2309      	movs	r3, #9
 8005e64:	e012      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e66:	230a      	movs	r3, #10
 8005e68:	e010      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	e00e      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e6e:	2307      	movs	r3, #7
 8005e70:	e00c      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e72:	2306      	movs	r3, #6
 8005e74:	e00a      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e76:	2305      	movs	r3, #5
 8005e78:	e008      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	e006      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e004      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e002      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_GPIO_DeInit+0xd4>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	f002 0203 	and.w	r2, r2, #3
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	4093      	lsls	r3, r2
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d132      	bne.n	8005f02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e9c:	4b4b      	ldr	r3, [pc, #300]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	4949      	ldr	r1, [pc, #292]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005eaa:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	4946      	ldr	r1, [pc, #280]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005eb8:	4b44      	ldr	r3, [pc, #272]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	4942      	ldr	r1, [pc, #264]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ec6:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	493f      	ldr	r1, [pc, #252]	; (8005fcc <HAL_GPIO_DeInit+0x214>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	220f      	movs	r2, #15
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <HAL_GPIO_DeInit+0x1e8>)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	3302      	adds	r3, #2
 8005eec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	482a      	ldr	r0, [pc, #168]	; (8005fa0 <HAL_GPIO_DeInit+0x1e8>)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	400a      	ands	r2, r1
 8005efc:	3302      	adds	r3, #2
 8005efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	2103      	movs	r1, #3
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	08da      	lsrs	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3208      	adds	r2, #8
 8005f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	220f      	movs	r2, #15
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	08d2      	lsrs	r2, r2, #3
 8005f38:	4019      	ands	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3208      	adds	r2, #8
 8005f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	2103      	movs	r1, #3
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	401a      	ands	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2103      	movs	r1, #3
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	401a      	ands	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	3301      	adds	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	f67f af22 	bls.w	8005dd4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40020000 	.word	0x40020000
 8005fa8:	40020400 	.word	0x40020400
 8005fac:	40020800 	.word	0x40020800
 8005fb0:	40020c00 	.word	0x40020c00
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40021400 	.word	0x40021400
 8005fbc:	40021800 	.word	0x40021800
 8005fc0:	40021c00 	.word	0x40021c00
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	40022400 	.word	0x40022400
 8005fcc:	40013c00 	.word	0x40013c00

08005fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	e001      	b.n	8005ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
 800600c:	4613      	mov	r3, r2
 800600e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006010:	787b      	ldrb	r3, [r7, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800601c:	e003      	b.n	8006026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	041a      	lsls	r2, r3, #16
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	619a      	str	r2, [r3, #24]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	041a      	lsls	r2, r3, #16
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	43d9      	mvns	r1, r3
 8006050:	887b      	ldrh	r3, [r7, #2]
 8006052:	400b      	ands	r3, r1
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	619a      	str	r2, [r3, #24]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d006      	beq.n	800608c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800607e:	4a05      	ldr	r2, [pc, #20]	; (8006094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f806 	bl	8006098 <HAL_GPIO_EXTI_Callback>
  }
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40013c00 	.word	0x40013c00

08006098 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f009 f869 	bl	800f19c <USB_GetMode>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 80ef 	bne.w	80062b0 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f009 f84d 	bl	800f176 <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80e5 	beq.w	80062ae <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f009 f844 	bl	800f176 <USB_ReadInterrupts>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f8:	d104      	bne.n	8006104 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006102:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f009 f834 	bl	800f176 <USB_ReadInterrupts>
 800610e:	4603      	mov	r3, r0
 8006110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006118:	d104      	bne.n	8006124 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006122:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f009 f824 	bl	800f176 <USB_ReadInterrupts>
 800612e:	4603      	mov	r3, r0
 8006130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006138:	d104      	bne.n	8006144 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006142:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f009 f814 	bl	800f176 <USB_ReadInterrupts>
 800614e:	4603      	mov	r3, r0
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d103      	bne.n	8006160 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2202      	movs	r2, #2
 800615e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f009 f806 	bl	800f176 <USB_ReadInterrupts>
 800616a:	4603      	mov	r3, r0
 800616c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006174:	d115      	bne.n	80061a2 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800617e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d108      	bne.n	80061a2 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f009 fed1 	bl	800ff38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2101      	movs	r1, #1
 800619c:	4618      	mov	r0, r3
 800619e:	f009 f80b 	bl	800f1b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f008 ffe5 	bl	800f176 <USB_ReadInterrupts>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b6:	d102      	bne.n	80061be <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 f98a 	bl	80074d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f008 ffd7 	bl	800f176 <USB_ReadInterrupts>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d106      	bne.n	80061e0 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f009 fe94 	bl	800ff00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2208      	movs	r2, #8
 80061de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f008 ffc6 	bl	800f176 <USB_ReadInterrupts>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d101      	bne.n	80061f8 <HAL_HCD_IRQHandler+0x14a>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_HCD_IRQHandler+0x14c>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d012      	beq.n	8006224 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0210 	bic.w	r2, r2, #16
 800620c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f88d 	bl	800732e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0210 	orr.w	r2, r2, #16
 8006222:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f008 ffa4 	bl	800f176 <USB_ReadInterrupts>
 800622e:	4603      	mov	r3, r0
 8006230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006238:	d13a      	bne.n	80062b0 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f008 fff4 	bl	800f22c <USB_HC_ReadInterrupt>
 8006244:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e025      	b.n	8006298 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d018      	beq.n	8006292 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006276:	d106      	bne.n	8006286 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f836 	bl	80062f0 <HCD_HC_IN_IRQHandler>
 8006284:	e005      	b.n	8006292 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fc51 	bl	8006b34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3301      	adds	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d3d4      	bcc.n	800624c <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062aa:	615a      	str	r2, [r3, #20]
 80062ac:	e000      	b.n	80062b0 <HAL_HCD_IRQHandler+0x202>
      return;
 80062ae:	bf00      	nop
    }
  }
}
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_HCD_Stop+0x16>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e00d      	b.n	80062e8 <HAL_HCD_Stop+0x32>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f009 f8d4 	bl	800f486 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b04      	cmp	r3, #4
 800631e:	d119      	bne.n	8006354 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	2304      	movs	r3, #4
 8006330:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	60d3      	str	r3, [r2, #12]
 8006352:	e101      	b.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636a:	d12b      	bne.n	80063c4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	461a      	mov	r2, r3
 800637a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800637e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	212c      	movs	r1, #44	; 0x2c
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	3361      	adds	r3, #97	; 0x61
 800638e:	2207      	movs	r2, #7
 8006390:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f008 ff46 	bl	800f24e <USB_HC_Halt>
 80063c2:	e0c9      	b.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d109      	bne.n	80063ee <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	461a      	mov	r2, r3
 80063e8:	2320      	movs	r3, #32
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	e0b4      	b.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b08      	cmp	r3, #8
 8006402:	d133      	bne.n	800646c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	440a      	add	r2, r1
 800641a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641e:	f043 0302 	orr.w	r3, r3, #2
 8006422:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	3361      	adds	r3, #97	; 0x61
 8006432:	2205      	movs	r2, #5
 8006434:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	461a      	mov	r2, r3
 8006444:	2310      	movs	r3, #16
 8006446:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	461a      	mov	r2, r3
 8006456:	2308      	movs	r3, #8
 8006458:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f008 fef2 	bl	800f24e <USB_HC_Halt>
 800646a:	e075      	b.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d134      	bne.n	80064ee <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	440a      	add	r2, r1
 800649a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649e:	f043 0302 	orr.w	r3, r3, #2
 80064a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	212c      	movs	r1, #44	; 0x2c
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	4413      	add	r3, r2
 80064b0:	3361      	adds	r3, #97	; 0x61
 80064b2:	2208      	movs	r2, #8
 80064b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	461a      	mov	r2, r3
 80064c4:	2310      	movs	r3, #16
 80064c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	461a      	mov	r2, r3
 80064d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f008 feb1 	bl	800f24e <USB_HC_Halt>
 80064ec:	e034      	b.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d129      	bne.n	8006558 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	440a      	add	r2, r1
 800651a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	212c      	movs	r1, #44	; 0x2c
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	3361      	adds	r3, #97	; 0x61
 8006532:	2206      	movs	r2, #6
 8006534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f008 fe84 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	461a      	mov	r2, r3
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656e:	d122      	bne.n	80065b6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	440a      	add	r2, r1
 8006586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f008 fe57 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ac:	461a      	mov	r2, r3
 80065ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80065b4:	e2ba      	b.n	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 811b 	bne.w	8006804 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d019      	beq.n	800660a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	212c      	movs	r1, #44	; 0x2c
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	3348      	adds	r3, #72	; 0x48
 80065e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	0159      	lsls	r1, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	440b      	add	r3, r1
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	202c      	movs	r0, #44	; 0x2c
 8006600:	fb00 f303 	mul.w	r3, r0, r3
 8006604:	440b      	add	r3, r1
 8006606:	3350      	adds	r3, #80	; 0x50
 8006608:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	212c      	movs	r1, #44	; 0x2c
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	4413      	add	r3, r2
 8006616:	3361      	adds	r3, #97	; 0x61
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	212c      	movs	r1, #44	; 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	335c      	adds	r3, #92	; 0x5c
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	461a      	mov	r2, r3
 800663c:	2301      	movs	r3, #1
 800663e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	212c      	movs	r1, #44	; 0x2c
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	333f      	adds	r3, #63	; 0x3f
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	212c      	movs	r1, #44	; 0x2c
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	333f      	adds	r3, #63	; 0x3f
 8006662:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006664:	2b02      	cmp	r3, #2
 8006666:	d121      	bne.n	80066ac <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f008 fddb 	bl	800f24e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a4:	461a      	mov	r2, r3
 80066a6:	2310      	movs	r3, #16
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	e066      	b.n	800677a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	212c      	movs	r1, #44	; 0x2c
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	333f      	adds	r3, #63	; 0x3f
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d127      	bne.n	8006710 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066de:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3360      	adds	r3, #96	; 0x60
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	b2d9      	uxtb	r1, r3
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	202c      	movs	r0, #44	; 0x2c
 80066fc:	fb00 f303 	mul.w	r3, r0, r3
 8006700:	4413      	add	r3, r2
 8006702:	3360      	adds	r3, #96	; 0x60
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f009 fc23 	bl	800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>
 800670e:	e034      	b.n	800677a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	212c      	movs	r1, #44	; 0x2c
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	333f      	adds	r3, #63	; 0x3f
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d12a      	bne.n	800677a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	212c      	movs	r1, #44	; 0x2c
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	3360      	adds	r3, #96	; 0x60
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	212c      	movs	r1, #44	; 0x2c
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	3354      	adds	r3, #84	; 0x54
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f083 0301 	eor.w	r3, r3, #1
 800674a:	b2d8      	uxtb	r0, r3
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	212c      	movs	r1, #44	; 0x2c
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	3354      	adds	r3, #84	; 0x54
 800675a:	4602      	mov	r2, r0
 800675c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	202c      	movs	r0, #44	; 0x2c
 8006768:	fb00 f303 	mul.w	r3, r0, r3
 800676c:	4413      	add	r3, r2
 800676e:	3360      	adds	r3, #96	; 0x60
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f009 fbed 	bl	800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d12b      	bne.n	80067da <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	212c      	movs	r1, #44	; 0x2c
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	3348      	adds	r3, #72	; 0x48
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	202c      	movs	r0, #44	; 0x2c
 8006798:	fb00 f202 	mul.w	r2, r0, r2
 800679c:	440a      	add	r2, r1
 800679e:	3240      	adds	r2, #64	; 0x40
 80067a0:	8812      	ldrh	r2, [r2, #0]
 80067a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 81be 	beq.w	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	212c      	movs	r1, #44	; 0x2c
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	3354      	adds	r3, #84	; 0x54
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f083 0301 	eor.w	r3, r3, #1
 80067c4:	b2d8      	uxtb	r0, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	212c      	movs	r1, #44	; 0x2c
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	3354      	adds	r3, #84	; 0x54
 80067d4:	4602      	mov	r2, r0
 80067d6:	701a      	strb	r2, [r3, #0]
}
 80067d8:	e1a8      	b.n	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	212c      	movs	r1, #44	; 0x2c
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	3354      	adds	r3, #84	; 0x54
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f083 0301 	eor.w	r3, r3, #1
 80067ee:	b2d8      	uxtb	r0, r3
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	212c      	movs	r1, #44	; 0x2c
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	3354      	adds	r3, #84	; 0x54
 80067fe:	4602      	mov	r2, r0
 8006800:	701a      	strb	r2, [r3, #0]
}
 8006802:	e193      	b.n	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	f040 8106 	bne.w	8006a28 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f023 0302 	bic.w	r3, r3, #2
 800683a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	212c      	movs	r1, #44	; 0x2c
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	4413      	add	r3, r2
 8006848:	3361      	adds	r3, #97	; 0x61
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d109      	bne.n	8006864 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	212c      	movs	r1, #44	; 0x2c
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	4413      	add	r3, r2
 800685c:	3360      	adds	r3, #96	; 0x60
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e0c9      	b.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	212c      	movs	r1, #44	; 0x2c
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	4413      	add	r3, r2
 8006870:	3361      	adds	r3, #97	; 0x61
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b05      	cmp	r3, #5
 8006876:	d109      	bne.n	800688c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	212c      	movs	r1, #44	; 0x2c
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	3360      	adds	r3, #96	; 0x60
 8006886:	2205      	movs	r2, #5
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e0b5      	b.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	212c      	movs	r1, #44	; 0x2c
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3361      	adds	r3, #97	; 0x61
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b06      	cmp	r3, #6
 800689e:	d009      	beq.n	80068b4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	212c      	movs	r1, #44	; 0x2c
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	3361      	adds	r3, #97	; 0x61
 80068ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d150      	bne.n	8006956 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	212c      	movs	r1, #44	; 0x2c
 80068ba:	fb01 f303 	mul.w	r3, r1, r3
 80068be:	4413      	add	r3, r2
 80068c0:	335c      	adds	r3, #92	; 0x5c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	202c      	movs	r0, #44	; 0x2c
 80068cc:	fb00 f303 	mul.w	r3, r0, r3
 80068d0:	440b      	add	r3, r1
 80068d2:	335c      	adds	r3, #92	; 0x5c
 80068d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	212c      	movs	r1, #44	; 0x2c
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	335c      	adds	r3, #92	; 0x5c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d912      	bls.n	8006910 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	212c      	movs	r1, #44	; 0x2c
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	335c      	adds	r3, #92	; 0x5c
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	212c      	movs	r1, #44	; 0x2c
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	3360      	adds	r3, #96	; 0x60
 800690a:	2204      	movs	r2, #4
 800690c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800690e:	e073      	b.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	212c      	movs	r1, #44	; 0x2c
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	3360      	adds	r3, #96	; 0x60
 800691e:	2202      	movs	r2, #2
 8006920:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006938:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006940:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4413      	add	r3, r2
 800694a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006954:	e050      	b.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	212c      	movs	r1, #44	; 0x2c
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	3361      	adds	r3, #97	; 0x61
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b03      	cmp	r3, #3
 8006968:	d122      	bne.n	80069b0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	212c      	movs	r1, #44	; 0x2c
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	4413      	add	r3, r2
 8006976:	3360      	adds	r3, #96	; 0x60
 8006978:	2202      	movs	r2, #2
 800697a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006992:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800699a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	461a      	mov	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	e023      	b.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3361      	adds	r3, #97	; 0x61
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	d119      	bne.n	80069f8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	212c      	movs	r1, #44	; 0x2c
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	335c      	adds	r3, #92	; 0x5c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	202c      	movs	r0, #44	; 0x2c
 80069dc:	fb00 f303 	mul.w	r3, r0, r3
 80069e0:	440b      	add	r3, r1
 80069e2:	335c      	adds	r3, #92	; 0x5c
 80069e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	212c      	movs	r1, #44	; 0x2c
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	3360      	adds	r3, #96	; 0x60
 80069f4:	2204      	movs	r2, #4
 80069f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	461a      	mov	r2, r3
 8006a06:	2302      	movs	r3, #2
 8006a08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	202c      	movs	r0, #44	; 0x2c
 8006a14:	fb00 f303 	mul.w	r3, r0, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	3360      	adds	r3, #96	; 0x60
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f009 fa97 	bl	800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006a26:	e081      	b.n	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d176      	bne.n	8006b2c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	212c      	movs	r1, #44	; 0x2c
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	333f      	adds	r3, #63	; 0x3f
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d121      	bne.n	8006a96 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	212c      	movs	r1, #44	; 0x2c
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	335c      	adds	r3, #92	; 0x5c
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7e:	f043 0302 	orr.w	r3, r3, #2
 8006a82:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f008 fbdd 	bl	800f24e <USB_HC_Halt>
 8006a94:	e041      	b.n	8006b1a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	212c      	movs	r1, #44	; 0x2c
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	333f      	adds	r3, #63	; 0x3f
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	212c      	movs	r1, #44	; 0x2c
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	333f      	adds	r3, #63	; 0x3f
 8006ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d12d      	bne.n	8006b1a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	212c      	movs	r1, #44	; 0x2c
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	4413      	add	r3, r2
 8006aca:	335c      	adds	r3, #92	; 0x5c
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d120      	bne.n	8006b1a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	212c      	movs	r1, #44	; 0x2c
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3361      	adds	r3, #97	; 0x61
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b04:	f043 0302 	orr.w	r3, r3, #2
 8006b08:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f008 fb9a 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	2310      	movs	r3, #16
 8006b2a:	6093      	str	r3, [r2, #8]
}
 8006b2c:	bf00      	nop
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d119      	bne.n	8006b98 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b70:	461a      	mov	r2, r3
 8006b72:	2304      	movs	r3, #4
 8006b74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006b96:	e3c6      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d13e      	bne.n	8006c2c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	212c      	movs	r1, #44	; 0x2c
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	333d      	adds	r3, #61	; 0x3d
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	f040 83a8 	bne.w	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	212c      	movs	r1, #44	; 0x2c
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	333d      	adds	r3, #61	; 0x3d
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	212c      	movs	r1, #44	; 0x2c
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3360      	adds	r3, #96	; 0x60
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f008 fb12 	bl	800f24e <USB_HC_Halt>
}
 8006c2a:	e37c      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c42:	d122      	bne.n	8006c8a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
 8006c62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f008 faed 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c80:	461a      	mov	r2, r3
 8006c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c86:	6093      	str	r3, [r2, #8]
}
 8006c88:	e34d      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d150      	bne.n	8006d42 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	212c      	movs	r1, #44	; 0x2c
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	4413      	add	r3, r2
 8006cac:	335c      	adds	r3, #92	; 0x5c
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d111      	bne.n	8006cec <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	212c      	movs	r1, #44	; 0x2c
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	333d      	adds	r3, #61	; 0x3d
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2340      	movs	r3, #64	; 0x40
 8006cea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f008 fa99 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	212c      	movs	r1, #44	; 0x2c
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	4413      	add	r3, r2
 8006d3a:	3361      	adds	r3, #97	; 0x61
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
}
 8006d40:	e2f1      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d13c      	bne.n	8006dd2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	212c      	movs	r1, #44	; 0x2c
 8006d5e:	fb01 f303 	mul.w	r3, r1, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	3361      	adds	r3, #97	; 0x61
 8006d66:	2204      	movs	r2, #4
 8006d68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	212c      	movs	r1, #44	; 0x2c
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	333d      	adds	r3, #61	; 0x3d
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	212c      	movs	r1, #44	; 0x2c
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	335c      	adds	r3, #92	; 0x5c
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f008 fa48 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	461a      	mov	r2, r3
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	6093      	str	r3, [r2, #8]
}
 8006dd0:	e2a9      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d12a      	bne.n	8006e3e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	461a      	mov	r2, r3
 8006df6:	2308      	movs	r3, #8
 8006df8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f008 fa12 	bl	800f24e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	212c      	movs	r1, #44	; 0x2c
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	3361      	adds	r3, #97	; 0x61
 8006e38:	2205      	movs	r2, #5
 8006e3a:	701a      	strb	r2, [r3, #0]
}
 8006e3c:	e273      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d150      	bne.n	8006ef6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	212c      	movs	r1, #44	; 0x2c
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	335c      	adds	r3, #92	; 0x5c
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	212c      	movs	r1, #44	; 0x2c
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	3361      	adds	r3, #97	; 0x61
 8006e74:	2203      	movs	r2, #3
 8006e76:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	212c      	movs	r1, #44	; 0x2c
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	333d      	adds	r3, #61	; 0x3d
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d112      	bne.n	8006eb2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	212c      	movs	r1, #44	; 0x2c
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	333c      	adds	r3, #60	; 0x3c
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d108      	bne.n	8006eb2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	212c      	movs	r1, #44	; 0x2c
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	4413      	add	r3, r2
 8006eac:	333d      	adds	r3, #61	; 0x3d
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ecc:	f043 0302 	orr.w	r3, r3, #2
 8006ed0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f008 f9b6 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	461a      	mov	r2, r3
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	6093      	str	r3, [r2, #8]
}
 8006ef4:	e217      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d174      	bne.n	8006ff6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d121      	bne.n	8006f58 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	212c      	movs	r1, #44	; 0x2c
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	3361      	adds	r3, #97	; 0x61
 8006f22:	2206      	movs	r2, #6
 8006f24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f40:	f043 0302 	orr.w	r3, r3, #2
 8006f44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f008 f97c 	bl	800f24e <USB_HC_Halt>
 8006f56:	e044      	b.n	8006fe2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	212c      	movs	r1, #44	; 0x2c
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	335c      	adds	r3, #92	; 0x5c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	202c      	movs	r0, #44	; 0x2c
 8006f70:	fb00 f303 	mul.w	r3, r0, r3
 8006f74:	440b      	add	r3, r1
 8006f76:	335c      	adds	r3, #92	; 0x5c
 8006f78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	212c      	movs	r1, #44	; 0x2c
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	335c      	adds	r3, #92	; 0x5c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d920      	bls.n	8006fd0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	212c      	movs	r1, #44	; 0x2c
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	4413      	add	r3, r2
 8006f9a:	335c      	adds	r3, #92	; 0x5c
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	212c      	movs	r1, #44	; 0x2c
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	3360      	adds	r3, #96	; 0x60
 8006fae:	2204      	movs	r2, #4
 8006fb0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	b2d9      	uxtb	r1, r3
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	202c      	movs	r0, #44	; 0x2c
 8006fbc:	fb00 f303 	mul.w	r3, r0, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3360      	adds	r3, #96	; 0x60
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f008 ffc3 	bl	800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006fce:	e008      	b.n	8006fe2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	212c      	movs	r1, #44	; 0x2c
 8006fd6:	fb01 f303 	mul.w	r3, r1, r3
 8006fda:	4413      	add	r3, r2
 8006fdc:	3360      	adds	r3, #96	; 0x60
 8006fde:	2202      	movs	r2, #2
 8006fe0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	6093      	str	r3, [r2, #8]
}
 8006ff4:	e197      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700c:	d134      	bne.n	8007078 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	440a      	add	r2, r1
 8007024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f008 f908 	bl	800f24e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	461a      	mov	r2, r3
 800704c:	2310      	movs	r3, #16
 800704e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	461a      	mov	r2, r3
 800705e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007062:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	212c      	movs	r1, #44	; 0x2c
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	4413      	add	r3, r2
 8007070:	3361      	adds	r3, #97	; 0x61
 8007072:	2208      	movs	r2, #8
 8007074:	701a      	strb	r2, [r3, #0]
}
 8007076:	e156      	b.n	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b02      	cmp	r3, #2
 800708c:	f040 814b 	bne.w	8007326 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070aa:	f023 0302 	bic.w	r3, r3, #2
 80070ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	212c      	movs	r1, #44	; 0x2c
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	3361      	adds	r3, #97	; 0x61
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d179      	bne.n	80071b8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	212c      	movs	r1, #44	; 0x2c
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3360      	adds	r3, #96	; 0x60
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	212c      	movs	r1, #44	; 0x2c
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	333f      	adds	r3, #63	; 0x3f
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d00a      	beq.n	8007100 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	212c      	movs	r1, #44	; 0x2c
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	333f      	adds	r3, #63	; 0x3f
 80070f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	f040 80fc 	bne.w	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d142      	bne.n	800718e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	212c      	movs	r1, #44	; 0x2c
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	334c      	adds	r3, #76	; 0x4c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80ed 	beq.w	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	212c      	movs	r1, #44	; 0x2c
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	4413      	add	r3, r2
 800712a:	334c      	adds	r3, #76	; 0x4c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	202c      	movs	r0, #44	; 0x2c
 8007134:	fb00 f202 	mul.w	r2, r0, r2
 8007138:	440a      	add	r2, r1
 800713a:	3240      	adds	r2, #64	; 0x40
 800713c:	8812      	ldrh	r2, [r2, #0]
 800713e:	4413      	add	r3, r2
 8007140:	3b01      	subs	r3, #1
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	202c      	movs	r0, #44	; 0x2c
 8007148:	fb00 f202 	mul.w	r2, r0, r2
 800714c:	440a      	add	r2, r1
 800714e:	3240      	adds	r2, #64	; 0x40
 8007150:	8812      	ldrh	r2, [r2, #0]
 8007152:	fbb3 f3f2 	udiv	r3, r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80ca 	beq.w	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	212c      	movs	r1, #44	; 0x2c
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	4413      	add	r3, r2
 8007170:	3355      	adds	r3, #85	; 0x55
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f083 0301 	eor.w	r3, r3, #1
 8007178:	b2d8      	uxtb	r0, r3
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	212c      	movs	r1, #44	; 0x2c
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	4413      	add	r3, r2
 8007186:	3355      	adds	r3, #85	; 0x55
 8007188:	4602      	mov	r2, r0
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	e0b4      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	212c      	movs	r1, #44	; 0x2c
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	3355      	adds	r3, #85	; 0x55
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	f083 0301 	eor.w	r3, r3, #1
 80071a2:	b2d8      	uxtb	r0, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	212c      	movs	r1, #44	; 0x2c
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	3355      	adds	r3, #85	; 0x55
 80071b2:	4602      	mov	r2, r0
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e09f      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	212c      	movs	r1, #44	; 0x2c
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	3361      	adds	r3, #97	; 0x61
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d109      	bne.n	80071e0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	212c      	movs	r1, #44	; 0x2c
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	4413      	add	r3, r2
 80071d8:	3360      	adds	r3, #96	; 0x60
 80071da:	2202      	movs	r2, #2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e08b      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	212c      	movs	r1, #44	; 0x2c
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	3361      	adds	r3, #97	; 0x61
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d109      	bne.n	8007208 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	212c      	movs	r1, #44	; 0x2c
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	3360      	adds	r3, #96	; 0x60
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e077      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	212c      	movs	r1, #44	; 0x2c
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	4413      	add	r3, r2
 8007214:	3361      	adds	r3, #97	; 0x61
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b05      	cmp	r3, #5
 800721a:	d109      	bne.n	8007230 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	212c      	movs	r1, #44	; 0x2c
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	4413      	add	r3, r2
 8007228:	3360      	adds	r3, #96	; 0x60
 800722a:	2205      	movs	r2, #5
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e063      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	212c      	movs	r1, #44	; 0x2c
 8007236:	fb01 f303 	mul.w	r3, r1, r3
 800723a:	4413      	add	r3, r2
 800723c:	3361      	adds	r3, #97	; 0x61
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b06      	cmp	r3, #6
 8007242:	d009      	beq.n	8007258 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	212c      	movs	r1, #44	; 0x2c
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	3361      	adds	r3, #97	; 0x61
 8007252:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007254:	2b08      	cmp	r3, #8
 8007256:	d14f      	bne.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	212c      	movs	r1, #44	; 0x2c
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	335c      	adds	r3, #92	; 0x5c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	202c      	movs	r0, #44	; 0x2c
 8007270:	fb00 f303 	mul.w	r3, r0, r3
 8007274:	440b      	add	r3, r1
 8007276:	335c      	adds	r3, #92	; 0x5c
 8007278:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	212c      	movs	r1, #44	; 0x2c
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	335c      	adds	r3, #92	; 0x5c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d912      	bls.n	80072b4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	212c      	movs	r1, #44	; 0x2c
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	4413      	add	r3, r2
 800729a:	335c      	adds	r3, #92	; 0x5c
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	212c      	movs	r1, #44	; 0x2c
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	3360      	adds	r3, #96	; 0x60
 80072ae:	2204      	movs	r2, #4
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e021      	b.n	80072f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	212c      	movs	r1, #44	; 0x2c
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	3360      	adds	r3, #96	; 0x60
 80072c2:	2202      	movs	r2, #2
 80072c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	461a      	mov	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007304:	461a      	mov	r2, r3
 8007306:	2302      	movs	r3, #2
 8007308:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	b2d9      	uxtb	r1, r3
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	202c      	movs	r0, #44	; 0x2c
 8007314:	fb00 f303 	mul.w	r3, r0, r3
 8007318:	4413      	add	r3, r2
 800731a:	3360      	adds	r3, #96	; 0x60
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f008 fe17 	bl	800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007326:	bf00      	nop
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b08a      	sub	sp, #40	; 0x28
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	0c5b      	lsrs	r3, r3, #17
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	091b      	lsrs	r3, r3, #4
 800735e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007362:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d004      	beq.n	8007374 <HCD_RXQLVL_IRQHandler+0x46>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b05      	cmp	r3, #5
 800736e:	f000 80a9 	beq.w	80074c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007372:	e0aa      	b.n	80074ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80a6 	beq.w	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	212c      	movs	r1, #44	; 0x2c
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	4413      	add	r3, r2
 8007388:	3344      	adds	r3, #68	; 0x44
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 809b 	beq.w	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	212c      	movs	r1, #44	; 0x2c
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	3350      	adds	r3, #80	; 0x50
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	441a      	add	r2, r3
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	202c      	movs	r0, #44	; 0x2c
 80073ac:	fb00 f303 	mul.w	r3, r0, r3
 80073b0:	440b      	add	r3, r1
 80073b2:	334c      	adds	r3, #76	; 0x4c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d87a      	bhi.n	80074b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	212c      	movs	r1, #44	; 0x2c
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	3344      	adds	r3, #68	; 0x44
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	b292      	uxth	r2, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	f007 fea6 	bl	800f124 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	212c      	movs	r1, #44	; 0x2c
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	3344      	adds	r3, #68	; 0x44
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	441a      	add	r2, r3
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	202c      	movs	r0, #44	; 0x2c
 80073f2:	fb00 f303 	mul.w	r3, r0, r3
 80073f6:	440b      	add	r3, r1
 80073f8:	3344      	adds	r3, #68	; 0x44
 80073fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	212c      	movs	r1, #44	; 0x2c
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	4413      	add	r3, r2
 8007408:	3350      	adds	r3, #80	; 0x50
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	441a      	add	r2, r3
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	202c      	movs	r0, #44	; 0x2c
 8007416:	fb00 f303 	mul.w	r3, r0, r3
 800741a:	440b      	add	r3, r1
 800741c:	3350      	adds	r3, #80	; 0x50
 800741e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	0cdb      	lsrs	r3, r3, #19
 8007430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007434:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	212c      	movs	r1, #44	; 0x2c
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	4413      	add	r3, r2
 8007442:	3340      	adds	r3, #64	; 0x40
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	4293      	cmp	r3, r2
 800744c:	d13c      	bne.n	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d039      	beq.n	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800746a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007472:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	212c      	movs	r1, #44	; 0x2c
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	4413      	add	r3, r2
 8007492:	3354      	adds	r3, #84	; 0x54
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f083 0301 	eor.w	r3, r3, #1
 800749a:	b2d8      	uxtb	r0, r3
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	212c      	movs	r1, #44	; 0x2c
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	3354      	adds	r3, #84	; 0x54
 80074aa:	4602      	mov	r2, r0
 80074ac:	701a      	strb	r2, [r3, #0]
      break;
 80074ae:	e00b      	b.n	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	212c      	movs	r1, #44	; 0x2c
 80074b6:	fb01 f303 	mul.w	r3, r1, r3
 80074ba:	4413      	add	r3, r2
 80074bc:	3360      	adds	r3, #96	; 0x60
 80074be:	2204      	movs	r2, #4
 80074c0:	701a      	strb	r2, [r3, #0]
      break;
 80074c2:	e001      	b.n	80074c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80074c8:	bf00      	nop
  }
}
 80074ca:	bf00      	nop
 80074cc:	3728      	adds	r7, #40	; 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b086      	sub	sp, #24
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d10b      	bne.n	8007522 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d102      	bne.n	800751a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f008 fd01 	bl	800ff1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f043 0302 	orr.w	r3, r3, #2
 8007520:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b08      	cmp	r3, #8
 800752a:	d132      	bne.n	8007592 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f043 0308 	orr.w	r3, r3, #8
 8007532:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b04      	cmp	r3, #4
 800753c:	d126      	bne.n	800758c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d113      	bne.n	800756e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800754c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007550:	d106      	bne.n	8007560 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2102      	movs	r1, #2
 8007558:	4618      	mov	r0, r3
 800755a:	f007 fe2d 	bl	800f1b8 <USB_InitFSLSPClkSel>
 800755e:	e011      	b.n	8007584 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2101      	movs	r1, #1
 8007566:	4618      	mov	r0, r3
 8007568:	f007 fe26 	bl	800f1b8 <USB_InitFSLSPClkSel>
 800756c:	e00a      	b.n	8007584 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d106      	bne.n	8007584 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757c:	461a      	mov	r2, r3
 800757e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007582:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f008 fcf3 	bl	800ff70 <HAL_HCD_PortEnabled_Callback>
 800758a:	e002      	b.n	8007592 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f008 fcfd 	bl	800ff8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d103      	bne.n	80075a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f043 0320 	orr.w	r3, r3, #32
 80075a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075aa:	461a      	mov	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6013      	str	r3, [r2, #0]
}
 80075b0:	bf00      	nop
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e07f      	b.n	80076ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fb fa70 	bl	8002ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	; 0x24
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d107      	bne.n	8007632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800762e:	609a      	str	r2, [r3, #8]
 8007630:	e006      	b.n	8007640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800763e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d104      	bne.n	8007652 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6859      	ldr	r1, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <HAL_I2C_Init+0x11c>)
 800765e:	430b      	orrs	r3, r1
 8007660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	ea42 0103 	orr.w	r1, r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69d9      	ldr	r1, [r3, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	02008000 	.word	0x02008000

080076d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e021      	b.n	800772e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2224      	movs	r2, #36	; 0x24
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fb fa56 	bl	8002bb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4603      	mov	r3, r0
 8007748:	817b      	strh	r3, [r7, #10]
 800774a:	460b      	mov	r3, r1
 800774c:	813b      	strh	r3, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b20      	cmp	r3, #32
 800775c:	f040 80f9 	bne.w	8007952 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_I2C_Mem_Write+0x34>
 8007766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0ed      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2C_Mem_Write+0x4e>
 8007782:	2302      	movs	r3, #2
 8007784:	e0e6      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800778e:	f7fc fd83 	bl	8004298 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2319      	movs	r3, #25
 800779a:	2201      	movs	r2, #1
 800779c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f955 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0d1      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2221      	movs	r2, #33	; 0x21
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a3a      	ldr	r2, [r7, #32]
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077d8:	88f8      	ldrh	r0, [r7, #6]
 80077da:	893a      	ldrh	r2, [r7, #8]
 80077dc:	8979      	ldrh	r1, [r7, #10]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4603      	mov	r3, r0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f8b9 	bl	8007960 <I2C_RequestMemoryWrite>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0a9      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2bff      	cmp	r3, #255	; 0xff
 8007808:	d90e      	bls.n	8007828 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	b2da      	uxtb	r2, r3
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	2300      	movs	r3, #0
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fa37 	bl	8007c94 <I2C_TransferConfig>
 8007826:	e00f      	b.n	8007848 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007836:	b2da      	uxtb	r2, r3
 8007838:	8979      	ldrh	r1, [r7, #10]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fa26 	bl	8007c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f93f 	bl	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e07b      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d034      	beq.n	8007900 <HAL_I2C_Mem_Write+0x1c8>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d130      	bne.n	8007900 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	; 0x80
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f8d1 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e04d      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2bff      	cmp	r3, #255	; 0xff
 80078c0:	d90e      	bls.n	80078e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	8979      	ldrh	r1, [r7, #10]
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f9db 	bl	8007c94 <I2C_TransferConfig>
 80078de:	e00f      	b.n	8007900 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	8979      	ldrh	r1, [r7, #10]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f9ca 	bl	8007c94 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d19e      	bne.n	8007848 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f91e 	bl	8007b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e01a      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2220      	movs	r2, #32
 8007924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6859      	ldr	r1, [r3, #4]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4b0a      	ldr	r3, [pc, #40]	; (800795c <HAL_I2C_Mem_Write+0x224>)
 8007932:	400b      	ands	r3, r1
 8007934:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	e000      	b.n	8007954 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007952:	2302      	movs	r3, #2
  }
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	fe00e800 	.word	0xfe00e800

08007960 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	4603      	mov	r3, r0
 8007970:	817b      	strh	r3, [r7, #10]
 8007972:	460b      	mov	r3, r1
 8007974:	813b      	strh	r3, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	8979      	ldrh	r1, [r7, #10]
 8007980:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <I2C_RequestMemoryWrite+0xa4>)
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f983 	bl	8007c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	69b9      	ldr	r1, [r7, #24]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f89c 	bl	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e02c      	b.n	80079fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d105      	bne.n	80079b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079a8:	893b      	ldrh	r3, [r7, #8]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	629a      	str	r2, [r3, #40]	; 0x28
 80079b2:	e015      	b.n	80079e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079b4:	893b      	ldrh	r3, [r7, #8]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f882 	bl	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e012      	b.n	80079fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079d6:	893b      	ldrh	r3, [r7, #8]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2180      	movs	r1, #128	; 0x80
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f830 	bl	8007a50 <I2C_WaitOnFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	80002000 	.word	0x80002000

08007a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d103      	bne.n	8007a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d007      	beq.n	8007a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	619a      	str	r2, [r3, #24]
  }
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a60:	e022      	b.n	8007aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a68:	d01e      	beq.n	8007aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fc fc15 	bl	8004298 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d113      	bne.n	8007aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a84:	f043 0220 	orr.w	r2, r3, #32
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e00f      	b.n	8007ac8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	461a      	mov	r2, r3
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d0cd      	beq.n	8007a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007adc:	e02c      	b.n	8007b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f870 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e02a      	b.n	8007b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af8:	d01e      	beq.n	8007b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fc fbcd 	bl	8004298 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d113      	bne.n	8007b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e007      	b.n	8007b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d1cb      	bne.n	8007ade <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b5c:	e028      	b.n	8007bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f830 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e026      	b.n	8007bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b72:	f7fc fb91 	bl	8004298 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d113      	bne.n	8007bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e007      	b.n	8007bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d1cf      	bne.n	8007b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b10      	cmp	r3, #16
 8007be0:	d151      	bne.n	8007c86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007be2:	e022      	b.n	8007c2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bea:	d01e      	beq.n	8007c2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bec:	f7fc fb54 	bl	8004298 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <I2C_IsAcknowledgeFailed+0x3a>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d113      	bne.n	8007c2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e02e      	b.n	8007c88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d1d5      	bne.n	8007be4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2210      	movs	r2, #16
 8007c3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2220      	movs	r2, #32
 8007c46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fedd 	bl	8007a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6859      	ldr	r1, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <I2C_IsAcknowledgeFailed+0xc8>)
 8007c5a:	400b      	ands	r3, r1
 8007c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	f043 0204 	orr.w	r2, r3, #4
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	fe00e800 	.word	0xfe00e800

08007c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607b      	str	r3, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	817b      	strh	r3, [r7, #10]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	0d5b      	lsrs	r3, r3, #21
 8007cb0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <I2C_TransferConfig+0x58>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	ea02 0103 	and.w	r1, r2, r3
 8007cbe:	897b      	ldrh	r3, [r7, #10]
 8007cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cc4:	7a7b      	ldrb	r3, [r7, #9]
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	03ff63ff 	.word	0x03ff63ff

08007cf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d138      	bne.n	8007d78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e032      	b.n	8007d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2224      	movs	r2, #36	; 0x24
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6819      	ldr	r1, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b085      	sub	sp, #20
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d139      	bne.n	8007e10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e033      	b.n	8007e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2224      	movs	r2, #36	; 0x24
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e000      	b.n	8007e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e10:	2302      	movs	r3, #2
  }
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e0bf      	b.n	8007fb2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fa fef0 	bl	8002c2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007e62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6999      	ldr	r1, [r3, #24]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6899      	ldr	r1, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <HAL_LTDC_Init+0x19c>)
 8007e94:	400b      	ands	r3, r1
 8007e96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6899      	ldr	r1, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68d9      	ldr	r1, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <HAL_LTDC_Init+0x19c>)
 8007ec2:	400b      	ands	r3, r1
 8007ec4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6919      	ldr	r1, [r3, #16]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b33      	ldr	r3, [pc, #204]	; (8007fbc <HAL_LTDC_Init+0x19c>)
 8007ef0:	400b      	ands	r3, r1
 8007ef2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6919      	ldr	r1, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6959      	ldr	r1, [r3, #20]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b27      	ldr	r3, [pc, #156]	; (8007fbc <HAL_LTDC_Init+0x19c>)
 8007f1e:	400b      	ands	r3, r1
 8007f20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6959      	ldr	r1, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0206 	orr.w	r2, r2, #6
 8007f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	f000f800 	.word	0xf000f800

08007fc0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007fc0:	b5b0      	push	{r4, r5, r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_LTDC_ConfigLayer+0x1a>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e02c      	b.n	8008034 <HAL_LTDC_ConfigLayer+0x74>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2134      	movs	r1, #52	; 0x34
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	461d      	mov	r5, r3
 8008000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800800a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 f847 	bl	80080a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bdb0      	pop	{r4, r5, r7, pc}

0800803c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <HAL_LTDC_SetAddress+0x1a>
 8008052:	2302      	movs	r3, #2
 8008054:	e024      	b.n	80080a0 <HAL_LTDC_SetAddress+0x64>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2234      	movs	r2, #52	; 0x34
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	3338      	adds	r3, #56	; 0x38
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6979      	ldr	r1, [r7, #20]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f811 	bl	80080a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2201      	movs	r2, #1
 800808c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080c4:	4413      	add	r3, r2
 80080c6:	041b      	lsls	r3, r3, #16
 80080c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	01db      	lsls	r3, r3, #7
 80080d4:	4413      	add	r3, r2
 80080d6:	3384      	adds	r3, #132	; 0x84
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	4611      	mov	r1, r2
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	01d2      	lsls	r2, r2, #7
 80080e4:	440a      	add	r2, r1
 80080e6:	3284      	adds	r2, #132	; 0x84
 80080e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80080ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	0c1b      	lsrs	r3, r3, #16
 80080fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fe:	4413      	add	r3, r2
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	01db      	lsls	r3, r3, #7
 800810c:	440b      	add	r3, r1
 800810e:	3384      	adds	r3, #132	; 0x84
 8008110:	4619      	mov	r1, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4313      	orrs	r3, r2
 8008116:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008126:	4413      	add	r3, r2
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	01db      	lsls	r3, r3, #7
 8008136:	4413      	add	r3, r2
 8008138:	3384      	adds	r3, #132	; 0x84
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	4611      	mov	r1, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	01d2      	lsls	r2, r2, #7
 8008146:	440a      	add	r2, r1
 8008148:	3284      	adds	r2, #132	; 0x84
 800814a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800814e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800815e:	4413      	add	r3, r2
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	01db      	lsls	r3, r3, #7
 800816c:	440b      	add	r3, r1
 800816e:	3384      	adds	r3, #132	; 0x84
 8008170:	4619      	mov	r1, r3
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4313      	orrs	r3, r2
 8008176:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	01db      	lsls	r3, r3, #7
 8008182:	4413      	add	r3, r2
 8008184:	3384      	adds	r3, #132	; 0x84
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	4611      	mov	r1, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	01d2      	lsls	r2, r2, #7
 8008192:	440a      	add	r2, r1
 8008194:	3284      	adds	r2, #132	; 0x84
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	01db      	lsls	r3, r3, #7
 80081a6:	4413      	add	r3, r2
 80081a8:	3384      	adds	r3, #132	; 0x84
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081c2:	041b      	lsls	r3, r3, #16
 80081c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	061b      	lsls	r3, r3, #24
 80081cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	01db      	lsls	r3, r3, #7
 80081d8:	4413      	add	r3, r2
 80081da:	3384      	adds	r3, #132	; 0x84
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	01db      	lsls	r3, r3, #7
 80081e8:	4413      	add	r3, r2
 80081ea:	3384      	adds	r3, #132	; 0x84
 80081ec:	461a      	mov	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081f8:	461a      	mov	r2, r3
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	431a      	orrs	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	431a      	orrs	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4619      	mov	r1, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	01db      	lsls	r3, r3, #7
 800820c:	440b      	add	r3, r1
 800820e:	3384      	adds	r3, #132	; 0x84
 8008210:	4619      	mov	r1, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	01db      	lsls	r3, r3, #7
 8008222:	4413      	add	r3, r2
 8008224:	3384      	adds	r3, #132	; 0x84
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	4611      	mov	r1, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	01d2      	lsls	r2, r2, #7
 8008232:	440a      	add	r2, r1
 8008234:	3284      	adds	r2, #132	; 0x84
 8008236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800823a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	01db      	lsls	r3, r3, #7
 8008246:	4413      	add	r3, r2
 8008248:	3384      	adds	r3, #132	; 0x84
 800824a:	461a      	mov	r2, r3
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	01db      	lsls	r3, r3, #7
 800825c:	4413      	add	r3, r2
 800825e:	3384      	adds	r3, #132	; 0x84
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	440b      	add	r3, r1
 800826e:	3384      	adds	r3, #132	; 0x84
 8008270:	4619      	mov	r1, r3
 8008272:	4b58      	ldr	r3, [pc, #352]	; (80083d4 <LTDC_SetConfig+0x32c>)
 8008274:	4013      	ands	r3, r2
 8008276:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	68f9      	ldr	r1, [r7, #12]
 8008282:	6809      	ldr	r1, [r1, #0]
 8008284:	4608      	mov	r0, r1
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	01c9      	lsls	r1, r1, #7
 800828a:	4401      	add	r1, r0
 800828c:	3184      	adds	r1, #132	; 0x84
 800828e:	4313      	orrs	r3, r2
 8008290:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	01db      	lsls	r3, r3, #7
 800829c:	4413      	add	r3, r2
 800829e:	3384      	adds	r3, #132	; 0x84
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	01db      	lsls	r3, r3, #7
 80082ac:	4413      	add	r3, r2
 80082ae:	3384      	adds	r3, #132	; 0x84
 80082b0:	461a      	mov	r2, r3
 80082b2:	2300      	movs	r3, #0
 80082b4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	01db      	lsls	r3, r3, #7
 80082c0:	4413      	add	r3, r2
 80082c2:	3384      	adds	r3, #132	; 0x84
 80082c4:	461a      	mov	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80082d4:	2304      	movs	r3, #4
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e01b      	b.n	8008312 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d102      	bne.n	80082e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80082e2:	2303      	movs	r3, #3
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e014      	b.n	8008312 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d00b      	beq.n	8008308 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d007      	beq.n	8008308 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d003      	beq.n	8008308 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008304:	2b07      	cmp	r3, #7
 8008306:	d102      	bne.n	800830e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008308:	2302      	movs	r3, #2
 800830a:	61fb      	str	r3, [r7, #28]
 800830c:	e001      	b.n	8008312 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	01db      	lsls	r3, r3, #7
 800831c:	4413      	add	r3, r2
 800831e:	3384      	adds	r3, #132	; 0x84
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	4611      	mov	r1, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	01d2      	lsls	r2, r2, #7
 800832c:	440a      	add	r2, r1
 800832e:	3284      	adds	r2, #132	; 0x84
 8008330:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008334:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	041a      	lsls	r2, r3, #16
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6859      	ldr	r1, [r3, #4]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	1acb      	subs	r3, r1, r3
 800834c:	69f9      	ldr	r1, [r7, #28]
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	3303      	adds	r3, #3
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	6809      	ldr	r1, [r1, #0]
 8008358:	4608      	mov	r0, r1
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	01c9      	lsls	r1, r1, #7
 800835e:	4401      	add	r1, r0
 8008360:	3184      	adds	r1, #132	; 0x84
 8008362:	4313      	orrs	r3, r2
 8008364:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	01db      	lsls	r3, r3, #7
 8008370:	4413      	add	r3, r2
 8008372:	3384      	adds	r3, #132	; 0x84
 8008374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4619      	mov	r1, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	01db      	lsls	r3, r3, #7
 8008380:	440b      	add	r3, r1
 8008382:	3384      	adds	r3, #132	; 0x84
 8008384:	4619      	mov	r1, r3
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <LTDC_SetConfig+0x330>)
 8008388:	4013      	ands	r3, r2
 800838a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	01db      	lsls	r3, r3, #7
 8008396:	4413      	add	r3, r2
 8008398:	3384      	adds	r3, #132	; 0x84
 800839a:	461a      	mov	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	01db      	lsls	r3, r3, #7
 80083ac:	4413      	add	r3, r2
 80083ae:	3384      	adds	r3, #132	; 0x84
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	4611      	mov	r1, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	01d2      	lsls	r2, r2, #7
 80083bc:	440a      	add	r2, r1
 80083be:	3284      	adds	r2, #132	; 0x84
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6013      	str	r3, [r2, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3724      	adds	r7, #36	; 0x24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	fffff8f8 	.word	0xfffff8f8
 80083d8:	fffff800 	.word	0xfffff800

080083dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40007000 	.word	0x40007000

080083fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008406:	4b23      	ldr	r3, [pc, #140]	; (8008494 <HAL_PWREx_EnableOverDrive+0x98>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	4a22      	ldr	r2, [pc, #136]	; (8008494 <HAL_PWREx_EnableOverDrive+0x98>)
 800840c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008410:	6413      	str	r3, [r2, #64]	; 0x40
 8008412:	4b20      	ldr	r3, [pc, #128]	; (8008494 <HAL_PWREx_EnableOverDrive+0x98>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800841e:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1d      	ldr	r2, [pc, #116]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008428:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800842a:	f7fb ff35 	bl	8004298 <HAL_GetTick>
 800842e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008430:	e009      	b.n	8008446 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008432:	f7fb ff31 	bl	8004298 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008440:	d901      	bls.n	8008446 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e022      	b.n	800848c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008446:	4b14      	ldr	r3, [pc, #80]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008452:	d1ee      	bne.n	8008432 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008454:	4b10      	ldr	r3, [pc, #64]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a0f      	ldr	r2, [pc, #60]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 800845a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800845e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008460:	f7fb ff1a 	bl	8004298 <HAL_GetTick>
 8008464:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008466:	e009      	b.n	800847c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008468:	f7fb ff16 	bl	8004298 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008476:	d901      	bls.n	800847c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e007      	b.n	800848c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <HAL_PWREx_EnableOverDrive+0x9c>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008488:	d1ee      	bne.n	8008468 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40023800 	.word	0x40023800
 8008498:	40007000 	.word	0x40007000

0800849c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80084a4:	f7fb fef8 	bl	8004298 <HAL_GetTick>
 80084a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e067      	b.n	8008584 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7fa fc6f 	bl	8002dac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80084ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fda8 	bl	8009028 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	021a      	lsls	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	2120      	movs	r1, #32
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fdd3 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008504:	4603      	mov	r3, r0
 8008506:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d135      	bne.n	800857a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <HAL_QSPI_Init+0xf0>)
 8008516:	4013      	ands	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6852      	ldr	r2, [r2, #4]
 800851c:	0611      	lsls	r1, r2, #24
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68d2      	ldr	r2, [r2, #12]
 8008522:	4311      	orrs	r1, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	69d2      	ldr	r2, [r2, #28]
 8008528:	4311      	orrs	r1, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6a12      	ldr	r2, [r2, #32]
 800852e:	4311      	orrs	r1, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	430b      	orrs	r3, r1
 8008536:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <HAL_QSPI_Init+0xf4>)
 8008540:	4013      	ands	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6912      	ldr	r2, [r2, #16]
 8008546:	0411      	lsls	r1, r2, #16
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6952      	ldr	r2, [r2, #20]
 800854c:	4311      	orrs	r1, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6992      	ldr	r2, [r2, #24]
 8008552:	4311      	orrs	r1, r2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	430b      	orrs	r3, r1
 800855a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008582:	7afb      	ldrb	r3, [r7, #11]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	00ffff2f 	.word	0x00ffff2f
 8008590:	ffe0f8fe 	.word	0xffe0f8fe

08008594 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d064      	beq.n	8008680 <HAL_QSPI_IRQHandler+0xec>
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05f      	beq.n	8008680 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3320      	adds	r3, #32
 80085c6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b12      	cmp	r3, #18
 80085d2:	d125      	bne.n	8008620 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80085d4:	e01c      	b.n	8008610 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00f      	beq.n	80085fe <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	1e5a      	subs	r2, r3, #1
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80085fc:	e008      	b.n	8008610 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800860c:	601a      	str	r2, [r3, #0]
          break;
 800860e:	e033      	b.n	8008678 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1db      	bne.n	80085d6 <HAL_QSPI_IRQHandler+0x42>
 800861e:	e02b      	b.n	8008678 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b22      	cmp	r3, #34	; 0x22
 800862a:	d125      	bne.n	8008678 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800862c:	e01d      	b.n	800866a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d010      	beq.n	8008658 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	7812      	ldrb	r2, [r2, #0]
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	1e5a      	subs	r2, r3, #1
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
 8008656:	e008      	b.n	800866a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008666:	601a      	str	r2, [r3, #0]
          break;
 8008668:	e006      	b.n	8008678 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1da      	bne.n	800862e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fbed 	bl	8008e58 <HAL_QSPI_FifoThresholdCallback>
 800867e:	e142      	b.n	8008906 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80b6 	beq.w	80087f8 <HAL_QSPI_IRQHandler+0x264>
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80b0 	beq.w	80087f8 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2202      	movs	r2, #2
 800869e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80086ae:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b12      	cmp	r3, #18
 80086ba:	d123      	bne.n	8008704 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0204 	bic.w	r2, r2, #4
 80086d8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc3e 	bl	8008f70 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fba1 	bl	8008e44 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008702:	e0fd      	b.n	8008900 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b22      	cmp	r3, #34	; 0x22
 800870e:	d146      	bne.n	800879e <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d012      	beq.n	8008744 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0204 	bic.w	r2, r2, #4
 800872c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	e021      	b.n	8008788 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3320      	adds	r3, #32
 800874a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800874c:	e013      	b.n	8008776 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d017      	beq.n	8008786 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	1e5a      	subs	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e4      	bne.n	800874e <HAL_QSPI_IRQHandler+0x1ba>
 8008784:	e000      	b.n	8008788 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8008786:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fbf1 	bl	8008f70 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fb4a 	bl	8008e30 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800879c:	e0b0      	b.n	8008900 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d107      	bne.n	80087ba <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fb32 	bl	8008e1c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80087b8:	e0a2      	b.n	8008900 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	f040 809c 	bne.w	8008900 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695a      	ldr	r2, [r3, #20]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80087d6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fb0d 	bl	8008e08 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80087ee:	e087      	b.n	8008900 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 faff 	bl	8008df4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80087f6:	e083      	b.n	8008900 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01f      	beq.n	8008842 <HAL_QSPI_IRQHandler+0x2ae>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01a      	beq.n	8008842 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2208      	movs	r2, #8
 8008812:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008830:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb16 	bl	8008e6c <HAL_QSPI_StatusMatchCallback>
 8008840:	e061      	b.n	8008906 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d047      	beq.n	80088dc <HAL_QSPI_IRQHandler+0x348>
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d042      	beq.n	80088dc <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2201      	movs	r2, #1
 800885c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800886c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d021      	beq.n	80088cc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0204 	bic.w	r2, r2, #4
 8008896:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <HAL_QSPI_IRQHandler+0x37c>)
 800889e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc fc91 	bl	80051cc <HAL_DMA_Abort_IT>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d029      	beq.n	8008904 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b4:	f043 0204 	orr.w	r2, r3, #4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa95 	bl	8008df4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80088ca:	e01b      	b.n	8008904 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fa8d 	bl	8008df4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80088da:	e013      	b.n	8008904 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00f      	beq.n	8008906 <HAL_QSPI_IRQHandler+0x372>
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2210      	movs	r2, #16
 80088f6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fac1 	bl	8008e80 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80088fe:	e002      	b.n	8008906 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008900:	bf00      	nop
 8008902:	e000      	b.n	8008906 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008904:	bf00      	nop
}
 8008906:	bf00      	nop
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08009045 	.word	0x08009045

08008914 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008920:	f7fb fcba 	bl	8004298 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b01      	cmp	r3, #1
 8008930:	d101      	bne.n	8008936 <HAL_QSPI_Command+0x22>
 8008932:	2302      	movs	r3, #2
 8008934:	e048      	b.n	80089c8 <HAL_QSPI_Command+0xb4>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d137      	bne.n	80089ba <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2200      	movs	r2, #0
 8008960:	2120      	movs	r1, #32
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 fba1 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008968:	4603      	mov	r3, r0
 800896a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d125      	bne.n	80089be <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008972:	2200      	movs	r2, #0
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fbce 	bl	8009118 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d115      	bne.n	80089b0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2201      	movs	r2, #1
 800898c:	2102      	movs	r1, #2
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fb8b 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10f      	bne.n	80089be <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2202      	movs	r2, #2
 80089a4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ae:	e006      	b.n	80089be <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b8:	e001      	b.n	80089be <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80089ba:	2302      	movs	r3, #2
 80089bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08a      	sub	sp, #40	; 0x28
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80089e0:	f7fb fc5a 	bl	8004298 <HAL_GetTick>
 80089e4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3320      	adds	r3, #32
 80089ec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_QSPI_Transmit+0x2e>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e07b      	b.n	8008af6 <HAL_QSPI_Transmit+0x126>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d16a      	bne.n	8008ae8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d05b      	beq.n	8008ad6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2212      	movs	r2, #18
 8008a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008a52:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8008a54:	e01b      	b.n	8008a8e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	2104      	movs	r1, #4
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fb22 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008a6a:	7ffb      	ldrb	r3, [r7, #31]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d113      	bne.n	8008a98 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	1e5a      	subs	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1df      	bne.n	8008a56 <HAL_QSPI_Transmit+0x86>
 8008a96:	e000      	b.n	8008a9a <HAL_QSPI_Transmit+0xca>
          break;
 8008a98:	bf00      	nop
      }

      if (status == HAL_OK)
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d115      	bne.n	8008acc <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	2102      	movs	r1, #2
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fafd 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8008ab4:	7ffb      	ldrb	r3, [r7, #31]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d108      	bne.n	8008acc <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 f9e6 	bl	8008e94 <HAL_QSPI_Abort>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ad4:	e00a      	b.n	8008aec <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ada:	f043 0208 	orr.w	r2, r3, #8
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	77fb      	strb	r3, [r7, #31]
 8008ae6:	e001      	b.n	8008aec <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b08a      	sub	sp, #40	; 0x28
 8008b02:	af02      	add	r7, sp, #8
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008b0e:	f7fb fbc3 	bl	8004298 <HAL_GetTick>
 8008b12:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3320      	adds	r3, #32
 8008b22:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_QSPI_Receive+0x36>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e082      	b.n	8008c3a <HAL_QSPI_Receive+0x13c>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d171      	bne.n	8008c2c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d062      	beq.n	8008c1a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2222      	movs	r2, #34	; 0x22
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008b8c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8008b96:	e01c      	b.n	8008bd2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	2106      	movs	r1, #6
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fa81 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008bac:	7ffb      	ldrb	r3, [r7, #31]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d114      	bne.n	8008bdc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	1e5a      	subs	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1de      	bne.n	8008b98 <HAL_QSPI_Receive+0x9a>
 8008bda:	e000      	b.n	8008bde <HAL_QSPI_Receive+0xe0>
          break;
 8008bdc:	bf00      	nop
      }

      if (status == HAL_OK)
 8008bde:	7ffb      	ldrb	r3, [r7, #31]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d115      	bne.n	8008c10 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2201      	movs	r2, #1
 8008bec:	2102      	movs	r1, #2
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fa5b 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8008bf8:	7ffb      	ldrb	r3, [r7, #31]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2202      	movs	r2, #2
 8008c04:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f944 	bl	8008e94 <HAL_QSPI_Abort>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c18:	e00a      	b.n	8008c30 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	f043 0208 	orr.w	r2, r3, #8
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	77fb      	strb	r3, [r7, #31]
 8008c2a:	e001      	b.n	8008c30 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af02      	add	r7, sp, #8
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008c50:	f7fb fb22 	bl	8004298 <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_QSPI_AutoPolling+0x24>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e060      	b.n	8008d28 <HAL_QSPI_AutoPolling+0xe6>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d14f      	bne.n	8008d1a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2242      	movs	r2, #66	; 0x42
 8008c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2120      	movs	r1, #32
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa09 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d13d      	bne.n	8008d1e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6852      	ldr	r2, [r2, #4]
 8008cb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6892      	ldr	r2, [r2, #8]
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008cd8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fa15 	bl	8009118 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	2108      	movs	r1, #8
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f9d6 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d18:	e001      	b.n	8008d1e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008d3c:	f7fb faac 	bl	8004298 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_QSPI_MemoryMapped+0x22>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e04c      	b.n	8008dec <HAL_QSPI_MemoryMapped+0xbc>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d13b      	bne.n	8008dde <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2282      	movs	r2, #130	; 0x82
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2120      	movs	r1, #32
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 f992 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d128      	bne.n	8008de2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f023 0108 	bic.w	r1, r3, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d110      	bne.n	8008dd0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2210      	movs	r2, #16
 8008dbe:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008dce:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008dd0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f99e 	bl	8009118 <QSPI_Config>
 8008ddc:	e001      	b.n	8008de2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008dde:	2302      	movs	r3, #2
 8008de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008ea0:	f7fb f9fa 	bl	8004298 <HAL_GetTick>
 8008ea4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d056      	beq.n	8008f64 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d017      	beq.n	8008efc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0204 	bic.w	r2, r2, #4
 8008eda:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fc f903 	bl	80050ec <HAL_DMA_Abort>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef4:	f043 0204 	orr.w	r2, r3, #4
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0202 	orr.w	r2, r2, #2
 8008f0a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2201      	movs	r2, #1
 8008f16:	2102      	movs	r1, #2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8c6 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10e      	bne.n	8008f46 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2120      	movs	r1, #32
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f8b4 	bl	80090aa <QSPI_WaitFlagStateUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008f5a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d046      	beq.n	800901a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2208      	movs	r2, #8
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008faa:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01b      	beq.n	8008ff2 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0204 	bic.w	r2, r2, #4
 8008fc8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <HAL_QSPI_Abort_IT+0xb4>)
 8008fd0:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fc f8f8 	bl	80051cc <HAL_DMA_Abort_IT>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01b      	beq.n	800901a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ff0c 	bl	8008e08 <HAL_QSPI_AbortCpltCallback>
 8008ff0:	e013      	b.n	800901a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009008:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0202 	orr.w	r2, r2, #2
 8009018:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	08009045 	.word	0x08009045

08009028 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b08      	cmp	r3, #8
 8009068:	d114      	bne.n	8009094 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2202      	movs	r2, #2
 8009070:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009080:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0202 	orr.w	r2, r2, #2
 8009090:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8009092:	e006      	b.n	80090a2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fea9 	bl	8008df4 <HAL_QSPI_ErrorCallback>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	603b      	str	r3, [r7, #0]
 80090b6:	4613      	mov	r3, r2
 80090b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80090ba:	e01a      	b.n	80090f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c2:	d016      	beq.n	80090f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c4:	f7fb f8e8 	bl	8004298 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d302      	bcc.n	80090da <QSPI_WaitFlagStateUntilTimeout+0x30>
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2204      	movs	r2, #4
 80090de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	f043 0201 	orr.w	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e00e      	b.n	8009110 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bf14      	ite	ne
 8009100:	2301      	movne	r3, #1
 8009102:	2300      	moveq	r3, #0
 8009104:	b2db      	uxtb	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	429a      	cmp	r2, r3
 800910c:	d1d6      	bne.n	80090bc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <QSPI_Config+0x28>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009132:	d005      	beq.n	8009140 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3a01      	subs	r2, #1
 800913e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 80b9 	beq.w	80092bc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d05f      	beq.n	8009212 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	6892      	ldr	r2, [r2, #8]
 800915a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d031      	beq.n	80091c8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916c:	431a      	orrs	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009172:	431a      	orrs	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	431a      	orrs	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	049b      	lsls	r3, r3, #18
 8009180:	431a      	orrs	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	431a      	orrs	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	431a      	orrs	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	431a      	orrs	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	431a      	orrs	r2, r3
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	431a      	orrs	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	ea42 0103 	orr.w	r1, r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091b8:	f000 812e 	beq.w	8009418 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	6852      	ldr	r2, [r2, #4]
 80091c4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80091c6:	e127      	b.n	8009418 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	431a      	orrs	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	431a      	orrs	r2, r3
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	049b      	lsls	r3, r3, #18
 80091e4:	431a      	orrs	r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	431a      	orrs	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	431a      	orrs	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	ea42 0103 	orr.w	r1, r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	430a      	orrs	r2, r1
 800920e:	615a      	str	r2, [r3, #20]
}
 8009210:	e102      	b.n	8009418 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d02e      	beq.n	8009278 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	431a      	orrs	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009228:	431a      	orrs	r2, r3
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	431a      	orrs	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	049b      	lsls	r3, r3, #18
 8009236:	431a      	orrs	r2, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	431a      	orrs	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	431a      	orrs	r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	431a      	orrs	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	431a      	orrs	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	ea42 0103 	orr.w	r1, r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	430a      	orrs	r2, r1
 8009260:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009268:	f000 80d6 	beq.w	8009418 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	6852      	ldr	r2, [r2, #4]
 8009274:	619a      	str	r2, [r3, #24]
}
 8009276:	e0cf      	b.n	8009418 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	431a      	orrs	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	431a      	orrs	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	431a      	orrs	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	049b      	lsls	r3, r3, #18
 8009294:	431a      	orrs	r2, r3
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	431a      	orrs	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	ea42 0103 	orr.w	r1, r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	615a      	str	r2, [r3, #20]
}
 80092ba:	e0ad      	b.n	8009418 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d058      	beq.n	8009376 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	6892      	ldr	r2, [r2, #8]
 80092cc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02d      	beq.n	8009332 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092de:	431a      	orrs	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e4:	431a      	orrs	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	431a      	orrs	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	049b      	lsls	r3, r3, #18
 80092f2:	431a      	orrs	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	431a      	orrs	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	431a      	orrs	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	431a      	orrs	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	ea42 0103 	orr.w	r1, r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	430a      	orrs	r2, r1
 800931c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009324:	d078      	beq.n	8009418 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	6852      	ldr	r2, [r2, #4]
 800932e:	619a      	str	r2, [r3, #24]
}
 8009330:	e072      	b.n	8009418 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	431a      	orrs	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	431a      	orrs	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	049b      	lsls	r3, r3, #18
 800934e:	431a      	orrs	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	431a      	orrs	r2, r3
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	431a      	orrs	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	431a      	orrs	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	ea42 0103 	orr.w	r1, r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	430a      	orrs	r2, r1
 8009372:	615a      	str	r2, [r3, #20]
}
 8009374:	e050      	b.n	8009418 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d02a      	beq.n	80093d4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	431a      	orrs	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938c:	431a      	orrs	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	431a      	orrs	r2, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	049b      	lsls	r3, r3, #18
 800939a:	431a      	orrs	r2, r3
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	431a      	orrs	r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	ea42 0103 	orr.w	r1, r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	430a      	orrs	r2, r1
 80093be:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80093c6:	d027      	beq.n	8009418 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	6852      	ldr	r2, [r2, #4]
 80093d0:	619a      	str	r2, [r3, #24]
}
 80093d2:	e021      	b.n	8009418 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01d      	beq.n	8009418 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	431a      	orrs	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	431a      	orrs	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	431a      	orrs	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	049b      	lsls	r3, r3, #18
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	431a      	orrs	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	431a      	orrs	r2, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	ea42 0103 	orr.w	r1, r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	430a      	orrs	r2, r1
 8009416:	615a      	str	r2, [r3, #20]
}
 8009418:	bf00      	nop
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800942c:	2300      	movs	r3, #0
 800942e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e291      	b.n	800995e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 8087 	beq.w	8009556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009448:	4b96      	ldr	r3, [pc, #600]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f003 030c 	and.w	r3, r3, #12
 8009450:	2b04      	cmp	r3, #4
 8009452:	d00c      	beq.n	800946e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009454:	4b93      	ldr	r3, [pc, #588]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f003 030c 	and.w	r3, r3, #12
 800945c:	2b08      	cmp	r3, #8
 800945e:	d112      	bne.n	8009486 <HAL_RCC_OscConfig+0x62>
 8009460:	4b90      	ldr	r3, [pc, #576]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800946c:	d10b      	bne.n	8009486 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800946e:	4b8d      	ldr	r3, [pc, #564]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d06c      	beq.n	8009554 <HAL_RCC_OscConfig+0x130>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d168      	bne.n	8009554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e26b      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800948e:	d106      	bne.n	800949e <HAL_RCC_OscConfig+0x7a>
 8009490:	4b84      	ldr	r3, [pc, #528]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a83      	ldr	r2, [pc, #524]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	e02e      	b.n	80094fc <HAL_RCC_OscConfig+0xd8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <HAL_RCC_OscConfig+0x9c>
 80094a6:	4b7f      	ldr	r3, [pc, #508]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a7e      	ldr	r2, [pc, #504]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	4b7c      	ldr	r3, [pc, #496]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a7b      	ldr	r2, [pc, #492]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	e01d      	b.n	80094fc <HAL_RCC_OscConfig+0xd8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094c8:	d10c      	bne.n	80094e4 <HAL_RCC_OscConfig+0xc0>
 80094ca:	4b76      	ldr	r3, [pc, #472]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a75      	ldr	r2, [pc, #468]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	4b73      	ldr	r3, [pc, #460]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a72      	ldr	r2, [pc, #456]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	e00b      	b.n	80094fc <HAL_RCC_OscConfig+0xd8>
 80094e4:	4b6f      	ldr	r3, [pc, #444]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a6e      	ldr	r2, [pc, #440]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	4b6c      	ldr	r3, [pc, #432]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a6b      	ldr	r2, [pc, #428]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80094f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d013      	beq.n	800952c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009504:	f7fa fec8 	bl	8004298 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800950a:	e008      	b.n	800951e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800950c:	f7fa fec4 	bl	8004298 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b64      	cmp	r3, #100	; 0x64
 8009518:	d901      	bls.n	800951e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e21f      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800951e:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0f0      	beq.n	800950c <HAL_RCC_OscConfig+0xe8>
 800952a:	e014      	b.n	8009556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800952c:	f7fa feb4 	bl	8004298 <HAL_GetTick>
 8009530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009532:	e008      	b.n	8009546 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009534:	f7fa feb0 	bl	8004298 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b64      	cmp	r3, #100	; 0x64
 8009540:	d901      	bls.n	8009546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e20b      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009546:	4b57      	ldr	r3, [pc, #348]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f0      	bne.n	8009534 <HAL_RCC_OscConfig+0x110>
 8009552:	e000      	b.n	8009556 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d069      	beq.n	8009636 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009562:	4b50      	ldr	r3, [pc, #320]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 030c 	and.w	r3, r3, #12
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800956e:	4b4d      	ldr	r3, [pc, #308]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f003 030c 	and.w	r3, r3, #12
 8009576:	2b08      	cmp	r3, #8
 8009578:	d11c      	bne.n	80095b4 <HAL_RCC_OscConfig+0x190>
 800957a:	4b4a      	ldr	r3, [pc, #296]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d116      	bne.n	80095b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009586:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d005      	beq.n	800959e <HAL_RCC_OscConfig+0x17a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d001      	beq.n	800959e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e1df      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800959e:	4b41      	ldr	r3, [pc, #260]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	493d      	ldr	r1, [pc, #244]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095b2:	e040      	b.n	8009636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d023      	beq.n	8009604 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095bc:	4b39      	ldr	r3, [pc, #228]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a38      	ldr	r2, [pc, #224]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095c2:	f043 0301 	orr.w	r3, r3, #1
 80095c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c8:	f7fa fe66 	bl	8004298 <HAL_GetTick>
 80095cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ce:	e008      	b.n	80095e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095d0:	f7fa fe62 	bl	8004298 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e1bd      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095e2:	4b30      	ldr	r3, [pc, #192]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f0      	beq.n	80095d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ee:	4b2d      	ldr	r3, [pc, #180]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4929      	ldr	r1, [pc, #164]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	600b      	str	r3, [r1, #0]
 8009602:	e018      	b.n	8009636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009604:	4b27      	ldr	r3, [pc, #156]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009610:	f7fa fe42 	bl	8004298 <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009616:	e008      	b.n	800962a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009618:	f7fa fe3e 	bl	8004298 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d901      	bls.n	800962a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e199      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800962a:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d038      	beq.n	80096b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d019      	beq.n	800967e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 800964c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964e:	4a15      	ldr	r2, [pc, #84]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009650:	f043 0301 	orr.w	r3, r3, #1
 8009654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009656:	f7fa fe1f 	bl	8004298 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800965c:	e008      	b.n	8009670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800965e:	f7fa fe1b 	bl	8004298 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	2b02      	cmp	r3, #2
 800966a:	d901      	bls.n	8009670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e176      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009670:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0f0      	beq.n	800965e <HAL_RCC_OscConfig+0x23a>
 800967c:	e01a      	b.n	80096b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009682:	4a08      	ldr	r2, [pc, #32]	; (80096a4 <HAL_RCC_OscConfig+0x280>)
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800968a:	f7fa fe05 	bl	8004298 <HAL_GetTick>
 800968e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009690:	e00a      	b.n	80096a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009692:	f7fa fe01 	bl	8004298 <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	2b02      	cmp	r3, #2
 800969e:	d903      	bls.n	80096a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e15c      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
 80096a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096a8:	4b91      	ldr	r3, [pc, #580]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80096aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1ee      	bne.n	8009692 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80a4 	beq.w	800980a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096c2:	4b8b      	ldr	r3, [pc, #556]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10d      	bne.n	80096ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ce:	4b88      	ldr	r3, [pc, #544]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	4a87      	ldr	r2, [pc, #540]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80096d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d8:	6413      	str	r3, [r2, #64]	; 0x40
 80096da:	4b85      	ldr	r3, [pc, #532]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096e2:	60bb      	str	r3, [r7, #8]
 80096e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096e6:	2301      	movs	r3, #1
 80096e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096ea:	4b82      	ldr	r3, [pc, #520]	; (80098f4 <HAL_RCC_OscConfig+0x4d0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d118      	bne.n	8009728 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80096f6:	4b7f      	ldr	r3, [pc, #508]	; (80098f4 <HAL_RCC_OscConfig+0x4d0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a7e      	ldr	r2, [pc, #504]	; (80098f4 <HAL_RCC_OscConfig+0x4d0>)
 80096fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009702:	f7fa fdc9 	bl	8004298 <HAL_GetTick>
 8009706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800970a:	f7fa fdc5 	bl	8004298 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b64      	cmp	r3, #100	; 0x64
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e120      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800971c:	4b75      	ldr	r3, [pc, #468]	; (80098f4 <HAL_RCC_OscConfig+0x4d0>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0f0      	beq.n	800970a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d106      	bne.n	800973e <HAL_RCC_OscConfig+0x31a>
 8009730:	4b6f      	ldr	r3, [pc, #444]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	4a6e      	ldr	r2, [pc, #440]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009736:	f043 0301 	orr.w	r3, r3, #1
 800973a:	6713      	str	r3, [r2, #112]	; 0x70
 800973c:	e02d      	b.n	800979a <HAL_RCC_OscConfig+0x376>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10c      	bne.n	8009760 <HAL_RCC_OscConfig+0x33c>
 8009746:	4b6a      	ldr	r3, [pc, #424]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974a:	4a69      	ldr	r2, [pc, #420]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	6713      	str	r3, [r2, #112]	; 0x70
 8009752:	4b67      	ldr	r3, [pc, #412]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	4a66      	ldr	r2, [pc, #408]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009758:	f023 0304 	bic.w	r3, r3, #4
 800975c:	6713      	str	r3, [r2, #112]	; 0x70
 800975e:	e01c      	b.n	800979a <HAL_RCC_OscConfig+0x376>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	2b05      	cmp	r3, #5
 8009766:	d10c      	bne.n	8009782 <HAL_RCC_OscConfig+0x35e>
 8009768:	4b61      	ldr	r3, [pc, #388]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800976a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976c:	4a60      	ldr	r2, [pc, #384]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800976e:	f043 0304 	orr.w	r3, r3, #4
 8009772:	6713      	str	r3, [r2, #112]	; 0x70
 8009774:	4b5e      	ldr	r3, [pc, #376]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009778:	4a5d      	ldr	r2, [pc, #372]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	6713      	str	r3, [r2, #112]	; 0x70
 8009780:	e00b      	b.n	800979a <HAL_RCC_OscConfig+0x376>
 8009782:	4b5b      	ldr	r3, [pc, #364]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009786:	4a5a      	ldr	r2, [pc, #360]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	6713      	str	r3, [r2, #112]	; 0x70
 800978e:	4b58      	ldr	r3, [pc, #352]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009792:	4a57      	ldr	r2, [pc, #348]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009794:	f023 0304 	bic.w	r3, r3, #4
 8009798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d015      	beq.n	80097ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097a2:	f7fa fd79 	bl	8004298 <HAL_GetTick>
 80097a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097a8:	e00a      	b.n	80097c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097aa:	f7fa fd75 	bl	8004298 <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d901      	bls.n	80097c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e0ce      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097c0:	4b4b      	ldr	r3, [pc, #300]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80097c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0ee      	beq.n	80097aa <HAL_RCC_OscConfig+0x386>
 80097cc:	e014      	b.n	80097f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ce:	f7fa fd63 	bl	8004298 <HAL_GetTick>
 80097d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097d4:	e00a      	b.n	80097ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097d6:	f7fa fd5f 	bl	8004298 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d901      	bls.n	80097ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e0b8      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097ec:	4b40      	ldr	r3, [pc, #256]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1ee      	bne.n	80097d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d105      	bne.n	800980a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097fe:	4b3c      	ldr	r3, [pc, #240]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	4a3b      	ldr	r2, [pc, #236]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80a4 	beq.w	800995c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009814:	4b36      	ldr	r3, [pc, #216]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b08      	cmp	r3, #8
 800981e:	d06b      	beq.n	80098f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b02      	cmp	r3, #2
 8009826:	d149      	bne.n	80098bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009828:	4b31      	ldr	r3, [pc, #196]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a30      	ldr	r2, [pc, #192]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800982e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009834:	f7fa fd30 	bl	8004298 <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800983c:	f7fa fd2c 	bl	8004298 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e087      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800984e:	4b28      	ldr	r3, [pc, #160]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f0      	bne.n	800983c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69da      	ldr	r2, [r3, #28]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	431a      	orrs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	019b      	lsls	r3, r3, #6
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	3b01      	subs	r3, #1
 8009874:	041b      	lsls	r3, r3, #16
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	4313      	orrs	r3, r2
 8009880:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 8009882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009886:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009888:	4b19      	ldr	r3, [pc, #100]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a18      	ldr	r2, [pc, #96]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 800988e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7fa fd00 	bl	8004298 <HAL_GetTick>
 8009898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800989c:	f7fa fcfc 	bl	8004298 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e057      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098ae:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f0      	beq.n	800989c <HAL_RCC_OscConfig+0x478>
 80098ba:	e04f      	b.n	800995c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0b      	ldr	r2, [pc, #44]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80098c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7fa fce6 	bl	8004298 <HAL_GetTick>
 80098cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098d0:	f7fa fce2 	bl	8004298 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e03d      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098e2:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <HAL_RCC_OscConfig+0x4cc>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f0      	bne.n	80098d0 <HAL_RCC_OscConfig+0x4ac>
 80098ee:	e035      	b.n	800995c <HAL_RCC_OscConfig+0x538>
 80098f0:	40023800 	.word	0x40023800
 80098f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80098f8:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <HAL_RCC_OscConfig+0x544>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d028      	beq.n	8009958 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009910:	429a      	cmp	r2, r3
 8009912:	d121      	bne.n	8009958 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800991e:	429a      	cmp	r2, r3
 8009920:	d11a      	bne.n	8009958 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009928:	4013      	ands	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800992e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009930:	4293      	cmp	r3, r2
 8009932:	d111      	bne.n	8009958 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993e:	085b      	lsrs	r3, r3, #1
 8009940:	3b01      	subs	r3, #1
 8009942:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009944:	429a      	cmp	r2, r3
 8009946:	d107      	bne.n	8009958 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009954:	429a      	cmp	r2, r3
 8009956:	d001      	beq.n	800995c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40023800 	.word	0x40023800

0800996c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e0d0      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009984:	4b6a      	ldr	r3, [pc, #424]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d910      	bls.n	80099b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009992:	4b67      	ldr	r3, [pc, #412]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f023 020f 	bic.w	r2, r3, #15
 800999a:	4965      	ldr	r1, [pc, #404]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	4313      	orrs	r3, r2
 80099a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099a2:	4b63      	ldr	r3, [pc, #396]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 030f 	and.w	r3, r3, #15
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d001      	beq.n	80099b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0b8      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d020      	beq.n	8009a02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099cc:	4b59      	ldr	r3, [pc, #356]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	4a58      	ldr	r2, [pc, #352]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80099d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099e4:	4b53      	ldr	r3, [pc, #332]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4a52      	ldr	r2, [pc, #328]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80099ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099f0:	4b50      	ldr	r3, [pc, #320]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	494d      	ldr	r1, [pc, #308]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d040      	beq.n	8009a90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d107      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a16:	4b47      	ldr	r3, [pc, #284]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d115      	bne.n	8009a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e07f      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d107      	bne.n	8009a3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a2e:	4b41      	ldr	r3, [pc, #260]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e073      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a3e:	4b3d      	ldr	r3, [pc, #244]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e06b      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a4e:	4b39      	ldr	r3, [pc, #228]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f023 0203 	bic.w	r2, r3, #3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4936      	ldr	r1, [pc, #216]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a60:	f7fa fc1a 	bl	8004298 <HAL_GetTick>
 8009a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a66:	e00a      	b.n	8009a7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a68:	f7fa fc16 	bl	8004298 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e053      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a7e:	4b2d      	ldr	r3, [pc, #180]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 020c 	and.w	r2, r3, #12
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d1eb      	bne.n	8009a68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a90:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d210      	bcs.n	8009ac0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f023 020f 	bic.w	r2, r3, #15
 8009aa6:	4922      	ldr	r1, [pc, #136]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aae:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <HAL_RCC_ClockConfig+0x1c4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 030f 	and.w	r3, r3, #15
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d001      	beq.n	8009ac0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e032      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d008      	beq.n	8009ade <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009acc:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	4916      	ldr	r1, [pc, #88]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0308 	and.w	r3, r3, #8
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d009      	beq.n	8009afe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009aea:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	490e      	ldr	r1, [pc, #56]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009afe:	f000 f821 	bl	8009b44 <HAL_RCC_GetSysClockFreq>
 8009b02:	4602      	mov	r2, r0
 8009b04:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <HAL_RCC_ClockConfig+0x1c8>)
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	091b      	lsrs	r3, r3, #4
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	490a      	ldr	r1, [pc, #40]	; (8009b38 <HAL_RCC_ClockConfig+0x1cc>)
 8009b10:	5ccb      	ldrb	r3, [r1, r3]
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	4a09      	ldr	r2, [pc, #36]	; (8009b3c <HAL_RCC_ClockConfig+0x1d0>)
 8009b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b1a:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <HAL_RCC_ClockConfig+0x1d4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f9 fe28 	bl	8003774 <HAL_InitTick>

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	40023c00 	.word	0x40023c00
 8009b34:	40023800 	.word	0x40023800
 8009b38:	08012cfc 	.word	0x08012cfc
 8009b3c:	20000000 	.word	0x20000000
 8009b40:	20000010 	.word	0x20000010

08009b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b44:	b5b0      	push	{r4, r5, r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6079      	str	r1, [r7, #4]
 8009b4e:	2100      	movs	r1, #0
 8009b50:	60f9      	str	r1, [r7, #12]
 8009b52:	2100      	movs	r1, #0
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009b56:	2100      	movs	r1, #0
 8009b58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b5a:	4952      	ldr	r1, [pc, #328]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b5c:	6889      	ldr	r1, [r1, #8]
 8009b5e:	f001 010c 	and.w	r1, r1, #12
 8009b62:	2908      	cmp	r1, #8
 8009b64:	d00d      	beq.n	8009b82 <HAL_RCC_GetSysClockFreq+0x3e>
 8009b66:	2908      	cmp	r1, #8
 8009b68:	f200 8094 	bhi.w	8009c94 <HAL_RCC_GetSysClockFreq+0x150>
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d002      	beq.n	8009b76 <HAL_RCC_GetSysClockFreq+0x32>
 8009b70:	2904      	cmp	r1, #4
 8009b72:	d003      	beq.n	8009b7c <HAL_RCC_GetSysClockFreq+0x38>
 8009b74:	e08e      	b.n	8009c94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b76:	4b4c      	ldr	r3, [pc, #304]	; (8009ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009b78:	60bb      	str	r3, [r7, #8]
      break;
 8009b7a:	e08e      	b.n	8009c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b7c:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <HAL_RCC_GetSysClockFreq+0x168>)
 8009b7e:	60bb      	str	r3, [r7, #8]
      break;
 8009b80:	e08b      	b.n	8009c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b82:	4948      	ldr	r1, [pc, #288]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b84:	6849      	ldr	r1, [r1, #4]
 8009b86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009b8a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009b8c:	4945      	ldr	r1, [pc, #276]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b8e:	6849      	ldr	r1, [r1, #4]
 8009b90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d024      	beq.n	8009be2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b98:	4942      	ldr	r1, [pc, #264]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b9a:	6849      	ldr	r1, [r1, #4]
 8009b9c:	0989      	lsrs	r1, r1, #6
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	f04f 0100 	mov.w	r1, #0
 8009ba4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009ba8:	f04f 0500 	mov.w	r5, #0
 8009bac:	ea00 0204 	and.w	r2, r0, r4
 8009bb0:	ea01 0305 	and.w	r3, r1, r5
 8009bb4:	493d      	ldr	r1, [pc, #244]	; (8009cac <HAL_RCC_GetSysClockFreq+0x168>)
 8009bb6:	fb01 f003 	mul.w	r0, r1, r3
 8009bba:	2100      	movs	r1, #0
 8009bbc:	fb01 f102 	mul.w	r1, r1, r2
 8009bc0:	1844      	adds	r4, r0, r1
 8009bc2:	493a      	ldr	r1, [pc, #232]	; (8009cac <HAL_RCC_GetSysClockFreq+0x168>)
 8009bc4:	fba2 0101 	umull	r0, r1, r2, r1
 8009bc8:	1863      	adds	r3, r4, r1
 8009bca:	4619      	mov	r1, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f04f 0300 	mov.w	r3, #0
 8009bd4:	f7f7 f808 	bl	8000be8 <__aeabi_uldivmod>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4613      	mov	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e04a      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009be2:	4b30      	ldr	r3, [pc, #192]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	099b      	lsrs	r3, r3, #6
 8009be8:	461a      	mov	r2, r3
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	ea02 0400 	and.w	r4, r2, r0
 8009bfa:	ea03 0501 	and.w	r5, r3, r1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	014b      	lsls	r3, r1, #5
 8009c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009c10:	0142      	lsls	r2, r0, #5
 8009c12:	4610      	mov	r0, r2
 8009c14:	4619      	mov	r1, r3
 8009c16:	1b00      	subs	r0, r0, r4
 8009c18:	eb61 0105 	sbc.w	r1, r1, r5
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	018b      	lsls	r3, r1, #6
 8009c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009c2a:	0182      	lsls	r2, r0, #6
 8009c2c:	1a12      	subs	r2, r2, r0
 8009c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f04f 0100 	mov.w	r1, #0
 8009c3a:	00d9      	lsls	r1, r3, #3
 8009c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c40:	00d0      	lsls	r0, r2, #3
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	1912      	adds	r2, r2, r4
 8009c48:	eb45 0303 	adc.w	r3, r5, r3
 8009c4c:	f04f 0000 	mov.w	r0, #0
 8009c50:	f04f 0100 	mov.w	r1, #0
 8009c54:	0299      	lsls	r1, r3, #10
 8009c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009c5a:	0290      	lsls	r0, r2, #10
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4610      	mov	r0, r2
 8009c62:	4619      	mov	r1, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	461a      	mov	r2, r3
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	f7f6 ffbc 	bl	8000be8 <__aeabi_uldivmod>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4613      	mov	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009c78:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	3301      	adds	r3, #1
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c90:	60bb      	str	r3, [r7, #8]
      break;
 8009c92:	e002      	b.n	8009c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8009c96:	60bb      	str	r3, [r7, #8]
      break;
 8009c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca4:	40023800 	.word	0x40023800
 8009ca8:	00f42400 	.word	0x00f42400
 8009cac:	017d7840 	.word	0x017d7840

08009cb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cb4:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000000 	.word	0x20000000

08009cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ccc:	f7ff fff0 	bl	8009cb0 <HAL_RCC_GetHCLKFreq>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	0a9b      	lsrs	r3, r3, #10
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	4903      	ldr	r1, [pc, #12]	; (8009cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cde:	5ccb      	ldrb	r3, [r1, r3]
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40023800 	.word	0x40023800
 8009cec:	08012d0c 	.word	0x08012d0c

08009cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009cf4:	f7ff ffdc 	bl	8009cb0 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	0b5b      	lsrs	r3, r3, #13
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4903      	ldr	r1, [pc, #12]	; (8009d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40023800 	.word	0x40023800
 8009d14:	08012d0c 	.word	0x08012d0c

08009d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	220f      	movs	r2, #15
 8009d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <HAL_RCC_GetClockConfig+0x5c>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f003 0203 	and.w	r2, r3, #3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <HAL_RCC_GetClockConfig+0x5c>)
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009d40:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <HAL_RCC_GetClockConfig+0x5c>)
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <HAL_RCC_GetClockConfig+0x5c>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	08db      	lsrs	r3, r3, #3
 8009d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <HAL_RCC_GetClockConfig+0x60>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 020f 	and.w	r2, r3, #15
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	601a      	str	r2, [r3, #0]
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40023800 	.word	0x40023800
 8009d78:	40023c00 	.word	0x40023c00

08009d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d012      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009da4:	4b69      	ldr	r3, [pc, #420]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	4a68      	ldr	r2, [pc, #416]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009daa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009dae:	6093      	str	r3, [r2, #8]
 8009db0:	4b66      	ldr	r3, [pc, #408]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db8:	4964      	ldr	r1, [pc, #400]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d017      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009dd6:	4b5d      	ldr	r3, [pc, #372]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de4:	4959      	ldr	r1, [pc, #356]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df4:	d101      	bne.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009df6:	2301      	movs	r3, #1
 8009df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d017      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009e12:	4b4e      	ldr	r3, [pc, #312]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e20:	494a      	ldr	r1, [pc, #296]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e30:	d101      	bne.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009e32:	2301      	movs	r3, #1
 8009e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 808b 	beq.w	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e60:	4b3a      	ldr	r3, [pc, #232]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	4a39      	ldr	r2, [pc, #228]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8009e6c:	4b37      	ldr	r3, [pc, #220]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e74:	60bb      	str	r3, [r7, #8]
 8009e76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e78:	4b35      	ldr	r3, [pc, #212]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a34      	ldr	r2, [pc, #208]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e84:	f7fa fa08 	bl	8004298 <HAL_GetTick>
 8009e88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e8c:	f7fa fa04 	bl	8004298 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b64      	cmp	r3, #100	; 0x64
 8009e98:	d901      	bls.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e357      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009e9e:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009eaa:	4b28      	ldr	r3, [pc, #160]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d035      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d02e      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ec8:	4b20      	ldr	r3, [pc, #128]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ed2:	4b1e      	ldr	r3, [pc, #120]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed6:	4a1d      	ldr	r2, [pc, #116]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009edc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009ede:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee2:	4a1a      	ldr	r2, [pc, #104]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009eea:	4a18      	ldr	r2, [pc, #96]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009ef0:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d114      	bne.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009efc:	f7fa f9cc 	bl	8004298 <HAL_GetTick>
 8009f00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f02:	e00a      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f04:	f7fa f9c8 	bl	8004298 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d901      	bls.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e319      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0ee      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f32:	d111      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009f34:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009f42:	400b      	ands	r3, r1
 8009f44:	4901      	ldr	r1, [pc, #4]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	608b      	str	r3, [r1, #8]
 8009f4a:	e00b      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009f4c:	40023800 	.word	0x40023800
 8009f50:	40007000 	.word	0x40007000
 8009f54:	0ffffcff 	.word	0x0ffffcff
 8009f58:	4bb1      	ldr	r3, [pc, #708]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	4ab0      	ldr	r2, [pc, #704]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f62:	6093      	str	r3, [r2, #8]
 8009f64:	4bae      	ldr	r3, [pc, #696]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f70:	49ab      	ldr	r1, [pc, #684]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d010      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f82:	4ba7      	ldr	r3, [pc, #668]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f88:	4aa5      	ldr	r2, [pc, #660]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009f92:	4ba3      	ldr	r3, [pc, #652]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	49a0      	ldr	r1, [pc, #640]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009fb0:	4b9b      	ldr	r3, [pc, #620]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fbe:	4998      	ldr	r1, [pc, #608]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fd2:	4b93      	ldr	r3, [pc, #588]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fe0:	498f      	ldr	r1, [pc, #572]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ff4:	4b8a      	ldr	r3, [pc, #552]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	4987      	ldr	r1, [pc, #540]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a004:	4313      	orrs	r3, r2
 800a006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a016:	4b82      	ldr	r3, [pc, #520]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	497e      	ldr	r1, [pc, #504]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a026:	4313      	orrs	r3, r2
 800a028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a038:	4b79      	ldr	r3, [pc, #484]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03e:	f023 0203 	bic.w	r2, r3, #3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a046:	4976      	ldr	r1, [pc, #472]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a05a:	4b71      	ldr	r3, [pc, #452]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a060:	f023 020c 	bic.w	r2, r3, #12
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a068:	496d      	ldr	r1, [pc, #436]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a07c:	4b68      	ldr	r3, [pc, #416]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a082:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08a:	4965      	ldr	r1, [pc, #404]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a09e:	4b60      	ldr	r3, [pc, #384]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	495c      	ldr	r1, [pc, #368]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a0c0:	4b57      	ldr	r3, [pc, #348]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ce:	4954      	ldr	r1, [pc, #336]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a0e2:	4b4f      	ldr	r3, [pc, #316]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f0:	494b      	ldr	r1, [pc, #300]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a104:	4b46      	ldr	r3, [pc, #280]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a112:	4943      	ldr	r1, [pc, #268]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a114:	4313      	orrs	r3, r2
 800a116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a126:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a134:	493a      	ldr	r1, [pc, #232]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a136:	4313      	orrs	r3, r2
 800a138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a148:	4b35      	ldr	r3, [pc, #212]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a156:	4932      	ldr	r1, [pc, #200]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d011      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a16a:	4b2d      	ldr	r3, [pc, #180]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a170:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a178:	4929      	ldr	r1, [pc, #164]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a188:	d101      	bne.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a18a:	2301      	movs	r3, #1
 800a18c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a19a:	2301      	movs	r3, #1
 800a19c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1b8:	4919      	ldr	r1, [pc, #100]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1dc:	4910      	ldr	r1, [pc, #64]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d006      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 80d9 	beq.w	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a08      	ldr	r2, [pc, #32]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a1fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a204:	f7fa f848 	bl	8004298 <HAL_GetTick>
 800a208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a20a:	e00b      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a20c:	f7fa f844 	bl	8004298 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	2b64      	cmp	r3, #100	; 0x64
 800a218:	d904      	bls.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e197      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a21e:	bf00      	nop
 800a220:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a224:	4b6c      	ldr	r3, [pc, #432]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1ed      	bne.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d021      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11d      	bne.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a244:	4b64      	ldr	r3, [pc, #400]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a24a:	0c1b      	lsrs	r3, r3, #16
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a252:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a258:	0e1b      	lsrs	r3, r3, #24
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	019a      	lsls	r2, r3, #6
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	431a      	orrs	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	061b      	lsls	r3, r3, #24
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	071b      	lsls	r3, r3, #28
 800a278:	4957      	ldr	r1, [pc, #348]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a294:	d00a      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d02e      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2aa:	d129      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a2ac:	4b4a      	ldr	r3, [pc, #296]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2b2:	0c1b      	lsrs	r3, r3, #16
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a2ba:	4b47      	ldr	r3, [pc, #284]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2c0:	0f1b      	lsrs	r3, r3, #28
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	019a      	lsls	r2, r3, #6
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	041b      	lsls	r3, r3, #16
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	061b      	lsls	r3, r3, #24
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	071b      	lsls	r3, r3, #28
 800a2e0:	493d      	ldr	r1, [pc, #244]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a2e8:	4b3b      	ldr	r3, [pc, #236]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ee:	f023 021f 	bic.w	r2, r3, #31
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4937      	ldr	r1, [pc, #220]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01d      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a30c:	4b32      	ldr	r3, [pc, #200]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a312:	0e1b      	lsrs	r3, r3, #24
 800a314:	f003 030f 	and.w	r3, r3, #15
 800a318:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a31a:	4b2f      	ldr	r3, [pc, #188]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a320:	0f1b      	lsrs	r3, r3, #28
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	019a      	lsls	r2, r3, #6
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	431a      	orrs	r2, r3
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	061b      	lsls	r3, r3, #24
 800a33a:	431a      	orrs	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	071b      	lsls	r3, r3, #28
 800a340:	4925      	ldr	r1, [pc, #148]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a342:	4313      	orrs	r3, r2
 800a344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d011      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	019a      	lsls	r2, r3, #6
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	041b      	lsls	r3, r3, #16
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	431a      	orrs	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	071b      	lsls	r3, r3, #28
 800a370:	4919      	ldr	r1, [pc, #100]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a378:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a37e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a384:	f7f9 ff88 	bl	8004298 <HAL_GetTick>
 800a388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a38a:	e008      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a38c:	f7f9 ff84 	bl	8004298 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b64      	cmp	r3, #100	; 0x64
 800a398:	d901      	bls.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e0d7      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a39e:	4b0e      	ldr	r3, [pc, #56]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0f0      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	f040 80cd 	bne.w	800a54c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a3b2:	4b09      	ldr	r3, [pc, #36]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a08      	ldr	r2, [pc, #32]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3be:	f7f9 ff6b 	bl	8004298 <HAL_GetTick>
 800a3c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3c4:	e00a      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a3c6:	f7f9 ff67 	bl	8004298 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b64      	cmp	r3, #100	; 0x64
 800a3d2:	d903      	bls.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e0ba      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a3d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a3dc:	4b5e      	ldr	r3, [pc, #376]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e8:	d0ed      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d009      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a406:	2b00      	cmp	r3, #0
 800a408:	d02e      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d12a      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a412:	4b51      	ldr	r3, [pc, #324]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a418:	0c1b      	lsrs	r3, r3, #16
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a420:	4b4d      	ldr	r3, [pc, #308]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	0f1b      	lsrs	r3, r3, #28
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	019a      	lsls	r2, r3, #6
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	061b      	lsls	r3, r3, #24
 800a440:	431a      	orrs	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	071b      	lsls	r3, r3, #28
 800a446:	4944      	ldr	r1, [pc, #272]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a44e:	4b42      	ldr	r3, [pc, #264]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a454:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45c:	3b01      	subs	r3, #1
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	493d      	ldr	r1, [pc, #244]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a462:	4313      	orrs	r3, r2
 800a464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d022      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a47c:	d11d      	bne.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a47e:	4b36      	ldr	r3, [pc, #216]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a484:	0e1b      	lsrs	r3, r3, #24
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a48c:	4b32      	ldr	r3, [pc, #200]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a492:	0f1b      	lsrs	r3, r3, #28
 800a494:	f003 0307 	and.w	r3, r3, #7
 800a498:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	019a      	lsls	r2, r3, #6
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	041b      	lsls	r3, r3, #16
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	061b      	lsls	r3, r3, #24
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	071b      	lsls	r3, r3, #28
 800a4b2:	4929      	ldr	r1, [pc, #164]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d028      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a4c6:	4b24      	ldr	r3, [pc, #144]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4cc:	0e1b      	lsrs	r3, r3, #24
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a4d4:	4b20      	ldr	r3, [pc, #128]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	0c1b      	lsrs	r3, r3, #16
 800a4dc:	f003 0303 	and.w	r3, r3, #3
 800a4e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	019a      	lsls	r2, r3, #6
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	041b      	lsls	r3, r3, #16
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	061b      	lsls	r3, r3, #24
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	071b      	lsls	r3, r3, #28
 800a4fa:	4917      	ldr	r1, [pc, #92]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4911      	ldr	r1, [pc, #68]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a512:	4313      	orrs	r3, r2
 800a514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a51e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a524:	f7f9 feb8 	bl	8004298 <HAL_GetTick>
 800a528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a52a:	e008      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a52c:	f7f9 feb4 	bl	8004298 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b64      	cmp	r3, #100	; 0x64
 800a538:	d901      	bls.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e007      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a53e:	4b06      	ldr	r3, [pc, #24]	; (800a558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a54a:	d1ef      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	40023800 	.word	0x40023800

0800a55c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a57a:	f040 808c 	bne.w	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a57e:	4b95      	ldr	r3, [pc, #596]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a584:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a58c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a594:	d07c      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a59c:	d87d      	bhi.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5aa:	d039      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a5ac:	e075      	b.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a5ae:	4b89      	ldr	r3, [pc, #548]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d108      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a5ba:	4b86      	ldr	r3, [pc, #536]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5c2:	4a85      	ldr	r2, [pc, #532]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c8:	613b      	str	r3, [r7, #16]
 800a5ca:	e007      	b.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a5cc:	4b81      	ldr	r3, [pc, #516]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d4:	4a81      	ldr	r2, [pc, #516]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5da:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a5dc:	4b7d      	ldr	r3, [pc, #500]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	0e1b      	lsrs	r3, r3, #24
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a5ea:	4b7a      	ldr	r3, [pc, #488]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f0:	099b      	lsrs	r3, r3, #6
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	fb02 f203 	mul.w	r2, r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a602:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a604:	4b73      	ldr	r3, [pc, #460]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	3301      	adds	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	617b      	str	r3, [r7, #20]
        break;
 800a61e:	e03d      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a620:	4b6c      	ldr	r3, [pc, #432]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d108      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a62c:	4b69      	ldr	r3, [pc, #420]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a634:	4a68      	ldr	r2, [pc, #416]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a636:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63a:	613b      	str	r3, [r7, #16]
 800a63c:	e007      	b.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a63e:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a646:	4a65      	ldr	r2, [pc, #404]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a64e:	4b61      	ldr	r3, [pc, #388]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a654:	0e1b      	lsrs	r3, r3, #24
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a65c:	4b5d      	ldr	r3, [pc, #372]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a662:	099b      	lsrs	r3, r3, #6
 800a664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	fb02 f203 	mul.w	r2, r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	fbb2 f3f3 	udiv	r3, r2, r3
 800a674:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a676:	4b57      	ldr	r3, [pc, #348]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	3301      	adds	r3, #1
 800a682:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68c:	617b      	str	r3, [r7, #20]
        break;
 800a68e:	e005      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a690:	4b53      	ldr	r3, [pc, #332]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a692:	617b      	str	r3, [r7, #20]
        break;
 800a694:	e002      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800a696:	bf00      	nop
 800a698:	e000      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800a69a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6a2:	f040 808c 	bne.w	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a6a6:	4b4b      	ldr	r3, [pc, #300]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a6b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6bc:	d07c      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6c4:	d87d      	bhi.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6d2:	d039      	beq.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a6d4:	e075      	b.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a6d6:	4b3f      	ldr	r3, [pc, #252]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d108      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a6e2:	4b3c      	ldr	r3, [pc, #240]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ea:	4a3b      	ldr	r2, [pc, #236]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	e007      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a6f4:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6fc:	4a37      	ldr	r2, [pc, #220]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a702:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a704:	4b33      	ldr	r3, [pc, #204]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	0e1b      	lsrs	r3, r3, #24
 800a70c:	f003 030f 	and.w	r3, r3, #15
 800a710:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a712:	4b30      	ldr	r3, [pc, #192]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a718:	099b      	lsrs	r3, r3, #6
 800a71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	fb02 f203 	mul.w	r2, r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a72c:	4b29      	ldr	r3, [pc, #164]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a732:	0a1b      	lsrs	r3, r3, #8
 800a734:	f003 031f 	and.w	r3, r3, #31
 800a738:	3301      	adds	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	fbb2 f3f3 	udiv	r3, r2, r3
 800a744:	617b      	str	r3, [r7, #20]
        break;
 800a746:	e03d      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a748:	4b22      	ldr	r3, [pc, #136]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a754:	4b1f      	ldr	r3, [pc, #124]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a75c:	4a1e      	ldr	r2, [pc, #120]	; (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	e007      	b.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a766:	4b1b      	ldr	r3, [pc, #108]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a76e:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a776:	4b17      	ldr	r3, [pc, #92]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a77c:	0e1b      	lsrs	r3, r3, #24
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a784:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78a:	099b      	lsrs	r3, r3, #6
 800a78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	fb02 f203 	mul.w	r2, r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a79e:	4b0d      	ldr	r3, [pc, #52]	; (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7a4:	f003 031f 	and.w	r3, r3, #31
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b4:	617b      	str	r3, [r7, #20]
        break;
 800a7b6:	e005      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a7ba:	617b      	str	r3, [r7, #20]
        break;
 800a7bc:	e002      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800a7c2:	bf00      	nop

  return frequency;
 800a7c4:	697b      	ldr	r3, [r7, #20]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40023800 	.word	0x40023800
 800a7d8:	00f42400 	.word	0x00f42400
 800a7dc:	017d7840 	.word	0x017d7840
 800a7e0:	00bb8000 	.word	0x00bb8000

0800a7e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e081      	b.n	800a8fa <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7f5b      	ldrb	r3, [r3, #29]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d105      	bne.n	800a80c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7f8 fb68 	bl	8002edc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	22ca      	movs	r2, #202	; 0xca
 800a818:	625a      	str	r2, [r3, #36]	; 0x24
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2253      	movs	r2, #83	; 0x53
 800a820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fb16 	bl	800ae54 <RTC_EnterInitMode>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	22ff      	movs	r2, #255	; 0xff
 800a834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e05c      	b.n	800a8fa <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6899      	ldr	r1, [r3, #8]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	4b2e      	ldr	r3, [pc, #184]	; (800a904 <HAL_RTC_Init+0x120>)
 800a84c:	400b      	ands	r3, r1
 800a84e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6899      	ldr	r1, [r3, #8]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	431a      	orrs	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	68d2      	ldr	r2, [r2, #12]
 800a876:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6919      	ldr	r1, [r3, #16]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	041a      	lsls	r2, r3, #16
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	430a      	orrs	r2, r1
 800a88a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a89a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10e      	bne.n	800a8c8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 faaa 	bl	800ae04 <HAL_RTC_WaitForSynchro>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d008      	beq.n	800a8c8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	22ff      	movs	r2, #255	; 0xff
 800a8bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2204      	movs	r2, #4
 800a8c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e018      	b.n	800a8fa <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0208 	bic.w	r2, r2, #8
 800a8d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	22ff      	movs	r2, #255	; 0xff
 800a8f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
  }
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	ff8fffbf 	.word	0xff8fffbf

0800a908 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a908:	b590      	push	{r4, r7, lr}
 800a90a:	b087      	sub	sp, #28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	7f1b      	ldrb	r3, [r3, #28]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_RTC_SetTime+0x1c>
 800a920:	2302      	movs	r3, #2
 800a922:	e0a8      	b.n	800aa76 <HAL_RTC_SetTime+0x16e>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2202      	movs	r2, #2
 800a92e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d126      	bne.n	800a984 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2200      	movs	r2, #0
 800a948:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 faac 	bl	800aeac <RTC_ByteToBcd2>
 800a954:	4603      	mov	r3, r0
 800a956:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	785b      	ldrb	r3, [r3, #1]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 faa5 	bl	800aeac <RTC_ByteToBcd2>
 800a962:	4603      	mov	r3, r0
 800a964:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a966:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	789b      	ldrb	r3, [r3, #2]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 fa9d 	bl	800aeac <RTC_ByteToBcd2>
 800a972:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a974:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	7b1b      	ldrb	r3, [r3, #12]
 800a97c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a97e:	4313      	orrs	r3, r2
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	e018      	b.n	800a9b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d102      	bne.n	800a998 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a9a4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a9aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	7b1b      	ldrb	r3, [r3, #12]
 800a9b0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	22ca      	movs	r2, #202	; 0xca
 800a9bc:	625a      	str	r2, [r3, #36]	; 0x24
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2253      	movs	r2, #83	; 0x53
 800a9c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 fa44 	bl	800ae54 <RTC_EnterInitMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00b      	beq.n	800a9ea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	22ff      	movs	r2, #255	; 0xff
 800a9d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e045      	b.n	800aa76 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	6979      	ldr	r1, [r7, #20]
 800a9f0:	4b23      	ldr	r3, [pc, #140]	; (800aa80 <HAL_RTC_SetTime+0x178>)
 800a9f2:	400b      	ands	r3, r1
 800a9f4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa04:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6899      	ldr	r1, [r3, #8]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	691a      	ldr	r2, [r3, #16]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	431a      	orrs	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa2c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d111      	bne.n	800aa60 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f9e1 	bl	800ae04 <HAL_RTC_WaitForSynchro>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	22ff      	movs	r2, #255	; 0xff
 800aa4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2204      	movs	r2, #4
 800aa54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e00a      	b.n	800aa76 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	22ff      	movs	r2, #255	; 0xff
 800aa66:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800aa74:	2300      	movs	r3, #0
  }
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd90      	pop	{r4, r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	007f7f7f 	.word	0x007f7f7f

0800aa84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aa84:	b590      	push	{r4, r7, lr}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	7f1b      	ldrb	r3, [r3, #28]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_RTC_SetDate+0x1c>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e092      	b.n	800abc6 <HAL_RTC_SetDate+0x142>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10e      	bne.n	800aad0 <HAL_RTC_SetDate+0x4c>
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	f003 0310 	and.w	r3, r3, #16
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d008      	beq.n	800aad0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	f023 0310 	bic.w	r3, r3, #16
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	330a      	adds	r3, #10
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d11c      	bne.n	800ab10 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	78db      	ldrb	r3, [r3, #3]
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 f9e6 	bl	800aeac <RTC_ByteToBcd2>
 800aae0:	4603      	mov	r3, r0
 800aae2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f9df 	bl	800aeac <RTC_ByteToBcd2>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aaf2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	789b      	ldrb	r3, [r3, #2]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f9d7 	bl	800aeac <RTC_ByteToBcd2>
 800aafe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ab00:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e00e      	b.n	800ab2e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	78db      	ldrb	r3, [r3, #3]
 800ab14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ab1c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ab22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	22ca      	movs	r2, #202	; 0xca
 800ab34:	625a      	str	r2, [r3, #36]	; 0x24
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2253      	movs	r2, #83	; 0x53
 800ab3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f988 	bl	800ae54 <RTC_EnterInitMode>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00b      	beq.n	800ab62 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	22ff      	movs	r2, #255	; 0xff
 800ab50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2204      	movs	r2, #4
 800ab56:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e031      	b.n	800abc6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	6979      	ldr	r1, [r7, #20]
 800ab68:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <HAL_RTC_SetDate+0x14c>)
 800ab6a:	400b      	ands	r3, r1
 800ab6c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f003 0320 	and.w	r3, r3, #32
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d111      	bne.n	800abb0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f939 	bl	800ae04 <HAL_RTC_WaitForSynchro>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	22ff      	movs	r2, #255	; 0xff
 800ab9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2204      	movs	r2, #4
 800aba4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e00a      	b.n	800abc6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800abc4:	2300      	movs	r3, #0
  }
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd90      	pop	{r4, r7, pc}
 800abce:	bf00      	nop
 800abd0:	00ffff3f 	.word	0x00ffff3f

0800abd4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800abd4:	b590      	push	{r4, r7, lr}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
 800abe8:	2300      	movs	r3, #0
 800abea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	7f1b      	ldrb	r3, [r3, #28]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_RTC_SetAlarm+0x24>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e101      	b.n	800adfc <HAL_RTC_SetAlarm+0x228>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2202      	movs	r2, #2
 800ac02:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d137      	bne.n	800ac7a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f942 	bl	800aeac <RTC_ByteToBcd2>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 f93b 	bl	800aeac <RTC_ByteToBcd2>
 800ac36:	4603      	mov	r3, r0
 800ac38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ac3a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	789b      	ldrb	r3, [r3, #2]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f933 	bl	800aeac <RTC_ByteToBcd2>
 800ac46:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ac48:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	7b1b      	ldrb	r3, [r3, #12]
 800ac50:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ac52:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f925 	bl	800aeac <RTC_ByteToBcd2>
 800ac62:	4603      	mov	r3, r0
 800ac64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ac66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ac6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ac74:	4313      	orrs	r3, r2
 800ac76:	61fb      	str	r3, [r7, #28]
 800ac78:	e023      	b.n	800acc2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ac9a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800aca0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	7b1b      	ldrb	r3, [r3, #12]
 800aca6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800aca8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800acb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800acb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800acb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800acbe:	4313      	orrs	r3, r2
 800acc0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	22ca      	movs	r2, #202	; 0xca
 800acd4:	625a      	str	r2, [r3, #36]	; 0x24
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2253      	movs	r2, #83	; 0x53
 800acdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace6:	d13f      	bne.n	800ad68 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acf6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad06:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad08:	f7f9 fac6 	bl	8004298 <HAL_GetTick>
 800ad0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ad0e:	e013      	b.n	800ad38 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad10:	f7f9 fac2 	bl	8004298 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad1e:	d90b      	bls.n	800ad38 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2203      	movs	r2, #3
 800ad2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e061      	b.n	800adfc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0e4      	beq.n	800ad10 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad64:	609a      	str	r2, [r3, #8]
 800ad66:	e03e      	b.n	800ade6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ad76:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689a      	ldr	r2, [r3, #8]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad86:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad88:	f7f9 fa86 	bl	8004298 <HAL_GetTick>
 800ad8c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ad8e:	e013      	b.n	800adb8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad90:	f7f9 fa82 	bl	8004298 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad9e:	d90b      	bls.n	800adb8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2203      	movs	r2, #3
 800adac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e021      	b.n	800adfc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0e4      	beq.n	800ad90 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	69fa      	ldr	r2, [r7, #28]
 800adcc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689a      	ldr	r2, [r3, #8]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ade4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	22ff      	movs	r2, #255	; 0xff
 800adec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3724      	adds	r7, #36	; 0x24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd90      	pop	{r4, r7, pc}

0800ae04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae20:	f7f9 fa3a 	bl	8004298 <HAL_GetTick>
 800ae24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ae26:	e009      	b.n	800ae3c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ae28:	f7f9 fa36 	bl	8004298 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae36:	d901      	bls.n	800ae3c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e007      	b.n	800ae4c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ee      	beq.n	800ae28 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d119      	bne.n	800aea2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae76:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae78:	f7f9 fa0e 	bl	8004298 <HAL_GetTick>
 800ae7c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae7e:	e009      	b.n	800ae94 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ae80:	f7f9 fa0a 	bl	8004298 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae8e:	d901      	bls.n	800ae94 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e007      	b.n	800aea4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0ee      	beq.n	800ae80 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800aeba:	e005      	b.n	800aec8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	3b0a      	subs	r3, #10
 800aec6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	d8f6      	bhi.n	800aebc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b2db      	uxtb	r3, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	7f1b      	ldrb	r3, [r3, #28]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_RTCEx_SetTimeStamp+0x1c>
 800af00:	2302      	movs	r3, #2
 800af02:	e03e      	b.n	800af82 <HAL_RTCEx_SetTimeStamp+0x9a>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2201      	movs	r2, #1
 800af08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2202      	movs	r2, #2
 800af0e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	4b1e      	ldr	r3, [pc, #120]	; (800af90 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800af18:	4013      	ands	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	22ca      	movs	r2, #202	; 0xca
 800af2a:	625a      	str	r2, [r3, #36]	; 0x24
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2253      	movs	r2, #83	; 0x53
 800af32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 0206 	bic.w	r2, r2, #6
 800af42:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	430a      	orrs	r2, r1
 800af52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af6a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	22ff      	movs	r2, #255	; 0xff
 800af72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2201      	movs	r2, #1
 800af78:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	fffff7f7 	.word	0xfffff7f7

0800af94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e156      	b.n	800b260 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7f8 fada 	bl	8003580 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f95b 	bl	800b290 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d00c      	beq.n	800affc <HAL_SAI_Init+0x68>
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d80d      	bhi.n	800b002 <HAL_SAI_Init+0x6e>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <HAL_SAI_Init+0x5c>
 800afea:	2b01      	cmp	r3, #1
 800afec:	d003      	beq.n	800aff6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800afee:	e008      	b.n	800b002 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]
      break;
 800aff4:	e006      	b.n	800b004 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aff6:	2310      	movs	r3, #16
 800aff8:	61fb      	str	r3, [r7, #28]
      break;
 800affa:	e003      	b.n	800b004 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800affc:	2320      	movs	r3, #32
 800affe:	61fb      	str	r3, [r7, #28]
      break;
 800b000:	e000      	b.n	800b004 <HAL_SAI_Init+0x70>
      break;
 800b002:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d81e      	bhi.n	800b04a <HAL_SAI_Init+0xb6>
 800b00c:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <HAL_SAI_Init+0x80>)
 800b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b012:	bf00      	nop
 800b014:	0800b025 	.word	0x0800b025
 800b018:	0800b02b 	.word	0x0800b02b
 800b01c:	0800b033 	.word	0x0800b033
 800b020:	0800b03b 	.word	0x0800b03b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
    }
    break;
 800b028:	e010      	b.n	800b04c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02e:	617b      	str	r3, [r7, #20]
    }
    break;
 800b030:	e00c      	b.n	800b04c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b036:	617b      	str	r3, [r7, #20]
    }
    break;
 800b038:	e008      	b.n	800b04c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b03a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b03e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	f043 0301 	orr.w	r3, r3, #1
 800b046:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b048:	e000      	b.n	800b04c <HAL_SAI_Init+0xb8>
    default:
      break;
 800b04a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a85      	ldr	r2, [pc, #532]	; (800b268 <HAL_SAI_Init+0x2d4>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d004      	beq.n	800b060 <HAL_SAI_Init+0xcc>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a84      	ldr	r2, [pc, #528]	; (800b26c <HAL_SAI_Init+0x2d8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d103      	bne.n	800b068 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b060:	4a83      	ldr	r2, [pc, #524]	; (800b270 <HAL_SAI_Init+0x2dc>)
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	e002      	b.n	800b06e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b068:	4a82      	ldr	r2, [pc, #520]	; (800b274 <HAL_SAI_Init+0x2e0>)
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d04c      	beq.n	800b110 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a7a      	ldr	r2, [pc, #488]	; (800b268 <HAL_SAI_Init+0x2d4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <HAL_SAI_Init+0xfa>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a78      	ldr	r2, [pc, #480]	; (800b26c <HAL_SAI_Init+0x2d8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d104      	bne.n	800b098 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b08e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b092:	f7ff fa63 	bl	800a55c <HAL_RCCEx_GetPeriphCLKFreq>
 800b096:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a76      	ldr	r2, [pc, #472]	; (800b278 <HAL_SAI_Init+0x2e4>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d004      	beq.n	800b0ac <HAL_SAI_Init+0x118>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a75      	ldr	r2, [pc, #468]	; (800b27c <HAL_SAI_Init+0x2e8>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d104      	bne.n	800b0b6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b0ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b0b0:	f7ff fa54 	bl	800a55c <HAL_RCCEx_GetPeriphCLKFreq>
 800b0b4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	025b      	lsls	r3, r3, #9
 800b0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0cc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	4a6b      	ldr	r2, [pc, #428]	; (800b280 <HAL_SAI_Init+0x2ec>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	08da      	lsrs	r2, r3, #3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b0dc:	68f9      	ldr	r1, [r7, #12]
 800b0de:	4b68      	ldr	r3, [pc, #416]	; (800b280 <HAL_SAI_Init+0x2ec>)
 800b0e0:	fba3 2301 	umull	r2, r3, r3, r1
 800b0e4:	08da      	lsrs	r2, r3, #3
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	1aca      	subs	r2, r1, r3
 800b0f0:	2a08      	cmp	r2, #8
 800b0f2:	d904      	bls.n	800b0fe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	2b04      	cmp	r3, #4
 800b104:	d104      	bne.n	800b110 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	085a      	lsrs	r2, r3, #1
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <HAL_SAI_Init+0x18c>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d109      	bne.n	800b134 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_SAI_Init+0x198>
 800b128:	2300      	movs	r3, #0
 800b12a:	e001      	b.n	800b130 <HAL_SAI_Init+0x19c>
 800b12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	e008      	b.n	800b146 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d102      	bne.n	800b142 <HAL_SAI_Init+0x1ae>
 800b13c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b140:	e000      	b.n	800b144 <HAL_SAI_Init+0x1b0>
 800b142:	2300      	movs	r3, #0
 800b144:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6819      	ldr	r1, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <HAL_SAI_Init+0x2f0>)
 800b152:	400b      	ands	r3, r1
 800b154:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6819      	ldr	r1, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b16a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	431a      	orrs	r2, r3
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800b17e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b18a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	051b      	lsls	r3, r3, #20
 800b192:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6859      	ldr	r1, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b38      	ldr	r3, [pc, #224]	; (800b288 <HAL_SAI_Init+0x2f4>)
 800b1a8:	400b      	ands	r3, r1
 800b1aa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6859      	ldr	r1, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6899      	ldr	r1, [r3, #8]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b2d      	ldr	r3, [pc, #180]	; (800b28c <HAL_SAI_Init+0x2f8>)
 800b1d6:	400b      	ands	r3, r1
 800b1d8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6899      	ldr	r1, [r3, #8]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b1ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b1f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b1f6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b200:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68d9      	ldr	r1, [r3, #12]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b218:	400b      	ands	r3, r1
 800b21a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68d9      	ldr	r1, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b230:	041b      	lsls	r3, r3, #16
 800b232:	431a      	orrs	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b238:	3b01      	subs	r3, #1
 800b23a:	021b      	lsls	r3, r3, #8
 800b23c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	40015804 	.word	0x40015804
 800b26c:	40015824 	.word	0x40015824
 800b270:	40015800 	.word	0x40015800
 800b274:	40015c00 	.word	0x40015c00
 800b278:	40015c04 	.word	0x40015c04
 800b27c:	40015c24 	.word	0x40015c24
 800b280:	cccccccd 	.word	0xcccccccd
 800b284:	ff05c010 	.word	0xff05c010
 800b288:	ffff1ff0 	.word	0xffff1ff0
 800b28c:	fff88000 	.word	0xfff88000

0800b290 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b298:	4b17      	ldr	r3, [pc, #92]	; (800b2f8 <SAI_Disable+0x68>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a17      	ldr	r2, [pc, #92]	; (800b2fc <SAI_Disable+0x6c>)
 800b29e:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a2:	0b1b      	lsrs	r3, r3, #12
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b2ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	1e5a      	subs	r2, r3, #1
 800b2c0:	60fa      	str	r2, [r7, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b2da:	e006      	b.n	800b2ea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e8      	bne.n	800b2bc <SAI_Disable+0x2c>

  return status;
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	20000000 	.word	0x20000000
 800b2fc:	95cbec1b 	.word	0x95cbec1b

0800b300 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e022      	b.n	800b358 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7f7 fdf3 	bl	8002f10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2203      	movs	r2, #3
 800b32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f814 	bl	800b360 <HAL_SD_InitCard>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e00a      	b.n	800b358 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b360:	b5b0      	push	{r4, r5, r7, lr}
 800b362:	b08e      	sub	sp, #56	; 0x38
 800b364:	af04      	add	r7, sp, #16
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b368:	2300      	movs	r3, #0
 800b36a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b370:	2300      	movs	r3, #0
 800b372:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b374:	2300      	movs	r3, #0
 800b376:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b378:	2300      	movs	r3, #0
 800b37a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b37c:	2376      	movs	r3, #118	; 0x76
 800b37e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681d      	ldr	r5, [r3, #0]
 800b384:	466c      	mov	r4, sp
 800b386:	f107 0314 	add.w	r3, r7, #20
 800b38a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b38e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b398:	4628      	mov	r0, r5
 800b39a:	f003 f8e1 	bl	800e560 <SDMMC_Init>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e056      	b.n	800b45e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3be:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f003 f915 	bl	800e5f4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3d8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 ff00 	bl	800c1e0 <SD_PowerON>
 800b3e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e02e      	b.n	800b45e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fe21 	bl	800c048 <SD_InitCard>
 800b406:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00b      	beq.n	800b426 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	431a      	orrs	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e01b      	b.n	800b45e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b42e:	4618      	mov	r0, r3
 800b430:	f003 f974 	bl	800e71c <SDMMC_CmdBlockLength>
 800b434:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00f      	beq.n	800b45c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a09      	ldr	r2, [pc, #36]	; (800b468 <HAL_SD_InitCard+0x108>)
 800b442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3728      	adds	r7, #40	; 0x28
 800b462:	46bd      	mov	sp, r7
 800b464:	bdb0      	pop	{r4, r5, r7, pc}
 800b466:	bf00      	nop
 800b468:	004005ff 	.word	0x004005ff

0800b46c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b092      	sub	sp, #72	; 0x48
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b47a:	f7f8 ff0d 	bl	8004298 <HAL_GetTick>
 800b47e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d107      	bne.n	800b49e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e1bd      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	f040 81b0 	bne.w	800b80c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	441a      	add	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d907      	bls.n	800b4d0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e1a4      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d002      	beq.n	800b4ee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	025b      	lsls	r3, r3, #9
 800b4ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	025b      	lsls	r3, r3, #9
 800b4f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4fa:	2390      	movs	r3, #144	; 0x90
 800b4fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4fe:	2302      	movs	r3, #2
 800b500:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b502:	2300      	movs	r3, #0
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b506:	2301      	movs	r3, #1
 800b508:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f107 0214 	add.w	r2, r7, #20
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f003 f8d5 	bl	800e6c4 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d90a      	bls.n	800b536 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2202      	movs	r2, #2
 800b524:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b52c:	4618      	mov	r0, r3
 800b52e:	f003 f939 	bl	800e7a4 <SDMMC_CmdReadMultiBlock>
 800b532:	6478      	str	r0, [r7, #68]	; 0x44
 800b534:	e009      	b.n	800b54a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b542:	4618      	mov	r0, r3
 800b544:	f003 f90c 	bl	800e760 <SDMMC_CmdReadSingleBlock>
 800b548:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d012      	beq.n	800b576 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a7a      	ldr	r2, [pc, #488]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b556:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b55e:	431a      	orrs	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e151      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b57a:	e061      	b.n	800b640 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d03c      	beq.n	800b604 <HAL_SD_ReadBlocks+0x198>
 800b58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d039      	beq.n	800b604 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b590:	2300      	movs	r3, #0
 800b592:	643b      	str	r3, [r7, #64]	; 0x40
 800b594:	e033      	b.n	800b5fe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f003 f80c 	bl	800e5b8 <SDMMC_ReadFIFO>
 800b5a0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	0a1b      	lsrs	r3, r3, #8
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d8:	3301      	adds	r3, #1
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	0e1b      	lsrs	r3, r3, #24
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b600:	2b07      	cmp	r3, #7
 800b602:	d9c8      	bls.n	800b596 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b604:	f7f8 fe48 	bl	8004298 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b610:	429a      	cmp	r2, r3
 800b612:	d902      	bls.n	800b61a <HAL_SD_ReadBlocks+0x1ae>
 800b614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b616:	2b00      	cmp	r3, #0
 800b618:	d112      	bne.n	800b640 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a48      	ldr	r2, [pc, #288]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b620:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b626:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e0ec      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b646:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d096      	beq.n	800b57c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d022      	beq.n	800b6a2 <HAL_SD_ReadBlocks+0x236>
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d91f      	bls.n	800b6a2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b666:	2b03      	cmp	r3, #3
 800b668:	d01b      	beq.n	800b6a2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f003 f8fe 	bl	800e870 <SDMMC_CmdStopTransfer>
 800b674:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d012      	beq.n	800b6a2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a2f      	ldr	r2, [pc, #188]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b682:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b68a:	431a      	orrs	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e0bb      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d012      	beq.n	800b6d6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a22      	ldr	r2, [pc, #136]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b6b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	f043 0208 	orr.w	r2, r3, #8
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e0a1      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d012      	beq.n	800b70a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a15      	ldr	r2, [pc, #84]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f0:	f043 0202 	orr.w	r2, r3, #2
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e087      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b00      	cmp	r3, #0
 800b716:	d064      	beq.n	800b7e2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a08      	ldr	r2, [pc, #32]	; (800b740 <HAL_SD_ReadBlocks+0x2d4>)
 800b71e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	f043 0220 	orr.w	r2, r3, #32
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e06d      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
 800b73e:	bf00      	nop
 800b740:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4618      	mov	r0, r3
 800b74a:	f002 ff35 	bl	800e5b8 <SDMMC_ReadFIFO>
 800b74e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b752:	b2da      	uxtb	r2, r3
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75a:	3301      	adds	r3, #1
 800b75c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b760:	3b01      	subs	r3, #1
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	0a1b      	lsrs	r3, r3, #8
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b770:	3301      	adds	r3, #1
 800b772:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b776:	3b01      	subs	r3, #1
 800b778:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	0c1b      	lsrs	r3, r3, #16
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b782:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	3301      	adds	r3, #1
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78c:	3b01      	subs	r3, #1
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	0e1b      	lsrs	r3, r3, #24
 800b794:	b2da      	uxtb	r2, r3
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b79c:	3301      	adds	r3, #1
 800b79e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b7a6:	f7f8 fd77 	bl	8004298 <HAL_GetTick>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d902      	bls.n	800b7bc <HAL_SD_ReadBlocks+0x350>
 800b7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d112      	bne.n	800b7e2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a18      	ldr	r2, [pc, #96]	; (800b824 <HAL_SD_ReadBlocks+0x3b8>)
 800b7c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e01b      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <HAL_SD_ReadBlocks+0x38a>
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1a6      	bne.n	800b744 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b808:	2300      	movs	r3, #0
 800b80a:	e006      	b.n	800b81a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
  }
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3748      	adds	r7, #72	; 0x48
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	004005ff 	.word	0x004005ff

0800b828 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b092      	sub	sp, #72	; 0x48
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b836:	f7f8 fd2f 	bl	8004298 <HAL_GetTick>
 800b83a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d107      	bne.n	800b85a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e165      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b01      	cmp	r3, #1
 800b864:	f040 8158 	bne.w	800bb18 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b86e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	441a      	add	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b878:	429a      	cmp	r2, r3
 800b87a:	d907      	bls.n	800b88c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e14c      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2203      	movs	r2, #3
 800b890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2200      	movs	r2, #0
 800b89a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d002      	beq.n	800b8aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	025b      	lsls	r3, r3, #9
 800b8a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	025b      	lsls	r3, r3, #9
 800b8b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b8b6:	2390      	movs	r3, #144	; 0x90
 800b8b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f107 0218 	add.w	r2, r7, #24
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f002 fef7 	bl	800e6c4 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d90a      	bls.n	800b8f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2220      	movs	r2, #32
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f002 ff9f 	bl	800e82c <SDMMC_CmdWriteMultiBlock>
 800b8ee:	6478      	str	r0, [r7, #68]	; 0x44
 800b8f0:	e009      	b.n	800b906 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2210      	movs	r2, #16
 800b8f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8fe:	4618      	mov	r0, r3
 800b900:	f002 ff72 	bl	800e7e8 <SDMMC_CmdWriteSingleBlock>
 800b904:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d012      	beq.n	800b932 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a87      	ldr	r2, [pc, #540]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b91a:	431a      	orrs	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e0f9      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b936:	e065      	b.n	800ba04 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d040      	beq.n	800b9c8 <HAL_SD_WriteBlocks+0x1a0>
 800b946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d03d      	beq.n	800b9c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b94c:	2300      	movs	r3, #0
 800b94e:	643b      	str	r3, [r7, #64]	; 0x40
 800b950:	e037      	b.n	800b9c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95a:	3301      	adds	r3, #1
 800b95c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b960:	3b01      	subs	r3, #1
 800b962:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	021a      	lsls	r2, r3, #8
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	3301      	adds	r3, #1
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b978:	3b01      	subs	r3, #1
 800b97a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	041a      	lsls	r2, r3, #16
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	4313      	orrs	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98a:	3301      	adds	r3, #1
 800b98c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b990:	3b01      	subs	r3, #1
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	061a      	lsls	r2, r3, #24
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f107 0214 	add.w	r2, r7, #20
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f002 fe0b 	bl	800e5d2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9be:	3301      	adds	r3, #1
 800b9c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c4:	2b07      	cmp	r3, #7
 800b9c6:	d9c4      	bls.n	800b952 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b9c8:	f7f8 fc66 	bl	8004298 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d902      	bls.n	800b9de <HAL_SD_WriteBlocks+0x1b6>
 800b9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d112      	bne.n	800ba04 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a53      	ldr	r2, [pc, #332]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800b9e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e090      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d092      	beq.n	800b938 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d022      	beq.n	800ba66 <HAL_SD_WriteBlocks+0x23e>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d91f      	bls.n	800ba66 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d01b      	beq.n	800ba66 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 ff1c 	bl	800e870 <SDMMC_CmdStopTransfer>
 800ba38:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d012      	beq.n	800ba66 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a3a      	ldr	r2, [pc, #232]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800ba46:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e05f      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6c:	f003 0308 	and.w	r3, r3, #8
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d012      	beq.n	800ba9a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a2d      	ldr	r2, [pc, #180]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	f043 0208 	orr.w	r2, r3, #8
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e045      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa0:	f003 0302 	and.w	r3, r3, #2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d012      	beq.n	800bace <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a20      	ldr	r2, [pc, #128]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800baae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	f043 0202 	orr.w	r2, r3, #2
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e02b      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad4:	f003 0310 	and.w	r3, r3, #16
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d012      	beq.n	800bb02 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a13      	ldr	r2, [pc, #76]	; (800bb30 <HAL_SD_WriteBlocks+0x308>)
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	f043 0210 	orr.w	r2, r3, #16
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e011      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb0a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	e006      	b.n	800bb26 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
  }
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3748      	adds	r7, #72	; 0x48
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	004005ff 	.word	0x004005ff

0800bb34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb42:	0f9b      	lsrs	r3, r3, #30
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb4e:	0e9b      	lsrs	r3, r3, #26
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb60:	0e1b      	lsrs	r3, r3, #24
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 0303 	and.w	r3, r3, #3
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb72:	0c1b      	lsrs	r3, r3, #16
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb94:	0d1b      	lsrs	r3, r3, #20
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bba0:	0c1b      	lsrs	r3, r3, #16
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbb2:	0bdb      	lsrs	r3, r3, #15
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbc4:	0b9b      	lsrs	r3, r3, #14
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbd6:	0b5b      	lsrs	r3, r3, #13
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbe8:	0b1b      	lsrs	r3, r3, #12
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d163      	bne.n	800bccc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc08:	009a      	lsls	r2, r3, #2
 800bc0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bc0e:	4013      	ands	r3, r2
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bc14:	0f92      	lsrs	r2, r2, #30
 800bc16:	431a      	orrs	r2, r3
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc20:	0edb      	lsrs	r3, r3, #27
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0307 	and.w	r3, r3, #7
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc32:	0e1b      	lsrs	r3, r3, #24
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc44:	0d5b      	lsrs	r3, r3, #21
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc56:	0c9b      	lsrs	r3, r3, #18
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc68:	0bdb      	lsrs	r3, r3, #15
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	7e1b      	ldrb	r3, [r3, #24]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	3302      	adds	r3, #2
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bc96:	fb02 f203 	mul.w	r2, r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	7a1b      	ldrb	r3, [r3, #8]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	2201      	movs	r2, #1
 800bcaa:	409a      	lsls	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bcb8:	0a52      	lsrs	r2, r2, #9
 800bcba:	fb02 f203 	mul.w	r2, r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcc8:	661a      	str	r2, [r3, #96]	; 0x60
 800bcca:	e031      	b.n	800bd30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d11d      	bne.n	800bd10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcd8:	041b      	lsls	r3, r3, #16
 800bcda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce2:	0c1b      	lsrs	r3, r3, #16
 800bce4:	431a      	orrs	r2, r3
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	029a      	lsls	r2, r3, #10
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	661a      	str	r2, [r3, #96]	; 0x60
 800bd0e:	e00f      	b.n	800bd30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a58      	ldr	r2, [pc, #352]	; (800be78 <HAL_SD_GetCardCSD+0x344>)
 800bd16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e09d      	b.n	800be6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd34:	0b9b      	lsrs	r3, r3, #14
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd46:	09db      	lsrs	r3, r3, #7
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd68:	0fdb      	lsrs	r3, r3, #31
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd74:	0f5b      	lsrs	r3, r3, #29
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd86:	0e9b      	lsrs	r3, r3, #26
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	f003 0307 	and.w	r3, r3, #7
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd98:	0d9b      	lsrs	r3, r3, #22
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdaa:	0d5b      	lsrs	r3, r3, #21
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc6:	0c1b      	lsrs	r3, r3, #16
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdda:	0bdb      	lsrs	r3, r3, #15
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdee:	0b9b      	lsrs	r3, r3, #14
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be02:	0b5b      	lsrs	r3, r3, #13
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be16:	0b1b      	lsrs	r3, r3, #12
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2a:	0a9b      	lsrs	r3, r3, #10
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	b2da      	uxtb	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3e:	0a1b      	lsrs	r3, r3, #8
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	b2da      	uxtb	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be52:	085b      	lsrs	r3, r3, #1
 800be54:	b2db      	uxtb	r3, r3
 800be56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	004005ff 	.word	0x004005ff

0800be7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bed4:	b5b0      	push	{r4, r5, r7, lr}
 800bed6:	b08e      	sub	sp, #56	; 0x38
 800bed8:	af04      	add	r7, sp, #16
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2203      	movs	r2, #3
 800bee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d02e      	beq.n	800bf52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befa:	d106      	bne.n	800bf0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38
 800bf08:	e029      	b.n	800bf5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf10:	d10a      	bne.n	800bf28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa1a 	bl	800c34c <SD_WideBus_Enable>
 800bf18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	431a      	orrs	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	639a      	str	r2, [r3, #56]	; 0x38
 800bf26:	e01a      	b.n	800bf5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa57 	bl	800c3e2 <SD_WideBus_Disable>
 800bf34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	639a      	str	r2, [r3, #56]	; 0x38
 800bf42:	e00c      	b.n	800bf5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38
 800bf50:	e005      	b.n	800bf5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00b      	beq.n	800bf7e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a26      	ldr	r2, [pc, #152]	; (800c004 <HAL_SD_ConfigWideBusOperation+0x130>)
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf7c:	e01f      	b.n	800bfbe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681d      	ldr	r5, [r3, #0]
 800bfa4:	466c      	mov	r4, sp
 800bfa6:	f107 0314 	add.w	r3, r7, #20
 800bfaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f002 fad1 	bl	800e560 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f002 fba8 	bl	800e71c <SDMMC_CmdBlockLength>
 800bfcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00c      	beq.n	800bfee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a0a      	ldr	r2, [pc, #40]	; (800c004 <HAL_SD_ConfigWideBusOperation+0x130>)
 800bfda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800bff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3728      	adds	r7, #40	; 0x28
 800bffe:	46bd      	mov	sp, r7
 800c000:	bdb0      	pop	{r4, r5, r7, pc}
 800c002:	bf00      	nop
 800c004:	004005ff 	.word	0x004005ff

0800c008 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f96e 	bl	800c2fc <SD_SendStatus>
 800c020:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	431a      	orrs	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	0a5b      	lsrs	r3, r3, #9
 800c038:	f003 030f 	and.w	r3, r3, #15
 800c03c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c03e:	693b      	ldr	r3, [r7, #16]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c048:	b5b0      	push	{r4, r5, r7, lr}
 800c04a:	b094      	sub	sp, #80	; 0x50
 800c04c:	af04      	add	r7, sp, #16
 800c04e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c050:	2301      	movs	r3, #1
 800c052:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f002 fada 	bl	800e612 <SDMMC_GetPowerState>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c064:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c068:	e0b6      	b.n	800c1d8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d02f      	beq.n	800c0d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f002 fd05 	bl	800ea86 <SDMMC_CmdSendCID>
 800c07c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <SD_InitCard+0x40>
    {
      return errorstate;
 800c084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c086:	e0a7      	b.n	800c1d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2100      	movs	r1, #0
 800c08e:	4618      	mov	r0, r3
 800c090:	f002 fb05 	bl	800e69e <SDMMC_GetResponse>
 800c094:	4602      	mov	r2, r0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2104      	movs	r1, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f002 fafc 	bl	800e69e <SDMMC_GetResponse>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2108      	movs	r1, #8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f002 faf3 	bl	800e69e <SDMMC_GetResponse>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	210c      	movs	r1, #12
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f002 faea 	bl	800e69e <SDMMC_GetResponse>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d00d      	beq.n	800c0f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f107 020e 	add.w	r2, r7, #14
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f002 fd0b 	bl	800eb00 <SDMMC_CmdSetRelAdd>
 800c0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f4:	e070      	b.n	800c1d8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d036      	beq.n	800c16c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c0fe:	89fb      	ldrh	r3, [r7, #14]
 800c100:	461a      	mov	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	041b      	lsls	r3, r3, #16
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f002 fcd5 	bl	800eac2 <SDMMC_CmdSendCSD>
 800c118:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c122:	e059      	b.n	800c1d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2100      	movs	r1, #0
 800c12a:	4618      	mov	r0, r3
 800c12c:	f002 fab7 	bl	800e69e <SDMMC_GetResponse>
 800c130:	4602      	mov	r2, r0
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2104      	movs	r1, #4
 800c13c:	4618      	mov	r0, r3
 800c13e:	f002 faae 	bl	800e69e <SDMMC_GetResponse>
 800c142:	4602      	mov	r2, r0
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2108      	movs	r1, #8
 800c14e:	4618      	mov	r0, r3
 800c150:	f002 faa5 	bl	800e69e <SDMMC_GetResponse>
 800c154:	4602      	mov	r2, r0
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	210c      	movs	r1, #12
 800c160:	4618      	mov	r0, r3
 800c162:	f002 fa9c 	bl	800e69e <SDMMC_GetResponse>
 800c166:	4602      	mov	r2, r0
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2104      	movs	r1, #4
 800c172:	4618      	mov	r0, r3
 800c174:	f002 fa93 	bl	800e69e <SDMMC_GetResponse>
 800c178:	4603      	mov	r3, r0
 800c17a:	0d1a      	lsrs	r2, r3, #20
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff fcd4 	bl	800bb34 <HAL_SD_GetCardCSD>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c192:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c196:	e01f      	b.n	800c1d8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6819      	ldr	r1, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a0:	041b      	lsls	r3, r3, #16
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f04f 0300 	mov.w	r3, #0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	f002 fb83 	bl	800e8b4 <SDMMC_CmdSelDesel>
 800c1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <SD_InitCard+0x172>
  {
    return errorstate;
 800c1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b8:	e00e      	b.n	800c1d8 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681d      	ldr	r5, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	466c      	mov	r4, sp
 800c1c2:	f103 0210 	add.w	r2, r3, #16
 800c1c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c1c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f002 f9c5 	bl	800e560 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3740      	adds	r7, #64	; 0x40
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bdb0      	pop	{r4, r5, r7, pc}

0800c1e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	617b      	str	r3, [r7, #20]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f002 fb7e 	bl	800e8fa <SDMMC_CmdGoIdleState>
 800c1fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	e072      	b.n	800c2f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f002 fb91 	bl	800e936 <SDMMC_CmdOperCond>
 800c214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00d      	beq.n	800c238 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4618      	mov	r0, r3
 800c228:	f002 fb67 	bl	800e8fa <SDMMC_CmdGoIdleState>
 800c22c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d004      	beq.n	800c23e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	e05b      	b.n	800c2f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c242:	2b01      	cmp	r3, #1
 800c244:	d137      	bne.n	800c2b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2100      	movs	r1, #0
 800c24c:	4618      	mov	r0, r3
 800c24e:	f002 fb91 	bl	800e974 <SDMMC_CmdAppCommand>
 800c252:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d02d      	beq.n	800c2b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c25a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c25e:	e047      	b.n	800c2f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2100      	movs	r1, #0
 800c266:	4618      	mov	r0, r3
 800c268:	f002 fb84 	bl	800e974 <SDMMC_CmdAppCommand>
 800c26c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <SD_PowerON+0x98>
    {
      return errorstate;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	e03b      	b.n	800c2f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	491e      	ldr	r1, [pc, #120]	; (800c2f8 <SD_PowerON+0x118>)
 800c27e:	4618      	mov	r0, r3
 800c280:	f002 fb9a 	bl	800e9b8 <SDMMC_CmdAppOperCommand>
 800c284:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c28c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c290:	e02e      	b.n	800c2f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2100      	movs	r1, #0
 800c298:	4618      	mov	r0, r3
 800c29a:	f002 fa00 	bl	800e69e <SDMMC_GetResponse>
 800c29e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	0fdb      	lsrs	r3, r3, #31
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <SD_PowerON+0xcc>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e000      	b.n	800c2ae <SD_PowerON+0xce>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	613b      	str	r3, [r7, #16]

    count++;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d802      	bhi.n	800c2c6 <SD_PowerON+0xe6>
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0cc      	beq.n	800c260 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d902      	bls.n	800c2d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c2d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2d4:	e00c      	b.n	800c2f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	645a      	str	r2, [r3, #68]	; 0x44
 800c2e6:	e002      	b.n	800c2ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	c1100000 	.word	0xc1100000

0800c2fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c30c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c310:	e018      	b.n	800c344 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c31a:	041b      	lsls	r3, r3, #16
 800c31c:	4619      	mov	r1, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	f002 fc0f 	bl	800eb42 <SDMMC_CmdSendStatus>
 800c324:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	e009      	b.n	800c344 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f002 f9b1 	bl	800e69e <SDMMC_GetResponse>
 800c33c:	4602      	mov	r2, r0
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c354:	2300      	movs	r3, #0
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	2300      	movs	r3, #0
 800c35a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2100      	movs	r1, #0
 800c362:	4618      	mov	r0, r3
 800c364:	f002 f99b 	bl	800e69e <SDMMC_GetResponse>
 800c368:	4603      	mov	r3, r0
 800c36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c372:	d102      	bne.n	800c37a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c378:	e02f      	b.n	800c3da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c37a:	f107 030c 	add.w	r3, r7, #12
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f879 	bl	800c478 <SD_FindSCR>
 800c386:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	e023      	b.n	800c3da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01c      	beq.n	800c3d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a4:	041b      	lsls	r3, r3, #16
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f002 fae3 	bl	800e974 <SDMMC_CmdAppCommand>
 800c3ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	e00f      	b.n	800c3da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2102      	movs	r1, #2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f002 fb1d 	bl	800ea00 <SDMMC_CmdBusWidth>
 800c3c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	e003      	b.n	800c3da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e001      	b.n	800c3da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b086      	sub	sp, #24
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f002 f950 	bl	800e69e <SDMMC_GetResponse>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c408:	d102      	bne.n	800c410 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c40a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c40e:	e02f      	b.n	800c470 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c410:	f107 030c 	add.w	r3, r7, #12
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f82e 	bl	800c478 <SD_FindSCR>
 800c41c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	e023      	b.n	800c470 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01c      	beq.n	800c46c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43a:	041b      	lsls	r3, r3, #16
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f002 fa98 	bl	800e974 <SDMMC_CmdAppCommand>
 800c444:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	e00f      	b.n	800c470 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2100      	movs	r1, #0
 800c456:	4618      	mov	r0, r3
 800c458:	f002 fad2 	bl	800ea00 <SDMMC_CmdBusWidth>
 800c45c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	e003      	b.n	800c470 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c468:	2300      	movs	r3, #0
 800c46a:	e001      	b.n	800c470 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c46c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b08f      	sub	sp, #60	; 0x3c
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c482:	f7f7 ff09 	bl	8004298 <HAL_GetTick>
 800c486:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c48c:	2300      	movs	r3, #0
 800c48e:	60bb      	str	r3, [r7, #8]
 800c490:	2300      	movs	r3, #0
 800c492:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2108      	movs	r1, #8
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f002 f93c 	bl	800e71c <SDMMC_CmdBlockLength>
 800c4a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	e0b2      	b.n	800c616 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b8:	041b      	lsls	r3, r3, #16
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4610      	mov	r0, r2
 800c4be:	f002 fa59 	bl	800e974 <SDMMC_CmdAppCommand>
 800c4c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <SD_FindSCR+0x56>
  {
    return errorstate;
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	e0a3      	b.n	800c616 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c4d8:	2330      	movs	r3, #48	; 0x30
 800c4da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f107 0210 	add.w	r2, r7, #16
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f002 f8e6 	bl	800e6c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f002 faa1 	bl	800ea44 <SDMMC_CmdSendSCR>
 800c502:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	2b00      	cmp	r3, #0
 800c508:	d02a      	beq.n	800c560 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800c50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50c:	e083      	b.n	800c616 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00f      	beq.n	800c53c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	f107 0208 	add.w	r2, r7, #8
 800c528:	18d4      	adds	r4, r2, r3
 800c52a:	4608      	mov	r0, r1
 800c52c:	f002 f844 	bl	800e5b8 <SDMMC_ReadFIFO>
 800c530:	4603      	mov	r3, r0
 800c532:	6023      	str	r3, [r4, #0]
      index++;
 800c534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c536:	3301      	adds	r3, #1
 800c538:	637b      	str	r3, [r7, #52]	; 0x34
 800c53a:	e006      	b.n	800c54a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d012      	beq.n	800c570 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c54a:	f7f7 fea5 	bl	8004298 <HAL_GetTick>
 800c54e:	4602      	mov	r2, r0
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c558:	d102      	bne.n	800c560 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c55a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c55e:	e05a      	b.n	800c616 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c566:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0cf      	beq.n	800c50e <SD_FindSCR+0x96>
 800c56e:	e000      	b.n	800c572 <SD_FindSCR+0xfa>
      break;
 800c570:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d005      	beq.n	800c58c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2208      	movs	r2, #8
 800c586:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c588:	2308      	movs	r3, #8
 800c58a:	e044      	b.n	800c616 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d005      	beq.n	800c5a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	e037      	b.n	800c616 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d005      	beq.n	800c5c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c5bc:	2320      	movs	r3, #32
 800c5be:	e02a      	b.n	800c616 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f240 523a 	movw	r2, #1338	; 0x53a
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	061a      	lsls	r2, r3, #24
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	021b      	lsls	r3, r3, #8
 800c5d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c5e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	0e1b      	lsrs	r3, r3, #24
 800c5e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ea:	601a      	str	r2, [r3, #0]
    scr++;
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	061a      	lsls	r2, r3, #24
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	021b      	lsls	r3, r3, #8
 800c5fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	0a1b      	lsrs	r3, r3, #8
 800c604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c608:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	0e1b      	lsrs	r3, r3, #24
 800c60e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	373c      	adds	r7, #60	; 0x3c
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}

0800c61e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e025      	b.n	800c67e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7f6 ff90 	bl	800356c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f001 fe54 	bl	800e30c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6818      	ldr	r0, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	461a      	mov	r2, r3
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	f001 febe 	bl	800e3f0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d101      	bne.n	800c6a2 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800c69e:	2302      	movs	r3, #2
 800c6a0:	e018      	b.n	800c6d4 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 ff1c 	bl	800e4f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d104      	bne.n	800c6ca <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c6c8:	e003      	b.n	800c6d2 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d101      	bne.n	800c6f6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	e00e      	b.n	800c714 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	4618      	mov	r0, r3
 800c706:	f001 ff17 	bl	800e538 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e04c      	b.n	800c7c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f6 fc46 	bl	8002fd4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f022 0203 	bic.w	r2, r2, #3
 800c75e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	4b19      	ldr	r3, [pc, #100]	; (800c7d0 <HAL_SPDIFRX_Init+0xb4>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c778:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c77e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c784:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c78a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c790:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c796:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c79c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800c7a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800c7a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	fff88407 	.word	0xfff88407

0800c7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e049      	b.n	800c87a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7f6 fc2c 	bl	8003058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3304      	adds	r3, #4
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f000 fc22 	bl	800d05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b01      	cmp	r3, #1
 800c896:	d001      	beq.n	800c89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e054      	b.n	800c946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2202      	movs	r2, #2
 800c8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68da      	ldr	r2, [r3, #12]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f042 0201 	orr.w	r2, r2, #1
 800c8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a26      	ldr	r2, [pc, #152]	; (800c954 <HAL_TIM_Base_Start_IT+0xd0>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d022      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8c6:	d01d      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a22      	ldr	r2, [pc, #136]	; (800c958 <HAL_TIM_Base_Start_IT+0xd4>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d018      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a21      	ldr	r2, [pc, #132]	; (800c95c <HAL_TIM_Base_Start_IT+0xd8>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d013      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a1f      	ldr	r2, [pc, #124]	; (800c960 <HAL_TIM_Base_Start_IT+0xdc>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00e      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a1e      	ldr	r2, [pc, #120]	; (800c964 <HAL_TIM_Base_Start_IT+0xe0>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d009      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a1c      	ldr	r2, [pc, #112]	; (800c968 <HAL_TIM_Base_Start_IT+0xe4>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <HAL_TIM_Base_Start_IT+0x80>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <HAL_TIM_Base_Start_IT+0xe8>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d115      	bne.n	800c930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689a      	ldr	r2, [r3, #8]
 800c90a:	4b19      	ldr	r3, [pc, #100]	; (800c970 <HAL_TIM_Base_Start_IT+0xec>)
 800c90c:	4013      	ands	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b06      	cmp	r3, #6
 800c914:	d015      	beq.n	800c942 <HAL_TIM_Base_Start_IT+0xbe>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c91c:	d011      	beq.n	800c942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f042 0201 	orr.w	r2, r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c92e:	e008      	b.n	800c942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0201 	orr.w	r2, r2, #1
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	e000      	b.n	800c944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3714      	adds	r7, #20
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	40010000 	.word	0x40010000
 800c958:	40000400 	.word	0x40000400
 800c95c:	40000800 	.word	0x40000800
 800c960:	40000c00 	.word	0x40000c00
 800c964:	40010400 	.word	0x40010400
 800c968:	40014000 	.word	0x40014000
 800c96c:	40001800 	.word	0x40001800
 800c970:	00010007 	.word	0x00010007

0800c974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e049      	b.n	800ca1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7f6 fbca 	bl	8003134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	f000 fb52 	bl	800d05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	f003 0302 	and.w	r3, r3, #2
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d122      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	f003 0302 	and.w	r3, r3, #2
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d11b      	bne.n	800ca7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f06f 0202 	mvn.w	r2, #2
 800ca4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	f003 0303 	and.w	r3, r3, #3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fadb 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800ca6a:	e005      	b.n	800ca78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 facd 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fade 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d122      	bne.n	800cad2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d11b      	bne.n	800cad2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f06f 0204 	mvn.w	r2, #4
 800caa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2202      	movs	r2, #2
 800caa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d003      	beq.n	800cac0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fab1 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cabe:	e005      	b.n	800cacc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 faa3 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fab4 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	2b08      	cmp	r3, #8
 800cade:	d122      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b08      	cmp	r3, #8
 800caec:	d11b      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f06f 0208 	mvn.w	r2, #8
 800caf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2204      	movs	r2, #4
 800cafc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	f003 0303 	and.w	r3, r3, #3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fa87 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cb12:	e005      	b.n	800cb20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa79 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa8a 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 0310 	and.w	r3, r3, #16
 800cb30:	2b10      	cmp	r3, #16
 800cb32:	d122      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f003 0310 	and.w	r3, r3, #16
 800cb3e:	2b10      	cmp	r3, #16
 800cb40:	d11b      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f06f 0210 	mvn.w	r2, #16
 800cb4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2208      	movs	r2, #8
 800cb50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa5d 	bl	800d020 <HAL_TIM_IC_CaptureCallback>
 800cb66:	e005      	b.n	800cb74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fa4f 	bl	800d00c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa60 	bl	800d034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d10e      	bne.n	800cba6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d107      	bne.n	800cba6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f06f 0201 	mvn.w	r2, #1
 800cb9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7f5 fdb3 	bl	800270c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb0:	2b80      	cmp	r3, #128	; 0x80
 800cbb2:	d10e      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbbe:	2b80      	cmp	r3, #128	; 0x80
 800cbc0:	d107      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cbca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fef3 	bl	800d9b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe0:	d10e      	bne.n	800cc00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbec:	2b80      	cmp	r3, #128	; 0x80
 800cbee:	d107      	bne.n	800cc00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fee6 	bl	800d9cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0a:	2b40      	cmp	r3, #64	; 0x40
 800cc0c:	d10e      	bne.n	800cc2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc18:	2b40      	cmp	r3, #64	; 0x40
 800cc1a:	d107      	bne.n	800cc2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fa0e 	bl	800d048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	f003 0320 	and.w	r3, r3, #32
 800cc36:	2b20      	cmp	r3, #32
 800cc38:	d10e      	bne.n	800cc58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	f003 0320 	and.w	r3, r3, #32
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d107      	bne.n	800cc58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f06f 0220 	mvn.w	r2, #32
 800cc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fea6 	bl	800d9a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d101      	bne.n	800cc7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cc76:	2302      	movs	r3, #2
 800cc78:	e0fd      	b.n	800ce76 <HAL_TIM_PWM_ConfigChannel+0x216>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b14      	cmp	r3, #20
 800cc86:	f200 80f0 	bhi.w	800ce6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800cce5 	.word	0x0800cce5
 800cc94:	0800ce6b 	.word	0x0800ce6b
 800cc98:	0800ce6b 	.word	0x0800ce6b
 800cc9c:	0800ce6b 	.word	0x0800ce6b
 800cca0:	0800cd25 	.word	0x0800cd25
 800cca4:	0800ce6b 	.word	0x0800ce6b
 800cca8:	0800ce6b 	.word	0x0800ce6b
 800ccac:	0800ce6b 	.word	0x0800ce6b
 800ccb0:	0800cd67 	.word	0x0800cd67
 800ccb4:	0800ce6b 	.word	0x0800ce6b
 800ccb8:	0800ce6b 	.word	0x0800ce6b
 800ccbc:	0800ce6b 	.word	0x0800ce6b
 800ccc0:	0800cda7 	.word	0x0800cda7
 800ccc4:	0800ce6b 	.word	0x0800ce6b
 800ccc8:	0800ce6b 	.word	0x0800ce6b
 800cccc:	0800ce6b 	.word	0x0800ce6b
 800ccd0:	0800cde9 	.word	0x0800cde9
 800ccd4:	0800ce6b 	.word	0x0800ce6b
 800ccd8:	0800ce6b 	.word	0x0800ce6b
 800ccdc:	0800ce6b 	.word	0x0800ce6b
 800cce0:	0800ce29 	.word	0x0800ce29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fa56 	bl	800d19c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f042 0208 	orr.w	r2, r2, #8
 800ccfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699a      	ldr	r2, [r3, #24]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f022 0204 	bic.w	r2, r2, #4
 800cd0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6999      	ldr	r1, [r3, #24]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	691a      	ldr	r2, [r3, #16]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	619a      	str	r2, [r3, #24]
      break;
 800cd22:	e0a3      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68b9      	ldr	r1, [r7, #8]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 faa8 	bl	800d280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	699a      	ldr	r2, [r3, #24]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	699a      	ldr	r2, [r3, #24]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6999      	ldr	r1, [r3, #24]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	021a      	lsls	r2, r3, #8
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	619a      	str	r2, [r3, #24]
      break;
 800cd64:	e082      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 faff 	bl	800d370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69da      	ldr	r2, [r3, #28]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f042 0208 	orr.w	r2, r2, #8
 800cd80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69da      	ldr	r2, [r3, #28]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0204 	bic.w	r2, r2, #4
 800cd90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69d9      	ldr	r1, [r3, #28]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	61da      	str	r2, [r3, #28]
      break;
 800cda4:	e062      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fb55 	bl	800d45c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	69da      	ldr	r2, [r3, #28]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	69da      	ldr	r2, [r3, #28]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	69d9      	ldr	r1, [r3, #28]
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	021a      	lsls	r2, r3, #8
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	61da      	str	r2, [r3, #28]
      break;
 800cde6:	e041      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fb8c 	bl	800d50c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f042 0208 	orr.w	r2, r2, #8
 800ce02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f022 0204 	bic.w	r2, r2, #4
 800ce12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce26:	e021      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68b9      	ldr	r1, [r7, #8]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 fbbe 	bl	800d5b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	021a      	lsls	r2, r3, #8
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ce68:	e000      	b.n	800ce6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ce6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop

0800ce80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <HAL_TIM_ConfigClockSource+0x18>
 800ce94:	2302      	movs	r3, #2
 800ce96:	e0b3      	b.n	800d000 <HAL_TIM_ConfigClockSource+0x180>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4b55      	ldr	r3, [pc, #340]	; (800d008 <HAL_TIM_ConfigClockSource+0x188>)
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cebe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ced0:	d03e      	beq.n	800cf50 <HAL_TIM_ConfigClockSource+0xd0>
 800ced2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ced6:	f200 8087 	bhi.w	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800ceda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cede:	f000 8085 	beq.w	800cfec <HAL_TIM_ConfigClockSource+0x16c>
 800cee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cee6:	d87f      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cee8:	2b70      	cmp	r3, #112	; 0x70
 800ceea:	d01a      	beq.n	800cf22 <HAL_TIM_ConfigClockSource+0xa2>
 800ceec:	2b70      	cmp	r3, #112	; 0x70
 800ceee:	d87b      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cef0:	2b60      	cmp	r3, #96	; 0x60
 800cef2:	d050      	beq.n	800cf96 <HAL_TIM_ConfigClockSource+0x116>
 800cef4:	2b60      	cmp	r3, #96	; 0x60
 800cef6:	d877      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cef8:	2b50      	cmp	r3, #80	; 0x50
 800cefa:	d03c      	beq.n	800cf76 <HAL_TIM_ConfigClockSource+0xf6>
 800cefc:	2b50      	cmp	r3, #80	; 0x50
 800cefe:	d873      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cf00:	2b40      	cmp	r3, #64	; 0x40
 800cf02:	d058      	beq.n	800cfb6 <HAL_TIM_ConfigClockSource+0x136>
 800cf04:	2b40      	cmp	r3, #64	; 0x40
 800cf06:	d86f      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cf08:	2b30      	cmp	r3, #48	; 0x30
 800cf0a:	d064      	beq.n	800cfd6 <HAL_TIM_ConfigClockSource+0x156>
 800cf0c:	2b30      	cmp	r3, #48	; 0x30
 800cf0e:	d86b      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d060      	beq.n	800cfd6 <HAL_TIM_ConfigClockSource+0x156>
 800cf14:	2b20      	cmp	r3, #32
 800cf16:	d867      	bhi.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d05c      	beq.n	800cfd6 <HAL_TIM_ConfigClockSource+0x156>
 800cf1c:	2b10      	cmp	r3, #16
 800cf1e:	d05a      	beq.n	800cfd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cf20:	e062      	b.n	800cfe8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	6899      	ldr	r1, [r3, #8]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f000 fc0b 	bl	800d74c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	609a      	str	r2, [r3, #8]
      break;
 800cf4e:	e04e      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6818      	ldr	r0, [r3, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	6899      	ldr	r1, [r3, #8]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f000 fbf4 	bl	800d74c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	689a      	ldr	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf72:	609a      	str	r2, [r3, #8]
      break;
 800cf74:	e03b      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	6859      	ldr	r1, [r3, #4]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	461a      	mov	r2, r3
 800cf84:	f000 fb68 	bl	800d658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2150      	movs	r1, #80	; 0x50
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fbc1 	bl	800d716 <TIM_ITRx_SetConfig>
      break;
 800cf94:	e02b      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	6859      	ldr	r1, [r3, #4]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	f000 fb87 	bl	800d6b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2160      	movs	r1, #96	; 0x60
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f000 fbb1 	bl	800d716 <TIM_ITRx_SetConfig>
      break;
 800cfb4:	e01b      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	6859      	ldr	r1, [r3, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f000 fb48 	bl	800d658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2140      	movs	r1, #64	; 0x40
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fba1 	bl	800d716 <TIM_ITRx_SetConfig>
      break;
 800cfd4:	e00b      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	f000 fb98 	bl	800d716 <TIM_ITRx_SetConfig>
        break;
 800cfe6:	e002      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cfe8:	bf00      	nop
 800cfea:	e000      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cfec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	fffeff88 	.word	0xfffeff88

0800d00c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a40      	ldr	r2, [pc, #256]	; (800d170 <TIM_Base_SetConfig+0x114>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d013      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d07a:	d00f      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a3d      	ldr	r2, [pc, #244]	; (800d174 <TIM_Base_SetConfig+0x118>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d00b      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a3c      	ldr	r2, [pc, #240]	; (800d178 <TIM_Base_SetConfig+0x11c>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d007      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a3b      	ldr	r2, [pc, #236]	; (800d17c <TIM_Base_SetConfig+0x120>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d003      	beq.n	800d09c <TIM_Base_SetConfig+0x40>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a3a      	ldr	r2, [pc, #232]	; (800d180 <TIM_Base_SetConfig+0x124>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d108      	bne.n	800d0ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a2f      	ldr	r2, [pc, #188]	; (800d170 <TIM_Base_SetConfig+0x114>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d02b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0bc:	d027      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a2c      	ldr	r2, [pc, #176]	; (800d174 <TIM_Base_SetConfig+0x118>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d023      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a2b      	ldr	r2, [pc, #172]	; (800d178 <TIM_Base_SetConfig+0x11c>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d01f      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a2a      	ldr	r2, [pc, #168]	; (800d17c <TIM_Base_SetConfig+0x120>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d01b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a29      	ldr	r2, [pc, #164]	; (800d180 <TIM_Base_SetConfig+0x124>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d017      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a28      	ldr	r2, [pc, #160]	; (800d184 <TIM_Base_SetConfig+0x128>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d013      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a27      	ldr	r2, [pc, #156]	; (800d188 <TIM_Base_SetConfig+0x12c>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00f      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a26      	ldr	r2, [pc, #152]	; (800d18c <TIM_Base_SetConfig+0x130>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d00b      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a25      	ldr	r2, [pc, #148]	; (800d190 <TIM_Base_SetConfig+0x134>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d007      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a24      	ldr	r2, [pc, #144]	; (800d194 <TIM_Base_SetConfig+0x138>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d003      	beq.n	800d10e <TIM_Base_SetConfig+0xb2>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a23      	ldr	r2, [pc, #140]	; (800d198 <TIM_Base_SetConfig+0x13c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d108      	bne.n	800d120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a0a      	ldr	r2, [pc, #40]	; (800d170 <TIM_Base_SetConfig+0x114>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d003      	beq.n	800d154 <TIM_Base_SetConfig+0xf8>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a0c      	ldr	r2, [pc, #48]	; (800d180 <TIM_Base_SetConfig+0x124>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d103      	bne.n	800d15c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	691a      	ldr	r2, [r3, #16]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	615a      	str	r2, [r3, #20]
}
 800d162:	bf00      	nop
 800d164:	3714      	adds	r7, #20
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	40010000 	.word	0x40010000
 800d174:	40000400 	.word	0x40000400
 800d178:	40000800 	.word	0x40000800
 800d17c:	40000c00 	.word	0x40000c00
 800d180:	40010400 	.word	0x40010400
 800d184:	40014000 	.word	0x40014000
 800d188:	40014400 	.word	0x40014400
 800d18c:	40014800 	.word	0x40014800
 800d190:	40001800 	.word	0x40001800
 800d194:	40001c00 	.word	0x40001c00
 800d198:	40002000 	.word	0x40002000

0800d19c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	f023 0201 	bic.w	r2, r3, #1
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	699b      	ldr	r3, [r3, #24]
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4b2b      	ldr	r3, [pc, #172]	; (800d274 <TIM_OC1_SetConfig+0xd8>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f023 0303 	bic.w	r3, r3, #3
 800d1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f023 0302 	bic.w	r3, r3, #2
 800d1e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a21      	ldr	r2, [pc, #132]	; (800d278 <TIM_OC1_SetConfig+0xdc>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d003      	beq.n	800d200 <TIM_OC1_SetConfig+0x64>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a20      	ldr	r2, [pc, #128]	; (800d27c <TIM_OC1_SetConfig+0xe0>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d10c      	bne.n	800d21a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0308 	bic.w	r3, r3, #8
 800d206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	4313      	orrs	r3, r2
 800d210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f023 0304 	bic.w	r3, r3, #4
 800d218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a16      	ldr	r2, [pc, #88]	; (800d278 <TIM_OC1_SetConfig+0xdc>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d003      	beq.n	800d22a <TIM_OC1_SetConfig+0x8e>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a15      	ldr	r2, [pc, #84]	; (800d27c <TIM_OC1_SetConfig+0xe0>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d111      	bne.n	800d24e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	4313      	orrs	r3, r2
 800d242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	621a      	str	r2, [r3, #32]
}
 800d268:	bf00      	nop
 800d26a:	371c      	adds	r7, #28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	fffeff8f 	.word	0xfffeff8f
 800d278:	40010000 	.word	0x40010000
 800d27c:	40010400 	.word	0x40010400

0800d280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d280:	b480      	push	{r7}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	f023 0210 	bic.w	r2, r3, #16
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	4b2e      	ldr	r3, [pc, #184]	; (800d364 <TIM_OC2_SetConfig+0xe4>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f023 0320 	bic.w	r3, r3, #32
 800d2ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a23      	ldr	r2, [pc, #140]	; (800d368 <TIM_OC2_SetConfig+0xe8>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d003      	beq.n	800d2e8 <TIM_OC2_SetConfig+0x68>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a22      	ldr	r2, [pc, #136]	; (800d36c <TIM_OC2_SetConfig+0xec>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d10d      	bne.n	800d304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	011b      	lsls	r3, r3, #4
 800d2f6:	697a      	ldr	r2, [r7, #20]
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a18      	ldr	r2, [pc, #96]	; (800d368 <TIM_OC2_SetConfig+0xe8>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d003      	beq.n	800d314 <TIM_OC2_SetConfig+0x94>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a17      	ldr	r2, [pc, #92]	; (800d36c <TIM_OC2_SetConfig+0xec>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d113      	bne.n	800d33c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d31a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	695b      	ldr	r3, [r3, #20]
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	4313      	orrs	r3, r2
 800d33a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	621a      	str	r2, [r3, #32]
}
 800d356:	bf00      	nop
 800d358:	371c      	adds	r7, #28
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	feff8fff 	.word	0xfeff8fff
 800d368:	40010000 	.word	0x40010000
 800d36c:	40010400 	.word	0x40010400

0800d370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4b2d      	ldr	r3, [pc, #180]	; (800d450 <TIM_OC3_SetConfig+0xe0>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f023 0303 	bic.w	r3, r3, #3
 800d3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	021b      	lsls	r3, r3, #8
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a22      	ldr	r2, [pc, #136]	; (800d454 <TIM_OC3_SetConfig+0xe4>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d003      	beq.n	800d3d6 <TIM_OC3_SetConfig+0x66>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a21      	ldr	r2, [pc, #132]	; (800d458 <TIM_OC3_SetConfig+0xe8>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d10d      	bne.n	800d3f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a17      	ldr	r2, [pc, #92]	; (800d454 <TIM_OC3_SetConfig+0xe4>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d003      	beq.n	800d402 <TIM_OC3_SetConfig+0x92>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a16      	ldr	r2, [pc, #88]	; (800d458 <TIM_OC3_SetConfig+0xe8>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d113      	bne.n	800d42a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4313      	orrs	r3, r2
 800d428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	685a      	ldr	r2, [r3, #4]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	621a      	str	r2, [r3, #32]
}
 800d444:	bf00      	nop
 800d446:	371c      	adds	r7, #28
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	fffeff8f 	.word	0xfffeff8f
 800d454:	40010000 	.word	0x40010000
 800d458:	40010400 	.word	0x40010400

0800d45c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a1b      	ldr	r3, [r3, #32]
 800d46a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4b1e      	ldr	r3, [pc, #120]	; (800d500 <TIM_OC4_SetConfig+0xa4>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	021b      	lsls	r3, r3, #8
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	031b      	lsls	r3, r3, #12
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a13      	ldr	r2, [pc, #76]	; (800d504 <TIM_OC4_SetConfig+0xa8>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d003      	beq.n	800d4c4 <TIM_OC4_SetConfig+0x68>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a12      	ldr	r2, [pc, #72]	; (800d508 <TIM_OC4_SetConfig+0xac>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d109      	bne.n	800d4d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	019b      	lsls	r3, r3, #6
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	621a      	str	r2, [r3, #32]
}
 800d4f2:	bf00      	nop
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	feff8fff 	.word	0xfeff8fff
 800d504:	40010000 	.word	0x40010000
 800d508:	40010400 	.word	0x40010400

0800d50c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	4b1b      	ldr	r3, [pc, #108]	; (800d5a4 <TIM_OC5_SetConfig+0x98>)
 800d538:	4013      	ands	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4313      	orrs	r3, r2
 800d544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d54c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	041b      	lsls	r3, r3, #16
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	4313      	orrs	r3, r2
 800d558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a12      	ldr	r2, [pc, #72]	; (800d5a8 <TIM_OC5_SetConfig+0x9c>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d003      	beq.n	800d56a <TIM_OC5_SetConfig+0x5e>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <TIM_OC5_SetConfig+0xa0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d109      	bne.n	800d57e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	697a      	ldr	r2, [r7, #20]
 800d582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	621a      	str	r2, [r3, #32]
}
 800d598:	bf00      	nop
 800d59a:	371c      	adds	r7, #28
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	fffeff8f 	.word	0xfffeff8f
 800d5a8:	40010000 	.word	0x40010000
 800d5ac:	40010400 	.word	0x40010400

0800d5b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	4b1c      	ldr	r3, [pc, #112]	; (800d64c <TIM_OC6_SetConfig+0x9c>)
 800d5dc:	4013      	ands	r3, r2
 800d5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	021b      	lsls	r3, r3, #8
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	051b      	lsls	r3, r3, #20
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4a13      	ldr	r2, [pc, #76]	; (800d650 <TIM_OC6_SetConfig+0xa0>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d003      	beq.n	800d610 <TIM_OC6_SetConfig+0x60>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a12      	ldr	r2, [pc, #72]	; (800d654 <TIM_OC6_SetConfig+0xa4>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d109      	bne.n	800d624 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	029b      	lsls	r3, r3, #10
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	621a      	str	r2, [r3, #32]
}
 800d63e:	bf00      	nop
 800d640:	371c      	adds	r7, #28
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	feff8fff 	.word	0xfeff8fff
 800d650:	40010000 	.word	0x40010000
 800d654:	40010400 	.word	0x40010400

0800d658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	f023 0201 	bic.w	r2, r3, #1
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	011b      	lsls	r3, r3, #4
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f023 030a 	bic.w	r3, r3, #10
 800d694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	621a      	str	r2, [r3, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	b087      	sub	sp, #28
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	f023 0210 	bic.w	r2, r3, #16
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d6e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	031b      	lsls	r3, r3, #12
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d6f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	621a      	str	r2, [r3, #32]
}
 800d70a:	bf00      	nop
 800d70c:	371c      	adds	r7, #28
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d716:	b480      	push	{r7}
 800d718:	b085      	sub	sp, #20
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d72c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4313      	orrs	r3, r2
 800d734:	f043 0307 	orr.w	r3, r3, #7
 800d738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	609a      	str	r2, [r3, #8]
}
 800d740:	bf00      	nop
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	021a      	lsls	r2, r3, #8
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	431a      	orrs	r2, r3
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	4313      	orrs	r3, r2
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	4313      	orrs	r3, r2
 800d778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	609a      	str	r2, [r3, #8]
}
 800d780:	bf00      	nop
 800d782:	371c      	adds	r7, #28
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d101      	bne.n	800d7a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e06d      	b.n	800d880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a30      	ldr	r2, [pc, #192]	; (800d88c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d004      	beq.n	800d7d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a2f      	ldr	r2, [pc, #188]	; (800d890 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d108      	bne.n	800d7ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d7de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a20      	ldr	r2, [pc, #128]	; (800d88c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d022      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d816:	d01d      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d018      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a1c      	ldr	r2, [pc, #112]	; (800d898 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d013      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a1a      	ldr	r2, [pc, #104]	; (800d89c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d00e      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a15      	ldr	r2, [pc, #84]	; (800d890 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d009      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a16      	ldr	r2, [pc, #88]	; (800d8a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d004      	beq.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a15      	ldr	r2, [pc, #84]	; (800d8a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d10c      	bne.n	800d86e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d85a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	4313      	orrs	r3, r2
 800d864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	40010000 	.word	0x40010000
 800d890:	40010400 	.word	0x40010400
 800d894:	40000400 	.word	0x40000400
 800d898:	40000800 	.word	0x40000800
 800d89c:	40000c00 	.word	0x40000c00
 800d8a0:	40014000 	.word	0x40014000
 800d8a4:	40001800 	.word	0x40001800

0800d8a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d101      	bne.n	800d8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	e065      	b.n	800d990 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4313      	orrs	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92a:	4313      	orrs	r3, r2
 800d92c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	041b      	lsls	r3, r3, #16
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a16      	ldr	r2, [pc, #88]	; (800d99c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d004      	beq.n	800d952 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a14      	ldr	r2, [pc, #80]	; (800d9a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d115      	bne.n	800d97e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	051b      	lsls	r3, r3, #20
 800d95e:	4313      	orrs	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	40010000 	.word	0x40010000
 800d9a0:	40010400 	.word	0x40010400

0800d9a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d101      	bne.n	800d9f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e040      	b.n	800da74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f5 fc84 	bl	8003310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2224      	movs	r2, #36	; 0x24
 800da0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f022 0201 	bic.w	r2, r2, #1
 800da1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 f8c0 	bl	800dba4 <UART_SetConfig>
 800da24:	4603      	mov	r3, r0
 800da26:	2b01      	cmp	r3, #1
 800da28:	d101      	bne.n	800da2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e022      	b.n	800da74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	2b00      	cmp	r3, #0
 800da34:	d002      	beq.n	800da3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 fb16 	bl	800e068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f042 0201 	orr.w	r2, r2, #1
 800da6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fb9d 	bl	800e1ac <UART_CheckIdleState>
 800da72:	4603      	mov	r3, r0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08a      	sub	sp, #40	; 0x28
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	603b      	str	r3, [r7, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da90:	2b20      	cmp	r3, #32
 800da92:	f040 8081 	bne.w	800db98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <HAL_UART_Transmit+0x26>
 800da9c:	88fb      	ldrh	r3, [r7, #6]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e079      	b.n	800db9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800daac:	2b01      	cmp	r3, #1
 800daae:	d101      	bne.n	800dab4 <HAL_UART_Transmit+0x38>
 800dab0:	2302      	movs	r3, #2
 800dab2:	e072      	b.n	800db9a <HAL_UART_Transmit+0x11e>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2221      	movs	r2, #33	; 0x21
 800dac8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800daca:	f7f6 fbe5 	bl	8004298 <HAL_GetTick>
 800dace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	88fa      	ldrh	r2, [r7, #6]
 800dad4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	88fa      	ldrh	r2, [r7, #6]
 800dadc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dae8:	d108      	bne.n	800dafc <HAL_UART_Transmit+0x80>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d104      	bne.n	800dafc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800daf2:	2300      	movs	r3, #0
 800daf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	61bb      	str	r3, [r7, #24]
 800dafa:	e003      	b.n	800db04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800db0c:	e02c      	b.n	800db68 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2200      	movs	r2, #0
 800db16:	2180      	movs	r1, #128	; 0x80
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f000 fb7a 	bl	800e212 <UART_WaitOnFlagUntilTimeout>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800db24:	2303      	movs	r3, #3
 800db26:	e038      	b.n	800db9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10b      	bne.n	800db46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	3302      	adds	r3, #2
 800db42:	61bb      	str	r3, [r7, #24]
 800db44:	e007      	b.n	800db56 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	781a      	ldrb	r2, [r3, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	3301      	adds	r3, #1
 800db54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	3b01      	subs	r3, #1
 800db60:	b29a      	uxth	r2, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db6e:	b29b      	uxth	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1cc      	bne.n	800db0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2200      	movs	r2, #0
 800db7c:	2140      	movs	r1, #64	; 0x40
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 fb47 	bl	800e212 <UART_WaitOnFlagUntilTimeout>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e005      	b.n	800db9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2220      	movs	r2, #32
 800db92:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	e000      	b.n	800db9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800db98:	2302      	movs	r3, #2
  }
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3720      	adds	r7, #32
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	689a      	ldr	r2, [r3, #8]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	431a      	orrs	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	695b      	ldr	r3, [r3, #20]
 800dbbe:	431a      	orrs	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	69db      	ldr	r3, [r3, #28]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	4ba7      	ldr	r3, [pc, #668]	; (800de6c <UART_SetConfig+0x2c8>)
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	6812      	ldr	r2, [r2, #0]
 800dbd6:	6979      	ldr	r1, [r7, #20]
 800dbd8:	430b      	orrs	r3, r1
 800dbda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	68da      	ldr	r2, [r3, #12]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a95      	ldr	r2, [pc, #596]	; (800de70 <UART_SetConfig+0x2cc>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d120      	bne.n	800dc62 <UART_SetConfig+0xbe>
 800dc20:	4b94      	ldr	r3, [pc, #592]	; (800de74 <UART_SetConfig+0x2d0>)
 800dc22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d816      	bhi.n	800dc5c <UART_SetConfig+0xb8>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <UART_SetConfig+0x90>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dc45 	.word	0x0800dc45
 800dc38:	0800dc51 	.word	0x0800dc51
 800dc3c:	0800dc4b 	.word	0x0800dc4b
 800dc40:	0800dc57 	.word	0x0800dc57
 800dc44:	2301      	movs	r3, #1
 800dc46:	77fb      	strb	r3, [r7, #31]
 800dc48:	e14f      	b.n	800deea <UART_SetConfig+0x346>
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	77fb      	strb	r3, [r7, #31]
 800dc4e:	e14c      	b.n	800deea <UART_SetConfig+0x346>
 800dc50:	2304      	movs	r3, #4
 800dc52:	77fb      	strb	r3, [r7, #31]
 800dc54:	e149      	b.n	800deea <UART_SetConfig+0x346>
 800dc56:	2308      	movs	r3, #8
 800dc58:	77fb      	strb	r3, [r7, #31]
 800dc5a:	e146      	b.n	800deea <UART_SetConfig+0x346>
 800dc5c:	2310      	movs	r3, #16
 800dc5e:	77fb      	strb	r3, [r7, #31]
 800dc60:	e143      	b.n	800deea <UART_SetConfig+0x346>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a84      	ldr	r2, [pc, #528]	; (800de78 <UART_SetConfig+0x2d4>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d132      	bne.n	800dcd2 <UART_SetConfig+0x12e>
 800dc6c:	4b81      	ldr	r3, [pc, #516]	; (800de74 <UART_SetConfig+0x2d0>)
 800dc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc72:	f003 030c 	and.w	r3, r3, #12
 800dc76:	2b0c      	cmp	r3, #12
 800dc78:	d828      	bhi.n	800dccc <UART_SetConfig+0x128>
 800dc7a:	a201      	add	r2, pc, #4	; (adr r2, 800dc80 <UART_SetConfig+0xdc>)
 800dc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc80:	0800dcb5 	.word	0x0800dcb5
 800dc84:	0800dccd 	.word	0x0800dccd
 800dc88:	0800dccd 	.word	0x0800dccd
 800dc8c:	0800dccd 	.word	0x0800dccd
 800dc90:	0800dcc1 	.word	0x0800dcc1
 800dc94:	0800dccd 	.word	0x0800dccd
 800dc98:	0800dccd 	.word	0x0800dccd
 800dc9c:	0800dccd 	.word	0x0800dccd
 800dca0:	0800dcbb 	.word	0x0800dcbb
 800dca4:	0800dccd 	.word	0x0800dccd
 800dca8:	0800dccd 	.word	0x0800dccd
 800dcac:	0800dccd 	.word	0x0800dccd
 800dcb0:	0800dcc7 	.word	0x0800dcc7
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	77fb      	strb	r3, [r7, #31]
 800dcb8:	e117      	b.n	800deea <UART_SetConfig+0x346>
 800dcba:	2302      	movs	r3, #2
 800dcbc:	77fb      	strb	r3, [r7, #31]
 800dcbe:	e114      	b.n	800deea <UART_SetConfig+0x346>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	77fb      	strb	r3, [r7, #31]
 800dcc4:	e111      	b.n	800deea <UART_SetConfig+0x346>
 800dcc6:	2308      	movs	r3, #8
 800dcc8:	77fb      	strb	r3, [r7, #31]
 800dcca:	e10e      	b.n	800deea <UART_SetConfig+0x346>
 800dccc:	2310      	movs	r3, #16
 800dcce:	77fb      	strb	r3, [r7, #31]
 800dcd0:	e10b      	b.n	800deea <UART_SetConfig+0x346>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a69      	ldr	r2, [pc, #420]	; (800de7c <UART_SetConfig+0x2d8>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d120      	bne.n	800dd1e <UART_SetConfig+0x17a>
 800dcdc:	4b65      	ldr	r3, [pc, #404]	; (800de74 <UART_SetConfig+0x2d0>)
 800dcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dce6:	2b30      	cmp	r3, #48	; 0x30
 800dce8:	d013      	beq.n	800dd12 <UART_SetConfig+0x16e>
 800dcea:	2b30      	cmp	r3, #48	; 0x30
 800dcec:	d814      	bhi.n	800dd18 <UART_SetConfig+0x174>
 800dcee:	2b20      	cmp	r3, #32
 800dcf0:	d009      	beq.n	800dd06 <UART_SetConfig+0x162>
 800dcf2:	2b20      	cmp	r3, #32
 800dcf4:	d810      	bhi.n	800dd18 <UART_SetConfig+0x174>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <UART_SetConfig+0x15c>
 800dcfa:	2b10      	cmp	r3, #16
 800dcfc:	d006      	beq.n	800dd0c <UART_SetConfig+0x168>
 800dcfe:	e00b      	b.n	800dd18 <UART_SetConfig+0x174>
 800dd00:	2300      	movs	r3, #0
 800dd02:	77fb      	strb	r3, [r7, #31]
 800dd04:	e0f1      	b.n	800deea <UART_SetConfig+0x346>
 800dd06:	2302      	movs	r3, #2
 800dd08:	77fb      	strb	r3, [r7, #31]
 800dd0a:	e0ee      	b.n	800deea <UART_SetConfig+0x346>
 800dd0c:	2304      	movs	r3, #4
 800dd0e:	77fb      	strb	r3, [r7, #31]
 800dd10:	e0eb      	b.n	800deea <UART_SetConfig+0x346>
 800dd12:	2308      	movs	r3, #8
 800dd14:	77fb      	strb	r3, [r7, #31]
 800dd16:	e0e8      	b.n	800deea <UART_SetConfig+0x346>
 800dd18:	2310      	movs	r3, #16
 800dd1a:	77fb      	strb	r3, [r7, #31]
 800dd1c:	e0e5      	b.n	800deea <UART_SetConfig+0x346>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a57      	ldr	r2, [pc, #348]	; (800de80 <UART_SetConfig+0x2dc>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d120      	bne.n	800dd6a <UART_SetConfig+0x1c6>
 800dd28:	4b52      	ldr	r3, [pc, #328]	; (800de74 <UART_SetConfig+0x2d0>)
 800dd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dd32:	2bc0      	cmp	r3, #192	; 0xc0
 800dd34:	d013      	beq.n	800dd5e <UART_SetConfig+0x1ba>
 800dd36:	2bc0      	cmp	r3, #192	; 0xc0
 800dd38:	d814      	bhi.n	800dd64 <UART_SetConfig+0x1c0>
 800dd3a:	2b80      	cmp	r3, #128	; 0x80
 800dd3c:	d009      	beq.n	800dd52 <UART_SetConfig+0x1ae>
 800dd3e:	2b80      	cmp	r3, #128	; 0x80
 800dd40:	d810      	bhi.n	800dd64 <UART_SetConfig+0x1c0>
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <UART_SetConfig+0x1a8>
 800dd46:	2b40      	cmp	r3, #64	; 0x40
 800dd48:	d006      	beq.n	800dd58 <UART_SetConfig+0x1b4>
 800dd4a:	e00b      	b.n	800dd64 <UART_SetConfig+0x1c0>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	77fb      	strb	r3, [r7, #31]
 800dd50:	e0cb      	b.n	800deea <UART_SetConfig+0x346>
 800dd52:	2302      	movs	r3, #2
 800dd54:	77fb      	strb	r3, [r7, #31]
 800dd56:	e0c8      	b.n	800deea <UART_SetConfig+0x346>
 800dd58:	2304      	movs	r3, #4
 800dd5a:	77fb      	strb	r3, [r7, #31]
 800dd5c:	e0c5      	b.n	800deea <UART_SetConfig+0x346>
 800dd5e:	2308      	movs	r3, #8
 800dd60:	77fb      	strb	r3, [r7, #31]
 800dd62:	e0c2      	b.n	800deea <UART_SetConfig+0x346>
 800dd64:	2310      	movs	r3, #16
 800dd66:	77fb      	strb	r3, [r7, #31]
 800dd68:	e0bf      	b.n	800deea <UART_SetConfig+0x346>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a45      	ldr	r2, [pc, #276]	; (800de84 <UART_SetConfig+0x2e0>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d125      	bne.n	800ddc0 <UART_SetConfig+0x21c>
 800dd74:	4b3f      	ldr	r3, [pc, #252]	; (800de74 <UART_SetConfig+0x2d0>)
 800dd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd82:	d017      	beq.n	800ddb4 <UART_SetConfig+0x210>
 800dd84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd88:	d817      	bhi.n	800ddba <UART_SetConfig+0x216>
 800dd8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd8e:	d00b      	beq.n	800dda8 <UART_SetConfig+0x204>
 800dd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd94:	d811      	bhi.n	800ddba <UART_SetConfig+0x216>
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d003      	beq.n	800dda2 <UART_SetConfig+0x1fe>
 800dd9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd9e:	d006      	beq.n	800ddae <UART_SetConfig+0x20a>
 800dda0:	e00b      	b.n	800ddba <UART_SetConfig+0x216>
 800dda2:	2300      	movs	r3, #0
 800dda4:	77fb      	strb	r3, [r7, #31]
 800dda6:	e0a0      	b.n	800deea <UART_SetConfig+0x346>
 800dda8:	2302      	movs	r3, #2
 800ddaa:	77fb      	strb	r3, [r7, #31]
 800ddac:	e09d      	b.n	800deea <UART_SetConfig+0x346>
 800ddae:	2304      	movs	r3, #4
 800ddb0:	77fb      	strb	r3, [r7, #31]
 800ddb2:	e09a      	b.n	800deea <UART_SetConfig+0x346>
 800ddb4:	2308      	movs	r3, #8
 800ddb6:	77fb      	strb	r3, [r7, #31]
 800ddb8:	e097      	b.n	800deea <UART_SetConfig+0x346>
 800ddba:	2310      	movs	r3, #16
 800ddbc:	77fb      	strb	r3, [r7, #31]
 800ddbe:	e094      	b.n	800deea <UART_SetConfig+0x346>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a30      	ldr	r2, [pc, #192]	; (800de88 <UART_SetConfig+0x2e4>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d125      	bne.n	800de16 <UART_SetConfig+0x272>
 800ddca:	4b2a      	ldr	r3, [pc, #168]	; (800de74 <UART_SetConfig+0x2d0>)
 800ddcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ddd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ddd8:	d017      	beq.n	800de0a <UART_SetConfig+0x266>
 800ddda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ddde:	d817      	bhi.n	800de10 <UART_SetConfig+0x26c>
 800dde0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dde4:	d00b      	beq.n	800ddfe <UART_SetConfig+0x25a>
 800dde6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddea:	d811      	bhi.n	800de10 <UART_SetConfig+0x26c>
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d003      	beq.n	800ddf8 <UART_SetConfig+0x254>
 800ddf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddf4:	d006      	beq.n	800de04 <UART_SetConfig+0x260>
 800ddf6:	e00b      	b.n	800de10 <UART_SetConfig+0x26c>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	77fb      	strb	r3, [r7, #31]
 800ddfc:	e075      	b.n	800deea <UART_SetConfig+0x346>
 800ddfe:	2302      	movs	r3, #2
 800de00:	77fb      	strb	r3, [r7, #31]
 800de02:	e072      	b.n	800deea <UART_SetConfig+0x346>
 800de04:	2304      	movs	r3, #4
 800de06:	77fb      	strb	r3, [r7, #31]
 800de08:	e06f      	b.n	800deea <UART_SetConfig+0x346>
 800de0a:	2308      	movs	r3, #8
 800de0c:	77fb      	strb	r3, [r7, #31]
 800de0e:	e06c      	b.n	800deea <UART_SetConfig+0x346>
 800de10:	2310      	movs	r3, #16
 800de12:	77fb      	strb	r3, [r7, #31]
 800de14:	e069      	b.n	800deea <UART_SetConfig+0x346>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a1c      	ldr	r2, [pc, #112]	; (800de8c <UART_SetConfig+0x2e8>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d137      	bne.n	800de90 <UART_SetConfig+0x2ec>
 800de20:	4b14      	ldr	r3, [pc, #80]	; (800de74 <UART_SetConfig+0x2d0>)
 800de22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800de2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de2e:	d017      	beq.n	800de60 <UART_SetConfig+0x2bc>
 800de30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de34:	d817      	bhi.n	800de66 <UART_SetConfig+0x2c2>
 800de36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de3a:	d00b      	beq.n	800de54 <UART_SetConfig+0x2b0>
 800de3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de40:	d811      	bhi.n	800de66 <UART_SetConfig+0x2c2>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <UART_SetConfig+0x2aa>
 800de46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de4a:	d006      	beq.n	800de5a <UART_SetConfig+0x2b6>
 800de4c:	e00b      	b.n	800de66 <UART_SetConfig+0x2c2>
 800de4e:	2300      	movs	r3, #0
 800de50:	77fb      	strb	r3, [r7, #31]
 800de52:	e04a      	b.n	800deea <UART_SetConfig+0x346>
 800de54:	2302      	movs	r3, #2
 800de56:	77fb      	strb	r3, [r7, #31]
 800de58:	e047      	b.n	800deea <UART_SetConfig+0x346>
 800de5a:	2304      	movs	r3, #4
 800de5c:	77fb      	strb	r3, [r7, #31]
 800de5e:	e044      	b.n	800deea <UART_SetConfig+0x346>
 800de60:	2308      	movs	r3, #8
 800de62:	77fb      	strb	r3, [r7, #31]
 800de64:	e041      	b.n	800deea <UART_SetConfig+0x346>
 800de66:	2310      	movs	r3, #16
 800de68:	77fb      	strb	r3, [r7, #31]
 800de6a:	e03e      	b.n	800deea <UART_SetConfig+0x346>
 800de6c:	efff69f3 	.word	0xefff69f3
 800de70:	40011000 	.word	0x40011000
 800de74:	40023800 	.word	0x40023800
 800de78:	40004400 	.word	0x40004400
 800de7c:	40004800 	.word	0x40004800
 800de80:	40004c00 	.word	0x40004c00
 800de84:	40005000 	.word	0x40005000
 800de88:	40011400 	.word	0x40011400
 800de8c:	40007800 	.word	0x40007800
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a71      	ldr	r2, [pc, #452]	; (800e05c <UART_SetConfig+0x4b8>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d125      	bne.n	800dee6 <UART_SetConfig+0x342>
 800de9a:	4b71      	ldr	r3, [pc, #452]	; (800e060 <UART_SetConfig+0x4bc>)
 800de9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dea4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dea8:	d017      	beq.n	800deda <UART_SetConfig+0x336>
 800deaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800deae:	d817      	bhi.n	800dee0 <UART_SetConfig+0x33c>
 800deb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb4:	d00b      	beq.n	800dece <UART_SetConfig+0x32a>
 800deb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deba:	d811      	bhi.n	800dee0 <UART_SetConfig+0x33c>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d003      	beq.n	800dec8 <UART_SetConfig+0x324>
 800dec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dec4:	d006      	beq.n	800ded4 <UART_SetConfig+0x330>
 800dec6:	e00b      	b.n	800dee0 <UART_SetConfig+0x33c>
 800dec8:	2300      	movs	r3, #0
 800deca:	77fb      	strb	r3, [r7, #31]
 800decc:	e00d      	b.n	800deea <UART_SetConfig+0x346>
 800dece:	2302      	movs	r3, #2
 800ded0:	77fb      	strb	r3, [r7, #31]
 800ded2:	e00a      	b.n	800deea <UART_SetConfig+0x346>
 800ded4:	2304      	movs	r3, #4
 800ded6:	77fb      	strb	r3, [r7, #31]
 800ded8:	e007      	b.n	800deea <UART_SetConfig+0x346>
 800deda:	2308      	movs	r3, #8
 800dedc:	77fb      	strb	r3, [r7, #31]
 800dede:	e004      	b.n	800deea <UART_SetConfig+0x346>
 800dee0:	2310      	movs	r3, #16
 800dee2:	77fb      	strb	r3, [r7, #31]
 800dee4:	e001      	b.n	800deea <UART_SetConfig+0x346>
 800dee6:	2310      	movs	r3, #16
 800dee8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	69db      	ldr	r3, [r3, #28]
 800deee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800def2:	d15b      	bne.n	800dfac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800def4:	7ffb      	ldrb	r3, [r7, #31]
 800def6:	2b08      	cmp	r3, #8
 800def8:	d827      	bhi.n	800df4a <UART_SetConfig+0x3a6>
 800defa:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <UART_SetConfig+0x35c>)
 800defc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df00:	0800df25 	.word	0x0800df25
 800df04:	0800df2d 	.word	0x0800df2d
 800df08:	0800df35 	.word	0x0800df35
 800df0c:	0800df4b 	.word	0x0800df4b
 800df10:	0800df3b 	.word	0x0800df3b
 800df14:	0800df4b 	.word	0x0800df4b
 800df18:	0800df4b 	.word	0x0800df4b
 800df1c:	0800df4b 	.word	0x0800df4b
 800df20:	0800df43 	.word	0x0800df43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df24:	f7fb fed0 	bl	8009cc8 <HAL_RCC_GetPCLK1Freq>
 800df28:	61b8      	str	r0, [r7, #24]
        break;
 800df2a:	e013      	b.n	800df54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df2c:	f7fb fee0 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800df30:	61b8      	str	r0, [r7, #24]
        break;
 800df32:	e00f      	b.n	800df54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df34:	4b4b      	ldr	r3, [pc, #300]	; (800e064 <UART_SetConfig+0x4c0>)
 800df36:	61bb      	str	r3, [r7, #24]
        break;
 800df38:	e00c      	b.n	800df54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df3a:	f7fb fe03 	bl	8009b44 <HAL_RCC_GetSysClockFreq>
 800df3e:	61b8      	str	r0, [r7, #24]
        break;
 800df40:	e008      	b.n	800df54 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df46:	61bb      	str	r3, [r7, #24]
        break;
 800df48:	e004      	b.n	800df54 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800df4a:	2300      	movs	r3, #0
 800df4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	77bb      	strb	r3, [r7, #30]
        break;
 800df52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d074      	beq.n	800e044 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	005a      	lsls	r2, r3, #1
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	085b      	lsrs	r3, r3, #1
 800df64:	441a      	add	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6e:	b29b      	uxth	r3, r3
 800df70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b0f      	cmp	r3, #15
 800df76:	d916      	bls.n	800dfa6 <UART_SetConfig+0x402>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df7e:	d212      	bcs.n	800dfa6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	b29b      	uxth	r3, r3
 800df84:	f023 030f 	bic.w	r3, r3, #15
 800df88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	085b      	lsrs	r3, r3, #1
 800df8e:	b29b      	uxth	r3, r3
 800df90:	f003 0307 	and.w	r3, r3, #7
 800df94:	b29a      	uxth	r2, r3
 800df96:	89fb      	ldrh	r3, [r7, #14]
 800df98:	4313      	orrs	r3, r2
 800df9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	89fa      	ldrh	r2, [r7, #14]
 800dfa2:	60da      	str	r2, [r3, #12]
 800dfa4:	e04e      	b.n	800e044 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	77bb      	strb	r3, [r7, #30]
 800dfaa:	e04b      	b.n	800e044 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dfac:	7ffb      	ldrb	r3, [r7, #31]
 800dfae:	2b08      	cmp	r3, #8
 800dfb0:	d827      	bhi.n	800e002 <UART_SetConfig+0x45e>
 800dfb2:	a201      	add	r2, pc, #4	; (adr r2, 800dfb8 <UART_SetConfig+0x414>)
 800dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb8:	0800dfdd 	.word	0x0800dfdd
 800dfbc:	0800dfe5 	.word	0x0800dfe5
 800dfc0:	0800dfed 	.word	0x0800dfed
 800dfc4:	0800e003 	.word	0x0800e003
 800dfc8:	0800dff3 	.word	0x0800dff3
 800dfcc:	0800e003 	.word	0x0800e003
 800dfd0:	0800e003 	.word	0x0800e003
 800dfd4:	0800e003 	.word	0x0800e003
 800dfd8:	0800dffb 	.word	0x0800dffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfdc:	f7fb fe74 	bl	8009cc8 <HAL_RCC_GetPCLK1Freq>
 800dfe0:	61b8      	str	r0, [r7, #24]
        break;
 800dfe2:	e013      	b.n	800e00c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfe4:	f7fb fe84 	bl	8009cf0 <HAL_RCC_GetPCLK2Freq>
 800dfe8:	61b8      	str	r0, [r7, #24]
        break;
 800dfea:	e00f      	b.n	800e00c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfec:	4b1d      	ldr	r3, [pc, #116]	; (800e064 <UART_SetConfig+0x4c0>)
 800dfee:	61bb      	str	r3, [r7, #24]
        break;
 800dff0:	e00c      	b.n	800e00c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dff2:	f7fb fda7 	bl	8009b44 <HAL_RCC_GetSysClockFreq>
 800dff6:	61b8      	str	r0, [r7, #24]
        break;
 800dff8:	e008      	b.n	800e00c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dffe:	61bb      	str	r3, [r7, #24]
        break;
 800e000:	e004      	b.n	800e00c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800e002:	2300      	movs	r3, #0
 800e004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	77bb      	strb	r3, [r7, #30]
        break;
 800e00a:	bf00      	nop
    }

    if (pclk != 0U)
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d018      	beq.n	800e044 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	085a      	lsrs	r2, r3, #1
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	441a      	add	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	fbb2 f3f3 	udiv	r3, r2, r3
 800e024:	b29b      	uxth	r3, r3
 800e026:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2b0f      	cmp	r3, #15
 800e02c:	d908      	bls.n	800e040 <UART_SetConfig+0x49c>
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e034:	d204      	bcs.n	800e040 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	60da      	str	r2, [r3, #12]
 800e03e:	e001      	b.n	800e044 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e050:	7fbb      	ldrb	r3, [r7, #30]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	40007c00 	.word	0x40007c00
 800e060:	40023800 	.word	0x40023800
 800e064:	00f42400 	.word	0x00f42400

0800e068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00a      	beq.n	800e092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	430a      	orrs	r2, r1
 800e090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	f003 0302 	and.w	r3, r3, #2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00a      	beq.n	800e0b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00a      	beq.n	800e0d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00a      	beq.n	800e0f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fc:	f003 0310 	and.w	r3, r3, #16
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00a      	beq.n	800e11a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	430a      	orrs	r2, r1
 800e118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	f003 0320 	and.w	r3, r3, #32
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00a      	beq.n	800e13c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	430a      	orrs	r2, r1
 800e13a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01a      	beq.n	800e17e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	430a      	orrs	r2, r1
 800e15c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e166:	d10a      	bne.n	800e17e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	430a      	orrs	r2, r1
 800e17c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00a      	beq.n	800e1a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	430a      	orrs	r2, r1
 800e19e:	605a      	str	r2, [r3, #4]
  }
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1bc:	f7f6 f86c 	bl	8004298 <HAL_GetTick>
 800e1c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 0308 	and.w	r3, r3, #8
 800e1cc:	2b08      	cmp	r3, #8
 800e1ce:	d10e      	bne.n	800e1ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f817 	bl	800e212 <UART_WaitOnFlagUntilTimeout>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e00d      	b.n	800e20a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2220      	movs	r2, #32
 800e1f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2220      	movs	r2, #32
 800e1f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	4613      	mov	r3, r2
 800e220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e222:	e05e      	b.n	800e2e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e22a:	d05a      	beq.n	800e2e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e22c:	f7f6 f834 	bl	8004298 <HAL_GetTick>
 800e230:	4602      	mov	r2, r0
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d302      	bcc.n	800e242 <UART_WaitOnFlagUntilTimeout+0x30>
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d11b      	bne.n	800e27a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e250:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689a      	ldr	r2, [r3, #8]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f022 0201 	bic.w	r2, r2, #1
 800e260:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2220      	movs	r2, #32
 800e266:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2220      	movs	r2, #32
 800e26c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e043      	b.n	800e302 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	2b00      	cmp	r3, #0
 800e286:	d02c      	beq.n	800e2e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e296:	d124      	bne.n	800e2e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e2b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0201 	bic.w	r2, r2, #1
 800e2c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2220      	movs	r2, #32
 800e2cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2220      	movs	r2, #32
 800e2d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e2de:	2303      	movs	r3, #3
 800e2e0:	e00f      	b.n	800e302 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	69da      	ldr	r2, [r3, #28]
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	bf0c      	ite	eq
 800e2f2:	2301      	moveq	r3, #1
 800e2f4:	2300      	movne	r3, #0
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d091      	beq.n	800e224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b01      	cmp	r3, #1
 800e324:	d027      	beq.n	800e376 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	4b2f      	ldr	r3, [pc, #188]	; (800e3ec <FMC_SDRAM_Init+0xe0>)
 800e330:	4013      	ands	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e33c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800e342:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800e348:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800e34e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800e354:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800e35a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800e360:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e366:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	e032      	b.n	800e3dc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e382:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e38c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e392:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	4313      	orrs	r3, r2
 800e398:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	4b12      	ldr	r3, [pc, #72]	; (800e3ec <FMC_SDRAM_Init+0xe0>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e3b0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800e3b6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800e3bc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800e3c2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800e3c8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	ffff8000 	.word	0xffff8000

0800e3f0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d02e      	beq.n	800e468 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e416:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	3b01      	subs	r3, #1
 800e424:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e426:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800e430:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	3b01      	subs	r3, #1
 800e438:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800e43a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	3b01      	subs	r3, #1
 800e442:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800e444:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	695b      	ldr	r3, [r3, #20]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800e44e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	3b01      	subs	r3, #1
 800e456:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e458:	4313      	orrs	r3, r2
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	609a      	str	r2, [r3, #8]
 800e466:	e039      	b.n	800e4dc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	4b1e      	ldr	r3, [pc, #120]	; (800e4ec <FMC_SDRAM_Timing_Init+0xfc>)
 800e472:	4013      	ands	r3, r2
 800e474:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	3b01      	subs	r3, #1
 800e47c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	3b01      	subs	r3, #1
 800e484:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800e486:	4313      	orrs	r3, r2
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e49a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e4aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800e4b4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800e4be:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	693a      	ldr	r2, [r7, #16]
 800e4da:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	ff0f0fff 	.word	0xff0f0fff

0800e4f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	691a      	ldr	r2, [r3, #16]
 800e500:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <FMC_SDRAM_SendCommand+0x44>)
 800e502:	4013      	ands	r3, r2
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	6811      	ldr	r1, [r2, #0]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	6852      	ldr	r2, [r2, #4]
 800e50c:	4311      	orrs	r1, r2
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	6892      	ldr	r2, [r2, #8]
 800e512:	3a01      	subs	r2, #1
 800e514:	0152      	lsls	r2, r2, #5
 800e516:	4311      	orrs	r1, r2
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	68d2      	ldr	r2, [r2, #12]
 800e51c:	0252      	lsls	r2, r2, #9
 800e51e:	430a      	orrs	r2, r1
 800e520:	431a      	orrs	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	ffc00000 	.word	0xffc00000

0800e538 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	695a      	ldr	r2, [r3, #20]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	431a      	orrs	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
	...

0800e560 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e560:	b084      	sub	sp, #16
 800e562:	b480      	push	{r7}
 800e564:	b085      	sub	sp, #20
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	f107 001c 	add.w	r0, r7, #28
 800e56e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e576:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e578:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e57a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e57e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e582:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e586:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e58a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	4313      	orrs	r3, r2
 800e590:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	4b07      	ldr	r3, [pc, #28]	; (800e5b4 <SDMMC_Init+0x54>)
 800e598:	4013      	ands	r3, r2
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	431a      	orrs	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	b004      	add	sp, #16
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	ffff8100 	.word	0xffff8100

0800e5b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	370c      	adds	r7, #12
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2203      	movs	r2, #3
 800e600:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e602:	2002      	movs	r0, #2
 800e604:	f7f5 fe54 	bl	80042b0 <HAL_Delay>
  
  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 0303 	and.w	r3, r3, #3
}
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
	...

0800e630 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e64e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e654:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e65a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	4313      	orrs	r3, r2
 800e660:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68da      	ldr	r2, [r3, #12]
 800e666:	4b06      	ldr	r3, [pc, #24]	; (800e680 <SDMMC_SendCommand+0x50>)
 800e668:	4013      	ands	r3, r2
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	431a      	orrs	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e672:	2300      	movs	r3, #0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	fffff000 	.word	0xfffff000

0800e684 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	b2db      	uxtb	r3, r3
}
 800e692:	4618      	mov	r0, r3
 800e694:	370c      	adds	r7, #12
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b085      	sub	sp, #20
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	3314      	adds	r3, #20
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
}  
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e6ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e6f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e6f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e702:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	431a      	orrs	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0

}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e72a:	2310      	movs	r3, #16
 800e72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e72e:	2340      	movs	r3, #64	; 0x40
 800e730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e73c:	f107 0308 	add.w	r3, r7, #8
 800e740:	4619      	mov	r1, r3
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff ff74 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e748:	f241 3288 	movw	r2, #5000	; 0x1388
 800e74c:	2110      	movs	r1, #16
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fa46 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e756:	69fb      	ldr	r3, [r7, #28]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3720      	adds	r7, #32
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e76e:	2311      	movs	r3, #17
 800e770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e772:	2340      	movs	r3, #64	; 0x40
 800e774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e77e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e780:	f107 0308 	add.w	r3, r7, #8
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff ff52 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e790:	2111      	movs	r1, #17
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fa24 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e79a:	69fb      	ldr	r3, [r7, #28]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3720      	adds	r7, #32
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e7b2:	2312      	movs	r3, #18
 800e7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7b6:	2340      	movs	r3, #64	; 0x40
 800e7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7c4:	f107 0308 	add.w	r3, r7, #8
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff ff30 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7d4:	2112      	movs	r1, #18
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 fa02 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7de:	69fb      	ldr	r3, [r7, #28]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3720      	adds	r7, #32
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b088      	sub	sp, #32
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e7f6:	2318      	movs	r3, #24
 800e7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7fa:	2340      	movs	r3, #64	; 0x40
 800e7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7fe:	2300      	movs	r3, #0
 800e800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e808:	f107 0308 	add.w	r3, r7, #8
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff ff0e 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e814:	f241 3288 	movw	r2, #5000	; 0x1388
 800e818:	2118      	movs	r1, #24
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f9e0 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e822:	69fb      	ldr	r3, [r7, #28]
}
 800e824:	4618      	mov	r0, r3
 800e826:	3720      	adds	r7, #32
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e83a:	2319      	movs	r3, #25
 800e83c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e83e:	2340      	movs	r3, #64	; 0x40
 800e840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e842:	2300      	movs	r3, #0
 800e844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e84c:	f107 0308 	add.w	r3, r7, #8
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7ff feec 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e858:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85c:	2119      	movs	r1, #25
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 f9be 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e866:	69fb      	ldr	r3, [r7, #28]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3720      	adds	r7, #32
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e878:	2300      	movs	r3, #0
 800e87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e87c:	230c      	movs	r3, #12
 800e87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e880:	2340      	movs	r3, #64	; 0x40
 800e882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e88e:	f107 0308 	add.w	r3, r7, #8
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff fecb 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e89a:	4a05      	ldr	r2, [pc, #20]	; (800e8b0 <SDMMC_CmdStopTransfer+0x40>)
 800e89c:	210c      	movs	r1, #12
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f99e 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8a6:	69fb      	ldr	r3, [r7, #28]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	05f5e100 	.word	0x05f5e100

0800e8b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e8c4:	2307      	movs	r3, #7
 800e8c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8c8:	2340      	movs	r3, #64	; 0x40
 800e8ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8d4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8d6:	f107 0310 	add.w	r3, r7, #16
 800e8da:	4619      	mov	r1, r3
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7ff fea7 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8e6:	2107      	movs	r1, #7
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 f979 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e8ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3728      	adds	r7, #40	; 0x28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b088      	sub	sp, #32
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e902:	2300      	movs	r3, #0
 800e904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e90a:	2300      	movs	r3, #0
 800e90c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e916:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e918:	f107 0308 	add.w	r3, r7, #8
 800e91c:	4619      	mov	r1, r3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f7ff fe86 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f92f 	bl	800eb88 <SDMMC_GetCmdError>
 800e92a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e92c:	69fb      	ldr	r3, [r7, #28]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3720      	adds	r7, #32
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b088      	sub	sp, #32
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e93e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e944:	2308      	movs	r3, #8
 800e946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e948:	2340      	movs	r3, #64	; 0x40
 800e94a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e94c:	2300      	movs	r3, #0
 800e94e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e954:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e956:	f107 0308 	add.w	r3, r7, #8
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff fe67 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 fb26 	bl	800efb4 <SDMMC_GetCmdResp7>
 800e968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e96a:	69fb      	ldr	r3, [r7, #28]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e982:	2337      	movs	r3, #55	; 0x37
 800e984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e986:	2340      	movs	r3, #64	; 0x40
 800e988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e98a:	2300      	movs	r3, #0
 800e98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e994:	f107 0308 	add.w	r3, r7, #8
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fe48 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9a4:	2137      	movs	r1, #55	; 0x37
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f91a 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800e9ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9ae:	69fb      	ldr	r3, [r7, #28]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3720      	adds	r7, #32
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	4b0d      	ldr	r3, [pc, #52]	; (800e9fc <SDMMC_CmdAppOperCommand+0x44>)
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e9ca:	2329      	movs	r3, #41	; 0x29
 800e9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9ce:	2340      	movs	r3, #64	; 0x40
 800e9d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9dc:	f107 0308 	add.w	r3, r7, #8
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7ff fe24 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fa2f 	bl	800ee4c <SDMMC_GetCmdResp3>
 800e9ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3720      	adds	r7, #32
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	80100000 	.word	0x80100000

0800ea00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ea0e:	2306      	movs	r3, #6
 800ea10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea12:	2340      	movs	r3, #64	; 0x40
 800ea14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea16:	2300      	movs	r3, #0
 800ea18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea20:	f107 0308 	add.w	r3, r7, #8
 800ea24:	4619      	mov	r1, r3
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff fe02 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ea2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea30:	2106      	movs	r1, #6
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f8d4 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800ea38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3720      	adds	r7, #32
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ea50:	2333      	movs	r3, #51	; 0x33
 800ea52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea54:	2340      	movs	r3, #64	; 0x40
 800ea56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea62:	f107 0308 	add.w	r3, r7, #8
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff fde1 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ea6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea72:	2133      	movs	r1, #51	; 0x33
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f8b3 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800ea7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7c:	69fb      	ldr	r3, [r7, #28]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3720      	adds	r7, #32
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b088      	sub	sp, #32
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ea92:	2302      	movs	r3, #2
 800ea94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea96:	23c0      	movs	r3, #192	; 0xc0
 800ea98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaa4:	f107 0308 	add.w	r3, r7, #8
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff fdc0 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f983 	bl	800edbc <SDMMC_GetCmdResp2>
 800eab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eab8:	69fb      	ldr	r3, [r7, #28]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3720      	adds	r7, #32
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b088      	sub	sp, #32
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ead0:	2309      	movs	r3, #9
 800ead2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ead4:	23c0      	movs	r3, #192	; 0xc0
 800ead6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ead8:	2300      	movs	r3, #0
 800eada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eae2:	f107 0308 	add.w	r3, r7, #8
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff fda1 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f964 	bl	800edbc <SDMMC_GetCmdResp2>
 800eaf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaf6:	69fb      	ldr	r3, [r7, #28]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3720      	adds	r7, #32
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b088      	sub	sp, #32
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb12:	2340      	movs	r3, #64	; 0x40
 800eb14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb16:	2300      	movs	r3, #0
 800eb18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb20:	f107 0308 	add.w	r3, r7, #8
 800eb24:	4619      	mov	r1, r3
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7ff fd82 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	2103      	movs	r1, #3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f9c9 	bl	800eec8 <SDMMC_GetCmdResp6>
 800eb36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb38:	69fb      	ldr	r3, [r7, #28]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3720      	adds	r7, #32
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b088      	sub	sp, #32
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
 800eb4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eb50:	230d      	movs	r3, #13
 800eb52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb54:	2340      	movs	r3, #64	; 0x40
 800eb56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb62:	f107 0308 	add.w	r3, r7, #8
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff fd61 	bl	800e630 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800eb6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb72:	210d      	movs	r1, #13
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f833 	bl	800ebe0 <SDMMC_GetCmdResp1>
 800eb7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb90:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <SDMMC_GetCmdError+0x50>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a11      	ldr	r2, [pc, #68]	; (800ebdc <SDMMC_GetCmdError+0x54>)
 800eb96:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9a:	0a5b      	lsrs	r3, r3, #9
 800eb9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eba0:	fb02 f303 	mul.w	r3, r2, r3
 800eba4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	1e5a      	subs	r2, r3, #1
 800ebaa:	60fa      	str	r2, [r7, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebb4:	e009      	b.n	800ebca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d0f1      	beq.n	800eba6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	22c5      	movs	r2, #197	; 0xc5
 800ebc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	20000000 	.word	0x20000000
 800ebdc:	10624dd3 	.word	0x10624dd3

0800ebe0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ebee:	4b70      	ldr	r3, [pc, #448]	; (800edb0 <SDMMC_GetCmdResp1+0x1d0>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a70      	ldr	r2, [pc, #448]	; (800edb4 <SDMMC_GetCmdResp1+0x1d4>)
 800ebf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf8:	0a5a      	lsrs	r2, r3, #9
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	fb02 f303 	mul.w	r3, r2, r3
 800ec00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	1e5a      	subs	r2, r3, #1
 800ec06:	61fa      	str	r2, [r7, #28]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec10:	e0c9      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0ef      	beq.n	800ec02 <SDMMC_GetCmdResp1+0x22>
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1ea      	bne.n	800ec02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec30:	f003 0304 	and.w	r3, r3, #4
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d004      	beq.n	800ec42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2204      	movs	r2, #4
 800ec3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec3e:	2304      	movs	r3, #4
 800ec40:	e0b1      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d004      	beq.n	800ec58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2201      	movs	r2, #1
 800ec52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e0a6      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	22c5      	movs	r2, #197	; 0xc5
 800ec5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff fd10 	bl	800e684 <SDMMC_GetCommandResponse>
 800ec64:	4603      	mov	r3, r0
 800ec66:	461a      	mov	r2, r3
 800ec68:	7afb      	ldrb	r3, [r7, #11]
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d001      	beq.n	800ec72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e099      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ec72:	2100      	movs	r1, #0
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff fd12 	bl	800e69e <SDMMC_GetResponse>
 800ec7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	4b4e      	ldr	r3, [pc, #312]	; (800edb8 <SDMMC_GetCmdResp1+0x1d8>)
 800ec80:	4013      	ands	r3, r2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ec86:	2300      	movs	r3, #0
 800ec88:	e08d      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	da02      	bge.n	800ec96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ec90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ec94:	e087      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eca0:	2340      	movs	r3, #64	; 0x40
 800eca2:	e080      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ecae:	2380      	movs	r3, #128	; 0x80
 800ecb0:	e079      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ecbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecc0:	e071      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecd0:	e069      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ecdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ece0:	e061      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ecec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ecf0:	e059      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ecfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed00:	e051      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed10:	e049      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed20:	e041      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ed2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed30:	e039      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed40:	e031      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed50:	e029      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed60:	e021      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ed6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed70:	e019      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ed7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed80:	e011      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ed8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed90:	e009      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	f003 0308 	and.w	r3, r3, #8
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ed9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eda0:	e001      	b.n	800eda6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eda2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	20000000 	.word	0x20000000
 800edb4:	10624dd3 	.word	0x10624dd3
 800edb8:	fdffe008 	.word	0xfdffe008

0800edbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800edc4:	4b1f      	ldr	r3, [pc, #124]	; (800ee44 <SDMMC_GetCmdResp2+0x88>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a1f      	ldr	r2, [pc, #124]	; (800ee48 <SDMMC_GetCmdResp2+0x8c>)
 800edca:	fba2 2303 	umull	r2, r3, r2, r3
 800edce:	0a5b      	lsrs	r3, r3, #9
 800edd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800edd4:	fb02 f303 	mul.w	r3, r2, r3
 800edd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	1e5a      	subs	r2, r3, #1
 800edde:	60fa      	str	r2, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d102      	bne.n	800edea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ede4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ede8:	e026      	b.n	800ee38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d0ef      	beq.n	800edda <SDMMC_GetCmdResp2+0x1e>
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1ea      	bne.n	800edda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee08:	f003 0304 	and.w	r3, r3, #4
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d004      	beq.n	800ee1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2204      	movs	r2, #4
 800ee14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee16:	2304      	movs	r3, #4
 800ee18:	e00e      	b.n	800ee38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee1e:	f003 0301 	and.w	r3, r3, #1
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d004      	beq.n	800ee30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e003      	b.n	800ee38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	22c5      	movs	r2, #197	; 0xc5
 800ee34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3714      	adds	r7, #20
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	20000000 	.word	0x20000000
 800ee48:	10624dd3 	.word	0x10624dd3

0800ee4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee54:	4b1a      	ldr	r3, [pc, #104]	; (800eec0 <SDMMC_GetCmdResp3+0x74>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a1a      	ldr	r2, [pc, #104]	; (800eec4 <SDMMC_GetCmdResp3+0x78>)
 800ee5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee5e:	0a5b      	lsrs	r3, r3, #9
 800ee60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee64:	fb02 f303 	mul.w	r3, r2, r3
 800ee68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	1e5a      	subs	r2, r3, #1
 800ee6e:	60fa      	str	r2, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d102      	bne.n	800ee7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee78:	e01b      	b.n	800eeb2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d0ef      	beq.n	800ee6a <SDMMC_GetCmdResp3+0x1e>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1ea      	bne.n	800ee6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee98:	f003 0304 	and.w	r3, r3, #4
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d004      	beq.n	800eeaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2204      	movs	r2, #4
 800eea4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eea6:	2304      	movs	r3, #4
 800eea8:	e003      	b.n	800eeb2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	22c5      	movs	r2, #197	; 0xc5
 800eeae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	20000000 	.word	0x20000000
 800eec4:	10624dd3 	.word	0x10624dd3

0800eec8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	460b      	mov	r3, r1
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eed6:	4b35      	ldr	r3, [pc, #212]	; (800efac <SDMMC_GetCmdResp6+0xe4>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a35      	ldr	r2, [pc, #212]	; (800efb0 <SDMMC_GetCmdResp6+0xe8>)
 800eedc:	fba2 2303 	umull	r2, r3, r2, r3
 800eee0:	0a5b      	lsrs	r3, r3, #9
 800eee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eee6:	fb02 f303 	mul.w	r3, r2, r3
 800eeea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	1e5a      	subs	r2, r3, #1
 800eef0:	61fa      	str	r2, [r7, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d102      	bne.n	800eefc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eef6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eefa:	e052      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d0ef      	beq.n	800eeec <SDMMC_GetCmdResp6+0x24>
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1ea      	bne.n	800eeec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1a:	f003 0304 	and.w	r3, r3, #4
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d004      	beq.n	800ef2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2204      	movs	r2, #4
 800ef26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef28:	2304      	movs	r3, #4
 800ef2a:	e03a      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef30:	f003 0301 	and.w	r3, r3, #1
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e02f      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ef42:	68f8      	ldr	r0, [r7, #12]
 800ef44:	f7ff fb9e 	bl	800e684 <SDMMC_GetCommandResponse>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	7afb      	ldrb	r3, [r7, #11]
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d001      	beq.n	800ef56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef52:	2301      	movs	r3, #1
 800ef54:	e025      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	22c5      	movs	r2, #197	; 0xc5
 800ef5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7ff fb9d 	bl	800e69e <SDMMC_GetResponse>
 800ef64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d106      	bne.n	800ef7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	0c1b      	lsrs	r3, r3, #16
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e011      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d002      	beq.n	800ef8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ef88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef8c:	e009      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d002      	beq.n	800ef9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ef98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef9c:	e001      	b.n	800efa2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ef9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3720      	adds	r7, #32
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	20000000 	.word	0x20000000
 800efb0:	10624dd3 	.word	0x10624dd3

0800efb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800efbc:	4b22      	ldr	r3, [pc, #136]	; (800f048 <SDMMC_GetCmdResp7+0x94>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a22      	ldr	r2, [pc, #136]	; (800f04c <SDMMC_GetCmdResp7+0x98>)
 800efc2:	fba2 2303 	umull	r2, r3, r2, r3
 800efc6:	0a5b      	lsrs	r3, r3, #9
 800efc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800efcc:	fb02 f303 	mul.w	r3, r2, r3
 800efd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	1e5a      	subs	r2, r3, #1
 800efd6:	60fa      	str	r2, [r7, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d102      	bne.n	800efe2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800efe0:	e02c      	b.n	800f03c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0ef      	beq.n	800efd2 <SDMMC_GetCmdResp7+0x1e>
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d1ea      	bne.n	800efd2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f000:	f003 0304 	and.w	r3, r3, #4
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2204      	movs	r2, #4
 800f00c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f00e:	2304      	movs	r3, #4
 800f010:	e014      	b.n	800f03c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d004      	beq.n	800f028 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2201      	movs	r2, #1
 800f022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f024:	2301      	movs	r3, #1
 800f026:	e009      	b.n	800f03c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f030:	2b00      	cmp	r3, #0
 800f032:	d002      	beq.n	800f03a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2240      	movs	r2, #64	; 0x40
 800f038:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f03a:	2300      	movs	r3, #0
  
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	20000000 	.word	0x20000000
 800f04c:	10624dd3 	.word	0x10624dd3

0800f050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f043 0201 	orr.w	r2, r3, #1
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f072:	b480      	push	{r7}
 800f074:	b083      	sub	sp, #12
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	f023 0201 	bic.w	r2, r3, #1
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	019b      	lsls	r3, r3, #6
 800f0a6:	f043 0220 	orr.w	r2, r3, #32
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4a09      	ldr	r2, [pc, #36]	; (800f0dc <USB_FlushTxFifo+0x48>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d901      	bls.n	800f0c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e006      	b.n	800f0ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b20      	cmp	r3, #32
 800f0ca:	d0f0      	beq.n	800f0ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	00030d40 	.word	0x00030d40

0800f0e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2210      	movs	r2, #16
 800f0f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	60fb      	str	r3, [r7, #12]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	4a09      	ldr	r2, [pc, #36]	; (800f120 <USB_FlushRxFifo+0x40>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d901      	bls.n	800f104 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f100:	2303      	movs	r3, #3
 800f102:	e006      	b.n	800f112 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	f003 0310 	and.w	r3, r3, #16
 800f10c:	2b10      	cmp	r3, #16
 800f10e:	d0f0      	beq.n	800f0f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3714      	adds	r7, #20
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	00030d40 	.word	0x00030d40

0800f124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f124:	b480      	push	{r7}
 800f126:	b089      	sub	sp, #36	; 0x24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	4613      	mov	r3, r2
 800f130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f13a:	88fb      	ldrh	r3, [r7, #6]
 800f13c:	3303      	adds	r3, #3
 800f13e:	089b      	lsrs	r3, r3, #2
 800f140:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f142:	2300      	movs	r3, #0
 800f144:	61bb      	str	r3, [r7, #24]
 800f146:	e00b      	b.n	800f160 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	601a      	str	r2, [r3, #0]
    pDest++;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	3304      	adds	r3, #4
 800f158:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	3301      	adds	r3, #1
 800f15e:	61bb      	str	r3, [r7, #24]
 800f160:	69ba      	ldr	r2, [r7, #24]
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	429a      	cmp	r2, r3
 800f166:	d3ef      	bcc.n	800f148 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f168:	69fb      	ldr	r3, [r7, #28]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3724      	adds	r7, #36	; 0x24
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f176:	b480      	push	{r7}
 800f178:	b085      	sub	sp, #20
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	4013      	ands	r3, r2
 800f18c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f18e:	68fb      	ldr	r3, [r7, #12]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	f003 0301 	and.w	r3, r3, #1
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	78fb      	ldrb	r3, [r7, #3]
 800f1e6:	f003 0303 	and.w	r3, r3, #3
 800f1ea:	68f9      	ldr	r1, [r7, #12]
 800f1ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f1f4:	78fb      	ldrb	r3, [r7, #3]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d107      	bne.n	800f20a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f200:	461a      	mov	r2, r3
 800f202:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f206:	6053      	str	r3, [r2, #4]
 800f208:	e009      	b.n	800f21e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d106      	bne.n	800f21e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f216:	461a      	mov	r2, r3
 800f218:	f241 7370 	movw	r3, #6000	; 0x1770
 800f21c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f23e:	695b      	ldr	r3, [r3, #20]
 800f240:	b29b      	uxth	r3, r3
}
 800f242:	4618      	mov	r0, r3
 800f244:	3714      	adds	r7, #20
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f24e:	b480      	push	{r7}
 800f250:	b089      	sub	sp, #36	; 0x24
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	460b      	mov	r3, r1
 800f258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800f25e:	78fb      	ldrb	r3, [r7, #3]
 800f260:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800f262:	2300      	movs	r3, #0
 800f264:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	0c9b      	lsrs	r3, r3, #18
 800f276:	f003 0303 	and.w	r3, r3, #3
 800f27a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	015a      	lsls	r2, r3, #5
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	4413      	add	r3, r2
 800f284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	0fdb      	lsrs	r3, r3, #31
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	f003 0320 	and.w	r3, r3, #32
 800f29a:	2b20      	cmp	r3, #32
 800f29c:	d104      	bne.n	800f2a8 <USB_HC_Halt+0x5a>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e0e8      	b.n	800f47a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d002      	beq.n	800f2b4 <USB_HC_Halt+0x66>
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d173      	bne.n	800f39c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	015a      	lsls	r2, r3, #5
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	0151      	lsls	r1, r2, #5
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	440a      	add	r2, r1
 800f2ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f2ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	f003 0320 	and.w	r3, r3, #32
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 80cb 	bne.w	800f478 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d143      	bne.n	800f376 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	015a      	lsls	r2, r3, #5
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	697a      	ldr	r2, [r7, #20]
 800f2fe:	0151      	lsls	r1, r2, #5
 800f300:	69ba      	ldr	r2, [r7, #24]
 800f302:	440a      	add	r2, r1
 800f304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f30c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	015a      	lsls	r2, r3, #5
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	4413      	add	r3, r2
 800f316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	0151      	lsls	r1, r2, #5
 800f320:	69ba      	ldr	r2, [r7, #24]
 800f322:	440a      	add	r2, r1
 800f324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f32c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	015a      	lsls	r2, r3, #5
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	4413      	add	r3, r2
 800f336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	0151      	lsls	r1, r2, #5
 800f340:	69ba      	ldr	r2, [r7, #24]
 800f342:	440a      	add	r2, r1
 800f344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f348:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f34c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	3301      	adds	r3, #1
 800f352:	61fb      	str	r3, [r7, #28]
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f35a:	d81d      	bhi.n	800f398 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	015a      	lsls	r2, r3, #5
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	4413      	add	r3, r2
 800f364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f36e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f372:	d0ec      	beq.n	800f34e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f374:	e080      	b.n	800f478 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	015a      	lsls	r2, r3, #5
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	4413      	add	r3, r2
 800f37e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	0151      	lsls	r1, r2, #5
 800f388:	69ba      	ldr	r2, [r7, #24]
 800f38a:	440a      	add	r2, r1
 800f38c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f394:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f396:	e06f      	b.n	800f478 <USB_HC_Halt+0x22a>
            break;
 800f398:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f39a:	e06d      	b.n	800f478 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	015a      	lsls	r2, r3, #5
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	0151      	lsls	r1, r2, #5
 800f3ae:	69ba      	ldr	r2, [r7, #24]
 800f3b0:	440a      	add	r2, r1
 800f3b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d143      	bne.n	800f454 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	015a      	lsls	r2, r3, #5
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	0151      	lsls	r1, r2, #5
 800f3de:	69ba      	ldr	r2, [r7, #24]
 800f3e0:	440a      	add	r2, r1
 800f3e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	0151      	lsls	r1, r2, #5
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	440a      	add	r2, r1
 800f402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f40a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	015a      	lsls	r2, r3, #5
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	4413      	add	r3, r2
 800f414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	0151      	lsls	r1, r2, #5
 800f41e:	69ba      	ldr	r2, [r7, #24]
 800f420:	440a      	add	r2, r1
 800f422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f42a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	3301      	adds	r3, #1
 800f430:	61fb      	str	r3, [r7, #28]
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f438:	d81d      	bhi.n	800f476 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	015a      	lsls	r2, r3, #5
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	4413      	add	r3, r2
 800f442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f44c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f450:	d0ec      	beq.n	800f42c <USB_HC_Halt+0x1de>
 800f452:	e011      	b.n	800f478 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	015a      	lsls	r2, r3, #5
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	4413      	add	r3, r2
 800f45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	0151      	lsls	r1, r2, #5
 800f466:	69ba      	ldr	r2, [r7, #24]
 800f468:	440a      	add	r2, r1
 800f46a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f46e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f472:	6013      	str	r3, [r2, #0]
 800f474:	e000      	b.n	800f478 <USB_HC_Halt+0x22a>
          break;
 800f476:	bf00      	nop
    }
  }

  return HAL_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3724      	adds	r7, #36	; 0x24
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b086      	sub	sp, #24
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f492:	2300      	movs	r3, #0
 800f494:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff fdeb 	bl	800f072 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800f49c:	2110      	movs	r1, #16
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff fdf8 	bl	800f094 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f7ff fe1b 	bl	800f0e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	613b      	str	r3, [r7, #16]
 800f4ae:	e01f      	b.n	800f4f0 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	015a      	lsls	r2, r3, #5
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f4c6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4ce:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f4d6:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	015a      	lsls	r2, r3, #5
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4413      	add	r3, r2
 800f4e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	613b      	str	r3, [r7, #16]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	2b0f      	cmp	r3, #15
 800f4f4:	d9dc      	bls.n	800f4b0 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	613b      	str	r3, [r7, #16]
 800f4fa:	e034      	b.n	800f566 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	015a      	lsls	r2, r3, #5
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	4413      	add	r3, r2
 800f504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f512:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f51a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f522:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f530:	461a      	mov	r2, r3
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	3301      	adds	r3, #1
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f542:	d80c      	bhi.n	800f55e <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f55a:	d0ec      	beq.n	800f536 <USB_StopHost+0xb0>
 800f55c:	e000      	b.n	800f560 <USB_StopHost+0xda>
        break;
 800f55e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	3301      	adds	r3, #1
 800f564:	613b      	str	r3, [r7, #16]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2b0f      	cmp	r3, #15
 800f56a:	d9c7      	bls.n	800f4fc <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f572:	461a      	mov	r2, r3
 800f574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f578:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f580:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff fd64 	bl	800f050 <USB_EnableGlobalInt>

  return HAL_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f598:	4904      	ldr	r1, [pc, #16]	; (800f5ac <MX_FATFS_Init+0x18>)
 800f59a:	4805      	ldr	r0, [pc, #20]	; (800f5b0 <MX_FATFS_Init+0x1c>)
 800f59c:	f000 fa84 	bl	800faa8 <FATFS_LinkDriver>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	4b03      	ldr	r3, [pc, #12]	; (800f5b4 <MX_FATFS_Init+0x20>)
 800f5a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f5a8:	bf00      	nop
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20040864 	.word	0x20040864
 800f5b0:	080147d4 	.word	0x080147d4
 800f5b4:	20040860 	.word	0x20040860

0800f5b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f5c2:	f000 f879 	bl	800f6b8 <BSP_SD_IsDetected>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d001      	beq.n	800f5d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	e012      	b.n	800f5f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f5d0:	480b      	ldr	r0, [pc, #44]	; (800f600 <BSP_SD_Init+0x48>)
 800f5d2:	f7fb fe95 	bl	800b300 <HAL_SD_Init>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d109      	bne.n	800f5f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f5e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f5e4:	4806      	ldr	r0, [pc, #24]	; (800f600 <BSP_SD_Init+0x48>)
 800f5e6:	f7fc fc75 	bl	800bed4 <HAL_SD_ConfigWideBusOperation>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d001      	beq.n	800f5f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	20000684 	.word	0x20000684

0800f604 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	68f9      	ldr	r1, [r7, #12]
 800f620:	4806      	ldr	r0, [pc, #24]	; (800f63c <BSP_SD_ReadBlocks+0x38>)
 800f622:	f7fb ff23 	bl	800b46c <HAL_SD_ReadBlocks>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f62c:	2301      	movs	r3, #1
 800f62e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20000684 	.word	0x20000684

0800f640 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af02      	add	r7, sp, #8
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	68f9      	ldr	r1, [r7, #12]
 800f65c:	4806      	ldr	r0, [pc, #24]	; (800f678 <BSP_SD_WriteBlocks+0x38>)
 800f65e:	f7fc f8e3 	bl	800b828 <HAL_SD_WriteBlocks>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	20000684 	.word	0x20000684

0800f67c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f680:	4805      	ldr	r0, [pc, #20]	; (800f698 <BSP_SD_GetCardState+0x1c>)
 800f682:	f7fc fcc1 	bl	800c008 <HAL_SD_GetCardState>
 800f686:	4603      	mov	r3, r0
 800f688:	2b04      	cmp	r3, #4
 800f68a:	bf14      	ite	ne
 800f68c:	2301      	movne	r3, #1
 800f68e:	2300      	moveq	r3, #0
 800f690:	b2db      	uxtb	r3, r3
}
 800f692:	4618      	mov	r0, r3
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20000684 	.word	0x20000684

0800f69c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f6a4:	6879      	ldr	r1, [r7, #4]
 800f6a6:	4803      	ldr	r0, [pc, #12]	; (800f6b4 <BSP_SD_GetCardInfo+0x18>)
 800f6a8:	f7fc fbe8 	bl	800be7c <HAL_SD_GetCardInfo>
}
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	20000684 	.word	0x20000684

0800f6b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f6c2:	f000 f80b 	bl	800f6dc <BSP_PlatformIsDetected>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d101      	bne.n	800f6d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f6d0:	79fb      	ldrb	r3, [r7, #7]
 800f6d2:	b2db      	uxtb	r3, r3
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f6e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f6ea:	4806      	ldr	r0, [pc, #24]	; (800f704 <BSP_PlatformIsDetected+0x28>)
 800f6ec:	f7f6 fc70 	bl	8005fd0 <HAL_GPIO_ReadPin>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f6fa:	79fb      	ldrb	r3, [r7, #7]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	40020800 	.word	0x40020800

0800f708 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f712:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <SD_CheckStatus+0x38>)
 800f714:	2201      	movs	r2, #1
 800f716:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f718:	f7ff ffb0 	bl	800f67c <BSP_SD_GetCardState>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d107      	bne.n	800f732 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f722:	4b07      	ldr	r3, [pc, #28]	; (800f740 <SD_CheckStatus+0x38>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	b2db      	uxtb	r3, r3
 800f728:	f023 0301 	bic.w	r3, r3, #1
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	4b04      	ldr	r3, [pc, #16]	; (800f740 <SD_CheckStatus+0x38>)
 800f730:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f732:	4b03      	ldr	r3, [pc, #12]	; (800f740 <SD_CheckStatus+0x38>)
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	b2db      	uxtb	r3, r3
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20000015 	.word	0x20000015

0800f744 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f74e:	4b0b      	ldr	r3, [pc, #44]	; (800f77c <SD_initialize+0x38>)
 800f750:	2201      	movs	r2, #1
 800f752:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f754:	f7ff ff30 	bl	800f5b8 <BSP_SD_Init>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d107      	bne.n	800f76e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff ffd1 	bl	800f708 <SD_CheckStatus>
 800f766:	4603      	mov	r3, r0
 800f768:	461a      	mov	r2, r3
 800f76a:	4b04      	ldr	r3, [pc, #16]	; (800f77c <SD_initialize+0x38>)
 800f76c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f76e:	4b03      	ldr	r3, [pc, #12]	; (800f77c <SD_initialize+0x38>)
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	b2db      	uxtb	r3, r3
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	20000015 	.word	0x20000015

0800f780 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff ffbb 	bl	800f708 <SD_CheckStatus>
 800f792:	4603      	mov	r3, r0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60b9      	str	r1, [r7, #8]
 800f7a4:	607a      	str	r2, [r7, #4]
 800f7a6:	603b      	str	r3, [r7, #0]
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f7b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	6879      	ldr	r1, [r7, #4]
 800f7b8:	68b8      	ldr	r0, [r7, #8]
 800f7ba:	f7ff ff23 	bl	800f604 <BSP_SD_ReadBlocks>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d107      	bne.n	800f7d4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f7c4:	bf00      	nop
 800f7c6:	f7ff ff59 	bl	800f67c <BSP_SD_GetCardState>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1fa      	bne.n	800f7c6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b086      	sub	sp, #24
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7f6:	683a      	ldr	r2, [r7, #0]
 800f7f8:	6879      	ldr	r1, [r7, #4]
 800f7fa:	68b8      	ldr	r0, [r7, #8]
 800f7fc:	f7ff ff20 	bl	800f640 <BSP_SD_WriteBlocks>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d107      	bne.n	800f816 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f806:	bf00      	nop
 800f808:	f7ff ff38 	bl	800f67c <BSP_SD_GetCardState>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1fa      	bne.n	800f808 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f816:	7dfb      	ldrb	r3, [r7, #23]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b08c      	sub	sp, #48	; 0x30
 800f824:	af00      	add	r7, sp, #0
 800f826:	4603      	mov	r3, r0
 800f828:	603a      	str	r2, [r7, #0]
 800f82a:	71fb      	strb	r3, [r7, #7]
 800f82c:	460b      	mov	r3, r1
 800f82e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f836:	4b25      	ldr	r3, [pc, #148]	; (800f8cc <SD_ioctl+0xac>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	f003 0301 	and.w	r3, r3, #1
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <SD_ioctl+0x28>
 800f844:	2303      	movs	r3, #3
 800f846:	e03c      	b.n	800f8c2 <SD_ioctl+0xa2>

  switch (cmd)
 800f848:	79bb      	ldrb	r3, [r7, #6]
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d834      	bhi.n	800f8b8 <SD_ioctl+0x98>
 800f84e:	a201      	add	r2, pc, #4	; (adr r2, 800f854 <SD_ioctl+0x34>)
 800f850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f854:	0800f865 	.word	0x0800f865
 800f858:	0800f86d 	.word	0x0800f86d
 800f85c:	0800f885 	.word	0x0800f885
 800f860:	0800f89f 	.word	0x0800f89f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f864:	2300      	movs	r3, #0
 800f866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f86a:	e028      	b.n	800f8be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f86c:	f107 030c 	add.w	r3, r7, #12
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff ff13 	bl	800f69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f882:	e01c      	b.n	800f8be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f884:	f107 030c 	add.w	r3, r7, #12
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff ff07 	bl	800f69c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	b29a      	uxth	r2, r3
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f89c:	e00f      	b.n	800f8be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f89e:	f107 030c 	add.w	r3, r7, #12
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff fefa 	bl	800f69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	0a5a      	lsrs	r2, r3, #9
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f8b6:	e002      	b.n	800f8be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f8be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3730      	adds	r7, #48	; 0x30
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20000015 	.word	0x20000015

0800f8d0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f804 	bl	800f8f4 <USBH_HandleSof>
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b0b      	cmp	r3, #11
 800f904:	d10a      	bne.n	800f91c <USBH_HandleSof+0x28>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d005      	beq.n	800f91c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	4798      	blx	r3
  }
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f934:	bf00      	nop
}
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f950:	bf00      	nop
}
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr

0800f98a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b082      	sub	sp, #8
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 fafc 	bl	800ffa8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	791b      	ldrb	r3, [r3, #4]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f80b 	bl	800f9d2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	795b      	ldrb	r3, [r3, #5]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f805 	bl	800f9d2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f9c8:	2300      	movs	r3, #0
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	b083      	sub	sp, #12
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	460b      	mov	r3, r1
 800f9dc:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	2b0a      	cmp	r3, #10
 800f9e2:	d80d      	bhi.n	800fa00 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f9e4:	78fb      	ldrb	r3, [r7, #3]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	33e0      	adds	r3, #224	; 0xe0
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4413      	add	r3, r2
 800f9ee:	685a      	ldr	r2, [r3, #4]
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f9f6:	6879      	ldr	r1, [r7, #4]
 800f9f8:	33e0      	adds	r3, #224	; 0xe0
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	440b      	add	r3, r1
 800f9fe:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
	...

0800fa10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa22:	2300      	movs	r3, #0
 800fa24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa26:	4b1f      	ldr	r3, [pc, #124]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa28:	7a5b      	ldrb	r3, [r3, #9]
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d131      	bne.n	800fa94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa30:	4b1c      	ldr	r3, [pc, #112]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa32:	7a5b      	ldrb	r3, [r3, #9]
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	461a      	mov	r2, r3
 800fa38:	4b1a      	ldr	r3, [pc, #104]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa3e:	4b19      	ldr	r3, [pc, #100]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa40:	7a5b      	ldrb	r3, [r3, #9]
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	4a17      	ldr	r2, [pc, #92]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa4e:	4b15      	ldr	r3, [pc, #84]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa50:	7a5b      	ldrb	r3, [r3, #9]
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	461a      	mov	r2, r3
 800fa56:	4b13      	ldr	r3, [pc, #76]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa58:	4413      	add	r3, r2
 800fa5a:	79fa      	ldrb	r2, [r7, #7]
 800fa5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa5e:	4b11      	ldr	r3, [pc, #68]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa60:	7a5b      	ldrb	r3, [r3, #9]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	b2d1      	uxtb	r1, r2
 800fa68:	4a0e      	ldr	r2, [pc, #56]	; (800faa4 <FATFS_LinkDriverEx+0x94>)
 800fa6a:	7251      	strb	r1, [r2, #9]
 800fa6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fa6e:	7dbb      	ldrb	r3, [r7, #22]
 800fa70:	3330      	adds	r3, #48	; 0x30
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	223a      	movs	r2, #58	; 0x3a
 800fa7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	3302      	adds	r3, #2
 800fa84:	222f      	movs	r2, #47	; 0x2f
 800fa86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	3303      	adds	r3, #3
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fa90:	2300      	movs	r3, #0
 800fa92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fa94:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	371c      	adds	r7, #28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	2000023c 	.word	0x2000023c

0800faa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fab2:	2200      	movs	r2, #0
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7ff ffaa 	bl	800fa10 <FATFS_LinkDriverEx>
 800fabc:	4603      	mov	r3, r0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
 800face:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	689a      	ldr	r2, [r3, #8]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	683a      	ldr	r2, [r7, #0]
 800faea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	601a      	str	r2, [r3, #0]
}
 800fb02:	bf00      	nop
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b085      	sub	sp, #20
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	6892      	ldr	r2, [r2, #8]
 800fb24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	6852      	ldr	r2, [r2, #4]
 800fb2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d103      	bne.n	800fb42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	689a      	ldr	r2, [r3, #8]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	1e5a      	subs	r2, r3, #1
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
	...

0800fb64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb6e:	4b4f      	ldr	r3, [pc, #316]	; (800fcac <xTaskIncrementTick+0x148>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f040 808a 	bne.w	800fc8c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb78:	4b4d      	ldr	r3, [pc, #308]	; (800fcb0 <xTaskIncrementTick+0x14c>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb80:	4a4b      	ldr	r2, [pc, #300]	; (800fcb0 <xTaskIncrementTick+0x14c>)
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d122      	bne.n	800fbd2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb8c:	4b49      	ldr	r3, [pc, #292]	; (800fcb4 <xTaskIncrementTick+0x150>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00c      	beq.n	800fbb0 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9a:	b672      	cpsid	i
 800fb9c:	f383 8811 	msr	BASEPRI, r3
 800fba0:	f3bf 8f6f 	isb	sy
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	b662      	cpsie	i
 800fbaa:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fbac:	bf00      	nop
 800fbae:	e7fe      	b.n	800fbae <xTaskIncrementTick+0x4a>
 800fbb0:	4b40      	ldr	r3, [pc, #256]	; (800fcb4 <xTaskIncrementTick+0x150>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	60fb      	str	r3, [r7, #12]
 800fbb6:	4b40      	ldr	r3, [pc, #256]	; (800fcb8 <xTaskIncrementTick+0x154>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a3e      	ldr	r2, [pc, #248]	; (800fcb4 <xTaskIncrementTick+0x150>)
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	4a3e      	ldr	r2, [pc, #248]	; (800fcb8 <xTaskIncrementTick+0x154>)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6013      	str	r3, [r2, #0]
 800fbc4:	4b3d      	ldr	r3, [pc, #244]	; (800fcbc <xTaskIncrementTick+0x158>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	4a3c      	ldr	r2, [pc, #240]	; (800fcbc <xTaskIncrementTick+0x158>)
 800fbcc:	6013      	str	r3, [r2, #0]
 800fbce:	f000 f905 	bl	800fddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbd2:	4b3b      	ldr	r3, [pc, #236]	; (800fcc0 <xTaskIncrementTick+0x15c>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	693a      	ldr	r2, [r7, #16]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d348      	bcc.n	800fc6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbdc:	4b35      	ldr	r3, [pc, #212]	; (800fcb4 <xTaskIncrementTick+0x150>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d104      	bne.n	800fbf0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbe6:	4b36      	ldr	r3, [pc, #216]	; (800fcc0 <xTaskIncrementTick+0x15c>)
 800fbe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbec:	601a      	str	r2, [r3, #0]
					break;
 800fbee:	e03e      	b.n	800fc6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbf0:	4b30      	ldr	r3, [pc, #192]	; (800fcb4 <xTaskIncrementTick+0x150>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d203      	bcs.n	800fc10 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc08:	4a2d      	ldr	r2, [pc, #180]	; (800fcc0 <xTaskIncrementTick+0x15c>)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc0e:	e02e      	b.n	800fc6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	3304      	adds	r3, #4
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff ff7a 	bl	800fb0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d004      	beq.n	800fc2c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	3318      	adds	r3, #24
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff ff71 	bl	800fb0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	2201      	movs	r2, #1
 800fc32:	409a      	lsls	r2, r3
 800fc34:	4b23      	ldr	r3, [pc, #140]	; (800fcc4 <xTaskIncrementTick+0x160>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	4a22      	ldr	r2, [pc, #136]	; (800fcc4 <xTaskIncrementTick+0x160>)
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc42:	4613      	mov	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4a1f      	ldr	r2, [pc, #124]	; (800fcc8 <xTaskIncrementTick+0x164>)
 800fc4c:	441a      	add	r2, r3
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	3304      	adds	r3, #4
 800fc52:	4619      	mov	r1, r3
 800fc54:	4610      	mov	r0, r2
 800fc56:	f7ff ff36 	bl	800fac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5e:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <xTaskIncrementTick+0x168>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d3b9      	bcc.n	800fbdc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc6c:	e7b6      	b.n	800fbdc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc6e:	4b17      	ldr	r3, [pc, #92]	; (800fccc <xTaskIncrementTick+0x168>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc74:	4914      	ldr	r1, [pc, #80]	; (800fcc8 <xTaskIncrementTick+0x164>)
 800fc76:	4613      	mov	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4413      	add	r3, r2
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	440b      	add	r3, r1
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d907      	bls.n	800fc96 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800fc86:	2301      	movs	r3, #1
 800fc88:	617b      	str	r3, [r7, #20]
 800fc8a:	e004      	b.n	800fc96 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fc8c:	4b10      	ldr	r3, [pc, #64]	; (800fcd0 <xTaskIncrementTick+0x16c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	4a0f      	ldr	r2, [pc, #60]	; (800fcd0 <xTaskIncrementTick+0x16c>)
 800fc94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fc96:	4b0f      	ldr	r3, [pc, #60]	; (800fcd4 <xTaskIncrementTick+0x170>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fca2:	697b      	ldr	r3, [r7, #20]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	200002f8 	.word	0x200002f8
 800fcb0:	200002e0 	.word	0x200002e0
 800fcb4:	200002d8 	.word	0x200002d8
 800fcb8:	200002dc 	.word	0x200002dc
 800fcbc:	200002f0 	.word	0x200002f0
 800fcc0:	200002f4 	.word	0x200002f4
 800fcc4:	200002e4 	.word	0x200002e4
 800fcc8:	2000024c 	.word	0x2000024c
 800fccc:	20000248 	.word	0x20000248
 800fcd0:	200002e8 	.word	0x200002e8
 800fcd4:	200002ec 	.word	0x200002ec

0800fcd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b088      	sub	sp, #32
 800fcdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcde:	4b3a      	ldr	r3, [pc, #232]	; (800fdc8 <vTaskSwitchContext+0xf0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d003      	beq.n	800fcee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fce6:	4b39      	ldr	r3, [pc, #228]	; (800fdcc <vTaskSwitchContext+0xf4>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcec:	e068      	b.n	800fdc0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fcee:	4b37      	ldr	r3, [pc, #220]	; (800fdcc <vTaskSwitchContext+0xf4>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fcf4:	4b36      	ldr	r3, [pc, #216]	; (800fdd0 <vTaskSwitchContext+0xf8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcfa:	61fb      	str	r3, [r7, #28]
 800fcfc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fd00:	61bb      	str	r3, [r7, #24]
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	69ba      	ldr	r2, [r7, #24]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d111      	bne.n	800fd30 <vTaskSwitchContext+0x58>
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	69ba      	ldr	r2, [r7, #24]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d10b      	bne.n	800fd30 <vTaskSwitchContext+0x58>
 800fd18:	69fb      	ldr	r3, [r7, #28]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	69ba      	ldr	r2, [r7, #24]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d105      	bne.n	800fd30 <vTaskSwitchContext+0x58>
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	330c      	adds	r3, #12
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d008      	beq.n	800fd42 <vTaskSwitchContext+0x6a>
 800fd30:	4b27      	ldr	r3, [pc, #156]	; (800fdd0 <vTaskSwitchContext+0xf8>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	4b26      	ldr	r3, [pc, #152]	; (800fdd0 <vTaskSwitchContext+0xf8>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3334      	adds	r3, #52	; 0x34
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4610      	mov	r0, r2
 800fd3e:	f7f1 f8cf 	bl	8000ee0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd42:	4b24      	ldr	r3, [pc, #144]	; (800fdd4 <vTaskSwitchContext+0xfc>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	fab3 f383 	clz	r3, r3
 800fd4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fd50:	7afb      	ldrb	r3, [r7, #11]
 800fd52:	f1c3 031f 	rsb	r3, r3, #31
 800fd56:	617b      	str	r3, [r7, #20]
 800fd58:	491f      	ldr	r1, [pc, #124]	; (800fdd8 <vTaskSwitchContext+0x100>)
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	4413      	add	r3, r2
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	440b      	add	r3, r1
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10c      	bne.n	800fd86 <vTaskSwitchContext+0xae>
	__asm volatile
 800fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd70:	b672      	cpsid	i
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	b662      	cpsie	i
 800fd80:	607b      	str	r3, [r7, #4]
}
 800fd82:	bf00      	nop
 800fd84:	e7fe      	b.n	800fd84 <vTaskSwitchContext+0xac>
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	4613      	mov	r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	4413      	add	r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	4a11      	ldr	r2, [pc, #68]	; (800fdd8 <vTaskSwitchContext+0x100>)
 800fd92:	4413      	add	r3, r2
 800fd94:	613b      	str	r3, [r7, #16]
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	605a      	str	r2, [r3, #4]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	3308      	adds	r3, #8
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d104      	bne.n	800fdb6 <vTaskSwitchContext+0xde>
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	685a      	ldr	r2, [r3, #4]
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	605a      	str	r2, [r3, #4]
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	4a04      	ldr	r2, [pc, #16]	; (800fdd0 <vTaskSwitchContext+0xf8>)
 800fdbe:	6013      	str	r3, [r2, #0]
}
 800fdc0:	bf00      	nop
 800fdc2:	3720      	adds	r7, #32
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	200002f8 	.word	0x200002f8
 800fdcc:	200002ec 	.word	0x200002ec
 800fdd0:	20000248 	.word	0x20000248
 800fdd4:	200002e4 	.word	0x200002e4
 800fdd8:	2000024c 	.word	0x2000024c

0800fddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fde2:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <prvResetNextTaskUnblockTime+0x38>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d104      	bne.n	800fdf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdec:	4b0a      	ldr	r3, [pc, #40]	; (800fe18 <prvResetNextTaskUnblockTime+0x3c>)
 800fdee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdf4:	e008      	b.n	800fe08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf6:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <prvResetNextTaskUnblockTime+0x38>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	4a04      	ldr	r2, [pc, #16]	; (800fe18 <prvResetNextTaskUnblockTime+0x3c>)
 800fe06:	6013      	str	r3, [r2, #0]
}
 800fe08:	bf00      	nop
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	200002d8 	.word	0x200002d8
 800fe18:	200002f4 	.word	0x200002f4
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe20:	4b07      	ldr	r3, [pc, #28]	; (800fe40 <pxCurrentTCBConst2>)
 800fe22:	6819      	ldr	r1, [r3, #0]
 800fe24:	6808      	ldr	r0, [r1, #0]
 800fe26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2a:	f380 8809 	msr	PSP, r0
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f04f 0000 	mov.w	r0, #0
 800fe36:	f380 8811 	msr	BASEPRI, r0
 800fe3a:	4770      	bx	lr
 800fe3c:	f3af 8000 	nop.w

0800fe40 <pxCurrentTCBConst2>:
 800fe40:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop
	...

0800fe50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe50:	f3ef 8009 	mrs	r0, PSP
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	4b15      	ldr	r3, [pc, #84]	; (800feb0 <pxCurrentTCBConst>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	f01e 0f10 	tst.w	lr, #16
 800fe60:	bf08      	it	eq
 800fe62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6a:	6010      	str	r0, [r2, #0]
 800fe6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fe74:	b672      	cpsid	i
 800fe76:	f380 8811 	msr	BASEPRI, r0
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	b662      	cpsie	i
 800fe84:	f7ff ff28 	bl	800fcd8 <vTaskSwitchContext>
 800fe88:	f04f 0000 	mov.w	r0, #0
 800fe8c:	f380 8811 	msr	BASEPRI, r0
 800fe90:	bc09      	pop	{r0, r3}
 800fe92:	6819      	ldr	r1, [r3, #0]
 800fe94:	6808      	ldr	r0, [r1, #0]
 800fe96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9a:	f01e 0f10 	tst.w	lr, #16
 800fe9e:	bf08      	it	eq
 800fea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fea4:	f380 8809 	msr	PSP, r0
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop

0800feb0 <pxCurrentTCBConst>:
 800feb0:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800feb4:	bf00      	nop
 800feb6:	bf00      	nop

0800feb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
	__asm volatile
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	b672      	cpsid	i
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	b662      	cpsie	i
 800fed2:	607b      	str	r3, [r7, #4]
}
 800fed4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fed6:	f7ff fe45 	bl	800fb64 <xTaskIncrementTick>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d003      	beq.n	800fee8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fee0:	4b06      	ldr	r3, [pc, #24]	; (800fefc <SysTick_Handler+0x44>)
 800fee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fee6:	601a      	str	r2, [r3, #0]
 800fee8:	2300      	movs	r3, #0
 800feea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fef2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fef4:	bf00      	nop
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	e000ed04 	.word	0xe000ed04

0800ff00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff fcde 	bl	800f8d0 <USBH_LL_IncTimer>
}
 800ff14:	bf00      	nop
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff fd16 	bl	800f95c <USBH_LL_Connect>
}
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7ff fd1f 	bl	800f98a <USBH_LL_Disconnect>
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
 800ff60:	4613      	mov	r3, r2
 800ff62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7ff fcd0 	bl	800f924 <USBH_LL_PortEnabled>
}
 800ff84:	bf00      	nop
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff fcd0 	bl	800f940 <USBH_LL_PortDisabled>
}
 800ffa0:	bf00      	nop
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7f6 f979 	bl	80062b6 <HAL_HCD_Stop>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffc8:	7bfb      	ldrb	r3, [r7, #15]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f000 f808 	bl	800ffe0 <USBH_Get_USB_Status>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
	...

0800ffe0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	2b03      	cmp	r3, #3
 800fff2:	d817      	bhi.n	8010024 <USBH_Get_USB_Status+0x44>
 800fff4:	a201      	add	r2, pc, #4	; (adr r2, 800fffc <USBH_Get_USB_Status+0x1c>)
 800fff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffa:	bf00      	nop
 800fffc:	0801000d 	.word	0x0801000d
 8010000:	08010013 	.word	0x08010013
 8010004:	08010019 	.word	0x08010019
 8010008:	0801001f 	.word	0x0801001f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801000c:	2300      	movs	r3, #0
 801000e:	73fb      	strb	r3, [r7, #15]
    break;
 8010010:	e00b      	b.n	801002a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010012:	2302      	movs	r3, #2
 8010014:	73fb      	strb	r3, [r7, #15]
    break;
 8010016:	e008      	b.n	801002a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010018:	2301      	movs	r3, #1
 801001a:	73fb      	strb	r3, [r7, #15]
    break;
 801001c:	e005      	b.n	801002a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801001e:	2302      	movs	r3, #2
 8010020:	73fb      	strb	r3, [r7, #15]
    break;
 8010022:	e002      	b.n	801002a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010024:	2302      	movs	r3, #2
 8010026:	73fb      	strb	r3, [r7, #15]
    break;
 8010028:	bf00      	nop
  }
  return usb_status;
 801002a:	7bfb      	ldrb	r3, [r7, #15]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3714      	adds	r7, #20
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8010038:	b480      	push	{r7}
 801003a:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 801003c:	4b02      	ldr	r3, [pc, #8]	; (8010048 <ai_tonecrafter_data_weights_get+0x10>)

}
 801003e:	4618      	mov	r0, r3
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr
 8010048:	080147e8 	.word	0x080147e8

0801004c <__errno>:
 801004c:	4b01      	ldr	r3, [pc, #4]	; (8010054 <__errno+0x8>)
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	20000018 	.word	0x20000018

08010058 <__libc_init_array>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	4d0d      	ldr	r5, [pc, #52]	; (8010090 <__libc_init_array+0x38>)
 801005c:	4c0d      	ldr	r4, [pc, #52]	; (8010094 <__libc_init_array+0x3c>)
 801005e:	1b64      	subs	r4, r4, r5
 8010060:	10a4      	asrs	r4, r4, #2
 8010062:	2600      	movs	r6, #0
 8010064:	42a6      	cmp	r6, r4
 8010066:	d109      	bne.n	801007c <__libc_init_array+0x24>
 8010068:	4d0b      	ldr	r5, [pc, #44]	; (8010098 <__libc_init_array+0x40>)
 801006a:	4c0c      	ldr	r4, [pc, #48]	; (801009c <__libc_init_array+0x44>)
 801006c:	f002 fddc 	bl	8012c28 <_init>
 8010070:	1b64      	subs	r4, r4, r5
 8010072:	10a4      	asrs	r4, r4, #2
 8010074:	2600      	movs	r6, #0
 8010076:	42a6      	cmp	r6, r4
 8010078:	d105      	bne.n	8010086 <__libc_init_array+0x2e>
 801007a:	bd70      	pop	{r4, r5, r6, pc}
 801007c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010080:	4798      	blx	r3
 8010082:	3601      	adds	r6, #1
 8010084:	e7ee      	b.n	8010064 <__libc_init_array+0xc>
 8010086:	f855 3b04 	ldr.w	r3, [r5], #4
 801008a:	4798      	blx	r3
 801008c:	3601      	adds	r6, #1
 801008e:	e7f2      	b.n	8010076 <__libc_init_array+0x1e>
 8010090:	08017cb8 	.word	0x08017cb8
 8010094:	08017cb8 	.word	0x08017cb8
 8010098:	08017cb8 	.word	0x08017cb8
 801009c:	08017cbc 	.word	0x08017cbc

080100a0 <malloc>:
 80100a0:	4b02      	ldr	r3, [pc, #8]	; (80100ac <malloc+0xc>)
 80100a2:	4601      	mov	r1, r0
 80100a4:	6818      	ldr	r0, [r3, #0]
 80100a6:	f000 b869 	b.w	801017c <_malloc_r>
 80100aa:	bf00      	nop
 80100ac:	20000018 	.word	0x20000018

080100b0 <memcpy>:
 80100b0:	440a      	add	r2, r1
 80100b2:	4291      	cmp	r1, r2
 80100b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80100b8:	d100      	bne.n	80100bc <memcpy+0xc>
 80100ba:	4770      	bx	lr
 80100bc:	b510      	push	{r4, lr}
 80100be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100c6:	4291      	cmp	r1, r2
 80100c8:	d1f9      	bne.n	80100be <memcpy+0xe>
 80100ca:	bd10      	pop	{r4, pc}

080100cc <memset>:
 80100cc:	4402      	add	r2, r0
 80100ce:	4603      	mov	r3, r0
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d100      	bne.n	80100d6 <memset+0xa>
 80100d4:	4770      	bx	lr
 80100d6:	f803 1b01 	strb.w	r1, [r3], #1
 80100da:	e7f9      	b.n	80100d0 <memset+0x4>

080100dc <_free_r>:
 80100dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100de:	2900      	cmp	r1, #0
 80100e0:	d048      	beq.n	8010174 <_free_r+0x98>
 80100e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100e6:	9001      	str	r0, [sp, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	f1a1 0404 	sub.w	r4, r1, #4
 80100ee:	bfb8      	it	lt
 80100f0:	18e4      	addlt	r4, r4, r3
 80100f2:	f001 ff47 	bl	8011f84 <__malloc_lock>
 80100f6:	4a20      	ldr	r2, [pc, #128]	; (8010178 <_free_r+0x9c>)
 80100f8:	9801      	ldr	r0, [sp, #4]
 80100fa:	6813      	ldr	r3, [r2, #0]
 80100fc:	4615      	mov	r5, r2
 80100fe:	b933      	cbnz	r3, 801010e <_free_r+0x32>
 8010100:	6063      	str	r3, [r4, #4]
 8010102:	6014      	str	r4, [r2, #0]
 8010104:	b003      	add	sp, #12
 8010106:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801010a:	f001 bf41 	b.w	8011f90 <__malloc_unlock>
 801010e:	42a3      	cmp	r3, r4
 8010110:	d90b      	bls.n	801012a <_free_r+0x4e>
 8010112:	6821      	ldr	r1, [r4, #0]
 8010114:	1862      	adds	r2, r4, r1
 8010116:	4293      	cmp	r3, r2
 8010118:	bf04      	itt	eq
 801011a:	681a      	ldreq	r2, [r3, #0]
 801011c:	685b      	ldreq	r3, [r3, #4]
 801011e:	6063      	str	r3, [r4, #4]
 8010120:	bf04      	itt	eq
 8010122:	1852      	addeq	r2, r2, r1
 8010124:	6022      	streq	r2, [r4, #0]
 8010126:	602c      	str	r4, [r5, #0]
 8010128:	e7ec      	b.n	8010104 <_free_r+0x28>
 801012a:	461a      	mov	r2, r3
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	b10b      	cbz	r3, 8010134 <_free_r+0x58>
 8010130:	42a3      	cmp	r3, r4
 8010132:	d9fa      	bls.n	801012a <_free_r+0x4e>
 8010134:	6811      	ldr	r1, [r2, #0]
 8010136:	1855      	adds	r5, r2, r1
 8010138:	42a5      	cmp	r5, r4
 801013a:	d10b      	bne.n	8010154 <_free_r+0x78>
 801013c:	6824      	ldr	r4, [r4, #0]
 801013e:	4421      	add	r1, r4
 8010140:	1854      	adds	r4, r2, r1
 8010142:	42a3      	cmp	r3, r4
 8010144:	6011      	str	r1, [r2, #0]
 8010146:	d1dd      	bne.n	8010104 <_free_r+0x28>
 8010148:	681c      	ldr	r4, [r3, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	6053      	str	r3, [r2, #4]
 801014e:	4421      	add	r1, r4
 8010150:	6011      	str	r1, [r2, #0]
 8010152:	e7d7      	b.n	8010104 <_free_r+0x28>
 8010154:	d902      	bls.n	801015c <_free_r+0x80>
 8010156:	230c      	movs	r3, #12
 8010158:	6003      	str	r3, [r0, #0]
 801015a:	e7d3      	b.n	8010104 <_free_r+0x28>
 801015c:	6825      	ldr	r5, [r4, #0]
 801015e:	1961      	adds	r1, r4, r5
 8010160:	428b      	cmp	r3, r1
 8010162:	bf04      	itt	eq
 8010164:	6819      	ldreq	r1, [r3, #0]
 8010166:	685b      	ldreq	r3, [r3, #4]
 8010168:	6063      	str	r3, [r4, #4]
 801016a:	bf04      	itt	eq
 801016c:	1949      	addeq	r1, r1, r5
 801016e:	6021      	streq	r1, [r4, #0]
 8010170:	6054      	str	r4, [r2, #4]
 8010172:	e7c7      	b.n	8010104 <_free_r+0x28>
 8010174:	b003      	add	sp, #12
 8010176:	bd30      	pop	{r4, r5, pc}
 8010178:	200002fc 	.word	0x200002fc

0801017c <_malloc_r>:
 801017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017e:	1ccd      	adds	r5, r1, #3
 8010180:	f025 0503 	bic.w	r5, r5, #3
 8010184:	3508      	adds	r5, #8
 8010186:	2d0c      	cmp	r5, #12
 8010188:	bf38      	it	cc
 801018a:	250c      	movcc	r5, #12
 801018c:	2d00      	cmp	r5, #0
 801018e:	4606      	mov	r6, r0
 8010190:	db01      	blt.n	8010196 <_malloc_r+0x1a>
 8010192:	42a9      	cmp	r1, r5
 8010194:	d903      	bls.n	801019e <_malloc_r+0x22>
 8010196:	230c      	movs	r3, #12
 8010198:	6033      	str	r3, [r6, #0]
 801019a:	2000      	movs	r0, #0
 801019c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801019e:	f001 fef1 	bl	8011f84 <__malloc_lock>
 80101a2:	4921      	ldr	r1, [pc, #132]	; (8010228 <_malloc_r+0xac>)
 80101a4:	680a      	ldr	r2, [r1, #0]
 80101a6:	4614      	mov	r4, r2
 80101a8:	b99c      	cbnz	r4, 80101d2 <_malloc_r+0x56>
 80101aa:	4f20      	ldr	r7, [pc, #128]	; (801022c <_malloc_r+0xb0>)
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	b923      	cbnz	r3, 80101ba <_malloc_r+0x3e>
 80101b0:	4621      	mov	r1, r4
 80101b2:	4630      	mov	r0, r6
 80101b4:	f000 fd4a 	bl	8010c4c <_sbrk_r>
 80101b8:	6038      	str	r0, [r7, #0]
 80101ba:	4629      	mov	r1, r5
 80101bc:	4630      	mov	r0, r6
 80101be:	f000 fd45 	bl	8010c4c <_sbrk_r>
 80101c2:	1c43      	adds	r3, r0, #1
 80101c4:	d123      	bne.n	801020e <_malloc_r+0x92>
 80101c6:	230c      	movs	r3, #12
 80101c8:	6033      	str	r3, [r6, #0]
 80101ca:	4630      	mov	r0, r6
 80101cc:	f001 fee0 	bl	8011f90 <__malloc_unlock>
 80101d0:	e7e3      	b.n	801019a <_malloc_r+0x1e>
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	1b5b      	subs	r3, r3, r5
 80101d6:	d417      	bmi.n	8010208 <_malloc_r+0x8c>
 80101d8:	2b0b      	cmp	r3, #11
 80101da:	d903      	bls.n	80101e4 <_malloc_r+0x68>
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	441c      	add	r4, r3
 80101e0:	6025      	str	r5, [r4, #0]
 80101e2:	e004      	b.n	80101ee <_malloc_r+0x72>
 80101e4:	6863      	ldr	r3, [r4, #4]
 80101e6:	42a2      	cmp	r2, r4
 80101e8:	bf0c      	ite	eq
 80101ea:	600b      	streq	r3, [r1, #0]
 80101ec:	6053      	strne	r3, [r2, #4]
 80101ee:	4630      	mov	r0, r6
 80101f0:	f001 fece 	bl	8011f90 <__malloc_unlock>
 80101f4:	f104 000b 	add.w	r0, r4, #11
 80101f8:	1d23      	adds	r3, r4, #4
 80101fa:	f020 0007 	bic.w	r0, r0, #7
 80101fe:	1ac2      	subs	r2, r0, r3
 8010200:	d0cc      	beq.n	801019c <_malloc_r+0x20>
 8010202:	1a1b      	subs	r3, r3, r0
 8010204:	50a3      	str	r3, [r4, r2]
 8010206:	e7c9      	b.n	801019c <_malloc_r+0x20>
 8010208:	4622      	mov	r2, r4
 801020a:	6864      	ldr	r4, [r4, #4]
 801020c:	e7cc      	b.n	80101a8 <_malloc_r+0x2c>
 801020e:	1cc4      	adds	r4, r0, #3
 8010210:	f024 0403 	bic.w	r4, r4, #3
 8010214:	42a0      	cmp	r0, r4
 8010216:	d0e3      	beq.n	80101e0 <_malloc_r+0x64>
 8010218:	1a21      	subs	r1, r4, r0
 801021a:	4630      	mov	r0, r6
 801021c:	f000 fd16 	bl	8010c4c <_sbrk_r>
 8010220:	3001      	adds	r0, #1
 8010222:	d1dd      	bne.n	80101e0 <_malloc_r+0x64>
 8010224:	e7cf      	b.n	80101c6 <_malloc_r+0x4a>
 8010226:	bf00      	nop
 8010228:	200002fc 	.word	0x200002fc
 801022c:	20000300 	.word	0x20000300

08010230 <__cvt>:
 8010230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010234:	ec55 4b10 	vmov	r4, r5, d0
 8010238:	2d00      	cmp	r5, #0
 801023a:	460e      	mov	r6, r1
 801023c:	4619      	mov	r1, r3
 801023e:	462b      	mov	r3, r5
 8010240:	bfbb      	ittet	lt
 8010242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010246:	461d      	movlt	r5, r3
 8010248:	2300      	movge	r3, #0
 801024a:	232d      	movlt	r3, #45	; 0x2d
 801024c:	700b      	strb	r3, [r1, #0]
 801024e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010254:	4691      	mov	r9, r2
 8010256:	f023 0820 	bic.w	r8, r3, #32
 801025a:	bfbc      	itt	lt
 801025c:	4622      	movlt	r2, r4
 801025e:	4614      	movlt	r4, r2
 8010260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010264:	d005      	beq.n	8010272 <__cvt+0x42>
 8010266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801026a:	d100      	bne.n	801026e <__cvt+0x3e>
 801026c:	3601      	adds	r6, #1
 801026e:	2102      	movs	r1, #2
 8010270:	e000      	b.n	8010274 <__cvt+0x44>
 8010272:	2103      	movs	r1, #3
 8010274:	ab03      	add	r3, sp, #12
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	ab02      	add	r3, sp, #8
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	ec45 4b10 	vmov	d0, r4, r5
 8010280:	4653      	mov	r3, sl
 8010282:	4632      	mov	r2, r6
 8010284:	f000 fe5c 	bl	8010f40 <_dtoa_r>
 8010288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801028c:	4607      	mov	r7, r0
 801028e:	d102      	bne.n	8010296 <__cvt+0x66>
 8010290:	f019 0f01 	tst.w	r9, #1
 8010294:	d022      	beq.n	80102dc <__cvt+0xac>
 8010296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801029a:	eb07 0906 	add.w	r9, r7, r6
 801029e:	d110      	bne.n	80102c2 <__cvt+0x92>
 80102a0:	783b      	ldrb	r3, [r7, #0]
 80102a2:	2b30      	cmp	r3, #48	; 0x30
 80102a4:	d10a      	bne.n	80102bc <__cvt+0x8c>
 80102a6:	2200      	movs	r2, #0
 80102a8:	2300      	movs	r3, #0
 80102aa:	4620      	mov	r0, r4
 80102ac:	4629      	mov	r1, r5
 80102ae:	f7f0 fc2b 	bl	8000b08 <__aeabi_dcmpeq>
 80102b2:	b918      	cbnz	r0, 80102bc <__cvt+0x8c>
 80102b4:	f1c6 0601 	rsb	r6, r6, #1
 80102b8:	f8ca 6000 	str.w	r6, [sl]
 80102bc:	f8da 3000 	ldr.w	r3, [sl]
 80102c0:	4499      	add	r9, r3
 80102c2:	2200      	movs	r2, #0
 80102c4:	2300      	movs	r3, #0
 80102c6:	4620      	mov	r0, r4
 80102c8:	4629      	mov	r1, r5
 80102ca:	f7f0 fc1d 	bl	8000b08 <__aeabi_dcmpeq>
 80102ce:	b108      	cbz	r0, 80102d4 <__cvt+0xa4>
 80102d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80102d4:	2230      	movs	r2, #48	; 0x30
 80102d6:	9b03      	ldr	r3, [sp, #12]
 80102d8:	454b      	cmp	r3, r9
 80102da:	d307      	bcc.n	80102ec <__cvt+0xbc>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102e0:	1bdb      	subs	r3, r3, r7
 80102e2:	4638      	mov	r0, r7
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	b004      	add	sp, #16
 80102e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ec:	1c59      	adds	r1, r3, #1
 80102ee:	9103      	str	r1, [sp, #12]
 80102f0:	701a      	strb	r2, [r3, #0]
 80102f2:	e7f0      	b.n	80102d6 <__cvt+0xa6>

080102f4 <__exponent>:
 80102f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102f6:	4603      	mov	r3, r0
 80102f8:	2900      	cmp	r1, #0
 80102fa:	bfb8      	it	lt
 80102fc:	4249      	neglt	r1, r1
 80102fe:	f803 2b02 	strb.w	r2, [r3], #2
 8010302:	bfb4      	ite	lt
 8010304:	222d      	movlt	r2, #45	; 0x2d
 8010306:	222b      	movge	r2, #43	; 0x2b
 8010308:	2909      	cmp	r1, #9
 801030a:	7042      	strb	r2, [r0, #1]
 801030c:	dd2a      	ble.n	8010364 <__exponent+0x70>
 801030e:	f10d 0407 	add.w	r4, sp, #7
 8010312:	46a4      	mov	ip, r4
 8010314:	270a      	movs	r7, #10
 8010316:	46a6      	mov	lr, r4
 8010318:	460a      	mov	r2, r1
 801031a:	fb91 f6f7 	sdiv	r6, r1, r7
 801031e:	fb07 1516 	mls	r5, r7, r6, r1
 8010322:	3530      	adds	r5, #48	; 0x30
 8010324:	2a63      	cmp	r2, #99	; 0x63
 8010326:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801032a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801032e:	4631      	mov	r1, r6
 8010330:	dcf1      	bgt.n	8010316 <__exponent+0x22>
 8010332:	3130      	adds	r1, #48	; 0x30
 8010334:	f1ae 0502 	sub.w	r5, lr, #2
 8010338:	f804 1c01 	strb.w	r1, [r4, #-1]
 801033c:	1c44      	adds	r4, r0, #1
 801033e:	4629      	mov	r1, r5
 8010340:	4561      	cmp	r1, ip
 8010342:	d30a      	bcc.n	801035a <__exponent+0x66>
 8010344:	f10d 0209 	add.w	r2, sp, #9
 8010348:	eba2 020e 	sub.w	r2, r2, lr
 801034c:	4565      	cmp	r5, ip
 801034e:	bf88      	it	hi
 8010350:	2200      	movhi	r2, #0
 8010352:	4413      	add	r3, r2
 8010354:	1a18      	subs	r0, r3, r0
 8010356:	b003      	add	sp, #12
 8010358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801035a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801035e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010362:	e7ed      	b.n	8010340 <__exponent+0x4c>
 8010364:	2330      	movs	r3, #48	; 0x30
 8010366:	3130      	adds	r1, #48	; 0x30
 8010368:	7083      	strb	r3, [r0, #2]
 801036a:	70c1      	strb	r1, [r0, #3]
 801036c:	1d03      	adds	r3, r0, #4
 801036e:	e7f1      	b.n	8010354 <__exponent+0x60>

08010370 <_printf_float>:
 8010370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	ed2d 8b02 	vpush	{d8}
 8010378:	b08d      	sub	sp, #52	; 0x34
 801037a:	460c      	mov	r4, r1
 801037c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010380:	4616      	mov	r6, r2
 8010382:	461f      	mov	r7, r3
 8010384:	4605      	mov	r5, r0
 8010386:	f001 fd91 	bl	8011eac <_localeconv_r>
 801038a:	f8d0 a000 	ldr.w	sl, [r0]
 801038e:	4650      	mov	r0, sl
 8010390:	f7ef ff3e 	bl	8000210 <strlen>
 8010394:	2300      	movs	r3, #0
 8010396:	930a      	str	r3, [sp, #40]	; 0x28
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	9305      	str	r3, [sp, #20]
 801039c:	f8d8 3000 	ldr.w	r3, [r8]
 80103a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80103a4:	3307      	adds	r3, #7
 80103a6:	f023 0307 	bic.w	r3, r3, #7
 80103aa:	f103 0208 	add.w	r2, r3, #8
 80103ae:	f8c8 2000 	str.w	r2, [r8]
 80103b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80103ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80103be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80103c2:	9307      	str	r3, [sp, #28]
 80103c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80103c8:	ee08 0a10 	vmov	s16, r0
 80103cc:	4b9f      	ldr	r3, [pc, #636]	; (801064c <_printf_float+0x2dc>)
 80103ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103d6:	f7f0 fbc9 	bl	8000b6c <__aeabi_dcmpun>
 80103da:	bb88      	cbnz	r0, 8010440 <_printf_float+0xd0>
 80103dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103e0:	4b9a      	ldr	r3, [pc, #616]	; (801064c <_printf_float+0x2dc>)
 80103e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103e6:	f7f0 fba3 	bl	8000b30 <__aeabi_dcmple>
 80103ea:	bb48      	cbnz	r0, 8010440 <_printf_float+0xd0>
 80103ec:	2200      	movs	r2, #0
 80103ee:	2300      	movs	r3, #0
 80103f0:	4640      	mov	r0, r8
 80103f2:	4649      	mov	r1, r9
 80103f4:	f7f0 fb92 	bl	8000b1c <__aeabi_dcmplt>
 80103f8:	b110      	cbz	r0, 8010400 <_printf_float+0x90>
 80103fa:	232d      	movs	r3, #45	; 0x2d
 80103fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010400:	4b93      	ldr	r3, [pc, #588]	; (8010650 <_printf_float+0x2e0>)
 8010402:	4894      	ldr	r0, [pc, #592]	; (8010654 <_printf_float+0x2e4>)
 8010404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010408:	bf94      	ite	ls
 801040a:	4698      	movls	r8, r3
 801040c:	4680      	movhi	r8, r0
 801040e:	2303      	movs	r3, #3
 8010410:	6123      	str	r3, [r4, #16]
 8010412:	9b05      	ldr	r3, [sp, #20]
 8010414:	f023 0204 	bic.w	r2, r3, #4
 8010418:	6022      	str	r2, [r4, #0]
 801041a:	f04f 0900 	mov.w	r9, #0
 801041e:	9700      	str	r7, [sp, #0]
 8010420:	4633      	mov	r3, r6
 8010422:	aa0b      	add	r2, sp, #44	; 0x2c
 8010424:	4621      	mov	r1, r4
 8010426:	4628      	mov	r0, r5
 8010428:	f000 f9d8 	bl	80107dc <_printf_common>
 801042c:	3001      	adds	r0, #1
 801042e:	f040 8090 	bne.w	8010552 <_printf_float+0x1e2>
 8010432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010436:	b00d      	add	sp, #52	; 0x34
 8010438:	ecbd 8b02 	vpop	{d8}
 801043c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010440:	4642      	mov	r2, r8
 8010442:	464b      	mov	r3, r9
 8010444:	4640      	mov	r0, r8
 8010446:	4649      	mov	r1, r9
 8010448:	f7f0 fb90 	bl	8000b6c <__aeabi_dcmpun>
 801044c:	b140      	cbz	r0, 8010460 <_printf_float+0xf0>
 801044e:	464b      	mov	r3, r9
 8010450:	2b00      	cmp	r3, #0
 8010452:	bfbc      	itt	lt
 8010454:	232d      	movlt	r3, #45	; 0x2d
 8010456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801045a:	487f      	ldr	r0, [pc, #508]	; (8010658 <_printf_float+0x2e8>)
 801045c:	4b7f      	ldr	r3, [pc, #508]	; (801065c <_printf_float+0x2ec>)
 801045e:	e7d1      	b.n	8010404 <_printf_float+0x94>
 8010460:	6863      	ldr	r3, [r4, #4]
 8010462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010466:	9206      	str	r2, [sp, #24]
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	d13f      	bne.n	80104ec <_printf_float+0x17c>
 801046c:	2306      	movs	r3, #6
 801046e:	6063      	str	r3, [r4, #4]
 8010470:	9b05      	ldr	r3, [sp, #20]
 8010472:	6861      	ldr	r1, [r4, #4]
 8010474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010478:	2300      	movs	r3, #0
 801047a:	9303      	str	r3, [sp, #12]
 801047c:	ab0a      	add	r3, sp, #40	; 0x28
 801047e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010482:	ab09      	add	r3, sp, #36	; 0x24
 8010484:	ec49 8b10 	vmov	d0, r8, r9
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	6022      	str	r2, [r4, #0]
 801048c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010490:	4628      	mov	r0, r5
 8010492:	f7ff fecd 	bl	8010230 <__cvt>
 8010496:	9b06      	ldr	r3, [sp, #24]
 8010498:	9909      	ldr	r1, [sp, #36]	; 0x24
 801049a:	2b47      	cmp	r3, #71	; 0x47
 801049c:	4680      	mov	r8, r0
 801049e:	d108      	bne.n	80104b2 <_printf_float+0x142>
 80104a0:	1cc8      	adds	r0, r1, #3
 80104a2:	db02      	blt.n	80104aa <_printf_float+0x13a>
 80104a4:	6863      	ldr	r3, [r4, #4]
 80104a6:	4299      	cmp	r1, r3
 80104a8:	dd41      	ble.n	801052e <_printf_float+0x1be>
 80104aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80104ae:	fa5f fb8b 	uxtb.w	fp, fp
 80104b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104b6:	d820      	bhi.n	80104fa <_printf_float+0x18a>
 80104b8:	3901      	subs	r1, #1
 80104ba:	465a      	mov	r2, fp
 80104bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80104c0:	9109      	str	r1, [sp, #36]	; 0x24
 80104c2:	f7ff ff17 	bl	80102f4 <__exponent>
 80104c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104c8:	1813      	adds	r3, r2, r0
 80104ca:	2a01      	cmp	r2, #1
 80104cc:	4681      	mov	r9, r0
 80104ce:	6123      	str	r3, [r4, #16]
 80104d0:	dc02      	bgt.n	80104d8 <_printf_float+0x168>
 80104d2:	6822      	ldr	r2, [r4, #0]
 80104d4:	07d2      	lsls	r2, r2, #31
 80104d6:	d501      	bpl.n	80104dc <_printf_float+0x16c>
 80104d8:	3301      	adds	r3, #1
 80104da:	6123      	str	r3, [r4, #16]
 80104dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d09c      	beq.n	801041e <_printf_float+0xae>
 80104e4:	232d      	movs	r3, #45	; 0x2d
 80104e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104ea:	e798      	b.n	801041e <_printf_float+0xae>
 80104ec:	9a06      	ldr	r2, [sp, #24]
 80104ee:	2a47      	cmp	r2, #71	; 0x47
 80104f0:	d1be      	bne.n	8010470 <_printf_float+0x100>
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1bc      	bne.n	8010470 <_printf_float+0x100>
 80104f6:	2301      	movs	r3, #1
 80104f8:	e7b9      	b.n	801046e <_printf_float+0xfe>
 80104fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80104fe:	d118      	bne.n	8010532 <_printf_float+0x1c2>
 8010500:	2900      	cmp	r1, #0
 8010502:	6863      	ldr	r3, [r4, #4]
 8010504:	dd0b      	ble.n	801051e <_printf_float+0x1ae>
 8010506:	6121      	str	r1, [r4, #16]
 8010508:	b913      	cbnz	r3, 8010510 <_printf_float+0x1a0>
 801050a:	6822      	ldr	r2, [r4, #0]
 801050c:	07d0      	lsls	r0, r2, #31
 801050e:	d502      	bpl.n	8010516 <_printf_float+0x1a6>
 8010510:	3301      	adds	r3, #1
 8010512:	440b      	add	r3, r1
 8010514:	6123      	str	r3, [r4, #16]
 8010516:	65a1      	str	r1, [r4, #88]	; 0x58
 8010518:	f04f 0900 	mov.w	r9, #0
 801051c:	e7de      	b.n	80104dc <_printf_float+0x16c>
 801051e:	b913      	cbnz	r3, 8010526 <_printf_float+0x1b6>
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	07d2      	lsls	r2, r2, #31
 8010524:	d501      	bpl.n	801052a <_printf_float+0x1ba>
 8010526:	3302      	adds	r3, #2
 8010528:	e7f4      	b.n	8010514 <_printf_float+0x1a4>
 801052a:	2301      	movs	r3, #1
 801052c:	e7f2      	b.n	8010514 <_printf_float+0x1a4>
 801052e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010534:	4299      	cmp	r1, r3
 8010536:	db05      	blt.n	8010544 <_printf_float+0x1d4>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	6121      	str	r1, [r4, #16]
 801053c:	07d8      	lsls	r0, r3, #31
 801053e:	d5ea      	bpl.n	8010516 <_printf_float+0x1a6>
 8010540:	1c4b      	adds	r3, r1, #1
 8010542:	e7e7      	b.n	8010514 <_printf_float+0x1a4>
 8010544:	2900      	cmp	r1, #0
 8010546:	bfd4      	ite	le
 8010548:	f1c1 0202 	rsble	r2, r1, #2
 801054c:	2201      	movgt	r2, #1
 801054e:	4413      	add	r3, r2
 8010550:	e7e0      	b.n	8010514 <_printf_float+0x1a4>
 8010552:	6823      	ldr	r3, [r4, #0]
 8010554:	055a      	lsls	r2, r3, #21
 8010556:	d407      	bmi.n	8010568 <_printf_float+0x1f8>
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	4642      	mov	r2, r8
 801055c:	4631      	mov	r1, r6
 801055e:	4628      	mov	r0, r5
 8010560:	47b8      	blx	r7
 8010562:	3001      	adds	r0, #1
 8010564:	d12c      	bne.n	80105c0 <_printf_float+0x250>
 8010566:	e764      	b.n	8010432 <_printf_float+0xc2>
 8010568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801056c:	f240 80e0 	bls.w	8010730 <_printf_float+0x3c0>
 8010570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010574:	2200      	movs	r2, #0
 8010576:	2300      	movs	r3, #0
 8010578:	f7f0 fac6 	bl	8000b08 <__aeabi_dcmpeq>
 801057c:	2800      	cmp	r0, #0
 801057e:	d034      	beq.n	80105ea <_printf_float+0x27a>
 8010580:	4a37      	ldr	r2, [pc, #220]	; (8010660 <_printf_float+0x2f0>)
 8010582:	2301      	movs	r3, #1
 8010584:	4631      	mov	r1, r6
 8010586:	4628      	mov	r0, r5
 8010588:	47b8      	blx	r7
 801058a:	3001      	adds	r0, #1
 801058c:	f43f af51 	beq.w	8010432 <_printf_float+0xc2>
 8010590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010594:	429a      	cmp	r2, r3
 8010596:	db02      	blt.n	801059e <_printf_float+0x22e>
 8010598:	6823      	ldr	r3, [r4, #0]
 801059a:	07d8      	lsls	r0, r3, #31
 801059c:	d510      	bpl.n	80105c0 <_printf_float+0x250>
 801059e:	ee18 3a10 	vmov	r3, s16
 80105a2:	4652      	mov	r2, sl
 80105a4:	4631      	mov	r1, r6
 80105a6:	4628      	mov	r0, r5
 80105a8:	47b8      	blx	r7
 80105aa:	3001      	adds	r0, #1
 80105ac:	f43f af41 	beq.w	8010432 <_printf_float+0xc2>
 80105b0:	f04f 0800 	mov.w	r8, #0
 80105b4:	f104 091a 	add.w	r9, r4, #26
 80105b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ba:	3b01      	subs	r3, #1
 80105bc:	4543      	cmp	r3, r8
 80105be:	dc09      	bgt.n	80105d4 <_printf_float+0x264>
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	079b      	lsls	r3, r3, #30
 80105c4:	f100 8105 	bmi.w	80107d2 <_printf_float+0x462>
 80105c8:	68e0      	ldr	r0, [r4, #12]
 80105ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105cc:	4298      	cmp	r0, r3
 80105ce:	bfb8      	it	lt
 80105d0:	4618      	movlt	r0, r3
 80105d2:	e730      	b.n	8010436 <_printf_float+0xc6>
 80105d4:	2301      	movs	r3, #1
 80105d6:	464a      	mov	r2, r9
 80105d8:	4631      	mov	r1, r6
 80105da:	4628      	mov	r0, r5
 80105dc:	47b8      	blx	r7
 80105de:	3001      	adds	r0, #1
 80105e0:	f43f af27 	beq.w	8010432 <_printf_float+0xc2>
 80105e4:	f108 0801 	add.w	r8, r8, #1
 80105e8:	e7e6      	b.n	80105b8 <_printf_float+0x248>
 80105ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	dc39      	bgt.n	8010664 <_printf_float+0x2f4>
 80105f0:	4a1b      	ldr	r2, [pc, #108]	; (8010660 <_printf_float+0x2f0>)
 80105f2:	2301      	movs	r3, #1
 80105f4:	4631      	mov	r1, r6
 80105f6:	4628      	mov	r0, r5
 80105f8:	47b8      	blx	r7
 80105fa:	3001      	adds	r0, #1
 80105fc:	f43f af19 	beq.w	8010432 <_printf_float+0xc2>
 8010600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010604:	4313      	orrs	r3, r2
 8010606:	d102      	bne.n	801060e <_printf_float+0x29e>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	07d9      	lsls	r1, r3, #31
 801060c:	d5d8      	bpl.n	80105c0 <_printf_float+0x250>
 801060e:	ee18 3a10 	vmov	r3, s16
 8010612:	4652      	mov	r2, sl
 8010614:	4631      	mov	r1, r6
 8010616:	4628      	mov	r0, r5
 8010618:	47b8      	blx	r7
 801061a:	3001      	adds	r0, #1
 801061c:	f43f af09 	beq.w	8010432 <_printf_float+0xc2>
 8010620:	f04f 0900 	mov.w	r9, #0
 8010624:	f104 0a1a 	add.w	sl, r4, #26
 8010628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062a:	425b      	negs	r3, r3
 801062c:	454b      	cmp	r3, r9
 801062e:	dc01      	bgt.n	8010634 <_printf_float+0x2c4>
 8010630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010632:	e792      	b.n	801055a <_printf_float+0x1ea>
 8010634:	2301      	movs	r3, #1
 8010636:	4652      	mov	r2, sl
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	f43f aef7 	beq.w	8010432 <_printf_float+0xc2>
 8010644:	f109 0901 	add.w	r9, r9, #1
 8010648:	e7ee      	b.n	8010628 <_printf_float+0x2b8>
 801064a:	bf00      	nop
 801064c:	7fefffff 	.word	0x7fefffff
 8010650:	080178d0 	.word	0x080178d0
 8010654:	080178d4 	.word	0x080178d4
 8010658:	080178dc 	.word	0x080178dc
 801065c:	080178d8 	.word	0x080178d8
 8010660:	080178e0 	.word	0x080178e0
 8010664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010668:	429a      	cmp	r2, r3
 801066a:	bfa8      	it	ge
 801066c:	461a      	movge	r2, r3
 801066e:	2a00      	cmp	r2, #0
 8010670:	4691      	mov	r9, r2
 8010672:	dc37      	bgt.n	80106e4 <_printf_float+0x374>
 8010674:	f04f 0b00 	mov.w	fp, #0
 8010678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801067c:	f104 021a 	add.w	r2, r4, #26
 8010680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010682:	9305      	str	r3, [sp, #20]
 8010684:	eba3 0309 	sub.w	r3, r3, r9
 8010688:	455b      	cmp	r3, fp
 801068a:	dc33      	bgt.n	80106f4 <_printf_float+0x384>
 801068c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010690:	429a      	cmp	r2, r3
 8010692:	db3b      	blt.n	801070c <_printf_float+0x39c>
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	07da      	lsls	r2, r3, #31
 8010698:	d438      	bmi.n	801070c <_printf_float+0x39c>
 801069a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801069c:	9b05      	ldr	r3, [sp, #20]
 801069e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	eba2 0901 	sub.w	r9, r2, r1
 80106a6:	4599      	cmp	r9, r3
 80106a8:	bfa8      	it	ge
 80106aa:	4699      	movge	r9, r3
 80106ac:	f1b9 0f00 	cmp.w	r9, #0
 80106b0:	dc35      	bgt.n	801071e <_printf_float+0x3ae>
 80106b2:	f04f 0800 	mov.w	r8, #0
 80106b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106ba:	f104 0a1a 	add.w	sl, r4, #26
 80106be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106c2:	1a9b      	subs	r3, r3, r2
 80106c4:	eba3 0309 	sub.w	r3, r3, r9
 80106c8:	4543      	cmp	r3, r8
 80106ca:	f77f af79 	ble.w	80105c0 <_printf_float+0x250>
 80106ce:	2301      	movs	r3, #1
 80106d0:	4652      	mov	r2, sl
 80106d2:	4631      	mov	r1, r6
 80106d4:	4628      	mov	r0, r5
 80106d6:	47b8      	blx	r7
 80106d8:	3001      	adds	r0, #1
 80106da:	f43f aeaa 	beq.w	8010432 <_printf_float+0xc2>
 80106de:	f108 0801 	add.w	r8, r8, #1
 80106e2:	e7ec      	b.n	80106be <_printf_float+0x34e>
 80106e4:	4613      	mov	r3, r2
 80106e6:	4631      	mov	r1, r6
 80106e8:	4642      	mov	r2, r8
 80106ea:	4628      	mov	r0, r5
 80106ec:	47b8      	blx	r7
 80106ee:	3001      	adds	r0, #1
 80106f0:	d1c0      	bne.n	8010674 <_printf_float+0x304>
 80106f2:	e69e      	b.n	8010432 <_printf_float+0xc2>
 80106f4:	2301      	movs	r3, #1
 80106f6:	4631      	mov	r1, r6
 80106f8:	4628      	mov	r0, r5
 80106fa:	9205      	str	r2, [sp, #20]
 80106fc:	47b8      	blx	r7
 80106fe:	3001      	adds	r0, #1
 8010700:	f43f ae97 	beq.w	8010432 <_printf_float+0xc2>
 8010704:	9a05      	ldr	r2, [sp, #20]
 8010706:	f10b 0b01 	add.w	fp, fp, #1
 801070a:	e7b9      	b.n	8010680 <_printf_float+0x310>
 801070c:	ee18 3a10 	vmov	r3, s16
 8010710:	4652      	mov	r2, sl
 8010712:	4631      	mov	r1, r6
 8010714:	4628      	mov	r0, r5
 8010716:	47b8      	blx	r7
 8010718:	3001      	adds	r0, #1
 801071a:	d1be      	bne.n	801069a <_printf_float+0x32a>
 801071c:	e689      	b.n	8010432 <_printf_float+0xc2>
 801071e:	9a05      	ldr	r2, [sp, #20]
 8010720:	464b      	mov	r3, r9
 8010722:	4442      	add	r2, r8
 8010724:	4631      	mov	r1, r6
 8010726:	4628      	mov	r0, r5
 8010728:	47b8      	blx	r7
 801072a:	3001      	adds	r0, #1
 801072c:	d1c1      	bne.n	80106b2 <_printf_float+0x342>
 801072e:	e680      	b.n	8010432 <_printf_float+0xc2>
 8010730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010732:	2a01      	cmp	r2, #1
 8010734:	dc01      	bgt.n	801073a <_printf_float+0x3ca>
 8010736:	07db      	lsls	r3, r3, #31
 8010738:	d538      	bpl.n	80107ac <_printf_float+0x43c>
 801073a:	2301      	movs	r3, #1
 801073c:	4642      	mov	r2, r8
 801073e:	4631      	mov	r1, r6
 8010740:	4628      	mov	r0, r5
 8010742:	47b8      	blx	r7
 8010744:	3001      	adds	r0, #1
 8010746:	f43f ae74 	beq.w	8010432 <_printf_float+0xc2>
 801074a:	ee18 3a10 	vmov	r3, s16
 801074e:	4652      	mov	r2, sl
 8010750:	4631      	mov	r1, r6
 8010752:	4628      	mov	r0, r5
 8010754:	47b8      	blx	r7
 8010756:	3001      	adds	r0, #1
 8010758:	f43f ae6b 	beq.w	8010432 <_printf_float+0xc2>
 801075c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010760:	2200      	movs	r2, #0
 8010762:	2300      	movs	r3, #0
 8010764:	f7f0 f9d0 	bl	8000b08 <__aeabi_dcmpeq>
 8010768:	b9d8      	cbnz	r0, 80107a2 <_printf_float+0x432>
 801076a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801076c:	f108 0201 	add.w	r2, r8, #1
 8010770:	3b01      	subs	r3, #1
 8010772:	4631      	mov	r1, r6
 8010774:	4628      	mov	r0, r5
 8010776:	47b8      	blx	r7
 8010778:	3001      	adds	r0, #1
 801077a:	d10e      	bne.n	801079a <_printf_float+0x42a>
 801077c:	e659      	b.n	8010432 <_printf_float+0xc2>
 801077e:	2301      	movs	r3, #1
 8010780:	4652      	mov	r2, sl
 8010782:	4631      	mov	r1, r6
 8010784:	4628      	mov	r0, r5
 8010786:	47b8      	blx	r7
 8010788:	3001      	adds	r0, #1
 801078a:	f43f ae52 	beq.w	8010432 <_printf_float+0xc2>
 801078e:	f108 0801 	add.w	r8, r8, #1
 8010792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010794:	3b01      	subs	r3, #1
 8010796:	4543      	cmp	r3, r8
 8010798:	dcf1      	bgt.n	801077e <_printf_float+0x40e>
 801079a:	464b      	mov	r3, r9
 801079c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80107a0:	e6dc      	b.n	801055c <_printf_float+0x1ec>
 80107a2:	f04f 0800 	mov.w	r8, #0
 80107a6:	f104 0a1a 	add.w	sl, r4, #26
 80107aa:	e7f2      	b.n	8010792 <_printf_float+0x422>
 80107ac:	2301      	movs	r3, #1
 80107ae:	4642      	mov	r2, r8
 80107b0:	e7df      	b.n	8010772 <_printf_float+0x402>
 80107b2:	2301      	movs	r3, #1
 80107b4:	464a      	mov	r2, r9
 80107b6:	4631      	mov	r1, r6
 80107b8:	4628      	mov	r0, r5
 80107ba:	47b8      	blx	r7
 80107bc:	3001      	adds	r0, #1
 80107be:	f43f ae38 	beq.w	8010432 <_printf_float+0xc2>
 80107c2:	f108 0801 	add.w	r8, r8, #1
 80107c6:	68e3      	ldr	r3, [r4, #12]
 80107c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107ca:	1a5b      	subs	r3, r3, r1
 80107cc:	4543      	cmp	r3, r8
 80107ce:	dcf0      	bgt.n	80107b2 <_printf_float+0x442>
 80107d0:	e6fa      	b.n	80105c8 <_printf_float+0x258>
 80107d2:	f04f 0800 	mov.w	r8, #0
 80107d6:	f104 0919 	add.w	r9, r4, #25
 80107da:	e7f4      	b.n	80107c6 <_printf_float+0x456>

080107dc <_printf_common>:
 80107dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	4616      	mov	r6, r2
 80107e2:	4699      	mov	r9, r3
 80107e4:	688a      	ldr	r2, [r1, #8]
 80107e6:	690b      	ldr	r3, [r1, #16]
 80107e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107ec:	4293      	cmp	r3, r2
 80107ee:	bfb8      	it	lt
 80107f0:	4613      	movlt	r3, r2
 80107f2:	6033      	str	r3, [r6, #0]
 80107f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107f8:	4607      	mov	r7, r0
 80107fa:	460c      	mov	r4, r1
 80107fc:	b10a      	cbz	r2, 8010802 <_printf_common+0x26>
 80107fe:	3301      	adds	r3, #1
 8010800:	6033      	str	r3, [r6, #0]
 8010802:	6823      	ldr	r3, [r4, #0]
 8010804:	0699      	lsls	r1, r3, #26
 8010806:	bf42      	ittt	mi
 8010808:	6833      	ldrmi	r3, [r6, #0]
 801080a:	3302      	addmi	r3, #2
 801080c:	6033      	strmi	r3, [r6, #0]
 801080e:	6825      	ldr	r5, [r4, #0]
 8010810:	f015 0506 	ands.w	r5, r5, #6
 8010814:	d106      	bne.n	8010824 <_printf_common+0x48>
 8010816:	f104 0a19 	add.w	sl, r4, #25
 801081a:	68e3      	ldr	r3, [r4, #12]
 801081c:	6832      	ldr	r2, [r6, #0]
 801081e:	1a9b      	subs	r3, r3, r2
 8010820:	42ab      	cmp	r3, r5
 8010822:	dc26      	bgt.n	8010872 <_printf_common+0x96>
 8010824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010828:	1e13      	subs	r3, r2, #0
 801082a:	6822      	ldr	r2, [r4, #0]
 801082c:	bf18      	it	ne
 801082e:	2301      	movne	r3, #1
 8010830:	0692      	lsls	r2, r2, #26
 8010832:	d42b      	bmi.n	801088c <_printf_common+0xb0>
 8010834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010838:	4649      	mov	r1, r9
 801083a:	4638      	mov	r0, r7
 801083c:	47c0      	blx	r8
 801083e:	3001      	adds	r0, #1
 8010840:	d01e      	beq.n	8010880 <_printf_common+0xa4>
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	68e5      	ldr	r5, [r4, #12]
 8010846:	6832      	ldr	r2, [r6, #0]
 8010848:	f003 0306 	and.w	r3, r3, #6
 801084c:	2b04      	cmp	r3, #4
 801084e:	bf08      	it	eq
 8010850:	1aad      	subeq	r5, r5, r2
 8010852:	68a3      	ldr	r3, [r4, #8]
 8010854:	6922      	ldr	r2, [r4, #16]
 8010856:	bf0c      	ite	eq
 8010858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801085c:	2500      	movne	r5, #0
 801085e:	4293      	cmp	r3, r2
 8010860:	bfc4      	itt	gt
 8010862:	1a9b      	subgt	r3, r3, r2
 8010864:	18ed      	addgt	r5, r5, r3
 8010866:	2600      	movs	r6, #0
 8010868:	341a      	adds	r4, #26
 801086a:	42b5      	cmp	r5, r6
 801086c:	d11a      	bne.n	80108a4 <_printf_common+0xc8>
 801086e:	2000      	movs	r0, #0
 8010870:	e008      	b.n	8010884 <_printf_common+0xa8>
 8010872:	2301      	movs	r3, #1
 8010874:	4652      	mov	r2, sl
 8010876:	4649      	mov	r1, r9
 8010878:	4638      	mov	r0, r7
 801087a:	47c0      	blx	r8
 801087c:	3001      	adds	r0, #1
 801087e:	d103      	bne.n	8010888 <_printf_common+0xac>
 8010880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010888:	3501      	adds	r5, #1
 801088a:	e7c6      	b.n	801081a <_printf_common+0x3e>
 801088c:	18e1      	adds	r1, r4, r3
 801088e:	1c5a      	adds	r2, r3, #1
 8010890:	2030      	movs	r0, #48	; 0x30
 8010892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010896:	4422      	add	r2, r4
 8010898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801089c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108a0:	3302      	adds	r3, #2
 80108a2:	e7c7      	b.n	8010834 <_printf_common+0x58>
 80108a4:	2301      	movs	r3, #1
 80108a6:	4622      	mov	r2, r4
 80108a8:	4649      	mov	r1, r9
 80108aa:	4638      	mov	r0, r7
 80108ac:	47c0      	blx	r8
 80108ae:	3001      	adds	r0, #1
 80108b0:	d0e6      	beq.n	8010880 <_printf_common+0xa4>
 80108b2:	3601      	adds	r6, #1
 80108b4:	e7d9      	b.n	801086a <_printf_common+0x8e>
	...

080108b8 <_printf_i>:
 80108b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108bc:	460c      	mov	r4, r1
 80108be:	4691      	mov	r9, r2
 80108c0:	7e27      	ldrb	r7, [r4, #24]
 80108c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80108c4:	2f78      	cmp	r7, #120	; 0x78
 80108c6:	4680      	mov	r8, r0
 80108c8:	469a      	mov	sl, r3
 80108ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108ce:	d807      	bhi.n	80108e0 <_printf_i+0x28>
 80108d0:	2f62      	cmp	r7, #98	; 0x62
 80108d2:	d80a      	bhi.n	80108ea <_printf_i+0x32>
 80108d4:	2f00      	cmp	r7, #0
 80108d6:	f000 80d8 	beq.w	8010a8a <_printf_i+0x1d2>
 80108da:	2f58      	cmp	r7, #88	; 0x58
 80108dc:	f000 80a3 	beq.w	8010a26 <_printf_i+0x16e>
 80108e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80108e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108e8:	e03a      	b.n	8010960 <_printf_i+0xa8>
 80108ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108ee:	2b15      	cmp	r3, #21
 80108f0:	d8f6      	bhi.n	80108e0 <_printf_i+0x28>
 80108f2:	a001      	add	r0, pc, #4	; (adr r0, 80108f8 <_printf_i+0x40>)
 80108f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80108f8:	08010951 	.word	0x08010951
 80108fc:	08010965 	.word	0x08010965
 8010900:	080108e1 	.word	0x080108e1
 8010904:	080108e1 	.word	0x080108e1
 8010908:	080108e1 	.word	0x080108e1
 801090c:	080108e1 	.word	0x080108e1
 8010910:	08010965 	.word	0x08010965
 8010914:	080108e1 	.word	0x080108e1
 8010918:	080108e1 	.word	0x080108e1
 801091c:	080108e1 	.word	0x080108e1
 8010920:	080108e1 	.word	0x080108e1
 8010924:	08010a71 	.word	0x08010a71
 8010928:	08010995 	.word	0x08010995
 801092c:	08010a53 	.word	0x08010a53
 8010930:	080108e1 	.word	0x080108e1
 8010934:	080108e1 	.word	0x080108e1
 8010938:	08010a93 	.word	0x08010a93
 801093c:	080108e1 	.word	0x080108e1
 8010940:	08010995 	.word	0x08010995
 8010944:	080108e1 	.word	0x080108e1
 8010948:	080108e1 	.word	0x080108e1
 801094c:	08010a5b 	.word	0x08010a5b
 8010950:	680b      	ldr	r3, [r1, #0]
 8010952:	1d1a      	adds	r2, r3, #4
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	600a      	str	r2, [r1, #0]
 8010958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801095c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010960:	2301      	movs	r3, #1
 8010962:	e0a3      	b.n	8010aac <_printf_i+0x1f4>
 8010964:	6825      	ldr	r5, [r4, #0]
 8010966:	6808      	ldr	r0, [r1, #0]
 8010968:	062e      	lsls	r6, r5, #24
 801096a:	f100 0304 	add.w	r3, r0, #4
 801096e:	d50a      	bpl.n	8010986 <_printf_i+0xce>
 8010970:	6805      	ldr	r5, [r0, #0]
 8010972:	600b      	str	r3, [r1, #0]
 8010974:	2d00      	cmp	r5, #0
 8010976:	da03      	bge.n	8010980 <_printf_i+0xc8>
 8010978:	232d      	movs	r3, #45	; 0x2d
 801097a:	426d      	negs	r5, r5
 801097c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010980:	485e      	ldr	r0, [pc, #376]	; (8010afc <_printf_i+0x244>)
 8010982:	230a      	movs	r3, #10
 8010984:	e019      	b.n	80109ba <_printf_i+0x102>
 8010986:	f015 0f40 	tst.w	r5, #64	; 0x40
 801098a:	6805      	ldr	r5, [r0, #0]
 801098c:	600b      	str	r3, [r1, #0]
 801098e:	bf18      	it	ne
 8010990:	b22d      	sxthne	r5, r5
 8010992:	e7ef      	b.n	8010974 <_printf_i+0xbc>
 8010994:	680b      	ldr	r3, [r1, #0]
 8010996:	6825      	ldr	r5, [r4, #0]
 8010998:	1d18      	adds	r0, r3, #4
 801099a:	6008      	str	r0, [r1, #0]
 801099c:	0628      	lsls	r0, r5, #24
 801099e:	d501      	bpl.n	80109a4 <_printf_i+0xec>
 80109a0:	681d      	ldr	r5, [r3, #0]
 80109a2:	e002      	b.n	80109aa <_printf_i+0xf2>
 80109a4:	0669      	lsls	r1, r5, #25
 80109a6:	d5fb      	bpl.n	80109a0 <_printf_i+0xe8>
 80109a8:	881d      	ldrh	r5, [r3, #0]
 80109aa:	4854      	ldr	r0, [pc, #336]	; (8010afc <_printf_i+0x244>)
 80109ac:	2f6f      	cmp	r7, #111	; 0x6f
 80109ae:	bf0c      	ite	eq
 80109b0:	2308      	moveq	r3, #8
 80109b2:	230a      	movne	r3, #10
 80109b4:	2100      	movs	r1, #0
 80109b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109ba:	6866      	ldr	r6, [r4, #4]
 80109bc:	60a6      	str	r6, [r4, #8]
 80109be:	2e00      	cmp	r6, #0
 80109c0:	bfa2      	ittt	ge
 80109c2:	6821      	ldrge	r1, [r4, #0]
 80109c4:	f021 0104 	bicge.w	r1, r1, #4
 80109c8:	6021      	strge	r1, [r4, #0]
 80109ca:	b90d      	cbnz	r5, 80109d0 <_printf_i+0x118>
 80109cc:	2e00      	cmp	r6, #0
 80109ce:	d04d      	beq.n	8010a6c <_printf_i+0x1b4>
 80109d0:	4616      	mov	r6, r2
 80109d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80109d6:	fb03 5711 	mls	r7, r3, r1, r5
 80109da:	5dc7      	ldrb	r7, [r0, r7]
 80109dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109e0:	462f      	mov	r7, r5
 80109e2:	42bb      	cmp	r3, r7
 80109e4:	460d      	mov	r5, r1
 80109e6:	d9f4      	bls.n	80109d2 <_printf_i+0x11a>
 80109e8:	2b08      	cmp	r3, #8
 80109ea:	d10b      	bne.n	8010a04 <_printf_i+0x14c>
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	07df      	lsls	r7, r3, #31
 80109f0:	d508      	bpl.n	8010a04 <_printf_i+0x14c>
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	6861      	ldr	r1, [r4, #4]
 80109f6:	4299      	cmp	r1, r3
 80109f8:	bfde      	ittt	le
 80109fa:	2330      	movle	r3, #48	; 0x30
 80109fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a00:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010a04:	1b92      	subs	r2, r2, r6
 8010a06:	6122      	str	r2, [r4, #16]
 8010a08:	f8cd a000 	str.w	sl, [sp]
 8010a0c:	464b      	mov	r3, r9
 8010a0e:	aa03      	add	r2, sp, #12
 8010a10:	4621      	mov	r1, r4
 8010a12:	4640      	mov	r0, r8
 8010a14:	f7ff fee2 	bl	80107dc <_printf_common>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d14c      	bne.n	8010ab6 <_printf_i+0x1fe>
 8010a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a20:	b004      	add	sp, #16
 8010a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a26:	4835      	ldr	r0, [pc, #212]	; (8010afc <_printf_i+0x244>)
 8010a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	680e      	ldr	r6, [r1, #0]
 8010a30:	061f      	lsls	r7, r3, #24
 8010a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8010a36:	600e      	str	r6, [r1, #0]
 8010a38:	d514      	bpl.n	8010a64 <_printf_i+0x1ac>
 8010a3a:	07d9      	lsls	r1, r3, #31
 8010a3c:	bf44      	itt	mi
 8010a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8010a42:	6023      	strmi	r3, [r4, #0]
 8010a44:	b91d      	cbnz	r5, 8010a4e <_printf_i+0x196>
 8010a46:	6823      	ldr	r3, [r4, #0]
 8010a48:	f023 0320 	bic.w	r3, r3, #32
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	2310      	movs	r3, #16
 8010a50:	e7b0      	b.n	80109b4 <_printf_i+0xfc>
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	f043 0320 	orr.w	r3, r3, #32
 8010a58:	6023      	str	r3, [r4, #0]
 8010a5a:	2378      	movs	r3, #120	; 0x78
 8010a5c:	4828      	ldr	r0, [pc, #160]	; (8010b00 <_printf_i+0x248>)
 8010a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a62:	e7e3      	b.n	8010a2c <_printf_i+0x174>
 8010a64:	065e      	lsls	r6, r3, #25
 8010a66:	bf48      	it	mi
 8010a68:	b2ad      	uxthmi	r5, r5
 8010a6a:	e7e6      	b.n	8010a3a <_printf_i+0x182>
 8010a6c:	4616      	mov	r6, r2
 8010a6e:	e7bb      	b.n	80109e8 <_printf_i+0x130>
 8010a70:	680b      	ldr	r3, [r1, #0]
 8010a72:	6826      	ldr	r6, [r4, #0]
 8010a74:	6960      	ldr	r0, [r4, #20]
 8010a76:	1d1d      	adds	r5, r3, #4
 8010a78:	600d      	str	r5, [r1, #0]
 8010a7a:	0635      	lsls	r5, r6, #24
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	d501      	bpl.n	8010a84 <_printf_i+0x1cc>
 8010a80:	6018      	str	r0, [r3, #0]
 8010a82:	e002      	b.n	8010a8a <_printf_i+0x1d2>
 8010a84:	0671      	lsls	r1, r6, #25
 8010a86:	d5fb      	bpl.n	8010a80 <_printf_i+0x1c8>
 8010a88:	8018      	strh	r0, [r3, #0]
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	6123      	str	r3, [r4, #16]
 8010a8e:	4616      	mov	r6, r2
 8010a90:	e7ba      	b.n	8010a08 <_printf_i+0x150>
 8010a92:	680b      	ldr	r3, [r1, #0]
 8010a94:	1d1a      	adds	r2, r3, #4
 8010a96:	600a      	str	r2, [r1, #0]
 8010a98:	681e      	ldr	r6, [r3, #0]
 8010a9a:	6862      	ldr	r2, [r4, #4]
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f7ef fbbe 	bl	8000220 <memchr>
 8010aa4:	b108      	cbz	r0, 8010aaa <_printf_i+0x1f2>
 8010aa6:	1b80      	subs	r0, r0, r6
 8010aa8:	6060      	str	r0, [r4, #4]
 8010aaa:	6863      	ldr	r3, [r4, #4]
 8010aac:	6123      	str	r3, [r4, #16]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ab4:	e7a8      	b.n	8010a08 <_printf_i+0x150>
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	4632      	mov	r2, r6
 8010aba:	4649      	mov	r1, r9
 8010abc:	4640      	mov	r0, r8
 8010abe:	47d0      	blx	sl
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	d0ab      	beq.n	8010a1c <_printf_i+0x164>
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	079b      	lsls	r3, r3, #30
 8010ac8:	d413      	bmi.n	8010af2 <_printf_i+0x23a>
 8010aca:	68e0      	ldr	r0, [r4, #12]
 8010acc:	9b03      	ldr	r3, [sp, #12]
 8010ace:	4298      	cmp	r0, r3
 8010ad0:	bfb8      	it	lt
 8010ad2:	4618      	movlt	r0, r3
 8010ad4:	e7a4      	b.n	8010a20 <_printf_i+0x168>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	4632      	mov	r2, r6
 8010ada:	4649      	mov	r1, r9
 8010adc:	4640      	mov	r0, r8
 8010ade:	47d0      	blx	sl
 8010ae0:	3001      	adds	r0, #1
 8010ae2:	d09b      	beq.n	8010a1c <_printf_i+0x164>
 8010ae4:	3501      	adds	r5, #1
 8010ae6:	68e3      	ldr	r3, [r4, #12]
 8010ae8:	9903      	ldr	r1, [sp, #12]
 8010aea:	1a5b      	subs	r3, r3, r1
 8010aec:	42ab      	cmp	r3, r5
 8010aee:	dcf2      	bgt.n	8010ad6 <_printf_i+0x21e>
 8010af0:	e7eb      	b.n	8010aca <_printf_i+0x212>
 8010af2:	2500      	movs	r5, #0
 8010af4:	f104 0619 	add.w	r6, r4, #25
 8010af8:	e7f5      	b.n	8010ae6 <_printf_i+0x22e>
 8010afa:	bf00      	nop
 8010afc:	080178e2 	.word	0x080178e2
 8010b00:	080178f3 	.word	0x080178f3

08010b04 <iprintf>:
 8010b04:	b40f      	push	{r0, r1, r2, r3}
 8010b06:	4b0a      	ldr	r3, [pc, #40]	; (8010b30 <iprintf+0x2c>)
 8010b08:	b513      	push	{r0, r1, r4, lr}
 8010b0a:	681c      	ldr	r4, [r3, #0]
 8010b0c:	b124      	cbz	r4, 8010b18 <iprintf+0x14>
 8010b0e:	69a3      	ldr	r3, [r4, #24]
 8010b10:	b913      	cbnz	r3, 8010b18 <iprintf+0x14>
 8010b12:	4620      	mov	r0, r4
 8010b14:	f001 f91a 	bl	8011d4c <__sinit>
 8010b18:	ab05      	add	r3, sp, #20
 8010b1a:	9a04      	ldr	r2, [sp, #16]
 8010b1c:	68a1      	ldr	r1, [r4, #8]
 8010b1e:	9301      	str	r3, [sp, #4]
 8010b20:	4620      	mov	r0, r4
 8010b22:	f001 fdf1 	bl	8012708 <_vfiprintf_r>
 8010b26:	b002      	add	sp, #8
 8010b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b2c:	b004      	add	sp, #16
 8010b2e:	4770      	bx	lr
 8010b30:	20000018 	.word	0x20000018

08010b34 <putchar>:
 8010b34:	4b09      	ldr	r3, [pc, #36]	; (8010b5c <putchar+0x28>)
 8010b36:	b513      	push	{r0, r1, r4, lr}
 8010b38:	681c      	ldr	r4, [r3, #0]
 8010b3a:	4601      	mov	r1, r0
 8010b3c:	b134      	cbz	r4, 8010b4c <putchar+0x18>
 8010b3e:	69a3      	ldr	r3, [r4, #24]
 8010b40:	b923      	cbnz	r3, 8010b4c <putchar+0x18>
 8010b42:	9001      	str	r0, [sp, #4]
 8010b44:	4620      	mov	r0, r4
 8010b46:	f001 f901 	bl	8011d4c <__sinit>
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	68a2      	ldr	r2, [r4, #8]
 8010b4e:	4620      	mov	r0, r4
 8010b50:	b002      	add	sp, #8
 8010b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b56:	f001 bf07 	b.w	8012968 <_putc_r>
 8010b5a:	bf00      	nop
 8010b5c:	20000018 	.word	0x20000018

08010b60 <_puts_r>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	460e      	mov	r6, r1
 8010b64:	4605      	mov	r5, r0
 8010b66:	b118      	cbz	r0, 8010b70 <_puts_r+0x10>
 8010b68:	6983      	ldr	r3, [r0, #24]
 8010b6a:	b90b      	cbnz	r3, 8010b70 <_puts_r+0x10>
 8010b6c:	f001 f8ee 	bl	8011d4c <__sinit>
 8010b70:	69ab      	ldr	r3, [r5, #24]
 8010b72:	68ac      	ldr	r4, [r5, #8]
 8010b74:	b913      	cbnz	r3, 8010b7c <_puts_r+0x1c>
 8010b76:	4628      	mov	r0, r5
 8010b78:	f001 f8e8 	bl	8011d4c <__sinit>
 8010b7c:	4b2c      	ldr	r3, [pc, #176]	; (8010c30 <_puts_r+0xd0>)
 8010b7e:	429c      	cmp	r4, r3
 8010b80:	d120      	bne.n	8010bc4 <_puts_r+0x64>
 8010b82:	686c      	ldr	r4, [r5, #4]
 8010b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b86:	07db      	lsls	r3, r3, #31
 8010b88:	d405      	bmi.n	8010b96 <_puts_r+0x36>
 8010b8a:	89a3      	ldrh	r3, [r4, #12]
 8010b8c:	0598      	lsls	r0, r3, #22
 8010b8e:	d402      	bmi.n	8010b96 <_puts_r+0x36>
 8010b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b92:	f001 f990 	bl	8011eb6 <__retarget_lock_acquire_recursive>
 8010b96:	89a3      	ldrh	r3, [r4, #12]
 8010b98:	0719      	lsls	r1, r3, #28
 8010b9a:	d51d      	bpl.n	8010bd8 <_puts_r+0x78>
 8010b9c:	6923      	ldr	r3, [r4, #16]
 8010b9e:	b1db      	cbz	r3, 8010bd8 <_puts_r+0x78>
 8010ba0:	3e01      	subs	r6, #1
 8010ba2:	68a3      	ldr	r3, [r4, #8]
 8010ba4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	60a3      	str	r3, [r4, #8]
 8010bac:	bb39      	cbnz	r1, 8010bfe <_puts_r+0x9e>
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	da38      	bge.n	8010c24 <_puts_r+0xc4>
 8010bb2:	4622      	mov	r2, r4
 8010bb4:	210a      	movs	r1, #10
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	f000 f858 	bl	8010c6c <__swbuf_r>
 8010bbc:	3001      	adds	r0, #1
 8010bbe:	d011      	beq.n	8010be4 <_puts_r+0x84>
 8010bc0:	250a      	movs	r5, #10
 8010bc2:	e011      	b.n	8010be8 <_puts_r+0x88>
 8010bc4:	4b1b      	ldr	r3, [pc, #108]	; (8010c34 <_puts_r+0xd4>)
 8010bc6:	429c      	cmp	r4, r3
 8010bc8:	d101      	bne.n	8010bce <_puts_r+0x6e>
 8010bca:	68ac      	ldr	r4, [r5, #8]
 8010bcc:	e7da      	b.n	8010b84 <_puts_r+0x24>
 8010bce:	4b1a      	ldr	r3, [pc, #104]	; (8010c38 <_puts_r+0xd8>)
 8010bd0:	429c      	cmp	r4, r3
 8010bd2:	bf08      	it	eq
 8010bd4:	68ec      	ldreq	r4, [r5, #12]
 8010bd6:	e7d5      	b.n	8010b84 <_puts_r+0x24>
 8010bd8:	4621      	mov	r1, r4
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f000 f898 	bl	8010d10 <__swsetup_r>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d0dd      	beq.n	8010ba0 <_puts_r+0x40>
 8010be4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bea:	07da      	lsls	r2, r3, #31
 8010bec:	d405      	bmi.n	8010bfa <_puts_r+0x9a>
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	059b      	lsls	r3, r3, #22
 8010bf2:	d402      	bmi.n	8010bfa <_puts_r+0x9a>
 8010bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bf6:	f001 f95f 	bl	8011eb8 <__retarget_lock_release_recursive>
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	da04      	bge.n	8010c0c <_puts_r+0xac>
 8010c02:	69a2      	ldr	r2, [r4, #24]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	dc06      	bgt.n	8010c16 <_puts_r+0xb6>
 8010c08:	290a      	cmp	r1, #10
 8010c0a:	d004      	beq.n	8010c16 <_puts_r+0xb6>
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	1c5a      	adds	r2, r3, #1
 8010c10:	6022      	str	r2, [r4, #0]
 8010c12:	7019      	strb	r1, [r3, #0]
 8010c14:	e7c5      	b.n	8010ba2 <_puts_r+0x42>
 8010c16:	4622      	mov	r2, r4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f000 f827 	bl	8010c6c <__swbuf_r>
 8010c1e:	3001      	adds	r0, #1
 8010c20:	d1bf      	bne.n	8010ba2 <_puts_r+0x42>
 8010c22:	e7df      	b.n	8010be4 <_puts_r+0x84>
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	250a      	movs	r5, #10
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	6022      	str	r2, [r4, #0]
 8010c2c:	701d      	strb	r5, [r3, #0]
 8010c2e:	e7db      	b.n	8010be8 <_puts_r+0x88>
 8010c30:	080179f4 	.word	0x080179f4
 8010c34:	08017a14 	.word	0x08017a14
 8010c38:	080179d4 	.word	0x080179d4

08010c3c <puts>:
 8010c3c:	4b02      	ldr	r3, [pc, #8]	; (8010c48 <puts+0xc>)
 8010c3e:	4601      	mov	r1, r0
 8010c40:	6818      	ldr	r0, [r3, #0]
 8010c42:	f7ff bf8d 	b.w	8010b60 <_puts_r>
 8010c46:	bf00      	nop
 8010c48:	20000018 	.word	0x20000018

08010c4c <_sbrk_r>:
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	4d06      	ldr	r5, [pc, #24]	; (8010c68 <_sbrk_r+0x1c>)
 8010c50:	2300      	movs	r3, #0
 8010c52:	4604      	mov	r4, r0
 8010c54:	4608      	mov	r0, r1
 8010c56:	602b      	str	r3, [r5, #0]
 8010c58:	f7f2 feec 	bl	8003a34 <_sbrk>
 8010c5c:	1c43      	adds	r3, r0, #1
 8010c5e:	d102      	bne.n	8010c66 <_sbrk_r+0x1a>
 8010c60:	682b      	ldr	r3, [r5, #0]
 8010c62:	b103      	cbz	r3, 8010c66 <_sbrk_r+0x1a>
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	bd38      	pop	{r3, r4, r5, pc}
 8010c68:	20040fd8 	.word	0x20040fd8

08010c6c <__swbuf_r>:
 8010c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6e:	460e      	mov	r6, r1
 8010c70:	4614      	mov	r4, r2
 8010c72:	4605      	mov	r5, r0
 8010c74:	b118      	cbz	r0, 8010c7e <__swbuf_r+0x12>
 8010c76:	6983      	ldr	r3, [r0, #24]
 8010c78:	b90b      	cbnz	r3, 8010c7e <__swbuf_r+0x12>
 8010c7a:	f001 f867 	bl	8011d4c <__sinit>
 8010c7e:	4b21      	ldr	r3, [pc, #132]	; (8010d04 <__swbuf_r+0x98>)
 8010c80:	429c      	cmp	r4, r3
 8010c82:	d12b      	bne.n	8010cdc <__swbuf_r+0x70>
 8010c84:	686c      	ldr	r4, [r5, #4]
 8010c86:	69a3      	ldr	r3, [r4, #24]
 8010c88:	60a3      	str	r3, [r4, #8]
 8010c8a:	89a3      	ldrh	r3, [r4, #12]
 8010c8c:	071a      	lsls	r2, r3, #28
 8010c8e:	d52f      	bpl.n	8010cf0 <__swbuf_r+0x84>
 8010c90:	6923      	ldr	r3, [r4, #16]
 8010c92:	b36b      	cbz	r3, 8010cf0 <__swbuf_r+0x84>
 8010c94:	6923      	ldr	r3, [r4, #16]
 8010c96:	6820      	ldr	r0, [r4, #0]
 8010c98:	1ac0      	subs	r0, r0, r3
 8010c9a:	6963      	ldr	r3, [r4, #20]
 8010c9c:	b2f6      	uxtb	r6, r6
 8010c9e:	4283      	cmp	r3, r0
 8010ca0:	4637      	mov	r7, r6
 8010ca2:	dc04      	bgt.n	8010cae <__swbuf_r+0x42>
 8010ca4:	4621      	mov	r1, r4
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f000 ffbc 	bl	8011c24 <_fflush_r>
 8010cac:	bb30      	cbnz	r0, 8010cfc <__swbuf_r+0x90>
 8010cae:	68a3      	ldr	r3, [r4, #8]
 8010cb0:	3b01      	subs	r3, #1
 8010cb2:	60a3      	str	r3, [r4, #8]
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	1c5a      	adds	r2, r3, #1
 8010cb8:	6022      	str	r2, [r4, #0]
 8010cba:	701e      	strb	r6, [r3, #0]
 8010cbc:	6963      	ldr	r3, [r4, #20]
 8010cbe:	3001      	adds	r0, #1
 8010cc0:	4283      	cmp	r3, r0
 8010cc2:	d004      	beq.n	8010cce <__swbuf_r+0x62>
 8010cc4:	89a3      	ldrh	r3, [r4, #12]
 8010cc6:	07db      	lsls	r3, r3, #31
 8010cc8:	d506      	bpl.n	8010cd8 <__swbuf_r+0x6c>
 8010cca:	2e0a      	cmp	r6, #10
 8010ccc:	d104      	bne.n	8010cd8 <__swbuf_r+0x6c>
 8010cce:	4621      	mov	r1, r4
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f000 ffa7 	bl	8011c24 <_fflush_r>
 8010cd6:	b988      	cbnz	r0, 8010cfc <__swbuf_r+0x90>
 8010cd8:	4638      	mov	r0, r7
 8010cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cdc:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <__swbuf_r+0x9c>)
 8010cde:	429c      	cmp	r4, r3
 8010ce0:	d101      	bne.n	8010ce6 <__swbuf_r+0x7a>
 8010ce2:	68ac      	ldr	r4, [r5, #8]
 8010ce4:	e7cf      	b.n	8010c86 <__swbuf_r+0x1a>
 8010ce6:	4b09      	ldr	r3, [pc, #36]	; (8010d0c <__swbuf_r+0xa0>)
 8010ce8:	429c      	cmp	r4, r3
 8010cea:	bf08      	it	eq
 8010cec:	68ec      	ldreq	r4, [r5, #12]
 8010cee:	e7ca      	b.n	8010c86 <__swbuf_r+0x1a>
 8010cf0:	4621      	mov	r1, r4
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f000 f80c 	bl	8010d10 <__swsetup_r>
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d0cb      	beq.n	8010c94 <__swbuf_r+0x28>
 8010cfc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010d00:	e7ea      	b.n	8010cd8 <__swbuf_r+0x6c>
 8010d02:	bf00      	nop
 8010d04:	080179f4 	.word	0x080179f4
 8010d08:	08017a14 	.word	0x08017a14
 8010d0c:	080179d4 	.word	0x080179d4

08010d10 <__swsetup_r>:
 8010d10:	4b32      	ldr	r3, [pc, #200]	; (8010ddc <__swsetup_r+0xcc>)
 8010d12:	b570      	push	{r4, r5, r6, lr}
 8010d14:	681d      	ldr	r5, [r3, #0]
 8010d16:	4606      	mov	r6, r0
 8010d18:	460c      	mov	r4, r1
 8010d1a:	b125      	cbz	r5, 8010d26 <__swsetup_r+0x16>
 8010d1c:	69ab      	ldr	r3, [r5, #24]
 8010d1e:	b913      	cbnz	r3, 8010d26 <__swsetup_r+0x16>
 8010d20:	4628      	mov	r0, r5
 8010d22:	f001 f813 	bl	8011d4c <__sinit>
 8010d26:	4b2e      	ldr	r3, [pc, #184]	; (8010de0 <__swsetup_r+0xd0>)
 8010d28:	429c      	cmp	r4, r3
 8010d2a:	d10f      	bne.n	8010d4c <__swsetup_r+0x3c>
 8010d2c:	686c      	ldr	r4, [r5, #4]
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d34:	0719      	lsls	r1, r3, #28
 8010d36:	d42c      	bmi.n	8010d92 <__swsetup_r+0x82>
 8010d38:	06dd      	lsls	r5, r3, #27
 8010d3a:	d411      	bmi.n	8010d60 <__swsetup_r+0x50>
 8010d3c:	2309      	movs	r3, #9
 8010d3e:	6033      	str	r3, [r6, #0]
 8010d40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d44:	81a3      	strh	r3, [r4, #12]
 8010d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d4a:	e03e      	b.n	8010dca <__swsetup_r+0xba>
 8010d4c:	4b25      	ldr	r3, [pc, #148]	; (8010de4 <__swsetup_r+0xd4>)
 8010d4e:	429c      	cmp	r4, r3
 8010d50:	d101      	bne.n	8010d56 <__swsetup_r+0x46>
 8010d52:	68ac      	ldr	r4, [r5, #8]
 8010d54:	e7eb      	b.n	8010d2e <__swsetup_r+0x1e>
 8010d56:	4b24      	ldr	r3, [pc, #144]	; (8010de8 <__swsetup_r+0xd8>)
 8010d58:	429c      	cmp	r4, r3
 8010d5a:	bf08      	it	eq
 8010d5c:	68ec      	ldreq	r4, [r5, #12]
 8010d5e:	e7e6      	b.n	8010d2e <__swsetup_r+0x1e>
 8010d60:	0758      	lsls	r0, r3, #29
 8010d62:	d512      	bpl.n	8010d8a <__swsetup_r+0x7a>
 8010d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d66:	b141      	cbz	r1, 8010d7a <__swsetup_r+0x6a>
 8010d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d6c:	4299      	cmp	r1, r3
 8010d6e:	d002      	beq.n	8010d76 <__swsetup_r+0x66>
 8010d70:	4630      	mov	r0, r6
 8010d72:	f7ff f9b3 	bl	80100dc <_free_r>
 8010d76:	2300      	movs	r3, #0
 8010d78:	6363      	str	r3, [r4, #52]	; 0x34
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d80:	81a3      	strh	r3, [r4, #12]
 8010d82:	2300      	movs	r3, #0
 8010d84:	6063      	str	r3, [r4, #4]
 8010d86:	6923      	ldr	r3, [r4, #16]
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	89a3      	ldrh	r3, [r4, #12]
 8010d8c:	f043 0308 	orr.w	r3, r3, #8
 8010d90:	81a3      	strh	r3, [r4, #12]
 8010d92:	6923      	ldr	r3, [r4, #16]
 8010d94:	b94b      	cbnz	r3, 8010daa <__swsetup_r+0x9a>
 8010d96:	89a3      	ldrh	r3, [r4, #12]
 8010d98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010da0:	d003      	beq.n	8010daa <__swsetup_r+0x9a>
 8010da2:	4621      	mov	r1, r4
 8010da4:	4630      	mov	r0, r6
 8010da6:	f001 f8ad 	bl	8011f04 <__smakebuf_r>
 8010daa:	89a0      	ldrh	r0, [r4, #12]
 8010dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010db0:	f010 0301 	ands.w	r3, r0, #1
 8010db4:	d00a      	beq.n	8010dcc <__swsetup_r+0xbc>
 8010db6:	2300      	movs	r3, #0
 8010db8:	60a3      	str	r3, [r4, #8]
 8010dba:	6963      	ldr	r3, [r4, #20]
 8010dbc:	425b      	negs	r3, r3
 8010dbe:	61a3      	str	r3, [r4, #24]
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	b943      	cbnz	r3, 8010dd6 <__swsetup_r+0xc6>
 8010dc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010dc8:	d1ba      	bne.n	8010d40 <__swsetup_r+0x30>
 8010dca:	bd70      	pop	{r4, r5, r6, pc}
 8010dcc:	0781      	lsls	r1, r0, #30
 8010dce:	bf58      	it	pl
 8010dd0:	6963      	ldrpl	r3, [r4, #20]
 8010dd2:	60a3      	str	r3, [r4, #8]
 8010dd4:	e7f4      	b.n	8010dc0 <__swsetup_r+0xb0>
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	e7f7      	b.n	8010dca <__swsetup_r+0xba>
 8010dda:	bf00      	nop
 8010ddc:	20000018 	.word	0x20000018
 8010de0:	080179f4 	.word	0x080179f4
 8010de4:	08017a14 	.word	0x08017a14
 8010de8:	080179d4 	.word	0x080179d4

08010dec <__assert_func>:
 8010dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dee:	4614      	mov	r4, r2
 8010df0:	461a      	mov	r2, r3
 8010df2:	4b09      	ldr	r3, [pc, #36]	; (8010e18 <__assert_func+0x2c>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4605      	mov	r5, r0
 8010df8:	68d8      	ldr	r0, [r3, #12]
 8010dfa:	b14c      	cbz	r4, 8010e10 <__assert_func+0x24>
 8010dfc:	4b07      	ldr	r3, [pc, #28]	; (8010e1c <__assert_func+0x30>)
 8010dfe:	9100      	str	r1, [sp, #0]
 8010e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e04:	4906      	ldr	r1, [pc, #24]	; (8010e20 <__assert_func+0x34>)
 8010e06:	462b      	mov	r3, r5
 8010e08:	f001 f81e 	bl	8011e48 <fiprintf>
 8010e0c:	f001 fe4a 	bl	8012aa4 <abort>
 8010e10:	4b04      	ldr	r3, [pc, #16]	; (8010e24 <__assert_func+0x38>)
 8010e12:	461c      	mov	r4, r3
 8010e14:	e7f3      	b.n	8010dfe <__assert_func+0x12>
 8010e16:	bf00      	nop
 8010e18:	20000018 	.word	0x20000018
 8010e1c:	08017904 	.word	0x08017904
 8010e20:	08017911 	.word	0x08017911
 8010e24:	0801793f 	.word	0x0801793f

08010e28 <quorem>:
 8010e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	6903      	ldr	r3, [r0, #16]
 8010e2e:	690c      	ldr	r4, [r1, #16]
 8010e30:	42a3      	cmp	r3, r4
 8010e32:	4607      	mov	r7, r0
 8010e34:	f2c0 8081 	blt.w	8010f3a <quorem+0x112>
 8010e38:	3c01      	subs	r4, #1
 8010e3a:	f101 0814 	add.w	r8, r1, #20
 8010e3e:	f100 0514 	add.w	r5, r0, #20
 8010e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e46:	9301      	str	r3, [sp, #4]
 8010e48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e50:	3301      	adds	r3, #1
 8010e52:	429a      	cmp	r2, r3
 8010e54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010e58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010e5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010e60:	d331      	bcc.n	8010ec6 <quorem+0x9e>
 8010e62:	f04f 0e00 	mov.w	lr, #0
 8010e66:	4640      	mov	r0, r8
 8010e68:	46ac      	mov	ip, r5
 8010e6a:	46f2      	mov	sl, lr
 8010e6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010e70:	b293      	uxth	r3, r2
 8010e72:	fb06 e303 	mla	r3, r6, r3, lr
 8010e76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	ebaa 0303 	sub.w	r3, sl, r3
 8010e80:	0c12      	lsrs	r2, r2, #16
 8010e82:	f8dc a000 	ldr.w	sl, [ip]
 8010e86:	fb06 e202 	mla	r2, r6, r2, lr
 8010e8a:	fa13 f38a 	uxtah	r3, r3, sl
 8010e8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010e92:	fa1f fa82 	uxth.w	sl, r2
 8010e96:	f8dc 2000 	ldr.w	r2, [ip]
 8010e9a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010e9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ea8:	4581      	cmp	r9, r0
 8010eaa:	f84c 3b04 	str.w	r3, [ip], #4
 8010eae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010eb2:	d2db      	bcs.n	8010e6c <quorem+0x44>
 8010eb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8010eb8:	b92b      	cbnz	r3, 8010ec6 <quorem+0x9e>
 8010eba:	9b01      	ldr	r3, [sp, #4]
 8010ebc:	3b04      	subs	r3, #4
 8010ebe:	429d      	cmp	r5, r3
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	d32e      	bcc.n	8010f22 <quorem+0xfa>
 8010ec4:	613c      	str	r4, [r7, #16]
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f001 fae6 	bl	8012498 <__mcmp>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	db24      	blt.n	8010f1a <quorem+0xf2>
 8010ed0:	3601      	adds	r6, #1
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f04f 0c00 	mov.w	ip, #0
 8010ed8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010edc:	f8d0 e000 	ldr.w	lr, [r0]
 8010ee0:	b293      	uxth	r3, r2
 8010ee2:	ebac 0303 	sub.w	r3, ip, r3
 8010ee6:	0c12      	lsrs	r2, r2, #16
 8010ee8:	fa13 f38e 	uxtah	r3, r3, lr
 8010eec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010efa:	45c1      	cmp	r9, r8
 8010efc:	f840 3b04 	str.w	r3, [r0], #4
 8010f00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010f04:	d2e8      	bcs.n	8010ed8 <quorem+0xb0>
 8010f06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f0e:	b922      	cbnz	r2, 8010f1a <quorem+0xf2>
 8010f10:	3b04      	subs	r3, #4
 8010f12:	429d      	cmp	r5, r3
 8010f14:	461a      	mov	r2, r3
 8010f16:	d30a      	bcc.n	8010f2e <quorem+0x106>
 8010f18:	613c      	str	r4, [r7, #16]
 8010f1a:	4630      	mov	r0, r6
 8010f1c:	b003      	add	sp, #12
 8010f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f22:	6812      	ldr	r2, [r2, #0]
 8010f24:	3b04      	subs	r3, #4
 8010f26:	2a00      	cmp	r2, #0
 8010f28:	d1cc      	bne.n	8010ec4 <quorem+0x9c>
 8010f2a:	3c01      	subs	r4, #1
 8010f2c:	e7c7      	b.n	8010ebe <quorem+0x96>
 8010f2e:	6812      	ldr	r2, [r2, #0]
 8010f30:	3b04      	subs	r3, #4
 8010f32:	2a00      	cmp	r2, #0
 8010f34:	d1f0      	bne.n	8010f18 <quorem+0xf0>
 8010f36:	3c01      	subs	r4, #1
 8010f38:	e7eb      	b.n	8010f12 <quorem+0xea>
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	e7ee      	b.n	8010f1c <quorem+0xf4>
	...

08010f40 <_dtoa_r>:
 8010f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	ed2d 8b02 	vpush	{d8}
 8010f48:	ec57 6b10 	vmov	r6, r7, d0
 8010f4c:	b095      	sub	sp, #84	; 0x54
 8010f4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010f54:	9105      	str	r1, [sp, #20]
 8010f56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f60:	b975      	cbnz	r5, 8010f80 <_dtoa_r+0x40>
 8010f62:	2010      	movs	r0, #16
 8010f64:	f7ff f89c 	bl	80100a0 <malloc>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	6260      	str	r0, [r4, #36]	; 0x24
 8010f6c:	b920      	cbnz	r0, 8010f78 <_dtoa_r+0x38>
 8010f6e:	4bb2      	ldr	r3, [pc, #712]	; (8011238 <_dtoa_r+0x2f8>)
 8010f70:	21ea      	movs	r1, #234	; 0xea
 8010f72:	48b2      	ldr	r0, [pc, #712]	; (801123c <_dtoa_r+0x2fc>)
 8010f74:	f7ff ff3a 	bl	8010dec <__assert_func>
 8010f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010f7c:	6005      	str	r5, [r0, #0]
 8010f7e:	60c5      	str	r5, [r0, #12]
 8010f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f82:	6819      	ldr	r1, [r3, #0]
 8010f84:	b151      	cbz	r1, 8010f9c <_dtoa_r+0x5c>
 8010f86:	685a      	ldr	r2, [r3, #4]
 8010f88:	604a      	str	r2, [r1, #4]
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	4093      	lsls	r3, r2
 8010f8e:	608b      	str	r3, [r1, #8]
 8010f90:	4620      	mov	r0, r4
 8010f92:	f001 f843 	bl	801201c <_Bfree>
 8010f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f98:	2200      	movs	r2, #0
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	1e3b      	subs	r3, r7, #0
 8010f9e:	bfb9      	ittee	lt
 8010fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010fa4:	9303      	strlt	r3, [sp, #12]
 8010fa6:	2300      	movge	r3, #0
 8010fa8:	f8c8 3000 	strge.w	r3, [r8]
 8010fac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010fb0:	4ba3      	ldr	r3, [pc, #652]	; (8011240 <_dtoa_r+0x300>)
 8010fb2:	bfbc      	itt	lt
 8010fb4:	2201      	movlt	r2, #1
 8010fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8010fba:	ea33 0309 	bics.w	r3, r3, r9
 8010fbe:	d11b      	bne.n	8010ff8 <_dtoa_r+0xb8>
 8010fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8010fc6:	6013      	str	r3, [r2, #0]
 8010fc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fcc:	4333      	orrs	r3, r6
 8010fce:	f000 857a 	beq.w	8011ac6 <_dtoa_r+0xb86>
 8010fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fd4:	b963      	cbnz	r3, 8010ff0 <_dtoa_r+0xb0>
 8010fd6:	4b9b      	ldr	r3, [pc, #620]	; (8011244 <_dtoa_r+0x304>)
 8010fd8:	e024      	b.n	8011024 <_dtoa_r+0xe4>
 8010fda:	4b9b      	ldr	r3, [pc, #620]	; (8011248 <_dtoa_r+0x308>)
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	3308      	adds	r3, #8
 8010fe0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010fe2:	6013      	str	r3, [r2, #0]
 8010fe4:	9800      	ldr	r0, [sp, #0]
 8010fe6:	b015      	add	sp, #84	; 0x54
 8010fe8:	ecbd 8b02 	vpop	{d8}
 8010fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff0:	4b94      	ldr	r3, [pc, #592]	; (8011244 <_dtoa_r+0x304>)
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	3303      	adds	r3, #3
 8010ff6:	e7f3      	b.n	8010fe0 <_dtoa_r+0xa0>
 8010ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	ec51 0b17 	vmov	r0, r1, d7
 8011002:	2300      	movs	r3, #0
 8011004:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011008:	f7ef fd7e 	bl	8000b08 <__aeabi_dcmpeq>
 801100c:	4680      	mov	r8, r0
 801100e:	b158      	cbz	r0, 8011028 <_dtoa_r+0xe8>
 8011010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011012:	2301      	movs	r3, #1
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011018:	2b00      	cmp	r3, #0
 801101a:	f000 8551 	beq.w	8011ac0 <_dtoa_r+0xb80>
 801101e:	488b      	ldr	r0, [pc, #556]	; (801124c <_dtoa_r+0x30c>)
 8011020:	6018      	str	r0, [r3, #0]
 8011022:	1e43      	subs	r3, r0, #1
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	e7dd      	b.n	8010fe4 <_dtoa_r+0xa4>
 8011028:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801102c:	aa12      	add	r2, sp, #72	; 0x48
 801102e:	a913      	add	r1, sp, #76	; 0x4c
 8011030:	4620      	mov	r0, r4
 8011032:	f001 fad5 	bl	80125e0 <__d2b>
 8011036:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801103a:	4683      	mov	fp, r0
 801103c:	2d00      	cmp	r5, #0
 801103e:	d07c      	beq.n	801113a <_dtoa_r+0x1fa>
 8011040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011042:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801104a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801104e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011052:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801105a:	4b7d      	ldr	r3, [pc, #500]	; (8011250 <_dtoa_r+0x310>)
 801105c:	2200      	movs	r2, #0
 801105e:	4630      	mov	r0, r6
 8011060:	4639      	mov	r1, r7
 8011062:	f7ef f931 	bl	80002c8 <__aeabi_dsub>
 8011066:	a36e      	add	r3, pc, #440	; (adr r3, 8011220 <_dtoa_r+0x2e0>)
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	f7ef fae4 	bl	8000638 <__aeabi_dmul>
 8011070:	a36d      	add	r3, pc, #436	; (adr r3, 8011228 <_dtoa_r+0x2e8>)
 8011072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011076:	f7ef f929 	bl	80002cc <__adddf3>
 801107a:	4606      	mov	r6, r0
 801107c:	4628      	mov	r0, r5
 801107e:	460f      	mov	r7, r1
 8011080:	f7ef fa70 	bl	8000564 <__aeabi_i2d>
 8011084:	a36a      	add	r3, pc, #424	; (adr r3, 8011230 <_dtoa_r+0x2f0>)
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	f7ef fad5 	bl	8000638 <__aeabi_dmul>
 801108e:	4602      	mov	r2, r0
 8011090:	460b      	mov	r3, r1
 8011092:	4630      	mov	r0, r6
 8011094:	4639      	mov	r1, r7
 8011096:	f7ef f919 	bl	80002cc <__adddf3>
 801109a:	4606      	mov	r6, r0
 801109c:	460f      	mov	r7, r1
 801109e:	f7ef fd7b 	bl	8000b98 <__aeabi_d2iz>
 80110a2:	2200      	movs	r2, #0
 80110a4:	4682      	mov	sl, r0
 80110a6:	2300      	movs	r3, #0
 80110a8:	4630      	mov	r0, r6
 80110aa:	4639      	mov	r1, r7
 80110ac:	f7ef fd36 	bl	8000b1c <__aeabi_dcmplt>
 80110b0:	b148      	cbz	r0, 80110c6 <_dtoa_r+0x186>
 80110b2:	4650      	mov	r0, sl
 80110b4:	f7ef fa56 	bl	8000564 <__aeabi_i2d>
 80110b8:	4632      	mov	r2, r6
 80110ba:	463b      	mov	r3, r7
 80110bc:	f7ef fd24 	bl	8000b08 <__aeabi_dcmpeq>
 80110c0:	b908      	cbnz	r0, 80110c6 <_dtoa_r+0x186>
 80110c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80110c6:	f1ba 0f16 	cmp.w	sl, #22
 80110ca:	d854      	bhi.n	8011176 <_dtoa_r+0x236>
 80110cc:	4b61      	ldr	r3, [pc, #388]	; (8011254 <_dtoa_r+0x314>)
 80110ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80110d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80110da:	f7ef fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80110de:	2800      	cmp	r0, #0
 80110e0:	d04b      	beq.n	801117a <_dtoa_r+0x23a>
 80110e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80110e6:	2300      	movs	r3, #0
 80110e8:	930e      	str	r3, [sp, #56]	; 0x38
 80110ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110ec:	1b5d      	subs	r5, r3, r5
 80110ee:	1e6b      	subs	r3, r5, #1
 80110f0:	9304      	str	r3, [sp, #16]
 80110f2:	bf43      	ittte	mi
 80110f4:	2300      	movmi	r3, #0
 80110f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80110fa:	9304      	strmi	r3, [sp, #16]
 80110fc:	f04f 0800 	movpl.w	r8, #0
 8011100:	f1ba 0f00 	cmp.w	sl, #0
 8011104:	db3b      	blt.n	801117e <_dtoa_r+0x23e>
 8011106:	9b04      	ldr	r3, [sp, #16]
 8011108:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801110c:	4453      	add	r3, sl
 801110e:	9304      	str	r3, [sp, #16]
 8011110:	2300      	movs	r3, #0
 8011112:	9306      	str	r3, [sp, #24]
 8011114:	9b05      	ldr	r3, [sp, #20]
 8011116:	2b09      	cmp	r3, #9
 8011118:	d869      	bhi.n	80111ee <_dtoa_r+0x2ae>
 801111a:	2b05      	cmp	r3, #5
 801111c:	bfc4      	itt	gt
 801111e:	3b04      	subgt	r3, #4
 8011120:	9305      	strgt	r3, [sp, #20]
 8011122:	9b05      	ldr	r3, [sp, #20]
 8011124:	f1a3 0302 	sub.w	r3, r3, #2
 8011128:	bfcc      	ite	gt
 801112a:	2500      	movgt	r5, #0
 801112c:	2501      	movle	r5, #1
 801112e:	2b03      	cmp	r3, #3
 8011130:	d869      	bhi.n	8011206 <_dtoa_r+0x2c6>
 8011132:	e8df f003 	tbb	[pc, r3]
 8011136:	4e2c      	.short	0x4e2c
 8011138:	5a4c      	.short	0x5a4c
 801113a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801113e:	441d      	add	r5, r3
 8011140:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011144:	2b20      	cmp	r3, #32
 8011146:	bfc1      	itttt	gt
 8011148:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801114c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011150:	fa09 f303 	lslgt.w	r3, r9, r3
 8011154:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011158:	bfda      	itte	le
 801115a:	f1c3 0320 	rsble	r3, r3, #32
 801115e:	fa06 f003 	lslle.w	r0, r6, r3
 8011162:	4318      	orrgt	r0, r3
 8011164:	f7ef f9ee 	bl	8000544 <__aeabi_ui2d>
 8011168:	2301      	movs	r3, #1
 801116a:	4606      	mov	r6, r0
 801116c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011170:	3d01      	subs	r5, #1
 8011172:	9310      	str	r3, [sp, #64]	; 0x40
 8011174:	e771      	b.n	801105a <_dtoa_r+0x11a>
 8011176:	2301      	movs	r3, #1
 8011178:	e7b6      	b.n	80110e8 <_dtoa_r+0x1a8>
 801117a:	900e      	str	r0, [sp, #56]	; 0x38
 801117c:	e7b5      	b.n	80110ea <_dtoa_r+0x1aa>
 801117e:	f1ca 0300 	rsb	r3, sl, #0
 8011182:	9306      	str	r3, [sp, #24]
 8011184:	2300      	movs	r3, #0
 8011186:	eba8 080a 	sub.w	r8, r8, sl
 801118a:	930d      	str	r3, [sp, #52]	; 0x34
 801118c:	e7c2      	b.n	8011114 <_dtoa_r+0x1d4>
 801118e:	2300      	movs	r3, #0
 8011190:	9308      	str	r3, [sp, #32]
 8011192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011194:	2b00      	cmp	r3, #0
 8011196:	dc39      	bgt.n	801120c <_dtoa_r+0x2cc>
 8011198:	f04f 0901 	mov.w	r9, #1
 801119c:	f8cd 9004 	str.w	r9, [sp, #4]
 80111a0:	464b      	mov	r3, r9
 80111a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80111a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80111a8:	2200      	movs	r2, #0
 80111aa:	6042      	str	r2, [r0, #4]
 80111ac:	2204      	movs	r2, #4
 80111ae:	f102 0614 	add.w	r6, r2, #20
 80111b2:	429e      	cmp	r6, r3
 80111b4:	6841      	ldr	r1, [r0, #4]
 80111b6:	d92f      	bls.n	8011218 <_dtoa_r+0x2d8>
 80111b8:	4620      	mov	r0, r4
 80111ba:	f000 feef 	bl	8011f9c <_Balloc>
 80111be:	9000      	str	r0, [sp, #0]
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d14b      	bne.n	801125c <_dtoa_r+0x31c>
 80111c4:	4b24      	ldr	r3, [pc, #144]	; (8011258 <_dtoa_r+0x318>)
 80111c6:	4602      	mov	r2, r0
 80111c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80111cc:	e6d1      	b.n	8010f72 <_dtoa_r+0x32>
 80111ce:	2301      	movs	r3, #1
 80111d0:	e7de      	b.n	8011190 <_dtoa_r+0x250>
 80111d2:	2300      	movs	r3, #0
 80111d4:	9308      	str	r3, [sp, #32]
 80111d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d8:	eb0a 0903 	add.w	r9, sl, r3
 80111dc:	f109 0301 	add.w	r3, r9, #1
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	9301      	str	r3, [sp, #4]
 80111e4:	bfb8      	it	lt
 80111e6:	2301      	movlt	r3, #1
 80111e8:	e7dd      	b.n	80111a6 <_dtoa_r+0x266>
 80111ea:	2301      	movs	r3, #1
 80111ec:	e7f2      	b.n	80111d4 <_dtoa_r+0x294>
 80111ee:	2501      	movs	r5, #1
 80111f0:	2300      	movs	r3, #0
 80111f2:	9305      	str	r3, [sp, #20]
 80111f4:	9508      	str	r5, [sp, #32]
 80111f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80111fa:	2200      	movs	r2, #0
 80111fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8011200:	2312      	movs	r3, #18
 8011202:	9209      	str	r2, [sp, #36]	; 0x24
 8011204:	e7cf      	b.n	80111a6 <_dtoa_r+0x266>
 8011206:	2301      	movs	r3, #1
 8011208:	9308      	str	r3, [sp, #32]
 801120a:	e7f4      	b.n	80111f6 <_dtoa_r+0x2b6>
 801120c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011210:	f8cd 9004 	str.w	r9, [sp, #4]
 8011214:	464b      	mov	r3, r9
 8011216:	e7c6      	b.n	80111a6 <_dtoa_r+0x266>
 8011218:	3101      	adds	r1, #1
 801121a:	6041      	str	r1, [r0, #4]
 801121c:	0052      	lsls	r2, r2, #1
 801121e:	e7c6      	b.n	80111ae <_dtoa_r+0x26e>
 8011220:	636f4361 	.word	0x636f4361
 8011224:	3fd287a7 	.word	0x3fd287a7
 8011228:	8b60c8b3 	.word	0x8b60c8b3
 801122c:	3fc68a28 	.word	0x3fc68a28
 8011230:	509f79fb 	.word	0x509f79fb
 8011234:	3fd34413 	.word	0x3fd34413
 8011238:	0801794d 	.word	0x0801794d
 801123c:	08017964 	.word	0x08017964
 8011240:	7ff00000 	.word	0x7ff00000
 8011244:	08017949 	.word	0x08017949
 8011248:	08017940 	.word	0x08017940
 801124c:	080178e1 	.word	0x080178e1
 8011250:	3ff80000 	.word	0x3ff80000
 8011254:	08017ac0 	.word	0x08017ac0
 8011258:	080179c3 	.word	0x080179c3
 801125c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801125e:	9a00      	ldr	r2, [sp, #0]
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	9b01      	ldr	r3, [sp, #4]
 8011264:	2b0e      	cmp	r3, #14
 8011266:	f200 80ad 	bhi.w	80113c4 <_dtoa_r+0x484>
 801126a:	2d00      	cmp	r5, #0
 801126c:	f000 80aa 	beq.w	80113c4 <_dtoa_r+0x484>
 8011270:	f1ba 0f00 	cmp.w	sl, #0
 8011274:	dd36      	ble.n	80112e4 <_dtoa_r+0x3a4>
 8011276:	4ac3      	ldr	r2, [pc, #780]	; (8011584 <_dtoa_r+0x644>)
 8011278:	f00a 030f 	and.w	r3, sl, #15
 801127c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011280:	ed93 7b00 	vldr	d7, [r3]
 8011284:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011288:	ea4f 172a 	mov.w	r7, sl, asr #4
 801128c:	eeb0 8a47 	vmov.f32	s16, s14
 8011290:	eef0 8a67 	vmov.f32	s17, s15
 8011294:	d016      	beq.n	80112c4 <_dtoa_r+0x384>
 8011296:	4bbc      	ldr	r3, [pc, #752]	; (8011588 <_dtoa_r+0x648>)
 8011298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801129c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80112a0:	f7ef faf4 	bl	800088c <__aeabi_ddiv>
 80112a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112a8:	f007 070f 	and.w	r7, r7, #15
 80112ac:	2503      	movs	r5, #3
 80112ae:	4eb6      	ldr	r6, [pc, #728]	; (8011588 <_dtoa_r+0x648>)
 80112b0:	b957      	cbnz	r7, 80112c8 <_dtoa_r+0x388>
 80112b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112b6:	ec53 2b18 	vmov	r2, r3, d8
 80112ba:	f7ef fae7 	bl	800088c <__aeabi_ddiv>
 80112be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112c2:	e029      	b.n	8011318 <_dtoa_r+0x3d8>
 80112c4:	2502      	movs	r5, #2
 80112c6:	e7f2      	b.n	80112ae <_dtoa_r+0x36e>
 80112c8:	07f9      	lsls	r1, r7, #31
 80112ca:	d508      	bpl.n	80112de <_dtoa_r+0x39e>
 80112cc:	ec51 0b18 	vmov	r0, r1, d8
 80112d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80112d4:	f7ef f9b0 	bl	8000638 <__aeabi_dmul>
 80112d8:	ec41 0b18 	vmov	d8, r0, r1
 80112dc:	3501      	adds	r5, #1
 80112de:	107f      	asrs	r7, r7, #1
 80112e0:	3608      	adds	r6, #8
 80112e2:	e7e5      	b.n	80112b0 <_dtoa_r+0x370>
 80112e4:	f000 80a6 	beq.w	8011434 <_dtoa_r+0x4f4>
 80112e8:	f1ca 0600 	rsb	r6, sl, #0
 80112ec:	4ba5      	ldr	r3, [pc, #660]	; (8011584 <_dtoa_r+0x644>)
 80112ee:	4fa6      	ldr	r7, [pc, #664]	; (8011588 <_dtoa_r+0x648>)
 80112f0:	f006 020f 	and.w	r2, r6, #15
 80112f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011300:	f7ef f99a 	bl	8000638 <__aeabi_dmul>
 8011304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011308:	1136      	asrs	r6, r6, #4
 801130a:	2300      	movs	r3, #0
 801130c:	2502      	movs	r5, #2
 801130e:	2e00      	cmp	r6, #0
 8011310:	f040 8085 	bne.w	801141e <_dtoa_r+0x4de>
 8011314:	2b00      	cmp	r3, #0
 8011316:	d1d2      	bne.n	80112be <_dtoa_r+0x37e>
 8011318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 808c 	beq.w	8011438 <_dtoa_r+0x4f8>
 8011320:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011324:	4b99      	ldr	r3, [pc, #612]	; (801158c <_dtoa_r+0x64c>)
 8011326:	2200      	movs	r2, #0
 8011328:	4630      	mov	r0, r6
 801132a:	4639      	mov	r1, r7
 801132c:	f7ef fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8011330:	2800      	cmp	r0, #0
 8011332:	f000 8081 	beq.w	8011438 <_dtoa_r+0x4f8>
 8011336:	9b01      	ldr	r3, [sp, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d07d      	beq.n	8011438 <_dtoa_r+0x4f8>
 801133c:	f1b9 0f00 	cmp.w	r9, #0
 8011340:	dd3c      	ble.n	80113bc <_dtoa_r+0x47c>
 8011342:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011346:	9307      	str	r3, [sp, #28]
 8011348:	2200      	movs	r2, #0
 801134a:	4b91      	ldr	r3, [pc, #580]	; (8011590 <_dtoa_r+0x650>)
 801134c:	4630      	mov	r0, r6
 801134e:	4639      	mov	r1, r7
 8011350:	f7ef f972 	bl	8000638 <__aeabi_dmul>
 8011354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011358:	3501      	adds	r5, #1
 801135a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801135e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011362:	4628      	mov	r0, r5
 8011364:	f7ef f8fe 	bl	8000564 <__aeabi_i2d>
 8011368:	4632      	mov	r2, r6
 801136a:	463b      	mov	r3, r7
 801136c:	f7ef f964 	bl	8000638 <__aeabi_dmul>
 8011370:	4b88      	ldr	r3, [pc, #544]	; (8011594 <_dtoa_r+0x654>)
 8011372:	2200      	movs	r2, #0
 8011374:	f7ee ffaa 	bl	80002cc <__adddf3>
 8011378:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801137c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011380:	9303      	str	r3, [sp, #12]
 8011382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011384:	2b00      	cmp	r3, #0
 8011386:	d15c      	bne.n	8011442 <_dtoa_r+0x502>
 8011388:	4b83      	ldr	r3, [pc, #524]	; (8011598 <_dtoa_r+0x658>)
 801138a:	2200      	movs	r2, #0
 801138c:	4630      	mov	r0, r6
 801138e:	4639      	mov	r1, r7
 8011390:	f7ee ff9a 	bl	80002c8 <__aeabi_dsub>
 8011394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011398:	4606      	mov	r6, r0
 801139a:	460f      	mov	r7, r1
 801139c:	f7ef fbdc 	bl	8000b58 <__aeabi_dcmpgt>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	f040 8296 	bne.w	80118d2 <_dtoa_r+0x992>
 80113a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80113aa:	4630      	mov	r0, r6
 80113ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113b0:	4639      	mov	r1, r7
 80113b2:	f7ef fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f040 8288 	bne.w	80118cc <_dtoa_r+0x98c>
 80113bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80113c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f2c0 8158 	blt.w	801167c <_dtoa_r+0x73c>
 80113cc:	f1ba 0f0e 	cmp.w	sl, #14
 80113d0:	f300 8154 	bgt.w	801167c <_dtoa_r+0x73c>
 80113d4:	4b6b      	ldr	r3, [pc, #428]	; (8011584 <_dtoa_r+0x644>)
 80113d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80113da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	f280 80e3 	bge.w	80115ac <_dtoa_r+0x66c>
 80113e6:	9b01      	ldr	r3, [sp, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f300 80df 	bgt.w	80115ac <_dtoa_r+0x66c>
 80113ee:	f040 826d 	bne.w	80118cc <_dtoa_r+0x98c>
 80113f2:	4b69      	ldr	r3, [pc, #420]	; (8011598 <_dtoa_r+0x658>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	4640      	mov	r0, r8
 80113f8:	4649      	mov	r1, r9
 80113fa:	f7ef f91d 	bl	8000638 <__aeabi_dmul>
 80113fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011402:	f7ef fb9f 	bl	8000b44 <__aeabi_dcmpge>
 8011406:	9e01      	ldr	r6, [sp, #4]
 8011408:	4637      	mov	r7, r6
 801140a:	2800      	cmp	r0, #0
 801140c:	f040 8243 	bne.w	8011896 <_dtoa_r+0x956>
 8011410:	9d00      	ldr	r5, [sp, #0]
 8011412:	2331      	movs	r3, #49	; 0x31
 8011414:	f805 3b01 	strb.w	r3, [r5], #1
 8011418:	f10a 0a01 	add.w	sl, sl, #1
 801141c:	e23f      	b.n	801189e <_dtoa_r+0x95e>
 801141e:	07f2      	lsls	r2, r6, #31
 8011420:	d505      	bpl.n	801142e <_dtoa_r+0x4ee>
 8011422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011426:	f7ef f907 	bl	8000638 <__aeabi_dmul>
 801142a:	3501      	adds	r5, #1
 801142c:	2301      	movs	r3, #1
 801142e:	1076      	asrs	r6, r6, #1
 8011430:	3708      	adds	r7, #8
 8011432:	e76c      	b.n	801130e <_dtoa_r+0x3ce>
 8011434:	2502      	movs	r5, #2
 8011436:	e76f      	b.n	8011318 <_dtoa_r+0x3d8>
 8011438:	9b01      	ldr	r3, [sp, #4]
 801143a:	f8cd a01c 	str.w	sl, [sp, #28]
 801143e:	930c      	str	r3, [sp, #48]	; 0x30
 8011440:	e78d      	b.n	801135e <_dtoa_r+0x41e>
 8011442:	9900      	ldr	r1, [sp, #0]
 8011444:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011448:	4b4e      	ldr	r3, [pc, #312]	; (8011584 <_dtoa_r+0x644>)
 801144a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801144e:	4401      	add	r1, r0
 8011450:	9102      	str	r1, [sp, #8]
 8011452:	9908      	ldr	r1, [sp, #32]
 8011454:	eeb0 8a47 	vmov.f32	s16, s14
 8011458:	eef0 8a67 	vmov.f32	s17, s15
 801145c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011464:	2900      	cmp	r1, #0
 8011466:	d045      	beq.n	80114f4 <_dtoa_r+0x5b4>
 8011468:	494c      	ldr	r1, [pc, #304]	; (801159c <_dtoa_r+0x65c>)
 801146a:	2000      	movs	r0, #0
 801146c:	f7ef fa0e 	bl	800088c <__aeabi_ddiv>
 8011470:	ec53 2b18 	vmov	r2, r3, d8
 8011474:	f7ee ff28 	bl	80002c8 <__aeabi_dsub>
 8011478:	9d00      	ldr	r5, [sp, #0]
 801147a:	ec41 0b18 	vmov	d8, r0, r1
 801147e:	4639      	mov	r1, r7
 8011480:	4630      	mov	r0, r6
 8011482:	f7ef fb89 	bl	8000b98 <__aeabi_d2iz>
 8011486:	900c      	str	r0, [sp, #48]	; 0x30
 8011488:	f7ef f86c 	bl	8000564 <__aeabi_i2d>
 801148c:	4602      	mov	r2, r0
 801148e:	460b      	mov	r3, r1
 8011490:	4630      	mov	r0, r6
 8011492:	4639      	mov	r1, r7
 8011494:	f7ee ff18 	bl	80002c8 <__aeabi_dsub>
 8011498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801149a:	3330      	adds	r3, #48	; 0x30
 801149c:	f805 3b01 	strb.w	r3, [r5], #1
 80114a0:	ec53 2b18 	vmov	r2, r3, d8
 80114a4:	4606      	mov	r6, r0
 80114a6:	460f      	mov	r7, r1
 80114a8:	f7ef fb38 	bl	8000b1c <__aeabi_dcmplt>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d165      	bne.n	801157c <_dtoa_r+0x63c>
 80114b0:	4632      	mov	r2, r6
 80114b2:	463b      	mov	r3, r7
 80114b4:	4935      	ldr	r1, [pc, #212]	; (801158c <_dtoa_r+0x64c>)
 80114b6:	2000      	movs	r0, #0
 80114b8:	f7ee ff06 	bl	80002c8 <__aeabi_dsub>
 80114bc:	ec53 2b18 	vmov	r2, r3, d8
 80114c0:	f7ef fb2c 	bl	8000b1c <__aeabi_dcmplt>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	f040 80b9 	bne.w	801163c <_dtoa_r+0x6fc>
 80114ca:	9b02      	ldr	r3, [sp, #8]
 80114cc:	429d      	cmp	r5, r3
 80114ce:	f43f af75 	beq.w	80113bc <_dtoa_r+0x47c>
 80114d2:	4b2f      	ldr	r3, [pc, #188]	; (8011590 <_dtoa_r+0x650>)
 80114d4:	ec51 0b18 	vmov	r0, r1, d8
 80114d8:	2200      	movs	r2, #0
 80114da:	f7ef f8ad 	bl	8000638 <__aeabi_dmul>
 80114de:	4b2c      	ldr	r3, [pc, #176]	; (8011590 <_dtoa_r+0x650>)
 80114e0:	ec41 0b18 	vmov	d8, r0, r1
 80114e4:	2200      	movs	r2, #0
 80114e6:	4630      	mov	r0, r6
 80114e8:	4639      	mov	r1, r7
 80114ea:	f7ef f8a5 	bl	8000638 <__aeabi_dmul>
 80114ee:	4606      	mov	r6, r0
 80114f0:	460f      	mov	r7, r1
 80114f2:	e7c4      	b.n	801147e <_dtoa_r+0x53e>
 80114f4:	ec51 0b17 	vmov	r0, r1, d7
 80114f8:	f7ef f89e 	bl	8000638 <__aeabi_dmul>
 80114fc:	9b02      	ldr	r3, [sp, #8]
 80114fe:	9d00      	ldr	r5, [sp, #0]
 8011500:	930c      	str	r3, [sp, #48]	; 0x30
 8011502:	ec41 0b18 	vmov	d8, r0, r1
 8011506:	4639      	mov	r1, r7
 8011508:	4630      	mov	r0, r6
 801150a:	f7ef fb45 	bl	8000b98 <__aeabi_d2iz>
 801150e:	9011      	str	r0, [sp, #68]	; 0x44
 8011510:	f7ef f828 	bl	8000564 <__aeabi_i2d>
 8011514:	4602      	mov	r2, r0
 8011516:	460b      	mov	r3, r1
 8011518:	4630      	mov	r0, r6
 801151a:	4639      	mov	r1, r7
 801151c:	f7ee fed4 	bl	80002c8 <__aeabi_dsub>
 8011520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011522:	3330      	adds	r3, #48	; 0x30
 8011524:	f805 3b01 	strb.w	r3, [r5], #1
 8011528:	9b02      	ldr	r3, [sp, #8]
 801152a:	429d      	cmp	r5, r3
 801152c:	4606      	mov	r6, r0
 801152e:	460f      	mov	r7, r1
 8011530:	f04f 0200 	mov.w	r2, #0
 8011534:	d134      	bne.n	80115a0 <_dtoa_r+0x660>
 8011536:	4b19      	ldr	r3, [pc, #100]	; (801159c <_dtoa_r+0x65c>)
 8011538:	ec51 0b18 	vmov	r0, r1, d8
 801153c:	f7ee fec6 	bl	80002cc <__adddf3>
 8011540:	4602      	mov	r2, r0
 8011542:	460b      	mov	r3, r1
 8011544:	4630      	mov	r0, r6
 8011546:	4639      	mov	r1, r7
 8011548:	f7ef fb06 	bl	8000b58 <__aeabi_dcmpgt>
 801154c:	2800      	cmp	r0, #0
 801154e:	d175      	bne.n	801163c <_dtoa_r+0x6fc>
 8011550:	ec53 2b18 	vmov	r2, r3, d8
 8011554:	4911      	ldr	r1, [pc, #68]	; (801159c <_dtoa_r+0x65c>)
 8011556:	2000      	movs	r0, #0
 8011558:	f7ee feb6 	bl	80002c8 <__aeabi_dsub>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	4630      	mov	r0, r6
 8011562:	4639      	mov	r1, r7
 8011564:	f7ef fada 	bl	8000b1c <__aeabi_dcmplt>
 8011568:	2800      	cmp	r0, #0
 801156a:	f43f af27 	beq.w	80113bc <_dtoa_r+0x47c>
 801156e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011570:	1e6b      	subs	r3, r5, #1
 8011572:	930c      	str	r3, [sp, #48]	; 0x30
 8011574:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011578:	2b30      	cmp	r3, #48	; 0x30
 801157a:	d0f8      	beq.n	801156e <_dtoa_r+0x62e>
 801157c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011580:	e04a      	b.n	8011618 <_dtoa_r+0x6d8>
 8011582:	bf00      	nop
 8011584:	08017ac0 	.word	0x08017ac0
 8011588:	08017a98 	.word	0x08017a98
 801158c:	3ff00000 	.word	0x3ff00000
 8011590:	40240000 	.word	0x40240000
 8011594:	401c0000 	.word	0x401c0000
 8011598:	40140000 	.word	0x40140000
 801159c:	3fe00000 	.word	0x3fe00000
 80115a0:	4baf      	ldr	r3, [pc, #700]	; (8011860 <_dtoa_r+0x920>)
 80115a2:	f7ef f849 	bl	8000638 <__aeabi_dmul>
 80115a6:	4606      	mov	r6, r0
 80115a8:	460f      	mov	r7, r1
 80115aa:	e7ac      	b.n	8011506 <_dtoa_r+0x5c6>
 80115ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80115b0:	9d00      	ldr	r5, [sp, #0]
 80115b2:	4642      	mov	r2, r8
 80115b4:	464b      	mov	r3, r9
 80115b6:	4630      	mov	r0, r6
 80115b8:	4639      	mov	r1, r7
 80115ba:	f7ef f967 	bl	800088c <__aeabi_ddiv>
 80115be:	f7ef faeb 	bl	8000b98 <__aeabi_d2iz>
 80115c2:	9002      	str	r0, [sp, #8]
 80115c4:	f7ee ffce 	bl	8000564 <__aeabi_i2d>
 80115c8:	4642      	mov	r2, r8
 80115ca:	464b      	mov	r3, r9
 80115cc:	f7ef f834 	bl	8000638 <__aeabi_dmul>
 80115d0:	4602      	mov	r2, r0
 80115d2:	460b      	mov	r3, r1
 80115d4:	4630      	mov	r0, r6
 80115d6:	4639      	mov	r1, r7
 80115d8:	f7ee fe76 	bl	80002c8 <__aeabi_dsub>
 80115dc:	9e02      	ldr	r6, [sp, #8]
 80115de:	9f01      	ldr	r7, [sp, #4]
 80115e0:	3630      	adds	r6, #48	; 0x30
 80115e2:	f805 6b01 	strb.w	r6, [r5], #1
 80115e6:	9e00      	ldr	r6, [sp, #0]
 80115e8:	1bae      	subs	r6, r5, r6
 80115ea:	42b7      	cmp	r7, r6
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	d137      	bne.n	8011662 <_dtoa_r+0x722>
 80115f2:	f7ee fe6b 	bl	80002cc <__adddf3>
 80115f6:	4642      	mov	r2, r8
 80115f8:	464b      	mov	r3, r9
 80115fa:	4606      	mov	r6, r0
 80115fc:	460f      	mov	r7, r1
 80115fe:	f7ef faab 	bl	8000b58 <__aeabi_dcmpgt>
 8011602:	b9c8      	cbnz	r0, 8011638 <_dtoa_r+0x6f8>
 8011604:	4642      	mov	r2, r8
 8011606:	464b      	mov	r3, r9
 8011608:	4630      	mov	r0, r6
 801160a:	4639      	mov	r1, r7
 801160c:	f7ef fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 8011610:	b110      	cbz	r0, 8011618 <_dtoa_r+0x6d8>
 8011612:	9b02      	ldr	r3, [sp, #8]
 8011614:	07d9      	lsls	r1, r3, #31
 8011616:	d40f      	bmi.n	8011638 <_dtoa_r+0x6f8>
 8011618:	4620      	mov	r0, r4
 801161a:	4659      	mov	r1, fp
 801161c:	f000 fcfe 	bl	801201c <_Bfree>
 8011620:	2300      	movs	r3, #0
 8011622:	702b      	strb	r3, [r5, #0]
 8011624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011626:	f10a 0001 	add.w	r0, sl, #1
 801162a:	6018      	str	r0, [r3, #0]
 801162c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801162e:	2b00      	cmp	r3, #0
 8011630:	f43f acd8 	beq.w	8010fe4 <_dtoa_r+0xa4>
 8011634:	601d      	str	r5, [r3, #0]
 8011636:	e4d5      	b.n	8010fe4 <_dtoa_r+0xa4>
 8011638:	f8cd a01c 	str.w	sl, [sp, #28]
 801163c:	462b      	mov	r3, r5
 801163e:	461d      	mov	r5, r3
 8011640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011644:	2a39      	cmp	r2, #57	; 0x39
 8011646:	d108      	bne.n	801165a <_dtoa_r+0x71a>
 8011648:	9a00      	ldr	r2, [sp, #0]
 801164a:	429a      	cmp	r2, r3
 801164c:	d1f7      	bne.n	801163e <_dtoa_r+0x6fe>
 801164e:	9a07      	ldr	r2, [sp, #28]
 8011650:	9900      	ldr	r1, [sp, #0]
 8011652:	3201      	adds	r2, #1
 8011654:	9207      	str	r2, [sp, #28]
 8011656:	2230      	movs	r2, #48	; 0x30
 8011658:	700a      	strb	r2, [r1, #0]
 801165a:	781a      	ldrb	r2, [r3, #0]
 801165c:	3201      	adds	r2, #1
 801165e:	701a      	strb	r2, [r3, #0]
 8011660:	e78c      	b.n	801157c <_dtoa_r+0x63c>
 8011662:	4b7f      	ldr	r3, [pc, #508]	; (8011860 <_dtoa_r+0x920>)
 8011664:	2200      	movs	r2, #0
 8011666:	f7ee ffe7 	bl	8000638 <__aeabi_dmul>
 801166a:	2200      	movs	r2, #0
 801166c:	2300      	movs	r3, #0
 801166e:	4606      	mov	r6, r0
 8011670:	460f      	mov	r7, r1
 8011672:	f7ef fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8011676:	2800      	cmp	r0, #0
 8011678:	d09b      	beq.n	80115b2 <_dtoa_r+0x672>
 801167a:	e7cd      	b.n	8011618 <_dtoa_r+0x6d8>
 801167c:	9a08      	ldr	r2, [sp, #32]
 801167e:	2a00      	cmp	r2, #0
 8011680:	f000 80c4 	beq.w	801180c <_dtoa_r+0x8cc>
 8011684:	9a05      	ldr	r2, [sp, #20]
 8011686:	2a01      	cmp	r2, #1
 8011688:	f300 80a8 	bgt.w	80117dc <_dtoa_r+0x89c>
 801168c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801168e:	2a00      	cmp	r2, #0
 8011690:	f000 80a0 	beq.w	80117d4 <_dtoa_r+0x894>
 8011694:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011698:	9e06      	ldr	r6, [sp, #24]
 801169a:	4645      	mov	r5, r8
 801169c:	9a04      	ldr	r2, [sp, #16]
 801169e:	2101      	movs	r1, #1
 80116a0:	441a      	add	r2, r3
 80116a2:	4620      	mov	r0, r4
 80116a4:	4498      	add	r8, r3
 80116a6:	9204      	str	r2, [sp, #16]
 80116a8:	f000 fd74 	bl	8012194 <__i2b>
 80116ac:	4607      	mov	r7, r0
 80116ae:	2d00      	cmp	r5, #0
 80116b0:	dd0b      	ble.n	80116ca <_dtoa_r+0x78a>
 80116b2:	9b04      	ldr	r3, [sp, #16]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	dd08      	ble.n	80116ca <_dtoa_r+0x78a>
 80116b8:	42ab      	cmp	r3, r5
 80116ba:	9a04      	ldr	r2, [sp, #16]
 80116bc:	bfa8      	it	ge
 80116be:	462b      	movge	r3, r5
 80116c0:	eba8 0803 	sub.w	r8, r8, r3
 80116c4:	1aed      	subs	r5, r5, r3
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	9304      	str	r3, [sp, #16]
 80116ca:	9b06      	ldr	r3, [sp, #24]
 80116cc:	b1fb      	cbz	r3, 801170e <_dtoa_r+0x7ce>
 80116ce:	9b08      	ldr	r3, [sp, #32]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f000 809f 	beq.w	8011814 <_dtoa_r+0x8d4>
 80116d6:	2e00      	cmp	r6, #0
 80116d8:	dd11      	ble.n	80116fe <_dtoa_r+0x7be>
 80116da:	4639      	mov	r1, r7
 80116dc:	4632      	mov	r2, r6
 80116de:	4620      	mov	r0, r4
 80116e0:	f000 fe14 	bl	801230c <__pow5mult>
 80116e4:	465a      	mov	r2, fp
 80116e6:	4601      	mov	r1, r0
 80116e8:	4607      	mov	r7, r0
 80116ea:	4620      	mov	r0, r4
 80116ec:	f000 fd68 	bl	80121c0 <__multiply>
 80116f0:	4659      	mov	r1, fp
 80116f2:	9007      	str	r0, [sp, #28]
 80116f4:	4620      	mov	r0, r4
 80116f6:	f000 fc91 	bl	801201c <_Bfree>
 80116fa:	9b07      	ldr	r3, [sp, #28]
 80116fc:	469b      	mov	fp, r3
 80116fe:	9b06      	ldr	r3, [sp, #24]
 8011700:	1b9a      	subs	r2, r3, r6
 8011702:	d004      	beq.n	801170e <_dtoa_r+0x7ce>
 8011704:	4659      	mov	r1, fp
 8011706:	4620      	mov	r0, r4
 8011708:	f000 fe00 	bl	801230c <__pow5mult>
 801170c:	4683      	mov	fp, r0
 801170e:	2101      	movs	r1, #1
 8011710:	4620      	mov	r0, r4
 8011712:	f000 fd3f 	bl	8012194 <__i2b>
 8011716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011718:	2b00      	cmp	r3, #0
 801171a:	4606      	mov	r6, r0
 801171c:	dd7c      	ble.n	8011818 <_dtoa_r+0x8d8>
 801171e:	461a      	mov	r2, r3
 8011720:	4601      	mov	r1, r0
 8011722:	4620      	mov	r0, r4
 8011724:	f000 fdf2 	bl	801230c <__pow5mult>
 8011728:	9b05      	ldr	r3, [sp, #20]
 801172a:	2b01      	cmp	r3, #1
 801172c:	4606      	mov	r6, r0
 801172e:	dd76      	ble.n	801181e <_dtoa_r+0x8de>
 8011730:	2300      	movs	r3, #0
 8011732:	9306      	str	r3, [sp, #24]
 8011734:	6933      	ldr	r3, [r6, #16]
 8011736:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801173a:	6918      	ldr	r0, [r3, #16]
 801173c:	f000 fcda 	bl	80120f4 <__hi0bits>
 8011740:	f1c0 0020 	rsb	r0, r0, #32
 8011744:	9b04      	ldr	r3, [sp, #16]
 8011746:	4418      	add	r0, r3
 8011748:	f010 001f 	ands.w	r0, r0, #31
 801174c:	f000 8086 	beq.w	801185c <_dtoa_r+0x91c>
 8011750:	f1c0 0320 	rsb	r3, r0, #32
 8011754:	2b04      	cmp	r3, #4
 8011756:	dd7f      	ble.n	8011858 <_dtoa_r+0x918>
 8011758:	f1c0 001c 	rsb	r0, r0, #28
 801175c:	9b04      	ldr	r3, [sp, #16]
 801175e:	4403      	add	r3, r0
 8011760:	4480      	add	r8, r0
 8011762:	4405      	add	r5, r0
 8011764:	9304      	str	r3, [sp, #16]
 8011766:	f1b8 0f00 	cmp.w	r8, #0
 801176a:	dd05      	ble.n	8011778 <_dtoa_r+0x838>
 801176c:	4659      	mov	r1, fp
 801176e:	4642      	mov	r2, r8
 8011770:	4620      	mov	r0, r4
 8011772:	f000 fe25 	bl	80123c0 <__lshift>
 8011776:	4683      	mov	fp, r0
 8011778:	9b04      	ldr	r3, [sp, #16]
 801177a:	2b00      	cmp	r3, #0
 801177c:	dd05      	ble.n	801178a <_dtoa_r+0x84a>
 801177e:	4631      	mov	r1, r6
 8011780:	461a      	mov	r2, r3
 8011782:	4620      	mov	r0, r4
 8011784:	f000 fe1c 	bl	80123c0 <__lshift>
 8011788:	4606      	mov	r6, r0
 801178a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801178c:	2b00      	cmp	r3, #0
 801178e:	d069      	beq.n	8011864 <_dtoa_r+0x924>
 8011790:	4631      	mov	r1, r6
 8011792:	4658      	mov	r0, fp
 8011794:	f000 fe80 	bl	8012498 <__mcmp>
 8011798:	2800      	cmp	r0, #0
 801179a:	da63      	bge.n	8011864 <_dtoa_r+0x924>
 801179c:	2300      	movs	r3, #0
 801179e:	4659      	mov	r1, fp
 80117a0:	220a      	movs	r2, #10
 80117a2:	4620      	mov	r0, r4
 80117a4:	f000 fc5c 	bl	8012060 <__multadd>
 80117a8:	9b08      	ldr	r3, [sp, #32]
 80117aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80117ae:	4683      	mov	fp, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f000 818f 	beq.w	8011ad4 <_dtoa_r+0xb94>
 80117b6:	4639      	mov	r1, r7
 80117b8:	2300      	movs	r3, #0
 80117ba:	220a      	movs	r2, #10
 80117bc:	4620      	mov	r0, r4
 80117be:	f000 fc4f 	bl	8012060 <__multadd>
 80117c2:	f1b9 0f00 	cmp.w	r9, #0
 80117c6:	4607      	mov	r7, r0
 80117c8:	f300 808e 	bgt.w	80118e8 <_dtoa_r+0x9a8>
 80117cc:	9b05      	ldr	r3, [sp, #20]
 80117ce:	2b02      	cmp	r3, #2
 80117d0:	dc50      	bgt.n	8011874 <_dtoa_r+0x934>
 80117d2:	e089      	b.n	80118e8 <_dtoa_r+0x9a8>
 80117d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80117d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80117da:	e75d      	b.n	8011698 <_dtoa_r+0x758>
 80117dc:	9b01      	ldr	r3, [sp, #4]
 80117de:	1e5e      	subs	r6, r3, #1
 80117e0:	9b06      	ldr	r3, [sp, #24]
 80117e2:	42b3      	cmp	r3, r6
 80117e4:	bfbf      	itttt	lt
 80117e6:	9b06      	ldrlt	r3, [sp, #24]
 80117e8:	9606      	strlt	r6, [sp, #24]
 80117ea:	1af2      	sublt	r2, r6, r3
 80117ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80117ee:	bfb6      	itet	lt
 80117f0:	189b      	addlt	r3, r3, r2
 80117f2:	1b9e      	subge	r6, r3, r6
 80117f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80117f6:	9b01      	ldr	r3, [sp, #4]
 80117f8:	bfb8      	it	lt
 80117fa:	2600      	movlt	r6, #0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	bfb5      	itete	lt
 8011800:	eba8 0503 	sublt.w	r5, r8, r3
 8011804:	9b01      	ldrge	r3, [sp, #4]
 8011806:	2300      	movlt	r3, #0
 8011808:	4645      	movge	r5, r8
 801180a:	e747      	b.n	801169c <_dtoa_r+0x75c>
 801180c:	9e06      	ldr	r6, [sp, #24]
 801180e:	9f08      	ldr	r7, [sp, #32]
 8011810:	4645      	mov	r5, r8
 8011812:	e74c      	b.n	80116ae <_dtoa_r+0x76e>
 8011814:	9a06      	ldr	r2, [sp, #24]
 8011816:	e775      	b.n	8011704 <_dtoa_r+0x7c4>
 8011818:	9b05      	ldr	r3, [sp, #20]
 801181a:	2b01      	cmp	r3, #1
 801181c:	dc18      	bgt.n	8011850 <_dtoa_r+0x910>
 801181e:	9b02      	ldr	r3, [sp, #8]
 8011820:	b9b3      	cbnz	r3, 8011850 <_dtoa_r+0x910>
 8011822:	9b03      	ldr	r3, [sp, #12]
 8011824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011828:	b9a3      	cbnz	r3, 8011854 <_dtoa_r+0x914>
 801182a:	9b03      	ldr	r3, [sp, #12]
 801182c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011830:	0d1b      	lsrs	r3, r3, #20
 8011832:	051b      	lsls	r3, r3, #20
 8011834:	b12b      	cbz	r3, 8011842 <_dtoa_r+0x902>
 8011836:	9b04      	ldr	r3, [sp, #16]
 8011838:	3301      	adds	r3, #1
 801183a:	9304      	str	r3, [sp, #16]
 801183c:	f108 0801 	add.w	r8, r8, #1
 8011840:	2301      	movs	r3, #1
 8011842:	9306      	str	r3, [sp, #24]
 8011844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011846:	2b00      	cmp	r3, #0
 8011848:	f47f af74 	bne.w	8011734 <_dtoa_r+0x7f4>
 801184c:	2001      	movs	r0, #1
 801184e:	e779      	b.n	8011744 <_dtoa_r+0x804>
 8011850:	2300      	movs	r3, #0
 8011852:	e7f6      	b.n	8011842 <_dtoa_r+0x902>
 8011854:	9b02      	ldr	r3, [sp, #8]
 8011856:	e7f4      	b.n	8011842 <_dtoa_r+0x902>
 8011858:	d085      	beq.n	8011766 <_dtoa_r+0x826>
 801185a:	4618      	mov	r0, r3
 801185c:	301c      	adds	r0, #28
 801185e:	e77d      	b.n	801175c <_dtoa_r+0x81c>
 8011860:	40240000 	.word	0x40240000
 8011864:	9b01      	ldr	r3, [sp, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	dc38      	bgt.n	80118dc <_dtoa_r+0x99c>
 801186a:	9b05      	ldr	r3, [sp, #20]
 801186c:	2b02      	cmp	r3, #2
 801186e:	dd35      	ble.n	80118dc <_dtoa_r+0x99c>
 8011870:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011874:	f1b9 0f00 	cmp.w	r9, #0
 8011878:	d10d      	bne.n	8011896 <_dtoa_r+0x956>
 801187a:	4631      	mov	r1, r6
 801187c:	464b      	mov	r3, r9
 801187e:	2205      	movs	r2, #5
 8011880:	4620      	mov	r0, r4
 8011882:	f000 fbed 	bl	8012060 <__multadd>
 8011886:	4601      	mov	r1, r0
 8011888:	4606      	mov	r6, r0
 801188a:	4658      	mov	r0, fp
 801188c:	f000 fe04 	bl	8012498 <__mcmp>
 8011890:	2800      	cmp	r0, #0
 8011892:	f73f adbd 	bgt.w	8011410 <_dtoa_r+0x4d0>
 8011896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011898:	9d00      	ldr	r5, [sp, #0]
 801189a:	ea6f 0a03 	mvn.w	sl, r3
 801189e:	f04f 0800 	mov.w	r8, #0
 80118a2:	4631      	mov	r1, r6
 80118a4:	4620      	mov	r0, r4
 80118a6:	f000 fbb9 	bl	801201c <_Bfree>
 80118aa:	2f00      	cmp	r7, #0
 80118ac:	f43f aeb4 	beq.w	8011618 <_dtoa_r+0x6d8>
 80118b0:	f1b8 0f00 	cmp.w	r8, #0
 80118b4:	d005      	beq.n	80118c2 <_dtoa_r+0x982>
 80118b6:	45b8      	cmp	r8, r7
 80118b8:	d003      	beq.n	80118c2 <_dtoa_r+0x982>
 80118ba:	4641      	mov	r1, r8
 80118bc:	4620      	mov	r0, r4
 80118be:	f000 fbad 	bl	801201c <_Bfree>
 80118c2:	4639      	mov	r1, r7
 80118c4:	4620      	mov	r0, r4
 80118c6:	f000 fba9 	bl	801201c <_Bfree>
 80118ca:	e6a5      	b.n	8011618 <_dtoa_r+0x6d8>
 80118cc:	2600      	movs	r6, #0
 80118ce:	4637      	mov	r7, r6
 80118d0:	e7e1      	b.n	8011896 <_dtoa_r+0x956>
 80118d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80118d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80118d8:	4637      	mov	r7, r6
 80118da:	e599      	b.n	8011410 <_dtoa_r+0x4d0>
 80118dc:	9b08      	ldr	r3, [sp, #32]
 80118de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 80fd 	beq.w	8011ae2 <_dtoa_r+0xba2>
 80118e8:	2d00      	cmp	r5, #0
 80118ea:	dd05      	ble.n	80118f8 <_dtoa_r+0x9b8>
 80118ec:	4639      	mov	r1, r7
 80118ee:	462a      	mov	r2, r5
 80118f0:	4620      	mov	r0, r4
 80118f2:	f000 fd65 	bl	80123c0 <__lshift>
 80118f6:	4607      	mov	r7, r0
 80118f8:	9b06      	ldr	r3, [sp, #24]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d05c      	beq.n	80119b8 <_dtoa_r+0xa78>
 80118fe:	6879      	ldr	r1, [r7, #4]
 8011900:	4620      	mov	r0, r4
 8011902:	f000 fb4b 	bl	8011f9c <_Balloc>
 8011906:	4605      	mov	r5, r0
 8011908:	b928      	cbnz	r0, 8011916 <_dtoa_r+0x9d6>
 801190a:	4b80      	ldr	r3, [pc, #512]	; (8011b0c <_dtoa_r+0xbcc>)
 801190c:	4602      	mov	r2, r0
 801190e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011912:	f7ff bb2e 	b.w	8010f72 <_dtoa_r+0x32>
 8011916:	693a      	ldr	r2, [r7, #16]
 8011918:	3202      	adds	r2, #2
 801191a:	0092      	lsls	r2, r2, #2
 801191c:	f107 010c 	add.w	r1, r7, #12
 8011920:	300c      	adds	r0, #12
 8011922:	f7fe fbc5 	bl	80100b0 <memcpy>
 8011926:	2201      	movs	r2, #1
 8011928:	4629      	mov	r1, r5
 801192a:	4620      	mov	r0, r4
 801192c:	f000 fd48 	bl	80123c0 <__lshift>
 8011930:	9b00      	ldr	r3, [sp, #0]
 8011932:	3301      	adds	r3, #1
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	9b00      	ldr	r3, [sp, #0]
 8011938:	444b      	add	r3, r9
 801193a:	9307      	str	r3, [sp, #28]
 801193c:	9b02      	ldr	r3, [sp, #8]
 801193e:	f003 0301 	and.w	r3, r3, #1
 8011942:	46b8      	mov	r8, r7
 8011944:	9306      	str	r3, [sp, #24]
 8011946:	4607      	mov	r7, r0
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	4631      	mov	r1, r6
 801194c:	3b01      	subs	r3, #1
 801194e:	4658      	mov	r0, fp
 8011950:	9302      	str	r3, [sp, #8]
 8011952:	f7ff fa69 	bl	8010e28 <quorem>
 8011956:	4603      	mov	r3, r0
 8011958:	3330      	adds	r3, #48	; 0x30
 801195a:	9004      	str	r0, [sp, #16]
 801195c:	4641      	mov	r1, r8
 801195e:	4658      	mov	r0, fp
 8011960:	9308      	str	r3, [sp, #32]
 8011962:	f000 fd99 	bl	8012498 <__mcmp>
 8011966:	463a      	mov	r2, r7
 8011968:	4681      	mov	r9, r0
 801196a:	4631      	mov	r1, r6
 801196c:	4620      	mov	r0, r4
 801196e:	f000 fdaf 	bl	80124d0 <__mdiff>
 8011972:	68c2      	ldr	r2, [r0, #12]
 8011974:	9b08      	ldr	r3, [sp, #32]
 8011976:	4605      	mov	r5, r0
 8011978:	bb02      	cbnz	r2, 80119bc <_dtoa_r+0xa7c>
 801197a:	4601      	mov	r1, r0
 801197c:	4658      	mov	r0, fp
 801197e:	f000 fd8b 	bl	8012498 <__mcmp>
 8011982:	9b08      	ldr	r3, [sp, #32]
 8011984:	4602      	mov	r2, r0
 8011986:	4629      	mov	r1, r5
 8011988:	4620      	mov	r0, r4
 801198a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801198e:	f000 fb45 	bl	801201c <_Bfree>
 8011992:	9b05      	ldr	r3, [sp, #20]
 8011994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011996:	9d01      	ldr	r5, [sp, #4]
 8011998:	ea43 0102 	orr.w	r1, r3, r2
 801199c:	9b06      	ldr	r3, [sp, #24]
 801199e:	430b      	orrs	r3, r1
 80119a0:	9b08      	ldr	r3, [sp, #32]
 80119a2:	d10d      	bne.n	80119c0 <_dtoa_r+0xa80>
 80119a4:	2b39      	cmp	r3, #57	; 0x39
 80119a6:	d029      	beq.n	80119fc <_dtoa_r+0xabc>
 80119a8:	f1b9 0f00 	cmp.w	r9, #0
 80119ac:	dd01      	ble.n	80119b2 <_dtoa_r+0xa72>
 80119ae:	9b04      	ldr	r3, [sp, #16]
 80119b0:	3331      	adds	r3, #49	; 0x31
 80119b2:	9a02      	ldr	r2, [sp, #8]
 80119b4:	7013      	strb	r3, [r2, #0]
 80119b6:	e774      	b.n	80118a2 <_dtoa_r+0x962>
 80119b8:	4638      	mov	r0, r7
 80119ba:	e7b9      	b.n	8011930 <_dtoa_r+0x9f0>
 80119bc:	2201      	movs	r2, #1
 80119be:	e7e2      	b.n	8011986 <_dtoa_r+0xa46>
 80119c0:	f1b9 0f00 	cmp.w	r9, #0
 80119c4:	db06      	blt.n	80119d4 <_dtoa_r+0xa94>
 80119c6:	9905      	ldr	r1, [sp, #20]
 80119c8:	ea41 0909 	orr.w	r9, r1, r9
 80119cc:	9906      	ldr	r1, [sp, #24]
 80119ce:	ea59 0101 	orrs.w	r1, r9, r1
 80119d2:	d120      	bne.n	8011a16 <_dtoa_r+0xad6>
 80119d4:	2a00      	cmp	r2, #0
 80119d6:	ddec      	ble.n	80119b2 <_dtoa_r+0xa72>
 80119d8:	4659      	mov	r1, fp
 80119da:	2201      	movs	r2, #1
 80119dc:	4620      	mov	r0, r4
 80119de:	9301      	str	r3, [sp, #4]
 80119e0:	f000 fcee 	bl	80123c0 <__lshift>
 80119e4:	4631      	mov	r1, r6
 80119e6:	4683      	mov	fp, r0
 80119e8:	f000 fd56 	bl	8012498 <__mcmp>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	dc02      	bgt.n	80119f8 <_dtoa_r+0xab8>
 80119f2:	d1de      	bne.n	80119b2 <_dtoa_r+0xa72>
 80119f4:	07da      	lsls	r2, r3, #31
 80119f6:	d5dc      	bpl.n	80119b2 <_dtoa_r+0xa72>
 80119f8:	2b39      	cmp	r3, #57	; 0x39
 80119fa:	d1d8      	bne.n	80119ae <_dtoa_r+0xa6e>
 80119fc:	9a02      	ldr	r2, [sp, #8]
 80119fe:	2339      	movs	r3, #57	; 0x39
 8011a00:	7013      	strb	r3, [r2, #0]
 8011a02:	462b      	mov	r3, r5
 8011a04:	461d      	mov	r5, r3
 8011a06:	3b01      	subs	r3, #1
 8011a08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a0c:	2a39      	cmp	r2, #57	; 0x39
 8011a0e:	d050      	beq.n	8011ab2 <_dtoa_r+0xb72>
 8011a10:	3201      	adds	r2, #1
 8011a12:	701a      	strb	r2, [r3, #0]
 8011a14:	e745      	b.n	80118a2 <_dtoa_r+0x962>
 8011a16:	2a00      	cmp	r2, #0
 8011a18:	dd03      	ble.n	8011a22 <_dtoa_r+0xae2>
 8011a1a:	2b39      	cmp	r3, #57	; 0x39
 8011a1c:	d0ee      	beq.n	80119fc <_dtoa_r+0xabc>
 8011a1e:	3301      	adds	r3, #1
 8011a20:	e7c7      	b.n	80119b2 <_dtoa_r+0xa72>
 8011a22:	9a01      	ldr	r2, [sp, #4]
 8011a24:	9907      	ldr	r1, [sp, #28]
 8011a26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011a2a:	428a      	cmp	r2, r1
 8011a2c:	d02a      	beq.n	8011a84 <_dtoa_r+0xb44>
 8011a2e:	4659      	mov	r1, fp
 8011a30:	2300      	movs	r3, #0
 8011a32:	220a      	movs	r2, #10
 8011a34:	4620      	mov	r0, r4
 8011a36:	f000 fb13 	bl	8012060 <__multadd>
 8011a3a:	45b8      	cmp	r8, r7
 8011a3c:	4683      	mov	fp, r0
 8011a3e:	f04f 0300 	mov.w	r3, #0
 8011a42:	f04f 020a 	mov.w	r2, #10
 8011a46:	4641      	mov	r1, r8
 8011a48:	4620      	mov	r0, r4
 8011a4a:	d107      	bne.n	8011a5c <_dtoa_r+0xb1c>
 8011a4c:	f000 fb08 	bl	8012060 <__multadd>
 8011a50:	4680      	mov	r8, r0
 8011a52:	4607      	mov	r7, r0
 8011a54:	9b01      	ldr	r3, [sp, #4]
 8011a56:	3301      	adds	r3, #1
 8011a58:	9301      	str	r3, [sp, #4]
 8011a5a:	e775      	b.n	8011948 <_dtoa_r+0xa08>
 8011a5c:	f000 fb00 	bl	8012060 <__multadd>
 8011a60:	4639      	mov	r1, r7
 8011a62:	4680      	mov	r8, r0
 8011a64:	2300      	movs	r3, #0
 8011a66:	220a      	movs	r2, #10
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f000 faf9 	bl	8012060 <__multadd>
 8011a6e:	4607      	mov	r7, r0
 8011a70:	e7f0      	b.n	8011a54 <_dtoa_r+0xb14>
 8011a72:	f1b9 0f00 	cmp.w	r9, #0
 8011a76:	9a00      	ldr	r2, [sp, #0]
 8011a78:	bfcc      	ite	gt
 8011a7a:	464d      	movgt	r5, r9
 8011a7c:	2501      	movle	r5, #1
 8011a7e:	4415      	add	r5, r2
 8011a80:	f04f 0800 	mov.w	r8, #0
 8011a84:	4659      	mov	r1, fp
 8011a86:	2201      	movs	r2, #1
 8011a88:	4620      	mov	r0, r4
 8011a8a:	9301      	str	r3, [sp, #4]
 8011a8c:	f000 fc98 	bl	80123c0 <__lshift>
 8011a90:	4631      	mov	r1, r6
 8011a92:	4683      	mov	fp, r0
 8011a94:	f000 fd00 	bl	8012498 <__mcmp>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	dcb2      	bgt.n	8011a02 <_dtoa_r+0xac2>
 8011a9c:	d102      	bne.n	8011aa4 <_dtoa_r+0xb64>
 8011a9e:	9b01      	ldr	r3, [sp, #4]
 8011aa0:	07db      	lsls	r3, r3, #31
 8011aa2:	d4ae      	bmi.n	8011a02 <_dtoa_r+0xac2>
 8011aa4:	462b      	mov	r3, r5
 8011aa6:	461d      	mov	r5, r3
 8011aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011aac:	2a30      	cmp	r2, #48	; 0x30
 8011aae:	d0fa      	beq.n	8011aa6 <_dtoa_r+0xb66>
 8011ab0:	e6f7      	b.n	80118a2 <_dtoa_r+0x962>
 8011ab2:	9a00      	ldr	r2, [sp, #0]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d1a5      	bne.n	8011a04 <_dtoa_r+0xac4>
 8011ab8:	f10a 0a01 	add.w	sl, sl, #1
 8011abc:	2331      	movs	r3, #49	; 0x31
 8011abe:	e779      	b.n	80119b4 <_dtoa_r+0xa74>
 8011ac0:	4b13      	ldr	r3, [pc, #76]	; (8011b10 <_dtoa_r+0xbd0>)
 8011ac2:	f7ff baaf 	b.w	8011024 <_dtoa_r+0xe4>
 8011ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f47f aa86 	bne.w	8010fda <_dtoa_r+0x9a>
 8011ace:	4b11      	ldr	r3, [pc, #68]	; (8011b14 <_dtoa_r+0xbd4>)
 8011ad0:	f7ff baa8 	b.w	8011024 <_dtoa_r+0xe4>
 8011ad4:	f1b9 0f00 	cmp.w	r9, #0
 8011ad8:	dc03      	bgt.n	8011ae2 <_dtoa_r+0xba2>
 8011ada:	9b05      	ldr	r3, [sp, #20]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	f73f aec9 	bgt.w	8011874 <_dtoa_r+0x934>
 8011ae2:	9d00      	ldr	r5, [sp, #0]
 8011ae4:	4631      	mov	r1, r6
 8011ae6:	4658      	mov	r0, fp
 8011ae8:	f7ff f99e 	bl	8010e28 <quorem>
 8011aec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011af0:	f805 3b01 	strb.w	r3, [r5], #1
 8011af4:	9a00      	ldr	r2, [sp, #0]
 8011af6:	1aaa      	subs	r2, r5, r2
 8011af8:	4591      	cmp	r9, r2
 8011afa:	ddba      	ble.n	8011a72 <_dtoa_r+0xb32>
 8011afc:	4659      	mov	r1, fp
 8011afe:	2300      	movs	r3, #0
 8011b00:	220a      	movs	r2, #10
 8011b02:	4620      	mov	r0, r4
 8011b04:	f000 faac 	bl	8012060 <__multadd>
 8011b08:	4683      	mov	fp, r0
 8011b0a:	e7eb      	b.n	8011ae4 <_dtoa_r+0xba4>
 8011b0c:	080179c3 	.word	0x080179c3
 8011b10:	080178e0 	.word	0x080178e0
 8011b14:	08017940 	.word	0x08017940

08011b18 <__sflush_r>:
 8011b18:	898a      	ldrh	r2, [r1, #12]
 8011b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b1e:	4605      	mov	r5, r0
 8011b20:	0710      	lsls	r0, r2, #28
 8011b22:	460c      	mov	r4, r1
 8011b24:	d458      	bmi.n	8011bd8 <__sflush_r+0xc0>
 8011b26:	684b      	ldr	r3, [r1, #4]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	dc05      	bgt.n	8011b38 <__sflush_r+0x20>
 8011b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	dc02      	bgt.n	8011b38 <__sflush_r+0x20>
 8011b32:	2000      	movs	r0, #0
 8011b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b3a:	2e00      	cmp	r6, #0
 8011b3c:	d0f9      	beq.n	8011b32 <__sflush_r+0x1a>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b44:	682f      	ldr	r7, [r5, #0]
 8011b46:	602b      	str	r3, [r5, #0]
 8011b48:	d032      	beq.n	8011bb0 <__sflush_r+0x98>
 8011b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	075a      	lsls	r2, r3, #29
 8011b50:	d505      	bpl.n	8011b5e <__sflush_r+0x46>
 8011b52:	6863      	ldr	r3, [r4, #4]
 8011b54:	1ac0      	subs	r0, r0, r3
 8011b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b58:	b10b      	cbz	r3, 8011b5e <__sflush_r+0x46>
 8011b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b5c:	1ac0      	subs	r0, r0, r3
 8011b5e:	2300      	movs	r3, #0
 8011b60:	4602      	mov	r2, r0
 8011b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b64:	6a21      	ldr	r1, [r4, #32]
 8011b66:	4628      	mov	r0, r5
 8011b68:	47b0      	blx	r6
 8011b6a:	1c43      	adds	r3, r0, #1
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	d106      	bne.n	8011b7e <__sflush_r+0x66>
 8011b70:	6829      	ldr	r1, [r5, #0]
 8011b72:	291d      	cmp	r1, #29
 8011b74:	d82c      	bhi.n	8011bd0 <__sflush_r+0xb8>
 8011b76:	4a2a      	ldr	r2, [pc, #168]	; (8011c20 <__sflush_r+0x108>)
 8011b78:	40ca      	lsrs	r2, r1
 8011b7a:	07d6      	lsls	r6, r2, #31
 8011b7c:	d528      	bpl.n	8011bd0 <__sflush_r+0xb8>
 8011b7e:	2200      	movs	r2, #0
 8011b80:	6062      	str	r2, [r4, #4]
 8011b82:	04d9      	lsls	r1, r3, #19
 8011b84:	6922      	ldr	r2, [r4, #16]
 8011b86:	6022      	str	r2, [r4, #0]
 8011b88:	d504      	bpl.n	8011b94 <__sflush_r+0x7c>
 8011b8a:	1c42      	adds	r2, r0, #1
 8011b8c:	d101      	bne.n	8011b92 <__sflush_r+0x7a>
 8011b8e:	682b      	ldr	r3, [r5, #0]
 8011b90:	b903      	cbnz	r3, 8011b94 <__sflush_r+0x7c>
 8011b92:	6560      	str	r0, [r4, #84]	; 0x54
 8011b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b96:	602f      	str	r7, [r5, #0]
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	d0ca      	beq.n	8011b32 <__sflush_r+0x1a>
 8011b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ba0:	4299      	cmp	r1, r3
 8011ba2:	d002      	beq.n	8011baa <__sflush_r+0x92>
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	f7fe fa99 	bl	80100dc <_free_r>
 8011baa:	2000      	movs	r0, #0
 8011bac:	6360      	str	r0, [r4, #52]	; 0x34
 8011bae:	e7c1      	b.n	8011b34 <__sflush_r+0x1c>
 8011bb0:	6a21      	ldr	r1, [r4, #32]
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	47b0      	blx	r6
 8011bb8:	1c41      	adds	r1, r0, #1
 8011bba:	d1c7      	bne.n	8011b4c <__sflush_r+0x34>
 8011bbc:	682b      	ldr	r3, [r5, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d0c4      	beq.n	8011b4c <__sflush_r+0x34>
 8011bc2:	2b1d      	cmp	r3, #29
 8011bc4:	d001      	beq.n	8011bca <__sflush_r+0xb2>
 8011bc6:	2b16      	cmp	r3, #22
 8011bc8:	d101      	bne.n	8011bce <__sflush_r+0xb6>
 8011bca:	602f      	str	r7, [r5, #0]
 8011bcc:	e7b1      	b.n	8011b32 <__sflush_r+0x1a>
 8011bce:	89a3      	ldrh	r3, [r4, #12]
 8011bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bd4:	81a3      	strh	r3, [r4, #12]
 8011bd6:	e7ad      	b.n	8011b34 <__sflush_r+0x1c>
 8011bd8:	690f      	ldr	r7, [r1, #16]
 8011bda:	2f00      	cmp	r7, #0
 8011bdc:	d0a9      	beq.n	8011b32 <__sflush_r+0x1a>
 8011bde:	0793      	lsls	r3, r2, #30
 8011be0:	680e      	ldr	r6, [r1, #0]
 8011be2:	bf08      	it	eq
 8011be4:	694b      	ldreq	r3, [r1, #20]
 8011be6:	600f      	str	r7, [r1, #0]
 8011be8:	bf18      	it	ne
 8011bea:	2300      	movne	r3, #0
 8011bec:	eba6 0807 	sub.w	r8, r6, r7
 8011bf0:	608b      	str	r3, [r1, #8]
 8011bf2:	f1b8 0f00 	cmp.w	r8, #0
 8011bf6:	dd9c      	ble.n	8011b32 <__sflush_r+0x1a>
 8011bf8:	6a21      	ldr	r1, [r4, #32]
 8011bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bfc:	4643      	mov	r3, r8
 8011bfe:	463a      	mov	r2, r7
 8011c00:	4628      	mov	r0, r5
 8011c02:	47b0      	blx	r6
 8011c04:	2800      	cmp	r0, #0
 8011c06:	dc06      	bgt.n	8011c16 <__sflush_r+0xfe>
 8011c08:	89a3      	ldrh	r3, [r4, #12]
 8011c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c0e:	81a3      	strh	r3, [r4, #12]
 8011c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c14:	e78e      	b.n	8011b34 <__sflush_r+0x1c>
 8011c16:	4407      	add	r7, r0
 8011c18:	eba8 0800 	sub.w	r8, r8, r0
 8011c1c:	e7e9      	b.n	8011bf2 <__sflush_r+0xda>
 8011c1e:	bf00      	nop
 8011c20:	20400001 	.word	0x20400001

08011c24 <_fflush_r>:
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	690b      	ldr	r3, [r1, #16]
 8011c28:	4605      	mov	r5, r0
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	b913      	cbnz	r3, 8011c34 <_fflush_r+0x10>
 8011c2e:	2500      	movs	r5, #0
 8011c30:	4628      	mov	r0, r5
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	b118      	cbz	r0, 8011c3e <_fflush_r+0x1a>
 8011c36:	6983      	ldr	r3, [r0, #24]
 8011c38:	b90b      	cbnz	r3, 8011c3e <_fflush_r+0x1a>
 8011c3a:	f000 f887 	bl	8011d4c <__sinit>
 8011c3e:	4b14      	ldr	r3, [pc, #80]	; (8011c90 <_fflush_r+0x6c>)
 8011c40:	429c      	cmp	r4, r3
 8011c42:	d11b      	bne.n	8011c7c <_fflush_r+0x58>
 8011c44:	686c      	ldr	r4, [r5, #4]
 8011c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d0ef      	beq.n	8011c2e <_fflush_r+0xa>
 8011c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c50:	07d0      	lsls	r0, r2, #31
 8011c52:	d404      	bmi.n	8011c5e <_fflush_r+0x3a>
 8011c54:	0599      	lsls	r1, r3, #22
 8011c56:	d402      	bmi.n	8011c5e <_fflush_r+0x3a>
 8011c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c5a:	f000 f92c 	bl	8011eb6 <__retarget_lock_acquire_recursive>
 8011c5e:	4628      	mov	r0, r5
 8011c60:	4621      	mov	r1, r4
 8011c62:	f7ff ff59 	bl	8011b18 <__sflush_r>
 8011c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c68:	07da      	lsls	r2, r3, #31
 8011c6a:	4605      	mov	r5, r0
 8011c6c:	d4e0      	bmi.n	8011c30 <_fflush_r+0xc>
 8011c6e:	89a3      	ldrh	r3, [r4, #12]
 8011c70:	059b      	lsls	r3, r3, #22
 8011c72:	d4dd      	bmi.n	8011c30 <_fflush_r+0xc>
 8011c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c76:	f000 f91f 	bl	8011eb8 <__retarget_lock_release_recursive>
 8011c7a:	e7d9      	b.n	8011c30 <_fflush_r+0xc>
 8011c7c:	4b05      	ldr	r3, [pc, #20]	; (8011c94 <_fflush_r+0x70>)
 8011c7e:	429c      	cmp	r4, r3
 8011c80:	d101      	bne.n	8011c86 <_fflush_r+0x62>
 8011c82:	68ac      	ldr	r4, [r5, #8]
 8011c84:	e7df      	b.n	8011c46 <_fflush_r+0x22>
 8011c86:	4b04      	ldr	r3, [pc, #16]	; (8011c98 <_fflush_r+0x74>)
 8011c88:	429c      	cmp	r4, r3
 8011c8a:	bf08      	it	eq
 8011c8c:	68ec      	ldreq	r4, [r5, #12]
 8011c8e:	e7da      	b.n	8011c46 <_fflush_r+0x22>
 8011c90:	080179f4 	.word	0x080179f4
 8011c94:	08017a14 	.word	0x08017a14
 8011c98:	080179d4 	.word	0x080179d4

08011c9c <std>:
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	b510      	push	{r4, lr}
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011caa:	6083      	str	r3, [r0, #8]
 8011cac:	8181      	strh	r1, [r0, #12]
 8011cae:	6643      	str	r3, [r0, #100]	; 0x64
 8011cb0:	81c2      	strh	r2, [r0, #14]
 8011cb2:	6183      	str	r3, [r0, #24]
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	2208      	movs	r2, #8
 8011cb8:	305c      	adds	r0, #92	; 0x5c
 8011cba:	f7fe fa07 	bl	80100cc <memset>
 8011cbe:	4b05      	ldr	r3, [pc, #20]	; (8011cd4 <std+0x38>)
 8011cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8011cc2:	4b05      	ldr	r3, [pc, #20]	; (8011cd8 <std+0x3c>)
 8011cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011cc6:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <std+0x40>)
 8011cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cca:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <std+0x44>)
 8011ccc:	6224      	str	r4, [r4, #32]
 8011cce:	6323      	str	r3, [r4, #48]	; 0x30
 8011cd0:	bd10      	pop	{r4, pc}
 8011cd2:	bf00      	nop
 8011cd4:	080129f9 	.word	0x080129f9
 8011cd8:	08012a1b 	.word	0x08012a1b
 8011cdc:	08012a53 	.word	0x08012a53
 8011ce0:	08012a77 	.word	0x08012a77

08011ce4 <_cleanup_r>:
 8011ce4:	4901      	ldr	r1, [pc, #4]	; (8011cec <_cleanup_r+0x8>)
 8011ce6:	f000 b8c1 	b.w	8011e6c <_fwalk_reent>
 8011cea:	bf00      	nop
 8011cec:	08011c25 	.word	0x08011c25

08011cf0 <__sfmoreglue>:
 8011cf0:	b570      	push	{r4, r5, r6, lr}
 8011cf2:	1e4a      	subs	r2, r1, #1
 8011cf4:	2568      	movs	r5, #104	; 0x68
 8011cf6:	4355      	muls	r5, r2
 8011cf8:	460e      	mov	r6, r1
 8011cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011cfe:	f7fe fa3d 	bl	801017c <_malloc_r>
 8011d02:	4604      	mov	r4, r0
 8011d04:	b140      	cbz	r0, 8011d18 <__sfmoreglue+0x28>
 8011d06:	2100      	movs	r1, #0
 8011d08:	e9c0 1600 	strd	r1, r6, [r0]
 8011d0c:	300c      	adds	r0, #12
 8011d0e:	60a0      	str	r0, [r4, #8]
 8011d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d14:	f7fe f9da 	bl	80100cc <memset>
 8011d18:	4620      	mov	r0, r4
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}

08011d1c <__sfp_lock_acquire>:
 8011d1c:	4801      	ldr	r0, [pc, #4]	; (8011d24 <__sfp_lock_acquire+0x8>)
 8011d1e:	f000 b8ca 	b.w	8011eb6 <__retarget_lock_acquire_recursive>
 8011d22:	bf00      	nop
 8011d24:	20040fd4 	.word	0x20040fd4

08011d28 <__sfp_lock_release>:
 8011d28:	4801      	ldr	r0, [pc, #4]	; (8011d30 <__sfp_lock_release+0x8>)
 8011d2a:	f000 b8c5 	b.w	8011eb8 <__retarget_lock_release_recursive>
 8011d2e:	bf00      	nop
 8011d30:	20040fd4 	.word	0x20040fd4

08011d34 <__sinit_lock_acquire>:
 8011d34:	4801      	ldr	r0, [pc, #4]	; (8011d3c <__sinit_lock_acquire+0x8>)
 8011d36:	f000 b8be 	b.w	8011eb6 <__retarget_lock_acquire_recursive>
 8011d3a:	bf00      	nop
 8011d3c:	20040fcf 	.word	0x20040fcf

08011d40 <__sinit_lock_release>:
 8011d40:	4801      	ldr	r0, [pc, #4]	; (8011d48 <__sinit_lock_release+0x8>)
 8011d42:	f000 b8b9 	b.w	8011eb8 <__retarget_lock_release_recursive>
 8011d46:	bf00      	nop
 8011d48:	20040fcf 	.word	0x20040fcf

08011d4c <__sinit>:
 8011d4c:	b510      	push	{r4, lr}
 8011d4e:	4604      	mov	r4, r0
 8011d50:	f7ff fff0 	bl	8011d34 <__sinit_lock_acquire>
 8011d54:	69a3      	ldr	r3, [r4, #24]
 8011d56:	b11b      	cbz	r3, 8011d60 <__sinit+0x14>
 8011d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d5c:	f7ff bff0 	b.w	8011d40 <__sinit_lock_release>
 8011d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d64:	6523      	str	r3, [r4, #80]	; 0x50
 8011d66:	4b13      	ldr	r3, [pc, #76]	; (8011db4 <__sinit+0x68>)
 8011d68:	4a13      	ldr	r2, [pc, #76]	; (8011db8 <__sinit+0x6c>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d6e:	42a3      	cmp	r3, r4
 8011d70:	bf04      	itt	eq
 8011d72:	2301      	moveq	r3, #1
 8011d74:	61a3      	streq	r3, [r4, #24]
 8011d76:	4620      	mov	r0, r4
 8011d78:	f000 f820 	bl	8011dbc <__sfp>
 8011d7c:	6060      	str	r0, [r4, #4]
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f000 f81c 	bl	8011dbc <__sfp>
 8011d84:	60a0      	str	r0, [r4, #8]
 8011d86:	4620      	mov	r0, r4
 8011d88:	f000 f818 	bl	8011dbc <__sfp>
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	60e0      	str	r0, [r4, #12]
 8011d90:	2104      	movs	r1, #4
 8011d92:	6860      	ldr	r0, [r4, #4]
 8011d94:	f7ff ff82 	bl	8011c9c <std>
 8011d98:	68a0      	ldr	r0, [r4, #8]
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	2109      	movs	r1, #9
 8011d9e:	f7ff ff7d 	bl	8011c9c <std>
 8011da2:	68e0      	ldr	r0, [r4, #12]
 8011da4:	2202      	movs	r2, #2
 8011da6:	2112      	movs	r1, #18
 8011da8:	f7ff ff78 	bl	8011c9c <std>
 8011dac:	2301      	movs	r3, #1
 8011dae:	61a3      	str	r3, [r4, #24]
 8011db0:	e7d2      	b.n	8011d58 <__sinit+0xc>
 8011db2:	bf00      	nop
 8011db4:	080178cc 	.word	0x080178cc
 8011db8:	08011ce5 	.word	0x08011ce5

08011dbc <__sfp>:
 8011dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dbe:	4607      	mov	r7, r0
 8011dc0:	f7ff ffac 	bl	8011d1c <__sfp_lock_acquire>
 8011dc4:	4b1e      	ldr	r3, [pc, #120]	; (8011e40 <__sfp+0x84>)
 8011dc6:	681e      	ldr	r6, [r3, #0]
 8011dc8:	69b3      	ldr	r3, [r6, #24]
 8011dca:	b913      	cbnz	r3, 8011dd2 <__sfp+0x16>
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7ff ffbd 	bl	8011d4c <__sinit>
 8011dd2:	3648      	adds	r6, #72	; 0x48
 8011dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011dd8:	3b01      	subs	r3, #1
 8011dda:	d503      	bpl.n	8011de4 <__sfp+0x28>
 8011ddc:	6833      	ldr	r3, [r6, #0]
 8011dde:	b30b      	cbz	r3, 8011e24 <__sfp+0x68>
 8011de0:	6836      	ldr	r6, [r6, #0]
 8011de2:	e7f7      	b.n	8011dd4 <__sfp+0x18>
 8011de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011de8:	b9d5      	cbnz	r5, 8011e20 <__sfp+0x64>
 8011dea:	4b16      	ldr	r3, [pc, #88]	; (8011e44 <__sfp+0x88>)
 8011dec:	60e3      	str	r3, [r4, #12]
 8011dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011df2:	6665      	str	r5, [r4, #100]	; 0x64
 8011df4:	f000 f85e 	bl	8011eb4 <__retarget_lock_init_recursive>
 8011df8:	f7ff ff96 	bl	8011d28 <__sfp_lock_release>
 8011dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e04:	6025      	str	r5, [r4, #0]
 8011e06:	61a5      	str	r5, [r4, #24]
 8011e08:	2208      	movs	r2, #8
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e10:	f7fe f95c 	bl	80100cc <memset>
 8011e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e20:	3468      	adds	r4, #104	; 0x68
 8011e22:	e7d9      	b.n	8011dd8 <__sfp+0x1c>
 8011e24:	2104      	movs	r1, #4
 8011e26:	4638      	mov	r0, r7
 8011e28:	f7ff ff62 	bl	8011cf0 <__sfmoreglue>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	6030      	str	r0, [r6, #0]
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d1d5      	bne.n	8011de0 <__sfp+0x24>
 8011e34:	f7ff ff78 	bl	8011d28 <__sfp_lock_release>
 8011e38:	230c      	movs	r3, #12
 8011e3a:	603b      	str	r3, [r7, #0]
 8011e3c:	e7ee      	b.n	8011e1c <__sfp+0x60>
 8011e3e:	bf00      	nop
 8011e40:	080178cc 	.word	0x080178cc
 8011e44:	ffff0001 	.word	0xffff0001

08011e48 <fiprintf>:
 8011e48:	b40e      	push	{r1, r2, r3}
 8011e4a:	b503      	push	{r0, r1, lr}
 8011e4c:	4601      	mov	r1, r0
 8011e4e:	ab03      	add	r3, sp, #12
 8011e50:	4805      	ldr	r0, [pc, #20]	; (8011e68 <fiprintf+0x20>)
 8011e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e56:	6800      	ldr	r0, [r0, #0]
 8011e58:	9301      	str	r3, [sp, #4]
 8011e5a:	f000 fc55 	bl	8012708 <_vfiprintf_r>
 8011e5e:	b002      	add	sp, #8
 8011e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e64:	b003      	add	sp, #12
 8011e66:	4770      	bx	lr
 8011e68:	20000018 	.word	0x20000018

08011e6c <_fwalk_reent>:
 8011e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e70:	4606      	mov	r6, r0
 8011e72:	4688      	mov	r8, r1
 8011e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e78:	2700      	movs	r7, #0
 8011e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8011e82:	d505      	bpl.n	8011e90 <_fwalk_reent+0x24>
 8011e84:	6824      	ldr	r4, [r4, #0]
 8011e86:	2c00      	cmp	r4, #0
 8011e88:	d1f7      	bne.n	8011e7a <_fwalk_reent+0xe>
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e90:	89ab      	ldrh	r3, [r5, #12]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d907      	bls.n	8011ea6 <_fwalk_reent+0x3a>
 8011e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	d003      	beq.n	8011ea6 <_fwalk_reent+0x3a>
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	47c0      	blx	r8
 8011ea4:	4307      	orrs	r7, r0
 8011ea6:	3568      	adds	r5, #104	; 0x68
 8011ea8:	e7e9      	b.n	8011e7e <_fwalk_reent+0x12>
	...

08011eac <_localeconv_r>:
 8011eac:	4800      	ldr	r0, [pc, #0]	; (8011eb0 <_localeconv_r+0x4>)
 8011eae:	4770      	bx	lr
 8011eb0:	2000016c 	.word	0x2000016c

08011eb4 <__retarget_lock_init_recursive>:
 8011eb4:	4770      	bx	lr

08011eb6 <__retarget_lock_acquire_recursive>:
 8011eb6:	4770      	bx	lr

08011eb8 <__retarget_lock_release_recursive>:
 8011eb8:	4770      	bx	lr

08011eba <__swhatbuf_r>:
 8011eba:	b570      	push	{r4, r5, r6, lr}
 8011ebc:	460e      	mov	r6, r1
 8011ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	b096      	sub	sp, #88	; 0x58
 8011ec6:	4614      	mov	r4, r2
 8011ec8:	461d      	mov	r5, r3
 8011eca:	da07      	bge.n	8011edc <__swhatbuf_r+0x22>
 8011ecc:	2300      	movs	r3, #0
 8011ece:	602b      	str	r3, [r5, #0]
 8011ed0:	89b3      	ldrh	r3, [r6, #12]
 8011ed2:	061a      	lsls	r2, r3, #24
 8011ed4:	d410      	bmi.n	8011ef8 <__swhatbuf_r+0x3e>
 8011ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eda:	e00e      	b.n	8011efa <__swhatbuf_r+0x40>
 8011edc:	466a      	mov	r2, sp
 8011ede:	f000 fdf9 	bl	8012ad4 <_fstat_r>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	dbf2      	blt.n	8011ecc <__swhatbuf_r+0x12>
 8011ee6:	9a01      	ldr	r2, [sp, #4]
 8011ee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011eec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ef0:	425a      	negs	r2, r3
 8011ef2:	415a      	adcs	r2, r3
 8011ef4:	602a      	str	r2, [r5, #0]
 8011ef6:	e7ee      	b.n	8011ed6 <__swhatbuf_r+0x1c>
 8011ef8:	2340      	movs	r3, #64	; 0x40
 8011efa:	2000      	movs	r0, #0
 8011efc:	6023      	str	r3, [r4, #0]
 8011efe:	b016      	add	sp, #88	; 0x58
 8011f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f04 <__smakebuf_r>:
 8011f04:	898b      	ldrh	r3, [r1, #12]
 8011f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f08:	079d      	lsls	r5, r3, #30
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	d507      	bpl.n	8011f20 <__smakebuf_r+0x1c>
 8011f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	6123      	str	r3, [r4, #16]
 8011f18:	2301      	movs	r3, #1
 8011f1a:	6163      	str	r3, [r4, #20]
 8011f1c:	b002      	add	sp, #8
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	ab01      	add	r3, sp, #4
 8011f22:	466a      	mov	r2, sp
 8011f24:	f7ff ffc9 	bl	8011eba <__swhatbuf_r>
 8011f28:	9900      	ldr	r1, [sp, #0]
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f7fe f925 	bl	801017c <_malloc_r>
 8011f32:	b948      	cbnz	r0, 8011f48 <__smakebuf_r+0x44>
 8011f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f38:	059a      	lsls	r2, r3, #22
 8011f3a:	d4ef      	bmi.n	8011f1c <__smakebuf_r+0x18>
 8011f3c:	f023 0303 	bic.w	r3, r3, #3
 8011f40:	f043 0302 	orr.w	r3, r3, #2
 8011f44:	81a3      	strh	r3, [r4, #12]
 8011f46:	e7e3      	b.n	8011f10 <__smakebuf_r+0xc>
 8011f48:	4b0d      	ldr	r3, [pc, #52]	; (8011f80 <__smakebuf_r+0x7c>)
 8011f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f4c:	89a3      	ldrh	r3, [r4, #12]
 8011f4e:	6020      	str	r0, [r4, #0]
 8011f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	9b00      	ldr	r3, [sp, #0]
 8011f58:	6163      	str	r3, [r4, #20]
 8011f5a:	9b01      	ldr	r3, [sp, #4]
 8011f5c:	6120      	str	r0, [r4, #16]
 8011f5e:	b15b      	cbz	r3, 8011f78 <__smakebuf_r+0x74>
 8011f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f64:	4630      	mov	r0, r6
 8011f66:	f000 fdc7 	bl	8012af8 <_isatty_r>
 8011f6a:	b128      	cbz	r0, 8011f78 <__smakebuf_r+0x74>
 8011f6c:	89a3      	ldrh	r3, [r4, #12]
 8011f6e:	f023 0303 	bic.w	r3, r3, #3
 8011f72:	f043 0301 	orr.w	r3, r3, #1
 8011f76:	81a3      	strh	r3, [r4, #12]
 8011f78:	89a0      	ldrh	r0, [r4, #12]
 8011f7a:	4305      	orrs	r5, r0
 8011f7c:	81a5      	strh	r5, [r4, #12]
 8011f7e:	e7cd      	b.n	8011f1c <__smakebuf_r+0x18>
 8011f80:	08011ce5 	.word	0x08011ce5

08011f84 <__malloc_lock>:
 8011f84:	4801      	ldr	r0, [pc, #4]	; (8011f8c <__malloc_lock+0x8>)
 8011f86:	f7ff bf96 	b.w	8011eb6 <__retarget_lock_acquire_recursive>
 8011f8a:	bf00      	nop
 8011f8c:	20040fd0 	.word	0x20040fd0

08011f90 <__malloc_unlock>:
 8011f90:	4801      	ldr	r0, [pc, #4]	; (8011f98 <__malloc_unlock+0x8>)
 8011f92:	f7ff bf91 	b.w	8011eb8 <__retarget_lock_release_recursive>
 8011f96:	bf00      	nop
 8011f98:	20040fd0 	.word	0x20040fd0

08011f9c <_Balloc>:
 8011f9c:	b570      	push	{r4, r5, r6, lr}
 8011f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	460d      	mov	r5, r1
 8011fa4:	b976      	cbnz	r6, 8011fc4 <_Balloc+0x28>
 8011fa6:	2010      	movs	r0, #16
 8011fa8:	f7fe f87a 	bl	80100a0 <malloc>
 8011fac:	4602      	mov	r2, r0
 8011fae:	6260      	str	r0, [r4, #36]	; 0x24
 8011fb0:	b920      	cbnz	r0, 8011fbc <_Balloc+0x20>
 8011fb2:	4b18      	ldr	r3, [pc, #96]	; (8012014 <_Balloc+0x78>)
 8011fb4:	4818      	ldr	r0, [pc, #96]	; (8012018 <_Balloc+0x7c>)
 8011fb6:	2166      	movs	r1, #102	; 0x66
 8011fb8:	f7fe ff18 	bl	8010dec <__assert_func>
 8011fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fc0:	6006      	str	r6, [r0, #0]
 8011fc2:	60c6      	str	r6, [r0, #12]
 8011fc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011fc6:	68f3      	ldr	r3, [r6, #12]
 8011fc8:	b183      	cbz	r3, 8011fec <_Balloc+0x50>
 8011fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011fd2:	b9b8      	cbnz	r0, 8012004 <_Balloc+0x68>
 8011fd4:	2101      	movs	r1, #1
 8011fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8011fda:	1d72      	adds	r2, r6, #5
 8011fdc:	0092      	lsls	r2, r2, #2
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f000 fb5a 	bl	8012698 <_calloc_r>
 8011fe4:	b160      	cbz	r0, 8012000 <_Balloc+0x64>
 8011fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fea:	e00e      	b.n	801200a <_Balloc+0x6e>
 8011fec:	2221      	movs	r2, #33	; 0x21
 8011fee:	2104      	movs	r1, #4
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f000 fb51 	bl	8012698 <_calloc_r>
 8011ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ff8:	60f0      	str	r0, [r6, #12]
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1e4      	bne.n	8011fca <_Balloc+0x2e>
 8012000:	2000      	movs	r0, #0
 8012002:	bd70      	pop	{r4, r5, r6, pc}
 8012004:	6802      	ldr	r2, [r0, #0]
 8012006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801200a:	2300      	movs	r3, #0
 801200c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012010:	e7f7      	b.n	8012002 <_Balloc+0x66>
 8012012:	bf00      	nop
 8012014:	0801794d 	.word	0x0801794d
 8012018:	08017a34 	.word	0x08017a34

0801201c <_Bfree>:
 801201c:	b570      	push	{r4, r5, r6, lr}
 801201e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012020:	4605      	mov	r5, r0
 8012022:	460c      	mov	r4, r1
 8012024:	b976      	cbnz	r6, 8012044 <_Bfree+0x28>
 8012026:	2010      	movs	r0, #16
 8012028:	f7fe f83a 	bl	80100a0 <malloc>
 801202c:	4602      	mov	r2, r0
 801202e:	6268      	str	r0, [r5, #36]	; 0x24
 8012030:	b920      	cbnz	r0, 801203c <_Bfree+0x20>
 8012032:	4b09      	ldr	r3, [pc, #36]	; (8012058 <_Bfree+0x3c>)
 8012034:	4809      	ldr	r0, [pc, #36]	; (801205c <_Bfree+0x40>)
 8012036:	218a      	movs	r1, #138	; 0x8a
 8012038:	f7fe fed8 	bl	8010dec <__assert_func>
 801203c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012040:	6006      	str	r6, [r0, #0]
 8012042:	60c6      	str	r6, [r0, #12]
 8012044:	b13c      	cbz	r4, 8012056 <_Bfree+0x3a>
 8012046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012048:	6862      	ldr	r2, [r4, #4]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012050:	6021      	str	r1, [r4, #0]
 8012052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	0801794d 	.word	0x0801794d
 801205c:	08017a34 	.word	0x08017a34

08012060 <__multadd>:
 8012060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012064:	690e      	ldr	r6, [r1, #16]
 8012066:	4607      	mov	r7, r0
 8012068:	4698      	mov	r8, r3
 801206a:	460c      	mov	r4, r1
 801206c:	f101 0014 	add.w	r0, r1, #20
 8012070:	2300      	movs	r3, #0
 8012072:	6805      	ldr	r5, [r0, #0]
 8012074:	b2a9      	uxth	r1, r5
 8012076:	fb02 8101 	mla	r1, r2, r1, r8
 801207a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801207e:	0c2d      	lsrs	r5, r5, #16
 8012080:	fb02 c505 	mla	r5, r2, r5, ip
 8012084:	b289      	uxth	r1, r1
 8012086:	3301      	adds	r3, #1
 8012088:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801208c:	429e      	cmp	r6, r3
 801208e:	f840 1b04 	str.w	r1, [r0], #4
 8012092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012096:	dcec      	bgt.n	8012072 <__multadd+0x12>
 8012098:	f1b8 0f00 	cmp.w	r8, #0
 801209c:	d022      	beq.n	80120e4 <__multadd+0x84>
 801209e:	68a3      	ldr	r3, [r4, #8]
 80120a0:	42b3      	cmp	r3, r6
 80120a2:	dc19      	bgt.n	80120d8 <__multadd+0x78>
 80120a4:	6861      	ldr	r1, [r4, #4]
 80120a6:	4638      	mov	r0, r7
 80120a8:	3101      	adds	r1, #1
 80120aa:	f7ff ff77 	bl	8011f9c <_Balloc>
 80120ae:	4605      	mov	r5, r0
 80120b0:	b928      	cbnz	r0, 80120be <__multadd+0x5e>
 80120b2:	4602      	mov	r2, r0
 80120b4:	4b0d      	ldr	r3, [pc, #52]	; (80120ec <__multadd+0x8c>)
 80120b6:	480e      	ldr	r0, [pc, #56]	; (80120f0 <__multadd+0x90>)
 80120b8:	21b5      	movs	r1, #181	; 0xb5
 80120ba:	f7fe fe97 	bl	8010dec <__assert_func>
 80120be:	6922      	ldr	r2, [r4, #16]
 80120c0:	3202      	adds	r2, #2
 80120c2:	f104 010c 	add.w	r1, r4, #12
 80120c6:	0092      	lsls	r2, r2, #2
 80120c8:	300c      	adds	r0, #12
 80120ca:	f7fd fff1 	bl	80100b0 <memcpy>
 80120ce:	4621      	mov	r1, r4
 80120d0:	4638      	mov	r0, r7
 80120d2:	f7ff ffa3 	bl	801201c <_Bfree>
 80120d6:	462c      	mov	r4, r5
 80120d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80120dc:	3601      	adds	r6, #1
 80120de:	f8c3 8014 	str.w	r8, [r3, #20]
 80120e2:	6126      	str	r6, [r4, #16]
 80120e4:	4620      	mov	r0, r4
 80120e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ea:	bf00      	nop
 80120ec:	080179c3 	.word	0x080179c3
 80120f0:	08017a34 	.word	0x08017a34

080120f4 <__hi0bits>:
 80120f4:	0c03      	lsrs	r3, r0, #16
 80120f6:	041b      	lsls	r3, r3, #16
 80120f8:	b9d3      	cbnz	r3, 8012130 <__hi0bits+0x3c>
 80120fa:	0400      	lsls	r0, r0, #16
 80120fc:	2310      	movs	r3, #16
 80120fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012102:	bf04      	itt	eq
 8012104:	0200      	lsleq	r0, r0, #8
 8012106:	3308      	addeq	r3, #8
 8012108:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801210c:	bf04      	itt	eq
 801210e:	0100      	lsleq	r0, r0, #4
 8012110:	3304      	addeq	r3, #4
 8012112:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012116:	bf04      	itt	eq
 8012118:	0080      	lsleq	r0, r0, #2
 801211a:	3302      	addeq	r3, #2
 801211c:	2800      	cmp	r0, #0
 801211e:	db05      	blt.n	801212c <__hi0bits+0x38>
 8012120:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012124:	f103 0301 	add.w	r3, r3, #1
 8012128:	bf08      	it	eq
 801212a:	2320      	moveq	r3, #32
 801212c:	4618      	mov	r0, r3
 801212e:	4770      	bx	lr
 8012130:	2300      	movs	r3, #0
 8012132:	e7e4      	b.n	80120fe <__hi0bits+0xa>

08012134 <__lo0bits>:
 8012134:	6803      	ldr	r3, [r0, #0]
 8012136:	f013 0207 	ands.w	r2, r3, #7
 801213a:	4601      	mov	r1, r0
 801213c:	d00b      	beq.n	8012156 <__lo0bits+0x22>
 801213e:	07da      	lsls	r2, r3, #31
 8012140:	d424      	bmi.n	801218c <__lo0bits+0x58>
 8012142:	0798      	lsls	r0, r3, #30
 8012144:	bf49      	itett	mi
 8012146:	085b      	lsrmi	r3, r3, #1
 8012148:	089b      	lsrpl	r3, r3, #2
 801214a:	2001      	movmi	r0, #1
 801214c:	600b      	strmi	r3, [r1, #0]
 801214e:	bf5c      	itt	pl
 8012150:	600b      	strpl	r3, [r1, #0]
 8012152:	2002      	movpl	r0, #2
 8012154:	4770      	bx	lr
 8012156:	b298      	uxth	r0, r3
 8012158:	b9b0      	cbnz	r0, 8012188 <__lo0bits+0x54>
 801215a:	0c1b      	lsrs	r3, r3, #16
 801215c:	2010      	movs	r0, #16
 801215e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012162:	bf04      	itt	eq
 8012164:	0a1b      	lsreq	r3, r3, #8
 8012166:	3008      	addeq	r0, #8
 8012168:	071a      	lsls	r2, r3, #28
 801216a:	bf04      	itt	eq
 801216c:	091b      	lsreq	r3, r3, #4
 801216e:	3004      	addeq	r0, #4
 8012170:	079a      	lsls	r2, r3, #30
 8012172:	bf04      	itt	eq
 8012174:	089b      	lsreq	r3, r3, #2
 8012176:	3002      	addeq	r0, #2
 8012178:	07da      	lsls	r2, r3, #31
 801217a:	d403      	bmi.n	8012184 <__lo0bits+0x50>
 801217c:	085b      	lsrs	r3, r3, #1
 801217e:	f100 0001 	add.w	r0, r0, #1
 8012182:	d005      	beq.n	8012190 <__lo0bits+0x5c>
 8012184:	600b      	str	r3, [r1, #0]
 8012186:	4770      	bx	lr
 8012188:	4610      	mov	r0, r2
 801218a:	e7e8      	b.n	801215e <__lo0bits+0x2a>
 801218c:	2000      	movs	r0, #0
 801218e:	4770      	bx	lr
 8012190:	2020      	movs	r0, #32
 8012192:	4770      	bx	lr

08012194 <__i2b>:
 8012194:	b510      	push	{r4, lr}
 8012196:	460c      	mov	r4, r1
 8012198:	2101      	movs	r1, #1
 801219a:	f7ff feff 	bl	8011f9c <_Balloc>
 801219e:	4602      	mov	r2, r0
 80121a0:	b928      	cbnz	r0, 80121ae <__i2b+0x1a>
 80121a2:	4b05      	ldr	r3, [pc, #20]	; (80121b8 <__i2b+0x24>)
 80121a4:	4805      	ldr	r0, [pc, #20]	; (80121bc <__i2b+0x28>)
 80121a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80121aa:	f7fe fe1f 	bl	8010dec <__assert_func>
 80121ae:	2301      	movs	r3, #1
 80121b0:	6144      	str	r4, [r0, #20]
 80121b2:	6103      	str	r3, [r0, #16]
 80121b4:	bd10      	pop	{r4, pc}
 80121b6:	bf00      	nop
 80121b8:	080179c3 	.word	0x080179c3
 80121bc:	08017a34 	.word	0x08017a34

080121c0 <__multiply>:
 80121c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c4:	4614      	mov	r4, r2
 80121c6:	690a      	ldr	r2, [r1, #16]
 80121c8:	6923      	ldr	r3, [r4, #16]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	bfb8      	it	lt
 80121ce:	460b      	movlt	r3, r1
 80121d0:	460d      	mov	r5, r1
 80121d2:	bfbc      	itt	lt
 80121d4:	4625      	movlt	r5, r4
 80121d6:	461c      	movlt	r4, r3
 80121d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80121dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80121e0:	68ab      	ldr	r3, [r5, #8]
 80121e2:	6869      	ldr	r1, [r5, #4]
 80121e4:	eb0a 0709 	add.w	r7, sl, r9
 80121e8:	42bb      	cmp	r3, r7
 80121ea:	b085      	sub	sp, #20
 80121ec:	bfb8      	it	lt
 80121ee:	3101      	addlt	r1, #1
 80121f0:	f7ff fed4 	bl	8011f9c <_Balloc>
 80121f4:	b930      	cbnz	r0, 8012204 <__multiply+0x44>
 80121f6:	4602      	mov	r2, r0
 80121f8:	4b42      	ldr	r3, [pc, #264]	; (8012304 <__multiply+0x144>)
 80121fa:	4843      	ldr	r0, [pc, #268]	; (8012308 <__multiply+0x148>)
 80121fc:	f240 115d 	movw	r1, #349	; 0x15d
 8012200:	f7fe fdf4 	bl	8010dec <__assert_func>
 8012204:	f100 0614 	add.w	r6, r0, #20
 8012208:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801220c:	4633      	mov	r3, r6
 801220e:	2200      	movs	r2, #0
 8012210:	4543      	cmp	r3, r8
 8012212:	d31e      	bcc.n	8012252 <__multiply+0x92>
 8012214:	f105 0c14 	add.w	ip, r5, #20
 8012218:	f104 0314 	add.w	r3, r4, #20
 801221c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012220:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012224:	9202      	str	r2, [sp, #8]
 8012226:	ebac 0205 	sub.w	r2, ip, r5
 801222a:	3a15      	subs	r2, #21
 801222c:	f022 0203 	bic.w	r2, r2, #3
 8012230:	3204      	adds	r2, #4
 8012232:	f105 0115 	add.w	r1, r5, #21
 8012236:	458c      	cmp	ip, r1
 8012238:	bf38      	it	cc
 801223a:	2204      	movcc	r2, #4
 801223c:	9201      	str	r2, [sp, #4]
 801223e:	9a02      	ldr	r2, [sp, #8]
 8012240:	9303      	str	r3, [sp, #12]
 8012242:	429a      	cmp	r2, r3
 8012244:	d808      	bhi.n	8012258 <__multiply+0x98>
 8012246:	2f00      	cmp	r7, #0
 8012248:	dc55      	bgt.n	80122f6 <__multiply+0x136>
 801224a:	6107      	str	r7, [r0, #16]
 801224c:	b005      	add	sp, #20
 801224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012252:	f843 2b04 	str.w	r2, [r3], #4
 8012256:	e7db      	b.n	8012210 <__multiply+0x50>
 8012258:	f8b3 a000 	ldrh.w	sl, [r3]
 801225c:	f1ba 0f00 	cmp.w	sl, #0
 8012260:	d020      	beq.n	80122a4 <__multiply+0xe4>
 8012262:	f105 0e14 	add.w	lr, r5, #20
 8012266:	46b1      	mov	r9, r6
 8012268:	2200      	movs	r2, #0
 801226a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801226e:	f8d9 b000 	ldr.w	fp, [r9]
 8012272:	b2a1      	uxth	r1, r4
 8012274:	fa1f fb8b 	uxth.w	fp, fp
 8012278:	fb0a b101 	mla	r1, sl, r1, fp
 801227c:	4411      	add	r1, r2
 801227e:	f8d9 2000 	ldr.w	r2, [r9]
 8012282:	0c24      	lsrs	r4, r4, #16
 8012284:	0c12      	lsrs	r2, r2, #16
 8012286:	fb0a 2404 	mla	r4, sl, r4, r2
 801228a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801228e:	b289      	uxth	r1, r1
 8012290:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012294:	45f4      	cmp	ip, lr
 8012296:	f849 1b04 	str.w	r1, [r9], #4
 801229a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801229e:	d8e4      	bhi.n	801226a <__multiply+0xaa>
 80122a0:	9901      	ldr	r1, [sp, #4]
 80122a2:	5072      	str	r2, [r6, r1]
 80122a4:	9a03      	ldr	r2, [sp, #12]
 80122a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80122aa:	3304      	adds	r3, #4
 80122ac:	f1b9 0f00 	cmp.w	r9, #0
 80122b0:	d01f      	beq.n	80122f2 <__multiply+0x132>
 80122b2:	6834      	ldr	r4, [r6, #0]
 80122b4:	f105 0114 	add.w	r1, r5, #20
 80122b8:	46b6      	mov	lr, r6
 80122ba:	f04f 0a00 	mov.w	sl, #0
 80122be:	880a      	ldrh	r2, [r1, #0]
 80122c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80122c4:	fb09 b202 	mla	r2, r9, r2, fp
 80122c8:	4492      	add	sl, r2
 80122ca:	b2a4      	uxth	r4, r4
 80122cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80122d0:	f84e 4b04 	str.w	r4, [lr], #4
 80122d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80122d8:	f8be 2000 	ldrh.w	r2, [lr]
 80122dc:	0c24      	lsrs	r4, r4, #16
 80122de:	fb09 2404 	mla	r4, r9, r4, r2
 80122e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80122e6:	458c      	cmp	ip, r1
 80122e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80122ec:	d8e7      	bhi.n	80122be <__multiply+0xfe>
 80122ee:	9a01      	ldr	r2, [sp, #4]
 80122f0:	50b4      	str	r4, [r6, r2]
 80122f2:	3604      	adds	r6, #4
 80122f4:	e7a3      	b.n	801223e <__multiply+0x7e>
 80122f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d1a5      	bne.n	801224a <__multiply+0x8a>
 80122fe:	3f01      	subs	r7, #1
 8012300:	e7a1      	b.n	8012246 <__multiply+0x86>
 8012302:	bf00      	nop
 8012304:	080179c3 	.word	0x080179c3
 8012308:	08017a34 	.word	0x08017a34

0801230c <__pow5mult>:
 801230c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012310:	4615      	mov	r5, r2
 8012312:	f012 0203 	ands.w	r2, r2, #3
 8012316:	4606      	mov	r6, r0
 8012318:	460f      	mov	r7, r1
 801231a:	d007      	beq.n	801232c <__pow5mult+0x20>
 801231c:	4c25      	ldr	r4, [pc, #148]	; (80123b4 <__pow5mult+0xa8>)
 801231e:	3a01      	subs	r2, #1
 8012320:	2300      	movs	r3, #0
 8012322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012326:	f7ff fe9b 	bl	8012060 <__multadd>
 801232a:	4607      	mov	r7, r0
 801232c:	10ad      	asrs	r5, r5, #2
 801232e:	d03d      	beq.n	80123ac <__pow5mult+0xa0>
 8012330:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012332:	b97c      	cbnz	r4, 8012354 <__pow5mult+0x48>
 8012334:	2010      	movs	r0, #16
 8012336:	f7fd feb3 	bl	80100a0 <malloc>
 801233a:	4602      	mov	r2, r0
 801233c:	6270      	str	r0, [r6, #36]	; 0x24
 801233e:	b928      	cbnz	r0, 801234c <__pow5mult+0x40>
 8012340:	4b1d      	ldr	r3, [pc, #116]	; (80123b8 <__pow5mult+0xac>)
 8012342:	481e      	ldr	r0, [pc, #120]	; (80123bc <__pow5mult+0xb0>)
 8012344:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012348:	f7fe fd50 	bl	8010dec <__assert_func>
 801234c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012350:	6004      	str	r4, [r0, #0]
 8012352:	60c4      	str	r4, [r0, #12]
 8012354:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801235c:	b94c      	cbnz	r4, 8012372 <__pow5mult+0x66>
 801235e:	f240 2171 	movw	r1, #625	; 0x271
 8012362:	4630      	mov	r0, r6
 8012364:	f7ff ff16 	bl	8012194 <__i2b>
 8012368:	2300      	movs	r3, #0
 801236a:	f8c8 0008 	str.w	r0, [r8, #8]
 801236e:	4604      	mov	r4, r0
 8012370:	6003      	str	r3, [r0, #0]
 8012372:	f04f 0900 	mov.w	r9, #0
 8012376:	07eb      	lsls	r3, r5, #31
 8012378:	d50a      	bpl.n	8012390 <__pow5mult+0x84>
 801237a:	4639      	mov	r1, r7
 801237c:	4622      	mov	r2, r4
 801237e:	4630      	mov	r0, r6
 8012380:	f7ff ff1e 	bl	80121c0 <__multiply>
 8012384:	4639      	mov	r1, r7
 8012386:	4680      	mov	r8, r0
 8012388:	4630      	mov	r0, r6
 801238a:	f7ff fe47 	bl	801201c <_Bfree>
 801238e:	4647      	mov	r7, r8
 8012390:	106d      	asrs	r5, r5, #1
 8012392:	d00b      	beq.n	80123ac <__pow5mult+0xa0>
 8012394:	6820      	ldr	r0, [r4, #0]
 8012396:	b938      	cbnz	r0, 80123a8 <__pow5mult+0x9c>
 8012398:	4622      	mov	r2, r4
 801239a:	4621      	mov	r1, r4
 801239c:	4630      	mov	r0, r6
 801239e:	f7ff ff0f 	bl	80121c0 <__multiply>
 80123a2:	6020      	str	r0, [r4, #0]
 80123a4:	f8c0 9000 	str.w	r9, [r0]
 80123a8:	4604      	mov	r4, r0
 80123aa:	e7e4      	b.n	8012376 <__pow5mult+0x6a>
 80123ac:	4638      	mov	r0, r7
 80123ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123b2:	bf00      	nop
 80123b4:	08017b88 	.word	0x08017b88
 80123b8:	0801794d 	.word	0x0801794d
 80123bc:	08017a34 	.word	0x08017a34

080123c0 <__lshift>:
 80123c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123c4:	460c      	mov	r4, r1
 80123c6:	6849      	ldr	r1, [r1, #4]
 80123c8:	6923      	ldr	r3, [r4, #16]
 80123ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80123ce:	68a3      	ldr	r3, [r4, #8]
 80123d0:	4607      	mov	r7, r0
 80123d2:	4691      	mov	r9, r2
 80123d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80123d8:	f108 0601 	add.w	r6, r8, #1
 80123dc:	42b3      	cmp	r3, r6
 80123de:	db0b      	blt.n	80123f8 <__lshift+0x38>
 80123e0:	4638      	mov	r0, r7
 80123e2:	f7ff fddb 	bl	8011f9c <_Balloc>
 80123e6:	4605      	mov	r5, r0
 80123e8:	b948      	cbnz	r0, 80123fe <__lshift+0x3e>
 80123ea:	4602      	mov	r2, r0
 80123ec:	4b28      	ldr	r3, [pc, #160]	; (8012490 <__lshift+0xd0>)
 80123ee:	4829      	ldr	r0, [pc, #164]	; (8012494 <__lshift+0xd4>)
 80123f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80123f4:	f7fe fcfa 	bl	8010dec <__assert_func>
 80123f8:	3101      	adds	r1, #1
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	e7ee      	b.n	80123dc <__lshift+0x1c>
 80123fe:	2300      	movs	r3, #0
 8012400:	f100 0114 	add.w	r1, r0, #20
 8012404:	f100 0210 	add.w	r2, r0, #16
 8012408:	4618      	mov	r0, r3
 801240a:	4553      	cmp	r3, sl
 801240c:	db33      	blt.n	8012476 <__lshift+0xb6>
 801240e:	6920      	ldr	r0, [r4, #16]
 8012410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012414:	f104 0314 	add.w	r3, r4, #20
 8012418:	f019 091f 	ands.w	r9, r9, #31
 801241c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012424:	d02b      	beq.n	801247e <__lshift+0xbe>
 8012426:	f1c9 0e20 	rsb	lr, r9, #32
 801242a:	468a      	mov	sl, r1
 801242c:	2200      	movs	r2, #0
 801242e:	6818      	ldr	r0, [r3, #0]
 8012430:	fa00 f009 	lsl.w	r0, r0, r9
 8012434:	4302      	orrs	r2, r0
 8012436:	f84a 2b04 	str.w	r2, [sl], #4
 801243a:	f853 2b04 	ldr.w	r2, [r3], #4
 801243e:	459c      	cmp	ip, r3
 8012440:	fa22 f20e 	lsr.w	r2, r2, lr
 8012444:	d8f3      	bhi.n	801242e <__lshift+0x6e>
 8012446:	ebac 0304 	sub.w	r3, ip, r4
 801244a:	3b15      	subs	r3, #21
 801244c:	f023 0303 	bic.w	r3, r3, #3
 8012450:	3304      	adds	r3, #4
 8012452:	f104 0015 	add.w	r0, r4, #21
 8012456:	4584      	cmp	ip, r0
 8012458:	bf38      	it	cc
 801245a:	2304      	movcc	r3, #4
 801245c:	50ca      	str	r2, [r1, r3]
 801245e:	b10a      	cbz	r2, 8012464 <__lshift+0xa4>
 8012460:	f108 0602 	add.w	r6, r8, #2
 8012464:	3e01      	subs	r6, #1
 8012466:	4638      	mov	r0, r7
 8012468:	612e      	str	r6, [r5, #16]
 801246a:	4621      	mov	r1, r4
 801246c:	f7ff fdd6 	bl	801201c <_Bfree>
 8012470:	4628      	mov	r0, r5
 8012472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012476:	f842 0f04 	str.w	r0, [r2, #4]!
 801247a:	3301      	adds	r3, #1
 801247c:	e7c5      	b.n	801240a <__lshift+0x4a>
 801247e:	3904      	subs	r1, #4
 8012480:	f853 2b04 	ldr.w	r2, [r3], #4
 8012484:	f841 2f04 	str.w	r2, [r1, #4]!
 8012488:	459c      	cmp	ip, r3
 801248a:	d8f9      	bhi.n	8012480 <__lshift+0xc0>
 801248c:	e7ea      	b.n	8012464 <__lshift+0xa4>
 801248e:	bf00      	nop
 8012490:	080179c3 	.word	0x080179c3
 8012494:	08017a34 	.word	0x08017a34

08012498 <__mcmp>:
 8012498:	b530      	push	{r4, r5, lr}
 801249a:	6902      	ldr	r2, [r0, #16]
 801249c:	690c      	ldr	r4, [r1, #16]
 801249e:	1b12      	subs	r2, r2, r4
 80124a0:	d10e      	bne.n	80124c0 <__mcmp+0x28>
 80124a2:	f100 0314 	add.w	r3, r0, #20
 80124a6:	3114      	adds	r1, #20
 80124a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80124ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80124b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80124b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80124b8:	42a5      	cmp	r5, r4
 80124ba:	d003      	beq.n	80124c4 <__mcmp+0x2c>
 80124bc:	d305      	bcc.n	80124ca <__mcmp+0x32>
 80124be:	2201      	movs	r2, #1
 80124c0:	4610      	mov	r0, r2
 80124c2:	bd30      	pop	{r4, r5, pc}
 80124c4:	4283      	cmp	r3, r0
 80124c6:	d3f3      	bcc.n	80124b0 <__mcmp+0x18>
 80124c8:	e7fa      	b.n	80124c0 <__mcmp+0x28>
 80124ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124ce:	e7f7      	b.n	80124c0 <__mcmp+0x28>

080124d0 <__mdiff>:
 80124d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	460c      	mov	r4, r1
 80124d6:	4606      	mov	r6, r0
 80124d8:	4611      	mov	r1, r2
 80124da:	4620      	mov	r0, r4
 80124dc:	4617      	mov	r7, r2
 80124de:	f7ff ffdb 	bl	8012498 <__mcmp>
 80124e2:	1e05      	subs	r5, r0, #0
 80124e4:	d110      	bne.n	8012508 <__mdiff+0x38>
 80124e6:	4629      	mov	r1, r5
 80124e8:	4630      	mov	r0, r6
 80124ea:	f7ff fd57 	bl	8011f9c <_Balloc>
 80124ee:	b930      	cbnz	r0, 80124fe <__mdiff+0x2e>
 80124f0:	4b39      	ldr	r3, [pc, #228]	; (80125d8 <__mdiff+0x108>)
 80124f2:	4602      	mov	r2, r0
 80124f4:	f240 2132 	movw	r1, #562	; 0x232
 80124f8:	4838      	ldr	r0, [pc, #224]	; (80125dc <__mdiff+0x10c>)
 80124fa:	f7fe fc77 	bl	8010dec <__assert_func>
 80124fe:	2301      	movs	r3, #1
 8012500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012508:	bfa4      	itt	ge
 801250a:	463b      	movge	r3, r7
 801250c:	4627      	movge	r7, r4
 801250e:	4630      	mov	r0, r6
 8012510:	6879      	ldr	r1, [r7, #4]
 8012512:	bfa6      	itte	ge
 8012514:	461c      	movge	r4, r3
 8012516:	2500      	movge	r5, #0
 8012518:	2501      	movlt	r5, #1
 801251a:	f7ff fd3f 	bl	8011f9c <_Balloc>
 801251e:	b920      	cbnz	r0, 801252a <__mdiff+0x5a>
 8012520:	4b2d      	ldr	r3, [pc, #180]	; (80125d8 <__mdiff+0x108>)
 8012522:	4602      	mov	r2, r0
 8012524:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012528:	e7e6      	b.n	80124f8 <__mdiff+0x28>
 801252a:	693e      	ldr	r6, [r7, #16]
 801252c:	60c5      	str	r5, [r0, #12]
 801252e:	6925      	ldr	r5, [r4, #16]
 8012530:	f107 0114 	add.w	r1, r7, #20
 8012534:	f104 0914 	add.w	r9, r4, #20
 8012538:	f100 0e14 	add.w	lr, r0, #20
 801253c:	f107 0210 	add.w	r2, r7, #16
 8012540:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012544:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012548:	46f2      	mov	sl, lr
 801254a:	2700      	movs	r7, #0
 801254c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012550:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012554:	fa1f f883 	uxth.w	r8, r3
 8012558:	fa17 f78b 	uxtah	r7, r7, fp
 801255c:	0c1b      	lsrs	r3, r3, #16
 801255e:	eba7 0808 	sub.w	r8, r7, r8
 8012562:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012566:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801256a:	fa1f f888 	uxth.w	r8, r8
 801256e:	141f      	asrs	r7, r3, #16
 8012570:	454d      	cmp	r5, r9
 8012572:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012576:	f84a 3b04 	str.w	r3, [sl], #4
 801257a:	d8e7      	bhi.n	801254c <__mdiff+0x7c>
 801257c:	1b2b      	subs	r3, r5, r4
 801257e:	3b15      	subs	r3, #21
 8012580:	f023 0303 	bic.w	r3, r3, #3
 8012584:	3304      	adds	r3, #4
 8012586:	3415      	adds	r4, #21
 8012588:	42a5      	cmp	r5, r4
 801258a:	bf38      	it	cc
 801258c:	2304      	movcc	r3, #4
 801258e:	4419      	add	r1, r3
 8012590:	4473      	add	r3, lr
 8012592:	469e      	mov	lr, r3
 8012594:	460d      	mov	r5, r1
 8012596:	4565      	cmp	r5, ip
 8012598:	d30e      	bcc.n	80125b8 <__mdiff+0xe8>
 801259a:	f10c 0203 	add.w	r2, ip, #3
 801259e:	1a52      	subs	r2, r2, r1
 80125a0:	f022 0203 	bic.w	r2, r2, #3
 80125a4:	3903      	subs	r1, #3
 80125a6:	458c      	cmp	ip, r1
 80125a8:	bf38      	it	cc
 80125aa:	2200      	movcc	r2, #0
 80125ac:	441a      	add	r2, r3
 80125ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80125b2:	b17b      	cbz	r3, 80125d4 <__mdiff+0x104>
 80125b4:	6106      	str	r6, [r0, #16]
 80125b6:	e7a5      	b.n	8012504 <__mdiff+0x34>
 80125b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80125bc:	fa17 f488 	uxtah	r4, r7, r8
 80125c0:	1422      	asrs	r2, r4, #16
 80125c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80125c6:	b2a4      	uxth	r4, r4
 80125c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80125cc:	f84e 4b04 	str.w	r4, [lr], #4
 80125d0:	1417      	asrs	r7, r2, #16
 80125d2:	e7e0      	b.n	8012596 <__mdiff+0xc6>
 80125d4:	3e01      	subs	r6, #1
 80125d6:	e7ea      	b.n	80125ae <__mdiff+0xde>
 80125d8:	080179c3 	.word	0x080179c3
 80125dc:	08017a34 	.word	0x08017a34

080125e0 <__d2b>:
 80125e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125e4:	4689      	mov	r9, r1
 80125e6:	2101      	movs	r1, #1
 80125e8:	ec57 6b10 	vmov	r6, r7, d0
 80125ec:	4690      	mov	r8, r2
 80125ee:	f7ff fcd5 	bl	8011f9c <_Balloc>
 80125f2:	4604      	mov	r4, r0
 80125f4:	b930      	cbnz	r0, 8012604 <__d2b+0x24>
 80125f6:	4602      	mov	r2, r0
 80125f8:	4b25      	ldr	r3, [pc, #148]	; (8012690 <__d2b+0xb0>)
 80125fa:	4826      	ldr	r0, [pc, #152]	; (8012694 <__d2b+0xb4>)
 80125fc:	f240 310a 	movw	r1, #778	; 0x30a
 8012600:	f7fe fbf4 	bl	8010dec <__assert_func>
 8012604:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801260c:	bb35      	cbnz	r5, 801265c <__d2b+0x7c>
 801260e:	2e00      	cmp	r6, #0
 8012610:	9301      	str	r3, [sp, #4]
 8012612:	d028      	beq.n	8012666 <__d2b+0x86>
 8012614:	4668      	mov	r0, sp
 8012616:	9600      	str	r6, [sp, #0]
 8012618:	f7ff fd8c 	bl	8012134 <__lo0bits>
 801261c:	9900      	ldr	r1, [sp, #0]
 801261e:	b300      	cbz	r0, 8012662 <__d2b+0x82>
 8012620:	9a01      	ldr	r2, [sp, #4]
 8012622:	f1c0 0320 	rsb	r3, r0, #32
 8012626:	fa02 f303 	lsl.w	r3, r2, r3
 801262a:	430b      	orrs	r3, r1
 801262c:	40c2      	lsrs	r2, r0
 801262e:	6163      	str	r3, [r4, #20]
 8012630:	9201      	str	r2, [sp, #4]
 8012632:	9b01      	ldr	r3, [sp, #4]
 8012634:	61a3      	str	r3, [r4, #24]
 8012636:	2b00      	cmp	r3, #0
 8012638:	bf14      	ite	ne
 801263a:	2202      	movne	r2, #2
 801263c:	2201      	moveq	r2, #1
 801263e:	6122      	str	r2, [r4, #16]
 8012640:	b1d5      	cbz	r5, 8012678 <__d2b+0x98>
 8012642:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012646:	4405      	add	r5, r0
 8012648:	f8c9 5000 	str.w	r5, [r9]
 801264c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012650:	f8c8 0000 	str.w	r0, [r8]
 8012654:	4620      	mov	r0, r4
 8012656:	b003      	add	sp, #12
 8012658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012660:	e7d5      	b.n	801260e <__d2b+0x2e>
 8012662:	6161      	str	r1, [r4, #20]
 8012664:	e7e5      	b.n	8012632 <__d2b+0x52>
 8012666:	a801      	add	r0, sp, #4
 8012668:	f7ff fd64 	bl	8012134 <__lo0bits>
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	6163      	str	r3, [r4, #20]
 8012670:	2201      	movs	r2, #1
 8012672:	6122      	str	r2, [r4, #16]
 8012674:	3020      	adds	r0, #32
 8012676:	e7e3      	b.n	8012640 <__d2b+0x60>
 8012678:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801267c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012680:	f8c9 0000 	str.w	r0, [r9]
 8012684:	6918      	ldr	r0, [r3, #16]
 8012686:	f7ff fd35 	bl	80120f4 <__hi0bits>
 801268a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801268e:	e7df      	b.n	8012650 <__d2b+0x70>
 8012690:	080179c3 	.word	0x080179c3
 8012694:	08017a34 	.word	0x08017a34

08012698 <_calloc_r>:
 8012698:	b513      	push	{r0, r1, r4, lr}
 801269a:	434a      	muls	r2, r1
 801269c:	4611      	mov	r1, r2
 801269e:	9201      	str	r2, [sp, #4]
 80126a0:	f7fd fd6c 	bl	801017c <_malloc_r>
 80126a4:	4604      	mov	r4, r0
 80126a6:	b118      	cbz	r0, 80126b0 <_calloc_r+0x18>
 80126a8:	9a01      	ldr	r2, [sp, #4]
 80126aa:	2100      	movs	r1, #0
 80126ac:	f7fd fd0e 	bl	80100cc <memset>
 80126b0:	4620      	mov	r0, r4
 80126b2:	b002      	add	sp, #8
 80126b4:	bd10      	pop	{r4, pc}

080126b6 <__sfputc_r>:
 80126b6:	6893      	ldr	r3, [r2, #8]
 80126b8:	3b01      	subs	r3, #1
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	b410      	push	{r4}
 80126be:	6093      	str	r3, [r2, #8]
 80126c0:	da08      	bge.n	80126d4 <__sfputc_r+0x1e>
 80126c2:	6994      	ldr	r4, [r2, #24]
 80126c4:	42a3      	cmp	r3, r4
 80126c6:	db01      	blt.n	80126cc <__sfputc_r+0x16>
 80126c8:	290a      	cmp	r1, #10
 80126ca:	d103      	bne.n	80126d4 <__sfputc_r+0x1e>
 80126cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126d0:	f7fe bacc 	b.w	8010c6c <__swbuf_r>
 80126d4:	6813      	ldr	r3, [r2, #0]
 80126d6:	1c58      	adds	r0, r3, #1
 80126d8:	6010      	str	r0, [r2, #0]
 80126da:	7019      	strb	r1, [r3, #0]
 80126dc:	4608      	mov	r0, r1
 80126de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <__sfputs_r>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	4606      	mov	r6, r0
 80126e8:	460f      	mov	r7, r1
 80126ea:	4614      	mov	r4, r2
 80126ec:	18d5      	adds	r5, r2, r3
 80126ee:	42ac      	cmp	r4, r5
 80126f0:	d101      	bne.n	80126f6 <__sfputs_r+0x12>
 80126f2:	2000      	movs	r0, #0
 80126f4:	e007      	b.n	8012706 <__sfputs_r+0x22>
 80126f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fa:	463a      	mov	r2, r7
 80126fc:	4630      	mov	r0, r6
 80126fe:	f7ff ffda 	bl	80126b6 <__sfputc_r>
 8012702:	1c43      	adds	r3, r0, #1
 8012704:	d1f3      	bne.n	80126ee <__sfputs_r+0xa>
 8012706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012708 <_vfiprintf_r>:
 8012708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	460d      	mov	r5, r1
 801270e:	b09d      	sub	sp, #116	; 0x74
 8012710:	4614      	mov	r4, r2
 8012712:	4698      	mov	r8, r3
 8012714:	4606      	mov	r6, r0
 8012716:	b118      	cbz	r0, 8012720 <_vfiprintf_r+0x18>
 8012718:	6983      	ldr	r3, [r0, #24]
 801271a:	b90b      	cbnz	r3, 8012720 <_vfiprintf_r+0x18>
 801271c:	f7ff fb16 	bl	8011d4c <__sinit>
 8012720:	4b89      	ldr	r3, [pc, #548]	; (8012948 <_vfiprintf_r+0x240>)
 8012722:	429d      	cmp	r5, r3
 8012724:	d11b      	bne.n	801275e <_vfiprintf_r+0x56>
 8012726:	6875      	ldr	r5, [r6, #4]
 8012728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801272a:	07d9      	lsls	r1, r3, #31
 801272c:	d405      	bmi.n	801273a <_vfiprintf_r+0x32>
 801272e:	89ab      	ldrh	r3, [r5, #12]
 8012730:	059a      	lsls	r2, r3, #22
 8012732:	d402      	bmi.n	801273a <_vfiprintf_r+0x32>
 8012734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012736:	f7ff fbbe 	bl	8011eb6 <__retarget_lock_acquire_recursive>
 801273a:	89ab      	ldrh	r3, [r5, #12]
 801273c:	071b      	lsls	r3, r3, #28
 801273e:	d501      	bpl.n	8012744 <_vfiprintf_r+0x3c>
 8012740:	692b      	ldr	r3, [r5, #16]
 8012742:	b9eb      	cbnz	r3, 8012780 <_vfiprintf_r+0x78>
 8012744:	4629      	mov	r1, r5
 8012746:	4630      	mov	r0, r6
 8012748:	f7fe fae2 	bl	8010d10 <__swsetup_r>
 801274c:	b1c0      	cbz	r0, 8012780 <_vfiprintf_r+0x78>
 801274e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012750:	07dc      	lsls	r4, r3, #31
 8012752:	d50e      	bpl.n	8012772 <_vfiprintf_r+0x6a>
 8012754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012758:	b01d      	add	sp, #116	; 0x74
 801275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275e:	4b7b      	ldr	r3, [pc, #492]	; (801294c <_vfiprintf_r+0x244>)
 8012760:	429d      	cmp	r5, r3
 8012762:	d101      	bne.n	8012768 <_vfiprintf_r+0x60>
 8012764:	68b5      	ldr	r5, [r6, #8]
 8012766:	e7df      	b.n	8012728 <_vfiprintf_r+0x20>
 8012768:	4b79      	ldr	r3, [pc, #484]	; (8012950 <_vfiprintf_r+0x248>)
 801276a:	429d      	cmp	r5, r3
 801276c:	bf08      	it	eq
 801276e:	68f5      	ldreq	r5, [r6, #12]
 8012770:	e7da      	b.n	8012728 <_vfiprintf_r+0x20>
 8012772:	89ab      	ldrh	r3, [r5, #12]
 8012774:	0598      	lsls	r0, r3, #22
 8012776:	d4ed      	bmi.n	8012754 <_vfiprintf_r+0x4c>
 8012778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801277a:	f7ff fb9d 	bl	8011eb8 <__retarget_lock_release_recursive>
 801277e:	e7e9      	b.n	8012754 <_vfiprintf_r+0x4c>
 8012780:	2300      	movs	r3, #0
 8012782:	9309      	str	r3, [sp, #36]	; 0x24
 8012784:	2320      	movs	r3, #32
 8012786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801278a:	f8cd 800c 	str.w	r8, [sp, #12]
 801278e:	2330      	movs	r3, #48	; 0x30
 8012790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012954 <_vfiprintf_r+0x24c>
 8012794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012798:	f04f 0901 	mov.w	r9, #1
 801279c:	4623      	mov	r3, r4
 801279e:	469a      	mov	sl, r3
 80127a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a4:	b10a      	cbz	r2, 80127aa <_vfiprintf_r+0xa2>
 80127a6:	2a25      	cmp	r2, #37	; 0x25
 80127a8:	d1f9      	bne.n	801279e <_vfiprintf_r+0x96>
 80127aa:	ebba 0b04 	subs.w	fp, sl, r4
 80127ae:	d00b      	beq.n	80127c8 <_vfiprintf_r+0xc0>
 80127b0:	465b      	mov	r3, fp
 80127b2:	4622      	mov	r2, r4
 80127b4:	4629      	mov	r1, r5
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ff ff94 	bl	80126e4 <__sfputs_r>
 80127bc:	3001      	adds	r0, #1
 80127be:	f000 80aa 	beq.w	8012916 <_vfiprintf_r+0x20e>
 80127c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127c4:	445a      	add	r2, fp
 80127c6:	9209      	str	r2, [sp, #36]	; 0x24
 80127c8:	f89a 3000 	ldrb.w	r3, [sl]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 80a2 	beq.w	8012916 <_vfiprintf_r+0x20e>
 80127d2:	2300      	movs	r3, #0
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127dc:	f10a 0a01 	add.w	sl, sl, #1
 80127e0:	9304      	str	r3, [sp, #16]
 80127e2:	9307      	str	r3, [sp, #28]
 80127e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127e8:	931a      	str	r3, [sp, #104]	; 0x68
 80127ea:	4654      	mov	r4, sl
 80127ec:	2205      	movs	r2, #5
 80127ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f2:	4858      	ldr	r0, [pc, #352]	; (8012954 <_vfiprintf_r+0x24c>)
 80127f4:	f7ed fd14 	bl	8000220 <memchr>
 80127f8:	9a04      	ldr	r2, [sp, #16]
 80127fa:	b9d8      	cbnz	r0, 8012834 <_vfiprintf_r+0x12c>
 80127fc:	06d1      	lsls	r1, r2, #27
 80127fe:	bf44      	itt	mi
 8012800:	2320      	movmi	r3, #32
 8012802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012806:	0713      	lsls	r3, r2, #28
 8012808:	bf44      	itt	mi
 801280a:	232b      	movmi	r3, #43	; 0x2b
 801280c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012810:	f89a 3000 	ldrb.w	r3, [sl]
 8012814:	2b2a      	cmp	r3, #42	; 0x2a
 8012816:	d015      	beq.n	8012844 <_vfiprintf_r+0x13c>
 8012818:	9a07      	ldr	r2, [sp, #28]
 801281a:	4654      	mov	r4, sl
 801281c:	2000      	movs	r0, #0
 801281e:	f04f 0c0a 	mov.w	ip, #10
 8012822:	4621      	mov	r1, r4
 8012824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012828:	3b30      	subs	r3, #48	; 0x30
 801282a:	2b09      	cmp	r3, #9
 801282c:	d94e      	bls.n	80128cc <_vfiprintf_r+0x1c4>
 801282e:	b1b0      	cbz	r0, 801285e <_vfiprintf_r+0x156>
 8012830:	9207      	str	r2, [sp, #28]
 8012832:	e014      	b.n	801285e <_vfiprintf_r+0x156>
 8012834:	eba0 0308 	sub.w	r3, r0, r8
 8012838:	fa09 f303 	lsl.w	r3, r9, r3
 801283c:	4313      	orrs	r3, r2
 801283e:	9304      	str	r3, [sp, #16]
 8012840:	46a2      	mov	sl, r4
 8012842:	e7d2      	b.n	80127ea <_vfiprintf_r+0xe2>
 8012844:	9b03      	ldr	r3, [sp, #12]
 8012846:	1d19      	adds	r1, r3, #4
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	9103      	str	r1, [sp, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	bfbb      	ittet	lt
 8012850:	425b      	neglt	r3, r3
 8012852:	f042 0202 	orrlt.w	r2, r2, #2
 8012856:	9307      	strge	r3, [sp, #28]
 8012858:	9307      	strlt	r3, [sp, #28]
 801285a:	bfb8      	it	lt
 801285c:	9204      	strlt	r2, [sp, #16]
 801285e:	7823      	ldrb	r3, [r4, #0]
 8012860:	2b2e      	cmp	r3, #46	; 0x2e
 8012862:	d10c      	bne.n	801287e <_vfiprintf_r+0x176>
 8012864:	7863      	ldrb	r3, [r4, #1]
 8012866:	2b2a      	cmp	r3, #42	; 0x2a
 8012868:	d135      	bne.n	80128d6 <_vfiprintf_r+0x1ce>
 801286a:	9b03      	ldr	r3, [sp, #12]
 801286c:	1d1a      	adds	r2, r3, #4
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	9203      	str	r2, [sp, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	bfb8      	it	lt
 8012876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801287a:	3402      	adds	r4, #2
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012964 <_vfiprintf_r+0x25c>
 8012882:	7821      	ldrb	r1, [r4, #0]
 8012884:	2203      	movs	r2, #3
 8012886:	4650      	mov	r0, sl
 8012888:	f7ed fcca 	bl	8000220 <memchr>
 801288c:	b140      	cbz	r0, 80128a0 <_vfiprintf_r+0x198>
 801288e:	2340      	movs	r3, #64	; 0x40
 8012890:	eba0 000a 	sub.w	r0, r0, sl
 8012894:	fa03 f000 	lsl.w	r0, r3, r0
 8012898:	9b04      	ldr	r3, [sp, #16]
 801289a:	4303      	orrs	r3, r0
 801289c:	3401      	adds	r4, #1
 801289e:	9304      	str	r3, [sp, #16]
 80128a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128a4:	482c      	ldr	r0, [pc, #176]	; (8012958 <_vfiprintf_r+0x250>)
 80128a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128aa:	2206      	movs	r2, #6
 80128ac:	f7ed fcb8 	bl	8000220 <memchr>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d03f      	beq.n	8012934 <_vfiprintf_r+0x22c>
 80128b4:	4b29      	ldr	r3, [pc, #164]	; (801295c <_vfiprintf_r+0x254>)
 80128b6:	bb1b      	cbnz	r3, 8012900 <_vfiprintf_r+0x1f8>
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	3307      	adds	r3, #7
 80128bc:	f023 0307 	bic.w	r3, r3, #7
 80128c0:	3308      	adds	r3, #8
 80128c2:	9303      	str	r3, [sp, #12]
 80128c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c6:	443b      	add	r3, r7
 80128c8:	9309      	str	r3, [sp, #36]	; 0x24
 80128ca:	e767      	b.n	801279c <_vfiprintf_r+0x94>
 80128cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80128d0:	460c      	mov	r4, r1
 80128d2:	2001      	movs	r0, #1
 80128d4:	e7a5      	b.n	8012822 <_vfiprintf_r+0x11a>
 80128d6:	2300      	movs	r3, #0
 80128d8:	3401      	adds	r4, #1
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	4619      	mov	r1, r3
 80128de:	f04f 0c0a 	mov.w	ip, #10
 80128e2:	4620      	mov	r0, r4
 80128e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e8:	3a30      	subs	r2, #48	; 0x30
 80128ea:	2a09      	cmp	r2, #9
 80128ec:	d903      	bls.n	80128f6 <_vfiprintf_r+0x1ee>
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0c5      	beq.n	801287e <_vfiprintf_r+0x176>
 80128f2:	9105      	str	r1, [sp, #20]
 80128f4:	e7c3      	b.n	801287e <_vfiprintf_r+0x176>
 80128f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80128fa:	4604      	mov	r4, r0
 80128fc:	2301      	movs	r3, #1
 80128fe:	e7f0      	b.n	80128e2 <_vfiprintf_r+0x1da>
 8012900:	ab03      	add	r3, sp, #12
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	462a      	mov	r2, r5
 8012906:	4b16      	ldr	r3, [pc, #88]	; (8012960 <_vfiprintf_r+0x258>)
 8012908:	a904      	add	r1, sp, #16
 801290a:	4630      	mov	r0, r6
 801290c:	f7fd fd30 	bl	8010370 <_printf_float>
 8012910:	4607      	mov	r7, r0
 8012912:	1c78      	adds	r0, r7, #1
 8012914:	d1d6      	bne.n	80128c4 <_vfiprintf_r+0x1bc>
 8012916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012918:	07d9      	lsls	r1, r3, #31
 801291a:	d405      	bmi.n	8012928 <_vfiprintf_r+0x220>
 801291c:	89ab      	ldrh	r3, [r5, #12]
 801291e:	059a      	lsls	r2, r3, #22
 8012920:	d402      	bmi.n	8012928 <_vfiprintf_r+0x220>
 8012922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012924:	f7ff fac8 	bl	8011eb8 <__retarget_lock_release_recursive>
 8012928:	89ab      	ldrh	r3, [r5, #12]
 801292a:	065b      	lsls	r3, r3, #25
 801292c:	f53f af12 	bmi.w	8012754 <_vfiprintf_r+0x4c>
 8012930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012932:	e711      	b.n	8012758 <_vfiprintf_r+0x50>
 8012934:	ab03      	add	r3, sp, #12
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	462a      	mov	r2, r5
 801293a:	4b09      	ldr	r3, [pc, #36]	; (8012960 <_vfiprintf_r+0x258>)
 801293c:	a904      	add	r1, sp, #16
 801293e:	4630      	mov	r0, r6
 8012940:	f7fd ffba 	bl	80108b8 <_printf_i>
 8012944:	e7e4      	b.n	8012910 <_vfiprintf_r+0x208>
 8012946:	bf00      	nop
 8012948:	080179f4 	.word	0x080179f4
 801294c:	08017a14 	.word	0x08017a14
 8012950:	080179d4 	.word	0x080179d4
 8012954:	08017b94 	.word	0x08017b94
 8012958:	08017b9e 	.word	0x08017b9e
 801295c:	08010371 	.word	0x08010371
 8012960:	080126e5 	.word	0x080126e5
 8012964:	08017b9a 	.word	0x08017b9a

08012968 <_putc_r>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	460d      	mov	r5, r1
 801296c:	4614      	mov	r4, r2
 801296e:	4606      	mov	r6, r0
 8012970:	b118      	cbz	r0, 801297a <_putc_r+0x12>
 8012972:	6983      	ldr	r3, [r0, #24]
 8012974:	b90b      	cbnz	r3, 801297a <_putc_r+0x12>
 8012976:	f7ff f9e9 	bl	8011d4c <__sinit>
 801297a:	4b1c      	ldr	r3, [pc, #112]	; (80129ec <_putc_r+0x84>)
 801297c:	429c      	cmp	r4, r3
 801297e:	d124      	bne.n	80129ca <_putc_r+0x62>
 8012980:	6874      	ldr	r4, [r6, #4]
 8012982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012984:	07d8      	lsls	r0, r3, #31
 8012986:	d405      	bmi.n	8012994 <_putc_r+0x2c>
 8012988:	89a3      	ldrh	r3, [r4, #12]
 801298a:	0599      	lsls	r1, r3, #22
 801298c:	d402      	bmi.n	8012994 <_putc_r+0x2c>
 801298e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012990:	f7ff fa91 	bl	8011eb6 <__retarget_lock_acquire_recursive>
 8012994:	68a3      	ldr	r3, [r4, #8]
 8012996:	3b01      	subs	r3, #1
 8012998:	2b00      	cmp	r3, #0
 801299a:	60a3      	str	r3, [r4, #8]
 801299c:	da05      	bge.n	80129aa <_putc_r+0x42>
 801299e:	69a2      	ldr	r2, [r4, #24]
 80129a0:	4293      	cmp	r3, r2
 80129a2:	db1c      	blt.n	80129de <_putc_r+0x76>
 80129a4:	b2eb      	uxtb	r3, r5
 80129a6:	2b0a      	cmp	r3, #10
 80129a8:	d019      	beq.n	80129de <_putc_r+0x76>
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	1c5a      	adds	r2, r3, #1
 80129ae:	6022      	str	r2, [r4, #0]
 80129b0:	701d      	strb	r5, [r3, #0]
 80129b2:	b2ed      	uxtb	r5, r5
 80129b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129b6:	07da      	lsls	r2, r3, #31
 80129b8:	d405      	bmi.n	80129c6 <_putc_r+0x5e>
 80129ba:	89a3      	ldrh	r3, [r4, #12]
 80129bc:	059b      	lsls	r3, r3, #22
 80129be:	d402      	bmi.n	80129c6 <_putc_r+0x5e>
 80129c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129c2:	f7ff fa79 	bl	8011eb8 <__retarget_lock_release_recursive>
 80129c6:	4628      	mov	r0, r5
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	4b09      	ldr	r3, [pc, #36]	; (80129f0 <_putc_r+0x88>)
 80129cc:	429c      	cmp	r4, r3
 80129ce:	d101      	bne.n	80129d4 <_putc_r+0x6c>
 80129d0:	68b4      	ldr	r4, [r6, #8]
 80129d2:	e7d6      	b.n	8012982 <_putc_r+0x1a>
 80129d4:	4b07      	ldr	r3, [pc, #28]	; (80129f4 <_putc_r+0x8c>)
 80129d6:	429c      	cmp	r4, r3
 80129d8:	bf08      	it	eq
 80129da:	68f4      	ldreq	r4, [r6, #12]
 80129dc:	e7d1      	b.n	8012982 <_putc_r+0x1a>
 80129de:	4629      	mov	r1, r5
 80129e0:	4622      	mov	r2, r4
 80129e2:	4630      	mov	r0, r6
 80129e4:	f7fe f942 	bl	8010c6c <__swbuf_r>
 80129e8:	4605      	mov	r5, r0
 80129ea:	e7e3      	b.n	80129b4 <_putc_r+0x4c>
 80129ec:	080179f4 	.word	0x080179f4
 80129f0:	08017a14 	.word	0x08017a14
 80129f4:	080179d4 	.word	0x080179d4

080129f8 <__sread>:
 80129f8:	b510      	push	{r4, lr}
 80129fa:	460c      	mov	r4, r1
 80129fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a00:	f000 f8ae 	bl	8012b60 <_read_r>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	bfab      	itete	ge
 8012a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8012a0c:	181b      	addge	r3, r3, r0
 8012a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a12:	bfac      	ite	ge
 8012a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a16:	81a3      	strhlt	r3, [r4, #12]
 8012a18:	bd10      	pop	{r4, pc}

08012a1a <__swrite>:
 8012a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1e:	461f      	mov	r7, r3
 8012a20:	898b      	ldrh	r3, [r1, #12]
 8012a22:	05db      	lsls	r3, r3, #23
 8012a24:	4605      	mov	r5, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	4616      	mov	r6, r2
 8012a2a:	d505      	bpl.n	8012a38 <__swrite+0x1e>
 8012a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a30:	2302      	movs	r3, #2
 8012a32:	2200      	movs	r2, #0
 8012a34:	f000 f870 	bl	8012b18 <_lseek_r>
 8012a38:	89a3      	ldrh	r3, [r4, #12]
 8012a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a42:	81a3      	strh	r3, [r4, #12]
 8012a44:	4632      	mov	r2, r6
 8012a46:	463b      	mov	r3, r7
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4e:	f000 b817 	b.w	8012a80 <_write_r>

08012a52 <__sseek>:
 8012a52:	b510      	push	{r4, lr}
 8012a54:	460c      	mov	r4, r1
 8012a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a5a:	f000 f85d 	bl	8012b18 <_lseek_r>
 8012a5e:	1c43      	adds	r3, r0, #1
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	bf15      	itete	ne
 8012a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a6e:	81a3      	strheq	r3, [r4, #12]
 8012a70:	bf18      	it	ne
 8012a72:	81a3      	strhne	r3, [r4, #12]
 8012a74:	bd10      	pop	{r4, pc}

08012a76 <__sclose>:
 8012a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a7a:	f000 b81b 	b.w	8012ab4 <_close_r>
	...

08012a80 <_write_r>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	4d07      	ldr	r5, [pc, #28]	; (8012aa0 <_write_r+0x20>)
 8012a84:	4604      	mov	r4, r0
 8012a86:	4608      	mov	r0, r1
 8012a88:	4611      	mov	r1, r2
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	602a      	str	r2, [r5, #0]
 8012a8e:	461a      	mov	r2, r3
 8012a90:	f7f0 ff7f 	bl	8003992 <_write>
 8012a94:	1c43      	adds	r3, r0, #1
 8012a96:	d102      	bne.n	8012a9e <_write_r+0x1e>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	b103      	cbz	r3, 8012a9e <_write_r+0x1e>
 8012a9c:	6023      	str	r3, [r4, #0]
 8012a9e:	bd38      	pop	{r3, r4, r5, pc}
 8012aa0:	20040fd8 	.word	0x20040fd8

08012aa4 <abort>:
 8012aa4:	b508      	push	{r3, lr}
 8012aa6:	2006      	movs	r0, #6
 8012aa8:	f000 f894 	bl	8012bd4 <raise>
 8012aac:	2001      	movs	r0, #1
 8012aae:	f7f0 ff49 	bl	8003944 <_exit>
	...

08012ab4 <_close_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	4d06      	ldr	r5, [pc, #24]	; (8012ad0 <_close_r+0x1c>)
 8012ab8:	2300      	movs	r3, #0
 8012aba:	4604      	mov	r4, r0
 8012abc:	4608      	mov	r0, r1
 8012abe:	602b      	str	r3, [r5, #0]
 8012ac0:	f7f0 ff83 	bl	80039ca <_close>
 8012ac4:	1c43      	adds	r3, r0, #1
 8012ac6:	d102      	bne.n	8012ace <_close_r+0x1a>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	b103      	cbz	r3, 8012ace <_close_r+0x1a>
 8012acc:	6023      	str	r3, [r4, #0]
 8012ace:	bd38      	pop	{r3, r4, r5, pc}
 8012ad0:	20040fd8 	.word	0x20040fd8

08012ad4 <_fstat_r>:
 8012ad4:	b538      	push	{r3, r4, r5, lr}
 8012ad6:	4d07      	ldr	r5, [pc, #28]	; (8012af4 <_fstat_r+0x20>)
 8012ad8:	2300      	movs	r3, #0
 8012ada:	4604      	mov	r4, r0
 8012adc:	4608      	mov	r0, r1
 8012ade:	4611      	mov	r1, r2
 8012ae0:	602b      	str	r3, [r5, #0]
 8012ae2:	f7f0 ff7e 	bl	80039e2 <_fstat>
 8012ae6:	1c43      	adds	r3, r0, #1
 8012ae8:	d102      	bne.n	8012af0 <_fstat_r+0x1c>
 8012aea:	682b      	ldr	r3, [r5, #0]
 8012aec:	b103      	cbz	r3, 8012af0 <_fstat_r+0x1c>
 8012aee:	6023      	str	r3, [r4, #0]
 8012af0:	bd38      	pop	{r3, r4, r5, pc}
 8012af2:	bf00      	nop
 8012af4:	20040fd8 	.word	0x20040fd8

08012af8 <_isatty_r>:
 8012af8:	b538      	push	{r3, r4, r5, lr}
 8012afa:	4d06      	ldr	r5, [pc, #24]	; (8012b14 <_isatty_r+0x1c>)
 8012afc:	2300      	movs	r3, #0
 8012afe:	4604      	mov	r4, r0
 8012b00:	4608      	mov	r0, r1
 8012b02:	602b      	str	r3, [r5, #0]
 8012b04:	f7f0 ff7d 	bl	8003a02 <_isatty>
 8012b08:	1c43      	adds	r3, r0, #1
 8012b0a:	d102      	bne.n	8012b12 <_isatty_r+0x1a>
 8012b0c:	682b      	ldr	r3, [r5, #0]
 8012b0e:	b103      	cbz	r3, 8012b12 <_isatty_r+0x1a>
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	bd38      	pop	{r3, r4, r5, pc}
 8012b14:	20040fd8 	.word	0x20040fd8

08012b18 <_lseek_r>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4d07      	ldr	r5, [pc, #28]	; (8012b38 <_lseek_r+0x20>)
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	4608      	mov	r0, r1
 8012b20:	4611      	mov	r1, r2
 8012b22:	2200      	movs	r2, #0
 8012b24:	602a      	str	r2, [r5, #0]
 8012b26:	461a      	mov	r2, r3
 8012b28:	f7f0 ff76 	bl	8003a18 <_lseek>
 8012b2c:	1c43      	adds	r3, r0, #1
 8012b2e:	d102      	bne.n	8012b36 <_lseek_r+0x1e>
 8012b30:	682b      	ldr	r3, [r5, #0]
 8012b32:	b103      	cbz	r3, 8012b36 <_lseek_r+0x1e>
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	20040fd8 	.word	0x20040fd8

08012b3c <__ascii_mbtowc>:
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	b901      	cbnz	r1, 8012b42 <__ascii_mbtowc+0x6>
 8012b40:	a901      	add	r1, sp, #4
 8012b42:	b142      	cbz	r2, 8012b56 <__ascii_mbtowc+0x1a>
 8012b44:	b14b      	cbz	r3, 8012b5a <__ascii_mbtowc+0x1e>
 8012b46:	7813      	ldrb	r3, [r2, #0]
 8012b48:	600b      	str	r3, [r1, #0]
 8012b4a:	7812      	ldrb	r2, [r2, #0]
 8012b4c:	1e10      	subs	r0, r2, #0
 8012b4e:	bf18      	it	ne
 8012b50:	2001      	movne	r0, #1
 8012b52:	b002      	add	sp, #8
 8012b54:	4770      	bx	lr
 8012b56:	4610      	mov	r0, r2
 8012b58:	e7fb      	b.n	8012b52 <__ascii_mbtowc+0x16>
 8012b5a:	f06f 0001 	mvn.w	r0, #1
 8012b5e:	e7f8      	b.n	8012b52 <__ascii_mbtowc+0x16>

08012b60 <_read_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	; (8012b80 <_read_r+0x20>)
 8012b64:	4604      	mov	r4, r0
 8012b66:	4608      	mov	r0, r1
 8012b68:	4611      	mov	r1, r2
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	602a      	str	r2, [r5, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f7f0 fef2 	bl	8003958 <_read>
 8012b74:	1c43      	adds	r3, r0, #1
 8012b76:	d102      	bne.n	8012b7e <_read_r+0x1e>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	b103      	cbz	r3, 8012b7e <_read_r+0x1e>
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	20040fd8 	.word	0x20040fd8

08012b84 <_raise_r>:
 8012b84:	291f      	cmp	r1, #31
 8012b86:	b538      	push	{r3, r4, r5, lr}
 8012b88:	4604      	mov	r4, r0
 8012b8a:	460d      	mov	r5, r1
 8012b8c:	d904      	bls.n	8012b98 <_raise_r+0x14>
 8012b8e:	2316      	movs	r3, #22
 8012b90:	6003      	str	r3, [r0, #0]
 8012b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b96:	bd38      	pop	{r3, r4, r5, pc}
 8012b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b9a:	b112      	cbz	r2, 8012ba2 <_raise_r+0x1e>
 8012b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ba0:	b94b      	cbnz	r3, 8012bb6 <_raise_r+0x32>
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f000 f830 	bl	8012c08 <_getpid_r>
 8012ba8:	462a      	mov	r2, r5
 8012baa:	4601      	mov	r1, r0
 8012bac:	4620      	mov	r0, r4
 8012bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bb2:	f000 b817 	b.w	8012be4 <_kill_r>
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d00a      	beq.n	8012bd0 <_raise_r+0x4c>
 8012bba:	1c59      	adds	r1, r3, #1
 8012bbc:	d103      	bne.n	8012bc6 <_raise_r+0x42>
 8012bbe:	2316      	movs	r3, #22
 8012bc0:	6003      	str	r3, [r0, #0]
 8012bc2:	2001      	movs	r0, #1
 8012bc4:	e7e7      	b.n	8012b96 <_raise_r+0x12>
 8012bc6:	2400      	movs	r4, #0
 8012bc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012bcc:	4628      	mov	r0, r5
 8012bce:	4798      	blx	r3
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	e7e0      	b.n	8012b96 <_raise_r+0x12>

08012bd4 <raise>:
 8012bd4:	4b02      	ldr	r3, [pc, #8]	; (8012be0 <raise+0xc>)
 8012bd6:	4601      	mov	r1, r0
 8012bd8:	6818      	ldr	r0, [r3, #0]
 8012bda:	f7ff bfd3 	b.w	8012b84 <_raise_r>
 8012bde:	bf00      	nop
 8012be0:	20000018 	.word	0x20000018

08012be4 <_kill_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d07      	ldr	r5, [pc, #28]	; (8012c04 <_kill_r+0x20>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	4611      	mov	r1, r2
 8012bf0:	602b      	str	r3, [r5, #0]
 8012bf2:	f7f0 fe97 	bl	8003924 <_kill>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	d102      	bne.n	8012c00 <_kill_r+0x1c>
 8012bfa:	682b      	ldr	r3, [r5, #0]
 8012bfc:	b103      	cbz	r3, 8012c00 <_kill_r+0x1c>
 8012bfe:	6023      	str	r3, [r4, #0]
 8012c00:	bd38      	pop	{r3, r4, r5, pc}
 8012c02:	bf00      	nop
 8012c04:	20040fd8 	.word	0x20040fd8

08012c08 <_getpid_r>:
 8012c08:	f7f0 be84 	b.w	8003914 <_getpid>

08012c0c <__ascii_wctomb>:
 8012c0c:	b149      	cbz	r1, 8012c22 <__ascii_wctomb+0x16>
 8012c0e:	2aff      	cmp	r2, #255	; 0xff
 8012c10:	bf85      	ittet	hi
 8012c12:	238a      	movhi	r3, #138	; 0x8a
 8012c14:	6003      	strhi	r3, [r0, #0]
 8012c16:	700a      	strbls	r2, [r1, #0]
 8012c18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012c1c:	bf98      	it	ls
 8012c1e:	2001      	movls	r0, #1
 8012c20:	4770      	bx	lr
 8012c22:	4608      	mov	r0, r1
 8012c24:	4770      	bx	lr
	...

08012c28 <_init>:
 8012c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2a:	bf00      	nop
 8012c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c2e:	bc08      	pop	{r3}
 8012c30:	469e      	mov	lr, r3
 8012c32:	4770      	bx	lr

08012c34 <_fini>:
 8012c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c36:	bf00      	nop
 8012c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c3a:	bc08      	pop	{r3}
 8012c3c:	469e      	mov	lr, r3
 8012c3e:	4770      	bx	lr
