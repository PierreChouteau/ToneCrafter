
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005058  080141a8  080141a8  000241a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019200  08019200  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08019200  08019200  00029200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019208  08019208  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019208  08019208  00029208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801920c  0801920c  0002920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08019210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000411cc  200001e8  080193f8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200413b4  080193f8  000313b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041886  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008362  00000000  00000000  00071a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f60  00000000  00000000  00079e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bd8  00000000  00000000  0007cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f2ba  00000000  00000000  0007f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003dc8c  00000000  00000000  0008ebf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c2a9  00000000  00000000  000cc87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f8b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d7c4  00000000  00000000  001f8b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014190 	.word	0x08014190

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08014190 	.word	0x08014190

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f02:	f3bf 8f6f 	isb	sy
}
 8000f06:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
}
 8000f14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f16:	f3bf 8f6f 	isb	sy
}
 8000f1a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <SCB_EnableICache+0x48>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f2e:	f3bf 8f6f 	isb	sy
}
 8000f32:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000f48:	f3bf 8f4f 	dsb	sy
}
 8000f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4e:	f3bf 8f6f 	isb	sy
}
 8000f52:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <SCB_InvalidateICache+0x30>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5c:	f3bf 8f4f 	dsb	sy
}
 8000f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f62:	f3bf 8f6f 	isb	sy
}
 8000f66:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f86:	f3bf 8f4f 	dsb	sy
}
 8000f8a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f92:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0b5b      	lsrs	r3, r3, #13
 8000f98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fa6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fb0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb6:	4911      	ldr	r1, [pc, #68]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1ef      	bne.n	8000fa8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	60fa      	str	r2, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e5      	bne.n	8000f9e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd2:	f3bf 8f4f 	dsb	sy
}
 8000fd6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SCB_EnableDCache+0x84>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
}
 8000fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fea:	f3bf 8f6f 	isb	sy
}
 8000fee:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800100e:	f3bf 8f4f 	dsb	sy
}
 8001012:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	0b5b      	lsrs	r3, r3, #13
 8001020:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001024:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800102e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001038:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <SCB_InvalidateDCache+0x74>)
 8001040:	4313      	orrs	r3, r2
 8001042:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ef      	bne.n	8001030 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	60fa      	str	r2, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1e5      	bne.n	8001026 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800105a:	f3bf 8f4f 	dsb	sy
}
 800105e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001060:	f3bf 8f6f 	isb	sy
}
 8001064:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	f5ad 6db3 	sub.w	sp, sp, #1432	; 0x598
 800107e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001080:	f7ff ffbe 	bl	8001000 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001084:	f7ff ff5e 	bl	8000f44 <SCB_InvalidateICache>

	/*Code Projet 7 Janvier*/
	char buf[50];
	int buf_len = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	float y_val;
	float test = 0.0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001096:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 800109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a2:	4a49      	ldr	r2, [pc, #292]	; (80011c8 <main+0x150>)
 80010a4:	461c      	mov	r4, r3
 80010a6:	4615      	mov	r5, r2
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b0:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <main+0x154>)
 80010ba:	461c      	mov	r4, r3
 80010bc:	4615      	mov	r5, r2
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c6:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 80010ca:	463b      	mov	r3, r7
 80010cc:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <main+0x158>)
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	463b      	mov	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	809a      	strh	r2, [r3, #4]
 80010d6:	463b      	mov	r3, r7
 80010d8:	2201      	movs	r2, #1
 80010da:	80da      	strh	r2, [r3, #6]
 80010dc:	463b      	mov	r3, r7
 80010de:	2201      	movs	r2, #1
 80010e0:	811a      	strh	r2, [r3, #8]
 80010e2:	463b      	mov	r3, r7
 80010e4:	f243 02e4 	movw	r2, #12516	; 0x30e4
 80010e8:	60da      	str	r2, [r3, #12]
	AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 80010ea:	f010 facd 	bl	8011688 <ai_tonecrafter_data_weights_get>
 80010ee:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 80010f0:	463b      	mov	r3, r7
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	463b      	mov	r3, r7
 80010fc:	4a35      	ldr	r2, [pc, #212]	; (80011d4 <main+0x15c>)
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	463b      	mov	r3, r7
 8001102:	2201      	movs	r2, #1
 8001104:	839a      	strh	r2, [r3, #28]
 8001106:	463b      	mov	r3, r7
 8001108:	2201      	movs	r2, #1
 800110a:	83da      	strh	r2, [r3, #30]
 800110c:	463b      	mov	r3, r7
 800110e:	2201      	movs	r2, #1
 8001110:	841a      	strh	r2, [r3, #32]
 8001112:	463b      	mov	r3, r7
 8001114:	f44f 7244 	mov.w	r2, #784	; 0x310
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
 800111a:	463b      	mov	r3, r7
 800111c:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001128:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112c:	2201      	movs	r2, #1
 800112e:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001134:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001138:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 800113a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113e:	2201      	movs	r2, #1
 8001140:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001146:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800114a:	611a      	str	r2, [r3, #16]

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800114c:	f7ff fed4 	bl	8000ef8 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8001150:	f7ff ff12 	bl	8000f78 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001154:	f002 ffc3 	bl	80040de <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001158:	f000 f83e 	bl	80011d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800115c:	f001 f89c 	bl	8002298 <MX_GPIO_Init>
	MX_DMA_Init();
 8001160:	f000 ffd8 	bl	8002114 <MX_DMA_Init>
	MX_ADC3_Init();
 8001164:	f000 f8f8 	bl	8001358 <MX_ADC3_Init>
	MX_CRC_Init();
 8001168:	f000 f948 	bl	80013fc <MX_CRC_Init>
	MX_DCMI_Init();
 800116c:	f000 f968 	bl	8001440 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001170:	f000 f99a 	bl	80014a8 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001174:	f001 f83c 	bl	80021f0 <MX_FMC_Init>
	MX_I2C1_Init();
 8001178:	f000 f9c8 	bl	800150c <MX_I2C1_Init>
	MX_I2C3_Init();
 800117c:	f000 fa06 	bl	800158c <MX_I2C3_Init>
	MX_LTDC_Init();
 8001180:	f000 fa44 	bl	800160c <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001184:	f000 fac6 	bl	8001714 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001188:	f000 fb06 	bl	8001798 <MX_RTC_Init>
	MX_SAI2_Init();
 800118c:	f000 fbaa 	bl	80018e4 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001190:	f000 fc64 	bl	8001a5c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8001194:	f000 fc82 	bl	8001a9c <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8001198:	f000 fcb0 	bl	8001afc <MX_TIM1_Init>
	MX_TIM2_Init();
 800119c:	f000 fd5a 	bl	8001c54 <MX_TIM2_Init>
	MX_TIM3_Init();
 80011a0:	f000 fdce 	bl	8001d40 <MX_TIM3_Init>
	MX_TIM5_Init();
 80011a4:	f000 fe44 	bl	8001e30 <MX_TIM5_Init>
	MX_TIM8_Init();
 80011a8:	f000 feba 	bl	8001f20 <MX_TIM8_Init>
	MX_TIM12_Init();
 80011ac:	f000 ff0c 	bl	8001fc8 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80011b0:	f000 ff50 	bl	8002054 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80011b4:	f000 ff7e 	bl	80020b4 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80011b8:	f00e fa8c 	bl	800f6d4 <MX_FATFS_Init>
	// MX_LIBJPEG_Init();

	/* USER CODE BEGIN 2 */

	MPU_Init();
 80011bc:	f002 feee 	bl	8003f9c <MPU_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80011c0:	f010 f8ae 	bl	8011320 <MX_USB_HOST_Process>
 80011c4:	e7fc      	b.n	80011c0 <main+0x148>
 80011c6:	bf00      	nop
 80011c8:	080141a8 	.word	0x080141a8
 80011cc:	080141c0 	.word	0x080141c0
 80011d0:	40040440 	.word	0x40040440
 80011d4:	00040440 	.word	0x00040440

080011d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0b4      	sub	sp, #208	; 0xd0
 80011dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f010 fa98 	bl	801171c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2284      	movs	r2, #132	; 0x84
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f010 fa89 	bl	801171c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800120a:	f006 fe4b 	bl	8007ea4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <SystemClock_Config+0x174>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a4e      	ldr	r2, [pc, #312]	; (800134c <SystemClock_Config+0x174>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b4c      	ldr	r3, [pc, #304]	; (800134c <SystemClock_Config+0x174>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <SystemClock_Config+0x178>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a49      	ldr	r2, [pc, #292]	; (8001350 <SystemClock_Config+0x178>)
 800122c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <SystemClock_Config+0x178>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800123e:	2309      	movs	r3, #9
 8001240:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001260:	2319      	movs	r3, #25
 8001262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001266:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800126a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001274:	2309      	movs	r3, #9
 8001276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fe34 	bl	8008eec <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800128a:	f001 fa43 	bl	8002714 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800128e:	f006 fe19 	bl	8007ec4 <HAL_PWREx_EnableOverDrive>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001298:	f001 fa3c 	bl	8002714 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012c2:	2106      	movs	r1, #6
 80012c4:	4618      	mov	r0, r3
 80012c6:	f008 f8b5 	bl	8009434 <HAL_RCC_ClockConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 80012d0:	f001 fa20 	bl	8002714 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0x17c>)
 80012d6:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012ec:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80012f2:	2308      	movs	r3, #8
 80012f4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012f6:	2303      	movs	r3, #3
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800130e:	2300      	movs	r3, #0
 8001310:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001312:	2300      	movs	r3, #0
 8001314:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001316:	2300      	movs	r3, #0
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4618      	mov	r0, r3
 8001336:	f008 fa85 	bl	8009844 <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001340:	f001 f9e8 	bl	8002714 <Error_Handler>
	}
}
 8001344:	bf00      	nop
 8001346:	37d0      	adds	r7, #208	; 0xd0
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000
 8001354:	01b14868 	.word	0x01b14868

08001358 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_ADC3_Init+0x98>)
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <MX_ADC3_Init+0x9c>)
 800136e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_ADC3_Init+0x98>)
 8001372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001376:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_ADC3_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_ADC3_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_ADC3_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_ADC3_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_ADC3_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_ADC3_Init+0x98>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <MX_ADC3_Init+0xa0>)
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013ba:	f002 fee1 	bl	8004180 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80013c4:	f001 f9a6 	bl	8002714 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_ADC3_Init+0x98>)
 80013da:	f002 ff15 	bl	8004208 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80013e4:	f001 f996 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000084c 	.word	0x2000084c
 80013f4:	40012200 	.word	0x40012200
 80013f8:	0f000001 	.word	0x0f000001

080013fc <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_CRC_Init+0x3c>)
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <MX_CRC_Init+0x40>)
 8001404:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_CRC_Init+0x3c>)
 8001408:	2200      	movs	r2, #0
 800140a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_CRC_Init+0x3c>)
 800140e:	2200      	movs	r2, #0
 8001410:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_CRC_Init+0x3c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_CRC_Init+0x3c>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_CRC_Init+0x3c>)
 8001420:	2201      	movs	r2, #1
 8001422:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_CRC_Init+0x3c>)
 8001426:	f003 fac3 	bl	80049b0 <HAL_CRC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001430:	f001 f970 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000600 	.word	0x20000600
 800143c:	40023000 	.word	0x40023000

08001440 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <MX_DCMI_Init+0x64>)
 8001448:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_DCMI_Init+0x60>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_DCMI_Init+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_DCMI_Init+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_DCMI_Init+0x60>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_DCMI_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_DCMI_Init+0x60>)
 800148e:	f003 fb79 	bl	8004b84 <HAL_DCMI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8001498:	f001 f93c 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000894 	.word	0x20000894
 80014a4:	50050000 	.word	0x50050000

080014a8 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_DMA2D_Init+0x60>)
 80014b0:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014de:	f004 f817 	bl	8005510 <HAL_DMA2D_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80014e8:	f001 f914 	bl	8002714 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014ec:	2101      	movs	r1, #1
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_DMA2D_Init+0x5c>)
 80014f0:	f004 f968 	bl	80057c4 <HAL_DMA2D_ConfigLayer>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80014fa:	f001 f90b 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000ab8 	.word	0x20000ab8
 8001508:	4002b000 	.word	0x4002b000

0800150c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_I2C1_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_I2C1_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_I2C1_Init+0x74>)
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <MX_I2C1_Init+0x7c>)
 800151a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_I2C1_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_I2C1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <MX_I2C1_Init+0x74>)
 8001548:	f006 f8a6 	bl	8007698 <HAL_I2C_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001552:	f001 f8df 	bl	8002714 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <MX_I2C1_Init+0x74>)
 800155a:	f006 f92d 	bl	80077b8 <HAL_I2CEx_ConfigAnalogFilter>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001564:	f001 f8d6 	bl	8002714 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_I2C1_Init+0x74>)
 800156c:	f006 f96f 	bl	800784e <HAL_I2CEx_ConfigDigitalFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001576:	f001 f8cd 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200005b4 	.word	0x200005b4
 8001584:	40005400 	.word	0x40005400
 8001588:	00c0eaff 	.word	0x00c0eaff

0800158c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_I2C3_Init+0x74>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <MX_I2C3_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_I2C3_Init+0x74>)
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <MX_I2C3_Init+0x7c>)
 800159a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_I2C3_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_I2C3_Init+0x74>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_I2C3_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_I2C3_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_I2C3_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_I2C3_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_I2C3_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <MX_I2C3_Init+0x74>)
 80015c8:	f006 f866 	bl	8007698 <HAL_I2C_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 80015d2:	f001 f89f 	bl	8002714 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d6:	2100      	movs	r1, #0
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <MX_I2C3_Init+0x74>)
 80015da:	f006 f8ed 	bl	80077b8 <HAL_I2CEx_ConfigAnalogFilter>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 80015e4:	f001 f896 	bl	8002714 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_I2C3_Init+0x74>)
 80015ec:	f006 f92f 	bl	800784e <HAL_I2CEx_ConfigDigitalFilter>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 80015f6:	f001 f88d 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000038c 	.word	0x2000038c
 8001604:	40005c00 	.word	0x40005c00
 8001608:	00c0eaff 	.word	0x00c0eaff

0800160c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	; 0x38
 8001610:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2234      	movs	r2, #52	; 0x34
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f010 f87f 	bl	801171c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <MX_LTDC_Init+0x100>)
 8001620:	4a3b      	ldr	r2, [pc, #236]	; (8001710 <MX_LTDC_Init+0x104>)
 8001622:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <MX_LTDC_Init+0x100>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <MX_LTDC_Init+0x100>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <MX_LTDC_Init+0x100>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <MX_LTDC_Init+0x100>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <MX_LTDC_Init+0x100>)
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <MX_LTDC_Init+0x100>)
 8001644:	2209      	movs	r2, #9
 8001646:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <MX_LTDC_Init+0x100>)
 800164a:	2235      	movs	r2, #53	; 0x35
 800164c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <MX_LTDC_Init+0x100>)
 8001650:	220b      	movs	r2, #11
 8001652:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <MX_LTDC_Init+0x100>)
 8001656:	f240 2215 	movw	r2, #533	; 0x215
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <MX_LTDC_Init+0x100>)
 800165e:	f240 121b 	movw	r2, #283	; 0x11b
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <MX_LTDC_Init+0x100>)
 8001666:	f240 2235 	movw	r2, #565	; 0x235
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <MX_LTDC_Init+0x100>)
 800166e:	f240 121d 	movw	r2, #285	; 0x11d
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_LTDC_Init+0x100>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_LTDC_Init+0x100>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_LTDC_Init+0x100>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800168c:	481f      	ldr	r0, [pc, #124]	; (800170c <MX_LTDC_Init+0x100>)
 800168e:	f006 f92b 	bl	80078e8 <HAL_LTDC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001698:	f001 f83c 	bl	8002714 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80016a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016a4:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80016aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016ae:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016b0:	2302      	movs	r3, #2
 80016b2:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80016b4:	23ff      	movs	r3, #255	; 0xff
 80016b6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016c2:	2307      	movs	r3, #7
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 80016c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 80016cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 80016d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_LTDC_Init+0x100>)
 80016f2:	f006 f9c9 	bl	8007a88 <HAL_LTDC_ConfigLayer>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 80016fc:	f001 f80a 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001700:	f002 f9b2 	bl	8003a68 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200007a4 	.word	0x200007a4
 8001710:	40016800 	.word	0x40016800

08001714 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <MX_QUADSPI_Init+0x80>)
 800171c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001726:	2204      	movs	r2, #4
 8001728:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 800172c:	2210      	movs	r2, #16
 800172e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001732:	2218      	movs	r2, #24
 8001734:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001738:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800173c:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001752:	f006 fc07 	bl	8007f64 <HAL_QSPI_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 800175c:	f000 ffda 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001762:	f002 fa83 	bl	8003c6c <DISCO_QSPI_ResetMemory>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_QUADSPI_Init+0x5c>
 800176c:	f000 ffd2 	bl	8002714 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_QUADSPI_Init+0x7c>)
 8001772:	f002 fabd 	bl	8003cf0 <DISCO_QSPI_DummyCyclesCfg>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_QUADSPI_Init+0x6c>
 800177c:	f000 ffca 	bl	8002714 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001780:	f002 fa42 	bl	8003c08 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001784:	205c      	movs	r0, #92	; 0x5c
 8001786:	f003 f889 	bl	800489c <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000bc4 	.word	0x20000bc4
 8001794:	a0001000 	.word	0xa0001000

08001798 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b092      	sub	sp, #72	; 0x48
 800179c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800179e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	222c      	movs	r2, #44	; 0x2c
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00f ffae 	bl	801171c <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <MX_RTC_Init+0x144>)
 80017c2:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <MX_RTC_Init+0x148>)
 80017c4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017c6:	4b45      	ldr	r3, [pc, #276]	; (80018dc <MX_RTC_Init+0x144>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <MX_RTC_Init+0x144>)
 80017ce:	227f      	movs	r2, #127	; 0x7f
 80017d0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <MX_RTC_Init+0x144>)
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <MX_RTC_Init+0x144>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <MX_RTC_Init+0x144>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <MX_RTC_Init+0x144>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ea:	483c      	ldr	r0, [pc, #240]	; (80018dc <MX_RTC_Init+0x144>)
 80017ec:	f008 fd5e 	bl	800a2ac <HAL_RTC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_RTC_Init+0x62>
	{
		Error_Handler();
 80017f6:	f000 ff8d 	bl	8002714 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001818:	2201      	movs	r2, #1
 800181a:	4619      	mov	r1, r3
 800181c:	482f      	ldr	r0, [pc, #188]	; (80018dc <MX_RTC_Init+0x144>)
 800181e:	f008 fdd7 	bl	800a3d0 <HAL_RTC_SetTime>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001828:	f000 ff74 	bl	8002714 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001848:	2201      	movs	r2, #1
 800184a:	4619      	mov	r1, r3
 800184c:	4823      	ldr	r0, [pc, #140]	; (80018dc <MX_RTC_Init+0x144>)
 800184e:	f008 fe7d 	bl	800a54c <HAL_RTC_SetDate>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001858:	f000 ff5c 	bl	8002714 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800185c:	2300      	movs	r3, #0
 800185e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001860:	2300      	movs	r3, #0
 8001862:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001864:	2300      	movs	r3, #0
 8001866:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800188c:	463b      	mov	r3, r7
 800188e:	2201      	movs	r2, #1
 8001890:	4619      	mov	r1, r3
 8001892:	4812      	ldr	r0, [pc, #72]	; (80018dc <MX_RTC_Init+0x144>)
 8001894:	f008 ff02 	bl	800a69c <HAL_RTC_SetAlarm>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 800189e:	f000 ff39 	bl	8002714 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80018a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <MX_RTC_Init+0x144>)
 80018b0:	f008 fef4 	bl	800a69c <HAL_RTC_SetAlarm>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_RTC_Init+0x126>
	{
		Error_Handler();
 80018ba:	f000 ff2b 	bl	8002714 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80018be:	2202      	movs	r2, #2
 80018c0:	2100      	movs	r1, #0
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_RTC_Init+0x144>)
 80018c4:	f009 f874 	bl	800a9b0 <HAL_RTCEx_SetTimeStamp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 80018ce:	f000 ff21 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3748      	adds	r7, #72	; 0x48
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000968 	.word	0x20000968
 80018e0:	40002800 	.word	0x40002800

080018e4 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <MX_SAI2_Init+0x168>)
 80018ea:	4a59      	ldr	r2, [pc, #356]	; (8001a50 <MX_SAI2_Init+0x16c>)
 80018ec:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <MX_SAI2_Init+0x168>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018f4:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <MX_SAI2_Init+0x168>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <MX_SAI2_Init+0x168>)
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001900:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001902:	2200      	movs	r2, #0
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001908:	2201      	movs	r2, #1
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800190c:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <MX_SAI2_Init+0x168>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001914:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001918:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800191a:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <MX_SAI2_Init+0x168>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001922:	2201      	movs	r2, #1
 8001924:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001928:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800192c:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <MX_SAI2_Init+0x168>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001942:	2200      	movs	r2, #0
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <MX_SAI2_Init+0x168>)
 800194e:	2220      	movs	r2, #32
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001958:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <MX_SAI2_Init+0x168>)
 800195c:	2200      	movs	r2, #0
 800195e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001962:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001966:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <MX_SAI2_Init+0x168>)
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001976:	2204      	movs	r2, #4
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <MX_SAI2_Init+0x168>)
 800197c:	2205      	movs	r2, #5
 800197e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001980:	4832      	ldr	r0, [pc, #200]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001982:	f009 f86b 	bl	800aa5c <HAL_SAI_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 800198c:	f000 fec2 	bl	8002714 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <MX_SAI2_Init+0x174>)
 8001994:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <MX_SAI2_Init+0x170>)
 800199e:	2203      	movs	r2, #3
 80019a0:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019e0:	2240      	movs	r2, #64	; 0x40
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019e6:	2220      	movs	r2, #32
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SAI2_Init+0x170>)
 80019fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019fe:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a1a:	f009 f81f 	bl	800aa5c <HAL_SAI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001a24:	f000 fe76 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_SAI2_Init+0x168>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a36:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <MX_SAI2_Init+0x170>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a46:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000530 	.word	0x20000530
 8001a50:	40015c04 	.word	0x40015c04
 8001a54:	20000304 	.word	0x20000304
 8001a58:	40015c24 	.word	0x40015c24

08001a5c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <MX_SDMMC1_SD_Init+0x3c>)
 8001a64:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <MX_SDMMC1_SD_Init+0x38>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000684 	.word	0x20000684
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001aa2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aa6:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_SPDIFRX_Init+0x5c>)
 8001ae6:	f00a fb7d 	bl	800c1e4 <HAL_SPDIFRX_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001af0:	f000 fe10 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200004e4 	.word	0x200004e4

08001afc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b09a      	sub	sp, #104	; 0x68
 8001b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	222c      	movs	r2, #44	; 0x2c
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00f fdf0 	bl	801171c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b3e:	4a44      	ldr	r2, [pc, #272]	; (8001c50 <MX_TIM1_Init+0x154>)
 8001b40:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001b42:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b54:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b68:	4838      	ldr	r0, [pc, #224]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b6a:	f00a fb97 	bl	800c29c <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001b74:	f000 fdce 	bl	8002714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b82:	4619      	mov	r1, r3
 8001b84:	4831      	ldr	r0, [pc, #196]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b86:	f00a fedf 	bl	800c948 <HAL_TIM_ConfigClockSource>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001b90:	f000 fdc0 	bl	8002714 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b94:	482d      	ldr	r0, [pc, #180]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001b96:	f00a fc51 	bl	800c43c <HAL_TIM_PWM_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001ba0:	f000 fdb8 	bl	8002714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4825      	ldr	r0, [pc, #148]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001bb8:	f00b fb4c 	bl	800d254 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001bc2:	f000 fda7 	bl	8002714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc6:	2360      	movs	r3, #96	; 0x60
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be6:	2200      	movs	r2, #0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001bec:	f00a fd9c 	bl	800c728 <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001bf6:	f000 fd8d 	bl	8002714 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c12:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001c30:	f00b fb9e 	bl	800d370 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001c3a:	f000 fd6b 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM1_Init+0x150>)
 8001c40:	f001 fa4e 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001c44:	bf00      	nop
 8001c46:	3768      	adds	r7, #104	; 0x68
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000988 	.word	0x20000988
 8001c50:	40010000 	.word	0x40010000

08001c54 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cae:	4823      	ldr	r0, [pc, #140]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001cb0:	f00a faf4 	bl	800c29c <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001cba:	f000 fd2b 	bl	8002714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481c      	ldr	r0, [pc, #112]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001ccc:	f00a fe3c 	bl	800c948 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8001cd6:	f000 fd1d 	bl	8002714 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cda:	4818      	ldr	r0, [pc, #96]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001cdc:	f00a fbae 	bl	800c43c <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001ce6:	f000 fd15 	bl	8002714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001cfa:	f00b faab 	bl	800d254 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001d04:	f000 fd06 	bl	8002714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	; 0x60
 8001d0a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001d20:	f00a fd02 	bl	800c728 <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001d2a:	f000 fcf3 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM2_Init+0xe8>)
 8001d30:	f001 f9d6 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000af8 	.word	0x20000af8

08001d40 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <MX_TIM3_Init+0xec>)
 8001d76:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d98:	4823      	ldr	r0, [pc, #140]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001d9a:	f00a fa7f 	bl	800c29c <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001da4:	f000 fcb6 	bl	8002714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	4619      	mov	r1, r3
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001db6:	f00a fdc7 	bl	800c948 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8001dc0:	f000 fca8 	bl	8002714 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dc4:	4818      	ldr	r0, [pc, #96]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001dc6:	f00a fb39 	bl	800c43c <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8001dd0:	f000 fca0 	bl	8002714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4811      	ldr	r0, [pc, #68]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001de4:	f00b fa36 	bl	800d254 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001dee:	f000 fc91 	bl	8002714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	; 0x60
 8001df4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	463b      	mov	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001e0a:	f00a fc8d 	bl	800c728 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001e14:	f000 fc7e 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM3_Init+0xe8>)
 8001e1a:	f001 f961 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	; 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000758 	.word	0x20000758
 8001e2c:	40000400 	.word	0x40000400

08001e30 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	; 0x38
 8001e34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e64:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <MX_TIM5_Init+0xec>)
 8001e66:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e7a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e88:	4823      	ldr	r0, [pc, #140]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001e8a:	f00a fa07 	bl	800c29c <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001e94:	f000 fc3e 	bl	8002714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481c      	ldr	r0, [pc, #112]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001ea6:	f00a fd4f 	bl	800c948 <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001eb0:	f000 fc30 	bl	8002714 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001eb4:	4818      	ldr	r0, [pc, #96]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001eb6:	f00a fac1 	bl	800c43c <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001ec0:	f000 fc28 	bl	8002714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001ed4:	f00b f9be 	bl	800d254 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001ede:	f000 fc19 	bl	8002714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	; 0x60
 8001ee4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001efa:	f00a fc15 	bl	800c728 <HAL_TIM_PWM_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8001f04:	f000 fc06 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <MX_TIM5_Init+0xe8>)
 8001f0a:	f001 f8e9 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	; 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000708 	.word	0x20000708
 8001f1c:	40000c00 	.word	0x40000c00

08001f20 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <MX_TIM8_Init+0xa4>)
 8001f42:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f56:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f6c:	f00a f996 	bl	800c29c <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001f76:	f000 fbcd 	bl	8002714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001f88:	f00a fcde 	bl	800c948 <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8001f92:	f000 fbbf 	bl	8002714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <MX_TIM8_Init+0xa0>)
 8001fa8:	f00b f954 	bl	800d254 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001fb2:	f000 fbaf 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000438 	.word	0x20000438
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_TIM12_Init+0x84>)
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <MX_TIM12_Init+0x88>)
 8001fe4:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_TIM12_Init+0x84>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_TIM12_Init+0x84>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_TIM12_Init+0x84>)
 8001ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff8:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_TIM12_Init+0x84>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_TIM12_Init+0x84>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_TIM12_Init+0x84>)
 8002008:	f00a fa18 	bl	800c43c <HAL_TIM_PWM_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002012:	f000 fb7f 	bl	8002714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002016:	2360      	movs	r3, #96	; 0x60
 8002018:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <MX_TIM12_Init+0x84>)
 800202e:	f00a fb7b 	bl	800c728 <HAL_TIM_PWM_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002038:	f000 fb6c 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <MX_TIM12_Init+0x84>)
 800203e:	f001 f84f 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8002042:	bf00      	nop
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000b44 	.word	0x20000b44
 8002050:	40001800 	.word	0x40001800

08002054 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <MX_USART1_UART_Init+0x5c>)
 800205c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <MX_USART1_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_USART1_UART_Init+0x58>)
 8002098:	f00b fa06 	bl	800d4a8 <HAL_UART_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80020a2:	f000 fb37 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200008e4 	.word	0x200008e4
 80020b0:	40011000 	.word	0x40011000

080020b4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <MX_USART6_UART_Init+0x5c>)
 80020bc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_USART6_UART_Init+0x58>)
 80020f8:	f00b f9d6 	bl	800d4a8 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002102:	f000 fb07 	bl	8002714 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000a34 	.word	0x20000a34
 8002110:	40011400 	.word	0x40011400

08002114 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <MX_DMA_Init+0xd0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <MX_DMA_Init+0xd0>)
 8002120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <MX_DMA_Init+0xd0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002134:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <MX_DMA_Init+0xd8>)
 8002136:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <MX_DMA_Init+0xd4>)
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_DMA_Init+0xd4>)
 800214e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002152:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <MX_DMA_Init+0xd4>)
 800215e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002162:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_DMA_Init+0xd4>)
 800216c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002170:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002174:	2204      	movs	r2, #4
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <MX_DMA_Init+0xd4>)
 800217a:	2203      	movs	r2, #3
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002180:	2200      	movs	r2, #0
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_DMA_Init+0xd4>)
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <MX_DMA_Init+0xd4>)
 800218c:	f002 fe44 	bl	8004e18 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 8002196:	f000 fabd 	bl	8002714 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2105      	movs	r1, #5
 800219e:	2038      	movs	r0, #56	; 0x38
 80021a0:	f002 fb52 	bl	8004848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a4:	2038      	movs	r0, #56	; 0x38
 80021a6:	f002 fb6b 	bl	8004880 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2105      	movs	r1, #5
 80021ae:	2039      	movs	r0, #57	; 0x39
 80021b0:	f002 fb4a 	bl	8004848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021b4:	2039      	movs	r0, #57	; 0x39
 80021b6:	f002 fb63 	bl	8004880 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2105      	movs	r1, #5
 80021be:	203c      	movs	r0, #60	; 0x3c
 80021c0:	f002 fb42 	bl	8004848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80021c4:	203c      	movs	r0, #60	; 0x3c
 80021c6:	f002 fb5b 	bl	8004880 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	2046      	movs	r0, #70	; 0x46
 80021d0:	f002 fb3a 	bl	8004848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021d4:	2046      	movs	r0, #70	; 0x46
 80021d6:	f002 fb53 	bl	8004880 <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	200003d8 	.word	0x200003d8
 80021ec:	40026410 	.word	0x40026410

080021f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	615a      	str	r2, [r3, #20]
 8002206:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <MX_FMC_Init+0xa0>)
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <MX_FMC_Init+0xa4>)
 800220c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <MX_FMC_Init+0xa0>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_FMC_Init+0xa0>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_FMC_Init+0xa0>)
 800221c:	2204      	movs	r2, #4
 800221e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_FMC_Init+0xa0>)
 8002222:	2210      	movs	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_FMC_Init+0xa0>)
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_FMC_Init+0xa0>)
 800222e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002232:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_FMC_Init+0xa0>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_FMC_Init+0xa0>)
 800223c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002240:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <MX_FMC_Init+0xa0>)
 8002244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_FMC_Init+0xa0>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002250:	2302      	movs	r3, #2
 8002252:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002254:	2307      	movs	r3, #7
 8002256:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8002258:	2304      	movs	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 800225c:	2307      	movs	r3, #7
 800225e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002260:	2303      	movs	r3, #3
 8002262:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_FMC_Init+0xa0>)
 8002272:	f009 ff38 	bl	800c0e6 <HAL_SDRAM_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 800227c:	f000 fa4a 	bl	8002714 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002280:	f240 6003 	movw	r0, #1539	; 0x603
 8002284:	f001 fe2a 	bl	8003edc <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000b90 	.word	0x20000b90
 8002294:	a0000140 	.word	0xa0000140

08002298 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	; 0x40
 800229c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80022ae:	4baf      	ldr	r3, [pc, #700]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4aae      	ldr	r2, [pc, #696]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4bac      	ldr	r3, [pc, #688]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80022c6:	4ba9      	ldr	r3, [pc, #676]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4aa8      	ldr	r2, [pc, #672]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4ba6      	ldr	r3, [pc, #664]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	4ba3      	ldr	r3, [pc, #652]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4aa2      	ldr	r2, [pc, #648]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4ba0      	ldr	r3, [pc, #640]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022f6:	4b9d      	ldr	r3, [pc, #628]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a9c      	ldr	r2, [pc, #624]	; (800256c <MX_GPIO_Init+0x2d4>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b9a      	ldr	r3, [pc, #616]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b97      	ldr	r3, [pc, #604]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a96      	ldr	r2, [pc, #600]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b94      	ldr	r3, [pc, #592]	; (800256c <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a90      	ldr	r2, [pc, #576]	; (800256c <MX_GPIO_Init+0x2d4>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b8e      	ldr	r3, [pc, #568]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a8a      	ldr	r2, [pc, #552]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <MX_GPIO_Init+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002356:	4b85      	ldr	r3, [pc, #532]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a84      	ldr	r2, [pc, #528]	; (800256c <MX_GPIO_Init+0x2d4>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b82      	ldr	r3, [pc, #520]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800236e:	4b7f      	ldr	r3, [pc, #508]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <MX_GPIO_Init+0x2d4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002386:	4b79      	ldr	r3, [pc, #484]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a78      	ldr	r2, [pc, #480]	; (800256c <MX_GPIO_Init+0x2d4>)
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <MX_GPIO_Init+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	4b73      	ldr	r3, [pc, #460]	; (800256c <MX_GPIO_Init+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <MX_GPIO_Init+0x2d4>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b70      	ldr	r3, [pc, #448]	; (800256c <MX_GPIO_Init+0x2d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2120      	movs	r1, #32
 80023ba:	486d      	ldr	r0, [pc, #436]	; (8002570 <MX_GPIO_Init+0x2d8>)
 80023bc:	f003 fc58 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	210e      	movs	r1, #14
 80023c4:	486b      	ldr	r0, [pc, #428]	; (8002574 <MX_GPIO_Init+0x2dc>)
 80023c6:	f003 fc53 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2108      	movs	r1, #8
 80023ce:	486a      	ldr	r0, [pc, #424]	; (8002578 <MX_GPIO_Init+0x2e0>)
 80023d0:	f003 fc4e 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023da:	4866      	ldr	r0, [pc, #408]	; (8002574 <MX_GPIO_Init+0x2dc>)
 80023dc:	f003 fc48 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e6:	4865      	ldr	r0, [pc, #404]	; (800257c <MX_GPIO_Init+0x2e4>)
 80023e8:	f003 fc42 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	21c8      	movs	r1, #200	; 0xc8
 80023f0:	4863      	ldr	r0, [pc, #396]	; (8002580 <MX_GPIO_Init+0x2e8>)
 80023f2:	f003 fc3d 	bl	8005c70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80023f6:	2308      	movs	r3, #8
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	485e      	ldr	r0, [pc, #376]	; (8002584 <MX_GPIO_Init+0x2ec>)
 800240a:	f003 fa6d 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800240e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002420:	230b      	movs	r3, #11
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4855      	ldr	r0, [pc, #340]	; (8002580 <MX_GPIO_Init+0x2e8>)
 800242c:	f003 fa5c 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002430:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002442:	230a      	movs	r3, #10
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	484e      	ldr	r0, [pc, #312]	; (8002588 <MX_GPIO_Init+0x2f0>)
 800244e:	f003 fa4b 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4849      	ldr	r0, [pc, #292]	; (800258c <MX_GPIO_Init+0x2f4>)
 8002468:	f003 fa3e 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800246c:	2340      	movs	r3, #64	; 0x40
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002470:	4b47      	ldr	r3, [pc, #284]	; (8002590 <MX_GPIO_Init+0x2f8>)
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	483c      	ldr	r0, [pc, #240]	; (8002570 <MX_GPIO_Init+0x2d8>)
 8002480:	f003 fa32 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002484:	2320      	movs	r3, #32
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	4835      	ldr	r0, [pc, #212]	; (8002570 <MX_GPIO_Init+0x2d8>)
 800249c:	f003 fa24 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024a0:	f241 030e 	movw	r3, #4110	; 0x100e
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b6:	4619      	mov	r1, r3
 80024b8:	482e      	ldr	r0, [pc, #184]	; (8002574 <MX_GPIO_Init+0x2dc>)
 80024ba:	f003 fa15 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	4830      	ldr	r0, [pc, #192]	; (8002594 <MX_GPIO_Init+0x2fc>)
 80024d4:	f003 fa08 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024d8:	2308      	movs	r3, #8
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4822      	ldr	r0, [pc, #136]	; (8002578 <MX_GPIO_Init+0x2e0>)
 80024f0:	f003 f9fa 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024f4:	2310      	movs	r3, #16
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	481a      	ldr	r0, [pc, #104]	; (8002570 <MX_GPIO_Init+0x2d8>)
 8002508:	f003 f9ee 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800250c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002512:	2300      	movs	r3, #0
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	4816      	ldr	r0, [pc, #88]	; (800257c <MX_GPIO_Init+0x2e4>)
 8002522:	f003 f9e1 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253c:	4619      	mov	r1, r3
 800253e:	480f      	ldr	r0, [pc, #60]	; (800257c <MX_GPIO_Init+0x2e4>)
 8002540:	f003 f9d2 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002556:	4619      	mov	r1, r3
 8002558:	4806      	ldr	r0, [pc, #24]	; (8002574 <MX_GPIO_Init+0x2dc>)
 800255a:	f003 f9c5 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800255e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_GPIO_Init+0x300>)
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	e017      	b.n	800259c <MX_GPIO_Init+0x304>
 800256c:	40023800 	.word	0x40023800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40022000 	.word	0x40022000
 8002578:	40022800 	.word	0x40022800
 800257c:	40021c00 	.word	0x40021c00
 8002580:	40021800 	.word	0x40021800
 8002584:	40021000 	.word	0x40021000
 8002588:	40020400 	.word	0x40020400
 800258c:	40022400 	.word	0x40022400
 8002590:	10120000 	.word	0x10120000
 8002594:	40020800 	.word	0x40020800
 8002598:	10110000 	.word	0x10110000
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	4844      	ldr	r0, [pc, #272]	; (80026b8 <MX_GPIO_Init+0x420>)
 80025a6:	f003 f99f 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80025aa:	2310      	movs	r3, #16
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025ba:	230a      	movs	r3, #10
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	483d      	ldr	r0, [pc, #244]	; (80026bc <MX_GPIO_Init+0x424>)
 80025c6:	f003 f98f 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80025ca:	23c8      	movs	r3, #200	; 0xc8
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	4837      	ldr	r0, [pc, #220]	; (80026c0 <MX_GPIO_Init+0x428>)
 80025e2:	f003 f981 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025e6:	2305      	movs	r3, #5
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025f6:	230a      	movs	r3, #10
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fe:	4619      	mov	r1, r3
 8002600:	4830      	ldr	r0, [pc, #192]	; (80026c4 <MX_GPIO_Init+0x42c>)
 8002602:	f003 f971 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002606:	2332      	movs	r3, #50	; 0x32
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002616:	230b      	movs	r3, #11
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261e:	4619      	mov	r1, r3
 8002620:	4828      	ldr	r0, [pc, #160]	; (80026c4 <MX_GPIO_Init+0x42c>)
 8002622:	f003 f961 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002626:	2304      	movs	r3, #4
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4821      	ldr	r0, [pc, #132]	; (80026c0 <MX_GPIO_Init+0x428>)
 800263a:	f003 f955 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800263e:	2386      	movs	r3, #134	; 0x86
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800264e:	230b      	movs	r3, #11
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002656:	4619      	mov	r1, r3
 8002658:	481b      	ldr	r0, [pc, #108]	; (80026c8 <MX_GPIO_Init+0x430>)
 800265a:	f003 f945 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800265e:	2328      	movs	r3, #40	; 0x28
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800266e:	230a      	movs	r3, #10
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002676:	4619      	mov	r1, r3
 8002678:	4813      	ldr	r0, [pc, #76]	; (80026c8 <MX_GPIO_Init+0x430>)
 800267a:	f003 f935 	bl	80058e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800267e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002690:	2305      	movs	r3, #5
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002698:	4619      	mov	r1, r3
 800269a:	480c      	ldr	r0, [pc, #48]	; (80026cc <MX_GPIO_Init+0x434>)
 800269c:	f003 f924 	bl	80058e8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2105      	movs	r1, #5
 80026a4:	2028      	movs	r0, #40	; 0x28
 80026a6:	f002 f8cf 	bl	8004848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026aa:	2028      	movs	r0, #40	; 0x28
 80026ac:	f002 f8e8 	bl	8004880 <HAL_NVIC_EnableIRQ>

}
 80026b0:	bf00      	nop
 80026b2:	3740      	adds	r7, #64	; 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40021c00 	.word	0x40021c00
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400

080026d0 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	printf(msg);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f00f fd3b 	bl	8012154 <iprintf>
	printf("\n");
 80026de:	200a      	movs	r0, #10
 80026e0:	f00f fd50 	bl	8012184 <putchar>
	Error_Handler();
 80026e4:	f000 f816 	bl	8002714 <Error_Handler>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002702:	f001 fcf9 	bl	80040f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40001000 	.word	0x40001000

08002714 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002718:	f001 f98a 	bl	8003a30 <LED_Toggle>
		HAL_Delay(100);
 800271c:	2064      	movs	r0, #100	; 0x64
 800271e:	f001 fd0b 	bl	8004138 <HAL_Delay>
		LED_Toggle();
 8002722:	e7f9      	b.n	8002718 <Error_Handler+0x4>

08002724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_MspInit+0x4c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_MspInit+0x4c>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_MspInit+0x4c>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_MspInit+0x4c>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	210f      	movs	r1, #15
 800275e:	f06f 0001 	mvn.w	r0, #1
 8002762:	f002 f871 	bl	8004848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a21      	ldr	r2, [pc, #132]	; (8002818 <HAL_ADC_MspInit+0xa4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d13c      	bne.n	8002810 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_ADC_MspInit+0xa8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_ADC_MspInit+0xa8>)
 800279c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a0:	6453      	str	r3, [r2, #68]	; 0x44
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_ADC_MspInit+0xa8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80027de:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80027e2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e4:	2303      	movs	r3, #3
 80027e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	480b      	ldr	r0, [pc, #44]	; (8002820 <HAL_ADC_MspInit+0xac>)
 80027f4:	f003 f878 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80027f8:	2301      	movs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	2303      	movs	r3, #3
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <HAL_ADC_MspInit+0xb0>)
 800280c:	f003 f86c 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002810:	bf00      	nop
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40012200 	.word	0x40012200
 800281c:	40023800 	.word	0x40023800
 8002820:	40021400 	.word	0x40021400
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_CRC_MspInit+0x38>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10b      	bne.n	8002852 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_CRC_MspInit+0x3c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_CRC_MspInit+0x3c>)
 8002840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_CRC_MspInit+0x3c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023000 	.word	0x40023000
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6c      	ldr	r2, [pc, #432]	; (8002a38 <HAL_DCMI_MspInit+0x1d0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	f040 80d2 	bne.w	8002a30 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800288c:	4b6b      	ldr	r3, [pc, #428]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	4a6a      	ldr	r2, [pc, #424]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6353      	str	r3, [r2, #52]	; 0x34
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 800289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a4:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028aa:	f043 0310 	orr.w	r3, r3, #16
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028bc:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6313      	str	r3, [r2, #48]	; 0x30
 80028c8:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028de:	6313      	str	r3, [r2, #48]	; 0x30
 80028e0:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_DCMI_MspInit+0x1d4>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800291c:	2360      	movs	r3, #96	; 0x60
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800292c:	230d      	movs	r3, #13
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4842      	ldr	r0, [pc, #264]	; (8002a40 <HAL_DCMI_MspInit+0x1d8>)
 8002938:	f002 ffd6 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800293c:	2308      	movs	r3, #8
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800294c:	230d      	movs	r3, #13
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	483b      	ldr	r0, [pc, #236]	; (8002a44 <HAL_DCMI_MspInit+0x1dc>)
 8002958:	f002 ffc6 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800295c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800296e:	230d      	movs	r3, #13
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	4619      	mov	r1, r3
 8002978:	4833      	ldr	r0, [pc, #204]	; (8002a48 <HAL_DCMI_MspInit+0x1e0>)
 800297a:	f002 ffb5 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800297e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002990:	230d      	movs	r3, #13
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	4619      	mov	r1, r3
 800299a:	482c      	ldr	r0, [pc, #176]	; (8002a4c <HAL_DCMI_MspInit+0x1e4>)
 800299c:	f002 ffa4 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029a0:	2350      	movs	r3, #80	; 0x50
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b0:	230d      	movs	r3, #13
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4825      	ldr	r0, [pc, #148]	; (8002a50 <HAL_DCMI_MspInit+0x1e8>)
 80029bc:	f002 ff94 	bl	80058e8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_DCMI_MspInit+0x1f0>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f0:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a04:	4813      	ldr	r0, [pc, #76]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 8002a06:	f002 fa07 	bl	8004e18 <HAL_DMA_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002a10:	f7ff fe80 	bl	8002714 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 8002a18:	649a      	str	r2, [r3, #72]	; 0x48
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_DCMI_MspInit+0x1ec>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2105      	movs	r1, #5
 8002a24:	204e      	movs	r0, #78	; 0x4e
 8002a26:	f001 ff0f 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002a2a:	204e      	movs	r0, #78	; 0x4e
 8002a2c:	f001 ff28 	bl	8004880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3738      	adds	r7, #56	; 0x38
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	50050000 	.word	0x50050000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40020c00 	.word	0x40020c00
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40021c00 	.word	0x40021c00
 8002a50:	40020000 	.word	0x40020000
 8002a54:	20000624 	.word	0x20000624
 8002a58:	40026428 	.word	0x40026428

08002a5c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_DMA2D_MspInit+0x44>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d113      	bne.n	8002a96 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_DMA2D_MspInit+0x48>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_DMA2D_MspInit+0x48>)
 8002a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_DMA2D_MspInit+0x48>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2105      	movs	r1, #5
 8002a8a:	205a      	movs	r0, #90	; 0x5a
 8002a8c:	f001 fedc 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a90:	205a      	movs	r0, #90	; 0x5a
 8002a92:	f001 fef5 	bl	8004880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	4002b000 	.word	0x4002b000
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <HAL_I2C_MspInit+0xdc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d129      	bne.n	8002b1e <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae8:	2312      	movs	r3, #18
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002af4:	2304      	movs	r3, #4
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	4823      	ldr	r0, [pc, #140]	; (8002b8c <HAL_I2C_MspInit+0xe4>)
 8002b00:	f002 fef2 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b1c:	e02d      	b.n	8002b7a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_I2C_MspInit+0xe8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d128      	bne.n	8002b7a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b46:	2312      	movs	r3, #18
 8002b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b52:	2304      	movs	r3, #4
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <HAL_I2C_MspInit+0xec>)
 8002b5e:	f002 fec3 	bl	80058e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_I2C_MspInit+0xe0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	3730      	adds	r7, #48	; 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40005400 	.word	0x40005400
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40005c00 	.word	0x40005c00
 8002b94:	40021c00 	.word	0x40021c00

08002b98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <HAL_LTDC_MspInit+0x164>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f040 809b 	bne.w	8002cf2 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bda:	f043 0310 	orr.w	r3, r3, #16
 8002bde:	6313      	str	r3, [r2, #48]	; 0x30
 8002be0:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf8:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	4a3d      	ldr	r2, [pc, #244]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c26:	6313      	str	r3, [r2, #48]	; 0x30
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_LTDC_MspInit+0x168>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c5c:	230e      	movs	r3, #14
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	4619      	mov	r1, r3
 8002c66:	4827      	ldr	r0, [pc, #156]	; (8002d04 <HAL_LTDC_MspInit+0x16c>)
 8002c68:	f002 fe3e 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002c6c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c7e:	230e      	movs	r3, #14
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c86:	4619      	mov	r1, r3
 8002c88:	481f      	ldr	r0, [pc, #124]	; (8002d08 <HAL_LTDC_MspInit+0x170>)
 8002c8a:	f002 fe2d 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002c8e:	23f7      	movs	r3, #247	; 0xf7
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c9e:	230e      	movs	r3, #14
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4818      	ldr	r0, [pc, #96]	; (8002d0c <HAL_LTDC_MspInit+0x174>)
 8002caa:	f002 fe1d 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4811      	ldr	r0, [pc, #68]	; (8002d10 <HAL_LTDC_MspInit+0x178>)
 8002ccc:	f002 fe0c 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002cd0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	4619      	mov	r1, r3
 8002cec:	4809      	ldr	r0, [pc, #36]	; (8002d14 <HAL_LTDC_MspInit+0x17c>)
 8002cee:	f002 fdfb 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3738      	adds	r7, #56	; 0x38
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40016800 	.word	0x40016800
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40022400 	.word	0x40022400
 8002d0c:	40022800 	.word	0x40022800
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40022000 	.word	0x40022000

08002d18 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	; 0x30
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <HAL_QSPI_MspInit+0x11c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d178      	bne.n	8002e2c <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a3e      	ldr	r2, [pc, #248]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6393      	str	r3, [r2, #56]	; 0x38
 8002d46:	4b3c      	ldr	r3, [pc, #240]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d58:	f043 0310 	orr.w	r3, r3, #16
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a32      	ldr	r2, [pc, #200]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_QSPI_MspInit+0x120>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002daa:	2309      	movs	r3, #9
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002dae:	f107 031c 	add.w	r3, r7, #28
 8002db2:	4619      	mov	r1, r3
 8002db4:	4821      	ldr	r0, [pc, #132]	; (8002e3c <HAL_QSPI_MspInit+0x124>)
 8002db6:	f002 fd97 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dca:	230a      	movs	r3, #10
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	481a      	ldr	r0, [pc, #104]	; (8002e40 <HAL_QSPI_MspInit+0x128>)
 8002dd6:	f002 fd87 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dea:	2309      	movs	r3, #9
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	4812      	ldr	r0, [pc, #72]	; (8002e40 <HAL_QSPI_MspInit+0x128>)
 8002df6:	f002 fd77 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002dfa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e0c:	2309      	movs	r3, #9
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	4619      	mov	r1, r3
 8002e16:	480b      	ldr	r0, [pc, #44]	; (8002e44 <HAL_QSPI_MspInit+0x12c>)
 8002e18:	f002 fd66 	bl	80058e8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2105      	movs	r1, #5
 8002e20:	205c      	movs	r0, #92	; 0x5c
 8002e22:	f001 fd11 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002e26:	205c      	movs	r0, #92	; 0x5c
 8002e28:	f001 fd2a 	bl	8004880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	3730      	adds	r7, #48	; 0x30
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	a0001000 	.word	0xa0001000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40020400 	.word	0x40020400
 8002e44:	40020c00 	.word	0x40020c00

08002e48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_RTC_MspInit+0x2c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d105      	bne.n	8002e66 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RTC_MspInit+0x30>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_RTC_MspInit+0x30>)
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40002800 	.word	0x40002800
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_SD_MspInit+0xb4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d144      	bne.n	8002f28 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_SD_MspInit+0xb8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002ee6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002eea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ef8:	230c      	movs	r3, #12
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <HAL_SD_MspInit+0xbc>)
 8002f04:	f002 fcf0 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0314 	add.w	r3, r7, #20
 8002f20:	4619      	mov	r1, r3
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <HAL_SD_MspInit+0xc0>)
 8002f24:	f002 fce0 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00

08002f40 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f60:	d127      	bne.n	8002fb2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <HAL_SPDIFRX_MspInit+0x80>)
 8002fae:	f002 fc9b 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020c00 	.word	0x40020c00

08002fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_TIM_Base_MspInit+0xc8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002fee:	e046      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]
}
 8003012:	e034      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_TIM_Base_MspInit+0xd0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
}
 8003036:	e022      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_Base_MspInit+0xd4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
}
 800305a:	e010      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10b      	bne.n	800307e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	40023800 	.word	0x40023800
 8003094:	40000400 	.word	0x40000400
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_TIM_PWM_MspInit+0x38>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10b      	bne.n	80030ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40001800 	.word	0x40001800
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 031c 	add.w	r3, r7, #28
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_TIM_MspPostInit+0x178>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11d      	bne.n	800313e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a55      	ldr	r2, [pc, #340]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800311a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	484a      	ldr	r0, [pc, #296]	; (8003260 <HAL_TIM_MspPostInit+0x180>)
 8003138:	f002 fbd6 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800313c:	e087      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d11d      	bne.n	8003184 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a43      	ldr	r2, [pc, #268]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4619      	mov	r1, r3
 800317c:	4838      	ldr	r0, [pc, #224]	; (8003260 <HAL_TIM_MspPostInit+0x180>)
 800317e:	f002 fbb3 	bl	80058e8 <HAL_GPIO_Init>
}
 8003182:	e064      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_TIM_MspPostInit+0x184>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d11c      	bne.n	80031c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b33      	ldr	r3, [pc, #204]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a32      	ldr	r2, [pc, #200]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031a6:	2310      	movs	r3, #16
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031b6:	2302      	movs	r3, #2
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4829      	ldr	r0, [pc, #164]	; (8003268 <HAL_TIM_MspPostInit+0x188>)
 80031c2:	f002 fb91 	bl	80058e8 <HAL_GPIO_Init>
}
 80031c6:	e042      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_TIM_MspPostInit+0x18c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11c      	bne.n	800320c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031fa:	2302      	movs	r3, #2
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	481a      	ldr	r0, [pc, #104]	; (8003270 <HAL_TIM_MspPostInit+0x190>)
 8003206:	f002 fb6f 	bl	80058e8 <HAL_GPIO_Init>
}
 800320a:	e020      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_TIM_MspPostInit+0x194>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11b      	bne.n	800324e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800323e:	2309      	movs	r3, #9
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	480b      	ldr	r0, [pc, #44]	; (8003278 <HAL_TIM_MspPostInit+0x198>)
 800324a:	f002 fb4d 	bl	80058e8 <HAL_GPIO_Init>
}
 800324e:	bf00      	nop
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40023800 	.word	0x40023800
 8003260:	40020000 	.word	0x40020000
 8003264:	40000400 	.word	0x40000400
 8003268:	40020400 	.word	0x40020400
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40022000 	.word	0x40022000
 8003274:	40001800 	.word	0x40001800
 8003278:	40021c00 	.word	0x40021c00

0800327c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_UART_MspInit+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d145      	bne.n	800332a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800329e:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032a4:	f043 0310 	orr.w	r3, r3, #16
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a35      	ldr	r2, [pc, #212]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f6:	2307      	movs	r3, #7
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4619      	mov	r1, r3
 8003300:	4824      	ldr	r0, [pc, #144]	; (8003394 <HAL_UART_MspInit+0x118>)
 8003302:	f002 faf1 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800330a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003318:	2307      	movs	r3, #7
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	481d      	ldr	r0, [pc, #116]	; (8003398 <HAL_UART_MspInit+0x11c>)
 8003324:	f002 fae0 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003328:	e02c      	b.n	8003384 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_UART_MspInit+0x120>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d127      	bne.n	8003384 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_UART_MspInit+0x114>)
 800333a:	f043 0320 	orr.w	r3, r3, #32
 800333e:	6453      	str	r3, [r2, #68]	; 0x44
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_UART_MspInit+0x114>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_UART_MspInit+0x114>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003374:	2308      	movs	r3, #8
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	4619      	mov	r1, r3
 800337e:	4808      	ldr	r0, [pc, #32]	; (80033a0 <HAL_UART_MspInit+0x124>)
 8003380:	f002 fab2 	bl	80058e8 <HAL_GPIO_Init>
}
 8003384:	bf00      	nop
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40011000 	.word	0x40011000
 8003390:	40023800 	.word	0x40023800
 8003394:	40020400 	.word	0x40020400
 8003398:	40020000 	.word	0x40020000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40020800 	.word	0x40020800

080033a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80033b8:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_FMC_MspInit+0x10c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d173      	bne.n	80034a8 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80033c0:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_FMC_MspInit+0x10c>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_FMC_MspInit+0x110>)
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <HAL_FMC_MspInit+0x110>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6393      	str	r3, [r2, #56]	; 0x38
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <HAL_FMC_MspInit+0x110>)
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80033de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033e2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f0:	230c      	movs	r3, #12
 80033f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	482f      	ldr	r0, [pc, #188]	; (80034b8 <HAL_FMC_MspInit+0x114>)
 80033fa:	f002 fa75 	bl	80058e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80033fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8003402:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003410:	230c      	movs	r3, #12
 8003412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4828      	ldr	r0, [pc, #160]	; (80034bc <HAL_FMC_MspInit+0x118>)
 800341a:	f002 fa65 	bl	80058e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800341e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003422:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003430:	230c      	movs	r3, #12
 8003432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4821      	ldr	r0, [pc, #132]	; (80034c0 <HAL_FMC_MspInit+0x11c>)
 800343a:	f002 fa55 	bl	80058e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800343e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003442:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003450:	230c      	movs	r3, #12
 8003452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	4619      	mov	r1, r3
 8003458:	481a      	ldr	r0, [pc, #104]	; (80034c4 <HAL_FMC_MspInit+0x120>)
 800345a:	f002 fa45 	bl	80058e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800345e:	2328      	movs	r3, #40	; 0x28
 8003460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800346e:	230c      	movs	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4814      	ldr	r0, [pc, #80]	; (80034c8 <HAL_FMC_MspInit+0x124>)
 8003478:	f002 fa36 	bl	80058e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800347c:	2308      	movs	r3, #8
 800347e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800348c:	230c      	movs	r3, #12
 800348e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	4619      	mov	r1, r3
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <HAL_FMC_MspInit+0x128>)
 8003496:	f002 fa27 	bl	80058e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_FMC_MspInit+0x12c>)
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_FMC_MspInit+0x130>)
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_FMC_MspInit+0x130>)
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_FMC_MspInit+0x12c>)
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
 80034a6:	e000      	b.n	80034aa <HAL_FMC_MspInit+0x106>
    return;
 80034a8:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000204 	.word	0x20000204
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40021800 	.word	0x40021800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021400 	.word	0x40021400
 80034c8:	40021c00 	.word	0x40021c00
 80034cc:	40020800 	.word	0x40020800
 80034d0:	20000b90 	.word	0x20000b90
 80034d4:	200003d8 	.word	0x200003d8

080034d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80034e0:	f7ff ff60 	bl	80033a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6f      	ldr	r2, [pc, #444]	; (80036b8 <HAL_SAI_MspInit+0x1cc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d175      	bne.n	80035ea <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034fe:	4b6f      	ldr	r3, [pc, #444]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003506:	4b6e      	ldr	r3, [pc, #440]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a6d      	ldr	r2, [pc, #436]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 800350c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800351e:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 8003526:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003528:	2310      	movs	r3, #16
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003538:	230a      	movs	r3, #10
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	4860      	ldr	r0, [pc, #384]	; (80036c4 <HAL_SAI_MspInit+0x1d8>)
 8003544:	f002 f9d0 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003548:	23e0      	movs	r3, #224	; 0xe0
 800354a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003558:	230a      	movs	r3, #10
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4619      	mov	r1, r3
 8003562:	4858      	ldr	r0, [pc, #352]	; (80036c4 <HAL_SAI_MspInit+0x1d8>)
 8003564:	f002 f9c0 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 800356a:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_SAI_MspInit+0x1e0>)
 800356c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800356e:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 8003570:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003574:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 8003584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003588:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800358a:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 800358c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003590:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003592:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 8003594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003598:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800359a:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 800359c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a8:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035ac:	2204      	movs	r2, #4
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035b2:	2203      	movs	r2, #3
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80035b6:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80035bc:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80035c2:	4841      	ldr	r0, [pc, #260]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035c4:	f001 fc28 	bl	8004e18 <HAL_DMA_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 80035ce:	f7ff f8a1 	bl	8002714 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035d6:	671a      	str	r2, [r3, #112]	; 0x70
 80035d8:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_SAI_MspInit+0x1dc>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a38      	ldr	r2, [pc, #224]	; (80036d0 <HAL_SAI_MspInit+0x1e4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d15c      	bne.n	80036ae <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 8003602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003606:	6453      	str	r3, [r2, #68]	; 0x44
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_SAI_MspInit+0x1d4>)
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_SAI_MspInit+0x1d0>)
 800361c:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800361e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003630:	230a      	movs	r3, #10
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4826      	ldr	r0, [pc, #152]	; (80036d4 <HAL_SAI_MspInit+0x1e8>)
 800363c:	f002 f954 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_SAI_MspInit+0x1f0>)
 8003644:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003666:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800366a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800366e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003676:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800367a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800367e:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 8003688:	f001 fbc6 	bl	8004e18 <HAL_DMA_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003692:	f7ff f83f 	bl	8002714 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800369a:	671a      	str	r2, [r3, #112]	; 0x70
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 80036a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_SAI_MspInit+0x1ec>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40015c04 	.word	0x40015c04
 80036bc:	20000208 	.word	0x20000208
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40022000 	.word	0x40022000
 80036c8:	200009d4 	.word	0x200009d4
 80036cc:	40026470 	.word	0x40026470
 80036d0:	40015c24 	.word	0x40015c24
 80036d4:	40021800 	.word	0x40021800
 80036d8:	20000484 	.word	0x20000484
 80036dc:	400264b8 	.word	0x400264b8

080036e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	2036      	movs	r0, #54	; 0x36
 80036f6:	f001 f8a7 	bl	8004848 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036fa:	2036      	movs	r0, #54	; 0x36
 80036fc:	f001 f8c0 	bl	8004880 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003700:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_InitTick+0xa0>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_InitTick+0xa0>)
 8003706:	f043 0310 	orr.w	r3, r3, #16
 800370a:	6413      	str	r3, [r2, #64]	; 0x40
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_InitTick+0xa0>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003718:	f107 0210 	add.w	r2, r7, #16
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f006 f85c 	bl	80097e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003728:	f006 f832 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <HAL_InitTick+0xa4>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	0c9b      	lsrs	r3, r3, #18
 800373c:	3b01      	subs	r3, #1
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_InitTick+0xa8>)
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <HAL_InitTick+0xac>)
 8003744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_InitTick+0xa8>)
 8003748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800374c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800374e:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_InitTick+0xa8>)
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_InitTick+0xa8>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_InitTick+0xa8>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003760:	4809      	ldr	r0, [pc, #36]	; (8003788 <HAL_InitTick+0xa8>)
 8003762:	f008 fd9b 	bl	800c29c <HAL_TIM_Base_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800376c:	4806      	ldr	r0, [pc, #24]	; (8003788 <HAL_InitTick+0xa8>)
 800376e:	f008 fded 	bl	800c34c <HAL_TIM_Base_Start_IT>
 8003772:	4603      	mov	r3, r0
 8003774:	e000      	b.n	8003778 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3730      	adds	r7, #48	; 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	431bde83 	.word	0x431bde83
 8003788:	20000c10 	.word	0x20000c10
 800378c:	40001000 	.word	0x40001000

08003790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003794:	e7fe      	b.n	8003794 <NMI_Handler+0x4>

08003796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <HardFault_Handler+0x4>

0800379c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <MemManage_Handler+0x4>

080037a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <BusFault_Handler+0x4>

080037a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <UsageFault_Handler+0x4>

080037ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037c4:	f002 fa88 	bl	8005cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}

080037cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <TIM6_DAC_IRQHandler+0x10>)
 80037d2:	f008 fe8a 	bl	800c4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000c10 	.word	0x20000c10

080037e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <DMA2_Stream0_IRQHandler+0x10>)
 80037e6:	f001 fc57 	bl	8005098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200003d8 	.word	0x200003d8

080037f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <DMA2_Stream1_IRQHandler+0x10>)
 80037fa:	f001 fc4d 	bl	8005098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000624 	.word	0x20000624

08003808 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <DMA2_Stream4_IRQHandler+0x10>)
 800380e:	f001 fc43 	bl	8005098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200009d4 	.word	0x200009d4

0800381c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <OTG_FS_IRQHandler+0x10>)
 8003822:	f002 fc61 	bl	80060e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200410a0 	.word	0x200410a0

08003830 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA2_Stream7_IRQHandler+0x10>)
 8003836:	f001 fc2f 	bl	8005098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000484 	.word	0x20000484

08003844 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DCMI_IRQHandler+0x10>)
 800384a:	f001 fa15 	bl	8004c78 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000894 	.word	0x20000894

08003858 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA2D_IRQHandler+0x10>)
 800385e:	f001 fea1 	bl	80055a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000ab8 	.word	0x20000ab8

0800386c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <QUADSPI_IRQHandler+0x10>)
 8003872:	f004 fbf3 	bl	800805c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000bc4 	.word	0x20000bc4

08003880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	return 1;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_kill>:

int _kill(int pid, int sig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800389a:	f00d feff 	bl	801169c <__errno>
 800389e:	4603      	mov	r3, r0
 80038a0:	2216      	movs	r2, #22
 80038a2:	601a      	str	r2, [r3, #0]
	return -1;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_exit>:

void _exit (int status)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffe7 	bl	8003890 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038c2:	e7fe      	b.n	80038c2 <_exit+0x12>

080038c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e00a      	b.n	80038ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038d6:	f3af 8000 	nop.w
 80038da:	4601      	mov	r1, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	b2ca      	uxtb	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3301      	adds	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	dbf0      	blt.n	80038d6 <_read+0x12>
	}

return len;
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e009      	b.n	8003924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	60ba      	str	r2, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f893 	bl	8003a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3301      	adds	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	dbf1      	blt.n	8003910 <_write+0x12>
	}
	return len;
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_close>:

int _close(int file)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
	return -1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800395e:	605a      	str	r2, [r3, #4]
	return 0;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_isatty>:

int _isatty(int file)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	return 1;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
	return 0;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <_sbrk+0x5c>)
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <_sbrk+0x60>)
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <_sbrk+0x64>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <_sbrk+0x64>)
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <_sbrk+0x68>)
 80039c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <_sbrk+0x64>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d207      	bcs.n	80039e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d0:	f00d fe64 	bl	801169c <__errno>
 80039d4:	4603      	mov	r3, r0
 80039d6:	220c      	movs	r2, #12
 80039d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039de:	e009      	b.n	80039f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_sbrk+0x64>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <_sbrk+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <_sbrk+0x64>)
 80039f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20050000 	.word	0x20050000
 8003a00:	00000800 	.word	0x00000800
 8003a04:	2000020c 	.word	0x2000020c
 8003a08:	200413b8 	.word	0x200413b8

08003a0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <SystemInit+0x20>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <SystemInit+0x20>)
 8003a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003a34:	2102      	movs	r1, #2
 8003a36:	4802      	ldr	r0, [pc, #8]	; (8003a40 <LED_Toggle+0x10>)
 8003a38:	f002 f933 	bl	8005ca2 <HAL_GPIO_TogglePin>

}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40022000 	.word	0x40022000

08003a44 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003a4c:	1d39      	adds	r1, r7, #4
 8003a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a52:	2201      	movs	r2, #1
 8003a54:	4803      	ldr	r0, [pc, #12]	; (8003a64 <__io_putchar+0x20>)
 8003a56:	f009 fd75 	bl	800d544 <HAL_UART_Transmit>
	return ch;
 8003a5a:	687b      	ldr	r3, [r7, #4]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200008e4 	.word	0x200008e4

08003a68 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <LCD_Init+0x44>)
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d002      	beq.n	8003a7a <LCD_Init+0x12>
 8003a74:	480e      	ldr	r0, [pc, #56]	; (8003ab0 <LCD_Init+0x48>)
 8003a76:	f7fe fe2b 	bl	80026d0 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <LCD_Init+0x4c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4619      	mov	r1, r3
 8003a82:	480a      	ldr	r0, [pc, #40]	; (8003aac <LCD_Init+0x44>)
 8003a84:	f004 f83e 	bl	8007b04 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003a88:	f000 f81a 	bl	8003ac0 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <LCD_Init+0x50>)
 8003a8e:	f000 f87d 	bl	8003b8c <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a96:	f000 f861 	bl	8003b5c <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003a9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003a9e:	f000 f82d 	bl	8003afc <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <LCD_Init+0x54>)
 8003aa4:	f000 f842 	bl	8003b2c <LCD_SetFillColor>


}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200007a4 	.word	0x200007a4
 8003ab0:	080141fc 	.word	0x080141fc
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	20000008 	.word	0x20000008
 8003abc:	ffff0000 	.word	0xffff0000

08003ac0 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <LCD_DisplayOn+0x30>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <LCD_DisplayOn+0x30>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ada:	4806      	ldr	r0, [pc, #24]	; (8003af4 <LCD_DisplayOn+0x34>)
 8003adc:	f002 f8c8 	bl	8005c70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2108      	movs	r1, #8
 8003ae4:	4804      	ldr	r0, [pc, #16]	; (8003af8 <LCD_DisplayOn+0x38>)
 8003ae6:	f002 f8c3 	bl	8005c70 <HAL_GPIO_WritePin>
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200007a4 	.word	0x200007a4
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022800 	.word	0x40022800

08003afc <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8003b04:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <LCD_SetStrokeColor+0x28>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <LCD_SetStrokeColor+0x28>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f84c 	bl	8003bac <ARGB888ToRGB565>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <LCD_SetStrokeColor+0x2c>)
 8003b1a:	601a      	str	r2, [r3, #0]
#endif
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000210 	.word	0x20000210
 8003b28:	2000021c 	.word	0x2000021c

08003b2c <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <LCD_SetFillColor+0x28>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <LCD_SetFillColor+0x28>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f834 	bl	8003bac <ARGB888ToRGB565>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <LCD_SetFillColor+0x2c>)
 8003b4a:	601a      	str	r2, [r3, #0]
#endif
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000214 	.word	0x20000214
 8003b58:	20000220 	.word	0x20000220

08003b5c <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <LCD_SetBackColor+0x28>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <LCD_SetBackColor+0x28>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f81c 	bl	8003bac <ARGB888ToRGB565>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <LCD_SetBackColor+0x2c>)
 8003b7a:	601a      	str	r2, [r3, #0]
#endif
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000218 	.word	0x20000218
 8003b88:	20000224 	.word	0x20000224

08003b8c <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <LCD_SetFont+0x1c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000228 	.word	0x20000228

08003bac <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8003bc4:	7d7b      	ldrb	r3, [r7, #21]
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8003bd2:	7dbb      	ldrb	r3, [r7, #22]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	015b      	lsls	r3, r3, #5
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003be0:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	02db      	lsls	r3, r3, #11
 8003bea:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8003bec:	89fa      	ldrh	r2, [r7, #14]
 8003bee:	8a3b      	ldrh	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	8a7b      	ldrh	r3, [r7, #18]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b090      	sub	sp, #64	; 0x40
 8003c0c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c12:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003c14:	23eb      	movs	r3, #235	; 0xeb
 8003c16:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003c18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c22:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003c28:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003c2e:	230a      	movs	r3, #10
 8003c30:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c36:	2300      	movs	r3, #0
 8003c38:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003c46:	463a      	mov	r2, r7
 8003c48:	f107 0308 	add.w	r3, r7, #8
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4806      	ldr	r0, [pc, #24]	; (8003c68 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8003c50:	f004 fdd2 	bl	80087f8 <HAL_QSPI_MemoryMapped>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3740      	adds	r7, #64	; 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000bc4 	.word	0x20000bc4

08003c6c <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	; 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c78:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003c7a:	2366      	movs	r3, #102	; 0x66
 8003c7c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c92:	2300      	movs	r3, #0
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c96:	2300      	movs	r3, #0
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f004 fb99 	bl	80083dc <HAL_QSPI_Command>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e019      	b.n	8003ce8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8003cb4:	2399      	movs	r3, #153	; 0x99
 8003cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f004 fb8a 	bl	80083dc <HAL_QSPI_Command>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00a      	b.n	8003ce8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8c7 	bl	8003e6a <QSPI_AutoPollingMemReady>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3740      	adds	r7, #64	; 0x40
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b094      	sub	sp, #80	; 0x50
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003cfe:	2385      	movs	r3, #133	; 0x85
 8003d00:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003d14:	2301      	movs	r3, #1
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d20:	2300      	movs	r3, #0
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f004 fb54 	bl	80083dc <HAL_QSPI_Command>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e048      	b.n	8003dd0 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d3e:	f107 030f 	add.w	r3, r7, #15
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f004 fc3c 	bl	80085c6 <HAL_QSPI_Receive>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e03b      	b.n	8003dd0 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f83d 	bl	8003dd8 <QSPI_WriteEnable>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e033      	b.n	8003dd0 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003d68:	2381      	movs	r3, #129	; 0x81
 8003d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	23f0      	movs	r3, #240	; 0xf0
 8003d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	230a      	movs	r3, #10
 8003d8e:	408b      	lsls	r3, r1
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f004 fb19 	bl	80083dc <HAL_QSPI_Command>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e00d      	b.n	8003dd0 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003db4:	f107 030f 	add.w	r3, r7, #15
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f004 fb6a 	bl	8008498 <HAL_QSPI_Transmit>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3750      	adds	r7, #80	; 0x50
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b096      	sub	sp, #88	; 0x58
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003de6:	2306      	movs	r3, #6
 8003de8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e02:	2300      	movs	r3, #0
 8003e04:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e06:	f107 0320 	add.w	r3, r7, #32
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f004 fae3 	bl	80083dc <HAL_QSPI_Command>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e020      	b.n	8003e62 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8003e20:	2302      	movs	r3, #2
 8003e22:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003e24:	2302      	movs	r3, #2
 8003e26:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003e30:	2310      	movs	r3, #16
 8003e32:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e38:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e44:	f107 0208 	add.w	r2, r7, #8
 8003e48:	f107 0120 	add.w	r1, r7, #32
 8003e4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f004 fc5a 	bl	800870a <HAL_QSPI_AutoPolling>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3758      	adds	r7, #88	; 0x58
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b096      	sub	sp, #88	; 0x58
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003eac:	2310      	movs	r3, #16
 8003eae:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eb4:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003eb6:	f107 0208 	add.w	r2, r7, #8
 8003eba:	f107 0120 	add.w	r1, r7, #32
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f004 fc22 	bl	800870a <HAL_QSPI_AutoPolling>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3758      	adds	r7, #88	; 0x58
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003eee:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003efa:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f04:	4923      	ldr	r1, [pc, #140]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f06:	4824      	ldr	r0, [pc, #144]	; (8003f98 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f08:	f008 f921 	bl	800c14e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 f913 	bl	8004138 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	4919      	ldr	r1, [pc, #100]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f30:	4819      	ldr	r0, [pc, #100]	; (8003f98 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f32:	f008 f90c 	bl	800c14e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f38:	2203      	movs	r2, #3
 8003f3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f3e:	2210      	movs	r2, #16
 8003f40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f44:	2208      	movs	r2, #8
 8003f46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f52:	4910      	ldr	r1, [pc, #64]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f54:	4810      	ldr	r0, [pc, #64]	; (8003f98 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f56:	f008 f8fa 	bl	800c14e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003f5a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003f5e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f62:	2204      	movs	r2, #4
 8003f64:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f68:	2210      	movs	r2, #16
 8003f6a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f76:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7c:	4905      	ldr	r1, [pc, #20]	; (8003f94 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f7e:	4806      	ldr	r0, [pc, #24]	; (8003f98 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f80:	f008 f8e5 	bl	800c14e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4804      	ldr	r0, [pc, #16]	; (8003f98 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f88:	f008 f90c 	bl	800c1a4 <HAL_SDRAM_ProgramRefreshRate>
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	2000022c 	.word	0x2000022c
 8003f98:	20000b90 	.word	0x20000b90

08003f9c <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8003fa2:	f000 fc89 	bl	80048b8 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8003faa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8003fae:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8003fb0:	231b      	movs	r3, #27
 8003fb2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fca6 	bl	8004928 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8003fe0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8003fe4:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003fe6:	2317      	movs	r3, #23
 8003fe8:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003fea:	2303      	movs	r3, #3
 8003fec:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004002:	2300      	movs	r3, #0
 8004004:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800400a:	463b      	mov	r3, r7
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fc8b 	bl	8004928 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004012:	2301      	movs	r3, #1
 8004014:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8004016:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800401a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800401c:	2316      	movs	r3, #22
 800401e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004020:	2303      	movs	r3, #3
 8004022:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004028:	2301      	movs	r3, #1
 800402a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800402c:	2301      	movs	r3, #1
 800402e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004030:	2300      	movs	r3, #0
 8004032:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004034:	2300      	movs	r3, #0
 8004036:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004038:	2300      	movs	r3, #0
 800403a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800403c:	2301      	movs	r3, #1
 800403e:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004040:	463b      	mov	r3, r7
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fc70 	bl	8004928 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004048:	2301      	movs	r3, #1
 800404a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 800404c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004050:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004052:	2312      	movs	r3, #18
 8004054:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004056:	2303      	movs	r3, #3
 8004058:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004062:	2300      	movs	r3, #0
 8004064:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004066:	2301      	movs	r3, #1
 8004068:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800406a:	2300      	movs	r3, #0
 800406c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800406e:	2300      	movs	r3, #0
 8004070:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004076:	463b      	mov	r3, r7
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fc55 	bl	8004928 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800407e:	2004      	movs	r0, #4
 8004080:	f000 fc32 	bl	80048e8 <HAL_MPU_Enable>

}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800408c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004090:	480d      	ldr	r0, [pc, #52]	; (80040c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004092:	490e      	ldr	r1, [pc, #56]	; (80040cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004098:	e002      	b.n	80040a0 <LoopCopyDataInit>

0800409a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800409a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800409c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800409e:	3304      	adds	r3, #4

080040a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a4:	d3f9      	bcc.n	800409a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040a6:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040a8:	4c0b      	ldr	r4, [pc, #44]	; (80040d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040ac:	e001      	b.n	80040b2 <LoopFillZerobss>

080040ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040b0:	3204      	adds	r2, #4

080040b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b4:	d3fb      	bcc.n	80040ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040b6:	f7ff fca9 	bl	8003a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ba:	f00d faf5 	bl	80116a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040be:	f7fc ffdb 	bl	8001078 <main>
  bx  lr    
 80040c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80040c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80040d0:	08019210 	.word	0x08019210
  ldr r2, =_sbss
 80040d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80040d8:	200413b4 	.word	0x200413b4

080040dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040dc:	e7fe      	b.n	80040dc <ADC_IRQHandler>

080040de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e2:	2003      	movs	r0, #3
 80040e4:	f000 fba5 	bl	8004832 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7ff faf9 	bl	80036e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80040ee:	f7fe fb19 	bl	8002724 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_IncTick+0x20>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_IncTick+0x24>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4413      	add	r3, r2
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_IncTick+0x24>)
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000014 	.word	0x20000014
 800411c:	2004085c 	.word	0x2004085c

08004120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return uwTick;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_GetTick+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2004085c 	.word	0x2004085c

08004138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004140:	f7ff ffee 	bl	8004120 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004150:	d005      	beq.n	800415e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_Delay+0x44>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800415e:	bf00      	nop
 8004160:	f7ff ffde 	bl	8004120 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d8f7      	bhi.n	8004160 <HAL_Delay+0x28>
  {
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000014 	.word	0x20000014

08004180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e031      	b.n	80041fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe fae8 	bl	8002774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_ADC_Init+0x84>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	f043 0202 	orr.w	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f964 	bl	800449c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
 80041ea:	e001      	b.n	80041f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	ffffeefd 	.word	0xffffeefd

08004208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e12a      	b.n	800447a <HAL_ADC_ConfigChannel+0x272>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b09      	cmp	r3, #9
 8004232:	d93a      	bls.n	80042aa <HAL_ADC_ConfigChannel+0xa2>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423c:	d035      	beq.n	80042aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68d9      	ldr	r1, [r3, #12]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	3b1e      	subs	r3, #30
 8004254:	2207      	movs	r2, #7
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	400a      	ands	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a87      	ldr	r2, [pc, #540]	; (8004488 <HAL_ADC_ConfigChannel+0x280>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10a      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004282:	e035      	b.n	80042f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68d9      	ldr	r1, [r3, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	4603      	mov	r3, r0
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4403      	add	r3, r0
 800429c:	3b1e      	subs	r3, #30
 800429e:	409a      	lsls	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042a8:	e022      	b.n	80042f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6919      	ldr	r1, [r3, #16]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	2207      	movs	r2, #7
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43da      	mvns	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	400a      	ands	r2, r1
 80042cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4618      	mov	r0, r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4403      	add	r3, r0
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d824      	bhi.n	8004342 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	3b05      	subs	r3, #5
 800430a:	221f      	movs	r2, #31
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43da      	mvns	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	400a      	ands	r2, r1
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	4618      	mov	r0, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	3b05      	subs	r3, #5
 8004334:	fa00 f203 	lsl.w	r2, r0, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	635a      	str	r2, [r3, #52]	; 0x34
 8004340:	e04c      	b.n	80043dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d824      	bhi.n	8004394 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	3b23      	subs	r3, #35	; 0x23
 800435c:	221f      	movs	r2, #31
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	400a      	ands	r2, r1
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4618      	mov	r0, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	3b23      	subs	r3, #35	; 0x23
 8004386:	fa00 f203 	lsl.w	r2, r0, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
 8004392:	e023      	b.n	80043dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	3b41      	subs	r3, #65	; 0x41
 80043a6:	221f      	movs	r2, #31
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43da      	mvns	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	400a      	ands	r2, r1
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	3b41      	subs	r3, #65	; 0x41
 80043d0:	fa00 f203 	lsl.w	r2, r0, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <HAL_ADC_ConfigChannel+0x284>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10a      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x1f4>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ee:	d105      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 80043f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_ADC_ConfigChannel+0x284>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d109      	bne.n	800441a <HAL_ADC_ConfigChannel+0x212>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b12      	cmp	r3, #18
 800440c:	d105      	bne.n	800441a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 8004414:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004418:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1b      	ldr	r2, [pc, #108]	; (800448c <HAL_ADC_ConfigChannel+0x284>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d125      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x268>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_ADC_ConfigChannel+0x280>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x22e>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b11      	cmp	r3, #17
 8004434:	d11c      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_ADC_ConfigChannel+0x288>)
 800443c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004440:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_ADC_ConfigChannel+0x280>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d111      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_ADC_ConfigChannel+0x28c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a11      	ldr	r2, [pc, #68]	; (8004498 <HAL_ADC_ConfigChannel+0x290>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0c9a      	lsrs	r2, r3, #18
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004462:	e002      	b.n	800446a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f9      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	10000012 	.word	0x10000012
 800448c:	40012000 	.word	0x40012000
 8004490:	40012300 	.word	0x40012300
 8004494:	20000000 	.word	0x20000000
 8004498:	431bde83 	.word	0x431bde83

0800449c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80044a4:	4b78      	ldr	r3, [pc, #480]	; (8004688 <ADC_Init+0x1ec>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a77      	ldr	r2, [pc, #476]	; (8004688 <ADC_Init+0x1ec>)
 80044aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80044ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80044b0:	4b75      	ldr	r3, [pc, #468]	; (8004688 <ADC_Init+0x1ec>)
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4973      	ldr	r1, [pc, #460]	; (8004688 <ADC_Init+0x1ec>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6899      	ldr	r1, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	4a58      	ldr	r2, [pc, #352]	; (800468c <ADC_Init+0x1f0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800453e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6899      	ldr	r1, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6899      	ldr	r1, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	e00f      	b.n	8004596 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0202 	bic.w	r2, r2, #2
 80045a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	005a      	lsls	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01b      	beq.n	80045fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	3b01      	subs	r3, #1
 80045f0:	035a      	lsls	r2, r3, #13
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e007      	b.n	800460c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	3b01      	subs	r3, #1
 8004628:	051a      	lsls	r2, r3, #20
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6899      	ldr	r1, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800464e:	025a      	lsls	r2, r3, #9
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6899      	ldr	r1, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	029a      	lsls	r2, r3, #10
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40012300 	.word	0x40012300
 800468c:	0f000001 	.word	0x0f000001

08004690 <__NVIC_SetPriorityGrouping>:
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <__NVIC_SetPriorityGrouping+0x40>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046ac:	4013      	ands	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <__NVIC_SetPriorityGrouping+0x44>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <__NVIC_SetPriorityGrouping+0x40>)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	60d3      	str	r3, [r2, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	05fa0000 	.word	0x05fa0000

080046d8 <__NVIC_GetPriorityGrouping>:
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <__NVIC_GetPriorityGrouping+0x18>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	f003 0307 	and.w	r3, r3, #7
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_EnableIRQ>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	2b00      	cmp	r3, #0
 8004704:	db0b      	blt.n	800471e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	f003 021f 	and.w	r2, r3, #31
 800470c:	4907      	ldr	r1, [pc, #28]	; (800472c <__NVIC_EnableIRQ+0x38>)
 800470e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2001      	movs	r0, #1
 8004716:	fa00 f202 	lsl.w	r2, r0, r2
 800471a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000e100 	.word	0xe000e100

08004730 <__NVIC_DisableIRQ>:
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db12      	blt.n	8004768 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	490a      	ldr	r1, [pc, #40]	; (8004774 <__NVIC_DisableIRQ+0x44>)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2001      	movs	r0, #1
 8004752:	fa00 f202 	lsl.w	r2, r0, r2
 8004756:	3320      	adds	r3, #32
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800475c:	f3bf 8f4f 	dsb	sy
}
 8004760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004762:	f3bf 8f6f 	isb	sy
}
 8004766:	bf00      	nop
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000e100 	.word	0xe000e100

08004778 <__NVIC_SetPriority>:
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	2b00      	cmp	r3, #0
 800478a:	db0a      	blt.n	80047a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <__NVIC_SetPriority+0x4c>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	440b      	add	r3, r1
 800479c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047a0:	e00a      	b.n	80047b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4908      	ldr	r1, [pc, #32]	; (80047c8 <__NVIC_SetPriority+0x50>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3b04      	subs	r3, #4
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	440b      	add	r3, r1
 80047b6:	761a      	strb	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000e100 	.word	0xe000e100
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <NVIC_EncodePriority>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	; 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	bf28      	it	cs
 80047ea:	2304      	movcs	r3, #4
 80047ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d902      	bls.n	80047fc <NVIC_EncodePriority+0x30>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3b03      	subs	r3, #3
 80047fa:	e000      	b.n	80047fe <NVIC_EncodePriority+0x32>
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	401a      	ands	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	43d9      	mvns	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	4313      	orrs	r3, r2
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	; 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ff28 	bl	8004690 <__NVIC_SetPriorityGrouping>
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800485a:	f7ff ff3d 	bl	80046d8 <__NVIC_GetPriorityGrouping>
 800485e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	6978      	ldr	r0, [r7, #20]
 8004866:	f7ff ffb1 	bl	80047cc <NVIC_EncodePriority>
 800486a:	4602      	mov	r2, r0
 800486c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff80 	bl	8004778 <__NVIC_SetPriority>
}
 8004878:	bf00      	nop
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff30 	bl	80046f4 <__NVIC_EnableIRQ>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff40 	bl	8004730 <__NVIC_DisableIRQ>
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80048bc:	f3bf 8f5f 	dmb	sy
}
 80048c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_MPU_Disable+0x28>)
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <HAL_MPU_Disable+0x28>)
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048cc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_MPU_Disable+0x2c>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000ed00 	.word	0xe000ed00
 80048e4:	e000ed90 	.word	0xe000ed90

080048e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <HAL_MPU_Enable+0x38>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_MPU_Enable+0x3c>)
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_MPU_Enable+0x3c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004906:	f3bf 8f4f 	dsb	sy
}
 800490a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800490c:	f3bf 8f6f 	isb	sy
}
 8004910:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	e000ed90 	.word	0xe000ed90
 8004924:	e000ed00 	.word	0xe000ed00

08004928 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	785a      	ldrb	r2, [r3, #1]
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <HAL_MPU_ConfigRegion+0x84>)
 8004936:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d029      	beq.n	8004994 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004940:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_MPU_ConfigRegion+0x84>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7b1b      	ldrb	r3, [r3, #12]
 800494c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7adb      	ldrb	r3, [r3, #11]
 8004952:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004954:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	7a9b      	ldrb	r3, [r3, #10]
 800495a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800495c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7b5b      	ldrb	r3, [r3, #13]
 8004962:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004964:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7b9b      	ldrb	r3, [r3, #14]
 800496a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800496c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7bdb      	ldrb	r3, [r3, #15]
 8004972:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004974:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	7a5b      	ldrb	r3, [r3, #9]
 800497a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800497c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7a1b      	ldrb	r3, [r3, #8]
 8004982:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004984:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800498c:	4a07      	ldr	r2, [pc, #28]	; (80049ac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800498e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004990:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004992:	e005      	b.n	80049a0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_MPU_ConfigRegion+0x84>)
 8004996:	2200      	movs	r2, #0
 8004998:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_MPU_ConfigRegion+0x84>)
 800499c:	2200      	movs	r2, #0
 800499e:	611a      	str	r2, [r3, #16]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed90 	.word	0xe000ed90

080049b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e054      	b.n	8004a6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7f5b      	ldrb	r3, [r3, #29]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd ff28 	bl	8002828 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	791b      	ldrb	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_CRC_Init+0xc4>)
 80049ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0218 	bic.w	r2, r2, #24
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e00c      	b.n	8004a1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6899      	ldr	r1, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f834 	bl	8004a78 <HAL_CRCEx_Polynomial_Set>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e028      	b.n	8004a6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	795b      	ldrb	r3, [r3, #5]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a2a:	611a      	str	r2, [r3, #16]
 8004a2c:	e004      	b.n	8004a38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6912      	ldr	r2, [r2, #16]
 8004a36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	04c11db7 	.word	0x04c11db7

08004a78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a88:	231f      	movs	r3, #31
 8004a8a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a8c:	bf00      	nop
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	613a      	str	r2, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_CRCEx_Polynomial_Set+0x34>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_CRCEx_Polynomial_Set+0x16>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b18      	cmp	r3, #24
 8004ab0:	d846      	bhi.n	8004b40 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004b47 	.word	0x08004b47
 8004abc:	08004b41 	.word	0x08004b41
 8004ac0:	08004b41 	.word	0x08004b41
 8004ac4:	08004b41 	.word	0x08004b41
 8004ac8:	08004b41 	.word	0x08004b41
 8004acc:	08004b41 	.word	0x08004b41
 8004ad0:	08004b41 	.word	0x08004b41
 8004ad4:	08004b41 	.word	0x08004b41
 8004ad8:	08004b35 	.word	0x08004b35
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004b41 	.word	0x08004b41
 8004ae4:	08004b41 	.word	0x08004b41
 8004ae8:	08004b41 	.word	0x08004b41
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004b41 	.word	0x08004b41
 8004af4:	08004b41 	.word	0x08004b41
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b41 	.word	0x08004b41
 8004b00:	08004b41 	.word	0x08004b41
 8004b04:	08004b41 	.word	0x08004b41
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b1d 	.word	0x08004b1d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d913      	bls.n	8004b4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b26:	e010      	b.n	8004b4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	d90f      	bls.n	8004b4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b32:	e00c      	b.n	8004b4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d90b      	bls.n	8004b52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b3e:	e008      	b.n	8004b52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	e006      	b.n	8004b54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b46:	bf00      	nop
 8004b48:	e004      	b.n	8004b54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b52:	bf00      	nop
  }
  if (status == HAL_OK)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 0118 	bic.w	r1, r3, #24
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e069      	b.n	8004c6a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd fe60 	bl	8002868 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <HAL_DCMI_Init+0xf0>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004be2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004bee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004bfa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004c06:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004c12:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d112      	bne.n	8004c4a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7f1b      	ldrb	r3, [r3, #28]
 8004c28:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	7f5b      	ldrb	r3, [r3, #29]
 8004c2e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c30:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7f9b      	ldrb	r3, [r3, #30]
 8004c36:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7fdb      	ldrb	r3, [r3, #31]
 8004c40:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004c46:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004c48:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 021e 	orr.w	r2, r2, #30
 8004c58:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	ffe0f007 	.word	0xffe0f007

08004c78 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2204      	movs	r2, #4
 8004c98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	f043 0202 	orr.w	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb2:	4a35      	ldr	r2, [pc, #212]	; (8004d88 <HAL_DCMI_IRQHandler+0x110>)
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f9ca 	bl	8005054 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01e      	beq.n	8004d08 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <HAL_DCMI_IRQHandler+0x110>)
 8004cec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f9ae 	bl	8005054 <HAL_DMA_Abort_IT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d004      	beq.n	8004d08 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f86a 	bl	8004ddc <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d006      	beq.n	8004d20 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f840 	bl	8004da0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f83e 	bl	8004db4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01d      	beq.n	8004d7e <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d107      	bne.n	8004d60 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 021e 	bic.w	r2, r2, #30
 8004d5e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2201      	movs	r2, #1
 8004d76:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f825 	bl	8004dc8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	08004ddd 	.word	0x08004ddd

08004d8c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d009      	beq.n	8004e08 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff ffbf 	bl	8004d8c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e24:	f7ff f97c 	bl	8004120 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e099      	b.n	8004f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e54:	e00f      	b.n	8004e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e56:	f7ff f963 	bl	8004120 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d908      	bls.n	8004e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e078      	b.n	8004f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e8      	bne.n	8004e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4b38      	ldr	r3, [pc, #224]	; (8004f70 <HAL_DMA_Init+0x158>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d107      	bne.n	8004ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0307 	bic.w	r3, r3, #7
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d117      	bne.n	8004f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fa7b 	bl	8005418 <DMA_CheckFifoParam>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f36:	2301      	movs	r3, #1
 8004f38:	e016      	b.n	8004f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa32 	bl	80053ac <DMA_CalcBaseAndBitshift>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	223f      	movs	r2, #63	; 0x3f
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	f010803f 	.word	0xf010803f

08004f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f82:	f7ff f8cd 	bl	8004120 <HAL_GetTick>
 8004f86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d008      	beq.n	8004fa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e052      	b.n	800504c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0216 	bic.w	r2, r2, #22
 8004fb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_DMA_Abort+0x62>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0208 	bic.w	r2, r2, #8
 8004fe4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff6:	e013      	b.n	8005020 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ff8:	f7ff f892 	bl	8004120 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b05      	cmp	r3, #5
 8005004:	d90c      	bls.n	8005020 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2203      	movs	r2, #3
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e015      	b.n	800504c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e4      	bne.n	8004ff8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	223f      	movs	r2, #63	; 0x3f
 8005034:	409a      	lsls	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e00c      	b.n	800508c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2205      	movs	r2, #5
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80050a4:	4b92      	ldr	r3, [pc, #584]	; (80052f0 <HAL_DMA_IRQHandler+0x258>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a92      	ldr	r2, [pc, #584]	; (80052f4 <HAL_DMA_IRQHandler+0x25c>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	2208      	movs	r2, #8
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d013      	beq.n	8005104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0204 	bic.w	r2, r2, #4
 80050ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f0:	2208      	movs	r2, #8
 80050f2:	409a      	lsls	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	2201      	movs	r2, #1
 800510a:	409a      	lsls	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	f043 0202 	orr.w	r2, r3, #2
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513e:	2204      	movs	r2, #4
 8005140:	409a      	lsls	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	2204      	movs	r2, #4
 800515e:	409a      	lsls	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 0204 	orr.w	r2, r3, #4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	2210      	movs	r2, #16
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d043      	beq.n	8005208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03c      	beq.n	8005208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	2210      	movs	r2, #16
 8005194:	409a      	lsls	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d018      	beq.n	80051da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d024      	beq.n	8005208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
 80051c6:	e01f      	b.n	8005208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
 80051d8:	e016      	b.n	8005208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0208 	bic.w	r2, r2, #8
 80051f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	2220      	movs	r2, #32
 800520e:	409a      	lsls	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 808e 	beq.w	8005336 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8086 	beq.w	8005336 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	2220      	movs	r2, #32
 8005230:	409a      	lsls	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b05      	cmp	r3, #5
 8005240:	d136      	bne.n	80052b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0216 	bic.w	r2, r2, #22
 8005250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_DMA_IRQHandler+0x1da>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0208 	bic.w	r2, r2, #8
 8005280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	223f      	movs	r2, #63	; 0x3f
 8005288:	409a      	lsls	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d07d      	beq.n	80053a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
        }
        return;
 80052ae:	e078      	b.n	80053a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01c      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d108      	bne.n	80052de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d030      	beq.n	8005336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
 80052dc:	e02b      	b.n	8005336 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d027      	beq.n	8005336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
 80052ee:	e022      	b.n	8005336 <HAL_DMA_IRQHandler+0x29e>
 80052f0:	20000000 	.word	0x20000000
 80052f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0210 	bic.w	r2, r2, #16
 8005314:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d032      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d022      	beq.n	8005390 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2205      	movs	r2, #5
 800534e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3301      	adds	r3, #1
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	429a      	cmp	r2, r3
 800536c:	d307      	bcc.n	800537e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f2      	bne.n	8005362 <HAL_DMA_IRQHandler+0x2ca>
 800537c:	e000      	b.n	8005380 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800537e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	4798      	blx	r3
 80053a0:	e000      	b.n	80053a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80053a2:	bf00      	nop
    }
  }
}
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	3b10      	subs	r3, #16
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <DMA_CalcBaseAndBitshift+0x60>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053c6:	4a12      	ldr	r2, [pc, #72]	; (8005410 <DMA_CalcBaseAndBitshift+0x64>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d908      	bls.n	80053ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <DMA_CalcBaseAndBitshift+0x68>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	659a      	str	r2, [r3, #88]	; 0x58
 80053ea:	e006      	b.n	80053fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <DMA_CalcBaseAndBitshift+0x68>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	aaaaaaab 	.word	0xaaaaaaab
 8005410:	08015d1c 	.word	0x08015d1c
 8005414:	fffffc00 	.word	0xfffffc00

08005418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d11f      	bne.n	8005472 <DMA_CheckFifoParam+0x5a>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d856      	bhi.n	80054e6 <DMA_CheckFifoParam+0xce>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <DMA_CheckFifoParam+0x28>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005451 	.word	0x08005451
 8005444:	08005463 	.word	0x08005463
 8005448:	08005451 	.word	0x08005451
 800544c:	080054e7 	.word	0x080054e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d046      	beq.n	80054ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e043      	b.n	80054ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800546a:	d140      	bne.n	80054ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005470:	e03d      	b.n	80054ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	d121      	bne.n	80054c0 <DMA_CheckFifoParam+0xa8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d837      	bhi.n	80054f2 <DMA_CheckFifoParam+0xda>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <DMA_CheckFifoParam+0x70>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	0800549f 	.word	0x0800549f
 8005490:	08005499 	.word	0x08005499
 8005494:	080054b1 	.word	0x080054b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e030      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d025      	beq.n	80054f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ae:	e022      	b.n	80054f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054b8:	d11f      	bne.n	80054fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054be:	e01c      	b.n	80054fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d903      	bls.n	80054ce <DMA_CheckFifoParam+0xb6>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d003      	beq.n	80054d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054cc:	e018      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
      break;
 80054d2:	e015      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	e00b      	b.n	80054fe <DMA_CheckFifoParam+0xe6>
      break;
 80054e6:	bf00      	nop
 80054e8:	e00a      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054ea:	bf00      	nop
 80054ec:	e008      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e006      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e004      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;   
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <DMA_CheckFifoParam+0xe8>
      break;
 80054fe:	bf00      	nop
    }
  } 
  
  return status; 
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e039      	b.n	8005596 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fd fa90 	bl	8002a5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	f023 0107 	bic.w	r1, r3, #7
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <HAL_DMA2D_Init+0x90>)
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	68d1      	ldr	r1, [r2, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	430b      	orrs	r3, r1
 8005584:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	ffffc000 	.word	0xffffc000

080055a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d026      	beq.n	8005614 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d021      	beq.n	8005614 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	f043 0201 	orr.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d026      	beq.n	800566c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d021      	beq.n	800566c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005636:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2220      	movs	r2, #32
 800563e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	f043 0202 	orr.w	r2, r3, #2
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2204      	movs	r2, #4
 8005650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d026      	beq.n	80056c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567c:	2b00      	cmp	r3, #0
 800567e:	d021      	beq.n	80056c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2208      	movs	r2, #8
 8005696:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	f043 0204 	orr.w	r2, r3, #4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2204      	movs	r2, #4
 80056ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f853 	bl	800579c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d024      	beq.n	800574a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2202      	movs	r2, #2
 8005720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01f      	beq.n	8005794 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01a      	beq.n	8005794 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f80e 	bl	80057b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_DMA2D_ConfigLayer+0x20>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e079      	b.n	80058d8 <HAL_DMA2D_ConfigLayer+0x114>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	3318      	adds	r3, #24
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800580e:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8005810:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b0a      	cmp	r3, #10
 8005818:	d003      	beq.n	8005822 <HAL_DMA2D_ConfigLayer+0x5e>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d107      	bne.n	8005832 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e005      	b.n	800583e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d120      	bne.n	8005886 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	43db      	mvns	r3, r3
 800584e:	ea02 0103 	and.w	r1, r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	430a      	orrs	r2, r1
 800585a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b0a      	cmp	r3, #10
 800586c:	d003      	beq.n	8005876 <HAL_DMA2D_ConfigLayer+0xb2>
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b09      	cmp	r3, #9
 8005874:	d127      	bne.n	80058c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005882:	629a      	str	r2, [r3, #40]	; 0x28
 8005884:	e01f      	b.n	80058c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	ea02 0103 	and.w	r1, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b0a      	cmp	r3, #10
 80058ae:	d003      	beq.n	80058b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b09      	cmp	r3, #9
 80058b6:	d106      	bne.n	80058c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	ff03000f 	.word	0xff03000f

080058e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e175      	b.n	8005bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005908:	2201      	movs	r2, #1
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4013      	ands	r3, r2
 800591a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	429a      	cmp	r2, r3
 8005922:	f040 8164 	bne.w	8005bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d00b      	beq.n	8005946 <HAL_GPIO_Init+0x5e>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d007      	beq.n	8005946 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800593a:	2b11      	cmp	r3, #17
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b12      	cmp	r3, #18
 8005944:	d130      	bne.n	80059a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	2203      	movs	r2, #3
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800597c:	2201      	movs	r2, #1
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 0201 	and.w	r2, r3, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	2203      	movs	r2, #3
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x100>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b12      	cmp	r3, #18
 80059e6:	d123      	bne.n	8005a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	08da      	lsrs	r2, r3, #3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3208      	adds	r2, #8
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	220f      	movs	r2, #15
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	08da      	lsrs	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3208      	adds	r2, #8
 8005a2a:	69b9      	ldr	r1, [r7, #24]
 8005a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 0203 	and.w	r2, r3, #3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80be 	beq.w	8005bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a72:	4b66      	ldr	r3, [pc, #408]	; (8005c0c <HAL_GPIO_Init+0x324>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	4a65      	ldr	r2, [pc, #404]	; (8005c0c <HAL_GPIO_Init+0x324>)
 8005a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <HAL_GPIO_Init+0x324>)
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a8a:	4a61      	ldr	r2, [pc, #388]	; (8005c10 <HAL_GPIO_Init+0x328>)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	3302      	adds	r3, #2
 8005a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a58      	ldr	r2, [pc, #352]	; (8005c14 <HAL_GPIO_Init+0x32c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d037      	beq.n	8005b26 <HAL_GPIO_Init+0x23e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a57      	ldr	r2, [pc, #348]	; (8005c18 <HAL_GPIO_Init+0x330>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d031      	beq.n	8005b22 <HAL_GPIO_Init+0x23a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a56      	ldr	r2, [pc, #344]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d02b      	beq.n	8005b1e <HAL_GPIO_Init+0x236>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a55      	ldr	r2, [pc, #340]	; (8005c20 <HAL_GPIO_Init+0x338>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d025      	beq.n	8005b1a <HAL_GPIO_Init+0x232>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a54      	ldr	r2, [pc, #336]	; (8005c24 <HAL_GPIO_Init+0x33c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <HAL_GPIO_Init+0x22e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a53      	ldr	r2, [pc, #332]	; (8005c28 <HAL_GPIO_Init+0x340>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d019      	beq.n	8005b12 <HAL_GPIO_Init+0x22a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a52      	ldr	r2, [pc, #328]	; (8005c2c <HAL_GPIO_Init+0x344>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_GPIO_Init+0x226>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a51      	ldr	r2, [pc, #324]	; (8005c30 <HAL_GPIO_Init+0x348>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00d      	beq.n	8005b0a <HAL_GPIO_Init+0x222>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a50      	ldr	r2, [pc, #320]	; (8005c34 <HAL_GPIO_Init+0x34c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <HAL_GPIO_Init+0x21e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a4f      	ldr	r2, [pc, #316]	; (8005c38 <HAL_GPIO_Init+0x350>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <HAL_GPIO_Init+0x21a>
 8005afe:	2309      	movs	r3, #9
 8005b00:	e012      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b02:	230a      	movs	r3, #10
 8005b04:	e010      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b06:	2308      	movs	r3, #8
 8005b08:	e00e      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b0a:	2307      	movs	r3, #7
 8005b0c:	e00c      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b0e:	2306      	movs	r3, #6
 8005b10:	e00a      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b12:	2305      	movs	r3, #5
 8005b14:	e008      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b16:	2304      	movs	r3, #4
 8005b18:	e006      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e004      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e002      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_GPIO_Init+0x240>
 8005b26:	2300      	movs	r3, #0
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	f002 0203 	and.w	r2, r2, #3
 8005b2e:	0092      	lsls	r2, r2, #2
 8005b30:	4093      	lsls	r3, r2
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b38:	4935      	ldr	r1, [pc, #212]	; (8005c10 <HAL_GPIO_Init+0x328>)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	3302      	adds	r3, #2
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b46:	4b3d      	ldr	r3, [pc, #244]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b6a:	4a34      	ldr	r2, [pc, #208]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b70:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b94:	4a29      	ldr	r2, [pc, #164]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b9a:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <HAL_GPIO_Init+0x354>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	f67f ae86 	bls.w	8005908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	3724      	adds	r7, #36	; 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40013800 	.word	0x40013800
 8005c14:	40020000 	.word	0x40020000
 8005c18:	40020400 	.word	0x40020400
 8005c1c:	40020800 	.word	0x40020800
 8005c20:	40020c00 	.word	0x40020c00
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40021400 	.word	0x40021400
 8005c2c:	40021800 	.word	0x40021800
 8005c30:	40021c00 	.word	0x40021c00
 8005c34:	40022000 	.word	0x40022000
 8005c38:	40022400 	.word	0x40022400
 8005c3c:	40013c00 	.word	0x40013c00

08005c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
 8005c5c:	e001      	b.n	8005c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	807b      	strh	r3, [r7, #2]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c80:	787b      	ldrb	r3, [r7, #1]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c8c:	e003      	b.n	8005c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c8e:	887b      	ldrh	r3, [r7, #2]
 8005c90:	041a      	lsls	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	619a      	str	r2, [r3, #24]
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cb4:	887a      	ldrh	r2, [r7, #2]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	041a      	lsls	r2, r3, #16
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	43d9      	mvns	r1, r3
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d006      	beq.n	8005cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cee:	4a05      	ldr	r2, [pc, #20]	; (8005d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f806 	bl	8005d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40013c00 	.word	0x40013c00

08005d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b089      	sub	sp, #36	; 0x24
 8005d22:	af04      	add	r7, sp, #16
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	4608      	mov	r0, r1
 8005d28:	4611      	mov	r1, r2
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	70fb      	strb	r3, [r7, #3]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70bb      	strb	r3, [r7, #2]
 8005d34:	4613      	mov	r3, r2
 8005d36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_HCD_HC_Init+0x28>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e076      	b.n	8005e34 <HAL_HCD_HC_Init+0x116>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	212c      	movs	r1, #44	; 0x2c
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	333d      	adds	r3, #61	; 0x3d
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	212c      	movs	r1, #44	; 0x2c
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3338      	adds	r3, #56	; 0x38
 8005d6e:	787a      	ldrb	r2, [r7, #1]
 8005d70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	212c      	movs	r1, #44	; 0x2c
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3340      	adds	r3, #64	; 0x40
 8005d80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005d82:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	212c      	movs	r1, #44	; 0x2c
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	3339      	adds	r3, #57	; 0x39
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	212c      	movs	r1, #44	; 0x2c
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	4413      	add	r3, r2
 8005da2:	333f      	adds	r3, #63	; 0x3f
 8005da4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005da8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	78ba      	ldrb	r2, [r7, #2]
 8005dae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005db2:	b2d0      	uxtb	r0, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	212c      	movs	r1, #44	; 0x2c
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	333a      	adds	r3, #58	; 0x3a
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da09      	bge.n	8005de0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	333b      	adds	r3, #59	; 0x3b
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e008      	b.n	8005df2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	333b      	adds	r3, #59	; 0x3b
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	212c      	movs	r1, #44	; 0x2c
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	333c      	adds	r3, #60	; 0x3c
 8005e00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e04:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	787c      	ldrb	r4, [r7, #1]
 8005e0c:	78ba      	ldrb	r2, [r7, #2]
 8005e0e:	78f9      	ldrb	r1, [r7, #3]
 8005e10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e12:	9302      	str	r3, [sp, #8]
 8005e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4623      	mov	r3, r4
 8005e22:	f009 f817 	bl	800ee54 <USB_HC_Init>
 8005e26:	4603      	mov	r3, r0
 8005e28:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd90      	pop	{r4, r7, pc}

08005e3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	70fb      	strb	r3, [r7, #3]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70bb      	strb	r3, [r7, #2]
 8005e52:	4613      	mov	r3, r2
 8005e54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	212c      	movs	r1, #44	; 0x2c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	333b      	adds	r3, #59	; 0x3b
 8005e64:	78ba      	ldrb	r2, [r7, #2]
 8005e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	212c      	movs	r1, #44	; 0x2c
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	4413      	add	r3, r2
 8005e74:	333f      	adds	r3, #63	; 0x3f
 8005e76:	787a      	ldrb	r2, [r7, #1]
 8005e78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005e7a:	7c3b      	ldrb	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d112      	bne.n	8005ea6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	212c      	movs	r1, #44	; 0x2c
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3342      	adds	r3, #66	; 0x42
 8005e8e:	2203      	movs	r2, #3
 8005e90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	212c      	movs	r1, #44	; 0x2c
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	333d      	adds	r3, #61	; 0x3d
 8005ea0:	7f3a      	ldrb	r2, [r7, #28]
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e008      	b.n	8005eb8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	212c      	movs	r1, #44	; 0x2c
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3342      	adds	r3, #66	; 0x42
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005eb8:	787b      	ldrb	r3, [r7, #1]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	f200 80c6 	bhi.w	800604c <HAL_HCD_HC_SubmitRequest+0x210>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08006039 	.word	0x08006039
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005fbb 	.word	0x08005fbb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005ed8:	7c3b      	ldrb	r3, [r7, #16]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	f040 80b8 	bne.w	8006050 <HAL_HCD_HC_SubmitRequest+0x214>
 8005ee0:	78bb      	ldrb	r3, [r7, #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 80b4 	bne.w	8006050 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005ee8:	8b3b      	ldrh	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	212c      	movs	r1, #44	; 0x2c
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	3355      	adds	r3, #85	; 0x55
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	212c      	movs	r1, #44	; 0x2c
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3355      	adds	r3, #85	; 0x55
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	212c      	movs	r1, #44	; 0x2c
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	3342      	adds	r3, #66	; 0x42
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f26:	e093      	b.n	8006050 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	212c      	movs	r1, #44	; 0x2c
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	3342      	adds	r3, #66	; 0x42
 8005f36:	2202      	movs	r2, #2
 8005f38:	701a      	strb	r2, [r3, #0]
      break;
 8005f3a:	e089      	b.n	8006050 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005f3c:	78bb      	ldrb	r3, [r7, #2]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11d      	bne.n	8005f7e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	212c      	movs	r1, #44	; 0x2c
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3355      	adds	r3, #85	; 0x55
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	212c      	movs	r1, #44	; 0x2c
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	3342      	adds	r3, #66	; 0x42
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005f68:	e073      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	212c      	movs	r1, #44	; 0x2c
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	3342      	adds	r3, #66	; 0x42
 8005f78:	2202      	movs	r2, #2
 8005f7a:	701a      	strb	r2, [r3, #0]
      break;
 8005f7c:	e069      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	212c      	movs	r1, #44	; 0x2c
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	3354      	adds	r3, #84	; 0x54
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	212c      	movs	r1, #44	; 0x2c
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3342      	adds	r3, #66	; 0x42
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
      break;
 8005fa4:	e055      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	212c      	movs	r1, #44	; 0x2c
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3342      	adds	r3, #66	; 0x42
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	701a      	strb	r2, [r3, #0]
      break;
 8005fb8:	e04b      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005fba:	78bb      	ldrb	r3, [r7, #2]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11d      	bne.n	8005ffc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	212c      	movs	r1, #44	; 0x2c
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	3355      	adds	r3, #85	; 0x55
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	212c      	movs	r1, #44	; 0x2c
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	3342      	adds	r3, #66	; 0x42
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005fe6:	e034      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3342      	adds	r3, #66	; 0x42
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	701a      	strb	r2, [r3, #0]
      break;
 8005ffa:	e02a      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	212c      	movs	r1, #44	; 0x2c
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	3354      	adds	r3, #84	; 0x54
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	212c      	movs	r1, #44	; 0x2c
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	3342      	adds	r3, #66	; 0x42
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
      break;
 8006022:	e016      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	212c      	movs	r1, #44	; 0x2c
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	3342      	adds	r3, #66	; 0x42
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]
      break;
 8006036:	e00c      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	212c      	movs	r1, #44	; 0x2c
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3342      	adds	r3, #66	; 0x42
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e002      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006050:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	212c      	movs	r1, #44	; 0x2c
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	4413      	add	r3, r2
 800605e:	3344      	adds	r3, #68	; 0x44
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	8b3a      	ldrh	r2, [r7, #24]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	202c      	movs	r0, #44	; 0x2c
 800606c:	fb00 f303 	mul.w	r3, r0, r3
 8006070:	440b      	add	r3, r1
 8006072:	334c      	adds	r3, #76	; 0x4c
 8006074:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	212c      	movs	r1, #44	; 0x2c
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	3360      	adds	r3, #96	; 0x60
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3350      	adds	r3, #80	; 0x50
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	212c      	movs	r1, #44	; 0x2c
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	3339      	adds	r3, #57	; 0x39
 80060a8:	78fa      	ldrb	r2, [r7, #3]
 80060aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	3361      	adds	r3, #97	; 0x61
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	222c      	movs	r2, #44	; 0x2c
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	3338      	adds	r3, #56	; 0x38
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	18d1      	adds	r1, r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f008 ffca 	bl	800f070 <USB_HC_StartXfer>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop

080060e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f008 fde5 	bl	800ecce <USB_GetMode>
 8006104:	4603      	mov	r3, r0
 8006106:	2b01      	cmp	r3, #1
 8006108:	f040 80ef 	bne.w	80062ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f008 fdc9 	bl	800eca8 <USB_ReadInterrupts>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80e5 	beq.w	80062e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f008 fdc0 	bl	800eca8 <USB_ReadInterrupts>
 8006128:	4603      	mov	r3, r0
 800612a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800612e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006132:	d104      	bne.n	800613e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800613c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f008 fdb0 	bl	800eca8 <USB_ReadInterrupts>
 8006148:	4603      	mov	r3, r0
 800614a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006152:	d104      	bne.n	800615e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800615c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f008 fda0 	bl	800eca8 <USB_ReadInterrupts>
 8006168:	4603      	mov	r3, r0
 800616a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800616e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006172:	d104      	bne.n	800617e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800617c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f008 fd90 	bl	800eca8 <USB_ReadInterrupts>
 8006188:	4603      	mov	r3, r0
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d103      	bne.n	800619a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2202      	movs	r2, #2
 8006198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f008 fd82 	bl	800eca8 <USB_ReadInterrupts>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ae:	d115      	bne.n	80061dc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f00b f8ce 	bl	801136c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2101      	movs	r1, #1
 80061d6:	4618      	mov	r0, r3
 80061d8:	f008 fd87 	bl	800ecea <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f008 fd61 	bl	800eca8 <USB_ReadInterrupts>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f0:	d102      	bne.n	80061f8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f9dd 	bl	80075b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f008 fd53 	bl	800eca8 <USB_ReadInterrupts>
 8006202:	4603      	mov	r3, r0
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d106      	bne.n	800621a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f00b f891 	bl	8011334 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2208      	movs	r2, #8
 8006218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f008 fd42 	bl	800eca8 <USB_ReadInterrupts>
 8006224:	4603      	mov	r3, r0
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b10      	cmp	r3, #16
 800622c:	d101      	bne.n	8006232 <HAL_HCD_IRQHandler+0x14a>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_HCD_IRQHandler+0x14c>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d012      	beq.n	800625e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0210 	bic.w	r2, r2, #16
 8006246:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f8e0 	bl	800740e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0210 	orr.w	r2, r2, #16
 800625c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f008 fd20 	bl	800eca8 <USB_ReadInterrupts>
 8006268:	4603      	mov	r3, r0
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006272:	d13a      	bne.n	80062ea <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	f009 f83b 	bl	800f2f4 <USB_HC_ReadInterrupt>
 800627e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e025      	b.n	80062d2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d018      	beq.n	80062cc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d106      	bne.n	80062c0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f889 	bl	80063d0 <HCD_HC_IN_IRQHandler>
 80062be:	e005      	b.n	80062cc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fca4 	bl	8006c14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3301      	adds	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3d4      	bcc.n	8006286 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062e4:	615a      	str	r2, [r3, #20]
 80062e6:	e000      	b.n	80062ea <HAL_HCD_IRQHandler+0x202>
      return;
 80062e8:	bf00      	nop
    }
  }
}
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_HCD_Start+0x16>
 8006302:	2302      	movs	r3, #2
 8006304:	e013      	b.n	800632e <HAL_HCD_Start+0x3e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f008 fc00 	bl	800eb18 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f008 fd47 	bl	800edb2 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_HCD_Stop+0x16>
 8006348:	2302      	movs	r3, #2
 800634a:	e00d      	b.n	8006368 <HAL_HCD_Stop+0x32>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f009 f935 	bl	800f5c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f008 fcee 	bl	800ed5e <USB_ResetPort>
 8006382:	4603      	mov	r3, r0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	212c      	movs	r1, #44	; 0x2c
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	3360      	adds	r3, #96	; 0x60
 80063a6:	781b      	ldrb	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f008 fd2f 	bl	800ee24 <USB_GetHostSpeed>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d119      	bne.n	8006434 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	461a      	mov	r2, r3
 800640e:	2304      	movs	r3, #4
 8006410:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	60d3      	str	r3, [r2, #12]
 8006432:	e101      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644a:	d12b      	bne.n	80064a4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800645e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	212c      	movs	r1, #44	; 0x2c
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	4413      	add	r3, r2
 800646c:	3361      	adds	r3, #97	; 0x61
 800646e:	2207      	movs	r2, #7
 8006470:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	440a      	add	r2, r1
 8006488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f008 ff3a 	bl	800f316 <USB_HC_Halt>
 80064a2:	e0c9      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d109      	bne.n	80064ce <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	2320      	movs	r3, #32
 80064ca:	6093      	str	r3, [r2, #8]
 80064cc:	e0b4      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d133      	bne.n	800654c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	212c      	movs	r1, #44	; 0x2c
 800650a:	fb01 f303 	mul.w	r3, r1, r3
 800650e:	4413      	add	r3, r2
 8006510:	3361      	adds	r3, #97	; 0x61
 8006512:	2205      	movs	r2, #5
 8006514:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	2310      	movs	r3, #16
 8006526:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006534:	461a      	mov	r2, r3
 8006536:	2308      	movs	r3, #8
 8006538:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f008 fee6 	bl	800f316 <USB_HC_Halt>
 800654a:	e075      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	d134      	bne.n	80065ce <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 0302 	orr.w	r3, r3, #2
 8006582:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	212c      	movs	r1, #44	; 0x2c
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	3361      	adds	r3, #97	; 0x61
 8006592:	2208      	movs	r2, #8
 8006594:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a2:	461a      	mov	r2, r3
 80065a4:	2310      	movs	r3, #16
 80065a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	461a      	mov	r2, r3
 80065b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f008 fea5 	bl	800f316 <USB_HC_Halt>
 80065cc:	e034      	b.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e0:	2b80      	cmp	r3, #128	; 0x80
 80065e2:	d129      	bne.n	8006638 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	212c      	movs	r1, #44	; 0x2c
 800660a:	fb01 f303 	mul.w	r3, r1, r3
 800660e:	4413      	add	r3, r2
 8006610:	3361      	adds	r3, #97	; 0x61
 8006612:	2206      	movs	r2, #6
 8006614:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f008 fe78 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4413      	add	r3, r2
 8006640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664e:	d122      	bne.n	8006696 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	440a      	add	r2, r1
 8006666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666a:	f043 0302 	orr.w	r3, r3, #2
 800666e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f008 fe4b 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	461a      	mov	r2, r3
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006694:	e2ba      	b.n	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	f040 811b 	bne.w	80068e4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d019      	beq.n	80066ea <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	212c      	movs	r1, #44	; 0x2c
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	3348      	adds	r3, #72	; 0x48
 80066c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	0159      	lsls	r1, r3, #5
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	440b      	add	r3, r1
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	202c      	movs	r0, #44	; 0x2c
 80066e0:	fb00 f303 	mul.w	r3, r0, r3
 80066e4:	440b      	add	r3, r1
 80066e6:	3350      	adds	r3, #80	; 0x50
 80066e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	212c      	movs	r1, #44	; 0x2c
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	3361      	adds	r3, #97	; 0x61
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	212c      	movs	r1, #44	; 0x2c
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	335c      	adds	r3, #92	; 0x5c
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	461a      	mov	r2, r3
 800671c:	2301      	movs	r3, #1
 800671e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	212c      	movs	r1, #44	; 0x2c
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	4413      	add	r3, r2
 800672c:	333f      	adds	r3, #63	; 0x3f
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	212c      	movs	r1, #44	; 0x2c
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	333f      	adds	r3, #63	; 0x3f
 8006742:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006744:	2b02      	cmp	r3, #2
 8006746:	d121      	bne.n	800678c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	440a      	add	r2, r1
 800675e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006762:	f043 0302 	orr.w	r3, r3, #2
 8006766:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f008 fdcf 	bl	800f316 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006784:	461a      	mov	r2, r3
 8006786:	2310      	movs	r3, #16
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	e066      	b.n	800685a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	333f      	adds	r3, #63	; 0x3f
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b03      	cmp	r3, #3
 800679e:	d127      	bne.n	80067f0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	212c      	movs	r1, #44	; 0x2c
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	4413      	add	r3, r2
 80067cc:	3360      	adds	r3, #96	; 0x60
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	b2d9      	uxtb	r1, r3
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	202c      	movs	r0, #44	; 0x2c
 80067dc:	fb00 f303 	mul.w	r3, r0, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	3360      	adds	r3, #96	; 0x60
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f00a fdcd 	bl	8011388 <HAL_HCD_HC_NotifyURBChange_Callback>
 80067ee:	e034      	b.n	800685a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	212c      	movs	r1, #44	; 0x2c
 80067f6:	fb01 f303 	mul.w	r3, r1, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	333f      	adds	r3, #63	; 0x3f
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d12a      	bne.n	800685a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	212c      	movs	r1, #44	; 0x2c
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	3360      	adds	r3, #96	; 0x60
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	212c      	movs	r1, #44	; 0x2c
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	4413      	add	r3, r2
 8006822:	3354      	adds	r3, #84	; 0x54
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f083 0301 	eor.w	r3, r3, #1
 800682a:	b2d8      	uxtb	r0, r3
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	212c      	movs	r1, #44	; 0x2c
 8006832:	fb01 f303 	mul.w	r3, r1, r3
 8006836:	4413      	add	r3, r2
 8006838:	3354      	adds	r3, #84	; 0x54
 800683a:	4602      	mov	r2, r0
 800683c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	b2d9      	uxtb	r1, r3
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	202c      	movs	r0, #44	; 0x2c
 8006848:	fb00 f303 	mul.w	r3, r0, r3
 800684c:	4413      	add	r3, r2
 800684e:	3360      	adds	r3, #96	; 0x60
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f00a fd97 	bl	8011388 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d12b      	bne.n	80068ba <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	212c      	movs	r1, #44	; 0x2c
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	3348      	adds	r3, #72	; 0x48
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	202c      	movs	r0, #44	; 0x2c
 8006878:	fb00 f202 	mul.w	r2, r0, r2
 800687c:	440a      	add	r2, r1
 800687e:	3240      	adds	r2, #64	; 0x40
 8006880:	8812      	ldrh	r2, [r2, #0]
 8006882:	fbb3 f3f2 	udiv	r3, r3, r2
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 81be 	beq.w	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	212c      	movs	r1, #44	; 0x2c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	3354      	adds	r3, #84	; 0x54
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2d8      	uxtb	r0, r3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	212c      	movs	r1, #44	; 0x2c
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	3354      	adds	r3, #84	; 0x54
 80068b4:	4602      	mov	r2, r0
 80068b6:	701a      	strb	r2, [r3, #0]
}
 80068b8:	e1a8      	b.n	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	212c      	movs	r1, #44	; 0x2c
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	3354      	adds	r3, #84	; 0x54
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f083 0301 	eor.w	r3, r3, #1
 80068ce:	b2d8      	uxtb	r0, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	212c      	movs	r1, #44	; 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3354      	adds	r3, #84	; 0x54
 80068de:	4602      	mov	r2, r0
 80068e0:	701a      	strb	r2, [r3, #0]
}
 80068e2:	e193      	b.n	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	f040 8106 	bne.w	8006b08 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	440a      	add	r2, r1
 8006912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006916:	f023 0302 	bic.w	r3, r3, #2
 800691a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	212c      	movs	r1, #44	; 0x2c
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	3361      	adds	r3, #97	; 0x61
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d109      	bne.n	8006944 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	212c      	movs	r1, #44	; 0x2c
 8006936:	fb01 f303 	mul.w	r3, r1, r3
 800693a:	4413      	add	r3, r2
 800693c:	3360      	adds	r3, #96	; 0x60
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e0c9      	b.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	212c      	movs	r1, #44	; 0x2c
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	3361      	adds	r3, #97	; 0x61
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d109      	bne.n	800696c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	212c      	movs	r1, #44	; 0x2c
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	3360      	adds	r3, #96	; 0x60
 8006966:	2205      	movs	r2, #5
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e0b5      	b.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	212c      	movs	r1, #44	; 0x2c
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	3361      	adds	r3, #97	; 0x61
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b06      	cmp	r3, #6
 800697e:	d009      	beq.n	8006994 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	212c      	movs	r1, #44	; 0x2c
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	3361      	adds	r3, #97	; 0x61
 800698e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006990:	2b08      	cmp	r3, #8
 8006992:	d150      	bne.n	8006a36 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	212c      	movs	r1, #44	; 0x2c
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	335c      	adds	r3, #92	; 0x5c
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	202c      	movs	r0, #44	; 0x2c
 80069ac:	fb00 f303 	mul.w	r3, r0, r3
 80069b0:	440b      	add	r3, r1
 80069b2:	335c      	adds	r3, #92	; 0x5c
 80069b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	212c      	movs	r1, #44	; 0x2c
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	335c      	adds	r3, #92	; 0x5c
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d912      	bls.n	80069f0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	212c      	movs	r1, #44	; 0x2c
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	335c      	adds	r3, #92	; 0x5c
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	212c      	movs	r1, #44	; 0x2c
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	3360      	adds	r3, #96	; 0x60
 80069ea:	2204      	movs	r2, #4
 80069ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80069ee:	e073      	b.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	212c      	movs	r1, #44	; 0x2c
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	3360      	adds	r3, #96	; 0x60
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a34:	e050      	b.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	212c      	movs	r1, #44	; 0x2c
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	3361      	adds	r3, #97	; 0x61
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d122      	bne.n	8006a90 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	212c      	movs	r1, #44	; 0x2c
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	3360      	adds	r3, #96	; 0x60
 8006a58:	2202      	movs	r2, #2
 8006a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e023      	b.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	212c      	movs	r1, #44	; 0x2c
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3361      	adds	r3, #97	; 0x61
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b07      	cmp	r3, #7
 8006aa2:	d119      	bne.n	8006ad8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	212c      	movs	r1, #44	; 0x2c
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	335c      	adds	r3, #92	; 0x5c
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	202c      	movs	r0, #44	; 0x2c
 8006abc:	fb00 f303 	mul.w	r3, r0, r3
 8006ac0:	440b      	add	r3, r1
 8006ac2:	335c      	adds	r3, #92	; 0x5c
 8006ac4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	212c      	movs	r1, #44	; 0x2c
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3360      	adds	r3, #96	; 0x60
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	b2d9      	uxtb	r1, r3
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	202c      	movs	r0, #44	; 0x2c
 8006af4:	fb00 f303 	mul.w	r3, r0, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	3360      	adds	r3, #96	; 0x60
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f00a fc41 	bl	8011388 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b06:	e081      	b.n	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d176      	bne.n	8006c0c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	212c      	movs	r1, #44	; 0x2c
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	333f      	adds	r3, #63	; 0x3f
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d121      	bne.n	8006b76 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	212c      	movs	r1, #44	; 0x2c
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	335c      	adds	r3, #92	; 0x5c
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5e:	f043 0302 	orr.w	r3, r3, #2
 8006b62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f008 fbd1 	bl	800f316 <USB_HC_Halt>
 8006b74:	e041      	b.n	8006bfa <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	212c      	movs	r1, #44	; 0x2c
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	333f      	adds	r3, #63	; 0x3f
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	212c      	movs	r1, #44	; 0x2c
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	333f      	adds	r3, #63	; 0x3f
 8006b98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d12d      	bne.n	8006bfa <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	212c      	movs	r1, #44	; 0x2c
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	335c      	adds	r3, #92	; 0x5c
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d120      	bne.n	8006bfa <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	212c      	movs	r1, #44	; 0x2c
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3361      	adds	r3, #97	; 0x61
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be4:	f043 0302 	orr.w	r3, r3, #2
 8006be8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f008 fb8e 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	461a      	mov	r2, r3
 8006c08:	2310      	movs	r3, #16
 8006c0a:	6093      	str	r3, [r2, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d119      	bne.n	8006c78 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	461a      	mov	r2, r3
 8006c52:	2304      	movs	r3, #4
 8006c54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006c76:	e3c6      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d13e      	bne.n	8006d0c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	212c      	movs	r1, #44	; 0x2c
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	4413      	add	r3, r2
 8006cac:	333d      	adds	r3, #61	; 0x3d
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 83a8 	bne.w	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	212c      	movs	r1, #44	; 0x2c
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	333d      	adds	r3, #61	; 0x3d
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	212c      	movs	r1, #44	; 0x2c
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3360      	adds	r3, #96	; 0x60
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f008 fb06 	bl	800f316 <USB_HC_Halt>
}
 8006d0a:	e37c      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d22:	d122      	bne.n	8006d6a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3e:	f043 0302 	orr.w	r3, r3, #2
 8006d42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f008 fae1 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	461a      	mov	r2, r3
 8006d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d66:	6093      	str	r3, [r2, #8]
}
 8006d68:	e34d      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d150      	bne.n	8006e22 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	212c      	movs	r1, #44	; 0x2c
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	335c      	adds	r3, #92	; 0x5c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	d111      	bne.n	8006dcc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	212c      	movs	r1, #44	; 0x2c
 8006dae:	fb01 f303 	mul.w	r3, r1, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	333d      	adds	r3, #61	; 0x3d
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de6:	f043 0302 	orr.w	r3, r3, #2
 8006dea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f008 fa8d 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	212c      	movs	r1, #44	; 0x2c
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	3361      	adds	r3, #97	; 0x61
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
}
 8006e20:	e2f1      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d13c      	bne.n	8006eb2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	212c      	movs	r1, #44	; 0x2c
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	3361      	adds	r3, #97	; 0x61
 8006e46:	2204      	movs	r2, #4
 8006e48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	212c      	movs	r1, #44	; 0x2c
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	4413      	add	r3, r2
 8006e56:	333d      	adds	r3, #61	; 0x3d
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	212c      	movs	r1, #44	; 0x2c
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	335c      	adds	r3, #92	; 0x5c
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e88:	f043 0302 	orr.w	r3, r3, #2
 8006e8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f008 fa3c 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	6093      	str	r3, [r2, #8]
}
 8006eb0:	e2a9      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d12a      	bne.n	8006f1e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f008 fa06 	bl	800f316 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	212c      	movs	r1, #44	; 0x2c
 8006f10:	fb01 f303 	mul.w	r3, r1, r3
 8006f14:	4413      	add	r3, r2
 8006f16:	3361      	adds	r3, #97	; 0x61
 8006f18:	2205      	movs	r2, #5
 8006f1a:	701a      	strb	r2, [r3, #0]
}
 8006f1c:	e273      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d150      	bne.n	8006fd6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	212c      	movs	r1, #44	; 0x2c
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	335c      	adds	r3, #92	; 0x5c
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	212c      	movs	r1, #44	; 0x2c
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	3361      	adds	r3, #97	; 0x61
 8006f54:	2203      	movs	r2, #3
 8006f56:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	212c      	movs	r1, #44	; 0x2c
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	4413      	add	r3, r2
 8006f64:	333d      	adds	r3, #61	; 0x3d
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d112      	bne.n	8006f92 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	212c      	movs	r1, #44	; 0x2c
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	333c      	adds	r3, #60	; 0x3c
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	212c      	movs	r1, #44	; 0x2c
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	333d      	adds	r3, #61	; 0x3d
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fac:	f043 0302 	orr.w	r3, r3, #2
 8006fb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f008 f9aa 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	6093      	str	r3, [r2, #8]
}
 8006fd4:	e217      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe8:	2b80      	cmp	r3, #128	; 0x80
 8006fea:	d174      	bne.n	80070d6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d121      	bne.n	8007038 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	212c      	movs	r1, #44	; 0x2c
 8006ffa:	fb01 f303 	mul.w	r3, r1, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	3361      	adds	r3, #97	; 0x61
 8007002:	2206      	movs	r2, #6
 8007004:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	440a      	add	r2, r1
 800701c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f008 f970 	bl	800f316 <USB_HC_Halt>
 8007036:	e044      	b.n	80070c2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	212c      	movs	r1, #44	; 0x2c
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	4413      	add	r3, r2
 8007044:	335c      	adds	r3, #92	; 0x5c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	202c      	movs	r0, #44	; 0x2c
 8007050:	fb00 f303 	mul.w	r3, r0, r3
 8007054:	440b      	add	r3, r1
 8007056:	335c      	adds	r3, #92	; 0x5c
 8007058:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	212c      	movs	r1, #44	; 0x2c
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	4413      	add	r3, r2
 8007066:	335c      	adds	r3, #92	; 0x5c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d920      	bls.n	80070b0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	212c      	movs	r1, #44	; 0x2c
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	4413      	add	r3, r2
 800707a:	335c      	adds	r3, #92	; 0x5c
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	212c      	movs	r1, #44	; 0x2c
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3360      	adds	r3, #96	; 0x60
 800708e:	2204      	movs	r2, #4
 8007090:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	b2d9      	uxtb	r1, r3
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	202c      	movs	r0, #44	; 0x2c
 800709c:	fb00 f303 	mul.w	r3, r0, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	3360      	adds	r3, #96	; 0x60
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f00a f96d 	bl	8011388 <HAL_HCD_HC_NotifyURBChange_Callback>
 80070ae:	e008      	b.n	80070c2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	212c      	movs	r1, #44	; 0x2c
 80070b6:	fb01 f303 	mul.w	r3, r1, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	3360      	adds	r3, #96	; 0x60
 80070be:	2202      	movs	r2, #2
 80070c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	461a      	mov	r2, r3
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	6093      	str	r3, [r2, #8]
}
 80070d4:	e197      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d134      	bne.n	8007158 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	440a      	add	r2, r1
 8007104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007108:	f043 0302 	orr.w	r3, r3, #2
 800710c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f008 f8fc 	bl	800f316 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	461a      	mov	r2, r3
 800712c:	2310      	movs	r3, #16
 800712e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713c:	461a      	mov	r2, r3
 800713e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	212c      	movs	r1, #44	; 0x2c
 800714a:	fb01 f303 	mul.w	r3, r1, r3
 800714e:	4413      	add	r3, r2
 8007150:	3361      	adds	r3, #97	; 0x61
 8007152:	2208      	movs	r2, #8
 8007154:	701a      	strb	r2, [r3, #0]
}
 8007156:	e156      	b.n	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b02      	cmp	r3, #2
 800716c:	f040 814b 	bne.w	8007406 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	4413      	add	r3, r2
 8007178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	440a      	add	r2, r1
 8007186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800718a:	f023 0302 	bic.w	r3, r3, #2
 800718e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	212c      	movs	r1, #44	; 0x2c
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	3361      	adds	r3, #97	; 0x61
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d179      	bne.n	8007298 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	212c      	movs	r1, #44	; 0x2c
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	3360      	adds	r3, #96	; 0x60
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	212c      	movs	r1, #44	; 0x2c
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	333f      	adds	r3, #63	; 0x3f
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d00a      	beq.n	80071e0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	212c      	movs	r1, #44	; 0x2c
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	333f      	adds	r3, #63	; 0x3f
 80071d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80071da:	2b03      	cmp	r3, #3
 80071dc:	f040 80fc 	bne.w	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d142      	bne.n	800726e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	212c      	movs	r1, #44	; 0x2c
 80071ee:	fb01 f303 	mul.w	r3, r1, r3
 80071f2:	4413      	add	r3, r2
 80071f4:	334c      	adds	r3, #76	; 0x4c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80ed 	beq.w	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	212c      	movs	r1, #44	; 0x2c
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	334c      	adds	r3, #76	; 0x4c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	202c      	movs	r0, #44	; 0x2c
 8007214:	fb00 f202 	mul.w	r2, r0, r2
 8007218:	440a      	add	r2, r1
 800721a:	3240      	adds	r2, #64	; 0x40
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	4413      	add	r3, r2
 8007220:	3b01      	subs	r3, #1
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	202c      	movs	r0, #44	; 0x2c
 8007228:	fb00 f202 	mul.w	r2, r0, r2
 800722c:	440a      	add	r2, r1
 800722e:	3240      	adds	r2, #64	; 0x40
 8007230:	8812      	ldrh	r2, [r2, #0]
 8007232:	fbb3 f3f2 	udiv	r3, r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80ca 	beq.w	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	212c      	movs	r1, #44	; 0x2c
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	3355      	adds	r3, #85	; 0x55
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f083 0301 	eor.w	r3, r3, #1
 8007258:	b2d8      	uxtb	r0, r3
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	212c      	movs	r1, #44	; 0x2c
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	3355      	adds	r3, #85	; 0x55
 8007268:	4602      	mov	r2, r0
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e0b4      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	212c      	movs	r1, #44	; 0x2c
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	3355      	adds	r3, #85	; 0x55
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f083 0301 	eor.w	r3, r3, #1
 8007282:	b2d8      	uxtb	r0, r3
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	212c      	movs	r1, #44	; 0x2c
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	3355      	adds	r3, #85	; 0x55
 8007292:	4602      	mov	r2, r0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e09f      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	212c      	movs	r1, #44	; 0x2c
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	3361      	adds	r3, #97	; 0x61
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d109      	bne.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	212c      	movs	r1, #44	; 0x2c
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	4413      	add	r3, r2
 80072b8:	3360      	adds	r3, #96	; 0x60
 80072ba:	2202      	movs	r2, #2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e08b      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	3361      	adds	r3, #97	; 0x61
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d109      	bne.n	80072e8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	212c      	movs	r1, #44	; 0x2c
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	3360      	adds	r3, #96	; 0x60
 80072e2:	2202      	movs	r2, #2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e077      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	212c      	movs	r1, #44	; 0x2c
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	3361      	adds	r3, #97	; 0x61
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b05      	cmp	r3, #5
 80072fa:	d109      	bne.n	8007310 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	212c      	movs	r1, #44	; 0x2c
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	3360      	adds	r3, #96	; 0x60
 800730a:	2205      	movs	r2, #5
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e063      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	212c      	movs	r1, #44	; 0x2c
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	3361      	adds	r3, #97	; 0x61
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d009      	beq.n	8007338 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	212c      	movs	r1, #44	; 0x2c
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	3361      	adds	r3, #97	; 0x61
 8007332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007334:	2b08      	cmp	r3, #8
 8007336:	d14f      	bne.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	212c      	movs	r1, #44	; 0x2c
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	335c      	adds	r3, #92	; 0x5c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	202c      	movs	r0, #44	; 0x2c
 8007350:	fb00 f303 	mul.w	r3, r0, r3
 8007354:	440b      	add	r3, r1
 8007356:	335c      	adds	r3, #92	; 0x5c
 8007358:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	212c      	movs	r1, #44	; 0x2c
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	335c      	adds	r3, #92	; 0x5c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d912      	bls.n	8007394 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	212c      	movs	r1, #44	; 0x2c
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	335c      	adds	r3, #92	; 0x5c
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	212c      	movs	r1, #44	; 0x2c
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	4413      	add	r3, r2
 800738c:	3360      	adds	r3, #96	; 0x60
 800738e:	2204      	movs	r2, #4
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e021      	b.n	80073d8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	212c      	movs	r1, #44	; 0x2c
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	3360      	adds	r3, #96	; 0x60
 80073a2:	2202      	movs	r2, #2
 80073a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d2:	461a      	mov	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e4:	461a      	mov	r2, r3
 80073e6:	2302      	movs	r3, #2
 80073e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	b2d9      	uxtb	r1, r3
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	202c      	movs	r0, #44	; 0x2c
 80073f4:	fb00 f303 	mul.w	r3, r0, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	3360      	adds	r3, #96	; 0x60
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f009 ffc1 	bl	8011388 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007406:	bf00      	nop
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08a      	sub	sp, #40	; 0x28
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	0c5b      	lsrs	r3, r3, #17
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007442:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d004      	beq.n	8007454 <HCD_RXQLVL_IRQHandler+0x46>
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b05      	cmp	r3, #5
 800744e:	f000 80a9 	beq.w	80075a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007452:	e0aa      	b.n	80075aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80a6 	beq.w	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	212c      	movs	r1, #44	; 0x2c
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	4413      	add	r3, r2
 8007468:	3344      	adds	r3, #68	; 0x44
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 809b 	beq.w	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	212c      	movs	r1, #44	; 0x2c
 8007478:	fb01 f303 	mul.w	r3, r1, r3
 800747c:	4413      	add	r3, r2
 800747e:	3350      	adds	r3, #80	; 0x50
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	441a      	add	r2, r3
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	202c      	movs	r0, #44	; 0x2c
 800748c:	fb00 f303 	mul.w	r3, r0, r3
 8007490:	440b      	add	r3, r1
 8007492:	334c      	adds	r3, #76	; 0x4c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d87a      	bhi.n	8007590 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	212c      	movs	r1, #44	; 0x2c
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	4413      	add	r3, r2
 80074aa:	3344      	adds	r3, #68	; 0x44
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	b292      	uxth	r2, r2
 80074b2:	4619      	mov	r1, r3
 80074b4:	f007 fbcf 	bl	800ec56 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	212c      	movs	r1, #44	; 0x2c
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	3344      	adds	r3, #68	; 0x44
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	441a      	add	r2, r3
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	202c      	movs	r0, #44	; 0x2c
 80074d2:	fb00 f303 	mul.w	r3, r0, r3
 80074d6:	440b      	add	r3, r1
 80074d8:	3344      	adds	r3, #68	; 0x44
 80074da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	212c      	movs	r1, #44	; 0x2c
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	3350      	adds	r3, #80	; 0x50
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	441a      	add	r2, r3
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	202c      	movs	r0, #44	; 0x2c
 80074f6:	fb00 f303 	mul.w	r3, r0, r3
 80074fa:	440b      	add	r3, r1
 80074fc:	3350      	adds	r3, #80	; 0x50
 80074fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	0cdb      	lsrs	r3, r3, #19
 8007510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007514:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	212c      	movs	r1, #44	; 0x2c
 800751c:	fb01 f303 	mul.w	r3, r1, r3
 8007520:	4413      	add	r3, r2
 8007522:	3340      	adds	r3, #64	; 0x40
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4293      	cmp	r3, r2
 800752c:	d13c      	bne.n	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d039      	beq.n	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800754a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007552:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007560:	461a      	mov	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	212c      	movs	r1, #44	; 0x2c
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	4413      	add	r3, r2
 8007572:	3354      	adds	r3, #84	; 0x54
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f083 0301 	eor.w	r3, r3, #1
 800757a:	b2d8      	uxtb	r0, r3
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	212c      	movs	r1, #44	; 0x2c
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	3354      	adds	r3, #84	; 0x54
 800758a:	4602      	mov	r2, r0
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e00b      	b.n	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	212c      	movs	r1, #44	; 0x2c
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	3360      	adds	r3, #96	; 0x60
 800759e:	2204      	movs	r2, #4
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e001      	b.n	80075a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80075a8:	bf00      	nop
  }
}
 80075aa:	bf00      	nop
 80075ac:	3728      	adds	r7, #40	; 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d10b      	bne.n	8007602 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d102      	bne.n	80075fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f009 feab 	bl	8011350 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d132      	bne.n	8007672 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f043 0308 	orr.w	r3, r3, #8
 8007612:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b04      	cmp	r3, #4
 800761c:	d126      	bne.n	800766c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d113      	bne.n	800764e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800762c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007630:	d106      	bne.n	8007640 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2102      	movs	r1, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f007 fb56 	bl	800ecea <USB_InitFSLSPClkSel>
 800763e:	e011      	b.n	8007664 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2101      	movs	r1, #1
 8007646:	4618      	mov	r0, r3
 8007648:	f007 fb4f 	bl	800ecea <USB_InitFSLSPClkSel>
 800764c:	e00a      	b.n	8007664 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d106      	bne.n	8007664 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765c:	461a      	mov	r2, r3
 800765e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007662:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f009 fe9d 	bl	80113a4 <HAL_HCD_PortEnabled_Callback>
 800766a:	e002      	b.n	8007672 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f009 fea7 	bl	80113c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b20      	cmp	r3, #32
 800767a:	d103      	bne.n	8007684 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f043 0320 	orr.w	r3, r3, #32
 8007682:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800768a:	461a      	mov	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6013      	str	r3, [r2, #0]
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e07f      	b.n	80077aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fb f9f2 	bl	8002aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2224      	movs	r2, #36	; 0x24
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d107      	bne.n	8007712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	e006      	b.n	8007720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800771e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d104      	bne.n	8007732 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <HAL_I2C_Init+0x11c>)
 800773e:	430b      	orrs	r3, r1
 8007740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	ea42 0103 	orr.w	r1, r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69d9      	ldr	r1, [r3, #28]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	02008000 	.word	0x02008000

080077b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d138      	bne.n	8007840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077d8:	2302      	movs	r3, #2
 80077da:	e032      	b.n	8007842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2224      	movs	r2, #36	; 0x24
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800780a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6819      	ldr	r1, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	e000      	b.n	8007842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b20      	cmp	r3, #32
 8007862:	d139      	bne.n	80078d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800786e:	2302      	movs	r3, #2
 8007870:	e033      	b.n	80078da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2224      	movs	r2, #36	; 0x24
 800787e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e000      	b.n	80078da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078d8:	2302      	movs	r3, #2
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0bf      	b.n	8007a7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fb f942 	bl	8002b98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800792a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6999      	ldr	r1, [r3, #24]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007940:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6899      	ldr	r1, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4b4a      	ldr	r3, [pc, #296]	; (8007a84 <HAL_LTDC_Init+0x19c>)
 800795c:	400b      	ands	r3, r1
 800795e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68d9      	ldr	r1, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <HAL_LTDC_Init+0x19c>)
 800798a:	400b      	ands	r3, r1
 800798c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68d9      	ldr	r1, [r3, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6919      	ldr	r1, [r3, #16]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b33      	ldr	r3, [pc, #204]	; (8007a84 <HAL_LTDC_Init+0x19c>)
 80079b8:	400b      	ands	r3, r1
 80079ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6919      	ldr	r1, [r3, #16]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6959      	ldr	r1, [r3, #20]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b27      	ldr	r3, [pc, #156]	; (8007a84 <HAL_LTDC_Init+0x19c>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6959      	ldr	r1, [r3, #20]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0206 	orr.w	r2, r2, #6
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	f000f800 	.word	0xf000f800

08007a88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a88:	b5b0      	push	{r4, r5, r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_LTDC_ConfigLayer+0x1a>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e02c      	b.n	8007afc <HAL_LTDC_ConfigLayer+0x74>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2134      	movs	r1, #52	; 0x34
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f847 	bl	8007b70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bdb0      	pop	{r4, r5, r7, pc}

08007b04 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d101      	bne.n	8007b1e <HAL_LTDC_SetAddress+0x1a>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	e024      	b.n	8007b68 <HAL_LTDC_SetAddress+0x64>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2234      	movs	r2, #52	; 0x34
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	3338      	adds	r3, #56	; 0x38
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f811 	bl	8007b70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2201      	movs	r2, #1
 8007b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b089      	sub	sp, #36	; 0x24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b8c:	4413      	add	r3, r2
 8007b8e:	041b      	lsls	r3, r3, #16
 8007b90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	01db      	lsls	r3, r3, #7
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3384      	adds	r3, #132	; 0x84
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	01d2      	lsls	r2, r2, #7
 8007bac:	440a      	add	r2, r1
 8007bae:	3284      	adds	r2, #132	; 0x84
 8007bb0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007bb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bc6:	4413      	add	r3, r2
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3384      	adds	r3, #132	; 0x84
 8007bd8:	4619      	mov	r1, r3
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bee:	4413      	add	r3, r2
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	01db      	lsls	r3, r3, #7
 8007bfe:	4413      	add	r3, r2
 8007c00:	3384      	adds	r3, #132	; 0x84
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	01d2      	lsls	r2, r2, #7
 8007c0e:	440a      	add	r2, r1
 8007c10:	3284      	adds	r2, #132	; 0x84
 8007c12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007c16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c26:	4413      	add	r3, r2
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	01db      	lsls	r3, r3, #7
 8007c34:	440b      	add	r3, r1
 8007c36:	3384      	adds	r3, #132	; 0x84
 8007c38:	4619      	mov	r1, r3
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	01db      	lsls	r3, r3, #7
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3384      	adds	r3, #132	; 0x84
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	4611      	mov	r1, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	01d2      	lsls	r2, r2, #7
 8007c5a:	440a      	add	r2, r1
 8007c5c:	3284      	adds	r2, #132	; 0x84
 8007c5e:	f023 0307 	bic.w	r3, r3, #7
 8007c62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	01db      	lsls	r3, r3, #7
 8007c6e:	4413      	add	r3, r2
 8007c70:	3384      	adds	r3, #132	; 0x84
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	061b      	lsls	r3, r3, #24
 8007c94:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	01db      	lsls	r3, r3, #7
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3384      	adds	r3, #132	; 0x84
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	01db      	lsls	r3, r3, #7
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3384      	adds	r3, #132	; 0x84
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	01db      	lsls	r3, r3, #7
 8007cd4:	440b      	add	r3, r1
 8007cd6:	3384      	adds	r3, #132	; 0x84
 8007cd8:	4619      	mov	r1, r3
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	01db      	lsls	r3, r3, #7
 8007cea:	4413      	add	r3, r2
 8007cec:	3384      	adds	r3, #132	; 0x84
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	01d2      	lsls	r2, r2, #7
 8007cfa:	440a      	add	r2, r1
 8007cfc:	3284      	adds	r2, #132	; 0x84
 8007cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	01db      	lsls	r3, r3, #7
 8007d0e:	4413      	add	r3, r2
 8007d10:	3384      	adds	r3, #132	; 0x84
 8007d12:	461a      	mov	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	01db      	lsls	r3, r3, #7
 8007d24:	4413      	add	r3, r2
 8007d26:	3384      	adds	r3, #132	; 0x84
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	01db      	lsls	r3, r3, #7
 8007d34:	440b      	add	r3, r1
 8007d36:	3384      	adds	r3, #132	; 0x84
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4b58      	ldr	r3, [pc, #352]	; (8007e9c <LTDC_SetConfig+0x32c>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	6809      	ldr	r1, [r1, #0]
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	01c9      	lsls	r1, r1, #7
 8007d52:	4401      	add	r1, r0
 8007d54:	3184      	adds	r1, #132	; 0x84
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	01db      	lsls	r3, r3, #7
 8007d64:	4413      	add	r3, r2
 8007d66:	3384      	adds	r3, #132	; 0x84
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	01db      	lsls	r3, r3, #7
 8007d74:	4413      	add	r3, r2
 8007d76:	3384      	adds	r3, #132	; 0x84
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	01db      	lsls	r3, r3, #7
 8007d88:	4413      	add	r3, r2
 8007d8a:	3384      	adds	r3, #132	; 0x84
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	61fb      	str	r3, [r7, #28]
 8007da0:	e01b      	b.n	8007dda <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d102      	bne.n	8007db0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007daa:	2303      	movs	r3, #3
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	e014      	b.n	8007dda <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d00b      	beq.n	8007dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d007      	beq.n	8007dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d003      	beq.n	8007dd0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007dcc:	2b07      	cmp	r3, #7
 8007dce:	d102      	bne.n	8007dd6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	e001      	b.n	8007dda <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	01db      	lsls	r3, r3, #7
 8007de4:	4413      	add	r3, r2
 8007de6:	3384      	adds	r3, #132	; 0x84
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	4611      	mov	r1, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	01d2      	lsls	r2, r2, #7
 8007df4:	440a      	add	r2, r1
 8007df6:	3284      	adds	r2, #132	; 0x84
 8007df8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	fb02 f303 	mul.w	r3, r2, r3
 8007e08:	041a      	lsls	r2, r3, #16
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	3303      	adds	r3, #3
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	6809      	ldr	r1, [r1, #0]
 8007e20:	4608      	mov	r0, r1
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	01c9      	lsls	r1, r1, #7
 8007e26:	4401      	add	r1, r0
 8007e28:	3184      	adds	r1, #132	; 0x84
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	01db      	lsls	r3, r3, #7
 8007e38:	4413      	add	r3, r2
 8007e3a:	3384      	adds	r3, #132	; 0x84
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4619      	mov	r1, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	01db      	lsls	r3, r3, #7
 8007e48:	440b      	add	r3, r1
 8007e4a:	3384      	adds	r3, #132	; 0x84
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <LTDC_SetConfig+0x330>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	01db      	lsls	r3, r3, #7
 8007e5e:	4413      	add	r3, r2
 8007e60:	3384      	adds	r3, #132	; 0x84
 8007e62:	461a      	mov	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	01db      	lsls	r3, r3, #7
 8007e74:	4413      	add	r3, r2
 8007e76:	3384      	adds	r3, #132	; 0x84
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	01d2      	lsls	r2, r2, #7
 8007e84:	440a      	add	r2, r1
 8007e86:	3284      	adds	r2, #132	; 0x84
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	3724      	adds	r7, #36	; 0x24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	fffff8f8 	.word	0xfffff8f8
 8007ea0:	fffff800 	.word	0xfffff800

08007ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb2:	6013      	str	r3, [r2, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40007000 	.word	0x40007000

08007ec4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ece:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	4a22      	ldr	r2, [pc, #136]	; (8007f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8007ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ef2:	f7fc f915 	bl	8004120 <HAL_GetTick>
 8007ef6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ef8:	e009      	b.n	8007f0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007efa:	f7fc f911 	bl	8004120 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f08:	d901      	bls.n	8007f0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e022      	b.n	8007f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d1ee      	bne.n	8007efa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007f1c:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f28:	f7fc f8fa 	bl	8004120 <HAL_GetTick>
 8007f2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f2e:	e009      	b.n	8007f44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007f30:	f7fc f8f6 	bl	8004120 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f3e:	d901      	bls.n	8007f44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e007      	b.n	8007f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f50:	d1ee      	bne.n	8007f30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	40007000 	.word	0x40007000

08007f64 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007f6c:	f7fc f8d8 	bl	8004120 <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e067      	b.n	800804c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fa fec1 	bl	8002d18 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007f96:	f241 3188 	movw	r1, #5000	; 0x1388
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fda8 	bl	8008af0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	021a      	lsls	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fdd3 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007fd0:	7afb      	ldrb	r3, [r7, #11]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d135      	bne.n	8008042 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <HAL_QSPI_Init+0xf0>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	0611      	lsls	r1, r2, #24
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68d2      	ldr	r2, [r2, #12]
 8007fea:	4311      	orrs	r1, r2
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	69d2      	ldr	r2, [r2, #28]
 8007ff0:	4311      	orrs	r1, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6a12      	ldr	r2, [r2, #32]
 8007ff6:	4311      	orrs	r1, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_QSPI_Init+0xf4>)
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6912      	ldr	r2, [r2, #16]
 800800e:	0411      	lsls	r1, r2, #16
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6952      	ldr	r2, [r2, #20]
 8008014:	4311      	orrs	r1, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6992      	ldr	r2, [r2, #24]
 800801a:	4311      	orrs	r1, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	430b      	orrs	r3, r1
 8008022:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800804a:	7afb      	ldrb	r3, [r7, #11]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	00ffff2f 	.word	0x00ffff2f
 8008058:	ffe0f8fe 	.word	0xffe0f8fe

0800805c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d064      	beq.n	8008148 <HAL_QSPI_IRQHandler+0xec>
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05f      	beq.n	8008148 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3320      	adds	r3, #32
 800808e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b12      	cmp	r3, #18
 800809a:	d125      	bne.n	80080e8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800809c:	e01c      	b.n	80080d8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	1e5a      	subs	r2, r3, #1
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80080c4:	e008      	b.n	80080d8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080d4:	601a      	str	r2, [r3, #0]
          break;
 80080d6:	e033      	b.n	8008140 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1db      	bne.n	800809e <HAL_QSPI_IRQHandler+0x42>
 80080e6:	e02b      	b.n	8008140 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b22      	cmp	r3, #34	; 0x22
 80080f2:	d125      	bne.n	8008140 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80080f4:	e01d      	b.n	8008132 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	1e5a      	subs	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	639a      	str	r2, [r3, #56]	; 0x38
 800811e:	e008      	b.n	8008132 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800812e:	601a      	str	r2, [r3, #0]
          break;
 8008130:	e006      	b.n	8008140 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1da      	bne.n	80080f6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fbed 	bl	8008920 <HAL_QSPI_FifoThresholdCallback>
 8008146:	e142      	b.n	80083ce <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80b6 	beq.w	80082c0 <HAL_QSPI_IRQHandler+0x264>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80b0 	beq.w	80082c0 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2202      	movs	r2, #2
 8008166:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008176:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b12      	cmp	r3, #18
 8008182:	d123      	bne.n	80081cc <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b00      	cmp	r3, #0
 8008190:	d011      	beq.n	80081b6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0204 	bic.w	r2, r2, #4
 80081a0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0201 	bic.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fc3e 	bl	8008a38 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fba1 	bl	800890c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80081ca:	e0fd      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b22      	cmp	r3, #34	; 0x22
 80081d6:	d146      	bne.n	8008266 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d012      	beq.n	800820c <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0204 	bic.w	r2, r2, #4
 80081f4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e021      	b.n	8008250 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3320      	adds	r3, #32
 8008212:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008214:	e013      	b.n	800823e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d017      	beq.n	800824e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <HAL_QSPI_IRQHandler+0x1ba>
 800824c:	e000      	b.n	8008250 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800824e:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fbf1 	bl	8008a38 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fb4a 	bl	80088f8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008264:	e0b0      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d107      	bne.n	8008282 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb32 	bl	80088e4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008280:	e0a2      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b08      	cmp	r3, #8
 800828c:	f040 809c 	bne.w	80083c8 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800829e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb0d 	bl	80088d0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80082b6:	e087      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 faff 	bl	80088bc <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80082be:	e083      	b.n	80083c8 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01f      	beq.n	800830a <HAL_QSPI_IRQHandler+0x2ae>
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2208      	movs	r2, #8
 80082da:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80082f8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fb16 	bl	8008934 <HAL_QSPI_StatusMatchCallback>
 8008308:	e061      	b.n	80083ce <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d047      	beq.n	80083a4 <HAL_QSPI_IRQHandler+0x348>
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d042      	beq.n	80083a4 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2201      	movs	r2, #1
 8008324:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008334:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	f043 0202 	orr.w	r2, r3, #2
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d021      	beq.n	8008394 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	4a1c      	ldr	r2, [pc, #112]	; (80083d8 <HAL_QSPI_IRQHandler+0x37c>)
 8008366:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc fe71 	bl	8005054 <HAL_DMA_Abort_IT>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d029      	beq.n	80083cc <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837c:	f043 0204 	orr.w	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa95 	bl	80088bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008392:	e01b      	b.n	80083cc <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa8d 	bl	80088bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80083a2:	e013      	b.n	80083cc <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <HAL_QSPI_IRQHandler+0x372>
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2210      	movs	r2, #16
 80083be:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fac1 	bl	8008948 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80083c6:	e002      	b.n	80083ce <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80083c8:	bf00      	nop
 80083ca:	e000      	b.n	80083ce <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80083cc:	bf00      	nop
}
 80083ce:	bf00      	nop
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	08008b0d 	.word	0x08008b0d

080083dc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80083e8:	f7fb fe9a 	bl	8004120 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_QSPI_Command+0x22>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e048      	b.n	8008490 <HAL_QSPI_Command+0xb4>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	d137      	bne.n	8008482 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2200      	movs	r2, #0
 8008428:	2120      	movs	r1, #32
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fba1 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d125      	bne.n	8008486 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800843a:	2200      	movs	r2, #0
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fbce 	bl	8008be0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d115      	bne.n	8008478 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2201      	movs	r2, #1
 8008454:	2102      	movs	r1, #2
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 fb8b 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10f      	bne.n	8008486 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2202      	movs	r2, #2
 800846c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008476:	e006      	b.n	8008486 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008480:	e001      	b.n	8008486 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008482:	2302      	movs	r3, #2
 8008484:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800848e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80084a8:	f7fb fe3a 	bl	8004120 <HAL_GetTick>
 80084ac:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3320      	adds	r3, #32
 80084b4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_QSPI_Transmit+0x2e>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e07b      	b.n	80085be <HAL_QSPI_Transmit+0x126>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d16a      	bne.n	80085b0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d05b      	beq.n	800859e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2212      	movs	r2, #18
 80084ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695a      	ldr	r2, [r3, #20]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800851a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800851c:	e01b      	b.n	8008556 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2201      	movs	r2, #1
 8008526:	2104      	movs	r1, #4
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fb22 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d113      	bne.n	8008560 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	1e5a      	subs	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1df      	bne.n	800851e <HAL_QSPI_Transmit+0x86>
 800855e:	e000      	b.n	8008562 <HAL_QSPI_Transmit+0xca>
          break;
 8008560:	bf00      	nop
      }

      if (status == HAL_OK)
 8008562:	7ffb      	ldrb	r3, [r7, #31]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d115      	bne.n	8008594 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2201      	movs	r2, #1
 8008570:	2102      	movs	r1, #2
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fafd 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800857c:	7ffb      	ldrb	r3, [r7, #31]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d108      	bne.n	8008594 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2202      	movs	r2, #2
 8008588:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f9e6 	bl	800895c <HAL_QSPI_Abort>
 8008590:	4603      	mov	r3, r0
 8008592:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800859c:	e00a      	b.n	80085b4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	f043 0208 	orr.w	r2, r3, #8
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	77fb      	strb	r3, [r7, #31]
 80085ae:	e001      	b.n	80085b4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80085b0:	2302      	movs	r3, #2
 80085b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80085bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b08a      	sub	sp, #40	; 0x28
 80085ca:	af02      	add	r7, sp, #8
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80085d6:	f7fb fda3 	bl	8004120 <HAL_GetTick>
 80085da:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3320      	adds	r3, #32
 80085ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_QSPI_Receive+0x36>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e082      	b.n	8008702 <HAL_QSPI_Receive+0x13c>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d171      	bne.n	80086f4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d062      	beq.n	80086e2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2222      	movs	r2, #34	; 0x22
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008654:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800865e:	e01c      	b.n	800869a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	2201      	movs	r2, #1
 8008668:	2106      	movs	r1, #6
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fa81 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008674:	7ffb      	ldrb	r3, [r7, #31]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d114      	bne.n	80086a4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	1e5a      	subs	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1de      	bne.n	8008660 <HAL_QSPI_Receive+0x9a>
 80086a2:	e000      	b.n	80086a6 <HAL_QSPI_Receive+0xe0>
          break;
 80086a4:	bf00      	nop
      }

      if (status == HAL_OK)
 80086a6:	7ffb      	ldrb	r3, [r7, #31]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d115      	bne.n	80086d8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2201      	movs	r2, #1
 80086b4:	2102      	movs	r1, #2
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 fa5b 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 80086bc:	4603      	mov	r3, r0
 80086be:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80086c0:	7ffb      	ldrb	r3, [r7, #31]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d108      	bne.n	80086d8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2202      	movs	r2, #2
 80086cc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f944 	bl	800895c <HAL_QSPI_Abort>
 80086d4:	4603      	mov	r3, r0
 80086d6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086e0:	e00a      	b.n	80086f8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	77fb      	strb	r3, [r7, #31]
 80086f2:	e001      	b.n	80086f8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80086f4:	2302      	movs	r3, #2
 80086f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008700:	7ffb      	ldrb	r3, [r7, #31]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3720      	adds	r7, #32
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b088      	sub	sp, #32
 800870e:	af02      	add	r7, sp, #8
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008718:	f7fb fd02 	bl	8004120 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_QSPI_AutoPolling+0x24>
 800872a:	2302      	movs	r3, #2
 800872c:	e060      	b.n	80087f0 <HAL_QSPI_AutoPolling+0xe6>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b01      	cmp	r3, #1
 8008740:	d14f      	bne.n	80087e2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2242      	movs	r2, #66	; 0x42
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2200      	movs	r2, #0
 8008758:	2120      	movs	r1, #32
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fa09 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d13d      	bne.n	80087e6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6852      	ldr	r2, [r2, #4]
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6892      	ldr	r2, [r2, #8]
 8008786:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	431a      	orrs	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80087a0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80087aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fa15 	bl	8008be0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2201      	movs	r2, #1
 80087be:	2108      	movs	r1, #8
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f9d6 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2208      	movs	r2, #8
 80087d6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087e0:	e001      	b.n	80087e6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80087e2:	2302      	movs	r3, #2
 80087e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008804:	f7fb fc8c 	bl	8004120 <HAL_GetTick>
 8008808:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_QSPI_MemoryMapped+0x22>
 8008816:	2302      	movs	r3, #2
 8008818:	e04c      	b.n	80088b4 <HAL_QSPI_MemoryMapped+0xbc>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b01      	cmp	r3, #1
 800882c:	d13b      	bne.n	80088a6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2282      	movs	r2, #130	; 0x82
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2200      	movs	r2, #0
 8008846:	2120      	movs	r1, #32
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f992 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d128      	bne.n	80088aa <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f023 0108 	bic.w	r1, r3, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b08      	cmp	r3, #8
 8008874:	d110      	bne.n	8008898 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2210      	movs	r2, #16
 8008886:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008896:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008898:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 f99e 	bl	8008be0 <QSPI_Config>
 80088a4:	e001      	b.n	80088aa <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80088a6:	2302      	movs	r3, #2
 80088a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af02      	add	r7, sp, #8
 8008962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008968:	f7fb fbda 	bl	8004120 <HAL_GetTick>
 800896c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d056      	beq.n	8008a2c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d017      	beq.n	80089c4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0204 	bic.w	r2, r2, #4
 80089a2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fc fae3 	bl	8004f74 <HAL_DMA_Abort>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089bc:	f043 0204 	orr.w	r2, r3, #4
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0202 	orr.w	r2, r2, #2
 80089d2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2201      	movs	r2, #1
 80089de:	2102      	movs	r1, #2
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8c6 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10e      	bne.n	8008a0e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2202      	movs	r2, #2
 80089f6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2120      	movs	r1, #32
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f8b4 	bl	8008b72 <QSPI_WaitFlagStateUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008a22:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d046      	beq.n	8008ae2 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2208      	movs	r2, #8
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008a72:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d01b      	beq.n	8008aba <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0204 	bic.w	r2, r2, #4
 8008a90:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	4a15      	ldr	r2, [pc, #84]	; (8008aec <HAL_QSPI_Abort_IT+0xb4>)
 8008a98:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fc fad8 	bl	8005054 <HAL_DMA_Abort_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01b      	beq.n	8008ae2 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ff0c 	bl	80088d0 <HAL_QSPI_AbortCpltCallback>
 8008ab8:	e013      	b.n	8008ae2 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ad0:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0202 	orr.w	r2, r2, #2
 8008ae0:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08008b0d 	.word	0x08008b0d

08008af0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d114      	bne.n	8008b5c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2202      	movs	r2, #2
 8008b38:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b48:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f042 0202 	orr.w	r2, r2, #2
 8008b58:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8008b5a:	e006      	b.n	8008b6a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fea9 	bl	80088bc <HAL_QSPI_ErrorCallback>
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008b82:	e01a      	b.n	8008bba <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b8a:	d016      	beq.n	8008bba <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8c:	f7fb fac8 	bl	8004120 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d302      	bcc.n	8008ba2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	f043 0201 	orr.w	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e00e      	b.n	8008bd8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	461a      	mov	r2, r3
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d1d6      	bne.n	8008b84 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <QSPI_Config+0x28>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008bfa:	d005      	beq.n	8008c08 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3a01      	subs	r2, #1
 8008c06:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 80b9 	beq.w	8008d84 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d05f      	beq.n	8008cda <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	6892      	ldr	r2, [r2, #8]
 8008c22:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d031      	beq.n	8008c90 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	431a      	orrs	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	431a      	orrs	r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	049b      	lsls	r3, r3, #18
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	431a      	orrs	r2, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	431a      	orrs	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	ea42 0103 	orr.w	r1, r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008c80:	f000 812e 	beq.w	8008ee0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	6852      	ldr	r2, [r2, #4]
 8008c8c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008c8e:	e127      	b.n	8008ee0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	049b      	lsls	r3, r3, #18
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	ea42 0103 	orr.w	r1, r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	615a      	str	r2, [r3, #20]
}
 8008cd8:	e102      	b.n	8008ee0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d02e      	beq.n	8008d40 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	431a      	orrs	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	049b      	lsls	r3, r3, #18
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	431a      	orrs	r2, r3
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	ea42 0103 	orr.w	r1, r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008d30:	f000 80d6 	beq.w	8008ee0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	6852      	ldr	r2, [r2, #4]
 8008d3c:	619a      	str	r2, [r3, #24]
}
 8008d3e:	e0cf      	b.n	8008ee0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	431a      	orrs	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	049b      	lsls	r3, r3, #18
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	ea42 0103 	orr.w	r1, r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	615a      	str	r2, [r3, #20]
}
 8008d82:	e0ad      	b.n	8008ee0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d058      	beq.n	8008e3e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	6892      	ldr	r2, [r2, #8]
 8008d94:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d02d      	beq.n	8008dfa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	431a      	orrs	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dac:	431a      	orrs	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	431a      	orrs	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	049b      	lsls	r3, r3, #18
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	ea42 0103 	orr.w	r1, r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008dec:	d078      	beq.n	8008ee0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	6852      	ldr	r2, [r2, #4]
 8008df6:	619a      	str	r2, [r3, #24]
}
 8008df8:	e072      	b.n	8008ee0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e02:	431a      	orrs	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	049b      	lsls	r3, r3, #18
 8008e16:	431a      	orrs	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	ea42 0103 	orr.w	r1, r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	615a      	str	r2, [r3, #20]
}
 8008e3c:	e050      	b.n	8008ee0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02a      	beq.n	8008e9c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	431a      	orrs	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	049b      	lsls	r3, r3, #18
 8008e62:	431a      	orrs	r2, r3
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	ea42 0103 	orr.w	r1, r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008e8e:	d027      	beq.n	8008ee0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	6852      	ldr	r2, [r2, #4]
 8008e98:	619a      	str	r2, [r3, #24]
}
 8008e9a:	e021      	b.n	8008ee0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01d      	beq.n	8008ee0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	431a      	orrs	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	049b      	lsls	r3, r3, #18
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	ea42 0103 	orr.w	r1, r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	615a      	str	r2, [r3, #20]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e291      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8087 	beq.w	800901e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f10:	4b96      	ldr	r3, [pc, #600]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 030c 	and.w	r3, r3, #12
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d00c      	beq.n	8008f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f1c:	4b93      	ldr	r3, [pc, #588]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f003 030c 	and.w	r3, r3, #12
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d112      	bne.n	8008f4e <HAL_RCC_OscConfig+0x62>
 8008f28:	4b90      	ldr	r3, [pc, #576]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f34:	d10b      	bne.n	8008f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f36:	4b8d      	ldr	r3, [pc, #564]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d06c      	beq.n	800901c <HAL_RCC_OscConfig+0x130>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d168      	bne.n	800901c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e26b      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f56:	d106      	bne.n	8008f66 <HAL_RCC_OscConfig+0x7a>
 8008f58:	4b84      	ldr	r3, [pc, #528]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a83      	ldr	r2, [pc, #524]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	e02e      	b.n	8008fc4 <HAL_RCC_OscConfig+0xd8>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10c      	bne.n	8008f88 <HAL_RCC_OscConfig+0x9c>
 8008f6e:	4b7f      	ldr	r3, [pc, #508]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a7e      	ldr	r2, [pc, #504]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	4b7c      	ldr	r3, [pc, #496]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a7b      	ldr	r2, [pc, #492]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e01d      	b.n	8008fc4 <HAL_RCC_OscConfig+0xd8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f90:	d10c      	bne.n	8008fac <HAL_RCC_OscConfig+0xc0>
 8008f92:	4b76      	ldr	r3, [pc, #472]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a75      	ldr	r2, [pc, #468]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	4b73      	ldr	r3, [pc, #460]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a72      	ldr	r2, [pc, #456]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	e00b      	b.n	8008fc4 <HAL_RCC_OscConfig+0xd8>
 8008fac:	4b6f      	ldr	r3, [pc, #444]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a6e      	ldr	r2, [pc, #440]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	4b6c      	ldr	r3, [pc, #432]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a6b      	ldr	r2, [pc, #428]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d013      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fcc:	f7fb f8a8 	bl	8004120 <HAL_GetTick>
 8008fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd4:	f7fb f8a4 	bl	8004120 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b64      	cmp	r3, #100	; 0x64
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e21f      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fe6:	4b61      	ldr	r3, [pc, #388]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0xe8>
 8008ff2:	e014      	b.n	800901e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff4:	f7fb f894 	bl	8004120 <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ffc:	f7fb f890 	bl	8004120 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b64      	cmp	r3, #100	; 0x64
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e20b      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800900e:	4b57      	ldr	r3, [pc, #348]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x110>
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800901c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d069      	beq.n	80090fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800902a:	4b50      	ldr	r3, [pc, #320]	; (800916c <HAL_RCC_OscConfig+0x280>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 030c 	and.w	r3, r3, #12
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009036:	4b4d      	ldr	r3, [pc, #308]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 030c 	and.w	r3, r3, #12
 800903e:	2b08      	cmp	r3, #8
 8009040:	d11c      	bne.n	800907c <HAL_RCC_OscConfig+0x190>
 8009042:	4b4a      	ldr	r3, [pc, #296]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d116      	bne.n	800907c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800904e:	4b47      	ldr	r3, [pc, #284]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_RCC_OscConfig+0x17a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d001      	beq.n	8009066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e1df      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009066:	4b41      	ldr	r3, [pc, #260]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	493d      	ldr	r1, [pc, #244]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009076:	4313      	orrs	r3, r2
 8009078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800907a:	e040      	b.n	80090fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d023      	beq.n	80090cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009084:	4b39      	ldr	r3, [pc, #228]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a38      	ldr	r2, [pc, #224]	; (800916c <HAL_RCC_OscConfig+0x280>)
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fb f846 	bl	8004120 <HAL_GetTick>
 8009094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009098:	f7fb f842 	bl	8004120 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e1bd      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090aa:	4b30      	ldr	r3, [pc, #192]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b6:	4b2d      	ldr	r3, [pc, #180]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4929      	ldr	r1, [pc, #164]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
 80090ca:	e018      	b.n	80090fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090cc:	4b27      	ldr	r3, [pc, #156]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a26      	ldr	r2, [pc, #152]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fb f822 	bl	8004120 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090e0:	f7fb f81e 	bl	8004120 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e199      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090f2:	4b1e      	ldr	r3, [pc, #120]	; (800916c <HAL_RCC_OscConfig+0x280>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f0      	bne.n	80090e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d038      	beq.n	800917c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d019      	beq.n	8009146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009116:	4a15      	ldr	r2, [pc, #84]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911e:	f7fa ffff 	bl	8004120 <HAL_GetTick>
 8009122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009126:	f7fa fffb 	bl	8004120 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e176      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009138:	4b0c      	ldr	r3, [pc, #48]	; (800916c <HAL_RCC_OscConfig+0x280>)
 800913a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x23a>
 8009144:	e01a      	b.n	800917c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_RCC_OscConfig+0x280>)
 8009148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914a:	4a08      	ldr	r2, [pc, #32]	; (800916c <HAL_RCC_OscConfig+0x280>)
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fa ffe5 	bl	8004120 <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009158:	e00a      	b.n	8009170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800915a:	f7fa ffe1 	bl	8004120 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d903      	bls.n	8009170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e15c      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
 800916c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009170:	4b91      	ldr	r3, [pc, #580]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1ee      	bne.n	800915a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80a4 	beq.w	80092d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800918a:	4b8b      	ldr	r3, [pc, #556]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10d      	bne.n	80091b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009196:	4b88      	ldr	r3, [pc, #544]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	4a87      	ldr	r2, [pc, #540]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800919c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a0:	6413      	str	r3, [r2, #64]	; 0x40
 80091a2:	4b85      	ldr	r3, [pc, #532]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091aa:	60bb      	str	r3, [r7, #8]
 80091ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091ae:	2301      	movs	r3, #1
 80091b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091b2:	4b82      	ldr	r3, [pc, #520]	; (80093bc <HAL_RCC_OscConfig+0x4d0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d118      	bne.n	80091f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80091be:	4b7f      	ldr	r3, [pc, #508]	; (80093bc <HAL_RCC_OscConfig+0x4d0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a7e      	ldr	r2, [pc, #504]	; (80093bc <HAL_RCC_OscConfig+0x4d0>)
 80091c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091ca:	f7fa ffa9 	bl	8004120 <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091d2:	f7fa ffa5 	bl	8004120 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b64      	cmp	r3, #100	; 0x64
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e120      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091e4:	4b75      	ldr	r3, [pc, #468]	; (80093bc <HAL_RCC_OscConfig+0x4d0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0f0      	beq.n	80091d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d106      	bne.n	8009206 <HAL_RCC_OscConfig+0x31a>
 80091f8:	4b6f      	ldr	r3, [pc, #444]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fc:	4a6e      	ldr	r2, [pc, #440]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	6713      	str	r3, [r2, #112]	; 0x70
 8009204:	e02d      	b.n	8009262 <HAL_RCC_OscConfig+0x376>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10c      	bne.n	8009228 <HAL_RCC_OscConfig+0x33c>
 800920e:	4b6a      	ldr	r3, [pc, #424]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	4a69      	ldr	r2, [pc, #420]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	6713      	str	r3, [r2, #112]	; 0x70
 800921a:	4b67      	ldr	r3, [pc, #412]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	4a66      	ldr	r2, [pc, #408]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009220:	f023 0304 	bic.w	r3, r3, #4
 8009224:	6713      	str	r3, [r2, #112]	; 0x70
 8009226:	e01c      	b.n	8009262 <HAL_RCC_OscConfig+0x376>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b05      	cmp	r3, #5
 800922e:	d10c      	bne.n	800924a <HAL_RCC_OscConfig+0x35e>
 8009230:	4b61      	ldr	r3, [pc, #388]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009234:	4a60      	ldr	r2, [pc, #384]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009236:	f043 0304 	orr.w	r3, r3, #4
 800923a:	6713      	str	r3, [r2, #112]	; 0x70
 800923c:	4b5e      	ldr	r3, [pc, #376]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800923e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009240:	4a5d      	ldr	r2, [pc, #372]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	6713      	str	r3, [r2, #112]	; 0x70
 8009248:	e00b      	b.n	8009262 <HAL_RCC_OscConfig+0x376>
 800924a:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	4a5a      	ldr	r2, [pc, #360]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	6713      	str	r3, [r2, #112]	; 0x70
 8009256:	4b58      	ldr	r3, [pc, #352]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	4a57      	ldr	r2, [pc, #348]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800925c:	f023 0304 	bic.w	r3, r3, #4
 8009260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d015      	beq.n	8009296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926a:	f7fa ff59 	bl	8004120 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fa ff55 	bl	8004120 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e0ce      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009288:	4b4b      	ldr	r3, [pc, #300]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0ee      	beq.n	8009272 <HAL_RCC_OscConfig+0x386>
 8009294:	e014      	b.n	80092c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009296:	f7fa ff43 	bl	8004120 <HAL_GetTick>
 800929a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800929c:	e00a      	b.n	80092b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800929e:	f7fa ff3f 	bl	8004120 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d901      	bls.n	80092b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e0b8      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b4:	4b40      	ldr	r3, [pc, #256]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b8:	f003 0302 	and.w	r3, r3, #2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ee      	bne.n	800929e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d105      	bne.n	80092d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092c6:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	4a3b      	ldr	r2, [pc, #236]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 80a4 	beq.w	8009424 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 030c 	and.w	r3, r3, #12
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d06b      	beq.n	80093c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d149      	bne.n	8009384 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a30      	ldr	r2, [pc, #192]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80092f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fc:	f7fa ff10 	bl	8004120 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009304:	f7fa ff0c 	bl	8004120 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e087      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009316:	4b28      	ldr	r3, [pc, #160]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f0      	bne.n	8009304 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69da      	ldr	r2, [r3, #28]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	019b      	lsls	r3, r3, #6
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	085b      	lsrs	r3, r3, #1
 800933a:	3b01      	subs	r3, #1
 800933c:	041b      	lsls	r3, r3, #16
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	061b      	lsls	r3, r3, #24
 8009346:	4313      	orrs	r3, r2
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800934a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800934e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009350:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800935a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935c:	f7fa fee0 	bl	8004120 <HAL_GetTick>
 8009360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009362:	e008      	b.n	8009376 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009364:	f7fa fedc 	bl	8004120 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d901      	bls.n	8009376 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e057      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f0      	beq.n	8009364 <HAL_RCC_OscConfig+0x478>
 8009382:	e04f      	b.n	8009424 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 800938a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800938e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009390:	f7fa fec6 	bl	8004120 <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009398:	f7fa fec2 	bl	8004120 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e03d      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <HAL_RCC_OscConfig+0x4cc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1f0      	bne.n	8009398 <HAL_RCC_OscConfig+0x4ac>
 80093b6:	e035      	b.n	8009424 <HAL_RCC_OscConfig+0x538>
 80093b8:	40023800 	.word	0x40023800
 80093bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80093c0:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <HAL_RCC_OscConfig+0x544>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d028      	beq.n	8009420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093d8:	429a      	cmp	r2, r3
 80093da:	d121      	bne.n	8009420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d11a      	bne.n	8009420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80093f0:	4013      	ands	r3, r2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d111      	bne.n	8009420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	085b      	lsrs	r3, r3, #1
 8009408:	3b01      	subs	r3, #1
 800940a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800940c:	429a      	cmp	r2, r3
 800940e:	d107      	bne.n	8009420 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800941c:	429a      	cmp	r2, r3
 800941e:	d001      	beq.n	8009424 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800

08009434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e0d0      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800944c:	4b6a      	ldr	r3, [pc, #424]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d910      	bls.n	800947c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800945a:	4b67      	ldr	r3, [pc, #412]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f023 020f 	bic.w	r2, r3, #15
 8009462:	4965      	ldr	r1, [pc, #404]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	4313      	orrs	r3, r2
 8009468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800946a:	4b63      	ldr	r3, [pc, #396]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d001      	beq.n	800947c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e0b8      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d020      	beq.n	80094ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009494:	4b59      	ldr	r3, [pc, #356]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	4a58      	ldr	r2, [pc, #352]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 800949a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800949e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094ac:	4b53      	ldr	r3, [pc, #332]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4a52      	ldr	r2, [pc, #328]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094b8:	4b50      	ldr	r3, [pc, #320]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	494d      	ldr	r1, [pc, #308]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d040      	beq.n	8009558 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d107      	bne.n	80094ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094de:	4b47      	ldr	r3, [pc, #284]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d115      	bne.n	8009516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e07f      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d107      	bne.n	8009506 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f6:	4b41      	ldr	r3, [pc, #260]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e073      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009506:	4b3d      	ldr	r3, [pc, #244]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e06b      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009516:	4b39      	ldr	r3, [pc, #228]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f023 0203 	bic.w	r2, r3, #3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	4936      	ldr	r1, [pc, #216]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009524:	4313      	orrs	r3, r2
 8009526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009528:	f7fa fdfa 	bl	8004120 <HAL_GetTick>
 800952c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800952e:	e00a      	b.n	8009546 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009530:	f7fa fdf6 	bl	8004120 <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	f241 3288 	movw	r2, #5000	; 0x1388
 800953e:	4293      	cmp	r3, r2
 8009540:	d901      	bls.n	8009546 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e053      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009546:	4b2d      	ldr	r3, [pc, #180]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 020c 	and.w	r2, r3, #12
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	429a      	cmp	r2, r3
 8009556:	d1eb      	bne.n	8009530 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009558:	4b27      	ldr	r3, [pc, #156]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d210      	bcs.n	8009588 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f023 020f 	bic.w	r2, r3, #15
 800956e:	4922      	ldr	r1, [pc, #136]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	4313      	orrs	r3, r2
 8009574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009576:	4b20      	ldr	r3, [pc, #128]	; (80095f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d001      	beq.n	8009588 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e032      	b.n	80095ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d008      	beq.n	80095a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009594:	4b19      	ldr	r3, [pc, #100]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4916      	ldr	r1, [pc, #88]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0308 	and.w	r3, r3, #8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80095b2:	4b12      	ldr	r3, [pc, #72]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	490e      	ldr	r1, [pc, #56]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80095c6:	f000 f821 	bl	800960c <HAL_RCC_GetSysClockFreq>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <HAL_RCC_ClockConfig+0x1c8>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	091b      	lsrs	r3, r3, #4
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	490a      	ldr	r1, [pc, #40]	; (8009600 <HAL_RCC_ClockConfig+0x1cc>)
 80095d8:	5ccb      	ldrb	r3, [r1, r3]
 80095da:	fa22 f303 	lsr.w	r3, r2, r3
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <HAL_RCC_ClockConfig+0x1d0>)
 80095e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <HAL_RCC_ClockConfig+0x1d4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fa f87a 	bl	80036e0 <HAL_InitTick>

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	40023c00 	.word	0x40023c00
 80095fc:	40023800 	.word	0x40023800
 8009600:	0801424c 	.word	0x0801424c
 8009604:	20000000 	.word	0x20000000
 8009608:	20000010 	.word	0x20000010

0800960c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800960c:	b5b0      	push	{r4, r5, r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009612:	2100      	movs	r1, #0
 8009614:	6079      	str	r1, [r7, #4]
 8009616:	2100      	movs	r1, #0
 8009618:	60f9      	str	r1, [r7, #12]
 800961a:	2100      	movs	r1, #0
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800961e:	2100      	movs	r1, #0
 8009620:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009622:	4952      	ldr	r1, [pc, #328]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 8009624:	6889      	ldr	r1, [r1, #8]
 8009626:	f001 010c 	and.w	r1, r1, #12
 800962a:	2908      	cmp	r1, #8
 800962c:	d00d      	beq.n	800964a <HAL_RCC_GetSysClockFreq+0x3e>
 800962e:	2908      	cmp	r1, #8
 8009630:	f200 8094 	bhi.w	800975c <HAL_RCC_GetSysClockFreq+0x150>
 8009634:	2900      	cmp	r1, #0
 8009636:	d002      	beq.n	800963e <HAL_RCC_GetSysClockFreq+0x32>
 8009638:	2904      	cmp	r1, #4
 800963a:	d003      	beq.n	8009644 <HAL_RCC_GetSysClockFreq+0x38>
 800963c:	e08e      	b.n	800975c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800963e:	4b4c      	ldr	r3, [pc, #304]	; (8009770 <HAL_RCC_GetSysClockFreq+0x164>)
 8009640:	60bb      	str	r3, [r7, #8]
      break;
 8009642:	e08e      	b.n	8009762 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009644:	4b4b      	ldr	r3, [pc, #300]	; (8009774 <HAL_RCC_GetSysClockFreq+0x168>)
 8009646:	60bb      	str	r3, [r7, #8]
      break;
 8009648:	e08b      	b.n	8009762 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800964a:	4948      	ldr	r1, [pc, #288]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 800964c:	6849      	ldr	r1, [r1, #4]
 800964e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009652:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009654:	4945      	ldr	r1, [pc, #276]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 8009656:	6849      	ldr	r1, [r1, #4]
 8009658:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800965c:	2900      	cmp	r1, #0
 800965e:	d024      	beq.n	80096aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009660:	4942      	ldr	r1, [pc, #264]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 8009662:	6849      	ldr	r1, [r1, #4]
 8009664:	0989      	lsrs	r1, r1, #6
 8009666:	4608      	mov	r0, r1
 8009668:	f04f 0100 	mov.w	r1, #0
 800966c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009670:	f04f 0500 	mov.w	r5, #0
 8009674:	ea00 0204 	and.w	r2, r0, r4
 8009678:	ea01 0305 	and.w	r3, r1, r5
 800967c:	493d      	ldr	r1, [pc, #244]	; (8009774 <HAL_RCC_GetSysClockFreq+0x168>)
 800967e:	fb01 f003 	mul.w	r0, r1, r3
 8009682:	2100      	movs	r1, #0
 8009684:	fb01 f102 	mul.w	r1, r1, r2
 8009688:	1844      	adds	r4, r0, r1
 800968a:	493a      	ldr	r1, [pc, #232]	; (8009774 <HAL_RCC_GetSysClockFreq+0x168>)
 800968c:	fba2 0101 	umull	r0, r1, r2, r1
 8009690:	1863      	adds	r3, r4, r1
 8009692:	4619      	mov	r1, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	461a      	mov	r2, r3
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	f7f7 faa4 	bl	8000be8 <__aeabi_uldivmod>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4613      	mov	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	e04a      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096aa:	4b30      	ldr	r3, [pc, #192]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	099b      	lsrs	r3, r3, #6
 80096b0:	461a      	mov	r2, r3
 80096b2:	f04f 0300 	mov.w	r3, #0
 80096b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80096ba:	f04f 0100 	mov.w	r1, #0
 80096be:	ea02 0400 	and.w	r4, r2, r0
 80096c2:	ea03 0501 	and.w	r5, r3, r1
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	014b      	lsls	r3, r1, #5
 80096d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80096d8:	0142      	lsls	r2, r0, #5
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	1b00      	subs	r0, r0, r4
 80096e0:	eb61 0105 	sbc.w	r1, r1, r5
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	018b      	lsls	r3, r1, #6
 80096ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80096f2:	0182      	lsls	r2, r0, #6
 80096f4:	1a12      	subs	r2, r2, r0
 80096f6:	eb63 0301 	sbc.w	r3, r3, r1
 80096fa:	f04f 0000 	mov.w	r0, #0
 80096fe:	f04f 0100 	mov.w	r1, #0
 8009702:	00d9      	lsls	r1, r3, #3
 8009704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009708:	00d0      	lsls	r0, r2, #3
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	1912      	adds	r2, r2, r4
 8009710:	eb45 0303 	adc.w	r3, r5, r3
 8009714:	f04f 0000 	mov.w	r0, #0
 8009718:	f04f 0100 	mov.w	r1, #0
 800971c:	0299      	lsls	r1, r3, #10
 800971e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009722:	0290      	lsls	r0, r2, #10
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4610      	mov	r0, r2
 800972a:	4619      	mov	r1, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	461a      	mov	r2, r3
 8009730:	f04f 0300 	mov.w	r3, #0
 8009734:	f7f7 fa58 	bl	8000be8 <__aeabi_uldivmod>
 8009738:	4602      	mov	r2, r0
 800973a:	460b      	mov	r3, r1
 800973c:	4613      	mov	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <HAL_RCC_GetSysClockFreq+0x160>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	0c1b      	lsrs	r3, r3, #16
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	3301      	adds	r3, #1
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	fbb2 f3f3 	udiv	r3, r2, r3
 8009758:	60bb      	str	r3, [r7, #8]
      break;
 800975a:	e002      	b.n	8009762 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800975c:	4b04      	ldr	r3, [pc, #16]	; (8009770 <HAL_RCC_GetSysClockFreq+0x164>)
 800975e:	60bb      	str	r3, [r7, #8]
      break;
 8009760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009762:	68bb      	ldr	r3, [r7, #8]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bdb0      	pop	{r4, r5, r7, pc}
 800976c:	40023800 	.word	0x40023800
 8009770:	00f42400 	.word	0x00f42400
 8009774:	017d7840 	.word	0x017d7840

08009778 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800977c:	4b03      	ldr	r3, [pc, #12]	; (800978c <HAL_RCC_GetHCLKFreq+0x14>)
 800977e:	681b      	ldr	r3, [r3, #0]
}
 8009780:	4618      	mov	r0, r3
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20000000 	.word	0x20000000

08009790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009794:	f7ff fff0 	bl	8009778 <HAL_RCC_GetHCLKFreq>
 8009798:	4602      	mov	r2, r0
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	0a9b      	lsrs	r3, r3, #10
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	4903      	ldr	r1, [pc, #12]	; (80097b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097a6:	5ccb      	ldrb	r3, [r1, r3]
 80097a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40023800 	.word	0x40023800
 80097b4:	0801425c 	.word	0x0801425c

080097b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80097bc:	f7ff ffdc 	bl	8009778 <HAL_RCC_GetHCLKFreq>
 80097c0:	4602      	mov	r2, r0
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	0b5b      	lsrs	r3, r3, #13
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	4903      	ldr	r1, [pc, #12]	; (80097dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097ce:	5ccb      	ldrb	r3, [r1, r3]
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	40023800 	.word	0x40023800
 80097dc:	0801425c 	.word	0x0801425c

080097e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	220f      	movs	r2, #15
 80097ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097f0:	4b12      	ldr	r3, [pc, #72]	; (800983c <HAL_RCC_GetClockConfig+0x5c>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f003 0203 	and.w	r2, r3, #3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097fc:	4b0f      	ldr	r3, [pc, #60]	; (800983c <HAL_RCC_GetClockConfig+0x5c>)
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <HAL_RCC_GetClockConfig+0x5c>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009814:	4b09      	ldr	r3, [pc, #36]	; (800983c <HAL_RCC_GetClockConfig+0x5c>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009822:	4b07      	ldr	r3, [pc, #28]	; (8009840 <HAL_RCC_GetClockConfig+0x60>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 020f 	and.w	r2, r3, #15
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	601a      	str	r2, [r3, #0]
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40023800 	.word	0x40023800
 8009840:	40023c00 	.word	0x40023c00

08009844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d012      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800986c:	4b69      	ldr	r3, [pc, #420]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	4a68      	ldr	r2, [pc, #416]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009872:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009876:	6093      	str	r3, [r2, #8]
 8009878:	4b66      	ldr	r3, [pc, #408]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009880:	4964      	ldr	r1, [pc, #400]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009882:	4313      	orrs	r3, r2
 8009884:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800988e:	2301      	movs	r3, #1
 8009890:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d017      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800989e:	4b5d      	ldr	r3, [pc, #372]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ac:	4959      	ldr	r1, [pc, #356]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098bc:	d101      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80098be:	2301      	movs	r3, #1
 80098c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d017      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80098da:	4b4e      	ldr	r3, [pc, #312]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	494a      	ldr	r1, [pc, #296]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098f8:	d101      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009906:	2301      	movs	r3, #1
 8009908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009916:	2301      	movs	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 808b 	beq.w	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009928:	4b3a      	ldr	r3, [pc, #232]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	4a39      	ldr	r2, [pc, #228]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800992e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009932:	6413      	str	r3, [r2, #64]	; 0x40
 8009934:	4b37      	ldr	r3, [pc, #220]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993c:	60bb      	str	r3, [r7, #8]
 800993e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009940:	4b35      	ldr	r3, [pc, #212]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a34      	ldr	r2, [pc, #208]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800994a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994c:	f7fa fbe8 	bl	8004120 <HAL_GetTick>
 8009950:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009952:	e008      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009954:	f7fa fbe4 	bl	8004120 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b64      	cmp	r3, #100	; 0x64
 8009960:	d901      	bls.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e357      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009966:	4b2c      	ldr	r3, [pc, #176]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f0      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009972:	4b28      	ldr	r3, [pc, #160]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d035      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	429a      	cmp	r2, r3
 800998e:	d02e      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009990:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009998:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800999a:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80099a6:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099aa:	4a1a      	ldr	r2, [pc, #104]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80099b2:	4a18      	ldr	r2, [pc, #96]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80099b8:	4b16      	ldr	r3, [pc, #88]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d114      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c4:	f7fa fbac 	bl	8004120 <HAL_GetTick>
 80099c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099ca:	e00a      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099cc:	f7fa fba8 	bl	8004120 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099da:	4293      	cmp	r3, r2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e319      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099e2:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0ee      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099fa:	d111      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009a0a:	400b      	ands	r3, r1
 8009a0c:	4901      	ldr	r1, [pc, #4]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	608b      	str	r3, [r1, #8]
 8009a12:	e00b      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009a14:	40023800 	.word	0x40023800
 8009a18:	40007000 	.word	0x40007000
 8009a1c:	0ffffcff 	.word	0x0ffffcff
 8009a20:	4bb1      	ldr	r3, [pc, #708]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	4ab0      	ldr	r2, [pc, #704]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a2a:	6093      	str	r3, [r2, #8]
 8009a2c:	4bae      	ldr	r3, [pc, #696]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a38:	49ab      	ldr	r1, [pc, #684]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d010      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a4a:	4ba7      	ldr	r3, [pc, #668]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a50:	4aa5      	ldr	r2, [pc, #660]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009a5a:	4ba3      	ldr	r3, [pc, #652]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	49a0      	ldr	r1, [pc, #640]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a78:	4b9b      	ldr	r3, [pc, #620]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a86:	4998      	ldr	r1, [pc, #608]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a9a:	4b93      	ldr	r3, [pc, #588]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa8:	498f      	ldr	r1, [pc, #572]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009abc:	4b8a      	ldr	r3, [pc, #552]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aca:	4987      	ldr	r1, [pc, #540]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ade:	4b82      	ldr	r3, [pc, #520]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aec:	497e      	ldr	r1, [pc, #504]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b00:	4b79      	ldr	r3, [pc, #484]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b06:	f023 0203 	bic.w	r2, r3, #3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	4976      	ldr	r1, [pc, #472]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b22:	4b71      	ldr	r3, [pc, #452]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b28:	f023 020c 	bic.w	r2, r3, #12
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	496d      	ldr	r1, [pc, #436]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b44:	4b68      	ldr	r3, [pc, #416]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b52:	4965      	ldr	r1, [pc, #404]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b66:	4b60      	ldr	r3, [pc, #384]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b74:	495c      	ldr	r1, [pc, #368]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b88:	4b57      	ldr	r3, [pc, #348]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	4954      	ldr	r1, [pc, #336]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009baa:	4b4f      	ldr	r3, [pc, #316]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	494b      	ldr	r1, [pc, #300]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009bcc:	4b46      	ldr	r3, [pc, #280]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bda:	4943      	ldr	r1, [pc, #268]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009bee:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfc:	493a      	ldr	r1, [pc, #232]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c10:	4b35      	ldr	r3, [pc, #212]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c1e:	4932      	ldr	r1, [pc, #200]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d011      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009c32:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c40:	4929      	ldr	r1, [pc, #164]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c50:	d101      	bne.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0308 	and.w	r3, r3, #8
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00a      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c72:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c80:	4919      	ldr	r1, [pc, #100]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009c94:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca4:	4910      	ldr	r1, [pc, #64]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d006      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 80d9 	beq.w	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009cc0:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a08      	ldr	r2, [pc, #32]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ccc:	f7fa fa28 	bl	8004120 <HAL_GetTick>
 8009cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cd2:	e00b      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009cd4:	f7fa fa24 	bl	8004120 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b64      	cmp	r3, #100	; 0x64
 8009ce0:	d904      	bls.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e197      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009ce6:	bf00      	nop
 8009ce8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009cec:	4b6c      	ldr	r3, [pc, #432]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1ed      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d021      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11d      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d0c:	4b64      	ldr	r3, [pc, #400]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d12:	0c1b      	lsrs	r3, r3, #16
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d1a:	4b61      	ldr	r3, [pc, #388]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d20:	0e1b      	lsrs	r3, r3, #24
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	019a      	lsls	r2, r3, #6
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	041b      	lsls	r3, r3, #16
 8009d32:	431a      	orrs	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	061b      	lsls	r3, r3, #24
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	071b      	lsls	r3, r3, #28
 8009d40:	4957      	ldr	r1, [pc, #348]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d5c:	d00a      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d02e      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d72:	d129      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d74:	4b4a      	ldr	r3, [pc, #296]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d7a:	0c1b      	lsrs	r3, r3, #16
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d82:	4b47      	ldr	r3, [pc, #284]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d88:	0f1b      	lsrs	r3, r3, #28
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	019a      	lsls	r2, r3, #6
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	061b      	lsls	r3, r3, #24
 8009da2:	431a      	orrs	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	071b      	lsls	r3, r3, #28
 8009da8:	493d      	ldr	r1, [pc, #244]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009db0:	4b3b      	ldr	r3, [pc, #236]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db6:	f023 021f 	bic.w	r2, r3, #31
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	4937      	ldr	r1, [pc, #220]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01d      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009dd4:	4b32      	ldr	r3, [pc, #200]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dda:	0e1b      	lsrs	r3, r3, #24
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009de2:	4b2f      	ldr	r3, [pc, #188]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009de8:	0f1b      	lsrs	r3, r3, #28
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	019a      	lsls	r2, r3, #6
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	061b      	lsls	r3, r3, #24
 8009e02:	431a      	orrs	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	071b      	lsls	r3, r3, #28
 8009e08:	4925      	ldr	r1, [pc, #148]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d011      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	019a      	lsls	r2, r3, #6
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	041b      	lsls	r3, r3, #16
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	061b      	lsls	r3, r3, #24
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	071b      	lsls	r3, r3, #28
 8009e38:	4919      	ldr	r1, [pc, #100]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a16      	ldr	r2, [pc, #88]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4c:	f7fa f968 	bl	8004120 <HAL_GetTick>
 8009e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e52:	e008      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e54:	f7fa f964 	bl	8004120 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b64      	cmp	r3, #100	; 0x64
 8009e60:	d901      	bls.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e0d7      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e66:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0f0      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	f040 80cd 	bne.w	800a014 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e7a:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a08      	ldr	r2, [pc, #32]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e86:	f7fa f94b 	bl	8004120 <HAL_GetTick>
 8009e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e8c:	e00a      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e8e:	f7fa f947 	bl	8004120 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b64      	cmp	r3, #100	; 0x64
 8009e9a:	d903      	bls.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e0ba      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009ea0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ea4:	4b5e      	ldr	r3, [pc, #376]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb0:	d0ed      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d009      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02e      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d12a      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009eda:	4b51      	ldr	r3, [pc, #324]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	0c1b      	lsrs	r3, r3, #16
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ee8:	4b4d      	ldr	r3, [pc, #308]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eee:	0f1b      	lsrs	r3, r3, #28
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	019a      	lsls	r2, r3, #6
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	041b      	lsls	r3, r3, #16
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	061b      	lsls	r3, r3, #24
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	071b      	lsls	r3, r3, #28
 8009f0e:	4944      	ldr	r1, [pc, #272]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009f16:	4b42      	ldr	r3, [pc, #264]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	493d      	ldr	r1, [pc, #244]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d022      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f44:	d11d      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f46:	4b36      	ldr	r3, [pc, #216]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	0e1b      	lsrs	r3, r3, #24
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f54:	4b32      	ldr	r3, [pc, #200]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	019a      	lsls	r2, r3, #6
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	041b      	lsls	r3, r3, #16
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	061b      	lsls	r3, r3, #24
 8009f74:	431a      	orrs	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	071b      	lsls	r3, r3, #28
 8009f7a:	4929      	ldr	r1, [pc, #164]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d028      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f8e:	4b24      	ldr	r3, [pc, #144]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	0e1b      	lsrs	r3, r3, #24
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009f9c:	4b20      	ldr	r3, [pc, #128]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	0c1b      	lsrs	r3, r3, #16
 8009fa4:	f003 0303 	and.w	r3, r3, #3
 8009fa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	019a      	lsls	r2, r3, #6
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	041b      	lsls	r3, r3, #16
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	061b      	lsls	r3, r3, #24
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	071b      	lsls	r3, r3, #28
 8009fc2:	4917      	ldr	r1, [pc, #92]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009fca:	4b15      	ldr	r3, [pc, #84]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	4911      	ldr	r1, [pc, #68]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a0e      	ldr	r2, [pc, #56]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fec:	f7fa f898 	bl	8004120 <HAL_GetTick>
 8009ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ff2:	e008      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ff4:	f7fa f894 	bl	8004120 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b64      	cmp	r3, #100	; 0x64
 800a000:	d901      	bls.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e007      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a00e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a012:	d1ef      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	40023800 	.word	0x40023800

0800a024 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a042:	f040 808c 	bne.w	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a046:	4b95      	ldr	r3, [pc, #596]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a054:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a05c:	d07c      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a064:	d87d      	bhi.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d004      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a072:	d039      	beq.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a074:	e075      	b.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a076:	4b89      	ldr	r3, [pc, #548]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d108      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a082:	4b86      	ldr	r3, [pc, #536]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a08a:	4a85      	ldr	r2, [pc, #532]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	e007      	b.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a094:	4b81      	ldr	r3, [pc, #516]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a09c:	4a81      	ldr	r2, [pc, #516]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a0a4:	4b7d      	ldr	r3, [pc, #500]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0aa:	0e1b      	lsrs	r3, r3, #24
 800a0ac:	f003 030f 	and.w	r3, r3, #15
 800a0b0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a0b2:	4b7a      	ldr	r3, [pc, #488]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b8:	099b      	lsrs	r3, r3, #6
 800a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	fb02 f203 	mul.w	r2, r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a0cc:	4b73      	ldr	r3, [pc, #460]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	f003 031f 	and.w	r3, r3, #31
 800a0d8:	3301      	adds	r3, #1
 800a0da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e4:	617b      	str	r3, [r7, #20]
        break;
 800a0e6:	e03d      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a0e8:	4b6c      	ldr	r3, [pc, #432]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d108      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0f4:	4b69      	ldr	r3, [pc, #420]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0fc:	4a68      	ldr	r2, [pc, #416]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	e007      	b.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a106:	4b65      	ldr	r3, [pc, #404]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a10e:	4a65      	ldr	r2, [pc, #404]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a116:	4b61      	ldr	r3, [pc, #388]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a11c:	0e1b      	lsrs	r3, r3, #24
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a124:	4b5d      	ldr	r3, [pc, #372]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a12a:	099b      	lsrs	r3, r3, #6
 800a12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	fb02 f203 	mul.w	r2, r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a13e:	4b57      	ldr	r3, [pc, #348]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a144:	f003 031f 	and.w	r3, r3, #31
 800a148:	3301      	adds	r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	fbb2 f3f3 	udiv	r3, r2, r3
 800a154:	617b      	str	r3, [r7, #20]
        break;
 800a156:	e005      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a158:	4b53      	ldr	r3, [pc, #332]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a15a:	617b      	str	r3, [r7, #20]
        break;
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800a162:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a16a:	f040 808c 	bne.w	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a16e:	4b4b      	ldr	r3, [pc, #300]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a174:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a17c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a184:	d07c      	beq.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a18c:	d87d      	bhi.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19a:	d039      	beq.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a19c:	e075      	b.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a19e:	4b3f      	ldr	r3, [pc, #252]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d108      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a1aa:	4b3c      	ldr	r3, [pc, #240]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1b2:	4a3b      	ldr	r2, [pc, #236]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	613b      	str	r3, [r7, #16]
 800a1ba:	e007      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a1bc:	4b37      	ldr	r3, [pc, #220]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c4:	4a37      	ldr	r2, [pc, #220]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a1cc:	4b33      	ldr	r3, [pc, #204]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	0e1b      	lsrs	r3, r3, #24
 800a1d4:	f003 030f 	and.w	r3, r3, #15
 800a1d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a1da:	4b30      	ldr	r3, [pc, #192]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e0:	099b      	lsrs	r3, r3, #6
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	fb02 f203 	mul.w	r2, r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a1f4:	4b29      	ldr	r3, [pc, #164]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	f003 031f 	and.w	r3, r3, #31
 800a200:	3301      	adds	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	617b      	str	r3, [r7, #20]
        break;
 800a20e:	e03d      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a210:	4b22      	ldr	r3, [pc, #136]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d108      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a21c:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a224:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	e007      	b.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a236:	4a1b      	ldr	r2, [pc, #108]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a238:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a23e:	4b17      	ldr	r3, [pc, #92]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a244:	0e1b      	lsrs	r3, r3, #24
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a24c:	4b13      	ldr	r3, [pc, #76]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a252:	099b      	lsrs	r3, r3, #6
 800a254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	fb02 f203 	mul.w	r2, r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	fbb2 f3f3 	udiv	r3, r2, r3
 800a264:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26c:	f003 031f 	and.w	r3, r3, #31
 800a270:	3301      	adds	r3, #1
 800a272:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27c:	617b      	str	r3, [r7, #20]
        break;
 800a27e:	e005      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a282:	617b      	str	r3, [r7, #20]
        break;
 800a284:	e002      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800a286:	bf00      	nop
 800a288:	e000      	b.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800a28a:	bf00      	nop

  return frequency;
 800a28c:	697b      	ldr	r3, [r7, #20]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	00f42400 	.word	0x00f42400
 800a2a4:	017d7840 	.word	0x017d7840
 800a2a8:	00bb8000 	.word	0x00bb8000

0800a2ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e081      	b.n	800a3c2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	7f5b      	ldrb	r3, [r3, #29]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7f8 fdba 	bl	8002e48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	22ca      	movs	r2, #202	; 0xca
 800a2e0:	625a      	str	r2, [r3, #36]	; 0x24
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2253      	movs	r2, #83	; 0x53
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fb16 	bl	800a91c <RTC_EnterInitMode>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d008      	beq.n	800a308 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	22ff      	movs	r2, #255	; 0xff
 800a2fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2204      	movs	r2, #4
 800a302:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e05c      	b.n	800a3c2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6899      	ldr	r1, [r3, #8]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <HAL_RTC_Init+0x120>)
 800a314:	400b      	ands	r3, r1
 800a316:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6899      	ldr	r1, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	68d2      	ldr	r2, [r2, #12]
 800a33e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6919      	ldr	r1, [r3, #16]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	041a      	lsls	r2, r3, #16
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a362:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10e      	bne.n	800a390 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 faaa 	bl	800a8cc <HAL_RTC_WaitForSynchro>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d008      	beq.n	800a390 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	22ff      	movs	r2, #255	; 0xff
 800a384:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2204      	movs	r2, #4
 800a38a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e018      	b.n	800a3c2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0208 	bic.w	r2, r2, #8
 800a39e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	22ff      	movs	r2, #255	; 0xff
 800a3b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	ff8fffbf 	.word	0xff8fffbf

0800a3d0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	7f1b      	ldrb	r3, [r3, #28]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d101      	bne.n	800a3ec <HAL_RTC_SetTime+0x1c>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e0a8      	b.n	800a53e <HAL_RTC_SetTime+0x16e>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d126      	bne.n	800a44c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2200      	movs	r2, #0
 800a410:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 faac 	bl	800a974 <RTC_ByteToBcd2>
 800a41c:	4603      	mov	r3, r0
 800a41e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	785b      	ldrb	r3, [r3, #1]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 faa5 	bl	800a974 <RTC_ByteToBcd2>
 800a42a:	4603      	mov	r3, r0
 800a42c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a42e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	789b      	ldrb	r3, [r3, #2]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fa9d 	bl	800a974 <RTC_ByteToBcd2>
 800a43a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a43c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	7b1b      	ldrb	r3, [r3, #12]
 800a444:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e018      	b.n	800a47e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2200      	movs	r2, #0
 800a45e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a46c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a472:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	7b1b      	ldrb	r3, [r3, #12]
 800a478:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	22ca      	movs	r2, #202	; 0xca
 800a484:	625a      	str	r2, [r3, #36]	; 0x24
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2253      	movs	r2, #83	; 0x53
 800a48c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fa44 	bl	800a91c <RTC_EnterInitMode>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	22ff      	movs	r2, #255	; 0xff
 800a4a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e045      	b.n	800a53e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	4b23      	ldr	r3, [pc, #140]	; (800a548 <HAL_RTC_SetTime+0x178>)
 800a4ba:	400b      	ands	r3, r1
 800a4bc:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4cc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6899      	ldr	r1, [r3, #8]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	691a      	ldr	r2, [r3, #16]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f003 0320 	and.w	r3, r3, #32
 800a500:	2b00      	cmp	r3, #0
 800a502:	d111      	bne.n	800a528 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 f9e1 	bl	800a8cc <HAL_RTC_WaitForSynchro>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	22ff      	movs	r2, #255	; 0xff
 800a516:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2204      	movs	r2, #4
 800a51c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e00a      	b.n	800a53e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	22ff      	movs	r2, #255	; 0xff
 800a52e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2201      	movs	r2, #1
 800a534:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a53c:	2300      	movs	r3, #0
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	bd90      	pop	{r4, r7, pc}
 800a546:	bf00      	nop
 800a548:	007f7f7f 	.word	0x007f7f7f

0800a54c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a54c:	b590      	push	{r4, r7, lr}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	7f1b      	ldrb	r3, [r3, #28]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d101      	bne.n	800a568 <HAL_RTC_SetDate+0x1c>
 800a564:	2302      	movs	r3, #2
 800a566:	e092      	b.n	800a68e <HAL_RTC_SetDate+0x142>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2201      	movs	r2, #1
 800a56c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2202      	movs	r2, #2
 800a572:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10e      	bne.n	800a598 <HAL_RTC_SetDate+0x4c>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	f023 0310 	bic.w	r3, r3, #16
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	330a      	adds	r3, #10
 800a592:	b2da      	uxtb	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d11c      	bne.n	800a5d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	78db      	ldrb	r3, [r3, #3]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 f9e6 	bl	800a974 <RTC_ByteToBcd2>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f9df 	bl	800a974 <RTC_ByteToBcd2>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a5ba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 f9d7 	bl	800a974 <RTC_ByteToBcd2>
 800a5c6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a5c8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e00e      	b.n	800a5f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	78db      	ldrb	r3, [r3, #3]
 800a5dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a5e4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a5ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	22ca      	movs	r2, #202	; 0xca
 800a5fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2253      	movs	r2, #83	; 0x53
 800a604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 f988 	bl	800a91c <RTC_EnterInitMode>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	22ff      	movs	r2, #255	; 0xff
 800a618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2204      	movs	r2, #4
 800a61e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e031      	b.n	800a68e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	6979      	ldr	r1, [r7, #20]
 800a630:	4b19      	ldr	r3, [pc, #100]	; (800a698 <HAL_RTC_SetDate+0x14c>)
 800a632:	400b      	ands	r3, r1
 800a634:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a644:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d111      	bne.n	800a678 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f939 	bl	800a8cc <HAL_RTC_WaitForSynchro>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2204      	movs	r2, #4
 800a66c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e00a      	b.n	800a68e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	22ff      	movs	r2, #255	; 0xff
 800a67e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a68c:	2300      	movs	r3, #0
  }
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	bd90      	pop	{r4, r7, pc}
 800a696:	bf00      	nop
 800a698:	00ffff3f 	.word	0x00ffff3f

0800a69c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b089      	sub	sp, #36	; 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61fb      	str	r3, [r7, #28]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	7f1b      	ldrb	r3, [r3, #28]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d101      	bne.n	800a6c0 <HAL_RTC_SetAlarm+0x24>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	e101      	b.n	800a8c4 <HAL_RTC_SetAlarm+0x228>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d137      	bne.n	800a742 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f942 	bl	800a974 <RTC_ByteToBcd2>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f93b 	bl	800a974 <RTC_ByteToBcd2>
 800a6fe:	4603      	mov	r3, r0
 800a700:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a702:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	789b      	ldrb	r3, [r3, #2]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 f933 	bl	800a974 <RTC_ByteToBcd2>
 800a70e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a710:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	7b1b      	ldrb	r3, [r3, #12]
 800a718:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a71a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f925 	bl	800a974 <RTC_ByteToBcd2>
 800a72a:	4603      	mov	r3, r0
 800a72c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a72e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a736:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61fb      	str	r3, [r7, #28]
 800a740:	e023      	b.n	800a78a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2200      	movs	r2, #0
 800a754:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a762:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a768:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	7b1b      	ldrb	r3, [r3, #12]
 800a76e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a770:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a778:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a77a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a780:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a786:	4313      	orrs	r3, r2
 800a788:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	4313      	orrs	r3, r2
 800a794:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	22ca      	movs	r2, #202	; 0xca
 800a79c:	625a      	str	r2, [r3, #36]	; 0x24
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2253      	movs	r2, #83	; 0x53
 800a7a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ae:	d13f      	bne.n	800a830 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7be:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a7ce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7d0:	f7f9 fca6 	bl	8004120 <HAL_GetTick>
 800a7d4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a7d6:	e013      	b.n	800a800 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7d8:	f7f9 fca2 	bl	8004120 <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7e6:	d90b      	bls.n	800a800 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	22ff      	movs	r2, #255	; 0xff
 800a7ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2203      	movs	r2, #3
 800a7f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e061      	b.n	800a8c4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0e4      	beq.n	800a7d8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a82c:	609a      	str	r2, [r3, #8]
 800a82e:	e03e      	b.n	800a8ae <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a83e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689a      	ldr	r2, [r3, #8]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a84e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a850:	f7f9 fc66 	bl	8004120 <HAL_GetTick>
 800a854:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a856:	e013      	b.n	800a880 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a858:	f7f9 fc62 	bl	8004120 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a866:	d90b      	bls.n	800a880 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	22ff      	movs	r2, #255	; 0xff
 800a86e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2203      	movs	r2, #3
 800a874:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e021      	b.n	800a8c4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0e4      	beq.n	800a858 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	22ff      	movs	r2, #255	; 0xff
 800a8b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3724      	adds	r7, #36	; 0x24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd90      	pop	{r4, r7, pc}

0800a8cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a8e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8e8:	f7f9 fc1a 	bl	8004120 <HAL_GetTick>
 800a8ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8ee:	e009      	b.n	800a904 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8f0:	f7f9 fc16 	bl	8004120 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8fe:	d901      	bls.n	800a904 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e007      	b.n	800a914 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	f003 0320 	and.w	r3, r3, #32
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0ee      	beq.n	800a8f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a932:	2b00      	cmp	r3, #0
 800a934:	d119      	bne.n	800a96a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a93e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a940:	f7f9 fbee 	bl	8004120 <HAL_GetTick>
 800a944:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a946:	e009      	b.n	800a95c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a948:	f7f9 fbea 	bl	8004120 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a956:	d901      	bls.n	800a95c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e007      	b.n	800a96c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0ee      	beq.n	800a948 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a982:	e005      	b.n	800a990 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3301      	adds	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	3b0a      	subs	r3, #10
 800a98e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	2b09      	cmp	r3, #9
 800a994:	d8f6      	bhi.n	800a984 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	b2db      	uxtb	r3, r3
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	7f1b      	ldrb	r3, [r3, #28]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d101      	bne.n	800a9cc <HAL_RTCEx_SetTimeStamp+0x1c>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e03e      	b.n	800aa4a <HAL_RTCEx_SetTimeStamp+0x9a>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689a      	ldr	r2, [r3, #8]
 800a9de:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	22ca      	movs	r2, #202	; 0xca
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2253      	movs	r2, #83	; 0x53
 800a9fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0206 	bic.w	r2, r2, #6
 800aa0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689a      	ldr	r2, [r3, #8]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa32:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	22ff      	movs	r2, #255	; 0xff
 800aa3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	fffff7f7 	.word	0xfffff7f7

0800aa5c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e156      	b.n	800ad28 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7f8 fd2c 	bl	80034ec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f95b 	bl	800ad58 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d00c      	beq.n	800aac4 <HAL_SAI_Init+0x68>
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d80d      	bhi.n	800aaca <HAL_SAI_Init+0x6e>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <HAL_SAI_Init+0x5c>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d003      	beq.n	800aabe <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800aab6:	e008      	b.n	800aaca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	61fb      	str	r3, [r7, #28]
      break;
 800aabc:	e006      	b.n	800aacc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aabe:	2310      	movs	r3, #16
 800aac0:	61fb      	str	r3, [r7, #28]
      break;
 800aac2:	e003      	b.n	800aacc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aac4:	2320      	movs	r3, #32
 800aac6:	61fb      	str	r3, [r7, #28]
      break;
 800aac8:	e000      	b.n	800aacc <HAL_SAI_Init+0x70>
      break;
 800aaca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d81e      	bhi.n	800ab12 <HAL_SAI_Init+0xb6>
 800aad4:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <HAL_SAI_Init+0x80>)
 800aad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aada:	bf00      	nop
 800aadc:	0800aaed 	.word	0x0800aaed
 800aae0:	0800aaf3 	.word	0x0800aaf3
 800aae4:	0800aafb 	.word	0x0800aafb
 800aae8:	0800ab03 	.word	0x0800ab03
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	617b      	str	r3, [r7, #20]
    }
    break;
 800aaf0:	e010      	b.n	800ab14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf6:	617b      	str	r3, [r7, #20]
    }
    break;
 800aaf8:	e00c      	b.n	800ab14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aafa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aafe:	617b      	str	r3, [r7, #20]
    }
    break;
 800ab00:	e008      	b.n	800ab14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab06:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ab10:	e000      	b.n	800ab14 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ab12:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a85      	ldr	r2, [pc, #532]	; (800ad30 <HAL_SAI_Init+0x2d4>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d004      	beq.n	800ab28 <HAL_SAI_Init+0xcc>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a84      	ldr	r2, [pc, #528]	; (800ad34 <HAL_SAI_Init+0x2d8>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d103      	bne.n	800ab30 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ab28:	4a83      	ldr	r2, [pc, #524]	; (800ad38 <HAL_SAI_Init+0x2dc>)
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	e002      	b.n	800ab36 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ab30:	4a82      	ldr	r2, [pc, #520]	; (800ad3c <HAL_SAI_Init+0x2e0>)
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d04c      	beq.n	800abd8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a7a      	ldr	r2, [pc, #488]	; (800ad30 <HAL_SAI_Init+0x2d4>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d004      	beq.n	800ab56 <HAL_SAI_Init+0xfa>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a78      	ldr	r2, [pc, #480]	; (800ad34 <HAL_SAI_Init+0x2d8>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d104      	bne.n	800ab60 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ab56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ab5a:	f7ff fa63 	bl	800a024 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab5e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a76      	ldr	r2, [pc, #472]	; (800ad40 <HAL_SAI_Init+0x2e4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d004      	beq.n	800ab74 <HAL_SAI_Init+0x118>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a75      	ldr	r2, [pc, #468]	; (800ad44 <HAL_SAI_Init+0x2e8>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d104      	bne.n	800ab7e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ab74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ab78:	f7ff fa54 	bl	800a024 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab7c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	461a      	mov	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	025b      	lsls	r3, r3, #9
 800ab90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab94:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4a6b      	ldr	r2, [pc, #428]	; (800ad48 <HAL_SAI_Init+0x2ec>)
 800ab9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9e:	08da      	lsrs	r2, r3, #3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800aba4:	68f9      	ldr	r1, [r7, #12]
 800aba6:	4b68      	ldr	r3, [pc, #416]	; (800ad48 <HAL_SAI_Init+0x2ec>)
 800aba8:	fba3 2301 	umull	r2, r3, r3, r1
 800abac:	08da      	lsrs	r2, r3, #3
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	1aca      	subs	r2, r1, r3
 800abb8:	2a08      	cmp	r2, #8
 800abba:	d904      	bls.n	800abc6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d104      	bne.n	800abd8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	085a      	lsrs	r2, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d003      	beq.n	800abe8 <HAL_SAI_Init+0x18c>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d109      	bne.n	800abfc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abec:	2b01      	cmp	r3, #1
 800abee:	d101      	bne.n	800abf4 <HAL_SAI_Init+0x198>
 800abf0:	2300      	movs	r3, #0
 800abf2:	e001      	b.n	800abf8 <HAL_SAI_Init+0x19c>
 800abf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	e008      	b.n	800ac0e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d102      	bne.n	800ac0a <HAL_SAI_Init+0x1ae>
 800ac04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac08:	e000      	b.n	800ac0c <HAL_SAI_Init+0x1b0>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6819      	ldr	r1, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b4c      	ldr	r3, [pc, #304]	; (800ad4c <HAL_SAI_Init+0x2f0>)
 800ac1a:	400b      	ands	r3, r1
 800ac1c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6819      	ldr	r1, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ac46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	051b      	lsls	r3, r3, #20
 800ac5a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6859      	ldr	r1, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b38      	ldr	r3, [pc, #224]	; (800ad50 <HAL_SAI_Init+0x2f4>)
 800ac70:	400b      	ands	r3, r1
 800ac72:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6859      	ldr	r1, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	699a      	ldr	r2, [r3, #24]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	431a      	orrs	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6899      	ldr	r1, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	4b2d      	ldr	r3, [pc, #180]	; (800ad54 <HAL_SAI_Init+0x2f8>)
 800ac9e:	400b      	ands	r3, r1
 800aca0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6899      	ldr	r1, [r3, #8]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800acb2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800acb8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800acbe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc4:	3b01      	subs	r3, #1
 800acc6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800acc8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68d9      	ldr	r1, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ace0:	400b      	ands	r3, r1
 800ace2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68d9      	ldr	r1, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf8:	041b      	lsls	r3, r3, #16
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad00:	3b01      	subs	r3, #1
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3720      	adds	r7, #32
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	40015804 	.word	0x40015804
 800ad34:	40015824 	.word	0x40015824
 800ad38:	40015800 	.word	0x40015800
 800ad3c:	40015c00 	.word	0x40015c00
 800ad40:	40015c04 	.word	0x40015c04
 800ad44:	40015c24 	.word	0x40015c24
 800ad48:	cccccccd 	.word	0xcccccccd
 800ad4c:	ff05c010 	.word	0xff05c010
 800ad50:	ffff1ff0 	.word	0xffff1ff0
 800ad54:	fff88000 	.word	0xfff88000

0800ad58 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ad60:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <SAI_Disable+0x68>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a17      	ldr	r2, [pc, #92]	; (800adc4 <SAI_Disable+0x6c>)
 800ad66:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6a:	0b1b      	lsrs	r3, r3, #12
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad82:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	1e5a      	subs	r2, r3, #1
 800ad88:	60fa      	str	r2, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	72fb      	strb	r3, [r7, #11]
      break;
 800ada2:	e006      	b.n	800adb2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e8      	bne.n	800ad84 <SAI_Disable+0x2c>

  return status;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	20000000 	.word	0x20000000
 800adc4:	95cbec1b 	.word	0x95cbec1b

0800adc8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e022      	b.n	800ae20 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d105      	bne.n	800adf2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7f8 f845 	bl	8002e7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2203      	movs	r2, #3
 800adf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f814 	bl	800ae28 <HAL_SD_InitCard>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e00a      	b.n	800ae20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae28:	b5b0      	push	{r4, r5, r7, lr}
 800ae2a:	b08e      	sub	sp, #56	; 0x38
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ae44:	2376      	movs	r3, #118	; 0x76
 800ae46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681d      	ldr	r5, [r3, #0]
 800ae4c:	466c      	mov	r4, sp
 800ae4e:	f107 0314 	add.w	r3, r7, #20
 800ae52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae60:	4628      	mov	r0, r5
 800ae62:	f003 f8e1 	bl	800e028 <SDMMC_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ae6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e056      	b.n	800af26 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae86:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f003 f915 	bl	800e0bc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aea0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 ff00 	bl	800bca8 <SD_PowerON>
 800aea8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e02e      	b.n	800af26 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fe21 	bl	800bb10 <SD_InitCard>
 800aece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	431a      	orrs	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e01b      	b.n	800af26 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aef6:	4618      	mov	r0, r3
 800aef8:	f003 f974 	bl	800e1e4 <SDMMC_CmdBlockLength>
 800aefc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00f      	beq.n	800af24 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a09      	ldr	r2, [pc, #36]	; (800af30 <HAL_SD_InitCard+0x108>)
 800af0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	431a      	orrs	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3728      	adds	r7, #40	; 0x28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bdb0      	pop	{r4, r5, r7, pc}
 800af2e:	bf00      	nop
 800af30:	004005ff 	.word	0x004005ff

0800af34 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b092      	sub	sp, #72	; 0x48
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af42:	f7f9 f8ed 	bl	8004120 <HAL_GetTick>
 800af46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e1bd      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b01      	cmp	r3, #1
 800af70:	f040 81b0 	bne.w	800b2d4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	441a      	add	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af84:	429a      	cmp	r2, r3
 800af86:	d907      	bls.n	800af98 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e1a4      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2203      	movs	r2, #3
 800af9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	2b01      	cmp	r3, #1
 800afae:	d002      	beq.n	800afb6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	025b      	lsls	r3, r3, #9
 800afb4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	025b      	lsls	r3, r3, #9
 800afc0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800afc2:	2390      	movs	r3, #144	; 0x90
 800afc4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afc6:	2302      	movs	r3, #2
 800afc8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afca:	2300      	movs	r3, #0
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800afce:	2301      	movs	r3, #1
 800afd0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f107 0214 	add.w	r2, r7, #20
 800afda:	4611      	mov	r1, r2
 800afdc:	4618      	mov	r0, r3
 800afde:	f003 f8d5 	bl	800e18c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d90a      	bls.n	800affe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2202      	movs	r2, #2
 800afec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aff4:	4618      	mov	r0, r3
 800aff6:	f003 f939 	bl	800e26c <SDMMC_CmdReadMultiBlock>
 800affa:	6478      	str	r0, [r7, #68]	; 0x44
 800affc:	e009      	b.n	800b012 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2201      	movs	r2, #1
 800b002:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b00a:	4618      	mov	r0, r3
 800b00c:	f003 f90c 	bl	800e228 <SDMMC_CmdReadSingleBlock>
 800b010:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b014:	2b00      	cmp	r3, #0
 800b016:	d012      	beq.n	800b03e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a7a      	ldr	r2, [pc, #488]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b026:	431a      	orrs	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e151      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b042:	e061      	b.n	800b108 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d03c      	beq.n	800b0cc <HAL_SD_ReadBlocks+0x198>
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d039      	beq.n	800b0cc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b058:	2300      	movs	r3, #0
 800b05a:	643b      	str	r3, [r7, #64]	; 0x40
 800b05c:	e033      	b.n	800b0c6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4618      	mov	r0, r3
 800b064:	f003 f80c 	bl	800e080 <SDMMC_ReadFIFO>
 800b068:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	3301      	adds	r3, #1
 800b076:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	3b01      	subs	r3, #1
 800b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	0a1b      	lsrs	r3, r3, #8
 800b082:	b2da      	uxtb	r2, r3
 800b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b086:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	3301      	adds	r3, #1
 800b08c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b090:	3b01      	subs	r3, #1
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	0c1b      	lsrs	r3, r3, #16
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	0e1b      	lsrs	r3, r3, #24
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c8:	2b07      	cmp	r3, #7
 800b0ca:	d9c8      	bls.n	800b05e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b0cc:	f7f9 f828 	bl	8004120 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d902      	bls.n	800b0e2 <HAL_SD_ReadBlocks+0x1ae>
 800b0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d112      	bne.n	800b108 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a48      	ldr	r2, [pc, #288]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e0ec      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b112:	2b00      	cmp	r3, #0
 800b114:	d096      	beq.n	800b044 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b120:	2b00      	cmp	r3, #0
 800b122:	d022      	beq.n	800b16a <HAL_SD_ReadBlocks+0x236>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d91f      	bls.n	800b16a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d01b      	beq.n	800b16a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f003 f8fe 	bl	800e338 <SDMMC_CmdStopTransfer>
 800b13c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b13e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b140:	2b00      	cmp	r3, #0
 800b142:	d012      	beq.n	800b16a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a2f      	ldr	r2, [pc, #188]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b152:	431a      	orrs	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e0bb      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b170:	f003 0308 	and.w	r3, r3, #8
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a22      	ldr	r2, [pc, #136]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	f043 0208 	orr.w	r2, r3, #8
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e0a1      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	f003 0302 	and.w	r3, r3, #2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d012      	beq.n	800b1d2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a15      	ldr	r2, [pc, #84]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b8:	f043 0202 	orr.w	r2, r3, #2
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e087      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d8:	f003 0320 	and.w	r3, r3, #32
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d064      	beq.n	800b2aa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a08      	ldr	r2, [pc, #32]	; (800b208 <HAL_SD_ReadBlocks+0x2d4>)
 800b1e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ec:	f043 0220 	orr.w	r2, r3, #32
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e06d      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
 800b206:	bf00      	nop
 800b208:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f002 ff35 	bl	800e080 <SDMMC_ReadFIFO>
 800b216:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	3301      	adds	r3, #1
 800b224:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b228:	3b01      	subs	r3, #1
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	b2da      	uxtb	r2, r3
 800b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b234:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b238:	3301      	adds	r3, #1
 800b23a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23e:	3b01      	subs	r3, #1
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b244:	0c1b      	lsrs	r3, r3, #16
 800b246:	b2da      	uxtb	r2, r3
 800b248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24e:	3301      	adds	r3, #1
 800b250:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b254:	3b01      	subs	r3, #1
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	0e1b      	lsrs	r3, r3, #24
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b260:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b264:	3301      	adds	r3, #1
 800b266:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26a:	3b01      	subs	r3, #1
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b26e:	f7f8 ff57 	bl	8004120 <HAL_GetTick>
 800b272:	4602      	mov	r2, r0
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d902      	bls.n	800b284 <HAL_SD_ReadBlocks+0x350>
 800b27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b280:	2b00      	cmp	r3, #0
 800b282:	d112      	bne.n	800b2aa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <HAL_SD_ReadBlocks+0x3b8>)
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e01b      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <HAL_SD_ReadBlocks+0x38a>
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1a6      	bne.n	800b20c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e006      	b.n	800b2e2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3748      	adds	r7, #72	; 0x48
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	004005ff 	.word	0x004005ff

0800b2f0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b092      	sub	sp, #72	; 0x48
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2fe:	f7f8 ff0f 	bl	8004120 <HAL_GetTick>
 800b302:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d107      	bne.n	800b322 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e165      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	f040 8158 	bne.w	800b5e0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	441a      	add	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b340:	429a      	cmp	r2, r3
 800b342:	d907      	bls.n	800b354 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e14c      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2203      	movs	r2, #3
 800b358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2200      	movs	r2, #0
 800b362:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d002      	beq.n	800b372 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	025b      	lsls	r3, r3, #9
 800b370:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b376:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	025b      	lsls	r3, r3, #9
 800b37c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b37e:	2390      	movs	r3, #144	; 0x90
 800b380:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b382:	2300      	movs	r3, #0
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b386:	2300      	movs	r3, #0
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800b38a:	2301      	movs	r3, #1
 800b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f107 0218 	add.w	r2, r7, #24
 800b396:	4611      	mov	r1, r2
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 fef7 	bl	800e18c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d90a      	bls.n	800b3ba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f002 ff9f 	bl	800e2f4 <SDMMC_CmdWriteMultiBlock>
 800b3b6:	6478      	str	r0, [r7, #68]	; 0x44
 800b3b8:	e009      	b.n	800b3ce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2210      	movs	r2, #16
 800b3be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f002 ff72 	bl	800e2b0 <SDMMC_CmdWriteSingleBlock>
 800b3cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d012      	beq.n	800b3fa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a87      	ldr	r2, [pc, #540]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e0f9      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b3fe:	e065      	b.n	800b4cc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d040      	beq.n	800b490 <HAL_SD_WriteBlocks+0x1a0>
 800b40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d03d      	beq.n	800b490 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b414:	2300      	movs	r3, #0
 800b416:	643b      	str	r3, [r7, #64]	; 0x40
 800b418:	e037      	b.n	800b48a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b422:	3301      	adds	r3, #1
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b428:	3b01      	subs	r3, #1
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	021a      	lsls	r2, r3, #8
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4313      	orrs	r3, r2
 800b436:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43a:	3301      	adds	r3, #1
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b440:	3b01      	subs	r3, #1
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	041a      	lsls	r2, r3, #16
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	3301      	adds	r3, #1
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	3b01      	subs	r3, #1
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	061a      	lsls	r2, r3, #24
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	3301      	adds	r3, #1
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b470:	3b01      	subs	r3, #1
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f107 0214 	add.w	r2, r7, #20
 800b47c:	4611      	mov	r1, r2
 800b47e:	4618      	mov	r0, r3
 800b480:	f002 fe0b 	bl	800e09a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b486:	3301      	adds	r3, #1
 800b488:	643b      	str	r3, [r7, #64]	; 0x40
 800b48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48c:	2b07      	cmp	r3, #7
 800b48e:	d9c4      	bls.n	800b41a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b490:	f7f8 fe46 	bl	8004120 <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d902      	bls.n	800b4a6 <HAL_SD_WriteBlocks+0x1b6>
 800b4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d112      	bne.n	800b4cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a53      	ldr	r2, [pc, #332]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e090      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d092      	beq.n	800b400 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d022      	beq.n	800b52e <HAL_SD_WriteBlocks+0x23e>
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d91f      	bls.n	800b52e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d01b      	beq.n	800b52e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f002 ff1c 	bl	800e338 <SDMMC_CmdStopTransfer>
 800b500:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b504:	2b00      	cmp	r3, #0
 800b506:	d012      	beq.n	800b52e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a3a      	ldr	r2, [pc, #232]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b516:	431a      	orrs	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e05f      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b534:	f003 0308 	and.w	r3, r3, #8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d012      	beq.n	800b562 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a2d      	ldr	r2, [pc, #180]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b548:	f043 0208 	orr.w	r2, r3, #8
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e045      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d012      	beq.n	800b596 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a20      	ldr	r2, [pc, #128]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57c:	f043 0202 	orr.w	r2, r3, #2
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e02b      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59c:	f003 0310 	and.w	r3, r3, #16
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d012      	beq.n	800b5ca <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a13      	ldr	r2, [pc, #76]	; (800b5f8 <HAL_SD_WriteBlocks+0x308>)
 800b5aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	f043 0210 	orr.w	r2, r3, #16
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e011      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e006      	b.n	800b5ee <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
  }
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3748      	adds	r7, #72	; 0x48
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	004005ff 	.word	0x004005ff

0800b5fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b60a:	0f9b      	lsrs	r3, r3, #30
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b616:	0e9b      	lsrs	r3, r3, #26
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b628:	0e1b      	lsrs	r3, r3, #24
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0303 	and.w	r3, r3, #3
 800b630:	b2da      	uxtb	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b63a:	0c1b      	lsrs	r3, r3, #16
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b646:	0a1b      	lsrs	r3, r3, #8
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b652:	b2da      	uxtb	r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b65c:	0d1b      	lsrs	r3, r3, #20
 800b65e:	b29a      	uxth	r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b668:	0c1b      	lsrs	r3, r3, #16
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	b2da      	uxtb	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b67a:	0bdb      	lsrs	r3, r3, #15
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	b2da      	uxtb	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b68c:	0b9b      	lsrs	r3, r3, #14
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b69e:	0b5b      	lsrs	r3, r3, #13
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6b0:	0b1b      	lsrs	r3, r3, #12
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d163      	bne.n	800b794 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d0:	009a      	lsls	r2, r3, #2
 800b6d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b6dc:	0f92      	lsrs	r2, r2, #30
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e8:	0edb      	lsrs	r3, r3, #27
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f003 0307 	and.w	r3, r3, #7
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6fa:	0e1b      	lsrs	r3, r3, #24
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	b2da      	uxtb	r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70c:	0d5b      	lsrs	r3, r3, #21
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	b2da      	uxtb	r2, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b71e:	0c9b      	lsrs	r3, r3, #18
 800b720:	b2db      	uxtb	r3, r3
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	b2da      	uxtb	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b730:	0bdb      	lsrs	r3, r3, #15
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0307 	and.w	r3, r3, #7
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	7e1b      	ldrb	r3, [r3, #24]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0307 	and.w	r3, r3, #7
 800b752:	3302      	adds	r3, #2
 800b754:	2201      	movs	r2, #1
 800b756:	fa02 f303 	lsl.w	r3, r2, r3
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b75e:	fb02 f203 	mul.w	r2, r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	7a1b      	ldrb	r3, [r3, #8]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	2201      	movs	r2, #1
 800b772:	409a      	lsls	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b780:	0a52      	lsrs	r2, r2, #9
 800b782:	fb02 f203 	mul.w	r2, r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b790:	661a      	str	r2, [r3, #96]	; 0x60
 800b792:	e031      	b.n	800b7f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d11d      	bne.n	800b7d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7a0:	041b      	lsls	r3, r3, #16
 800b7a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7aa:	0c1b      	lsrs	r3, r3, #16
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	029a      	lsls	r2, r3, #10
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b7d6:	e00f      	b.n	800b7f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a58      	ldr	r2, [pc, #352]	; (800b940 <HAL_SD_GetCardCSD+0x344>)
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e09d      	b.n	800b934 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7fc:	0b9b      	lsrs	r3, r3, #14
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80e:	09db      	lsrs	r3, r3, #7
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b816:	b2da      	uxtb	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b826:	b2da      	uxtb	r2, r3
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b830:	0fdb      	lsrs	r3, r3, #31
 800b832:	b2da      	uxtb	r2, r3
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83c:	0f5b      	lsrs	r3, r3, #29
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 0303 	and.w	r3, r3, #3
 800b844:	b2da      	uxtb	r2, r3
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84e:	0e9b      	lsrs	r3, r3, #26
 800b850:	b2db      	uxtb	r3, r3
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	b2da      	uxtb	r2, r3
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b860:	0d9b      	lsrs	r3, r3, #22
 800b862:	b2db      	uxtb	r3, r3
 800b864:	f003 030f 	and.w	r3, r3, #15
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b872:	0d5b      	lsrs	r3, r3, #21
 800b874:	b2db      	uxtb	r3, r3
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b88e:	0c1b      	lsrs	r3, r3, #16
 800b890:	b2db      	uxtb	r3, r3
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	b2da      	uxtb	r2, r3
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a2:	0bdb      	lsrs	r3, r3, #15
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b6:	0b9b      	lsrs	r3, r3, #14
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ca:	0b5b      	lsrs	r3, r3, #13
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8de:	0b1b      	lsrs	r3, r3, #12
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f2:	0a9b      	lsrs	r3, r3, #10
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b906:	0a1b      	lsrs	r3, r3, #8
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91a:	085b      	lsrs	r3, r3, #1
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b922:	b2da      	uxtb	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	004005ff 	.word	0x004005ff

0800b944 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b99c:	b5b0      	push	{r4, r5, r7, lr}
 800b99e:	b08e      	sub	sp, #56	; 0x38
 800b9a0:	af04      	add	r7, sp, #16
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d02e      	beq.n	800ba1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c2:	d106      	bne.n	800b9d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	639a      	str	r2, [r3, #56]	; 0x38
 800b9d0:	e029      	b.n	800ba26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d8:	d10a      	bne.n	800b9f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fa1a 	bl	800be14 <SD_WideBus_Enable>
 800b9e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
 800b9ee:	e01a      	b.n	800ba26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fa57 	bl	800beaa <SD_WideBus_Disable>
 800b9fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	431a      	orrs	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	639a      	str	r2, [r3, #56]	; 0x38
 800ba0a:	e00c      	b.n	800ba26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	639a      	str	r2, [r3, #56]	; 0x38
 800ba18:	e005      	b.n	800ba26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00b      	beq.n	800ba46 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a26      	ldr	r2, [pc, #152]	; (800bacc <HAL_SD_ConfigWideBusOperation+0x130>)
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba44:	e01f      	b.n	800ba86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681d      	ldr	r5, [r3, #0]
 800ba6c:	466c      	mov	r4, sp
 800ba6e:	f107 0314 	add.w	r3, r7, #20
 800ba72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba7a:	f107 0308 	add.w	r3, r7, #8
 800ba7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba80:	4628      	mov	r0, r5
 800ba82:	f002 fad1 	bl	800e028 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f002 fba8 	bl	800e1e4 <SDMMC_CmdBlockLength>
 800ba94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba96:	6a3b      	ldr	r3, [r7, #32]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00c      	beq.n	800bab6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a0a      	ldr	r2, [pc, #40]	; (800bacc <HAL_SD_ConfigWideBusOperation+0x130>)
 800baa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800babe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3728      	adds	r7, #40	; 0x28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bdb0      	pop	{r4, r5, r7, pc}
 800baca:	bf00      	nop
 800bacc:	004005ff 	.word	0x004005ff

0800bad0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f96e 	bl	800bdc4 <SD_SendStatus>
 800bae8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	431a      	orrs	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	0a5b      	lsrs	r3, r3, #9
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bb06:	693b      	ldr	r3, [r7, #16]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb10:	b5b0      	push	{r4, r5, r7, lr}
 800bb12:	b094      	sub	sp, #80	; 0x50
 800bb14:	af04      	add	r7, sp, #16
 800bb16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f002 fada 	bl	800e0da <SDMMC_GetPowerState>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bb30:	e0b6      	b.n	800bca0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d02f      	beq.n	800bb9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f002 fd05 	bl	800e54e <SDMMC_CmdSendCID>
 800bb44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <SD_InitCard+0x40>
    {
      return errorstate;
 800bb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4e:	e0a7      	b.n	800bca0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2100      	movs	r1, #0
 800bb56:	4618      	mov	r0, r3
 800bb58:	f002 fb05 	bl	800e166 <SDMMC_GetResponse>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2104      	movs	r1, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f002 fafc 	bl	800e166 <SDMMC_GetResponse>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2108      	movs	r1, #8
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f002 faf3 	bl	800e166 <SDMMC_GetResponse>
 800bb80:	4602      	mov	r2, r0
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	210c      	movs	r1, #12
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f002 faea 	bl	800e166 <SDMMC_GetResponse>
 800bb92:	4602      	mov	r2, r0
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d00d      	beq.n	800bbbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f107 020e 	add.w	r2, r7, #14
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f002 fd0b 	bl	800e5c8 <SDMMC_CmdSetRelAdd>
 800bbb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <SD_InitCard+0xae>
    {
      return errorstate;
 800bbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbc:	e070      	b.n	800bca0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d036      	beq.n	800bc34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bbc6:	89fb      	ldrh	r3, [r7, #14]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd6:	041b      	lsls	r3, r3, #16
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f002 fcd5 	bl	800e58a <SDMMC_CmdSendCSD>
 800bbe0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <SD_InitCard+0xdc>
    {
      return errorstate;
 800bbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbea:	e059      	b.n	800bca0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f002 fab7 	bl	800e166 <SDMMC_GetResponse>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2104      	movs	r1, #4
 800bc04:	4618      	mov	r0, r3
 800bc06:	f002 faae 	bl	800e166 <SDMMC_GetResponse>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2108      	movs	r1, #8
 800bc16:	4618      	mov	r0, r3
 800bc18:	f002 faa5 	bl	800e166 <SDMMC_GetResponse>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	210c      	movs	r1, #12
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f002 fa9c 	bl	800e166 <SDMMC_GetResponse>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2104      	movs	r1, #4
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f002 fa93 	bl	800e166 <SDMMC_GetResponse>
 800bc40:	4603      	mov	r3, r0
 800bc42:	0d1a      	lsrs	r2, r3, #20
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bc48:	f107 0310 	add.w	r3, r7, #16
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff fcd4 	bl	800b5fc <HAL_SD_GetCardCSD>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc5e:	e01f      	b.n	800bca0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc68:	041b      	lsls	r3, r3, #16
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f04f 0300 	mov.w	r3, #0
 800bc70:	4608      	mov	r0, r1
 800bc72:	f002 fb83 	bl	800e37c <SDMMC_CmdSelDesel>
 800bc76:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <SD_InitCard+0x172>
  {
    return errorstate;
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc80:	e00e      	b.n	800bca0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681d      	ldr	r5, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	466c      	mov	r4, sp
 800bc8a:	f103 0210 	add.w	r2, r3, #16
 800bc8e:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc94:	3304      	adds	r3, #4
 800bc96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f002 f9c5 	bl	800e028 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3740      	adds	r7, #64	; 0x40
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bdb0      	pop	{r4, r5, r7, pc}

0800bca8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f002 fb7e 	bl	800e3c2 <SDMMC_CmdGoIdleState>
 800bcc6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	e072      	b.n	800bdb8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f002 fb91 	bl	800e3fe <SDMMC_CmdOperCond>
 800bcdc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00d      	beq.n	800bd00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f002 fb67 	bl	800e3c2 <SDMMC_CmdGoIdleState>
 800bcf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d004      	beq.n	800bd06 <SD_PowerON+0x5e>
    {
      return errorstate;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	e05b      	b.n	800bdb8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d137      	bne.n	800bd7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2100      	movs	r1, #0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f002 fb91 	bl	800e43c <SDMMC_CmdAppCommand>
 800bd1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d02d      	beq.n	800bd7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd26:	e047      	b.n	800bdb8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f002 fb84 	bl	800e43c <SDMMC_CmdAppCommand>
 800bd34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <SD_PowerON+0x98>
    {
      return errorstate;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	e03b      	b.n	800bdb8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	491e      	ldr	r1, [pc, #120]	; (800bdc0 <SD_PowerON+0x118>)
 800bd46:	4618      	mov	r0, r3
 800bd48:	f002 fb9a 	bl	800e480 <SDMMC_CmdAppOperCommand>
 800bd4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd58:	e02e      	b.n	800bdb8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f002 fa00 	bl	800e166 <SDMMC_GetResponse>
 800bd66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	0fdb      	lsrs	r3, r3, #31
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <SD_PowerON+0xcc>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e000      	b.n	800bd76 <SD_PowerON+0xce>
 800bd74:	2300      	movs	r3, #0
 800bd76:	613b      	str	r3, [r7, #16]

    count++;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d802      	bhi.n	800bd8e <SD_PowerON+0xe6>
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d0cc      	beq.n	800bd28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d902      	bls.n	800bd9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bd98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd9c:	e00c      	b.n	800bdb8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	645a      	str	r2, [r3, #68]	; 0x44
 800bdae:	e002      	b.n	800bdb6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	c1100000 	.word	0xc1100000

0800bdc4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bdd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdd8:	e018      	b.n	800be0c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde2:	041b      	lsls	r3, r3, #16
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f002 fc0f 	bl	800e60a <SDMMC_CmdSendStatus>
 800bdec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	e009      	b.n	800be0c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4618      	mov	r0, r3
 800be00:	f002 f9b1 	bl	800e166 <SDMMC_GetResponse>
 800be04:	4602      	mov	r2, r0
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	2300      	movs	r3, #0
 800be22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 f99b 	bl	800e166 <SDMMC_GetResponse>
 800be30:	4603      	mov	r3, r0
 800be32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be3a:	d102      	bne.n	800be42 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800be3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be40:	e02f      	b.n	800bea2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800be42:	f107 030c 	add.w	r3, r7, #12
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f879 	bl	800bf40 <SD_FindSCR>
 800be4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	e023      	b.n	800bea2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01c      	beq.n	800be9e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f002 fae3 	bl	800e43c <SDMMC_CmdAppCommand>
 800be76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	e00f      	b.n	800bea2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2102      	movs	r1, #2
 800be88:	4618      	mov	r0, r3
 800be8a:	f002 fb1d 	bl	800e4c8 <SDMMC_CmdBusWidth>
 800be8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	e003      	b.n	800bea2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e001      	b.n	800bea2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b086      	sub	sp, #24
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2100      	movs	r1, #0
 800bec0:	4618      	mov	r0, r3
 800bec2:	f002 f950 	bl	800e166 <SDMMC_GetResponse>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800becc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bed0:	d102      	bne.n	800bed8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bed6:	e02f      	b.n	800bf38 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bed8:	f107 030c 	add.w	r3, r7, #12
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f82e 	bl	800bf40 <SD_FindSCR>
 800bee4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	e023      	b.n	800bf38 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d01c      	beq.n	800bf34 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf02:	041b      	lsls	r3, r3, #16
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f002 fa98 	bl	800e43c <SDMMC_CmdAppCommand>
 800bf0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	e00f      	b.n	800bf38 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f002 fad2 	bl	800e4c8 <SDMMC_CmdBusWidth>
 800bf24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	e003      	b.n	800bf38 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf30:	2300      	movs	r3, #0
 800bf32:	e001      	b.n	800bf38 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b08f      	sub	sp, #60	; 0x3c
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf4a:	f7f8 f8e9 	bl	8004120 <HAL_GetTick>
 800bf4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bf54:	2300      	movs	r3, #0
 800bf56:	60bb      	str	r3, [r7, #8]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2108      	movs	r1, #8
 800bf66:	4618      	mov	r0, r3
 800bf68:	f002 f93c 	bl	800e1e4 <SDMMC_CmdBlockLength>
 800bf6c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	e0b2      	b.n	800c0de <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf80:	041b      	lsls	r3, r3, #16
 800bf82:	4619      	mov	r1, r3
 800bf84:	4610      	mov	r0, r2
 800bf86:	f002 fa59 	bl	800e43c <SDMMC_CmdAppCommand>
 800bf8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	e0a3      	b.n	800c0de <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf9a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bfa0:	2330      	movs	r3, #48	; 0x30
 800bfa2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bfac:	2301      	movs	r3, #1
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f107 0210 	add.w	r2, r7, #16
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f002 f8e6 	bl	800e18c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f002 faa1 	bl	800e50c <SDMMC_CmdSendSCR>
 800bfca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d02a      	beq.n	800c028 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	e083      	b.n	800c0de <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00f      	beq.n	800c004 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6819      	ldr	r1, [r3, #0]
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	f107 0208 	add.w	r2, r7, #8
 800bff0:	18d4      	adds	r4, r2, r3
 800bff2:	4608      	mov	r0, r1
 800bff4:	f002 f844 	bl	800e080 <SDMMC_ReadFIFO>
 800bff8:	4603      	mov	r3, r0
 800bffa:	6023      	str	r3, [r4, #0]
      index++;
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	3301      	adds	r3, #1
 800c000:	637b      	str	r3, [r7, #52]	; 0x34
 800c002:	e006      	b.n	800c012 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d012      	beq.n	800c038 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c012:	f7f8 f885 	bl	8004120 <HAL_GetTick>
 800c016:	4602      	mov	r2, r0
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c020:	d102      	bne.n	800c028 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c026:	e05a      	b.n	800c0de <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0cf      	beq.n	800bfd6 <SD_FindSCR+0x96>
 800c036:	e000      	b.n	800c03a <SD_FindSCR+0xfa>
      break;
 800c038:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c040:	f003 0308 	and.w	r3, r3, #8
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2208      	movs	r2, #8
 800c04e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c050:	2308      	movs	r3, #8
 800c052:	e044      	b.n	800c0de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2202      	movs	r2, #2
 800c068:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c06a:	2302      	movs	r3, #2
 800c06c:	e037      	b.n	800c0de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c074:	f003 0320 	and.w	r3, r3, #32
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2220      	movs	r2, #32
 800c082:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c084:	2320      	movs	r3, #32
 800c086:	e02a      	b.n	800c0de <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c090:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	061a      	lsls	r2, r3, #24
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c09e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	0a1b      	lsrs	r3, r3, #8
 800c0a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	0e1b      	lsrs	r3, r3, #24
 800c0ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	601a      	str	r2, [r3, #0]
    scr++;
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	061a      	lsls	r2, r3, #24
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	021b      	lsls	r3, r3, #8
 800c0c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	0a1b      	lsrs	r3, r3, #8
 800c0cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	0e1b      	lsrs	r3, r3, #24
 800c0d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	373c      	adds	r7, #60	; 0x3c
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd90      	pop	{r4, r7, pc}

0800c0e6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e025      	b.n	800c146 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f7 f9e2 	bl	80034d8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	4619      	mov	r1, r3
 800c126:	4610      	mov	r0, r2
 800c128:	f001 fe54 	bl	800ddd4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	461a      	mov	r2, r3
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	f001 febe 	bl	800deb8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b02      	cmp	r3, #2
 800c164:	d101      	bne.n	800c16a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800c166:	2302      	movs	r3, #2
 800c168:	e018      	b.n	800c19c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2202      	movs	r2, #2
 800c16e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f001 ff1c 	bl	800dfb8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b02      	cmp	r3, #2
 800c186:	d104      	bne.n	800c192 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2205      	movs	r2, #5
 800c18c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c190:	e003      	b.n	800c19a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d101      	bne.n	800c1be <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	e00e      	b.n	800c1dc <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f001 ff17 	bl	800e000 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e04c      	b.n	800c290 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d106      	bne.n	800c210 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7f6 fe98 	bl	8002f40 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0203 	bic.w	r2, r2, #3
 800c226:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4b19      	ldr	r3, [pc, #100]	; (800c298 <HAL_SPDIFRX_Init+0xb4>)
 800c234:	4013      	ands	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c240:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c246:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c24c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c252:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c258:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c25e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c264:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800c26a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800c270:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	fff88407 	.word	0xfff88407

0800c29c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e049      	b.n	800c342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7f6 fe7e 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f000 fc22 	bl	800cb24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d001      	beq.n	800c364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e054      	b.n	800c40e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0201 	orr.w	r2, r2, #1
 800c37a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a26      	ldr	r2, [pc, #152]	; (800c41c <HAL_TIM_Base_Start_IT+0xd0>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d022      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c38e:	d01d      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a22      	ldr	r2, [pc, #136]	; (800c420 <HAL_TIM_Base_Start_IT+0xd4>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d018      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a21      	ldr	r2, [pc, #132]	; (800c424 <HAL_TIM_Base_Start_IT+0xd8>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d013      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a1f      	ldr	r2, [pc, #124]	; (800c428 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d00e      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a1e      	ldr	r2, [pc, #120]	; (800c42c <HAL_TIM_Base_Start_IT+0xe0>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d009      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1c      	ldr	r2, [pc, #112]	; (800c430 <HAL_TIM_Base_Start_IT+0xe4>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <HAL_TIM_Base_Start_IT+0x80>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1b      	ldr	r2, [pc, #108]	; (800c434 <HAL_TIM_Base_Start_IT+0xe8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d115      	bne.n	800c3f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	4b19      	ldr	r3, [pc, #100]	; (800c438 <HAL_TIM_Base_Start_IT+0xec>)
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b06      	cmp	r3, #6
 800c3dc:	d015      	beq.n	800c40a <HAL_TIM_Base_Start_IT+0xbe>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3e4:	d011      	beq.n	800c40a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f042 0201 	orr.w	r2, r2, #1
 800c3f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f6:	e008      	b.n	800c40a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f042 0201 	orr.w	r2, r2, #1
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	e000      	b.n	800c40c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	40010000 	.word	0x40010000
 800c420:	40000400 	.word	0x40000400
 800c424:	40000800 	.word	0x40000800
 800c428:	40000c00 	.word	0x40000c00
 800c42c:	40010400 	.word	0x40010400
 800c430:	40014000 	.word	0x40014000
 800c434:	40001800 	.word	0x40001800
 800c438:	00010007 	.word	0x00010007

0800c43c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e049      	b.n	800c4e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7f6 fe1c 	bl	80030a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3304      	adds	r3, #4
 800c478:	4619      	mov	r1, r3
 800c47a:	4610      	mov	r0, r2
 800c47c:	f000 fb52 	bl	800cb24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	f003 0302 	and.w	r3, r3, #2
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d122      	bne.n	800c546 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d11b      	bne.n	800c546 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f06f 0202 	mvn.w	r2, #2
 800c516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fadb 	bl	800cae8 <HAL_TIM_IC_CaptureCallback>
 800c532:	e005      	b.n	800c540 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 facd 	bl	800cad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fade 	bl	800cafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b04      	cmp	r3, #4
 800c552:	d122      	bne.n	800c59a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b04      	cmp	r3, #4
 800c560:	d11b      	bne.n	800c59a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f06f 0204 	mvn.w	r2, #4
 800c56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2202      	movs	r2, #2
 800c570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fab1 	bl	800cae8 <HAL_TIM_IC_CaptureCallback>
 800c586:	e005      	b.n	800c594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 faa3 	bl	800cad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fab4 	bl	800cafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	f003 0308 	and.w	r3, r3, #8
 800c5a4:	2b08      	cmp	r3, #8
 800c5a6:	d122      	bne.n	800c5ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f003 0308 	and.w	r3, r3, #8
 800c5b2:	2b08      	cmp	r3, #8
 800c5b4:	d11b      	bne.n	800c5ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f06f 0208 	mvn.w	r2, #8
 800c5be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2204      	movs	r2, #4
 800c5c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	f003 0303 	and.w	r3, r3, #3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fa87 	bl	800cae8 <HAL_TIM_IC_CaptureCallback>
 800c5da:	e005      	b.n	800c5e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fa79 	bl	800cad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa8a 	bl	800cafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	f003 0310 	and.w	r3, r3, #16
 800c5f8:	2b10      	cmp	r3, #16
 800c5fa:	d122      	bne.n	800c642 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f003 0310 	and.w	r3, r3, #16
 800c606:	2b10      	cmp	r3, #16
 800c608:	d11b      	bne.n	800c642 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f06f 0210 	mvn.w	r2, #16
 800c612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2208      	movs	r2, #8
 800c618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	69db      	ldr	r3, [r3, #28]
 800c620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa5d 	bl	800cae8 <HAL_TIM_IC_CaptureCallback>
 800c62e:	e005      	b.n	800c63c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fa4f 	bl	800cad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa60 	bl	800cafc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d10e      	bne.n	800c66e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d107      	bne.n	800c66e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f06f 0201 	mvn.w	r2, #1
 800c666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7f6 f841 	bl	80026f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c678:	2b80      	cmp	r3, #128	; 0x80
 800c67a:	d10e      	bne.n	800c69a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c686:	2b80      	cmp	r3, #128	; 0x80
 800c688:	d107      	bne.n	800c69a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 fef3 	bl	800d480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a8:	d10e      	bne.n	800c6c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6b4:	2b80      	cmp	r3, #128	; 0x80
 800c6b6:	d107      	bne.n	800c6c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fee6 	bl	800d494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d2:	2b40      	cmp	r3, #64	; 0x40
 800c6d4:	d10e      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e0:	2b40      	cmp	r3, #64	; 0x40
 800c6e2:	d107      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fa0e 	bl	800cb10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0320 	and.w	r3, r3, #32
 800c6fe:	2b20      	cmp	r3, #32
 800c700:	d10e      	bne.n	800c720 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f003 0320 	and.w	r3, r3, #32
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d107      	bne.n	800c720 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f06f 0220 	mvn.w	r2, #32
 800c718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fea6 	bl	800d46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d101      	bne.n	800c742 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c73e:	2302      	movs	r3, #2
 800c740:	e0fd      	b.n	800c93e <HAL_TIM_PWM_ConfigChannel+0x216>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b14      	cmp	r3, #20
 800c74e:	f200 80f0 	bhi.w	800c932 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c752:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c933 	.word	0x0800c933
 800c760:	0800c933 	.word	0x0800c933
 800c764:	0800c933 	.word	0x0800c933
 800c768:	0800c7ed 	.word	0x0800c7ed
 800c76c:	0800c933 	.word	0x0800c933
 800c770:	0800c933 	.word	0x0800c933
 800c774:	0800c933 	.word	0x0800c933
 800c778:	0800c82f 	.word	0x0800c82f
 800c77c:	0800c933 	.word	0x0800c933
 800c780:	0800c933 	.word	0x0800c933
 800c784:	0800c933 	.word	0x0800c933
 800c788:	0800c86f 	.word	0x0800c86f
 800c78c:	0800c933 	.word	0x0800c933
 800c790:	0800c933 	.word	0x0800c933
 800c794:	0800c933 	.word	0x0800c933
 800c798:	0800c8b1 	.word	0x0800c8b1
 800c79c:	0800c933 	.word	0x0800c933
 800c7a0:	0800c933 	.word	0x0800c933
 800c7a4:	0800c933 	.word	0x0800c933
 800c7a8:	0800c8f1 	.word	0x0800c8f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68b9      	ldr	r1, [r7, #8]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fa56 	bl	800cc64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	699a      	ldr	r2, [r3, #24]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f042 0208 	orr.w	r2, r2, #8
 800c7c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f022 0204 	bic.w	r2, r2, #4
 800c7d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6999      	ldr	r1, [r3, #24]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	691a      	ldr	r2, [r3, #16]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	619a      	str	r2, [r3, #24]
      break;
 800c7ea:	e0a3      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68b9      	ldr	r1, [r7, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 faa8 	bl	800cd48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	699a      	ldr	r2, [r3, #24]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6999      	ldr	r1, [r3, #24]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	021a      	lsls	r2, r3, #8
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	430a      	orrs	r2, r1
 800c82a:	619a      	str	r2, [r3, #24]
      break;
 800c82c:	e082      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 faff 	bl	800ce38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	69da      	ldr	r2, [r3, #28]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f042 0208 	orr.w	r2, r2, #8
 800c848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69da      	ldr	r2, [r3, #28]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0204 	bic.w	r2, r2, #4
 800c858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69d9      	ldr	r1, [r3, #28]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	61da      	str	r2, [r3, #28]
      break;
 800c86c:	e062      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fb55 	bl	800cf24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69da      	ldr	r2, [r3, #28]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69da      	ldr	r2, [r3, #28]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69d9      	ldr	r1, [r3, #28]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	021a      	lsls	r2, r3, #8
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	61da      	str	r2, [r3, #28]
      break;
 800c8ae:	e041      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fb8c 	bl	800cfd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f042 0208 	orr.w	r2, r2, #8
 800c8ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0204 	bic.w	r2, r2, #4
 800c8da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	691a      	ldr	r2, [r3, #16]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8ee:	e021      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fbbe 	bl	800d078 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c90a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c91a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	021a      	lsls	r2, r3, #8
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	430a      	orrs	r2, r1
 800c92e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c930:	e000      	b.n	800c934 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop

0800c948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d101      	bne.n	800c960 <HAL_TIM_ConfigClockSource+0x18>
 800c95c:	2302      	movs	r3, #2
 800c95e:	e0b3      	b.n	800cac8 <HAL_TIM_ConfigClockSource+0x180>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	4b55      	ldr	r3, [pc, #340]	; (800cad0 <HAL_TIM_ConfigClockSource+0x188>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c986:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c998:	d03e      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0xd0>
 800c99a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c99e:	f200 8087 	bhi.w	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9a6:	f000 8085 	beq.w	800cab4 <HAL_TIM_ConfigClockSource+0x16c>
 800c9aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ae:	d87f      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9b0:	2b70      	cmp	r3, #112	; 0x70
 800c9b2:	d01a      	beq.n	800c9ea <HAL_TIM_ConfigClockSource+0xa2>
 800c9b4:	2b70      	cmp	r3, #112	; 0x70
 800c9b6:	d87b      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9b8:	2b60      	cmp	r3, #96	; 0x60
 800c9ba:	d050      	beq.n	800ca5e <HAL_TIM_ConfigClockSource+0x116>
 800c9bc:	2b60      	cmp	r3, #96	; 0x60
 800c9be:	d877      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9c0:	2b50      	cmp	r3, #80	; 0x50
 800c9c2:	d03c      	beq.n	800ca3e <HAL_TIM_ConfigClockSource+0xf6>
 800c9c4:	2b50      	cmp	r3, #80	; 0x50
 800c9c6:	d873      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9c8:	2b40      	cmp	r3, #64	; 0x40
 800c9ca:	d058      	beq.n	800ca7e <HAL_TIM_ConfigClockSource+0x136>
 800c9cc:	2b40      	cmp	r3, #64	; 0x40
 800c9ce:	d86f      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9d0:	2b30      	cmp	r3, #48	; 0x30
 800c9d2:	d064      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0x156>
 800c9d4:	2b30      	cmp	r3, #48	; 0x30
 800c9d6:	d86b      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9d8:	2b20      	cmp	r3, #32
 800c9da:	d060      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0x156>
 800c9dc:	2b20      	cmp	r3, #32
 800c9de:	d867      	bhi.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d05c      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0x156>
 800c9e4:	2b10      	cmp	r3, #16
 800c9e6:	d05a      	beq.n	800ca9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c9e8:	e062      	b.n	800cab0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6899      	ldr	r1, [r3, #8]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f000 fc0b 	bl	800d214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	609a      	str	r2, [r3, #8]
      break;
 800ca16:	e04e      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	6899      	ldr	r1, [r3, #8]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f000 fbf4 	bl	800d214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	689a      	ldr	r2, [r3, #8]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca3a:	609a      	str	r2, [r3, #8]
      break;
 800ca3c:	e03b      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	6859      	ldr	r1, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f000 fb68 	bl	800d120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2150      	movs	r1, #80	; 0x50
 800ca56:	4618      	mov	r0, r3
 800ca58:	f000 fbc1 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800ca5c:	e02b      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	6859      	ldr	r1, [r3, #4]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f000 fb87 	bl	800d17e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2160      	movs	r1, #96	; 0x60
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fbb1 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800ca7c:	e01b      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6818      	ldr	r0, [r3, #0]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	6859      	ldr	r1, [r3, #4]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f000 fb48 	bl	800d120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2140      	movs	r1, #64	; 0x40
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fba1 	bl	800d1de <TIM_ITRx_SetConfig>
      break;
 800ca9c:	e00b      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f000 fb98 	bl	800d1de <TIM_ITRx_SetConfig>
        break;
 800caae:	e002      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	fffeff88 	.word	0xfffeff88

0800cad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a40      	ldr	r2, [pc, #256]	; (800cc38 <TIM_Base_SetConfig+0x114>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d013      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb42:	d00f      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a3d      	ldr	r2, [pc, #244]	; (800cc3c <TIM_Base_SetConfig+0x118>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00b      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a3c      	ldr	r2, [pc, #240]	; (800cc40 <TIM_Base_SetConfig+0x11c>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d007      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a3b      	ldr	r2, [pc, #236]	; (800cc44 <TIM_Base_SetConfig+0x120>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d003      	beq.n	800cb64 <TIM_Base_SetConfig+0x40>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a3a      	ldr	r2, [pc, #232]	; (800cc48 <TIM_Base_SetConfig+0x124>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d108      	bne.n	800cb76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a2f      	ldr	r2, [pc, #188]	; (800cc38 <TIM_Base_SetConfig+0x114>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d02b      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb84:	d027      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a2c      	ldr	r2, [pc, #176]	; (800cc3c <TIM_Base_SetConfig+0x118>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d023      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a2b      	ldr	r2, [pc, #172]	; (800cc40 <TIM_Base_SetConfig+0x11c>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d01f      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a2a      	ldr	r2, [pc, #168]	; (800cc44 <TIM_Base_SetConfig+0x120>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d01b      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a29      	ldr	r2, [pc, #164]	; (800cc48 <TIM_Base_SetConfig+0x124>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d017      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a28      	ldr	r2, [pc, #160]	; (800cc4c <TIM_Base_SetConfig+0x128>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d013      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a27      	ldr	r2, [pc, #156]	; (800cc50 <TIM_Base_SetConfig+0x12c>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d00f      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a26      	ldr	r2, [pc, #152]	; (800cc54 <TIM_Base_SetConfig+0x130>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d00b      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a25      	ldr	r2, [pc, #148]	; (800cc58 <TIM_Base_SetConfig+0x134>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d007      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a24      	ldr	r2, [pc, #144]	; (800cc5c <TIM_Base_SetConfig+0x138>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d003      	beq.n	800cbd6 <TIM_Base_SetConfig+0xb2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a23      	ldr	r2, [pc, #140]	; (800cc60 <TIM_Base_SetConfig+0x13c>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d108      	bne.n	800cbe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	689a      	ldr	r2, [r3, #8]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a0a      	ldr	r2, [pc, #40]	; (800cc38 <TIM_Base_SetConfig+0x114>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d003      	beq.n	800cc1c <TIM_Base_SetConfig+0xf8>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a0c      	ldr	r2, [pc, #48]	; (800cc48 <TIM_Base_SetConfig+0x124>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d103      	bne.n	800cc24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	691a      	ldr	r2, [r3, #16]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	615a      	str	r2, [r3, #20]
}
 800cc2a:	bf00      	nop
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	40010000 	.word	0x40010000
 800cc3c:	40000400 	.word	0x40000400
 800cc40:	40000800 	.word	0x40000800
 800cc44:	40000c00 	.word	0x40000c00
 800cc48:	40010400 	.word	0x40010400
 800cc4c:	40014000 	.word	0x40014000
 800cc50:	40014400 	.word	0x40014400
 800cc54:	40014800 	.word	0x40014800
 800cc58:	40001800 	.word	0x40001800
 800cc5c:	40001c00 	.word	0x40001c00
 800cc60:	40002000 	.word	0x40002000

0800cc64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	f023 0201 	bic.w	r2, r3, #1
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	4b2b      	ldr	r3, [pc, #172]	; (800cd3c <TIM_OC1_SetConfig+0xd8>)
 800cc90:	4013      	ands	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f023 0302 	bic.w	r3, r3, #2
 800ccac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4a21      	ldr	r2, [pc, #132]	; (800cd40 <TIM_OC1_SetConfig+0xdc>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d003      	beq.n	800ccc8 <TIM_OC1_SetConfig+0x64>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a20      	ldr	r2, [pc, #128]	; (800cd44 <TIM_OC1_SetConfig+0xe0>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d10c      	bne.n	800cce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f023 0308 	bic.w	r3, r3, #8
 800ccce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f023 0304 	bic.w	r3, r3, #4
 800cce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a16      	ldr	r2, [pc, #88]	; (800cd40 <TIM_OC1_SetConfig+0xdc>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d003      	beq.n	800ccf2 <TIM_OC1_SetConfig+0x8e>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a15      	ldr	r2, [pc, #84]	; (800cd44 <TIM_OC1_SetConfig+0xe0>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d111      	bne.n	800cd16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	693a      	ldr	r2, [r7, #16]
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	693a      	ldr	r2, [r7, #16]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	621a      	str	r2, [r3, #32]
}
 800cd30:	bf00      	nop
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	fffeff8f 	.word	0xfffeff8f
 800cd40:	40010000 	.word	0x40010000
 800cd44:	40010400 	.word	0x40010400

0800cd48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	f023 0210 	bic.w	r2, r3, #16
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a1b      	ldr	r3, [r3, #32]
 800cd62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	4b2e      	ldr	r3, [pc, #184]	; (800ce2c <TIM_OC2_SetConfig+0xe4>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	021b      	lsls	r3, r3, #8
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	f023 0320 	bic.w	r3, r3, #32
 800cd92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	011b      	lsls	r3, r3, #4
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a23      	ldr	r2, [pc, #140]	; (800ce30 <TIM_OC2_SetConfig+0xe8>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d003      	beq.n	800cdb0 <TIM_OC2_SetConfig+0x68>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a22      	ldr	r2, [pc, #136]	; (800ce34 <TIM_OC2_SetConfig+0xec>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d10d      	bne.n	800cdcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	011b      	lsls	r3, r3, #4
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a18      	ldr	r2, [pc, #96]	; (800ce30 <TIM_OC2_SetConfig+0xe8>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d003      	beq.n	800cddc <TIM_OC2_SetConfig+0x94>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a17      	ldr	r2, [pc, #92]	; (800ce34 <TIM_OC2_SetConfig+0xec>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d113      	bne.n	800ce04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cde2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	699b      	ldr	r3, [r3, #24]
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	693a      	ldr	r2, [r7, #16]
 800ce08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	621a      	str	r2, [r3, #32]
}
 800ce1e:	bf00      	nop
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	feff8fff 	.word	0xfeff8fff
 800ce30:	40010000 	.word	0x40010000
 800ce34:	40010400 	.word	0x40010400

0800ce38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a1b      	ldr	r3, [r3, #32]
 800ce46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	69db      	ldr	r3, [r3, #28]
 800ce5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4b2d      	ldr	r3, [pc, #180]	; (800cf18 <TIM_OC3_SetConfig+0xe0>)
 800ce64:	4013      	ands	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	021b      	lsls	r3, r3, #8
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4a22      	ldr	r2, [pc, #136]	; (800cf1c <TIM_OC3_SetConfig+0xe4>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d003      	beq.n	800ce9e <TIM_OC3_SetConfig+0x66>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4a21      	ldr	r2, [pc, #132]	; (800cf20 <TIM_OC3_SetConfig+0xe8>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d10d      	bne.n	800ceba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ceb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a17      	ldr	r2, [pc, #92]	; (800cf1c <TIM_OC3_SetConfig+0xe4>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d003      	beq.n	800ceca <TIM_OC3_SetConfig+0x92>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a16      	ldr	r2, [pc, #88]	; (800cf20 <TIM_OC3_SetConfig+0xe8>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d113      	bne.n	800cef2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ced0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ced8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	011b      	lsls	r3, r3, #4
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	685a      	ldr	r2, [r3, #4]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	697a      	ldr	r2, [r7, #20]
 800cf0a:	621a      	str	r2, [r3, #32]
}
 800cf0c:	bf00      	nop
 800cf0e:	371c      	adds	r7, #28
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	fffeff8f 	.word	0xfffeff8f
 800cf1c:	40010000 	.word	0x40010000
 800cf20:	40010400 	.word	0x40010400

0800cf24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	69db      	ldr	r3, [r3, #28]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4b1e      	ldr	r3, [pc, #120]	; (800cfc8 <TIM_OC4_SetConfig+0xa4>)
 800cf50:	4013      	ands	r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	021b      	lsls	r3, r3, #8
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	031b      	lsls	r3, r3, #12
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a13      	ldr	r2, [pc, #76]	; (800cfcc <TIM_OC4_SetConfig+0xa8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d003      	beq.n	800cf8c <TIM_OC4_SetConfig+0x68>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a12      	ldr	r2, [pc, #72]	; (800cfd0 <TIM_OC4_SetConfig+0xac>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d109      	bne.n	800cfa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	019b      	lsls	r3, r3, #6
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	621a      	str	r2, [r3, #32]
}
 800cfba:	bf00      	nop
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	feff8fff 	.word	0xfeff8fff
 800cfcc:	40010000 	.word	0x40010000
 800cfd0:	40010400 	.word	0x40010400

0800cfd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a1b      	ldr	r3, [r3, #32]
 800cfe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	4b1b      	ldr	r3, [pc, #108]	; (800d06c <TIM_OC5_SetConfig+0x98>)
 800d000:	4013      	ands	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	041b      	lsls	r3, r3, #16
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	4313      	orrs	r3, r2
 800d020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a12      	ldr	r2, [pc, #72]	; (800d070 <TIM_OC5_SetConfig+0x9c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d003      	beq.n	800d032 <TIM_OC5_SetConfig+0x5e>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a11      	ldr	r2, [pc, #68]	; (800d074 <TIM_OC5_SetConfig+0xa0>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d109      	bne.n	800d046 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	021b      	lsls	r3, r3, #8
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	4313      	orrs	r3, r2
 800d044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	621a      	str	r2, [r3, #32]
}
 800d060:	bf00      	nop
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	fffeff8f 	.word	0xfffeff8f
 800d070:	40010000 	.word	0x40010000
 800d074:	40010400 	.word	0x40010400

0800d078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <TIM_OC6_SetConfig+0x9c>)
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d0ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	051b      	lsls	r3, r3, #20
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a13      	ldr	r2, [pc, #76]	; (800d118 <TIM_OC6_SetConfig+0xa0>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d003      	beq.n	800d0d8 <TIM_OC6_SetConfig+0x60>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a12      	ldr	r2, [pc, #72]	; (800d11c <TIM_OC6_SetConfig+0xa4>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d109      	bne.n	800d0ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	029b      	lsls	r3, r3, #10
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	621a      	str	r2, [r3, #32]
}
 800d106:	bf00      	nop
 800d108:	371c      	adds	r7, #28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	feff8fff 	.word	0xfeff8fff
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400

0800d120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6a1b      	ldr	r3, [r3, #32]
 800d130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f023 0201 	bic.w	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	4313      	orrs	r3, r2
 800d154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f023 030a 	bic.w	r3, r3, #10
 800d15c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	4313      	orrs	r3, r2
 800d164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	693a      	ldr	r2, [r7, #16]
 800d16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	621a      	str	r2, [r3, #32]
}
 800d172:	bf00      	nop
 800d174:	371c      	adds	r7, #28
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d17e:	b480      	push	{r7}
 800d180:	b087      	sub	sp, #28
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	f023 0210 	bic.w	r2, r3, #16
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a1b      	ldr	r3, [r3, #32]
 800d1a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	031b      	lsls	r3, r3, #12
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	011b      	lsls	r3, r3, #4
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	621a      	str	r2, [r3, #32]
}
 800d1d2:	bf00      	nop
 800d1d4:	371c      	adds	r7, #28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1de:	b480      	push	{r7}
 800d1e0:	b085      	sub	sp, #20
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	f043 0307 	orr.w	r3, r3, #7
 800d200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	609a      	str	r2, [r3, #8]
}
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d214:	b480      	push	{r7}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d22e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	021a      	lsls	r2, r3, #8
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	431a      	orrs	r2, r3
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	609a      	str	r2, [r3, #8]
}
 800d248:	bf00      	nop
 800d24a:	371c      	adds	r7, #28
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d264:	2b01      	cmp	r3, #1
 800d266:	d101      	bne.n	800d26c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d268:	2302      	movs	r3, #2
 800d26a:	e06d      	b.n	800d348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a30      	ldr	r2, [pc, #192]	; (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d004      	beq.n	800d2a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a2f      	ldr	r2, [pc, #188]	; (800d358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d108      	bne.n	800d2b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a20      	ldr	r2, [pc, #128]	; (800d354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d022      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2de:	d01d      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a1d      	ldr	r2, [pc, #116]	; (800d35c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d018      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a1c      	ldr	r2, [pc, #112]	; (800d360 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d013      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a1a      	ldr	r2, [pc, #104]	; (800d364 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d00e      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a15      	ldr	r2, [pc, #84]	; (800d358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d009      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a16      	ldr	r2, [pc, #88]	; (800d368 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d004      	beq.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a15      	ldr	r2, [pc, #84]	; (800d36c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d10c      	bne.n	800d336 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	40010000 	.word	0x40010000
 800d358:	40010400 	.word	0x40010400
 800d35c:	40000400 	.word	0x40000400
 800d360:	40000800 	.word	0x40000800
 800d364:	40000c00 	.word	0x40000c00
 800d368:	40014000 	.word	0x40014000
 800d36c:	40001800 	.word	0x40001800

0800d370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d384:	2b01      	cmp	r3, #1
 800d386:	d101      	bne.n	800d38c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d388:	2302      	movs	r3, #2
 800d38a:	e065      	b.n	800d458 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	041b      	lsls	r3, r3, #16
 800d402:	4313      	orrs	r3, r2
 800d404:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a16      	ldr	r2, [pc, #88]	; (800d464 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d004      	beq.n	800d41a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a14      	ldr	r2, [pc, #80]	; (800d468 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d115      	bne.n	800d446 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	051b      	lsls	r3, r3, #20
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	4313      	orrs	r3, r2
 800d436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	4313      	orrs	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3714      	adds	r7, #20
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	40010000 	.word	0x40010000
 800d468:	40010400 	.word	0x40010400

0800d46c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e040      	b.n	800d53c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7f5 fed6 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2224      	movs	r2, #36	; 0x24
 800d4d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0201 	bic.w	r2, r2, #1
 800d4e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f8c0 	bl	800d66c <UART_SetConfig>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d101      	bne.n	800d4f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e022      	b.n	800d53c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fb16 	bl	800db30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689a      	ldr	r2, [r3, #8]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f042 0201 	orr.w	r2, r2, #1
 800d532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fb9d 	bl	800dc74 <UART_CheckIdleState>
 800d53a:	4603      	mov	r3, r0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af02      	add	r7, sp, #8
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4613      	mov	r3, r2
 800d552:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d558:	2b20      	cmp	r3, #32
 800d55a:	f040 8081 	bne.w	800d660 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <HAL_UART_Transmit+0x26>
 800d564:	88fb      	ldrh	r3, [r7, #6]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e079      	b.n	800d662 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d574:	2b01      	cmp	r3, #1
 800d576:	d101      	bne.n	800d57c <HAL_UART_Transmit+0x38>
 800d578:	2302      	movs	r3, #2
 800d57a:	e072      	b.n	800d662 <HAL_UART_Transmit+0x11e>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2221      	movs	r2, #33	; 0x21
 800d590:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d592:	f7f6 fdc5 	bl	8004120 <HAL_GetTick>
 800d596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	88fa      	ldrh	r2, [r7, #6]
 800d59c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	88fa      	ldrh	r2, [r7, #6]
 800d5a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b0:	d108      	bne.n	800d5c4 <HAL_UART_Transmit+0x80>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d104      	bne.n	800d5c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	e003      	b.n	800d5cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d5d4:	e02c      	b.n	800d630 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2180      	movs	r1, #128	; 0x80
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fb7a 	bl	800dcda <UART_WaitOnFlagUntilTimeout>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e038      	b.n	800d662 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10b      	bne.n	800d60e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d604:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	3302      	adds	r3, #2
 800d60a:	61bb      	str	r3, [r7, #24]
 800d60c:	e007      	b.n	800d61e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	781a      	ldrb	r2, [r3, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	3301      	adds	r3, #1
 800d61c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d636:	b29b      	uxth	r3, r3
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1cc      	bne.n	800d5d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2200      	movs	r2, #0
 800d644:	2140      	movs	r1, #64	; 0x40
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 fb47 	bl	800dcda <UART_WaitOnFlagUntilTimeout>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e005      	b.n	800d662 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2220      	movs	r2, #32
 800d65a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e000      	b.n	800d662 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d660:	2302      	movs	r3, #2
  }
}
 800d662:	4618      	mov	r0, r3
 800d664:	3720      	adds	r7, #32
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b088      	sub	sp, #32
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689a      	ldr	r2, [r3, #8]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	695b      	ldr	r3, [r3, #20]
 800d686:	431a      	orrs	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	69db      	ldr	r3, [r3, #28]
 800d68c:	4313      	orrs	r3, r2
 800d68e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	4ba7      	ldr	r3, [pc, #668]	; (800d934 <UART_SetConfig+0x2c8>)
 800d698:	4013      	ands	r3, r2
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	6812      	ldr	r2, [r2, #0]
 800d69e:	6979      	ldr	r1, [r7, #20]
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	430a      	orrs	r2, r1
 800d6b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	697a      	ldr	r2, [r7, #20]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a95      	ldr	r2, [pc, #596]	; (800d938 <UART_SetConfig+0x2cc>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d120      	bne.n	800d72a <UART_SetConfig+0xbe>
 800d6e8:	4b94      	ldr	r3, [pc, #592]	; (800d93c <UART_SetConfig+0x2d0>)
 800d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d816      	bhi.n	800d724 <UART_SetConfig+0xb8>
 800d6f6:	a201      	add	r2, pc, #4	; (adr r2, 800d6fc <UART_SetConfig+0x90>)
 800d6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fc:	0800d70d 	.word	0x0800d70d
 800d700:	0800d719 	.word	0x0800d719
 800d704:	0800d713 	.word	0x0800d713
 800d708:	0800d71f 	.word	0x0800d71f
 800d70c:	2301      	movs	r3, #1
 800d70e:	77fb      	strb	r3, [r7, #31]
 800d710:	e14f      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d712:	2302      	movs	r3, #2
 800d714:	77fb      	strb	r3, [r7, #31]
 800d716:	e14c      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d718:	2304      	movs	r3, #4
 800d71a:	77fb      	strb	r3, [r7, #31]
 800d71c:	e149      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d71e:	2308      	movs	r3, #8
 800d720:	77fb      	strb	r3, [r7, #31]
 800d722:	e146      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d724:	2310      	movs	r3, #16
 800d726:	77fb      	strb	r3, [r7, #31]
 800d728:	e143      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a84      	ldr	r2, [pc, #528]	; (800d940 <UART_SetConfig+0x2d4>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d132      	bne.n	800d79a <UART_SetConfig+0x12e>
 800d734:	4b81      	ldr	r3, [pc, #516]	; (800d93c <UART_SetConfig+0x2d0>)
 800d736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d73a:	f003 030c 	and.w	r3, r3, #12
 800d73e:	2b0c      	cmp	r3, #12
 800d740:	d828      	bhi.n	800d794 <UART_SetConfig+0x128>
 800d742:	a201      	add	r2, pc, #4	; (adr r2, 800d748 <UART_SetConfig+0xdc>)
 800d744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d748:	0800d77d 	.word	0x0800d77d
 800d74c:	0800d795 	.word	0x0800d795
 800d750:	0800d795 	.word	0x0800d795
 800d754:	0800d795 	.word	0x0800d795
 800d758:	0800d789 	.word	0x0800d789
 800d75c:	0800d795 	.word	0x0800d795
 800d760:	0800d795 	.word	0x0800d795
 800d764:	0800d795 	.word	0x0800d795
 800d768:	0800d783 	.word	0x0800d783
 800d76c:	0800d795 	.word	0x0800d795
 800d770:	0800d795 	.word	0x0800d795
 800d774:	0800d795 	.word	0x0800d795
 800d778:	0800d78f 	.word	0x0800d78f
 800d77c:	2300      	movs	r3, #0
 800d77e:	77fb      	strb	r3, [r7, #31]
 800d780:	e117      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d782:	2302      	movs	r3, #2
 800d784:	77fb      	strb	r3, [r7, #31]
 800d786:	e114      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d788:	2304      	movs	r3, #4
 800d78a:	77fb      	strb	r3, [r7, #31]
 800d78c:	e111      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d78e:	2308      	movs	r3, #8
 800d790:	77fb      	strb	r3, [r7, #31]
 800d792:	e10e      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d794:	2310      	movs	r3, #16
 800d796:	77fb      	strb	r3, [r7, #31]
 800d798:	e10b      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a69      	ldr	r2, [pc, #420]	; (800d944 <UART_SetConfig+0x2d8>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d120      	bne.n	800d7e6 <UART_SetConfig+0x17a>
 800d7a4:	4b65      	ldr	r3, [pc, #404]	; (800d93c <UART_SetConfig+0x2d0>)
 800d7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d7ae:	2b30      	cmp	r3, #48	; 0x30
 800d7b0:	d013      	beq.n	800d7da <UART_SetConfig+0x16e>
 800d7b2:	2b30      	cmp	r3, #48	; 0x30
 800d7b4:	d814      	bhi.n	800d7e0 <UART_SetConfig+0x174>
 800d7b6:	2b20      	cmp	r3, #32
 800d7b8:	d009      	beq.n	800d7ce <UART_SetConfig+0x162>
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	d810      	bhi.n	800d7e0 <UART_SetConfig+0x174>
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <UART_SetConfig+0x15c>
 800d7c2:	2b10      	cmp	r3, #16
 800d7c4:	d006      	beq.n	800d7d4 <UART_SetConfig+0x168>
 800d7c6:	e00b      	b.n	800d7e0 <UART_SetConfig+0x174>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	77fb      	strb	r3, [r7, #31]
 800d7cc:	e0f1      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	77fb      	strb	r3, [r7, #31]
 800d7d2:	e0ee      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	77fb      	strb	r3, [r7, #31]
 800d7d8:	e0eb      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d7da:	2308      	movs	r3, #8
 800d7dc:	77fb      	strb	r3, [r7, #31]
 800d7de:	e0e8      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	77fb      	strb	r3, [r7, #31]
 800d7e4:	e0e5      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a57      	ldr	r2, [pc, #348]	; (800d948 <UART_SetConfig+0x2dc>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d120      	bne.n	800d832 <UART_SetConfig+0x1c6>
 800d7f0:	4b52      	ldr	r3, [pc, #328]	; (800d93c <UART_SetConfig+0x2d0>)
 800d7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800d7fc:	d013      	beq.n	800d826 <UART_SetConfig+0x1ba>
 800d7fe:	2bc0      	cmp	r3, #192	; 0xc0
 800d800:	d814      	bhi.n	800d82c <UART_SetConfig+0x1c0>
 800d802:	2b80      	cmp	r3, #128	; 0x80
 800d804:	d009      	beq.n	800d81a <UART_SetConfig+0x1ae>
 800d806:	2b80      	cmp	r3, #128	; 0x80
 800d808:	d810      	bhi.n	800d82c <UART_SetConfig+0x1c0>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d002      	beq.n	800d814 <UART_SetConfig+0x1a8>
 800d80e:	2b40      	cmp	r3, #64	; 0x40
 800d810:	d006      	beq.n	800d820 <UART_SetConfig+0x1b4>
 800d812:	e00b      	b.n	800d82c <UART_SetConfig+0x1c0>
 800d814:	2300      	movs	r3, #0
 800d816:	77fb      	strb	r3, [r7, #31]
 800d818:	e0cb      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d81a:	2302      	movs	r3, #2
 800d81c:	77fb      	strb	r3, [r7, #31]
 800d81e:	e0c8      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d820:	2304      	movs	r3, #4
 800d822:	77fb      	strb	r3, [r7, #31]
 800d824:	e0c5      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d826:	2308      	movs	r3, #8
 800d828:	77fb      	strb	r3, [r7, #31]
 800d82a:	e0c2      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d82c:	2310      	movs	r3, #16
 800d82e:	77fb      	strb	r3, [r7, #31]
 800d830:	e0bf      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a45      	ldr	r2, [pc, #276]	; (800d94c <UART_SetConfig+0x2e0>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d125      	bne.n	800d888 <UART_SetConfig+0x21c>
 800d83c:	4b3f      	ldr	r3, [pc, #252]	; (800d93c <UART_SetConfig+0x2d0>)
 800d83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d84a:	d017      	beq.n	800d87c <UART_SetConfig+0x210>
 800d84c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d850:	d817      	bhi.n	800d882 <UART_SetConfig+0x216>
 800d852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d856:	d00b      	beq.n	800d870 <UART_SetConfig+0x204>
 800d858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d85c:	d811      	bhi.n	800d882 <UART_SetConfig+0x216>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d003      	beq.n	800d86a <UART_SetConfig+0x1fe>
 800d862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d866:	d006      	beq.n	800d876 <UART_SetConfig+0x20a>
 800d868:	e00b      	b.n	800d882 <UART_SetConfig+0x216>
 800d86a:	2300      	movs	r3, #0
 800d86c:	77fb      	strb	r3, [r7, #31]
 800d86e:	e0a0      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d870:	2302      	movs	r3, #2
 800d872:	77fb      	strb	r3, [r7, #31]
 800d874:	e09d      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d876:	2304      	movs	r3, #4
 800d878:	77fb      	strb	r3, [r7, #31]
 800d87a:	e09a      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d87c:	2308      	movs	r3, #8
 800d87e:	77fb      	strb	r3, [r7, #31]
 800d880:	e097      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d882:	2310      	movs	r3, #16
 800d884:	77fb      	strb	r3, [r7, #31]
 800d886:	e094      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a30      	ldr	r2, [pc, #192]	; (800d950 <UART_SetConfig+0x2e4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d125      	bne.n	800d8de <UART_SetConfig+0x272>
 800d892:	4b2a      	ldr	r3, [pc, #168]	; (800d93c <UART_SetConfig+0x2d0>)
 800d894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d89c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8a0:	d017      	beq.n	800d8d2 <UART_SetConfig+0x266>
 800d8a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8a6:	d817      	bhi.n	800d8d8 <UART_SetConfig+0x26c>
 800d8a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8ac:	d00b      	beq.n	800d8c6 <UART_SetConfig+0x25a>
 800d8ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8b2:	d811      	bhi.n	800d8d8 <UART_SetConfig+0x26c>
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <UART_SetConfig+0x254>
 800d8b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8bc:	d006      	beq.n	800d8cc <UART_SetConfig+0x260>
 800d8be:	e00b      	b.n	800d8d8 <UART_SetConfig+0x26c>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	77fb      	strb	r3, [r7, #31]
 800d8c4:	e075      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	77fb      	strb	r3, [r7, #31]
 800d8ca:	e072      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	77fb      	strb	r3, [r7, #31]
 800d8d0:	e06f      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d8d2:	2308      	movs	r3, #8
 800d8d4:	77fb      	strb	r3, [r7, #31]
 800d8d6:	e06c      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d8d8:	2310      	movs	r3, #16
 800d8da:	77fb      	strb	r3, [r7, #31]
 800d8dc:	e069      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a1c      	ldr	r2, [pc, #112]	; (800d954 <UART_SetConfig+0x2e8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d137      	bne.n	800d958 <UART_SetConfig+0x2ec>
 800d8e8:	4b14      	ldr	r3, [pc, #80]	; (800d93c <UART_SetConfig+0x2d0>)
 800d8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d8f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8f6:	d017      	beq.n	800d928 <UART_SetConfig+0x2bc>
 800d8f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8fc:	d817      	bhi.n	800d92e <UART_SetConfig+0x2c2>
 800d8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d902:	d00b      	beq.n	800d91c <UART_SetConfig+0x2b0>
 800d904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d908:	d811      	bhi.n	800d92e <UART_SetConfig+0x2c2>
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <UART_SetConfig+0x2aa>
 800d90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d912:	d006      	beq.n	800d922 <UART_SetConfig+0x2b6>
 800d914:	e00b      	b.n	800d92e <UART_SetConfig+0x2c2>
 800d916:	2300      	movs	r3, #0
 800d918:	77fb      	strb	r3, [r7, #31]
 800d91a:	e04a      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d91c:	2302      	movs	r3, #2
 800d91e:	77fb      	strb	r3, [r7, #31]
 800d920:	e047      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d922:	2304      	movs	r3, #4
 800d924:	77fb      	strb	r3, [r7, #31]
 800d926:	e044      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d928:	2308      	movs	r3, #8
 800d92a:	77fb      	strb	r3, [r7, #31]
 800d92c:	e041      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d92e:	2310      	movs	r3, #16
 800d930:	77fb      	strb	r3, [r7, #31]
 800d932:	e03e      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d934:	efff69f3 	.word	0xefff69f3
 800d938:	40011000 	.word	0x40011000
 800d93c:	40023800 	.word	0x40023800
 800d940:	40004400 	.word	0x40004400
 800d944:	40004800 	.word	0x40004800
 800d948:	40004c00 	.word	0x40004c00
 800d94c:	40005000 	.word	0x40005000
 800d950:	40011400 	.word	0x40011400
 800d954:	40007800 	.word	0x40007800
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a71      	ldr	r2, [pc, #452]	; (800db24 <UART_SetConfig+0x4b8>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d125      	bne.n	800d9ae <UART_SetConfig+0x342>
 800d962:	4b71      	ldr	r3, [pc, #452]	; (800db28 <UART_SetConfig+0x4bc>)
 800d964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d96c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d970:	d017      	beq.n	800d9a2 <UART_SetConfig+0x336>
 800d972:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d976:	d817      	bhi.n	800d9a8 <UART_SetConfig+0x33c>
 800d978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d97c:	d00b      	beq.n	800d996 <UART_SetConfig+0x32a>
 800d97e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d982:	d811      	bhi.n	800d9a8 <UART_SetConfig+0x33c>
 800d984:	2b00      	cmp	r3, #0
 800d986:	d003      	beq.n	800d990 <UART_SetConfig+0x324>
 800d988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d98c:	d006      	beq.n	800d99c <UART_SetConfig+0x330>
 800d98e:	e00b      	b.n	800d9a8 <UART_SetConfig+0x33c>
 800d990:	2300      	movs	r3, #0
 800d992:	77fb      	strb	r3, [r7, #31]
 800d994:	e00d      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d996:	2302      	movs	r3, #2
 800d998:	77fb      	strb	r3, [r7, #31]
 800d99a:	e00a      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d99c:	2304      	movs	r3, #4
 800d99e:	77fb      	strb	r3, [r7, #31]
 800d9a0:	e007      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d9a2:	2308      	movs	r3, #8
 800d9a4:	77fb      	strb	r3, [r7, #31]
 800d9a6:	e004      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d9a8:	2310      	movs	r3, #16
 800d9aa:	77fb      	strb	r3, [r7, #31]
 800d9ac:	e001      	b.n	800d9b2 <UART_SetConfig+0x346>
 800d9ae:	2310      	movs	r3, #16
 800d9b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ba:	d15b      	bne.n	800da74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800d9bc:	7ffb      	ldrb	r3, [r7, #31]
 800d9be:	2b08      	cmp	r3, #8
 800d9c0:	d827      	bhi.n	800da12 <UART_SetConfig+0x3a6>
 800d9c2:	a201      	add	r2, pc, #4	; (adr r2, 800d9c8 <UART_SetConfig+0x35c>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800d9ed 	.word	0x0800d9ed
 800d9cc:	0800d9f5 	.word	0x0800d9f5
 800d9d0:	0800d9fd 	.word	0x0800d9fd
 800d9d4:	0800da13 	.word	0x0800da13
 800d9d8:	0800da03 	.word	0x0800da03
 800d9dc:	0800da13 	.word	0x0800da13
 800d9e0:	0800da13 	.word	0x0800da13
 800d9e4:	0800da13 	.word	0x0800da13
 800d9e8:	0800da0b 	.word	0x0800da0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9ec:	f7fb fed0 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800d9f0:	61b8      	str	r0, [r7, #24]
        break;
 800d9f2:	e013      	b.n	800da1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9f4:	f7fb fee0 	bl	80097b8 <HAL_RCC_GetPCLK2Freq>
 800d9f8:	61b8      	str	r0, [r7, #24]
        break;
 800d9fa:	e00f      	b.n	800da1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9fc:	4b4b      	ldr	r3, [pc, #300]	; (800db2c <UART_SetConfig+0x4c0>)
 800d9fe:	61bb      	str	r3, [r7, #24]
        break;
 800da00:	e00c      	b.n	800da1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da02:	f7fb fe03 	bl	800960c <HAL_RCC_GetSysClockFreq>
 800da06:	61b8      	str	r0, [r7, #24]
        break;
 800da08:	e008      	b.n	800da1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da0e:	61bb      	str	r3, [r7, #24]
        break;
 800da10:	e004      	b.n	800da1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800da12:	2300      	movs	r3, #0
 800da14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	77bb      	strb	r3, [r7, #30]
        break;
 800da1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d074      	beq.n	800db0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	005a      	lsls	r2, r3, #1
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	441a      	add	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	fbb2 f3f3 	udiv	r3, r2, r3
 800da36:	b29b      	uxth	r3, r3
 800da38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b0f      	cmp	r3, #15
 800da3e:	d916      	bls.n	800da6e <UART_SetConfig+0x402>
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da46:	d212      	bcs.n	800da6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	f023 030f 	bic.w	r3, r3, #15
 800da50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	085b      	lsrs	r3, r3, #1
 800da56:	b29b      	uxth	r3, r3
 800da58:	f003 0307 	and.w	r3, r3, #7
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	89fb      	ldrh	r3, [r7, #14]
 800da60:	4313      	orrs	r3, r2
 800da62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	89fa      	ldrh	r2, [r7, #14]
 800da6a:	60da      	str	r2, [r3, #12]
 800da6c:	e04e      	b.n	800db0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	77bb      	strb	r3, [r7, #30]
 800da72:	e04b      	b.n	800db0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da74:	7ffb      	ldrb	r3, [r7, #31]
 800da76:	2b08      	cmp	r3, #8
 800da78:	d827      	bhi.n	800daca <UART_SetConfig+0x45e>
 800da7a:	a201      	add	r2, pc, #4	; (adr r2, 800da80 <UART_SetConfig+0x414>)
 800da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da80:	0800daa5 	.word	0x0800daa5
 800da84:	0800daad 	.word	0x0800daad
 800da88:	0800dab5 	.word	0x0800dab5
 800da8c:	0800dacb 	.word	0x0800dacb
 800da90:	0800dabb 	.word	0x0800dabb
 800da94:	0800dacb 	.word	0x0800dacb
 800da98:	0800dacb 	.word	0x0800dacb
 800da9c:	0800dacb 	.word	0x0800dacb
 800daa0:	0800dac3 	.word	0x0800dac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800daa4:	f7fb fe74 	bl	8009790 <HAL_RCC_GetPCLK1Freq>
 800daa8:	61b8      	str	r0, [r7, #24]
        break;
 800daaa:	e013      	b.n	800dad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800daac:	f7fb fe84 	bl	80097b8 <HAL_RCC_GetPCLK2Freq>
 800dab0:	61b8      	str	r0, [r7, #24]
        break;
 800dab2:	e00f      	b.n	800dad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dab4:	4b1d      	ldr	r3, [pc, #116]	; (800db2c <UART_SetConfig+0x4c0>)
 800dab6:	61bb      	str	r3, [r7, #24]
        break;
 800dab8:	e00c      	b.n	800dad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800daba:	f7fb fda7 	bl	800960c <HAL_RCC_GetSysClockFreq>
 800dabe:	61b8      	str	r0, [r7, #24]
        break;
 800dac0:	e008      	b.n	800dad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dac6:	61bb      	str	r3, [r7, #24]
        break;
 800dac8:	e004      	b.n	800dad4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	77bb      	strb	r3, [r7, #30]
        break;
 800dad2:	bf00      	nop
    }

    if (pclk != 0U)
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d018      	beq.n	800db0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	085a      	lsrs	r2, r3, #1
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	441a      	add	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800daec:	b29b      	uxth	r3, r3
 800daee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	d908      	bls.n	800db08 <UART_SetConfig+0x49c>
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafc:	d204      	bcs.n	800db08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	60da      	str	r2, [r3, #12]
 800db06:	e001      	b.n	800db0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800db18:	7fbb      	ldrb	r3, [r7, #30]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3720      	adds	r7, #32
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	40007c00 	.word	0x40007c00
 800db28:	40023800 	.word	0x40023800
 800db2c:	00f42400 	.word	0x00f42400

0800db30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00a      	beq.n	800db5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	430a      	orrs	r2, r1
 800db58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5e:	f003 0302 	and.w	r3, r3, #2
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00a      	beq.n	800db7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	f003 0304 	and.w	r3, r3, #4
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00a      	beq.n	800db9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba2:	f003 0308 	and.w	r3, r3, #8
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00a      	beq.n	800dbc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00a      	beq.n	800dbe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe6:	f003 0320 	and.w	r3, r3, #32
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d01a      	beq.n	800dc46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc2e:	d10a      	bne.n	800dc46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	430a      	orrs	r2, r1
 800dc66:	605a      	str	r2, [r3, #4]
  }
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc84:	f7f6 fa4c 	bl	8004120 <HAL_GetTick>
 800dc88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f003 0308 	and.w	r3, r3, #8
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d10e      	bne.n	800dcb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f817 	bl	800dcda <UART_WaitOnFlagUntilTimeout>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	e00d      	b.n	800dcd2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2220      	movs	r2, #32
 800dcc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	60b9      	str	r1, [r7, #8]
 800dce4:	603b      	str	r3, [r7, #0]
 800dce6:	4613      	mov	r3, r2
 800dce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcea:	e05e      	b.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcf2:	d05a      	beq.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcf4:	f7f6 fa14 	bl	8004120 <HAL_GetTick>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	69ba      	ldr	r2, [r7, #24]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d302      	bcc.n	800dd0a <UART_WaitOnFlagUntilTimeout+0x30>
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d11b      	bne.n	800dd42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dd18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f022 0201 	bic.w	r2, r2, #1
 800dd28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2220      	movs	r2, #32
 800dd2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2220      	movs	r2, #32
 800dd34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e043      	b.n	800ddca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0304 	and.w	r3, r3, #4
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d02c      	beq.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	69db      	ldr	r3, [r3, #28]
 800dd56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd5e:	d124      	bne.n	800ddaa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dd78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689a      	ldr	r2, [r3, #8]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f022 0201 	bic.w	r2, r2, #1
 800dd88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2220      	movs	r2, #32
 800dd94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2220      	movs	r2, #32
 800dd9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dda6:	2303      	movs	r3, #3
 800dda8:	e00f      	b.n	800ddca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	69da      	ldr	r2, [r3, #28]
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	bf0c      	ite	eq
 800ddba:	2301      	moveq	r3, #1
 800ddbc:	2300      	movne	r3, #0
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d091      	beq.n	800dcec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
	...

0800ddd4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d027      	beq.n	800de3e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	4b2f      	ldr	r3, [pc, #188]	; (800deb4 <FMC_SDRAM_Init+0xe0>)
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800de04:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800de0a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800de10:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800de16:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800de1c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800de22:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800de28:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800de2e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	e032      	b.n	800dea4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800de4a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800de54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800de5a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4313      	orrs	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <FMC_SDRAM_Init+0xe0>)
 800de6c:	4013      	ands	r3, r2
 800de6e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800de78:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800de7e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800de84:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800de8a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800de90:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	4313      	orrs	r3, r2
 800de96:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	ffff8000 	.word	0xffff8000

0800deb8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800deb8:	b480      	push	{r7}
 800deba:	b087      	sub	sp, #28
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800dec8:	2300      	movs	r3, #0
 800deca:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d02e      	beq.n	800df30 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dede:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	3b01      	subs	r3, #1
 800deec:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800deee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	3b01      	subs	r3, #1
 800def6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800def8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	3b01      	subs	r3, #1
 800df00:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800df02:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	3b01      	subs	r3, #1
 800df0a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800df0c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	695b      	ldr	r3, [r3, #20]
 800df12:	3b01      	subs	r3, #1
 800df14:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800df16:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800df20:	4313      	orrs	r3, r2
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	4313      	orrs	r3, r2
 800df26:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	697a      	ldr	r2, [r7, #20]
 800df2c:	609a      	str	r2, [r3, #8]
 800df2e:	e039      	b.n	800dfa4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	4b1e      	ldr	r3, [pc, #120]	; (800dfb4 <FMC_SDRAM_Timing_Init+0xfc>)
 800df3a:	4013      	ands	r3, r2
 800df3c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	3b01      	subs	r3, #1
 800df44:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800df4e:	4313      	orrs	r3, r2
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	4313      	orrs	r3, r2
 800df54:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800df62:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	3b01      	subs	r3, #1
 800df70:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800df72:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	3b01      	subs	r3, #1
 800df7a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800df7c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	3b01      	subs	r3, #1
 800df84:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800df86:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800df90:	4313      	orrs	r3, r2
 800df92:	693a      	ldr	r2, [r7, #16]
 800df94:	4313      	orrs	r3, r2
 800df96:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	693a      	ldr	r2, [r7, #16]
 800dfa2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	ff0f0fff 	.word	0xff0f0fff

0800dfb8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	691a      	ldr	r2, [r3, #16]
 800dfc8:	4b0c      	ldr	r3, [pc, #48]	; (800dffc <FMC_SDRAM_SendCommand+0x44>)
 800dfca:	4013      	ands	r3, r2
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	6811      	ldr	r1, [r2, #0]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	6852      	ldr	r2, [r2, #4]
 800dfd4:	4311      	orrs	r1, r2
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	6892      	ldr	r2, [r2, #8]
 800dfda:	3a01      	subs	r2, #1
 800dfdc:	0152      	lsls	r2, r2, #5
 800dfde:	4311      	orrs	r1, r2
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	68d2      	ldr	r2, [r2, #12]
 800dfe4:	0252      	lsls	r2, r2, #9
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr
 800dffc:	ffc00000 	.word	0xffc00000

0800e000 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	695a      	ldr	r2, [r3, #20]
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	370c      	adds	r7, #12
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
	...

0800e028 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e028:	b084      	sub	sp, #16
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	f107 001c 	add.w	r0, r7, #28
 800e036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e03e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e040:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e042:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e046:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e04a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e04e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e052:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	4313      	orrs	r3, r2
 800e058:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	4b07      	ldr	r3, [pc, #28]	; (800e07c <SDMMC_Init+0x54>)
 800e060:	4013      	ands	r3, r2
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	b004      	add	sp, #16
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	ffff8100 	.word	0xffff8100

0800e080 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e08e:	4618      	mov	r0, r3
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800e09a:	b480      	push	{r7}
 800e09c:	b083      	sub	sp, #12
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2203      	movs	r2, #3
 800e0c8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e0ca:	2002      	movs	r0, #2
 800e0cc:	f7f6 f834 	bl	8004138 <HAL_Delay>
  
  return HAL_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0303 	and.w	r3, r3, #3
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e116:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e11c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e122:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	4313      	orrs	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68da      	ldr	r2, [r3, #12]
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <SDMMC_SendCommand+0x50>)
 800e130:	4013      	ands	r3, r2
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	431a      	orrs	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	fffff000 	.word	0xfffff000

0800e14c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	691b      	ldr	r3, [r3, #16]
 800e158:	b2db      	uxtb	r3, r3
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr

0800e166 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e166:	b480      	push	{r7}
 800e168:	b085      	sub	sp, #20
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	3314      	adds	r3, #20
 800e174:	461a      	mov	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	4413      	add	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
}  
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e1b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e1be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	431a      	orrs	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0

}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e1f2:	2310      	movs	r3, #16
 800e1f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1f6:	2340      	movs	r3, #64	; 0x40
 800e1f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e204:	f107 0308 	add.w	r3, r7, #8
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff ff74 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e210:	f241 3288 	movw	r2, #5000	; 0x1388
 800e214:	2110      	movs	r1, #16
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fa46 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e21e:	69fb      	ldr	r3, [r7, #28]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3720      	adds	r7, #32
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e236:	2311      	movs	r3, #17
 800e238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e23a:	2340      	movs	r3, #64	; 0x40
 800e23c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e23e:	2300      	movs	r3, #0
 800e240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e246:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e248:	f107 0308 	add.w	r3, r7, #8
 800e24c:	4619      	mov	r1, r3
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ff52 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e254:	f241 3288 	movw	r2, #5000	; 0x1388
 800e258:	2111      	movs	r1, #17
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 fa24 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e262:	69fb      	ldr	r3, [r7, #28]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e27a:	2312      	movs	r3, #18
 800e27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e27e:	2340      	movs	r3, #64	; 0x40
 800e280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e282:	2300      	movs	r3, #0
 800e284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e28c:	f107 0308 	add.w	r3, r7, #8
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff ff30 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e298:	f241 3288 	movw	r2, #5000	; 0x1388
 800e29c:	2112      	movs	r1, #18
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fa02 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3720      	adds	r7, #32
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e2be:	2318      	movs	r3, #24
 800e2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2c2:	2340      	movs	r3, #64	; 0x40
 800e2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2d0:	f107 0308 	add.w	r3, r7, #8
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff ff0e 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e0:	2118      	movs	r1, #24
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f9e0 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ea:	69fb      	ldr	r3, [r7, #28]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3720      	adds	r7, #32
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e302:	2319      	movs	r3, #25
 800e304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e306:	2340      	movs	r3, #64	; 0x40
 800e308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e30a:	2300      	movs	r3, #0
 800e30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e312:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e314:	f107 0308 	add.w	r3, r7, #8
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff feec 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e320:	f241 3288 	movw	r2, #5000	; 0x1388
 800e324:	2119      	movs	r1, #25
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f9be 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e32e:	69fb      	ldr	r3, [r7, #28]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3720      	adds	r7, #32
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e344:	230c      	movs	r3, #12
 800e346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e348:	2340      	movs	r3, #64	; 0x40
 800e34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e34c:	2300      	movs	r3, #0
 800e34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e356:	f107 0308 	add.w	r3, r7, #8
 800e35a:	4619      	mov	r1, r3
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7ff fecb 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e362:	4a05      	ldr	r2, [pc, #20]	; (800e378 <SDMMC_CmdStopTransfer+0x40>)
 800e364:	210c      	movs	r1, #12
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f99e 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e36e:	69fb      	ldr	r3, [r7, #28]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	05f5e100 	.word	0x05f5e100

0800e37c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08a      	sub	sp, #40	; 0x28
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e38c:	2307      	movs	r3, #7
 800e38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e390:	2340      	movs	r3, #64	; 0x40
 800e392:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e394:	2300      	movs	r3, #0
 800e396:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e39e:	f107 0310 	add.w	r3, r7, #16
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f7ff fea7 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3ae:	2107      	movs	r1, #7
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f000 f979 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e3b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3728      	adds	r7, #40	; 0x28
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b088      	sub	sp, #32
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3e0:	f107 0308 	add.w	r3, r7, #8
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7ff fe86 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f92f 	bl	800e650 <SDMMC_GetCmdError>
 800e3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3f4:	69fb      	ldr	r3, [r7, #28]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3720      	adds	r7, #32
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b088      	sub	sp, #32
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e406:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e40c:	2308      	movs	r3, #8
 800e40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e410:	2340      	movs	r3, #64	; 0x40
 800e412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e414:	2300      	movs	r3, #0
 800e416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff fe67 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fb26 	bl	800ea7c <SDMMC_GetCmdResp7>
 800e430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e432:	69fb      	ldr	r3, [r7, #28]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3720      	adds	r7, #32
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e44a:	2337      	movs	r3, #55	; 0x37
 800e44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e44e:	2340      	movs	r3, #64	; 0x40
 800e450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e45c:	f107 0308 	add.w	r3, r7, #8
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff fe48 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e468:	f241 3288 	movw	r2, #5000	; 0x1388
 800e46c:	2137      	movs	r1, #55	; 0x37
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f91a 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e476:	69fb      	ldr	r3, [r7, #28]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3720      	adds	r7, #32
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <SDMMC_CmdAppOperCommand+0x44>)
 800e48e:	4313      	orrs	r3, r2
 800e490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e492:	2329      	movs	r3, #41	; 0x29
 800e494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e496:	2340      	movs	r3, #64	; 0x40
 800e498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4a4:	f107 0308 	add.w	r3, r7, #8
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff fe24 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fa2f 	bl	800e914 <SDMMC_GetCmdResp3>
 800e4b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3720      	adds	r7, #32
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	80100000 	.word	0x80100000

0800e4c8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e4d6:	2306      	movs	r3, #6
 800e4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4e8:	f107 0308 	add.w	r3, r7, #8
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fe02 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4f8:	2106      	movs	r1, #6
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f8d4 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e502:	69fb      	ldr	r3, [r7, #28]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e514:	2300      	movs	r3, #0
 800e516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e518:	2333      	movs	r3, #51	; 0x33
 800e51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e51c:	2340      	movs	r3, #64	; 0x40
 800e51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e520:	2300      	movs	r3, #0
 800e522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e52a:	f107 0308 	add.w	r3, r7, #8
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff fde1 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e536:	f241 3288 	movw	r2, #5000	; 0x1388
 800e53a:	2133      	movs	r1, #51	; 0x33
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f8b3 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e544:	69fb      	ldr	r3, [r7, #28]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3720      	adds	r7, #32
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b088      	sub	sp, #32
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e556:	2300      	movs	r3, #0
 800e558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e55a:	2302      	movs	r3, #2
 800e55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e55e:	23c0      	movs	r3, #192	; 0xc0
 800e560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e562:	2300      	movs	r3, #0
 800e564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e56a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e56c:	f107 0308 	add.w	r3, r7, #8
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff fdc0 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f983 	bl	800e884 <SDMMC_GetCmdResp2>
 800e57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e580:	69fb      	ldr	r3, [r7, #28]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b088      	sub	sp, #32
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e598:	2309      	movs	r3, #9
 800e59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e59c:	23c0      	movs	r3, #192	; 0xc0
 800e59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7ff fda1 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f964 	bl	800e884 <SDMMC_GetCmdResp2>
 800e5bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5be:	69fb      	ldr	r3, [r7, #28]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3720      	adds	r7, #32
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5da:	2340      	movs	r3, #64	; 0x40
 800e5dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5e8:	f107 0308 	add.w	r3, r7, #8
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fd82 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	2103      	movs	r1, #3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f9c9 	bl	800e990 <SDMMC_GetCmdResp6>
 800e5fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e600:	69fb      	ldr	r3, [r7, #28]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3720      	adds	r7, #32
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b088      	sub	sp, #32
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e618:	230d      	movs	r3, #13
 800e61a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e620:	2300      	movs	r3, #0
 800e622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e62a:	f107 0308 	add.w	r3, r7, #8
 800e62e:	4619      	mov	r1, r3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff fd61 	bl	800e0f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e636:	f241 3288 	movw	r2, #5000	; 0x1388
 800e63a:	210d      	movs	r1, #13
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 f833 	bl	800e6a8 <SDMMC_GetCmdResp1>
 800e642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e644:	69fb      	ldr	r3, [r7, #28]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3720      	adds	r7, #32
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
	...

0800e650 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e658:	4b11      	ldr	r3, [pc, #68]	; (800e6a0 <SDMMC_GetCmdError+0x50>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a11      	ldr	r2, [pc, #68]	; (800e6a4 <SDMMC_GetCmdError+0x54>)
 800e65e:	fba2 2303 	umull	r2, r3, r2, r3
 800e662:	0a5b      	lsrs	r3, r3, #9
 800e664:	f241 3288 	movw	r2, #5000	; 0x1388
 800e668:	fb02 f303 	mul.w	r3, r2, r3
 800e66c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	1e5a      	subs	r2, r3, #1
 800e672:	60fa      	str	r2, [r7, #12]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d102      	bne.n	800e67e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e67c:	e009      	b.n	800e692 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0f1      	beq.n	800e66e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	22c5      	movs	r2, #197	; 0xc5
 800e68e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	20000000 	.word	0x20000000
 800e6a4:	10624dd3 	.word	0x10624dd3

0800e6a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6b6:	4b70      	ldr	r3, [pc, #448]	; (800e878 <SDMMC_GetCmdResp1+0x1d0>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a70      	ldr	r2, [pc, #448]	; (800e87c <SDMMC_GetCmdResp1+0x1d4>)
 800e6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c0:	0a5a      	lsrs	r2, r3, #9
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	fb02 f303 	mul.w	r3, r2, r3
 800e6c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	61fa      	str	r2, [r7, #28]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d102      	bne.n	800e6da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6d8:	e0c9      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0ef      	beq.n	800e6ca <SDMMC_GetCmdResp1+0x22>
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1ea      	bne.n	800e6ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2204      	movs	r2, #4
 800e704:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e706:	2304      	movs	r3, #4
 800e708:	e0b1      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	2b00      	cmp	r3, #0
 800e714:	d004      	beq.n	800e720 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2201      	movs	r2, #1
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e71c:	2301      	movs	r3, #1
 800e71e:	e0a6      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	22c5      	movs	r2, #197	; 0xc5
 800e724:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7ff fd10 	bl	800e14c <SDMMC_GetCommandResponse>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461a      	mov	r2, r3
 800e730:	7afb      	ldrb	r3, [r7, #11]
 800e732:	4293      	cmp	r3, r2
 800e734:	d001      	beq.n	800e73a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e736:	2301      	movs	r3, #1
 800e738:	e099      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e73a:	2100      	movs	r1, #0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f7ff fd12 	bl	800e166 <SDMMC_GetResponse>
 800e742:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	4b4e      	ldr	r3, [pc, #312]	; (800e880 <SDMMC_GetCmdResp1+0x1d8>)
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d101      	bne.n	800e752 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e74e:	2300      	movs	r3, #0
 800e750:	e08d      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2b00      	cmp	r3, #0
 800e756:	da02      	bge.n	800e75e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e75c:	e087      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e768:	2340      	movs	r3, #64	; 0x40
 800e76a:	e080      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e776:	2380      	movs	r3, #128	; 0x80
 800e778:	e079      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e784:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e788:	e071      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e794:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e798:	e069      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e7a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7a8:	e061      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e7b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7b8:	e059      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7c8:	e051      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7d8:	e049      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d002      	beq.n	800e7ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e7e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e7e8:	e041      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e7f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7f8:	e039      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e808:	e031      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e818:	e029      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d002      	beq.n	800e82a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e824:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e828:	e021      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e834:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e838:	e019      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e844:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e848:	e011      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e854:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e858:	e009      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	f003 0308 	and.w	r3, r3, #8
 800e860:	2b00      	cmp	r3, #0
 800e862:	d002      	beq.n	800e86a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e864:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e868:	e001      	b.n	800e86e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e86a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3720      	adds	r7, #32
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20000000 	.word	0x20000000
 800e87c:	10624dd3 	.word	0x10624dd3
 800e880:	fdffe008 	.word	0xfdffe008

0800e884 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e88c:	4b1f      	ldr	r3, [pc, #124]	; (800e90c <SDMMC_GetCmdResp2+0x88>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a1f      	ldr	r2, [pc, #124]	; (800e910 <SDMMC_GetCmdResp2+0x8c>)
 800e892:	fba2 2303 	umull	r2, r3, r2, r3
 800e896:	0a5b      	lsrs	r3, r3, #9
 800e898:	f241 3288 	movw	r2, #5000	; 0x1388
 800e89c:	fb02 f303 	mul.w	r3, r2, r3
 800e8a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	1e5a      	subs	r2, r3, #1
 800e8a6:	60fa      	str	r2, [r7, #12]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d102      	bne.n	800e8b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8b0:	e026      	b.n	800e900 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0ef      	beq.n	800e8a2 <SDMMC_GetCmdResp2+0x1e>
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1ea      	bne.n	800e8a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d004      	beq.n	800e8e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2204      	movs	r2, #4
 800e8dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8de:	2304      	movs	r3, #4
 800e8e0:	e00e      	b.n	800e900 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d004      	beq.n	800e8f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e003      	b.n	800e900 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	22c5      	movs	r2, #197	; 0xc5
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3714      	adds	r7, #20
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	20000000 	.word	0x20000000
 800e910:	10624dd3 	.word	0x10624dd3

0800e914 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e91c:	4b1a      	ldr	r3, [pc, #104]	; (800e988 <SDMMC_GetCmdResp3+0x74>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a1a      	ldr	r2, [pc, #104]	; (800e98c <SDMMC_GetCmdResp3+0x78>)
 800e922:	fba2 2303 	umull	r2, r3, r2, r3
 800e926:	0a5b      	lsrs	r3, r3, #9
 800e928:	f241 3288 	movw	r2, #5000	; 0x1388
 800e92c:	fb02 f303 	mul.w	r3, r2, r3
 800e930:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	1e5a      	subs	r2, r3, #1
 800e936:	60fa      	str	r2, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e93c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e940:	e01b      	b.n	800e97a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e946:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0ef      	beq.n	800e932 <SDMMC_GetCmdResp3+0x1e>
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1ea      	bne.n	800e932 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e960:	f003 0304 	and.w	r3, r3, #4
 800e964:	2b00      	cmp	r3, #0
 800e966:	d004      	beq.n	800e972 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2204      	movs	r2, #4
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e96e:	2304      	movs	r3, #4
 800e970:	e003      	b.n	800e97a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	22c5      	movs	r2, #197	; 0xc5
 800e976:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	20000000 	.word	0x20000000
 800e98c:	10624dd3 	.word	0x10624dd3

0800e990 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	460b      	mov	r3, r1
 800e99a:	607a      	str	r2, [r7, #4]
 800e99c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e99e:	4b35      	ldr	r3, [pc, #212]	; (800ea74 <SDMMC_GetCmdResp6+0xe4>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a35      	ldr	r2, [pc, #212]	; (800ea78 <SDMMC_GetCmdResp6+0xe8>)
 800e9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a8:	0a5b      	lsrs	r3, r3, #9
 800e9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ae:	fb02 f303 	mul.w	r3, r2, r3
 800e9b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	1e5a      	subs	r2, r3, #1
 800e9b8:	61fa      	str	r2, [r7, #28]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d102      	bne.n	800e9c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9c2:	e052      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d0ef      	beq.n	800e9b4 <SDMMC_GetCmdResp6+0x24>
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1ea      	bne.n	800e9b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e2:	f003 0304 	and.w	r3, r3, #4
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d004      	beq.n	800e9f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2204      	movs	r2, #4
 800e9ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9f0:	2304      	movs	r3, #4
 800e9f2:	e03a      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d004      	beq.n	800ea0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2201      	movs	r2, #1
 800ea04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e02f      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7ff fb9e 	bl	800e14c <SDMMC_GetCommandResponse>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
 800ea14:	7afb      	ldrb	r3, [r7, #11]
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d001      	beq.n	800ea1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e025      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	22c5      	movs	r2, #197	; 0xc5
 800ea22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ea24:	2100      	movs	r1, #0
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f7ff fb9d 	bl	800e166 <SDMMC_GetResponse>
 800ea2c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d106      	bne.n	800ea46 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	0c1b      	lsrs	r3, r3, #16
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	e011      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea54:	e009      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea64:	e001      	b.n	800ea6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3720      	adds	r7, #32
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20000000 	.word	0x20000000
 800ea78:	10624dd3 	.word	0x10624dd3

0800ea7c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea84:	4b22      	ldr	r3, [pc, #136]	; (800eb10 <SDMMC_GetCmdResp7+0x94>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a22      	ldr	r2, [pc, #136]	; (800eb14 <SDMMC_GetCmdResp7+0x98>)
 800ea8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea8e:	0a5b      	lsrs	r3, r3, #9
 800ea90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea94:	fb02 f303 	mul.w	r3, r2, r3
 800ea98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	60fa      	str	r2, [r7, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eaa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eaa8:	e02c      	b.n	800eb04 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0ef      	beq.n	800ea9a <SDMMC_GetCmdResp7+0x1e>
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1ea      	bne.n	800ea9a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac8:	f003 0304 	and.w	r3, r3, #4
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d004      	beq.n	800eada <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2204      	movs	r2, #4
 800ead4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ead6:	2304      	movs	r3, #4
 800ead8:	e014      	b.n	800eb04 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2201      	movs	r2, #1
 800eaea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e009      	b.n	800eb04 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2240      	movs	r2, #64	; 0x40
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eb02:	2300      	movs	r3, #0
  
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	20000000 	.word	0x20000000
 800eb14:	10624dd3 	.word	0x10624dd3

0800eb18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f043 0201 	orr.w	r2, r3, #1
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b083      	sub	sp, #12
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f023 0201 	bic.w	r2, r3, #1
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800eb66:	2300      	movs	r3, #0
 800eb68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	019b      	lsls	r3, r3, #6
 800eb6e:	f043 0220 	orr.w	r2, r3, #32
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	4a09      	ldr	r2, [pc, #36]	; (800eba4 <USB_FlushTxFifo+0x48>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d901      	bls.n	800eb88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800eb84:	2303      	movs	r3, #3
 800eb86:	e006      	b.n	800eb96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	f003 0320 	and.w	r3, r3, #32
 800eb90:	2b20      	cmp	r3, #32
 800eb92:	d0f0      	beq.n	800eb76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	00030d40 	.word	0x00030d40

0800eba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4a09      	ldr	r2, [pc, #36]	; (800ebe8 <USB_FlushRxFifo+0x40>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d901      	bls.n	800ebcc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ebc8:	2303      	movs	r3, #3
 800ebca:	e006      	b.n	800ebda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	f003 0310 	and.w	r3, r3, #16
 800ebd4:	2b10      	cmp	r3, #16
 800ebd6:	d0f0      	beq.n	800ebba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3714      	adds	r7, #20
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	00030d40 	.word	0x00030d40

0800ebec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b089      	sub	sp, #36	; 0x24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	71fb      	strb	r3, [r7, #7]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ec0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d11a      	bne.n	800ec48 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ec12:	88bb      	ldrh	r3, [r7, #4]
 800ec14:	3303      	adds	r3, #3
 800ec16:	089b      	lsrs	r3, r3, #2
 800ec18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	61bb      	str	r3, [r7, #24]
 800ec1e:	e00f      	b.n	800ec40 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ec20:	79fb      	ldrb	r3, [r7, #7]
 800ec22:	031a      	lsls	r2, r3, #12
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	4413      	add	r3, r2
 800ec28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	3304      	adds	r3, #4
 800ec38:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	69ba      	ldr	r2, [r7, #24]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d3eb      	bcc.n	800ec20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3724      	adds	r7, #36	; 0x24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b089      	sub	sp, #36	; 0x24
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	60f8      	str	r0, [r7, #12]
 800ec5e:	60b9      	str	r1, [r7, #8]
 800ec60:	4613      	mov	r3, r2
 800ec62:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ec6c:	88fb      	ldrh	r3, [r7, #6]
 800ec6e:	3303      	adds	r3, #3
 800ec70:	089b      	lsrs	r3, r3, #2
 800ec72:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ec74:	2300      	movs	r3, #0
 800ec76:	61bb      	str	r3, [r7, #24]
 800ec78:	e00b      	b.n	800ec92 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	601a      	str	r2, [r3, #0]
    pDest++;
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	3304      	adds	r3, #4
 800ec8a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	61bb      	str	r3, [r7, #24]
 800ec92:	69ba      	ldr	r2, [r7, #24]
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d3ef      	bcc.n	800ec7a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ec9a:	69fb      	ldr	r3, [r7, #28]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3724      	adds	r7, #36	; 0x24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	699b      	ldr	r3, [r3, #24]
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	4013      	ands	r3, r2
 800ecbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr

0800ecce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	f003 0301 	and.w	r3, r3, #1
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ed08:	f023 0303 	bic.w	r3, r3, #3
 800ed0c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	78fb      	ldrb	r3, [r7, #3]
 800ed18:	f003 0303 	and.w	r3, r3, #3
 800ed1c:	68f9      	ldr	r1, [r7, #12]
 800ed1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ed22:	4313      	orrs	r3, r2
 800ed24:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ed26:	78fb      	ldrb	r3, [r7, #3]
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d107      	bne.n	800ed3c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed32:	461a      	mov	r2, r3
 800ed34:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ed38:	6053      	str	r3, [r2, #4]
 800ed3a:	e009      	b.n	800ed50 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d106      	bne.n	800ed50 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed48:	461a      	mov	r2, r3
 800ed4a:	f241 7370 	movw	r3, #6000	; 0x1770
 800ed4e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ed7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ed88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed8c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ed8e:	2064      	movs	r0, #100	; 0x64
 800ed90:	f7f5 f9d2 	bl	8004138 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ed9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eda0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800eda2:	200a      	movs	r0, #10
 800eda4:	f7f5 f9c8 	bl	8004138 <HAL_Delay>

  return HAL_OK;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b085      	sub	sp, #20
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	460b      	mov	r3, r1
 800edbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800edd6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d109      	bne.n	800edf6 <USB_DriveVbus+0x44>
 800ede2:	78fb      	ldrb	r3, [r7, #3]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d106      	bne.n	800edf6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800edf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800edf4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800edfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee00:	d109      	bne.n	800ee16 <USB_DriveVbus+0x64>
 800ee02:	78fb      	ldrb	r3, [r7, #3]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d106      	bne.n	800ee16 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ee10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee14:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ee30:	2300      	movs	r3, #0
 800ee32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	0c5b      	lsrs	r3, r3, #17
 800ee42:	f003 0303 	and.w	r3, r3, #3
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
	...

0800ee54 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b088      	sub	sp, #32
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	461a      	mov	r2, r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	70fb      	strb	r3, [r7, #3]
 800ee66:	460b      	mov	r3, r1
 800ee68:	70bb      	strb	r3, [r7, #2]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	015a      	lsls	r2, r3, #5
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee82:	461a      	mov	r2, r3
 800ee84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ee8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d87e      	bhi.n	800ef90 <USB_HC_Init+0x13c>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <USB_HC_Init+0x44>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800eea9 	.word	0x0800eea9
 800ee9c:	0800ef53 	.word	0x0800ef53
 800eea0:	0800eea9 	.word	0x0800eea9
 800eea4:	0800ef15 	.word	0x0800ef15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	f240 439d 	movw	r3, #1181	; 0x49d
 800eeba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800eebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	da10      	bge.n	800eee6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	015a      	lsls	r2, r3, #5
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	4413      	add	r3, r2
 800eecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	78fa      	ldrb	r2, [r7, #3]
 800eed4:	0151      	lsls	r1, r2, #5
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	440a      	add	r2, r1
 800eeda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eee2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800eee4:	e057      	b.n	800ef96 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d051      	beq.n	800ef96 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	015a      	lsls	r2, r3, #5
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	4413      	add	r3, r2
 800eefa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	78fa      	ldrb	r2, [r7, #3]
 800ef02:	0151      	lsls	r1, r2, #5
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	440a      	add	r2, r1
 800ef08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ef10:	60d3      	str	r3, [r2, #12]
      break;
 800ef12:	e040      	b.n	800ef96 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef14:	78fb      	ldrb	r3, [r7, #3]
 800ef16:	015a      	lsls	r2, r3, #5
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef20:	461a      	mov	r2, r3
 800ef22:	f240 639d 	movw	r3, #1693	; 0x69d
 800ef26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ef28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	da34      	bge.n	800ef9a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ef30:	78fb      	ldrb	r3, [r7, #3]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	78fa      	ldrb	r2, [r7, #3]
 800ef40:	0151      	lsls	r1, r2, #5
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	440a      	add	r2, r1
 800ef46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ef50:	e023      	b.n	800ef9a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef52:	78fb      	ldrb	r3, [r7, #3]
 800ef54:	015a      	lsls	r2, r3, #5
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	4413      	add	r3, r2
 800ef5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef5e:	461a      	mov	r2, r3
 800ef60:	f240 2325 	movw	r3, #549	; 0x225
 800ef64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ef66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	da17      	bge.n	800ef9e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ef6e:	78fb      	ldrb	r3, [r7, #3]
 800ef70:	015a      	lsls	r2, r3, #5
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	4413      	add	r3, r2
 800ef76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	0151      	lsls	r1, r2, #5
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	440a      	add	r2, r1
 800ef84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ef8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ef8e:	e006      	b.n	800ef9e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	77fb      	strb	r3, [r7, #31]
      break;
 800ef94:	e004      	b.n	800efa0 <USB_HC_Init+0x14c>
      break;
 800ef96:	bf00      	nop
 800ef98:	e002      	b.n	800efa0 <USB_HC_Init+0x14c>
      break;
 800ef9a:	bf00      	nop
 800ef9c:	e000      	b.n	800efa0 <USB_HC_Init+0x14c>
      break;
 800ef9e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800efa6:	699a      	ldr	r2, [r3, #24]
 800efa8:	78fb      	ldrb	r3, [r7, #3]
 800efaa:	f003 030f 	and.w	r3, r3, #15
 800efae:	2101      	movs	r1, #1
 800efb0:	fa01 f303 	lsl.w	r3, r1, r3
 800efb4:	6939      	ldr	r1, [r7, #16]
 800efb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800efba:	4313      	orrs	r3, r2
 800efbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800efca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	da03      	bge.n	800efda <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800efd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efd6:	61bb      	str	r3, [r7, #24]
 800efd8:	e001      	b.n	800efde <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800efda:	2300      	movs	r3, #0
 800efdc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7ff ff20 	bl	800ee24 <USB_GetHostSpeed>
 800efe4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800efe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800efea:	2b02      	cmp	r3, #2
 800efec:	d106      	bne.n	800effc <USB_HC_Init+0x1a8>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d003      	beq.n	800effc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eff8:	617b      	str	r3, [r7, #20]
 800effa:	e001      	b.n	800f000 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800effc:	2300      	movs	r3, #0
 800effe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f000:	787b      	ldrb	r3, [r7, #1]
 800f002:	059b      	lsls	r3, r3, #22
 800f004:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f008:	78bb      	ldrb	r3, [r7, #2]
 800f00a:	02db      	lsls	r3, r3, #11
 800f00c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f010:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f016:	049b      	lsls	r3, r3, #18
 800f018:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f01c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f01e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f020:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f024:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	0159      	lsls	r1, r3, #5
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	440b      	add	r3, r1
 800f032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f036:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f03c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800f03e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f042:	2b03      	cmp	r3, #3
 800f044:	d10f      	bne.n	800f066 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800f046:	78fb      	ldrb	r3, [r7, #3]
 800f048:	015a      	lsls	r2, r3, #5
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	4413      	add	r3, r2
 800f04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	78fa      	ldrb	r2, [r7, #3]
 800f056:	0151      	lsls	r1, r2, #5
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	440a      	add	r2, r1
 800f05c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f064:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f066:	7ffb      	ldrb	r3, [r7, #31]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3720      	adds	r7, #32
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08c      	sub	sp, #48	; 0x30
 800f074:	af02      	add	r7, sp, #8
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	4613      	mov	r3, r2
 800f07c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	785b      	ldrb	r3, [r3, #1]
 800f086:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800f088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f08c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f096:	2b00      	cmp	r3, #0
 800f098:	d02d      	beq.n	800f0f6 <USB_HC_StartXfer+0x86>
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	791b      	ldrb	r3, [r3, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d129      	bne.n	800f0f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d117      	bne.n	800f0d8 <USB_HC_StartXfer+0x68>
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	79db      	ldrb	r3, [r3, #7]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <USB_HC_StartXfer+0x48>
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	79db      	ldrb	r3, [r3, #7]
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d10f      	bne.n	800f0d8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	6a3b      	ldr	r3, [r7, #32]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	0151      	lsls	r1, r2, #5
 800f0ca:	6a3a      	ldr	r2, [r7, #32]
 800f0cc:	440a      	add	r2, r1
 800f0ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0d6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10b      	bne.n	800f0f6 <USB_HC_StartXfer+0x86>
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	795b      	ldrb	r3, [r3, #5]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d107      	bne.n	800f0f6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	785b      	ldrb	r3, [r3, #1]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f000 fa2f 	bl	800f550 <USB_DoPing>
      return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e0f8      	b.n	800f2e8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	695b      	ldr	r3, [r3, #20]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d018      	beq.n	800f130 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	68ba      	ldr	r2, [r7, #8]
 800f104:	8912      	ldrh	r2, [r2, #8]
 800f106:	4413      	add	r3, r2
 800f108:	3b01      	subs	r3, #1
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	8912      	ldrh	r2, [r2, #8]
 800f10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f112:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800f114:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f116:	8b7b      	ldrh	r3, [r7, #26]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d90b      	bls.n	800f134 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800f11c:	8b7b      	ldrh	r3, [r7, #26]
 800f11e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	8912      	ldrh	r2, [r2, #8]
 800f126:	fb02 f203 	mul.w	r2, r2, r3
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	611a      	str	r2, [r3, #16]
 800f12e:	e001      	b.n	800f134 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800f130:	2301      	movs	r3, #1
 800f132:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	78db      	ldrb	r3, [r3, #3]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d007      	beq.n	800f14c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f13c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	8912      	ldrh	r2, [r2, #8]
 800f142:	fb02 f203 	mul.w	r2, r2, r3
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	611a      	str	r2, [r3, #16]
 800f14a:	e003      	b.n	800f154 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	695a      	ldr	r2, [r3, #20]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f15c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f15e:	04d9      	lsls	r1, r3, #19
 800f160:	4b63      	ldr	r3, [pc, #396]	; (800f2f0 <USB_HC_StartXfer+0x280>)
 800f162:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f164:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	7a9b      	ldrb	r3, [r3, #10]
 800f16a:	075b      	lsls	r3, r3, #29
 800f16c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f170:	69f9      	ldr	r1, [r7, #28]
 800f172:	0148      	lsls	r0, r1, #5
 800f174:	6a39      	ldr	r1, [r7, #32]
 800f176:	4401      	add	r1, r0
 800f178:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f17c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f17e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f180:	79fb      	ldrb	r3, [r7, #7]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d009      	beq.n	800f19a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	68d9      	ldr	r1, [r3, #12]
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	015a      	lsls	r2, r3, #5
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	4413      	add	r3, r2
 800f192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f196:	460a      	mov	r2, r1
 800f198:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	f003 0301 	and.w	r3, r3, #1
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bf0c      	ite	eq
 800f1aa:	2301      	moveq	r3, #1
 800f1ac:	2300      	movne	r3, #0
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	015a      	lsls	r2, r3, #5
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	69fa      	ldr	r2, [r7, #28]
 800f1c2:	0151      	lsls	r1, r2, #5
 800f1c4:	6a3a      	ldr	r2, [r7, #32]
 800f1c6:	440a      	add	r2, r1
 800f1c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f1cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f1d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	015a      	lsls	r2, r3, #5
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	4413      	add	r3, r2
 800f1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	7e7b      	ldrb	r3, [r7, #25]
 800f1e2:	075b      	lsls	r3, r3, #29
 800f1e4:	69f9      	ldr	r1, [r7, #28]
 800f1e6:	0148      	lsls	r0, r1, #5
 800f1e8:	6a39      	ldr	r1, [r7, #32]
 800f1ea:	4401      	add	r1, r0
 800f1ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	6a3b      	ldr	r3, [r7, #32]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f20a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	78db      	ldrb	r3, [r3, #3]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d004      	beq.n	800f21e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f21a:	613b      	str	r3, [r7, #16]
 800f21c:	e003      	b.n	800f226 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f224:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f22c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	015a      	lsls	r2, r3, #5
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	4413      	add	r3, r2
 800f236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f23a:	461a      	mov	r2, r3
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f240:	79fb      	ldrb	r3, [r7, #7]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	e04e      	b.n	800f2e8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	78db      	ldrb	r3, [r3, #3]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d149      	bne.n	800f2e6 <USB_HC_StartXfer+0x276>
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d045      	beq.n	800f2e6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	79db      	ldrb	r3, [r3, #7]
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d830      	bhi.n	800f2c4 <USB_HC_StartXfer+0x254>
 800f262:	a201      	add	r2, pc, #4	; (adr r2, 800f268 <USB_HC_StartXfer+0x1f8>)
 800f264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f268:	0800f279 	.word	0x0800f279
 800f26c:	0800f29d 	.word	0x0800f29d
 800f270:	0800f279 	.word	0x0800f279
 800f274:	0800f29d 	.word	0x0800f29d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	695b      	ldr	r3, [r3, #20]
 800f27c:	3303      	adds	r3, #3
 800f27e:	089b      	lsrs	r3, r3, #2
 800f280:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f282:	8afa      	ldrh	r2, [r7, #22]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f288:	b29b      	uxth	r3, r3
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d91c      	bls.n	800f2c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	699b      	ldr	r3, [r3, #24]
 800f292:	f043 0220 	orr.w	r2, r3, #32
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	619a      	str	r2, [r3, #24]
        }
        break;
 800f29a:	e015      	b.n	800f2c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	3303      	adds	r3, #3
 800f2a2:	089b      	lsrs	r3, r3, #2
 800f2a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f2a6:	8afa      	ldrh	r2, [r7, #22]
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d90a      	bls.n	800f2cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	699b      	ldr	r3, [r3, #24]
 800f2ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	619a      	str	r2, [r3, #24]
        }
        break;
 800f2c2:	e003      	b.n	800f2cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800f2c4:	bf00      	nop
 800f2c6:	e002      	b.n	800f2ce <USB_HC_StartXfer+0x25e>
        break;
 800f2c8:	bf00      	nop
 800f2ca:	e000      	b.n	800f2ce <USB_HC_StartXfer+0x25e>
        break;
 800f2cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	68d9      	ldr	r1, [r3, #12]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	785a      	ldrb	r2, [r3, #1]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	2000      	movs	r0, #0
 800f2de:	9000      	str	r0, [sp, #0]
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f7ff fc83 	bl	800ebec <USB_WritePacket>
  }

  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3728      	adds	r7, #40	; 0x28
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	1ff80000 	.word	0x1ff80000

0800f2f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	b29b      	uxth	r3, r3
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f316:	b480      	push	{r7}
 800f318:	b089      	sub	sp, #36	; 0x24
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
 800f31e:	460b      	mov	r3, r1
 800f320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800f326:	78fb      	ldrb	r3, [r7, #3]
 800f328:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800f32a:	2300      	movs	r3, #0
 800f32c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	015a      	lsls	r2, r3, #5
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	4413      	add	r3, r2
 800f336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	0c9b      	lsrs	r3, r3, #18
 800f33e:	f003 0303 	and.w	r3, r3, #3
 800f342:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	015a      	lsls	r2, r3, #5
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	4413      	add	r3, r2
 800f34c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	0fdb      	lsrs	r3, r3, #31
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	f003 0320 	and.w	r3, r3, #32
 800f362:	2b20      	cmp	r3, #32
 800f364:	d104      	bne.n	800f370 <USB_HC_Halt+0x5a>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	e0e8      	b.n	800f542 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d002      	beq.n	800f37c <USB_HC_Halt+0x66>
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d173      	bne.n	800f464 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	015a      	lsls	r2, r3, #5
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	4413      	add	r3, r2
 800f384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	0151      	lsls	r1, r2, #5
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	440a      	add	r2, r1
 800f392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f39a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	f003 0320 	and.w	r3, r3, #32
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f040 80cb 	bne.w	800f540 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d143      	bne.n	800f43e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	015a      	lsls	r2, r3, #5
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	4413      	add	r3, r2
 800f3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	0151      	lsls	r1, r2, #5
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	440a      	add	r2, r1
 800f3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	015a      	lsls	r2, r3, #5
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	4413      	add	r3, r2
 800f3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	0151      	lsls	r1, r2, #5
 800f3e8:	69ba      	ldr	r2, [r7, #24]
 800f3ea:	440a      	add	r2, r1
 800f3ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f3f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	015a      	lsls	r2, r3, #5
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	0151      	lsls	r1, r2, #5
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	440a      	add	r2, r1
 800f40c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f414:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	3301      	adds	r3, #1
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f422:	d81d      	bhi.n	800f460 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f43a:	d0ec      	beq.n	800f416 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f43c:	e080      	b.n	800f540 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	015a      	lsls	r2, r3, #5
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	4413      	add	r3, r2
 800f446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	697a      	ldr	r2, [r7, #20]
 800f44e:	0151      	lsls	r1, r2, #5
 800f450:	69ba      	ldr	r2, [r7, #24]
 800f452:	440a      	add	r2, r1
 800f454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f45c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f45e:	e06f      	b.n	800f540 <USB_HC_Halt+0x22a>
            break;
 800f460:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f462:	e06d      	b.n	800f540 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	015a      	lsls	r2, r3, #5
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	4413      	add	r3, r2
 800f46c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	697a      	ldr	r2, [r7, #20]
 800f474:	0151      	lsls	r1, r2, #5
 800f476:	69ba      	ldr	r2, [r7, #24]
 800f478:	440a      	add	r2, r1
 800f47a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f47e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f482:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f490:	2b00      	cmp	r3, #0
 800f492:	d143      	bne.n	800f51c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	015a      	lsls	r2, r3, #5
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	4413      	add	r3, r2
 800f49c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	0151      	lsls	r1, r2, #5
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	440a      	add	r2, r1
 800f4aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f4ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	015a      	lsls	r2, r3, #5
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	0151      	lsls	r1, r2, #5
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	440a      	add	r2, r1
 800f4ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f4ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	015a      	lsls	r2, r3, #5
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	4413      	add	r3, r2
 800f4dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	0151      	lsls	r1, r2, #5
 800f4e6:	69ba      	ldr	r2, [r7, #24]
 800f4e8:	440a      	add	r2, r1
 800f4ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f4ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f4f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f500:	d81d      	bhi.n	800f53e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f518:	d0ec      	beq.n	800f4f4 <USB_HC_Halt+0x1de>
 800f51a:	e011      	b.n	800f540 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	015a      	lsls	r2, r3, #5
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	4413      	add	r3, r2
 800f524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	0151      	lsls	r1, r2, #5
 800f52e:	69ba      	ldr	r2, [r7, #24]
 800f530:	440a      	add	r2, r1
 800f532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f53a:	6013      	str	r3, [r2, #0]
 800f53c:	e000      	b.n	800f540 <USB_HC_Halt+0x22a>
          break;
 800f53e:	bf00      	nop
    }
  }

  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3724      	adds	r7, #36	; 0x24
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
	...

0800f550 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f550:	b480      	push	{r7}
 800f552:	b087      	sub	sp, #28
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f560:	78fb      	ldrb	r3, [r7, #3]
 800f562:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f564:	2301      	movs	r3, #1
 800f566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	04da      	lsls	r2, r3, #19
 800f56c:	4b15      	ldr	r3, [pc, #84]	; (800f5c4 <USB_DoPing+0x74>)
 800f56e:	4013      	ands	r3, r2
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	0151      	lsls	r1, r2, #5
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	440a      	add	r2, r1
 800f578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f580:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	015a      	lsls	r2, r3, #5
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	4413      	add	r3, r2
 800f58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f598:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f5a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	015a      	lsls	r2, r3, #5
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	1ff80000 	.word	0x1ff80000

0800f5c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff faae 	bl	800eb3a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800f5de:	2110      	movs	r1, #16
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff fabb 	bl	800eb5c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fade 	bl	800eba8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	613b      	str	r3, [r7, #16]
 800f5f0:	e01f      	b.n	800f632 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	015a      	lsls	r2, r3, #5
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f608:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f610:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f618:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	015a      	lsls	r2, r3, #5
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	4413      	add	r3, r2
 800f622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f626:	461a      	mov	r2, r3
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	3301      	adds	r3, #1
 800f630:	613b      	str	r3, [r7, #16]
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	2b0f      	cmp	r3, #15
 800f636:	d9dc      	bls.n	800f5f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f638:	2300      	movs	r3, #0
 800f63a:	613b      	str	r3, [r7, #16]
 800f63c:	e034      	b.n	800f6a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	015a      	lsls	r2, r3, #5
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	4413      	add	r3, r2
 800f646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f654:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f65c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f664:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f672:	461a      	mov	r2, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	3301      	adds	r3, #1
 800f67c:	617b      	str	r3, [r7, #20]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f684:	d80c      	bhi.n	800f6a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	015a      	lsls	r2, r3, #5
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4413      	add	r3, r2
 800f68e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f69c:	d0ec      	beq.n	800f678 <USB_StopHost+0xb0>
 800f69e:	e000      	b.n	800f6a2 <USB_StopHost+0xda>
        break;
 800f6a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	613b      	str	r3, [r7, #16]
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	2b0f      	cmp	r3, #15
 800f6ac:	d9c7      	bls.n	800f63e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff fa27 	bl	800eb18 <USB_EnableGlobalInt>

  return HAL_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f6d8:	4904      	ldr	r1, [pc, #16]	; (800f6ec <MX_FATFS_Init+0x18>)
 800f6da:	4805      	ldr	r0, [pc, #20]	; (800f6f0 <MX_FATFS_Init+0x1c>)
 800f6dc:	f001 fbf2 	bl	8010ec4 <FATFS_LinkDriver>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	4b03      	ldr	r3, [pc, #12]	; (800f6f4 <MX_FATFS_Init+0x20>)
 800f6e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f6e8:	bf00      	nop
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20040864 	.word	0x20040864
 800f6f0:	08015d24 	.word	0x08015d24
 800f6f4:	20040860 	.word	0x20040860

0800f6f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f702:	f000 f879 	bl	800f7f8 <BSP_SD_IsDetected>
 800f706:	4603      	mov	r3, r0
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d001      	beq.n	800f710 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f70c:	2302      	movs	r3, #2
 800f70e:	e012      	b.n	800f736 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f710:	480b      	ldr	r0, [pc, #44]	; (800f740 <BSP_SD_Init+0x48>)
 800f712:	f7fb fb59 	bl	800adc8 <HAL_SD_Init>
 800f716:	4603      	mov	r3, r0
 800f718:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f71a:	79fb      	ldrb	r3, [r7, #7]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d109      	bne.n	800f734 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f724:	4806      	ldr	r0, [pc, #24]	; (800f740 <BSP_SD_Init+0x48>)
 800f726:	f7fc f939 	bl	800b99c <HAL_SD_ConfigWideBusOperation>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d001      	beq.n	800f734 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f734:	79fb      	ldrb	r3, [r7, #7]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20000684 	.word	0x20000684

0800f744 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	4806      	ldr	r0, [pc, #24]	; (800f77c <BSP_SD_ReadBlocks+0x38>)
 800f762:	f7fb fbe7 	bl	800af34 <HAL_SD_ReadBlocks>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3718      	adds	r7, #24
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20000684 	.word	0x20000684

0800f780 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b088      	sub	sp, #32
 800f784:	af02      	add	r7, sp, #8
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f78e:	2300      	movs	r3, #0
 800f790:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	68f9      	ldr	r1, [r7, #12]
 800f79c:	4806      	ldr	r0, [pc, #24]	; (800f7b8 <BSP_SD_WriteBlocks+0x38>)
 800f79e:	f7fb fda7 	bl	800b2f0 <HAL_SD_WriteBlocks>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3718      	adds	r7, #24
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20000684 	.word	0x20000684

0800f7bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f7c0:	4805      	ldr	r0, [pc, #20]	; (800f7d8 <BSP_SD_GetCardState+0x1c>)
 800f7c2:	f7fc f985 	bl	800bad0 <HAL_SD_GetCardState>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b04      	cmp	r3, #4
 800f7ca:	bf14      	ite	ne
 800f7cc:	2301      	movne	r3, #1
 800f7ce:	2300      	moveq	r3, #0
 800f7d0:	b2db      	uxtb	r3, r3
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20000684 	.word	0x20000684

0800f7dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f7e4:	6879      	ldr	r1, [r7, #4]
 800f7e6:	4803      	ldr	r0, [pc, #12]	; (800f7f4 <BSP_SD_GetCardInfo+0x18>)
 800f7e8:	f7fc f8ac 	bl	800b944 <HAL_SD_GetCardInfo>
}
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	20000684 	.word	0x20000684

0800f7f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f7fe:	2301      	movs	r3, #1
 800f800:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f802:	f000 f80b 	bl	800f81c <BSP_PlatformIsDetected>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d101      	bne.n	800f810 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f80c:	2300      	movs	r3, #0
 800f80e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	b2db      	uxtb	r3, r3
}
 800f814:	4618      	mov	r0, r3
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f822:	2301      	movs	r3, #1
 800f824:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f82a:	4806      	ldr	r0, [pc, #24]	; (800f844 <BSP_PlatformIsDetected+0x28>)
 800f82c:	f7f6 fa08 	bl	8005c40 <HAL_GPIO_ReadPin>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f836:	2300      	movs	r3, #0
 800f838:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f83a:	79fb      	ldrb	r3, [r7, #7]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	40020800 	.word	0x40020800

0800f848 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	4603      	mov	r3, r0
 800f850:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f852:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <SD_CheckStatus+0x38>)
 800f854:	2201      	movs	r2, #1
 800f856:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f858:	f7ff ffb0 	bl	800f7bc <BSP_SD_GetCardState>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d107      	bne.n	800f872 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f862:	4b07      	ldr	r3, [pc, #28]	; (800f880 <SD_CheckStatus+0x38>)
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	f023 0301 	bic.w	r3, r3, #1
 800f86c:	b2da      	uxtb	r2, r3
 800f86e:	4b04      	ldr	r3, [pc, #16]	; (800f880 <SD_CheckStatus+0x38>)
 800f870:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f872:	4b03      	ldr	r3, [pc, #12]	; (800f880 <SD_CheckStatus+0x38>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	b2db      	uxtb	r3, r3
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	20000015 	.word	0x20000015

0800f884 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	4603      	mov	r3, r0
 800f88c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f88e:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <SD_initialize+0x38>)
 800f890:	2201      	movs	r2, #1
 800f892:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f894:	f7ff ff30 	bl	800f6f8 <BSP_SD_Init>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d107      	bne.n	800f8ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f89e:	79fb      	ldrb	r3, [r7, #7]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff ffd1 	bl	800f848 <SD_CheckStatus>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4b04      	ldr	r3, [pc, #16]	; (800f8bc <SD_initialize+0x38>)
 800f8ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f8ae:	4b03      	ldr	r3, [pc, #12]	; (800f8bc <SD_initialize+0x38>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	b2db      	uxtb	r3, r3
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20000015 	.word	0x20000015

0800f8c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7ff ffbb 	bl	800f848 <SD_CheckStatus>
 800f8d2:	4603      	mov	r3, r0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60b9      	str	r1, [r7, #8]
 800f8e4:	607a      	str	r2, [r7, #4]
 800f8e6:	603b      	str	r3, [r7, #0]
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	6879      	ldr	r1, [r7, #4]
 800f8f8:	68b8      	ldr	r0, [r7, #8]
 800f8fa:	f7ff ff23 	bl	800f744 <BSP_SD_ReadBlocks>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d107      	bne.n	800f914 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f904:	bf00      	nop
 800f906:	f7ff ff59 	bl	800f7bc <BSP_SD_GetCardState>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1fa      	bne.n	800f906 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f914:	7dfb      	ldrb	r3, [r7, #23]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3718      	adds	r7, #24
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b086      	sub	sp, #24
 800f922:	af00      	add	r7, sp, #0
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	603b      	str	r3, [r7, #0]
 800f92a:	4603      	mov	r3, r0
 800f92c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f92e:	2301      	movs	r3, #1
 800f930:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	68b8      	ldr	r0, [r7, #8]
 800f93c:	f7ff ff20 	bl	800f780 <BSP_SD_WriteBlocks>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d107      	bne.n	800f956 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f946:	bf00      	nop
 800f948:	f7ff ff38 	bl	800f7bc <BSP_SD_GetCardState>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1fa      	bne.n	800f948 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f956:	7dfb      	ldrb	r3, [r7, #23]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08c      	sub	sp, #48	; 0x30
 800f964:	af00      	add	r7, sp, #0
 800f966:	4603      	mov	r3, r0
 800f968:	603a      	str	r2, [r7, #0]
 800f96a:	71fb      	strb	r3, [r7, #7]
 800f96c:	460b      	mov	r3, r1
 800f96e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f976:	4b25      	ldr	r3, [pc, #148]	; (800fa0c <SD_ioctl+0xac>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	f003 0301 	and.w	r3, r3, #1
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <SD_ioctl+0x28>
 800f984:	2303      	movs	r3, #3
 800f986:	e03c      	b.n	800fa02 <SD_ioctl+0xa2>

  switch (cmd)
 800f988:	79bb      	ldrb	r3, [r7, #6]
 800f98a:	2b03      	cmp	r3, #3
 800f98c:	d834      	bhi.n	800f9f8 <SD_ioctl+0x98>
 800f98e:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <SD_ioctl+0x34>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800f9a5 	.word	0x0800f9a5
 800f998:	0800f9ad 	.word	0x0800f9ad
 800f99c:	0800f9c5 	.word	0x0800f9c5
 800f9a0:	0800f9df 	.word	0x0800f9df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9aa:	e028      	b.n	800f9fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f9ac:	f107 030c 	add.w	r3, r7, #12
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7ff ff13 	bl	800f7dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9c2:	e01c      	b.n	800f9fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f9c4:	f107 030c 	add.w	r3, r7, #12
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7ff ff07 	bl	800f7dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9dc:	e00f      	b.n	800f9fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f9de:	f107 030c 	add.w	r3, r7, #12
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7ff fefa 	bl	800f7dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	0a5a      	lsrs	r2, r3, #9
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f9f6:	e002      	b.n	800f9fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f9f8:	2304      	movs	r3, #4
 800f9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3730      	adds	r7, #48	; 0x30
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20000015 	.word	0x20000015

0800fa10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]
 800fa20:	e009      	b.n	800fa36 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	33e0      	adds	r3, #224	; 0xe0
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	3301      	adds	r3, #1
 800fa34:	60fb      	str	r3, [r7, #12]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2b0e      	cmp	r3, #14
 800fa3a:	d9f2      	bls.n	800fa22 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	e009      	b.n	800fa56 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	4413      	add	r3, r2
 800fa48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	3301      	adds	r3, #1
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa5c:	d3f1      	bcc.n	800fa42 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2240      	movs	r2, #64	; 0x40
 800fa82:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f001 fc8b 	bl	80113dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800fac6:	2101      	movs	r1, #1
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f001 fd72 	bl	80115b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800face:	2300      	movs	r3, #0
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af04      	add	r7, sp, #16
 800fade:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fae0:	2302      	movs	r3, #2
 800fae2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fae4:	2300      	movs	r3, #0
 800fae6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d102      	bne.n	800fafa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2203      	movs	r2, #3
 800faf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b0b      	cmp	r3, #11
 800fb02:	f200 81b3 	bhi.w	800fe6c <USBH_Process+0x394>
 800fb06:	a201      	add	r2, pc, #4	; (adr r2, 800fb0c <USBH_Process+0x34>)
 800fb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0c:	0800fb3d 	.word	0x0800fb3d
 800fb10:	0800fb6f 	.word	0x0800fb6f
 800fb14:	0800fbd7 	.word	0x0800fbd7
 800fb18:	0800fe07 	.word	0x0800fe07
 800fb1c:	0800fe6d 	.word	0x0800fe6d
 800fb20:	0800fc7b 	.word	0x0800fc7b
 800fb24:	0800fdad 	.word	0x0800fdad
 800fb28:	0800fcb1 	.word	0x0800fcb1
 800fb2c:	0800fcd1 	.word	0x0800fcd1
 800fb30:	0800fcf1 	.word	0x0800fcf1
 800fb34:	0800fd1f 	.word	0x0800fd1f
 800fb38:	0800fdef 	.word	0x0800fdef
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 8193 	beq.w	800fe70 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fb50:	20c8      	movs	r0, #200	; 0xc8
 800fb52:	f001 fd45 	bl	80115e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f001 fc9d 	bl	8011496 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800fb6c:	e180      	b.n	800fe70 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d107      	bne.n	800fb88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2202      	movs	r2, #2
 800fb84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fb86:	e182      	b.n	800fe8e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fb8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb92:	d914      	bls.n	800fbbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	b2da      	uxtb	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fbaa:	2b03      	cmp	r3, #3
 800fbac:	d903      	bls.n	800fbb6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	220d      	movs	r2, #13
 800fbb2:	701a      	strb	r2, [r3, #0]
      break;
 800fbb4:	e16b      	b.n	800fe8e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	701a      	strb	r2, [r3, #0]
      break;
 800fbbc:	e167      	b.n	800fe8e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fbc4:	f103 020a 	add.w	r2, r3, #10
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800fbce:	200a      	movs	r0, #10
 800fbd0:	f001 fd06 	bl	80115e0 <USBH_Delay>
      break;
 800fbd4:	e15b      	b.n	800fe8e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d005      	beq.n	800fbec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fbec:	2064      	movs	r0, #100	; 0x64
 800fbee:	f001 fcf7 	bl	80115e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f001 fc28 	bl	8011448 <USBH_LL_GetSpeed>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2205      	movs	r2, #5
 800fc06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800fc08:	2100      	movs	r1, #0
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f001 f8aa 	bl	8010d64 <USBH_AllocPipe>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fc18:	2180      	movs	r1, #128	; 0x80
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f001 f8a2 	bl	8010d64 <USBH_AllocPipe>
 800fc20:	4603      	mov	r3, r0
 800fc22:	461a      	mov	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	7919      	ldrb	r1, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fc3c:	b292      	uxth	r2, r2
 800fc3e:	9202      	str	r2, [sp, #8]
 800fc40:	2200      	movs	r2, #0
 800fc42:	9201      	str	r2, [sp, #4]
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4603      	mov	r3, r0
 800fc48:	2280      	movs	r2, #128	; 0x80
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f001 f86b 	bl	8010d26 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	7959      	ldrb	r1, [r3, #5]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fc64:	b292      	uxth	r2, r2
 800fc66:	9202      	str	r2, [sp, #8]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	9201      	str	r2, [sp, #4]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2200      	movs	r2, #0
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f001 f857 	bl	8010d26 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fc78:	e109      	b.n	800fe8e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f90c 	bl	800fe98 <USBH_HandleEnum>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fc84:	7bbb      	ldrb	r3, [r7, #14]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f040 80f3 	bne.w	800fe74 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d103      	bne.n	800fca8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2208      	movs	r2, #8
 800fca4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800fca6:	e0e5      	b.n	800fe74 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2207      	movs	r2, #7
 800fcac:	701a      	strb	r2, [r3, #0]
      break;
 800fcae:	e0e1      	b.n	800fe74 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80de 	beq.w	800fe78 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2208      	movs	r2, #8
 800fccc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800fcce:	e0d3      	b.n	800fe78 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fc11 	bl	8010502 <USBH_SetCfg>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f040 80ca 	bne.w	800fe7c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2209      	movs	r2, #9
 800fcec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fcee:	e0c5      	b.n	800fe7c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800fcf6:	f003 0320 	and.w	r3, r3, #32
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00b      	beq.n	800fd16 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800fcfe:	2101      	movs	r1, #1
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fc21 	bl	8010548 <USBH_SetFeature>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f040 80b9 	bne.w	800fe80 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	220a      	movs	r2, #10
 800fd12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fd14:	e0b4      	b.n	800fe80 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	220a      	movs	r2, #10
 800fd1a:	701a      	strb	r2, [r3, #0]
      break;
 800fd1c:	e0b0      	b.n	800fe80 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 80ad 	beq.w	800fe84 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd32:	2300      	movs	r3, #0
 800fd34:	73fb      	strb	r3, [r7, #15]
 800fd36:	e016      	b.n	800fd66 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fd38:	7bfa      	ldrb	r2, [r7, #15]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	32de      	adds	r2, #222	; 0xde
 800fd3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd42:	791a      	ldrb	r2, [r3, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d108      	bne.n	800fd60 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fd4e:	7bfa      	ldrb	r2, [r7, #15]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	32de      	adds	r2, #222	; 0xde
 800fd54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800fd5e:	e005      	b.n	800fd6c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	3301      	adds	r3, #1
 800fd64:	73fb      	strb	r3, [r7, #15]
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d0e5      	beq.n	800fd38 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d016      	beq.n	800fda4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	4798      	blx	r3
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2206      	movs	r2, #6
 800fd8c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fd94:	2103      	movs	r1, #3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fd9a:	e073      	b.n	800fe84 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	220d      	movs	r2, #13
 800fda0:	701a      	strb	r2, [r3, #0]
      break;
 800fda2:	e06f      	b.n	800fe84 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	220d      	movs	r2, #13
 800fda8:	701a      	strb	r2, [r3, #0]
      break;
 800fdaa:	e06b      	b.n	800fe84 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d017      	beq.n	800fde6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	4798      	blx	r3
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fdc6:	7bbb      	ldrb	r3, [r7, #14]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d103      	bne.n	800fdd6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	220b      	movs	r2, #11
 800fdd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fdd4:	e058      	b.n	800fe88 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	d154      	bne.n	800fe88 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	220d      	movs	r2, #13
 800fde2:	701a      	strb	r2, [r3, #0]
      break;
 800fde4:	e050      	b.n	800fe88 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	220d      	movs	r2, #13
 800fdea:	701a      	strb	r2, [r3, #0]
      break;
 800fdec:	e04c      	b.n	800fe88 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d049      	beq.n	800fe8c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdfe:	695b      	ldr	r3, [r3, #20]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	4798      	blx	r3
      }
      break;
 800fe04:	e042      	b.n	800fe8c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fdfe 	bl	800fa10 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d009      	beq.n	800fe32 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d005      	beq.n	800fe48 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe42:	2105      	movs	r1, #5
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d107      	bne.n	800fe64 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff fe2b 	bl	800fab8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fe62:	e014      	b.n	800fe8e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f001 fab9 	bl	80113dc <USBH_LL_Start>
      break;
 800fe6a:	e010      	b.n	800fe8e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800fe6c:	bf00      	nop
 800fe6e:	e00e      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe70:	bf00      	nop
 800fe72:	e00c      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe74:	bf00      	nop
 800fe76:	e00a      	b.n	800fe8e <USBH_Process+0x3b6>
    break;
 800fe78:	bf00      	nop
 800fe7a:	e008      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe7c:	bf00      	nop
 800fe7e:	e006      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe80:	bf00      	nop
 800fe82:	e004      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe84:	bf00      	nop
 800fe86:	e002      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe88:	bf00      	nop
 800fe8a:	e000      	b.n	800fe8e <USBH_Process+0x3b6>
      break;
 800fe8c:	bf00      	nop
  }
  return USBH_OK;
 800fe8e:	2300      	movs	r3, #0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b088      	sub	sp, #32
 800fe9c:	af04      	add	r7, sp, #16
 800fe9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fea0:	2301      	movs	r3, #1
 800fea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fea4:	2301      	movs	r3, #1
 800fea6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	785b      	ldrb	r3, [r3, #1]
 800feac:	2b07      	cmp	r3, #7
 800feae:	f200 81c1 	bhi.w	8010234 <USBH_HandleEnum+0x39c>
 800feb2:	a201      	add	r2, pc, #4	; (adr r2, 800feb8 <USBH_HandleEnum+0x20>)
 800feb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb8:	0800fed9 	.word	0x0800fed9
 800febc:	0800ff97 	.word	0x0800ff97
 800fec0:	08010001 	.word	0x08010001
 800fec4:	0801008f 	.word	0x0801008f
 800fec8:	080100f9 	.word	0x080100f9
 800fecc:	08010169 	.word	0x08010169
 800fed0:	080101af 	.word	0x080101af
 800fed4:	080101f5 	.word	0x080101f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fed8:	2108      	movs	r1, #8
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fa41 	bl	8010362 <USBH_Get_DevDesc>
 800fee0:	4603      	mov	r3, r0
 800fee2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fee4:	7bbb      	ldrb	r3, [r7, #14]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d130      	bne.n	800ff4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7919      	ldrb	r1, [r3, #4]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff0e:	b292      	uxth	r2, r2
 800ff10:	9202      	str	r2, [sp, #8]
 800ff12:	2200      	movs	r2, #0
 800ff14:	9201      	str	r2, [sp, #4]
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2280      	movs	r2, #128	; 0x80
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 ff02 	bl	8010d26 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	7959      	ldrb	r1, [r3, #5]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff36:	b292      	uxth	r2, r2
 800ff38:	9202      	str	r2, [sp, #8]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	9201      	str	r2, [sp, #4]
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	4603      	mov	r3, r0
 800ff42:	2200      	movs	r2, #0
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f000 feee 	bl	8010d26 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ff4a:	e175      	b.n	8010238 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff4c:	7bbb      	ldrb	r3, [r7, #14]
 800ff4e:	2b03      	cmp	r3, #3
 800ff50:	f040 8172 	bne.w	8010238 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff6a:	2b03      	cmp	r3, #3
 800ff6c:	d903      	bls.n	800ff76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	220d      	movs	r2, #13
 800ff72:	701a      	strb	r2, [r3, #0]
      break;
 800ff74:	e160      	b.n	8010238 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	795b      	ldrb	r3, [r3, #5]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 ff12 	bl	8010da6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	791b      	ldrb	r3, [r3, #4]
 800ff86:	4619      	mov	r1, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 ff0c 	bl	8010da6 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]
      break;
 800ff94:	e150      	b.n	8010238 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ff96:	2112      	movs	r1, #18
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f9e2 	bl	8010362 <USBH_Get_DevDesc>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffa2:	7bbb      	ldrb	r3, [r7, #14]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d103      	bne.n	800ffb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2202      	movs	r2, #2
 800ffac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ffae:	e145      	b.n	801023c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	f040 8142 	bne.w	801023c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d903      	bls.n	800ffda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	220d      	movs	r2, #13
 800ffd6:	701a      	strb	r2, [r3, #0]
      break;
 800ffd8:	e130      	b.n	801023c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	795b      	ldrb	r3, [r3, #5]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fee0 	bl	8010da6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	791b      	ldrb	r3, [r3, #4]
 800ffea:	4619      	mov	r1, r3
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 feda 	bl	8010da6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	701a      	strb	r2, [r3, #0]
      break;
 800fffe:	e11d      	b.n	801023c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010000:	2101      	movs	r1, #1
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fa59 	bl	80104ba <USBH_SetAddress>
 8010008:	4603      	mov	r3, r0
 801000a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801000c:	7bbb      	ldrb	r3, [r7, #14]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d132      	bne.n	8010078 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010012:	2002      	movs	r0, #2
 8010014:	f001 fae4 	bl	80115e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2201      	movs	r2, #1
 801001c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2203      	movs	r2, #3
 8010024:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	7919      	ldrb	r1, [r3, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801003a:	b292      	uxth	r2, r2
 801003c:	9202      	str	r2, [sp, #8]
 801003e:	2200      	movs	r2, #0
 8010040:	9201      	str	r2, [sp, #4]
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	4603      	mov	r3, r0
 8010046:	2280      	movs	r2, #128	; 0x80
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f000 fe6c 	bl	8010d26 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	7959      	ldrb	r1, [r3, #5]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010062:	b292      	uxth	r2, r2
 8010064:	9202      	str	r2, [sp, #8]
 8010066:	2200      	movs	r2, #0
 8010068:	9201      	str	r2, [sp, #4]
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	4603      	mov	r3, r0
 801006e:	2200      	movs	r2, #0
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fe58 	bl	8010d26 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010076:	e0e3      	b.n	8010240 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010078:	7bbb      	ldrb	r3, [r7, #14]
 801007a:	2b03      	cmp	r3, #3
 801007c:	f040 80e0 	bne.w	8010240 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	220d      	movs	r2, #13
 8010084:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	705a      	strb	r2, [r3, #1]
      break;
 801008c:	e0d8      	b.n	8010240 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801008e:	2109      	movs	r1, #9
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 f98e 	bl	80103b2 <USBH_Get_CfgDesc>
 8010096:	4603      	mov	r3, r0
 8010098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801009a:	7bbb      	ldrb	r3, [r7, #14]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d103      	bne.n	80100a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2204      	movs	r2, #4
 80100a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80100a6:	e0cd      	b.n	8010244 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100a8:	7bbb      	ldrb	r3, [r7, #14]
 80100aa:	2b03      	cmp	r3, #3
 80100ac:	f040 80ca 	bne.w	8010244 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80100b6:	3301      	adds	r3, #1
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80100c6:	2b03      	cmp	r3, #3
 80100c8:	d903      	bls.n	80100d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	220d      	movs	r2, #13
 80100ce:	701a      	strb	r2, [r3, #0]
      break;
 80100d0:	e0b8      	b.n	8010244 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	795b      	ldrb	r3, [r3, #5]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fe64 	bl	8010da6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	791b      	ldrb	r3, [r3, #4]
 80100e2:	4619      	mov	r1, r3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 fe5e 	bl	8010da6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	701a      	strb	r2, [r3, #0]
      break;
 80100f6:	e0a5      	b.n	8010244 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80100fe:	4619      	mov	r1, r3
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 f956 	bl	80103b2 <USBH_Get_CfgDesc>
 8010106:	4603      	mov	r3, r0
 8010108:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801010a:	7bbb      	ldrb	r3, [r7, #14]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d103      	bne.n	8010118 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2205      	movs	r2, #5
 8010114:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010116:	e097      	b.n	8010248 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010118:	7bbb      	ldrb	r3, [r7, #14]
 801011a:	2b03      	cmp	r3, #3
 801011c:	f040 8094 	bne.w	8010248 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010126:	3301      	adds	r3, #1
 8010128:	b2da      	uxtb	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010136:	2b03      	cmp	r3, #3
 8010138:	d903      	bls.n	8010142 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	220d      	movs	r2, #13
 801013e:	701a      	strb	r2, [r3, #0]
      break;
 8010140:	e082      	b.n	8010248 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	795b      	ldrb	r3, [r3, #5]
 8010146:	4619      	mov	r1, r3
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fe2c 	bl	8010da6 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	791b      	ldrb	r3, [r3, #4]
 8010152:	4619      	mov	r1, r3
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fe26 	bl	8010da6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	701a      	strb	r2, [r3, #0]
      break;
 8010166:	e06f      	b.n	8010248 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801016e:	2b00      	cmp	r3, #0
 8010170:	d019      	beq.n	80101a6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801017e:	23ff      	movs	r3, #255	; 0xff
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f93a 	bl	80103fa <USBH_Get_StringDesc>
 8010186:	4603      	mov	r3, r0
 8010188:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801018a:	7bbb      	ldrb	r3, [r7, #14]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d103      	bne.n	8010198 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2206      	movs	r2, #6
 8010194:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8010196:	e059      	b.n	801024c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010198:	7bbb      	ldrb	r3, [r7, #14]
 801019a:	2b03      	cmp	r3, #3
 801019c:	d156      	bne.n	801024c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2206      	movs	r2, #6
 80101a2:	705a      	strb	r2, [r3, #1]
      break;
 80101a4:	e052      	b.n	801024c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2206      	movs	r2, #6
 80101aa:	705a      	strb	r2, [r3, #1]
      break;
 80101ac:	e04e      	b.n	801024c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d019      	beq.n	80101ec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101c4:	23ff      	movs	r3, #255	; 0xff
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 f917 	bl	80103fa <USBH_Get_StringDesc>
 80101cc:	4603      	mov	r3, r0
 80101ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101d0:	7bbb      	ldrb	r3, [r7, #14]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d103      	bne.n	80101de <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2207      	movs	r2, #7
 80101da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80101dc:	e038      	b.n	8010250 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101de:	7bbb      	ldrb	r3, [r7, #14]
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	d135      	bne.n	8010250 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2207      	movs	r2, #7
 80101e8:	705a      	strb	r2, [r3, #1]
      break;
 80101ea:	e031      	b.n	8010250 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2207      	movs	r2, #7
 80101f0:	705a      	strb	r2, [r3, #1]
      break;
 80101f2:	e02d      	b.n	8010250 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d017      	beq.n	801022e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801020a:	23ff      	movs	r3, #255	; 0xff
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 f8f4 	bl	80103fa <USBH_Get_StringDesc>
 8010212:	4603      	mov	r3, r0
 8010214:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010216:	7bbb      	ldrb	r3, [r7, #14]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d102      	bne.n	8010222 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801021c:	2300      	movs	r3, #0
 801021e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010220:	e018      	b.n	8010254 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010222:	7bbb      	ldrb	r3, [r7, #14]
 8010224:	2b03      	cmp	r3, #3
 8010226:	d115      	bne.n	8010254 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	73fb      	strb	r3, [r7, #15]
      break;
 801022c:	e012      	b.n	8010254 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	73fb      	strb	r3, [r7, #15]
      break;
 8010232:	e00f      	b.n	8010254 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8010234:	bf00      	nop
 8010236:	e00e      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010238:	bf00      	nop
 801023a:	e00c      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 801023c:	bf00      	nop
 801023e:	e00a      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010240:	bf00      	nop
 8010242:	e008      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010244:	bf00      	nop
 8010246:	e006      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010248:	bf00      	nop
 801024a:	e004      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 801024c:	bf00      	nop
 801024e:	e002      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010250:	bf00      	nop
 8010252:	e000      	b.n	8010256 <USBH_HandleEnum+0x3be>
      break;
 8010254:	bf00      	nop
  }
  return Status;
 8010256:	7bfb      	ldrb	r3, [r7, #15]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 f804 	bl	8010284 <USBH_HandleSof>
}
 801027c:	bf00      	nop
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2b0b      	cmp	r3, #11
 8010294:	d10a      	bne.n	80102ac <USBH_HandleSof+0x28>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	4798      	blx	r3
  }
}
 80102ac:	bf00      	nop
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80102c4:	bf00      	nop
}
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80102e0:	bf00      	nop
}
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2201      	movs	r2, #1
 8010326:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f001 f869 	bl	8011412 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	791b      	ldrb	r3, [r3, #4]
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fd2d 	bl	8010da6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	795b      	ldrb	r3, [r3, #5]
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fd27 	bl	8010da6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b086      	sub	sp, #24
 8010366:	af02      	add	r7, sp, #8
 8010368:	6078      	str	r0, [r7, #4]
 801036a:	460b      	mov	r3, r1
 801036c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8010374:	78fb      	ldrb	r3, [r7, #3]
 8010376:	b29b      	uxth	r3, r3
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	4613      	mov	r3, r2
 801037c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010380:	2100      	movs	r1, #0
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 f864 	bl	8010450 <USBH_GetDescriptor>
 8010388:	4603      	mov	r3, r0
 801038a:	73fb      	strb	r3, [r7, #15]
 801038c:	7bfb      	ldrb	r3, [r7, #15]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d10a      	bne.n	80103a8 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801039e:	78fa      	ldrb	r2, [r7, #3]
 80103a0:	b292      	uxth	r2, r2
 80103a2:	4619      	mov	r1, r3
 80103a4:	f000 f8f4 	bl	8010590 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b086      	sub	sp, #24
 80103b6:	af02      	add	r7, sp, #8
 80103b8:	6078      	str	r0, [r7, #4]
 80103ba:	460b      	mov	r3, r1
 80103bc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	331c      	adds	r3, #28
 80103c2:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80103c4:	887b      	ldrh	r3, [r7, #2]
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103ce:	2100      	movs	r1, #0
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f83d 	bl	8010450 <USBH_GetDescriptor>
 80103d6:	4603      	mov	r3, r0
 80103d8:	72fb      	strb	r3, [r7, #11]
 80103da:	7afb      	ldrb	r3, [r7, #11]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d107      	bne.n	80103f0 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80103e6:	887a      	ldrh	r2, [r7, #2]
 80103e8:	68f9      	ldr	r1, [r7, #12]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 f940 	bl	8010670 <USBH_ParseCfgDesc>
  }

  return status;
 80103f0:	7afb      	ldrb	r3, [r7, #11]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b088      	sub	sp, #32
 80103fe:	af02      	add	r7, sp, #8
 8010400:	60f8      	str	r0, [r7, #12]
 8010402:	607a      	str	r2, [r7, #4]
 8010404:	461a      	mov	r2, r3
 8010406:	460b      	mov	r3, r1
 8010408:	72fb      	strb	r3, [r7, #11]
 801040a:	4613      	mov	r3, r2
 801040c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 801040e:	7afb      	ldrb	r3, [r7, #11]
 8010410:	b29b      	uxth	r3, r3
 8010412:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010416:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801041e:	893b      	ldrh	r3, [r7, #8]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	460b      	mov	r3, r1
 8010424:	2100      	movs	r1, #0
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f000 f812 	bl	8010450 <USBH_GetDescriptor>
 801042c:	4603      	mov	r3, r0
 801042e:	75fb      	strb	r3, [r7, #23]
 8010430:	7dfb      	ldrb	r3, [r7, #23]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d107      	bne.n	8010446 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801043c:	893a      	ldrh	r2, [r7, #8]
 801043e:	6879      	ldr	r1, [r7, #4]
 8010440:	4618      	mov	r0, r3
 8010442:	f000 fa13 	bl	801086c <USBH_ParseStringDesc>
  }

  return status;
 8010446:	7dfb      	ldrb	r3, [r7, #23]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3718      	adds	r7, #24
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	607b      	str	r3, [r7, #4]
 801045a:	460b      	mov	r3, r1
 801045c:	72fb      	strb	r3, [r7, #11]
 801045e:	4613      	mov	r3, r2
 8010460:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	789b      	ldrb	r3, [r3, #2]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d11c      	bne.n	80104a4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801046a:	7afb      	ldrb	r3, [r7, #11]
 801046c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010470:	b2da      	uxtb	r2, r3
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2206      	movs	r2, #6
 801047a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	893a      	ldrh	r2, [r7, #8]
 8010480:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010482:	893b      	ldrh	r3, [r7, #8]
 8010484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801048c:	d104      	bne.n	8010498 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f240 4209 	movw	r2, #1033	; 0x409
 8010494:	829a      	strh	r2, [r3, #20]
 8010496:	e002      	b.n	801049e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2200      	movs	r2, #0
 801049c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	8b3a      	ldrh	r2, [r7, #24]
 80104a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80104a4:	8b3b      	ldrh	r3, [r7, #24]
 80104a6:	461a      	mov	r2, r3
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f000 fa2c 	bl	8010908 <USBH_CtlReq>
 80104b0:	4603      	mov	r3, r0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	460b      	mov	r3, r1
 80104c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	789b      	ldrb	r3, [r3, #2]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d10f      	bne.n	80104ee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2205      	movs	r2, #5
 80104d8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80104da:	78fb      	ldrb	r3, [r7, #3]
 80104dc:	b29a      	uxth	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80104ee:	2200      	movs	r2, #0
 80104f0:	2100      	movs	r1, #0
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fa08 	bl	8010908 <USBH_CtlReq>
 80104f8:	4603      	mov	r3, r0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b082      	sub	sp, #8
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	460b      	mov	r3, r1
 801050c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	789b      	ldrb	r3, [r3, #2]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d10e      	bne.n	8010534 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2209      	movs	r2, #9
 8010520:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	887a      	ldrh	r2, [r7, #2]
 8010526:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010534:	2200      	movs	r2, #0
 8010536:	2100      	movs	r1, #0
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f9e5 	bl	8010908 <USBH_CtlReq>
 801053e:	4603      	mov	r3, r0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	460b      	mov	r3, r1
 8010552:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	789b      	ldrb	r3, [r3, #2]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d10f      	bne.n	801057c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2203      	movs	r2, #3
 8010566:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010568:	78fb      	ldrb	r3, [r7, #3]
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801057c:	2200      	movs	r2, #0
 801057e:	2100      	movs	r1, #0
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f9c1 	bl	8010908 <USBH_CtlReq>
 8010586:	4603      	mov	r3, r0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	785a      	ldrb	r2, [r3, #1]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	3302      	adds	r3, #2
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	3303      	adds	r3, #3
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	021b      	lsls	r3, r3, #8
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	4313      	orrs	r3, r2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	791a      	ldrb	r2, [r3, #4]
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	795a      	ldrb	r2, [r3, #5]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	799a      	ldrb	r2, [r3, #6]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	79da      	ldrb	r2, [r3, #7]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80105ea:	88fb      	ldrh	r3, [r7, #6]
 80105ec:	2b08      	cmp	r3, #8
 80105ee:	d939      	bls.n	8010664 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	3308      	adds	r3, #8
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	3309      	adds	r3, #9
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	021b      	lsls	r3, r3, #8
 8010602:	b29b      	uxth	r3, r3
 8010604:	4313      	orrs	r3, r2
 8010606:	b29a      	uxth	r2, r3
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	330a      	adds	r3, #10
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	b29a      	uxth	r2, r3
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	330b      	adds	r3, #11
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	b29b      	uxth	r3, r3
 801061c:	021b      	lsls	r3, r3, #8
 801061e:	b29b      	uxth	r3, r3
 8010620:	4313      	orrs	r3, r2
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	330c      	adds	r3, #12
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	b29a      	uxth	r2, r3
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	330d      	adds	r3, #13
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	b29b      	uxth	r3, r3
 8010638:	021b      	lsls	r3, r3, #8
 801063a:	b29b      	uxth	r3, r3
 801063c:	4313      	orrs	r3, r2
 801063e:	b29a      	uxth	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	7b9a      	ldrb	r2, [r3, #14]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	7bda      	ldrb	r2, [r3, #15]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	7c1a      	ldrb	r2, [r3, #16]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	7c5a      	ldrb	r2, [r3, #17]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	745a      	strb	r2, [r3, #17]
  }
}
 8010664:	bf00      	nop
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08a      	sub	sp, #40	; 0x28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	4613      	mov	r3, r2
 801067c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010682:	2300      	movs	r3, #0
 8010684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8010688:	2300      	movs	r3, #0
 801068a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	781a      	ldrb	r2, [r3, #0]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	785a      	ldrb	r2, [r3, #1]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	3302      	adds	r3, #2
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	3303      	adds	r3, #3
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	021b      	lsls	r3, r3, #8
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	4313      	orrs	r3, r2
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	791a      	ldrb	r2, [r3, #4]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	795a      	ldrb	r2, [r3, #5]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	799a      	ldrb	r2, [r3, #6]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	79da      	ldrb	r2, [r3, #7]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	7a1a      	ldrb	r2, [r3, #8]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80106e6:	88fb      	ldrh	r3, [r7, #6]
 80106e8:	2b09      	cmp	r3, #9
 80106ea:	d95f      	bls.n	80107ac <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80106ec:	2309      	movs	r3, #9
 80106ee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80106f0:	2300      	movs	r3, #0
 80106f2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80106f4:	e051      	b.n	801079a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80106f6:	f107 0316 	add.w	r3, r7, #22
 80106fa:	4619      	mov	r1, r3
 80106fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106fe:	f000 f8e8 	bl	80108d2 <USBH_GetNextDesc>
 8010702:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	785b      	ldrb	r3, [r3, #1]
 8010708:	2b04      	cmp	r3, #4
 801070a:	d146      	bne.n	801079a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801070c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010710:	221a      	movs	r2, #26
 8010712:	fb02 f303 	mul.w	r3, r2, r3
 8010716:	3308      	adds	r3, #8
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	4413      	add	r3, r2
 801071c:	3302      	adds	r3, #2
 801071e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010722:	69f8      	ldr	r0, [r7, #28]
 8010724:	f000 f846 	bl	80107b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010728:	2300      	movs	r3, #0
 801072a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 801072e:	2300      	movs	r3, #0
 8010730:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010732:	e022      	b.n	801077a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010734:	f107 0316 	add.w	r3, r7, #22
 8010738:	4619      	mov	r1, r3
 801073a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801073c:	f000 f8c9 	bl	80108d2 <USBH_GetNextDesc>
 8010740:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8010742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010744:	785b      	ldrb	r3, [r3, #1]
 8010746:	2b05      	cmp	r3, #5
 8010748:	d117      	bne.n	801077a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801074a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801074e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010752:	3201      	adds	r2, #1
 8010754:	00d2      	lsls	r2, r2, #3
 8010756:	211a      	movs	r1, #26
 8010758:	fb01 f303 	mul.w	r3, r1, r3
 801075c:	4413      	add	r3, r2
 801075e:	3308      	adds	r3, #8
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	4413      	add	r3, r2
 8010764:	3304      	adds	r3, #4
 8010766:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8010768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801076a:	69b8      	ldr	r0, [r7, #24]
 801076c:	f000 f851 	bl	8010812 <USBH_ParseEPDesc>
            ep_ix++;
 8010770:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010774:	3301      	adds	r3, #1
 8010776:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	791b      	ldrb	r3, [r3, #4]
 801077e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010782:	429a      	cmp	r2, r3
 8010784:	d204      	bcs.n	8010790 <USBH_ParseCfgDesc+0x120>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	885a      	ldrh	r2, [r3, #2]
 801078a:	8afb      	ldrh	r3, [r7, #22]
 801078c:	429a      	cmp	r2, r3
 801078e:	d8d1      	bhi.n	8010734 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8010790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010794:	3301      	adds	r3, #1
 8010796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801079a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d804      	bhi.n	80107ac <USBH_ParseCfgDesc+0x13c>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	885a      	ldrh	r2, [r3, #2]
 80107a6:	8afb      	ldrh	r3, [r7, #22]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d8a4      	bhi.n	80106f6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80107ac:	bf00      	nop
 80107ae:	3728      	adds	r7, #40	; 0x28
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	781a      	ldrb	r2, [r3, #0]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	785a      	ldrb	r2, [r3, #1]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	789a      	ldrb	r2, [r3, #2]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	78da      	ldrb	r2, [r3, #3]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	791a      	ldrb	r2, [r3, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	795a      	ldrb	r2, [r3, #5]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	799a      	ldrb	r2, [r3, #6]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	79da      	ldrb	r2, [r3, #7]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	7a1a      	ldrb	r2, [r3, #8]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	721a      	strb	r2, [r3, #8]
}
 8010806:	bf00      	nop
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	781a      	ldrb	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	785a      	ldrb	r2, [r3, #1]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	789a      	ldrb	r2, [r3, #2]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	78da      	ldrb	r2, [r3, #3]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	3304      	adds	r3, #4
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	b29a      	uxth	r2, r3
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	3305      	adds	r3, #5
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	b29b      	uxth	r3, r3
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	b29b      	uxth	r3, r3
 8010850:	4313      	orrs	r3, r2
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	799a      	ldrb	r2, [r3, #6]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	719a      	strb	r2, [r3, #6]
}
 8010860:	bf00      	nop
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801086c:	b480      	push	{r7}
 801086e:	b087      	sub	sp, #28
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	4613      	mov	r3, r2
 8010878:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	3301      	adds	r3, #1
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	2b03      	cmp	r3, #3
 8010882:	d120      	bne.n	80108c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	1e9a      	subs	r2, r3, #2
 801088a:	88fb      	ldrh	r3, [r7, #6]
 801088c:	4293      	cmp	r3, r2
 801088e:	bf28      	it	cs
 8010890:	4613      	movcs	r3, r2
 8010892:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	3302      	adds	r3, #2
 8010898:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801089a:	2300      	movs	r3, #0
 801089c:	82fb      	strh	r3, [r7, #22]
 801089e:	e00b      	b.n	80108b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80108a0:	8afb      	ldrh	r3, [r7, #22]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	4413      	add	r3, r2
 80108a6:	781a      	ldrb	r2, [r3, #0]
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	3301      	adds	r3, #1
 80108b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80108b2:	8afb      	ldrh	r3, [r7, #22]
 80108b4:	3302      	adds	r3, #2
 80108b6:	82fb      	strh	r3, [r7, #22]
 80108b8:	8afa      	ldrh	r2, [r7, #22]
 80108ba:	8abb      	ldrh	r3, [r7, #20]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d3ef      	bcc.n	80108a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2200      	movs	r2, #0
 80108c4:	701a      	strb	r2, [r3, #0]
  }
}
 80108c6:	bf00      	nop
 80108c8:	371c      	adds	r7, #28
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80108d2:	b480      	push	{r7}
 80108d4:	b085      	sub	sp, #20
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	881a      	ldrh	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	4413      	add	r3, r2
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4413      	add	r3, r2
 80108f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80108fa:	68fb      	ldr	r3, [r7, #12]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	4613      	mov	r3, r2
 8010914:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010916:	2301      	movs	r3, #1
 8010918:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	789b      	ldrb	r3, [r3, #2]
 801091e:	2b01      	cmp	r3, #1
 8010920:	d002      	beq.n	8010928 <USBH_CtlReq+0x20>
 8010922:	2b02      	cmp	r3, #2
 8010924:	d00f      	beq.n	8010946 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010926:	e027      	b.n	8010978 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68ba      	ldr	r2, [r7, #8]
 801092c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	88fa      	ldrh	r2, [r7, #6]
 8010932:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2201      	movs	r2, #1
 8010938:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2202      	movs	r2, #2
 801093e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010940:	2301      	movs	r3, #1
 8010942:	75fb      	strb	r3, [r7, #23]
      break;
 8010944:	e018      	b.n	8010978 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f000 f81c 	bl	8010984 <USBH_HandleControl>
 801094c:	4603      	mov	r3, r0
 801094e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010950:	7dfb      	ldrb	r3, [r7, #23]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <USBH_CtlReq+0x54>
 8010956:	7dfb      	ldrb	r3, [r7, #23]
 8010958:	2b03      	cmp	r3, #3
 801095a:	d106      	bne.n	801096a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2201      	movs	r2, #1
 8010960:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	761a      	strb	r2, [r3, #24]
      break;
 8010968:	e005      	b.n	8010976 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801096a:	7dfb      	ldrb	r3, [r7, #23]
 801096c:	2b02      	cmp	r3, #2
 801096e:	d102      	bne.n	8010976 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2201      	movs	r2, #1
 8010974:	709a      	strb	r2, [r3, #2]
      break;
 8010976:	bf00      	nop
  }
  return status;
 8010978:	7dfb      	ldrb	r3, [r7, #23]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af02      	add	r7, sp, #8
 801098a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801098c:	2301      	movs	r3, #1
 801098e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010990:	2300      	movs	r3, #0
 8010992:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	7e1b      	ldrb	r3, [r3, #24]
 8010998:	3b01      	subs	r3, #1
 801099a:	2b0a      	cmp	r3, #10
 801099c:	f200 8156 	bhi.w	8010c4c <USBH_HandleControl+0x2c8>
 80109a0:	a201      	add	r2, pc, #4	; (adr r2, 80109a8 <USBH_HandleControl+0x24>)
 80109a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a6:	bf00      	nop
 80109a8:	080109d5 	.word	0x080109d5
 80109ac:	080109ef 	.word	0x080109ef
 80109b0:	08010a59 	.word	0x08010a59
 80109b4:	08010a7f 	.word	0x08010a7f
 80109b8:	08010ab7 	.word	0x08010ab7
 80109bc:	08010ae1 	.word	0x08010ae1
 80109c0:	08010b33 	.word	0x08010b33
 80109c4:	08010b55 	.word	0x08010b55
 80109c8:	08010b91 	.word	0x08010b91
 80109cc:	08010bb7 	.word	0x08010bb7
 80109d0:	08010bf5 	.word	0x08010bf5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f103 0110 	add.w	r1, r3, #16
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	795b      	ldrb	r3, [r3, #5]
 80109de:	461a      	mov	r2, r3
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 f943 	bl	8010c6c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2202      	movs	r2, #2
 80109ea:	761a      	strb	r2, [r3, #24]
      break;
 80109ec:	e139      	b.n	8010c62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	795b      	ldrb	r3, [r3, #5]
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fdc9 	bl	801158c <USBH_LL_GetURBState>
 80109fa:	4603      	mov	r3, r0
 80109fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80109fe:	7bbb      	ldrb	r3, [r7, #14]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d11e      	bne.n	8010a42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7c1b      	ldrb	r3, [r3, #16]
 8010a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	8adb      	ldrh	r3, [r3, #22]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010a16:	7b7b      	ldrb	r3, [r7, #13]
 8010a18:	2b80      	cmp	r3, #128	; 0x80
 8010a1a:	d103      	bne.n	8010a24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2203      	movs	r2, #3
 8010a20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010a22:	e115      	b.n	8010c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2205      	movs	r2, #5
 8010a28:	761a      	strb	r2, [r3, #24]
      break;
 8010a2a:	e111      	b.n	8010c50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010a2c:	7b7b      	ldrb	r3, [r7, #13]
 8010a2e:	2b80      	cmp	r3, #128	; 0x80
 8010a30:	d103      	bne.n	8010a3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2209      	movs	r2, #9
 8010a36:	761a      	strb	r2, [r3, #24]
      break;
 8010a38:	e10a      	b.n	8010c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2207      	movs	r2, #7
 8010a3e:	761a      	strb	r2, [r3, #24]
      break;
 8010a40:	e106      	b.n	8010c50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010a42:	7bbb      	ldrb	r3, [r7, #14]
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d003      	beq.n	8010a50 <USBH_HandleControl+0xcc>
 8010a48:	7bbb      	ldrb	r3, [r7, #14]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	f040 8100 	bne.w	8010c50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	220b      	movs	r2, #11
 8010a54:	761a      	strb	r2, [r3, #24]
      break;
 8010a56:	e0fb      	b.n	8010c50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6899      	ldr	r1, [r3, #8]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	899a      	ldrh	r2, [r3, #12]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	791b      	ldrb	r3, [r3, #4]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 f93a 	bl	8010cea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2204      	movs	r2, #4
 8010a7a:	761a      	strb	r2, [r3, #24]
      break;
 8010a7c:	e0f1      	b.n	8010c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	791b      	ldrb	r3, [r3, #4]
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fd81 	bl	801158c <USBH_LL_GetURBState>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010a8e:	7bbb      	ldrb	r3, [r7, #14]
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d102      	bne.n	8010a9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2209      	movs	r2, #9
 8010a98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010a9a:	7bbb      	ldrb	r3, [r7, #14]
 8010a9c:	2b05      	cmp	r3, #5
 8010a9e:	d102      	bne.n	8010aa6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010aa4:	e0d6      	b.n	8010c54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8010aa6:	7bbb      	ldrb	r3, [r7, #14]
 8010aa8:	2b04      	cmp	r3, #4
 8010aaa:	f040 80d3 	bne.w	8010c54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	220b      	movs	r2, #11
 8010ab2:	761a      	strb	r2, [r3, #24]
      break;
 8010ab4:	e0ce      	b.n	8010c54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6899      	ldr	r1, [r3, #8]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	899a      	ldrh	r2, [r3, #12]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	795b      	ldrb	r3, [r3, #5]
 8010ac2:	2001      	movs	r0, #1
 8010ac4:	9000      	str	r0, [sp, #0]
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f8ea 	bl	8010ca0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2206      	movs	r2, #6
 8010adc:	761a      	strb	r2, [r3, #24]
      break;
 8010ade:	e0c0      	b.n	8010c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	795b      	ldrb	r3, [r3, #5]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 fd50 	bl	801158c <USBH_LL_GetURBState>
 8010aec:	4603      	mov	r3, r0
 8010aee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010af0:	7bbb      	ldrb	r3, [r7, #14]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d103      	bne.n	8010afe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2207      	movs	r2, #7
 8010afa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010afc:	e0ac      	b.n	8010c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010afe:	7bbb      	ldrb	r3, [r7, #14]
 8010b00:	2b05      	cmp	r3, #5
 8010b02:	d105      	bne.n	8010b10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	220c      	movs	r2, #12
 8010b08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8010b0e:	e0a3      	b.n	8010c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010b10:	7bbb      	ldrb	r3, [r7, #14]
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d103      	bne.n	8010b1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2205      	movs	r2, #5
 8010b1a:	761a      	strb	r2, [r3, #24]
      break;
 8010b1c:	e09c      	b.n	8010c58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010b1e:	7bbb      	ldrb	r3, [r7, #14]
 8010b20:	2b04      	cmp	r3, #4
 8010b22:	f040 8099 	bne.w	8010c58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	220b      	movs	r2, #11
 8010b2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010b2c:	2302      	movs	r3, #2
 8010b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b30:	e092      	b.n	8010c58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	791b      	ldrb	r3, [r3, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	2100      	movs	r1, #0
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 f8d5 	bl	8010cea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2208      	movs	r2, #8
 8010b50:	761a      	strb	r2, [r3, #24]

      break;
 8010b52:	e086      	b.n	8010c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	791b      	ldrb	r3, [r3, #4]
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fd16 	bl	801158c <USBH_LL_GetURBState>
 8010b60:	4603      	mov	r3, r0
 8010b62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010b64:	7bbb      	ldrb	r3, [r7, #14]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d105      	bne.n	8010b76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	220d      	movs	r2, #13
 8010b6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010b74:	e072      	b.n	8010c5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	2b04      	cmp	r3, #4
 8010b7a:	d103      	bne.n	8010b84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	220b      	movs	r2, #11
 8010b80:	761a      	strb	r2, [r3, #24]
      break;
 8010b82:	e06b      	b.n	8010c5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010b84:	7bbb      	ldrb	r3, [r7, #14]
 8010b86:	2b05      	cmp	r3, #5
 8010b88:	d168      	bne.n	8010c5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010b8a:	2303      	movs	r3, #3
 8010b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8010b8e:	e065      	b.n	8010c5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	795b      	ldrb	r3, [r3, #5]
 8010b94:	2201      	movs	r2, #1
 8010b96:	9200      	str	r2, [sp, #0]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f000 f87f 	bl	8010ca0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	220a      	movs	r2, #10
 8010bb2:	761a      	strb	r2, [r3, #24]
      break;
 8010bb4:	e055      	b.n	8010c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	795b      	ldrb	r3, [r3, #5]
 8010bba:	4619      	mov	r1, r3
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fce5 	bl	801158c <USBH_LL_GetURBState>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010bc6:	7bbb      	ldrb	r3, [r7, #14]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d105      	bne.n	8010bd8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	220d      	movs	r2, #13
 8010bd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010bd6:	e043      	b.n	8010c60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010bd8:	7bbb      	ldrb	r3, [r7, #14]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d103      	bne.n	8010be6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2209      	movs	r2, #9
 8010be2:	761a      	strb	r2, [r3, #24]
      break;
 8010be4:	e03c      	b.n	8010c60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8010be6:	7bbb      	ldrb	r3, [r7, #14]
 8010be8:	2b04      	cmp	r3, #4
 8010bea:	d139      	bne.n	8010c60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	220b      	movs	r2, #11
 8010bf0:	761a      	strb	r2, [r3, #24]
      break;
 8010bf2:	e035      	b.n	8010c60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	7e5b      	ldrb	r3, [r3, #25]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	765a      	strb	r2, [r3, #25]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	7e5b      	ldrb	r3, [r3, #25]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d806      	bhi.n	8010c16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2201      	movs	r2, #1
 8010c12:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010c14:	e025      	b.n	8010c62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010c1c:	2106      	movs	r1, #6
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	795b      	ldrb	r3, [r3, #5]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f000 f8b9 	bl	8010da6 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	791b      	ldrb	r3, [r3, #4]
 8010c38:	4619      	mov	r1, r3
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 f8b3 	bl	8010da6 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010c46:	2302      	movs	r3, #2
 8010c48:	73fb      	strb	r3, [r7, #15]
      break;
 8010c4a:	e00a      	b.n	8010c62 <USBH_HandleControl+0x2de>

    default:
      break;
 8010c4c:	bf00      	nop
 8010c4e:	e008      	b.n	8010c62 <USBH_HandleControl+0x2de>
      break;
 8010c50:	bf00      	nop
 8010c52:	e006      	b.n	8010c62 <USBH_HandleControl+0x2de>
      break;
 8010c54:	bf00      	nop
 8010c56:	e004      	b.n	8010c62 <USBH_HandleControl+0x2de>
      break;
 8010c58:	bf00      	nop
 8010c5a:	e002      	b.n	8010c62 <USBH_HandleControl+0x2de>
      break;
 8010c5c:	bf00      	nop
 8010c5e:	e000      	b.n	8010c62 <USBH_HandleControl+0x2de>
      break;
 8010c60:	bf00      	nop
  }

  return status;
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b088      	sub	sp, #32
 8010c70:	af04      	add	r7, sp, #16
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	4613      	mov	r3, r2
 8010c78:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010c7a:	79f9      	ldrb	r1, [r7, #7]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	9303      	str	r3, [sp, #12]
 8010c80:	2308      	movs	r3, #8
 8010c82:	9302      	str	r3, [sp, #8]
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	9301      	str	r3, [sp, #4]
 8010c88:	2300      	movs	r3, #0
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	2200      	movs	r2, #0
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f000 fc4a 	bl	801152a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af04      	add	r7, sp, #16
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	4611      	mov	r1, r2
 8010cac:	461a      	mov	r2, r3
 8010cae:	460b      	mov	r3, r1
 8010cb0:	80fb      	strh	r3, [r7, #6]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d001      	beq.n	8010cc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010cc4:	7979      	ldrb	r1, [r7, #5]
 8010cc6:	7e3b      	ldrb	r3, [r7, #24]
 8010cc8:	9303      	str	r3, [sp, #12]
 8010cca:	88fb      	ldrh	r3, [r7, #6]
 8010ccc:	9302      	str	r3, [sp, #8]
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	9301      	str	r3, [sp, #4]
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	2200      	movs	r2, #0
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f000 fc25 	bl	801152a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b088      	sub	sp, #32
 8010cee:	af04      	add	r7, sp, #16
 8010cf0:	60f8      	str	r0, [r7, #12]
 8010cf2:	60b9      	str	r1, [r7, #8]
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	80fb      	strh	r3, [r7, #6]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010d00:	7979      	ldrb	r1, [r7, #5]
 8010d02:	2300      	movs	r3, #0
 8010d04:	9303      	str	r3, [sp, #12]
 8010d06:	88fb      	ldrh	r3, [r7, #6]
 8010d08:	9302      	str	r3, [sp, #8]
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	9301      	str	r3, [sp, #4]
 8010d0e:	2301      	movs	r3, #1
 8010d10:	9300      	str	r3, [sp, #0]
 8010d12:	2300      	movs	r3, #0
 8010d14:	2201      	movs	r2, #1
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	f000 fc07 	bl	801152a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010d1c:	2300      	movs	r3, #0

}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b086      	sub	sp, #24
 8010d2a:	af04      	add	r7, sp, #16
 8010d2c:	6078      	str	r0, [r7, #4]
 8010d2e:	4608      	mov	r0, r1
 8010d30:	4611      	mov	r1, r2
 8010d32:	461a      	mov	r2, r3
 8010d34:	4603      	mov	r3, r0
 8010d36:	70fb      	strb	r3, [r7, #3]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	70bb      	strb	r3, [r7, #2]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010d40:	7878      	ldrb	r0, [r7, #1]
 8010d42:	78ba      	ldrb	r2, [r7, #2]
 8010d44:	78f9      	ldrb	r1, [r7, #3]
 8010d46:	8b3b      	ldrh	r3, [r7, #24]
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	7d3b      	ldrb	r3, [r7, #20]
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	7c3b      	ldrb	r3, [r7, #16]
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	4603      	mov	r3, r0
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 fbb9 	bl	80114cc <USBH_LL_OpenPipe>

  return USBH_OK;
 8010d5a:	2300      	movs	r3, #0
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 f836 	bl	8010de2 <USBH_GetFreePipe>
 8010d76:	4603      	mov	r3, r0
 8010d78:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010d7a:	89fb      	ldrh	r3, [r7, #14]
 8010d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d00a      	beq.n	8010d9a <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010d84:	78fa      	ldrb	r2, [r7, #3]
 8010d86:	89fb      	ldrh	r3, [r7, #14]
 8010d88:	f003 030f 	and.w	r3, r3, #15
 8010d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010d90:	6879      	ldr	r1, [r7, #4]
 8010d92:	33e0      	adds	r3, #224	; 0xe0
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	440b      	add	r3, r1
 8010d98:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010d9a:	89fb      	ldrh	r3, [r7, #14]
 8010d9c:	b2db      	uxtb	r3, r3
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b083      	sub	sp, #12
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	460b      	mov	r3, r1
 8010db0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	2b0a      	cmp	r3, #10
 8010db6:	d80d      	bhi.n	8010dd4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010db8:	78fb      	ldrb	r3, [r7, #3]
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	33e0      	adds	r3, #224	; 0xe0
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	78fb      	ldrb	r3, [r7, #3]
 8010dc6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010dca:	6879      	ldr	r1, [r7, #4]
 8010dcc:	33e0      	adds	r3, #224	; 0xe0
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	440b      	add	r3, r1
 8010dd2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010dd4:	2300      	movs	r3, #0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010de2:	b480      	push	{r7}
 8010de4:	b085      	sub	sp, #20
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010dea:	2300      	movs	r3, #0
 8010dec:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010dee:	2300      	movs	r3, #0
 8010df0:	73fb      	strb	r3, [r7, #15]
 8010df2:	e00f      	b.n	8010e14 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010df4:	7bfb      	ldrb	r3, [r7, #15]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	33e0      	adds	r3, #224	; 0xe0
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	4413      	add	r3, r2
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d102      	bne.n	8010e0e <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010e08:	7bfb      	ldrb	r3, [r7, #15]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	e007      	b.n	8010e1e <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	3301      	adds	r3, #1
 8010e12:	73fb      	strb	r3, [r7, #15]
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	2b0a      	cmp	r3, #10
 8010e18:	d9ec      	bls.n	8010df4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
	...

08010e2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b087      	sub	sp, #28
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	4613      	mov	r3, r2
 8010e38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010e42:	4b1f      	ldr	r3, [pc, #124]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e44:	7a5b      	ldrb	r3, [r3, #9]
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d131      	bne.n	8010eb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010e4c:	4b1c      	ldr	r3, [pc, #112]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e4e:	7a5b      	ldrb	r3, [r3, #9]
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	461a      	mov	r2, r3
 8010e54:	4b1a      	ldr	r3, [pc, #104]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e56:	2100      	movs	r1, #0
 8010e58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010e5a:	4b19      	ldr	r3, [pc, #100]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e5c:	7a5b      	ldrb	r3, [r3, #9]
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	4a17      	ldr	r2, [pc, #92]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e62:	009b      	lsls	r3, r3, #2
 8010e64:	4413      	add	r3, r2
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e6a:	4b15      	ldr	r3, [pc, #84]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e6c:	7a5b      	ldrb	r3, [r3, #9]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	461a      	mov	r2, r3
 8010e72:	4b13      	ldr	r3, [pc, #76]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e74:	4413      	add	r3, r2
 8010e76:	79fa      	ldrb	r2, [r7, #7]
 8010e78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010e7a:	4b11      	ldr	r3, [pc, #68]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e7c:	7a5b      	ldrb	r3, [r3, #9]
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	1c5a      	adds	r2, r3, #1
 8010e82:	b2d1      	uxtb	r1, r2
 8010e84:	4a0e      	ldr	r2, [pc, #56]	; (8010ec0 <FATFS_LinkDriverEx+0x94>)
 8010e86:	7251      	strb	r1, [r2, #9]
 8010e88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e8a:	7dbb      	ldrb	r3, [r7, #22]
 8010e8c:	3330      	adds	r3, #48	; 0x30
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	3301      	adds	r3, #1
 8010e98:	223a      	movs	r2, #58	; 0x3a
 8010e9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	3302      	adds	r3, #2
 8010ea0:	222f      	movs	r2, #47	; 0x2f
 8010ea2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	3303      	adds	r3, #3
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	371c      	adds	r7, #28
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	2000023c 	.word	0x2000023c

08010ec4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ece:	2200      	movs	r2, #0
 8010ed0:	6839      	ldr	r1, [r7, #0]
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7ff ffaa 	bl	8010e2c <FATFS_LinkDriverEx>
 8010ed8:	4603      	mov	r3, r0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3708      	adds	r7, #8
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ee2:	b480      	push	{r7}
 8010ee4:	b085      	sub	sp, #20
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
 8010eea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	689a      	ldr	r2, [r3, #8]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	683a      	ldr	r2, [r7, #0]
 8010f0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	601a      	str	r2, [r3, #0]
}
 8010f1e:	bf00      	nop
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr

08010f2a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f2a:	b480      	push	{r7}
 8010f2c:	b085      	sub	sp, #20
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	6892      	ldr	r2, [r2, #8]
 8010f40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	6852      	ldr	r2, [r2, #4]
 8010f4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d103      	bne.n	8010f5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	689a      	ldr	r2, [r3, #8]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	1e5a      	subs	r2, r3, #1
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
	...

08010f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010f86:	2300      	movs	r3, #0
 8010f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f8a:	4b4f      	ldr	r3, [pc, #316]	; (80110c8 <xTaskIncrementTick+0x148>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f040 808a 	bne.w	80110a8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010f94:	4b4d      	ldr	r3, [pc, #308]	; (80110cc <xTaskIncrementTick+0x14c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010f9c:	4a4b      	ldr	r2, [pc, #300]	; (80110cc <xTaskIncrementTick+0x14c>)
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d122      	bne.n	8010fee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010fa8:	4b49      	ldr	r3, [pc, #292]	; (80110d0 <xTaskIncrementTick+0x150>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00c      	beq.n	8010fcc <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	b672      	cpsid	i
 8010fb8:	f383 8811 	msr	BASEPRI, r3
 8010fbc:	f3bf 8f6f 	isb	sy
 8010fc0:	f3bf 8f4f 	dsb	sy
 8010fc4:	b662      	cpsie	i
 8010fc6:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010fc8:	bf00      	nop
 8010fca:	e7fe      	b.n	8010fca <xTaskIncrementTick+0x4a>
 8010fcc:	4b40      	ldr	r3, [pc, #256]	; (80110d0 <xTaskIncrementTick+0x150>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	4b40      	ldr	r3, [pc, #256]	; (80110d4 <xTaskIncrementTick+0x154>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	4a3e      	ldr	r2, [pc, #248]	; (80110d0 <xTaskIncrementTick+0x150>)
 8010fd8:	6013      	str	r3, [r2, #0]
 8010fda:	4a3e      	ldr	r2, [pc, #248]	; (80110d4 <xTaskIncrementTick+0x154>)
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6013      	str	r3, [r2, #0]
 8010fe0:	4b3d      	ldr	r3, [pc, #244]	; (80110d8 <xTaskIncrementTick+0x158>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	4a3c      	ldr	r2, [pc, #240]	; (80110d8 <xTaskIncrementTick+0x158>)
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	f000 f905 	bl	80111f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010fee:	4b3b      	ldr	r3, [pc, #236]	; (80110dc <xTaskIncrementTick+0x15c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d348      	bcc.n	801108a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ff8:	4b35      	ldr	r3, [pc, #212]	; (80110d0 <xTaskIncrementTick+0x150>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d104      	bne.n	801100c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011002:	4b36      	ldr	r3, [pc, #216]	; (80110dc <xTaskIncrementTick+0x15c>)
 8011004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011008:	601a      	str	r2, [r3, #0]
					break;
 801100a:	e03e      	b.n	801108a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801100c:	4b30      	ldr	r3, [pc, #192]	; (80110d0 <xTaskIncrementTick+0x150>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d203      	bcs.n	801102c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011024:	4a2d      	ldr	r2, [pc, #180]	; (80110dc <xTaskIncrementTick+0x15c>)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801102a:	e02e      	b.n	801108a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	3304      	adds	r3, #4
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff ff7a 	bl	8010f2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103a:	2b00      	cmp	r3, #0
 801103c:	d004      	beq.n	8011048 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	3318      	adds	r3, #24
 8011042:	4618      	mov	r0, r3
 8011044:	f7ff ff71 	bl	8010f2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104c:	2201      	movs	r2, #1
 801104e:	409a      	lsls	r2, r3
 8011050:	4b23      	ldr	r3, [pc, #140]	; (80110e0 <xTaskIncrementTick+0x160>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4313      	orrs	r3, r2
 8011056:	4a22      	ldr	r2, [pc, #136]	; (80110e0 <xTaskIncrementTick+0x160>)
 8011058:	6013      	str	r3, [r2, #0]
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801105e:	4613      	mov	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	4413      	add	r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	4a1f      	ldr	r2, [pc, #124]	; (80110e4 <xTaskIncrementTick+0x164>)
 8011068:	441a      	add	r2, r3
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	3304      	adds	r3, #4
 801106e:	4619      	mov	r1, r3
 8011070:	4610      	mov	r0, r2
 8011072:	f7ff ff36 	bl	8010ee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801107a:	4b1b      	ldr	r3, [pc, #108]	; (80110e8 <xTaskIncrementTick+0x168>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011080:	429a      	cmp	r2, r3
 8011082:	d3b9      	bcc.n	8010ff8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011084:	2301      	movs	r3, #1
 8011086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011088:	e7b6      	b.n	8010ff8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801108a:	4b17      	ldr	r3, [pc, #92]	; (80110e8 <xTaskIncrementTick+0x168>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011090:	4914      	ldr	r1, [pc, #80]	; (80110e4 <xTaskIncrementTick+0x164>)
 8011092:	4613      	mov	r3, r2
 8011094:	009b      	lsls	r3, r3, #2
 8011096:	4413      	add	r3, r2
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	440b      	add	r3, r1
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d907      	bls.n	80110b2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80110a2:	2301      	movs	r3, #1
 80110a4:	617b      	str	r3, [r7, #20]
 80110a6:	e004      	b.n	80110b2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80110a8:	4b10      	ldr	r3, [pc, #64]	; (80110ec <xTaskIncrementTick+0x16c>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	4a0f      	ldr	r2, [pc, #60]	; (80110ec <xTaskIncrementTick+0x16c>)
 80110b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80110b2:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <xTaskIncrementTick+0x170>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80110ba:	2301      	movs	r3, #1
 80110bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80110be:	697b      	ldr	r3, [r7, #20]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3718      	adds	r7, #24
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	200002f8 	.word	0x200002f8
 80110cc:	200002e0 	.word	0x200002e0
 80110d0:	200002d8 	.word	0x200002d8
 80110d4:	200002dc 	.word	0x200002dc
 80110d8:	200002f0 	.word	0x200002f0
 80110dc:	200002f4 	.word	0x200002f4
 80110e0:	200002e4 	.word	0x200002e4
 80110e4:	2000024c 	.word	0x2000024c
 80110e8:	20000248 	.word	0x20000248
 80110ec:	200002e8 	.word	0x200002e8
 80110f0:	200002ec 	.word	0x200002ec

080110f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b088      	sub	sp, #32
 80110f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80110fa:	4b3a      	ldr	r3, [pc, #232]	; (80111e4 <vTaskSwitchContext+0xf0>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011102:	4b39      	ldr	r3, [pc, #228]	; (80111e8 <vTaskSwitchContext+0xf4>)
 8011104:	2201      	movs	r2, #1
 8011106:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011108:	e068      	b.n	80111dc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801110a:	4b37      	ldr	r3, [pc, #220]	; (80111e8 <vTaskSwitchContext+0xf4>)
 801110c:	2200      	movs	r2, #0
 801110e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011110:	4b36      	ldr	r3, [pc, #216]	; (80111ec <vTaskSwitchContext+0xf8>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011116:	61fb      	str	r3, [r7, #28]
 8011118:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801111c:	61bb      	str	r3, [r7, #24]
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	69ba      	ldr	r2, [r7, #24]
 8011124:	429a      	cmp	r2, r3
 8011126:	d111      	bne.n	801114c <vTaskSwitchContext+0x58>
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	3304      	adds	r3, #4
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	69ba      	ldr	r2, [r7, #24]
 8011130:	429a      	cmp	r2, r3
 8011132:	d10b      	bne.n	801114c <vTaskSwitchContext+0x58>
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	3308      	adds	r3, #8
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	69ba      	ldr	r2, [r7, #24]
 801113c:	429a      	cmp	r2, r3
 801113e:	d105      	bne.n	801114c <vTaskSwitchContext+0x58>
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	330c      	adds	r3, #12
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	69ba      	ldr	r2, [r7, #24]
 8011148:	429a      	cmp	r2, r3
 801114a:	d008      	beq.n	801115e <vTaskSwitchContext+0x6a>
 801114c:	4b27      	ldr	r3, [pc, #156]	; (80111ec <vTaskSwitchContext+0xf8>)
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	4b26      	ldr	r3, [pc, #152]	; (80111ec <vTaskSwitchContext+0xf8>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	3334      	adds	r3, #52	; 0x34
 8011156:	4619      	mov	r1, r3
 8011158:	4610      	mov	r0, r2
 801115a:	f7ef fec1 	bl	8000ee0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <vTaskSwitchContext+0xfc>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	fab3 f383 	clz	r3, r3
 801116a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801116c:	7afb      	ldrb	r3, [r7, #11]
 801116e:	f1c3 031f 	rsb	r3, r3, #31
 8011172:	617b      	str	r3, [r7, #20]
 8011174:	491f      	ldr	r1, [pc, #124]	; (80111f4 <vTaskSwitchContext+0x100>)
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	4613      	mov	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	4413      	add	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	440b      	add	r3, r1
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10c      	bne.n	80111a2 <vTaskSwitchContext+0xae>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118c:	b672      	cpsid	i
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	b662      	cpsie	i
 801119c:	607b      	str	r3, [r7, #4]
}
 801119e:	bf00      	nop
 80111a0:	e7fe      	b.n	80111a0 <vTaskSwitchContext+0xac>
 80111a2:	697a      	ldr	r2, [r7, #20]
 80111a4:	4613      	mov	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	4413      	add	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	4a11      	ldr	r2, [pc, #68]	; (80111f4 <vTaskSwitchContext+0x100>)
 80111ae:	4413      	add	r3, r2
 80111b0:	613b      	str	r3, [r7, #16]
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	685a      	ldr	r2, [r3, #4]
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	605a      	str	r2, [r3, #4]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	3308      	adds	r3, #8
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d104      	bne.n	80111d2 <vTaskSwitchContext+0xde>
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	685a      	ldr	r2, [r3, #4]
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	605a      	str	r2, [r3, #4]
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	4a04      	ldr	r2, [pc, #16]	; (80111ec <vTaskSwitchContext+0xf8>)
 80111da:	6013      	str	r3, [r2, #0]
}
 80111dc:	bf00      	nop
 80111de:	3720      	adds	r7, #32
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	200002f8 	.word	0x200002f8
 80111e8:	200002ec 	.word	0x200002ec
 80111ec:	20000248 	.word	0x20000248
 80111f0:	200002e4 	.word	0x200002e4
 80111f4:	2000024c 	.word	0x2000024c

080111f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111fe:	4b0c      	ldr	r3, [pc, #48]	; (8011230 <prvResetNextTaskUnblockTime+0x38>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d104      	bne.n	8011212 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011208:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <prvResetNextTaskUnblockTime+0x3c>)
 801120a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801120e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011210:	e008      	b.n	8011224 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011212:	4b07      	ldr	r3, [pc, #28]	; (8011230 <prvResetNextTaskUnblockTime+0x38>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	4a04      	ldr	r2, [pc, #16]	; (8011234 <prvResetNextTaskUnblockTime+0x3c>)
 8011222:	6013      	str	r3, [r2, #0]
}
 8011224:	bf00      	nop
 8011226:	370c      	adds	r7, #12
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr
 8011230:	200002d8 	.word	0x200002d8
 8011234:	200002f4 	.word	0x200002f4
	...

08011240 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011240:	4b07      	ldr	r3, [pc, #28]	; (8011260 <pxCurrentTCBConst2>)
 8011242:	6819      	ldr	r1, [r3, #0]
 8011244:	6808      	ldr	r0, [r1, #0]
 8011246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124a:	f380 8809 	msr	PSP, r0
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f04f 0000 	mov.w	r0, #0
 8011256:	f380 8811 	msr	BASEPRI, r0
 801125a:	4770      	bx	lr
 801125c:	f3af 8000 	nop.w

08011260 <pxCurrentTCBConst2>:
 8011260:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011264:	bf00      	nop
 8011266:	bf00      	nop
	...

08011270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011270:	f3ef 8009 	mrs	r0, PSP
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	4b15      	ldr	r3, [pc, #84]	; (80112d0 <pxCurrentTCBConst>)
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	f01e 0f10 	tst.w	lr, #16
 8011280:	bf08      	it	eq
 8011282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128a:	6010      	str	r0, [r2, #0]
 801128c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011294:	b672      	cpsid	i
 8011296:	f380 8811 	msr	BASEPRI, r0
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	b662      	cpsie	i
 80112a4:	f7ff ff26 	bl	80110f4 <vTaskSwitchContext>
 80112a8:	f04f 0000 	mov.w	r0, #0
 80112ac:	f380 8811 	msr	BASEPRI, r0
 80112b0:	bc09      	pop	{r0, r3}
 80112b2:	6819      	ldr	r1, [r3, #0]
 80112b4:	6808      	ldr	r0, [r1, #0]
 80112b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ba:	f01e 0f10 	tst.w	lr, #16
 80112be:	bf08      	it	eq
 80112c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112c4:	f380 8809 	msr	PSP, r0
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop

080112d0 <pxCurrentTCBConst>:
 80112d0:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80112d4:	bf00      	nop
 80112d6:	bf00      	nop

080112d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	b672      	cpsid	i
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	b662      	cpsie	i
 80112f2:	607b      	str	r3, [r7, #4]
}
 80112f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112f6:	f7ff fe43 	bl	8010f80 <xTaskIncrementTick>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d003      	beq.n	8011308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011300:	4b06      	ldr	r3, [pc, #24]	; (801131c <SysTick_Handler+0x44>)
 8011302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	2300      	movs	r3, #0
 801130a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	e000ed04 	.word	0xe000ed04

08011320 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011324:	4802      	ldr	r0, [pc, #8]	; (8011330 <MX_USB_HOST_Process+0x10>)
 8011326:	f7fe fbd7 	bl	800fad8 <USBH_Process>
}
 801132a:	bf00      	nop
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	20040cc8 	.word	0x20040cc8

08011334 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011342:	4618      	mov	r0, r3
 8011344:	f7fe ff8c 	bl	8010260 <USBH_LL_IncTimer>
}
 8011348:	bf00      	nop
 801134a:	3708      	adds	r7, #8
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801135e:	4618      	mov	r0, r3
 8011360:	f7fe ffc4 	bl	80102ec <USBH_LL_Connect>
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801137a:	4618      	mov	r0, r3
 801137c:	f7fe ffcd 	bl	801031a <USBH_LL_Disconnect>
}
 8011380:	bf00      	nop
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	460b      	mov	r3, r1
 8011392:	70fb      	strb	r3, [r7, #3]
 8011394:	4613      	mov	r3, r2
 8011396:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011398:	bf00      	nop
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe ff7e 	bl	80102b4 <USBH_LL_PortEnabled>
}
 80113b8:	bf00      	nop
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fe ff7e 	bl	80102d0 <USBH_LL_PortDisabled>
}
 80113d4:	bf00      	nop
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7f4 ff7c 	bl	80062f0 <HAL_HCD_Start>
 80113f8:	4603      	mov	r3, r0
 80113fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	4618      	mov	r0, r3
 8011400:	f000 f8fa 	bl	80115f8 <USBH_Get_USB_Status>
 8011404:	4603      	mov	r3, r0
 8011406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011408:	7bbb      	ldrb	r3, [r7, #14]
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b084      	sub	sp, #16
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011428:	4618      	mov	r0, r3
 801142a:	f7f4 ff84 	bl	8006336 <HAL_HCD_Stop>
 801142e:	4603      	mov	r3, r0
 8011430:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011432:	7bfb      	ldrb	r3, [r7, #15]
 8011434:	4618      	mov	r0, r3
 8011436:	f000 f8df 	bl	80115f8 <USBH_Get_USB_Status>
 801143a:	4603      	mov	r3, r0
 801143c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801143e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011450:	2301      	movs	r3, #1
 8011452:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801145a:	4618      	mov	r0, r3
 801145c:	f7f4 ffaa 	bl	80063b4 <HAL_HCD_GetCurrentSpeed>
 8011460:	4603      	mov	r3, r0
 8011462:	2b02      	cmp	r3, #2
 8011464:	d00c      	beq.n	8011480 <USBH_LL_GetSpeed+0x38>
 8011466:	2b02      	cmp	r3, #2
 8011468:	d80d      	bhi.n	8011486 <USBH_LL_GetSpeed+0x3e>
 801146a:	2b00      	cmp	r3, #0
 801146c:	d002      	beq.n	8011474 <USBH_LL_GetSpeed+0x2c>
 801146e:	2b01      	cmp	r3, #1
 8011470:	d003      	beq.n	801147a <USBH_LL_GetSpeed+0x32>
 8011472:	e008      	b.n	8011486 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011474:	2300      	movs	r3, #0
 8011476:	73fb      	strb	r3, [r7, #15]
    break;
 8011478:	e008      	b.n	801148c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801147a:	2301      	movs	r3, #1
 801147c:	73fb      	strb	r3, [r7, #15]
    break;
 801147e:	e005      	b.n	801148c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011480:	2302      	movs	r3, #2
 8011482:	73fb      	strb	r3, [r7, #15]
    break;
 8011484:	e002      	b.n	801148c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011486:	2301      	movs	r3, #1
 8011488:	73fb      	strb	r3, [r7, #15]
    break;
 801148a:	bf00      	nop
  }
  return  speed;
 801148c:	7bfb      	ldrb	r3, [r7, #15]
}
 801148e:	4618      	mov	r0, r3
 8011490:	3710      	adds	r7, #16
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011496:	b580      	push	{r7, lr}
 8011498:	b084      	sub	sp, #16
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7f4 ff5f 	bl	8006370 <HAL_HCD_ResetPort>
 80114b2:	4603      	mov	r3, r0
 80114b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
 80114b8:	4618      	mov	r0, r3
 80114ba:	f000 f89d 	bl	80115f8 <USBH_Get_USB_Status>
 80114be:	4603      	mov	r3, r0
 80114c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3710      	adds	r7, #16
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b089      	sub	sp, #36	; 0x24
 80114d0:	af04      	add	r7, sp, #16
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	4608      	mov	r0, r1
 80114d6:	4611      	mov	r1, r2
 80114d8:	461a      	mov	r2, r3
 80114da:	4603      	mov	r3, r0
 80114dc:	70fb      	strb	r3, [r7, #3]
 80114de:	460b      	mov	r3, r1
 80114e0:	70bb      	strb	r3, [r7, #2]
 80114e2:	4613      	mov	r3, r2
 80114e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114e6:	2300      	movs	r3, #0
 80114e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80114f4:	787c      	ldrb	r4, [r7, #1]
 80114f6:	78ba      	ldrb	r2, [r7, #2]
 80114f8:	78f9      	ldrb	r1, [r7, #3]
 80114fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114fc:	9302      	str	r3, [sp, #8]
 80114fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011502:	9301      	str	r3, [sp, #4]
 8011504:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	4623      	mov	r3, r4
 801150c:	f7f4 fc07 	bl	8005d1e <HAL_HCD_HC_Init>
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011514:	7bfb      	ldrb	r3, [r7, #15]
 8011516:	4618      	mov	r0, r3
 8011518:	f000 f86e 	bl	80115f8 <USBH_Get_USB_Status>
 801151c:	4603      	mov	r3, r0
 801151e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011520:	7bbb      	ldrb	r3, [r7, #14]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3714      	adds	r7, #20
 8011526:	46bd      	mov	sp, r7
 8011528:	bd90      	pop	{r4, r7, pc}

0801152a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801152a:	b590      	push	{r4, r7, lr}
 801152c:	b089      	sub	sp, #36	; 0x24
 801152e:	af04      	add	r7, sp, #16
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	4608      	mov	r0, r1
 8011534:	4611      	mov	r1, r2
 8011536:	461a      	mov	r2, r3
 8011538:	4603      	mov	r3, r0
 801153a:	70fb      	strb	r3, [r7, #3]
 801153c:	460b      	mov	r3, r1
 801153e:	70bb      	strb	r3, [r7, #2]
 8011540:	4613      	mov	r3, r2
 8011542:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011544:	2300      	movs	r3, #0
 8011546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011552:	787c      	ldrb	r4, [r7, #1]
 8011554:	78ba      	ldrb	r2, [r7, #2]
 8011556:	78f9      	ldrb	r1, [r7, #3]
 8011558:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801155c:	9303      	str	r3, [sp, #12]
 801155e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011560:	9302      	str	r3, [sp, #8]
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	9301      	str	r3, [sp, #4]
 8011566:	f897 3020 	ldrb.w	r3, [r7, #32]
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	4623      	mov	r3, r4
 801156e:	f7f4 fc65 	bl	8005e3c <HAL_HCD_HC_SubmitRequest>
 8011572:	4603      	mov	r3, r0
 8011574:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011576:	7bfb      	ldrb	r3, [r7, #15]
 8011578:	4618      	mov	r0, r3
 801157a:	f000 f83d 	bl	80115f8 <USBH_Get_USB_Status>
 801157e:	4603      	mov	r3, r0
 8011580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011582:	7bbb      	ldrb	r3, [r7, #14]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3714      	adds	r7, #20
 8011588:	46bd      	mov	sp, r7
 801158a:	bd90      	pop	{r4, r7, pc}

0801158c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801159e:	78fa      	ldrb	r2, [r7, #3]
 80115a0:	4611      	mov	r1, r2
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7f4 fef2 	bl	800638c <HAL_HCD_HC_GetURBState>
 80115a8:	4603      	mov	r3, r0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	460b      	mov	r3, r1
 80115bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d103      	bne.n	80115d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80115c8:	78fb      	ldrb	r3, [r7, #3]
 80115ca:	4618      	mov	r0, r3
 80115cc:	f000 f840 	bl	8011650 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80115d0:	20c8      	movs	r0, #200	; 0xc8
 80115d2:	f7f2 fdb1 	bl	8004138 <HAL_Delay>
  return USBH_OK;
 80115d6:	2300      	movs	r3, #0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f7f2 fda5 	bl	8004138 <HAL_Delay>
}
 80115ee:	bf00      	nop
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
	...

080115f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011602:	2300      	movs	r3, #0
 8011604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011606:	79fb      	ldrb	r3, [r7, #7]
 8011608:	2b03      	cmp	r3, #3
 801160a:	d817      	bhi.n	801163c <USBH_Get_USB_Status+0x44>
 801160c:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <USBH_Get_USB_Status+0x1c>)
 801160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011612:	bf00      	nop
 8011614:	08011625 	.word	0x08011625
 8011618:	0801162b 	.word	0x0801162b
 801161c:	08011631 	.word	0x08011631
 8011620:	08011637 	.word	0x08011637
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	73fb      	strb	r3, [r7, #15]
    break;
 8011628:	e00b      	b.n	8011642 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801162a:	2302      	movs	r3, #2
 801162c:	73fb      	strb	r3, [r7, #15]
    break;
 801162e:	e008      	b.n	8011642 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011630:	2301      	movs	r3, #1
 8011632:	73fb      	strb	r3, [r7, #15]
    break;
 8011634:	e005      	b.n	8011642 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011636:	2302      	movs	r3, #2
 8011638:	73fb      	strb	r3, [r7, #15]
    break;
 801163a:	e002      	b.n	8011642 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801163c:	2302      	movs	r3, #2
 801163e:	73fb      	strb	r3, [r7, #15]
    break;
 8011640:	bf00      	nop
  }
  return usb_status;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801165a:	79fb      	ldrb	r3, [r7, #7]
 801165c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d102      	bne.n	801166a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011664:	2301      	movs	r3, #1
 8011666:	73fb      	strb	r3, [r7, #15]
 8011668:	e001      	b.n	801166e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801166a:	2300      	movs	r3, #0
 801166c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801166e:	7bfb      	ldrb	r3, [r7, #15]
 8011670:	461a      	mov	r2, r3
 8011672:	2120      	movs	r1, #32
 8011674:	4803      	ldr	r0, [pc, #12]	; (8011684 <MX_DriverVbusFS+0x34>)
 8011676:	f7f4 fafb 	bl	8005c70 <HAL_GPIO_WritePin>
}
 801167a:	bf00      	nop
 801167c:	3710      	adds	r7, #16
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	40020c00 	.word	0x40020c00

08011688 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8011688:	b480      	push	{r7}
 801168a:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 801168c:	4b02      	ldr	r3, [pc, #8]	; (8011698 <ai_tonecrafter_data_weights_get+0x10>)

}
 801168e:	4618      	mov	r0, r3
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	08015d38 	.word	0x08015d38

0801169c <__errno>:
 801169c:	4b01      	ldr	r3, [pc, #4]	; (80116a4 <__errno+0x8>)
 801169e:	6818      	ldr	r0, [r3, #0]
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	20000018 	.word	0x20000018

080116a8 <__libc_init_array>:
 80116a8:	b570      	push	{r4, r5, r6, lr}
 80116aa:	4d0d      	ldr	r5, [pc, #52]	; (80116e0 <__libc_init_array+0x38>)
 80116ac:	4c0d      	ldr	r4, [pc, #52]	; (80116e4 <__libc_init_array+0x3c>)
 80116ae:	1b64      	subs	r4, r4, r5
 80116b0:	10a4      	asrs	r4, r4, #2
 80116b2:	2600      	movs	r6, #0
 80116b4:	42a6      	cmp	r6, r4
 80116b6:	d109      	bne.n	80116cc <__libc_init_array+0x24>
 80116b8:	4d0b      	ldr	r5, [pc, #44]	; (80116e8 <__libc_init_array+0x40>)
 80116ba:	4c0c      	ldr	r4, [pc, #48]	; (80116ec <__libc_init_array+0x44>)
 80116bc:	f002 fd68 	bl	8014190 <_init>
 80116c0:	1b64      	subs	r4, r4, r5
 80116c2:	10a4      	asrs	r4, r4, #2
 80116c4:	2600      	movs	r6, #0
 80116c6:	42a6      	cmp	r6, r4
 80116c8:	d105      	bne.n	80116d6 <__libc_init_array+0x2e>
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80116d0:	4798      	blx	r3
 80116d2:	3601      	adds	r6, #1
 80116d4:	e7ee      	b.n	80116b4 <__libc_init_array+0xc>
 80116d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80116da:	4798      	blx	r3
 80116dc:	3601      	adds	r6, #1
 80116de:	e7f2      	b.n	80116c6 <__libc_init_array+0x1e>
 80116e0:	08019208 	.word	0x08019208
 80116e4:	08019208 	.word	0x08019208
 80116e8:	08019208 	.word	0x08019208
 80116ec:	0801920c 	.word	0x0801920c

080116f0 <malloc>:
 80116f0:	4b02      	ldr	r3, [pc, #8]	; (80116fc <malloc+0xc>)
 80116f2:	4601      	mov	r1, r0
 80116f4:	6818      	ldr	r0, [r3, #0]
 80116f6:	f000 b869 	b.w	80117cc <_malloc_r>
 80116fa:	bf00      	nop
 80116fc:	20000018 	.word	0x20000018

08011700 <memcpy>:
 8011700:	440a      	add	r2, r1
 8011702:	4291      	cmp	r1, r2
 8011704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011708:	d100      	bne.n	801170c <memcpy+0xc>
 801170a:	4770      	bx	lr
 801170c:	b510      	push	{r4, lr}
 801170e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011716:	4291      	cmp	r1, r2
 8011718:	d1f9      	bne.n	801170e <memcpy+0xe>
 801171a:	bd10      	pop	{r4, pc}

0801171c <memset>:
 801171c:	4402      	add	r2, r0
 801171e:	4603      	mov	r3, r0
 8011720:	4293      	cmp	r3, r2
 8011722:	d100      	bne.n	8011726 <memset+0xa>
 8011724:	4770      	bx	lr
 8011726:	f803 1b01 	strb.w	r1, [r3], #1
 801172a:	e7f9      	b.n	8011720 <memset+0x4>

0801172c <_free_r>:
 801172c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801172e:	2900      	cmp	r1, #0
 8011730:	d048      	beq.n	80117c4 <_free_r+0x98>
 8011732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011736:	9001      	str	r0, [sp, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f1a1 0404 	sub.w	r4, r1, #4
 801173e:	bfb8      	it	lt
 8011740:	18e4      	addlt	r4, r4, r3
 8011742:	f001 fed3 	bl	80134ec <__malloc_lock>
 8011746:	4a20      	ldr	r2, [pc, #128]	; (80117c8 <_free_r+0x9c>)
 8011748:	9801      	ldr	r0, [sp, #4]
 801174a:	6813      	ldr	r3, [r2, #0]
 801174c:	4615      	mov	r5, r2
 801174e:	b933      	cbnz	r3, 801175e <_free_r+0x32>
 8011750:	6063      	str	r3, [r4, #4]
 8011752:	6014      	str	r4, [r2, #0]
 8011754:	b003      	add	sp, #12
 8011756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801175a:	f001 becd 	b.w	80134f8 <__malloc_unlock>
 801175e:	42a3      	cmp	r3, r4
 8011760:	d90b      	bls.n	801177a <_free_r+0x4e>
 8011762:	6821      	ldr	r1, [r4, #0]
 8011764:	1862      	adds	r2, r4, r1
 8011766:	4293      	cmp	r3, r2
 8011768:	bf04      	itt	eq
 801176a:	681a      	ldreq	r2, [r3, #0]
 801176c:	685b      	ldreq	r3, [r3, #4]
 801176e:	6063      	str	r3, [r4, #4]
 8011770:	bf04      	itt	eq
 8011772:	1852      	addeq	r2, r2, r1
 8011774:	6022      	streq	r2, [r4, #0]
 8011776:	602c      	str	r4, [r5, #0]
 8011778:	e7ec      	b.n	8011754 <_free_r+0x28>
 801177a:	461a      	mov	r2, r3
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	b10b      	cbz	r3, 8011784 <_free_r+0x58>
 8011780:	42a3      	cmp	r3, r4
 8011782:	d9fa      	bls.n	801177a <_free_r+0x4e>
 8011784:	6811      	ldr	r1, [r2, #0]
 8011786:	1855      	adds	r5, r2, r1
 8011788:	42a5      	cmp	r5, r4
 801178a:	d10b      	bne.n	80117a4 <_free_r+0x78>
 801178c:	6824      	ldr	r4, [r4, #0]
 801178e:	4421      	add	r1, r4
 8011790:	1854      	adds	r4, r2, r1
 8011792:	42a3      	cmp	r3, r4
 8011794:	6011      	str	r1, [r2, #0]
 8011796:	d1dd      	bne.n	8011754 <_free_r+0x28>
 8011798:	681c      	ldr	r4, [r3, #0]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	6053      	str	r3, [r2, #4]
 801179e:	4421      	add	r1, r4
 80117a0:	6011      	str	r1, [r2, #0]
 80117a2:	e7d7      	b.n	8011754 <_free_r+0x28>
 80117a4:	d902      	bls.n	80117ac <_free_r+0x80>
 80117a6:	230c      	movs	r3, #12
 80117a8:	6003      	str	r3, [r0, #0]
 80117aa:	e7d3      	b.n	8011754 <_free_r+0x28>
 80117ac:	6825      	ldr	r5, [r4, #0]
 80117ae:	1961      	adds	r1, r4, r5
 80117b0:	428b      	cmp	r3, r1
 80117b2:	bf04      	itt	eq
 80117b4:	6819      	ldreq	r1, [r3, #0]
 80117b6:	685b      	ldreq	r3, [r3, #4]
 80117b8:	6063      	str	r3, [r4, #4]
 80117ba:	bf04      	itt	eq
 80117bc:	1949      	addeq	r1, r1, r5
 80117be:	6021      	streq	r1, [r4, #0]
 80117c0:	6054      	str	r4, [r2, #4]
 80117c2:	e7c7      	b.n	8011754 <_free_r+0x28>
 80117c4:	b003      	add	sp, #12
 80117c6:	bd30      	pop	{r4, r5, pc}
 80117c8:	200002fc 	.word	0x200002fc

080117cc <_malloc_r>:
 80117cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ce:	1ccd      	adds	r5, r1, #3
 80117d0:	f025 0503 	bic.w	r5, r5, #3
 80117d4:	3508      	adds	r5, #8
 80117d6:	2d0c      	cmp	r5, #12
 80117d8:	bf38      	it	cc
 80117da:	250c      	movcc	r5, #12
 80117dc:	2d00      	cmp	r5, #0
 80117de:	4606      	mov	r6, r0
 80117e0:	db01      	blt.n	80117e6 <_malloc_r+0x1a>
 80117e2:	42a9      	cmp	r1, r5
 80117e4:	d903      	bls.n	80117ee <_malloc_r+0x22>
 80117e6:	230c      	movs	r3, #12
 80117e8:	6033      	str	r3, [r6, #0]
 80117ea:	2000      	movs	r0, #0
 80117ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ee:	f001 fe7d 	bl	80134ec <__malloc_lock>
 80117f2:	4921      	ldr	r1, [pc, #132]	; (8011878 <_malloc_r+0xac>)
 80117f4:	680a      	ldr	r2, [r1, #0]
 80117f6:	4614      	mov	r4, r2
 80117f8:	b99c      	cbnz	r4, 8011822 <_malloc_r+0x56>
 80117fa:	4f20      	ldr	r7, [pc, #128]	; (801187c <_malloc_r+0xb0>)
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	b923      	cbnz	r3, 801180a <_malloc_r+0x3e>
 8011800:	4621      	mov	r1, r4
 8011802:	4630      	mov	r0, r6
 8011804:	f000 fcd4 	bl	80121b0 <_sbrk_r>
 8011808:	6038      	str	r0, [r7, #0]
 801180a:	4629      	mov	r1, r5
 801180c:	4630      	mov	r0, r6
 801180e:	f000 fccf 	bl	80121b0 <_sbrk_r>
 8011812:	1c43      	adds	r3, r0, #1
 8011814:	d123      	bne.n	801185e <_malloc_r+0x92>
 8011816:	230c      	movs	r3, #12
 8011818:	6033      	str	r3, [r6, #0]
 801181a:	4630      	mov	r0, r6
 801181c:	f001 fe6c 	bl	80134f8 <__malloc_unlock>
 8011820:	e7e3      	b.n	80117ea <_malloc_r+0x1e>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	1b5b      	subs	r3, r3, r5
 8011826:	d417      	bmi.n	8011858 <_malloc_r+0x8c>
 8011828:	2b0b      	cmp	r3, #11
 801182a:	d903      	bls.n	8011834 <_malloc_r+0x68>
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	441c      	add	r4, r3
 8011830:	6025      	str	r5, [r4, #0]
 8011832:	e004      	b.n	801183e <_malloc_r+0x72>
 8011834:	6863      	ldr	r3, [r4, #4]
 8011836:	42a2      	cmp	r2, r4
 8011838:	bf0c      	ite	eq
 801183a:	600b      	streq	r3, [r1, #0]
 801183c:	6053      	strne	r3, [r2, #4]
 801183e:	4630      	mov	r0, r6
 8011840:	f001 fe5a 	bl	80134f8 <__malloc_unlock>
 8011844:	f104 000b 	add.w	r0, r4, #11
 8011848:	1d23      	adds	r3, r4, #4
 801184a:	f020 0007 	bic.w	r0, r0, #7
 801184e:	1ac2      	subs	r2, r0, r3
 8011850:	d0cc      	beq.n	80117ec <_malloc_r+0x20>
 8011852:	1a1b      	subs	r3, r3, r0
 8011854:	50a3      	str	r3, [r4, r2]
 8011856:	e7c9      	b.n	80117ec <_malloc_r+0x20>
 8011858:	4622      	mov	r2, r4
 801185a:	6864      	ldr	r4, [r4, #4]
 801185c:	e7cc      	b.n	80117f8 <_malloc_r+0x2c>
 801185e:	1cc4      	adds	r4, r0, #3
 8011860:	f024 0403 	bic.w	r4, r4, #3
 8011864:	42a0      	cmp	r0, r4
 8011866:	d0e3      	beq.n	8011830 <_malloc_r+0x64>
 8011868:	1a21      	subs	r1, r4, r0
 801186a:	4630      	mov	r0, r6
 801186c:	f000 fca0 	bl	80121b0 <_sbrk_r>
 8011870:	3001      	adds	r0, #1
 8011872:	d1dd      	bne.n	8011830 <_malloc_r+0x64>
 8011874:	e7cf      	b.n	8011816 <_malloc_r+0x4a>
 8011876:	bf00      	nop
 8011878:	200002fc 	.word	0x200002fc
 801187c:	20000300 	.word	0x20000300

08011880 <__cvt>:
 8011880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011884:	ec55 4b10 	vmov	r4, r5, d0
 8011888:	2d00      	cmp	r5, #0
 801188a:	460e      	mov	r6, r1
 801188c:	4619      	mov	r1, r3
 801188e:	462b      	mov	r3, r5
 8011890:	bfbb      	ittet	lt
 8011892:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011896:	461d      	movlt	r5, r3
 8011898:	2300      	movge	r3, #0
 801189a:	232d      	movlt	r3, #45	; 0x2d
 801189c:	700b      	strb	r3, [r1, #0]
 801189e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118a4:	4691      	mov	r9, r2
 80118a6:	f023 0820 	bic.w	r8, r3, #32
 80118aa:	bfbc      	itt	lt
 80118ac:	4622      	movlt	r2, r4
 80118ae:	4614      	movlt	r4, r2
 80118b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80118b4:	d005      	beq.n	80118c2 <__cvt+0x42>
 80118b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80118ba:	d100      	bne.n	80118be <__cvt+0x3e>
 80118bc:	3601      	adds	r6, #1
 80118be:	2102      	movs	r1, #2
 80118c0:	e000      	b.n	80118c4 <__cvt+0x44>
 80118c2:	2103      	movs	r1, #3
 80118c4:	ab03      	add	r3, sp, #12
 80118c6:	9301      	str	r3, [sp, #4]
 80118c8:	ab02      	add	r3, sp, #8
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	ec45 4b10 	vmov	d0, r4, r5
 80118d0:	4653      	mov	r3, sl
 80118d2:	4632      	mov	r2, r6
 80118d4:	f000 fde8 	bl	80124a8 <_dtoa_r>
 80118d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80118dc:	4607      	mov	r7, r0
 80118de:	d102      	bne.n	80118e6 <__cvt+0x66>
 80118e0:	f019 0f01 	tst.w	r9, #1
 80118e4:	d022      	beq.n	801192c <__cvt+0xac>
 80118e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80118ea:	eb07 0906 	add.w	r9, r7, r6
 80118ee:	d110      	bne.n	8011912 <__cvt+0x92>
 80118f0:	783b      	ldrb	r3, [r7, #0]
 80118f2:	2b30      	cmp	r3, #48	; 0x30
 80118f4:	d10a      	bne.n	801190c <__cvt+0x8c>
 80118f6:	2200      	movs	r2, #0
 80118f8:	2300      	movs	r3, #0
 80118fa:	4620      	mov	r0, r4
 80118fc:	4629      	mov	r1, r5
 80118fe:	f7ef f903 	bl	8000b08 <__aeabi_dcmpeq>
 8011902:	b918      	cbnz	r0, 801190c <__cvt+0x8c>
 8011904:	f1c6 0601 	rsb	r6, r6, #1
 8011908:	f8ca 6000 	str.w	r6, [sl]
 801190c:	f8da 3000 	ldr.w	r3, [sl]
 8011910:	4499      	add	r9, r3
 8011912:	2200      	movs	r2, #0
 8011914:	2300      	movs	r3, #0
 8011916:	4620      	mov	r0, r4
 8011918:	4629      	mov	r1, r5
 801191a:	f7ef f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 801191e:	b108      	cbz	r0, 8011924 <__cvt+0xa4>
 8011920:	f8cd 900c 	str.w	r9, [sp, #12]
 8011924:	2230      	movs	r2, #48	; 0x30
 8011926:	9b03      	ldr	r3, [sp, #12]
 8011928:	454b      	cmp	r3, r9
 801192a:	d307      	bcc.n	801193c <__cvt+0xbc>
 801192c:	9b03      	ldr	r3, [sp, #12]
 801192e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011930:	1bdb      	subs	r3, r3, r7
 8011932:	4638      	mov	r0, r7
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	b004      	add	sp, #16
 8011938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193c:	1c59      	adds	r1, r3, #1
 801193e:	9103      	str	r1, [sp, #12]
 8011940:	701a      	strb	r2, [r3, #0]
 8011942:	e7f0      	b.n	8011926 <__cvt+0xa6>

08011944 <__exponent>:
 8011944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011946:	4603      	mov	r3, r0
 8011948:	2900      	cmp	r1, #0
 801194a:	bfb8      	it	lt
 801194c:	4249      	neglt	r1, r1
 801194e:	f803 2b02 	strb.w	r2, [r3], #2
 8011952:	bfb4      	ite	lt
 8011954:	222d      	movlt	r2, #45	; 0x2d
 8011956:	222b      	movge	r2, #43	; 0x2b
 8011958:	2909      	cmp	r1, #9
 801195a:	7042      	strb	r2, [r0, #1]
 801195c:	dd2a      	ble.n	80119b4 <__exponent+0x70>
 801195e:	f10d 0407 	add.w	r4, sp, #7
 8011962:	46a4      	mov	ip, r4
 8011964:	270a      	movs	r7, #10
 8011966:	46a6      	mov	lr, r4
 8011968:	460a      	mov	r2, r1
 801196a:	fb91 f6f7 	sdiv	r6, r1, r7
 801196e:	fb07 1516 	mls	r5, r7, r6, r1
 8011972:	3530      	adds	r5, #48	; 0x30
 8011974:	2a63      	cmp	r2, #99	; 0x63
 8011976:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801197a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801197e:	4631      	mov	r1, r6
 8011980:	dcf1      	bgt.n	8011966 <__exponent+0x22>
 8011982:	3130      	adds	r1, #48	; 0x30
 8011984:	f1ae 0502 	sub.w	r5, lr, #2
 8011988:	f804 1c01 	strb.w	r1, [r4, #-1]
 801198c:	1c44      	adds	r4, r0, #1
 801198e:	4629      	mov	r1, r5
 8011990:	4561      	cmp	r1, ip
 8011992:	d30a      	bcc.n	80119aa <__exponent+0x66>
 8011994:	f10d 0209 	add.w	r2, sp, #9
 8011998:	eba2 020e 	sub.w	r2, r2, lr
 801199c:	4565      	cmp	r5, ip
 801199e:	bf88      	it	hi
 80119a0:	2200      	movhi	r2, #0
 80119a2:	4413      	add	r3, r2
 80119a4:	1a18      	subs	r0, r3, r0
 80119a6:	b003      	add	sp, #12
 80119a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80119b2:	e7ed      	b.n	8011990 <__exponent+0x4c>
 80119b4:	2330      	movs	r3, #48	; 0x30
 80119b6:	3130      	adds	r1, #48	; 0x30
 80119b8:	7083      	strb	r3, [r0, #2]
 80119ba:	70c1      	strb	r1, [r0, #3]
 80119bc:	1d03      	adds	r3, r0, #4
 80119be:	e7f1      	b.n	80119a4 <__exponent+0x60>

080119c0 <_printf_float>:
 80119c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c4:	ed2d 8b02 	vpush	{d8}
 80119c8:	b08d      	sub	sp, #52	; 0x34
 80119ca:	460c      	mov	r4, r1
 80119cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80119d0:	4616      	mov	r6, r2
 80119d2:	461f      	mov	r7, r3
 80119d4:	4605      	mov	r5, r0
 80119d6:	f001 fd1d 	bl	8013414 <_localeconv_r>
 80119da:	f8d0 a000 	ldr.w	sl, [r0]
 80119de:	4650      	mov	r0, sl
 80119e0:	f7ee fc16 	bl	8000210 <strlen>
 80119e4:	2300      	movs	r3, #0
 80119e6:	930a      	str	r3, [sp, #40]	; 0x28
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	9305      	str	r3, [sp, #20]
 80119ec:	f8d8 3000 	ldr.w	r3, [r8]
 80119f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80119f4:	3307      	adds	r3, #7
 80119f6:	f023 0307 	bic.w	r3, r3, #7
 80119fa:	f103 0208 	add.w	r2, r3, #8
 80119fe:	f8c8 2000 	str.w	r2, [r8]
 8011a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a12:	9307      	str	r3, [sp, #28]
 8011a14:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a18:	ee08 0a10 	vmov	s16, r0
 8011a1c:	4b9f      	ldr	r3, [pc, #636]	; (8011c9c <_printf_float+0x2dc>)
 8011a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a26:	f7ef f8a1 	bl	8000b6c <__aeabi_dcmpun>
 8011a2a:	bb88      	cbnz	r0, 8011a90 <_printf_float+0xd0>
 8011a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a30:	4b9a      	ldr	r3, [pc, #616]	; (8011c9c <_printf_float+0x2dc>)
 8011a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a36:	f7ef f87b 	bl	8000b30 <__aeabi_dcmple>
 8011a3a:	bb48      	cbnz	r0, 8011a90 <_printf_float+0xd0>
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	2300      	movs	r3, #0
 8011a40:	4640      	mov	r0, r8
 8011a42:	4649      	mov	r1, r9
 8011a44:	f7ef f86a 	bl	8000b1c <__aeabi_dcmplt>
 8011a48:	b110      	cbz	r0, 8011a50 <_printf_float+0x90>
 8011a4a:	232d      	movs	r3, #45	; 0x2d
 8011a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a50:	4b93      	ldr	r3, [pc, #588]	; (8011ca0 <_printf_float+0x2e0>)
 8011a52:	4894      	ldr	r0, [pc, #592]	; (8011ca4 <_printf_float+0x2e4>)
 8011a54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011a58:	bf94      	ite	ls
 8011a5a:	4698      	movls	r8, r3
 8011a5c:	4680      	movhi	r8, r0
 8011a5e:	2303      	movs	r3, #3
 8011a60:	6123      	str	r3, [r4, #16]
 8011a62:	9b05      	ldr	r3, [sp, #20]
 8011a64:	f023 0204 	bic.w	r2, r3, #4
 8011a68:	6022      	str	r2, [r4, #0]
 8011a6a:	f04f 0900 	mov.w	r9, #0
 8011a6e:	9700      	str	r7, [sp, #0]
 8011a70:	4633      	mov	r3, r6
 8011a72:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a74:	4621      	mov	r1, r4
 8011a76:	4628      	mov	r0, r5
 8011a78:	f000 f9d8 	bl	8011e2c <_printf_common>
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	f040 8090 	bne.w	8011ba2 <_printf_float+0x1e2>
 8011a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a86:	b00d      	add	sp, #52	; 0x34
 8011a88:	ecbd 8b02 	vpop	{d8}
 8011a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a90:	4642      	mov	r2, r8
 8011a92:	464b      	mov	r3, r9
 8011a94:	4640      	mov	r0, r8
 8011a96:	4649      	mov	r1, r9
 8011a98:	f7ef f868 	bl	8000b6c <__aeabi_dcmpun>
 8011a9c:	b140      	cbz	r0, 8011ab0 <_printf_float+0xf0>
 8011a9e:	464b      	mov	r3, r9
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	bfbc      	itt	lt
 8011aa4:	232d      	movlt	r3, #45	; 0x2d
 8011aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011aaa:	487f      	ldr	r0, [pc, #508]	; (8011ca8 <_printf_float+0x2e8>)
 8011aac:	4b7f      	ldr	r3, [pc, #508]	; (8011cac <_printf_float+0x2ec>)
 8011aae:	e7d1      	b.n	8011a54 <_printf_float+0x94>
 8011ab0:	6863      	ldr	r3, [r4, #4]
 8011ab2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011ab6:	9206      	str	r2, [sp, #24]
 8011ab8:	1c5a      	adds	r2, r3, #1
 8011aba:	d13f      	bne.n	8011b3c <_printf_float+0x17c>
 8011abc:	2306      	movs	r3, #6
 8011abe:	6063      	str	r3, [r4, #4]
 8011ac0:	9b05      	ldr	r3, [sp, #20]
 8011ac2:	6861      	ldr	r1, [r4, #4]
 8011ac4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011ac8:	2300      	movs	r3, #0
 8011aca:	9303      	str	r3, [sp, #12]
 8011acc:	ab0a      	add	r3, sp, #40	; 0x28
 8011ace:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011ad2:	ab09      	add	r3, sp, #36	; 0x24
 8011ad4:	ec49 8b10 	vmov	d0, r8, r9
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	6022      	str	r2, [r4, #0]
 8011adc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f7ff fecd 	bl	8011880 <__cvt>
 8011ae6:	9b06      	ldr	r3, [sp, #24]
 8011ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011aea:	2b47      	cmp	r3, #71	; 0x47
 8011aec:	4680      	mov	r8, r0
 8011aee:	d108      	bne.n	8011b02 <_printf_float+0x142>
 8011af0:	1cc8      	adds	r0, r1, #3
 8011af2:	db02      	blt.n	8011afa <_printf_float+0x13a>
 8011af4:	6863      	ldr	r3, [r4, #4]
 8011af6:	4299      	cmp	r1, r3
 8011af8:	dd41      	ble.n	8011b7e <_printf_float+0x1be>
 8011afa:	f1ab 0b02 	sub.w	fp, fp, #2
 8011afe:	fa5f fb8b 	uxtb.w	fp, fp
 8011b02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b06:	d820      	bhi.n	8011b4a <_printf_float+0x18a>
 8011b08:	3901      	subs	r1, #1
 8011b0a:	465a      	mov	r2, fp
 8011b0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b10:	9109      	str	r1, [sp, #36]	; 0x24
 8011b12:	f7ff ff17 	bl	8011944 <__exponent>
 8011b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b18:	1813      	adds	r3, r2, r0
 8011b1a:	2a01      	cmp	r2, #1
 8011b1c:	4681      	mov	r9, r0
 8011b1e:	6123      	str	r3, [r4, #16]
 8011b20:	dc02      	bgt.n	8011b28 <_printf_float+0x168>
 8011b22:	6822      	ldr	r2, [r4, #0]
 8011b24:	07d2      	lsls	r2, r2, #31
 8011b26:	d501      	bpl.n	8011b2c <_printf_float+0x16c>
 8011b28:	3301      	adds	r3, #1
 8011b2a:	6123      	str	r3, [r4, #16]
 8011b2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d09c      	beq.n	8011a6e <_printf_float+0xae>
 8011b34:	232d      	movs	r3, #45	; 0x2d
 8011b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b3a:	e798      	b.n	8011a6e <_printf_float+0xae>
 8011b3c:	9a06      	ldr	r2, [sp, #24]
 8011b3e:	2a47      	cmp	r2, #71	; 0x47
 8011b40:	d1be      	bne.n	8011ac0 <_printf_float+0x100>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1bc      	bne.n	8011ac0 <_printf_float+0x100>
 8011b46:	2301      	movs	r3, #1
 8011b48:	e7b9      	b.n	8011abe <_printf_float+0xfe>
 8011b4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011b4e:	d118      	bne.n	8011b82 <_printf_float+0x1c2>
 8011b50:	2900      	cmp	r1, #0
 8011b52:	6863      	ldr	r3, [r4, #4]
 8011b54:	dd0b      	ble.n	8011b6e <_printf_float+0x1ae>
 8011b56:	6121      	str	r1, [r4, #16]
 8011b58:	b913      	cbnz	r3, 8011b60 <_printf_float+0x1a0>
 8011b5a:	6822      	ldr	r2, [r4, #0]
 8011b5c:	07d0      	lsls	r0, r2, #31
 8011b5e:	d502      	bpl.n	8011b66 <_printf_float+0x1a6>
 8011b60:	3301      	adds	r3, #1
 8011b62:	440b      	add	r3, r1
 8011b64:	6123      	str	r3, [r4, #16]
 8011b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b68:	f04f 0900 	mov.w	r9, #0
 8011b6c:	e7de      	b.n	8011b2c <_printf_float+0x16c>
 8011b6e:	b913      	cbnz	r3, 8011b76 <_printf_float+0x1b6>
 8011b70:	6822      	ldr	r2, [r4, #0]
 8011b72:	07d2      	lsls	r2, r2, #31
 8011b74:	d501      	bpl.n	8011b7a <_printf_float+0x1ba>
 8011b76:	3302      	adds	r3, #2
 8011b78:	e7f4      	b.n	8011b64 <_printf_float+0x1a4>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e7f2      	b.n	8011b64 <_printf_float+0x1a4>
 8011b7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b84:	4299      	cmp	r1, r3
 8011b86:	db05      	blt.n	8011b94 <_printf_float+0x1d4>
 8011b88:	6823      	ldr	r3, [r4, #0]
 8011b8a:	6121      	str	r1, [r4, #16]
 8011b8c:	07d8      	lsls	r0, r3, #31
 8011b8e:	d5ea      	bpl.n	8011b66 <_printf_float+0x1a6>
 8011b90:	1c4b      	adds	r3, r1, #1
 8011b92:	e7e7      	b.n	8011b64 <_printf_float+0x1a4>
 8011b94:	2900      	cmp	r1, #0
 8011b96:	bfd4      	ite	le
 8011b98:	f1c1 0202 	rsble	r2, r1, #2
 8011b9c:	2201      	movgt	r2, #1
 8011b9e:	4413      	add	r3, r2
 8011ba0:	e7e0      	b.n	8011b64 <_printf_float+0x1a4>
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	055a      	lsls	r2, r3, #21
 8011ba6:	d407      	bmi.n	8011bb8 <_printf_float+0x1f8>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	4642      	mov	r2, r8
 8011bac:	4631      	mov	r1, r6
 8011bae:	4628      	mov	r0, r5
 8011bb0:	47b8      	blx	r7
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d12c      	bne.n	8011c10 <_printf_float+0x250>
 8011bb6:	e764      	b.n	8011a82 <_printf_float+0xc2>
 8011bb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011bbc:	f240 80e0 	bls.w	8011d80 <_printf_float+0x3c0>
 8011bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f7ee ff9e 	bl	8000b08 <__aeabi_dcmpeq>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d034      	beq.n	8011c3a <_printf_float+0x27a>
 8011bd0:	4a37      	ldr	r2, [pc, #220]	; (8011cb0 <_printf_float+0x2f0>)
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4631      	mov	r1, r6
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	47b8      	blx	r7
 8011bda:	3001      	adds	r0, #1
 8011bdc:	f43f af51 	beq.w	8011a82 <_printf_float+0xc2>
 8011be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011be4:	429a      	cmp	r2, r3
 8011be6:	db02      	blt.n	8011bee <_printf_float+0x22e>
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	07d8      	lsls	r0, r3, #31
 8011bec:	d510      	bpl.n	8011c10 <_printf_float+0x250>
 8011bee:	ee18 3a10 	vmov	r3, s16
 8011bf2:	4652      	mov	r2, sl
 8011bf4:	4631      	mov	r1, r6
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	47b8      	blx	r7
 8011bfa:	3001      	adds	r0, #1
 8011bfc:	f43f af41 	beq.w	8011a82 <_printf_float+0xc2>
 8011c00:	f04f 0800 	mov.w	r8, #0
 8011c04:	f104 091a 	add.w	r9, r4, #26
 8011c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c0a:	3b01      	subs	r3, #1
 8011c0c:	4543      	cmp	r3, r8
 8011c0e:	dc09      	bgt.n	8011c24 <_printf_float+0x264>
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	079b      	lsls	r3, r3, #30
 8011c14:	f100 8105 	bmi.w	8011e22 <_printf_float+0x462>
 8011c18:	68e0      	ldr	r0, [r4, #12]
 8011c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c1c:	4298      	cmp	r0, r3
 8011c1e:	bfb8      	it	lt
 8011c20:	4618      	movlt	r0, r3
 8011c22:	e730      	b.n	8011a86 <_printf_float+0xc6>
 8011c24:	2301      	movs	r3, #1
 8011c26:	464a      	mov	r2, r9
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	47b8      	blx	r7
 8011c2e:	3001      	adds	r0, #1
 8011c30:	f43f af27 	beq.w	8011a82 <_printf_float+0xc2>
 8011c34:	f108 0801 	add.w	r8, r8, #1
 8011c38:	e7e6      	b.n	8011c08 <_printf_float+0x248>
 8011c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	dc39      	bgt.n	8011cb4 <_printf_float+0x2f4>
 8011c40:	4a1b      	ldr	r2, [pc, #108]	; (8011cb0 <_printf_float+0x2f0>)
 8011c42:	2301      	movs	r3, #1
 8011c44:	4631      	mov	r1, r6
 8011c46:	4628      	mov	r0, r5
 8011c48:	47b8      	blx	r7
 8011c4a:	3001      	adds	r0, #1
 8011c4c:	f43f af19 	beq.w	8011a82 <_printf_float+0xc2>
 8011c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c54:	4313      	orrs	r3, r2
 8011c56:	d102      	bne.n	8011c5e <_printf_float+0x29e>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	07d9      	lsls	r1, r3, #31
 8011c5c:	d5d8      	bpl.n	8011c10 <_printf_float+0x250>
 8011c5e:	ee18 3a10 	vmov	r3, s16
 8011c62:	4652      	mov	r2, sl
 8011c64:	4631      	mov	r1, r6
 8011c66:	4628      	mov	r0, r5
 8011c68:	47b8      	blx	r7
 8011c6a:	3001      	adds	r0, #1
 8011c6c:	f43f af09 	beq.w	8011a82 <_printf_float+0xc2>
 8011c70:	f04f 0900 	mov.w	r9, #0
 8011c74:	f104 0a1a 	add.w	sl, r4, #26
 8011c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c7a:	425b      	negs	r3, r3
 8011c7c:	454b      	cmp	r3, r9
 8011c7e:	dc01      	bgt.n	8011c84 <_printf_float+0x2c4>
 8011c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c82:	e792      	b.n	8011baa <_printf_float+0x1ea>
 8011c84:	2301      	movs	r3, #1
 8011c86:	4652      	mov	r2, sl
 8011c88:	4631      	mov	r1, r6
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	47b8      	blx	r7
 8011c8e:	3001      	adds	r0, #1
 8011c90:	f43f aef7 	beq.w	8011a82 <_printf_float+0xc2>
 8011c94:	f109 0901 	add.w	r9, r9, #1
 8011c98:	e7ee      	b.n	8011c78 <_printf_float+0x2b8>
 8011c9a:	bf00      	nop
 8011c9c:	7fefffff 	.word	0x7fefffff
 8011ca0:	08018e20 	.word	0x08018e20
 8011ca4:	08018e24 	.word	0x08018e24
 8011ca8:	08018e2c 	.word	0x08018e2c
 8011cac:	08018e28 	.word	0x08018e28
 8011cb0:	08018e30 	.word	0x08018e30
 8011cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	bfa8      	it	ge
 8011cbc:	461a      	movge	r2, r3
 8011cbe:	2a00      	cmp	r2, #0
 8011cc0:	4691      	mov	r9, r2
 8011cc2:	dc37      	bgt.n	8011d34 <_printf_float+0x374>
 8011cc4:	f04f 0b00 	mov.w	fp, #0
 8011cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ccc:	f104 021a 	add.w	r2, r4, #26
 8011cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cd2:	9305      	str	r3, [sp, #20]
 8011cd4:	eba3 0309 	sub.w	r3, r3, r9
 8011cd8:	455b      	cmp	r3, fp
 8011cda:	dc33      	bgt.n	8011d44 <_printf_float+0x384>
 8011cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	db3b      	blt.n	8011d5c <_printf_float+0x39c>
 8011ce4:	6823      	ldr	r3, [r4, #0]
 8011ce6:	07da      	lsls	r2, r3, #31
 8011ce8:	d438      	bmi.n	8011d5c <_printf_float+0x39c>
 8011cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cec:	9b05      	ldr	r3, [sp, #20]
 8011cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	eba2 0901 	sub.w	r9, r2, r1
 8011cf6:	4599      	cmp	r9, r3
 8011cf8:	bfa8      	it	ge
 8011cfa:	4699      	movge	r9, r3
 8011cfc:	f1b9 0f00 	cmp.w	r9, #0
 8011d00:	dc35      	bgt.n	8011d6e <_printf_float+0x3ae>
 8011d02:	f04f 0800 	mov.w	r8, #0
 8011d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d0a:	f104 0a1a 	add.w	sl, r4, #26
 8011d0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d12:	1a9b      	subs	r3, r3, r2
 8011d14:	eba3 0309 	sub.w	r3, r3, r9
 8011d18:	4543      	cmp	r3, r8
 8011d1a:	f77f af79 	ble.w	8011c10 <_printf_float+0x250>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	4652      	mov	r2, sl
 8011d22:	4631      	mov	r1, r6
 8011d24:	4628      	mov	r0, r5
 8011d26:	47b8      	blx	r7
 8011d28:	3001      	adds	r0, #1
 8011d2a:	f43f aeaa 	beq.w	8011a82 <_printf_float+0xc2>
 8011d2e:	f108 0801 	add.w	r8, r8, #1
 8011d32:	e7ec      	b.n	8011d0e <_printf_float+0x34e>
 8011d34:	4613      	mov	r3, r2
 8011d36:	4631      	mov	r1, r6
 8011d38:	4642      	mov	r2, r8
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	47b8      	blx	r7
 8011d3e:	3001      	adds	r0, #1
 8011d40:	d1c0      	bne.n	8011cc4 <_printf_float+0x304>
 8011d42:	e69e      	b.n	8011a82 <_printf_float+0xc2>
 8011d44:	2301      	movs	r3, #1
 8011d46:	4631      	mov	r1, r6
 8011d48:	4628      	mov	r0, r5
 8011d4a:	9205      	str	r2, [sp, #20]
 8011d4c:	47b8      	blx	r7
 8011d4e:	3001      	adds	r0, #1
 8011d50:	f43f ae97 	beq.w	8011a82 <_printf_float+0xc2>
 8011d54:	9a05      	ldr	r2, [sp, #20]
 8011d56:	f10b 0b01 	add.w	fp, fp, #1
 8011d5a:	e7b9      	b.n	8011cd0 <_printf_float+0x310>
 8011d5c:	ee18 3a10 	vmov	r3, s16
 8011d60:	4652      	mov	r2, sl
 8011d62:	4631      	mov	r1, r6
 8011d64:	4628      	mov	r0, r5
 8011d66:	47b8      	blx	r7
 8011d68:	3001      	adds	r0, #1
 8011d6a:	d1be      	bne.n	8011cea <_printf_float+0x32a>
 8011d6c:	e689      	b.n	8011a82 <_printf_float+0xc2>
 8011d6e:	9a05      	ldr	r2, [sp, #20]
 8011d70:	464b      	mov	r3, r9
 8011d72:	4442      	add	r2, r8
 8011d74:	4631      	mov	r1, r6
 8011d76:	4628      	mov	r0, r5
 8011d78:	47b8      	blx	r7
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	d1c1      	bne.n	8011d02 <_printf_float+0x342>
 8011d7e:	e680      	b.n	8011a82 <_printf_float+0xc2>
 8011d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d82:	2a01      	cmp	r2, #1
 8011d84:	dc01      	bgt.n	8011d8a <_printf_float+0x3ca>
 8011d86:	07db      	lsls	r3, r3, #31
 8011d88:	d538      	bpl.n	8011dfc <_printf_float+0x43c>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	4642      	mov	r2, r8
 8011d8e:	4631      	mov	r1, r6
 8011d90:	4628      	mov	r0, r5
 8011d92:	47b8      	blx	r7
 8011d94:	3001      	adds	r0, #1
 8011d96:	f43f ae74 	beq.w	8011a82 <_printf_float+0xc2>
 8011d9a:	ee18 3a10 	vmov	r3, s16
 8011d9e:	4652      	mov	r2, sl
 8011da0:	4631      	mov	r1, r6
 8011da2:	4628      	mov	r0, r5
 8011da4:	47b8      	blx	r7
 8011da6:	3001      	adds	r0, #1
 8011da8:	f43f ae6b 	beq.w	8011a82 <_printf_float+0xc2>
 8011dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011db0:	2200      	movs	r2, #0
 8011db2:	2300      	movs	r3, #0
 8011db4:	f7ee fea8 	bl	8000b08 <__aeabi_dcmpeq>
 8011db8:	b9d8      	cbnz	r0, 8011df2 <_printf_float+0x432>
 8011dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dbc:	f108 0201 	add.w	r2, r8, #1
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	47b8      	blx	r7
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d10e      	bne.n	8011dea <_printf_float+0x42a>
 8011dcc:	e659      	b.n	8011a82 <_printf_float+0xc2>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	4652      	mov	r2, sl
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	47b8      	blx	r7
 8011dd8:	3001      	adds	r0, #1
 8011dda:	f43f ae52 	beq.w	8011a82 <_printf_float+0xc2>
 8011dde:	f108 0801 	add.w	r8, r8, #1
 8011de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011de4:	3b01      	subs	r3, #1
 8011de6:	4543      	cmp	r3, r8
 8011de8:	dcf1      	bgt.n	8011dce <_printf_float+0x40e>
 8011dea:	464b      	mov	r3, r9
 8011dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011df0:	e6dc      	b.n	8011bac <_printf_float+0x1ec>
 8011df2:	f04f 0800 	mov.w	r8, #0
 8011df6:	f104 0a1a 	add.w	sl, r4, #26
 8011dfa:	e7f2      	b.n	8011de2 <_printf_float+0x422>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4642      	mov	r2, r8
 8011e00:	e7df      	b.n	8011dc2 <_printf_float+0x402>
 8011e02:	2301      	movs	r3, #1
 8011e04:	464a      	mov	r2, r9
 8011e06:	4631      	mov	r1, r6
 8011e08:	4628      	mov	r0, r5
 8011e0a:	47b8      	blx	r7
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	f43f ae38 	beq.w	8011a82 <_printf_float+0xc2>
 8011e12:	f108 0801 	add.w	r8, r8, #1
 8011e16:	68e3      	ldr	r3, [r4, #12]
 8011e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e1a:	1a5b      	subs	r3, r3, r1
 8011e1c:	4543      	cmp	r3, r8
 8011e1e:	dcf0      	bgt.n	8011e02 <_printf_float+0x442>
 8011e20:	e6fa      	b.n	8011c18 <_printf_float+0x258>
 8011e22:	f04f 0800 	mov.w	r8, #0
 8011e26:	f104 0919 	add.w	r9, r4, #25
 8011e2a:	e7f4      	b.n	8011e16 <_printf_float+0x456>

08011e2c <_printf_common>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	4616      	mov	r6, r2
 8011e32:	4699      	mov	r9, r3
 8011e34:	688a      	ldr	r2, [r1, #8]
 8011e36:	690b      	ldr	r3, [r1, #16]
 8011e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	bfb8      	it	lt
 8011e40:	4613      	movlt	r3, r2
 8011e42:	6033      	str	r3, [r6, #0]
 8011e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	b10a      	cbz	r2, 8011e52 <_printf_common+0x26>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	0699      	lsls	r1, r3, #26
 8011e56:	bf42      	ittt	mi
 8011e58:	6833      	ldrmi	r3, [r6, #0]
 8011e5a:	3302      	addmi	r3, #2
 8011e5c:	6033      	strmi	r3, [r6, #0]
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	f015 0506 	ands.w	r5, r5, #6
 8011e64:	d106      	bne.n	8011e74 <_printf_common+0x48>
 8011e66:	f104 0a19 	add.w	sl, r4, #25
 8011e6a:	68e3      	ldr	r3, [r4, #12]
 8011e6c:	6832      	ldr	r2, [r6, #0]
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	42ab      	cmp	r3, r5
 8011e72:	dc26      	bgt.n	8011ec2 <_printf_common+0x96>
 8011e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e78:	1e13      	subs	r3, r2, #0
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	bf18      	it	ne
 8011e7e:	2301      	movne	r3, #1
 8011e80:	0692      	lsls	r2, r2, #26
 8011e82:	d42b      	bmi.n	8011edc <_printf_common+0xb0>
 8011e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c0      	blx	r8
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d01e      	beq.n	8011ed0 <_printf_common+0xa4>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	68e5      	ldr	r5, [r4, #12]
 8011e96:	6832      	ldr	r2, [r6, #0]
 8011e98:	f003 0306 	and.w	r3, r3, #6
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	bf08      	it	eq
 8011ea0:	1aad      	subeq	r5, r5, r2
 8011ea2:	68a3      	ldr	r3, [r4, #8]
 8011ea4:	6922      	ldr	r2, [r4, #16]
 8011ea6:	bf0c      	ite	eq
 8011ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eac:	2500      	movne	r5, #0
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bfc4      	itt	gt
 8011eb2:	1a9b      	subgt	r3, r3, r2
 8011eb4:	18ed      	addgt	r5, r5, r3
 8011eb6:	2600      	movs	r6, #0
 8011eb8:	341a      	adds	r4, #26
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d11a      	bne.n	8011ef4 <_printf_common+0xc8>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e008      	b.n	8011ed4 <_printf_common+0xa8>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c0      	blx	r8
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d103      	bne.n	8011ed8 <_printf_common+0xac>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	3501      	adds	r5, #1
 8011eda:	e7c6      	b.n	8011e6a <_printf_common+0x3e>
 8011edc:	18e1      	adds	r1, r4, r3
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	2030      	movs	r0, #48	; 0x30
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee6:	4422      	add	r2, r4
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ef0:	3302      	adds	r3, #2
 8011ef2:	e7c7      	b.n	8011e84 <_printf_common+0x58>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	4649      	mov	r1, r9
 8011efa:	4638      	mov	r0, r7
 8011efc:	47c0      	blx	r8
 8011efe:	3001      	adds	r0, #1
 8011f00:	d0e6      	beq.n	8011ed0 <_printf_common+0xa4>
 8011f02:	3601      	adds	r6, #1
 8011f04:	e7d9      	b.n	8011eba <_printf_common+0x8e>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	4691      	mov	r9, r2
 8011f10:	7e27      	ldrb	r7, [r4, #24]
 8011f12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f14:	2f78      	cmp	r7, #120	; 0x78
 8011f16:	4680      	mov	r8, r0
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	; 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d8 	beq.w	80120da <_printf_i+0x1d2>
 8011f2a:	2f58      	cmp	r7, #88	; 0x58
 8011f2c:	f000 80a3 	beq.w	8012076 <_printf_i+0x16e>
 8011f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a001      	add	r0, pc, #4	; (adr r0, 8011f48 <_printf_i+0x40>)
 8011f44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120c1 	.word	0x080120c1
 8011f78:	08011fe5 	.word	0x08011fe5
 8011f7c:	080120a3 	.word	0x080120a3
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120e3 	.word	0x080120e3
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fe5 	.word	0x08011fe5
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	080120ab 	.word	0x080120ab
 8011fa0:	680b      	ldr	r3, [r1, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	600a      	str	r2, [r1, #0]
 8011fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e0a3      	b.n	80120fc <_printf_i+0x1f4>
 8011fb4:	6825      	ldr	r5, [r4, #0]
 8011fb6:	6808      	ldr	r0, [r1, #0]
 8011fb8:	062e      	lsls	r6, r5, #24
 8011fba:	f100 0304 	add.w	r3, r0, #4
 8011fbe:	d50a      	bpl.n	8011fd6 <_printf_i+0xce>
 8011fc0:	6805      	ldr	r5, [r0, #0]
 8011fc2:	600b      	str	r3, [r1, #0]
 8011fc4:	2d00      	cmp	r5, #0
 8011fc6:	da03      	bge.n	8011fd0 <_printf_i+0xc8>
 8011fc8:	232d      	movs	r3, #45	; 0x2d
 8011fca:	426d      	negs	r5, r5
 8011fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd0:	485e      	ldr	r0, [pc, #376]	; (801214c <_printf_i+0x244>)
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e019      	b.n	801200a <_printf_i+0x102>
 8011fd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011fda:	6805      	ldr	r5, [r0, #0]
 8011fdc:	600b      	str	r3, [r1, #0]
 8011fde:	bf18      	it	ne
 8011fe0:	b22d      	sxthne	r5, r5
 8011fe2:	e7ef      	b.n	8011fc4 <_printf_i+0xbc>
 8011fe4:	680b      	ldr	r3, [r1, #0]
 8011fe6:	6825      	ldr	r5, [r4, #0]
 8011fe8:	1d18      	adds	r0, r3, #4
 8011fea:	6008      	str	r0, [r1, #0]
 8011fec:	0628      	lsls	r0, r5, #24
 8011fee:	d501      	bpl.n	8011ff4 <_printf_i+0xec>
 8011ff0:	681d      	ldr	r5, [r3, #0]
 8011ff2:	e002      	b.n	8011ffa <_printf_i+0xf2>
 8011ff4:	0669      	lsls	r1, r5, #25
 8011ff6:	d5fb      	bpl.n	8011ff0 <_printf_i+0xe8>
 8011ff8:	881d      	ldrh	r5, [r3, #0]
 8011ffa:	4854      	ldr	r0, [pc, #336]	; (801214c <_printf_i+0x244>)
 8011ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8011ffe:	bf0c      	ite	eq
 8012000:	2308      	moveq	r3, #8
 8012002:	230a      	movne	r3, #10
 8012004:	2100      	movs	r1, #0
 8012006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801200a:	6866      	ldr	r6, [r4, #4]
 801200c:	60a6      	str	r6, [r4, #8]
 801200e:	2e00      	cmp	r6, #0
 8012010:	bfa2      	ittt	ge
 8012012:	6821      	ldrge	r1, [r4, #0]
 8012014:	f021 0104 	bicge.w	r1, r1, #4
 8012018:	6021      	strge	r1, [r4, #0]
 801201a:	b90d      	cbnz	r5, 8012020 <_printf_i+0x118>
 801201c:	2e00      	cmp	r6, #0
 801201e:	d04d      	beq.n	80120bc <_printf_i+0x1b4>
 8012020:	4616      	mov	r6, r2
 8012022:	fbb5 f1f3 	udiv	r1, r5, r3
 8012026:	fb03 5711 	mls	r7, r3, r1, r5
 801202a:	5dc7      	ldrb	r7, [r0, r7]
 801202c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012030:	462f      	mov	r7, r5
 8012032:	42bb      	cmp	r3, r7
 8012034:	460d      	mov	r5, r1
 8012036:	d9f4      	bls.n	8012022 <_printf_i+0x11a>
 8012038:	2b08      	cmp	r3, #8
 801203a:	d10b      	bne.n	8012054 <_printf_i+0x14c>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	07df      	lsls	r7, r3, #31
 8012040:	d508      	bpl.n	8012054 <_printf_i+0x14c>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	6861      	ldr	r1, [r4, #4]
 8012046:	4299      	cmp	r1, r3
 8012048:	bfde      	ittt	le
 801204a:	2330      	movle	r3, #48	; 0x30
 801204c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012050:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012054:	1b92      	subs	r2, r2, r6
 8012056:	6122      	str	r2, [r4, #16]
 8012058:	f8cd a000 	str.w	sl, [sp]
 801205c:	464b      	mov	r3, r9
 801205e:	aa03      	add	r2, sp, #12
 8012060:	4621      	mov	r1, r4
 8012062:	4640      	mov	r0, r8
 8012064:	f7ff fee2 	bl	8011e2c <_printf_common>
 8012068:	3001      	adds	r0, #1
 801206a:	d14c      	bne.n	8012106 <_printf_i+0x1fe>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012070:	b004      	add	sp, #16
 8012072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012076:	4835      	ldr	r0, [pc, #212]	; (801214c <_printf_i+0x244>)
 8012078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	680e      	ldr	r6, [r1, #0]
 8012080:	061f      	lsls	r7, r3, #24
 8012082:	f856 5b04 	ldr.w	r5, [r6], #4
 8012086:	600e      	str	r6, [r1, #0]
 8012088:	d514      	bpl.n	80120b4 <_printf_i+0x1ac>
 801208a:	07d9      	lsls	r1, r3, #31
 801208c:	bf44      	itt	mi
 801208e:	f043 0320 	orrmi.w	r3, r3, #32
 8012092:	6023      	strmi	r3, [r4, #0]
 8012094:	b91d      	cbnz	r5, 801209e <_printf_i+0x196>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f023 0320 	bic.w	r3, r3, #32
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	2310      	movs	r3, #16
 80120a0:	e7b0      	b.n	8012004 <_printf_i+0xfc>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	f043 0320 	orr.w	r3, r3, #32
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	2378      	movs	r3, #120	; 0x78
 80120ac:	4828      	ldr	r0, [pc, #160]	; (8012150 <_printf_i+0x248>)
 80120ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120b2:	e7e3      	b.n	801207c <_printf_i+0x174>
 80120b4:	065e      	lsls	r6, r3, #25
 80120b6:	bf48      	it	mi
 80120b8:	b2ad      	uxthmi	r5, r5
 80120ba:	e7e6      	b.n	801208a <_printf_i+0x182>
 80120bc:	4616      	mov	r6, r2
 80120be:	e7bb      	b.n	8012038 <_printf_i+0x130>
 80120c0:	680b      	ldr	r3, [r1, #0]
 80120c2:	6826      	ldr	r6, [r4, #0]
 80120c4:	6960      	ldr	r0, [r4, #20]
 80120c6:	1d1d      	adds	r5, r3, #4
 80120c8:	600d      	str	r5, [r1, #0]
 80120ca:	0635      	lsls	r5, r6, #24
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	d501      	bpl.n	80120d4 <_printf_i+0x1cc>
 80120d0:	6018      	str	r0, [r3, #0]
 80120d2:	e002      	b.n	80120da <_printf_i+0x1d2>
 80120d4:	0671      	lsls	r1, r6, #25
 80120d6:	d5fb      	bpl.n	80120d0 <_printf_i+0x1c8>
 80120d8:	8018      	strh	r0, [r3, #0]
 80120da:	2300      	movs	r3, #0
 80120dc:	6123      	str	r3, [r4, #16]
 80120de:	4616      	mov	r6, r2
 80120e0:	e7ba      	b.n	8012058 <_printf_i+0x150>
 80120e2:	680b      	ldr	r3, [r1, #0]
 80120e4:	1d1a      	adds	r2, r3, #4
 80120e6:	600a      	str	r2, [r1, #0]
 80120e8:	681e      	ldr	r6, [r3, #0]
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	2100      	movs	r1, #0
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7ee f896 	bl	8000220 <memchr>
 80120f4:	b108      	cbz	r0, 80120fa <_printf_i+0x1f2>
 80120f6:	1b80      	subs	r0, r0, r6
 80120f8:	6060      	str	r0, [r4, #4]
 80120fa:	6863      	ldr	r3, [r4, #4]
 80120fc:	6123      	str	r3, [r4, #16]
 80120fe:	2300      	movs	r3, #0
 8012100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012104:	e7a8      	b.n	8012058 <_printf_i+0x150>
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	4632      	mov	r2, r6
 801210a:	4649      	mov	r1, r9
 801210c:	4640      	mov	r0, r8
 801210e:	47d0      	blx	sl
 8012110:	3001      	adds	r0, #1
 8012112:	d0ab      	beq.n	801206c <_printf_i+0x164>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	079b      	lsls	r3, r3, #30
 8012118:	d413      	bmi.n	8012142 <_printf_i+0x23a>
 801211a:	68e0      	ldr	r0, [r4, #12]
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	4298      	cmp	r0, r3
 8012120:	bfb8      	it	lt
 8012122:	4618      	movlt	r0, r3
 8012124:	e7a4      	b.n	8012070 <_printf_i+0x168>
 8012126:	2301      	movs	r3, #1
 8012128:	4632      	mov	r2, r6
 801212a:	4649      	mov	r1, r9
 801212c:	4640      	mov	r0, r8
 801212e:	47d0      	blx	sl
 8012130:	3001      	adds	r0, #1
 8012132:	d09b      	beq.n	801206c <_printf_i+0x164>
 8012134:	3501      	adds	r5, #1
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	9903      	ldr	r1, [sp, #12]
 801213a:	1a5b      	subs	r3, r3, r1
 801213c:	42ab      	cmp	r3, r5
 801213e:	dcf2      	bgt.n	8012126 <_printf_i+0x21e>
 8012140:	e7eb      	b.n	801211a <_printf_i+0x212>
 8012142:	2500      	movs	r5, #0
 8012144:	f104 0619 	add.w	r6, r4, #25
 8012148:	e7f5      	b.n	8012136 <_printf_i+0x22e>
 801214a:	bf00      	nop
 801214c:	08018e32 	.word	0x08018e32
 8012150:	08018e43 	.word	0x08018e43

08012154 <iprintf>:
 8012154:	b40f      	push	{r0, r1, r2, r3}
 8012156:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <iprintf+0x2c>)
 8012158:	b513      	push	{r0, r1, r4, lr}
 801215a:	681c      	ldr	r4, [r3, #0]
 801215c:	b124      	cbz	r4, 8012168 <iprintf+0x14>
 801215e:	69a3      	ldr	r3, [r4, #24]
 8012160:	b913      	cbnz	r3, 8012168 <iprintf+0x14>
 8012162:	4620      	mov	r0, r4
 8012164:	f001 f8a6 	bl	80132b4 <__sinit>
 8012168:	ab05      	add	r3, sp, #20
 801216a:	9a04      	ldr	r2, [sp, #16]
 801216c:	68a1      	ldr	r1, [r4, #8]
 801216e:	9301      	str	r3, [sp, #4]
 8012170:	4620      	mov	r0, r4
 8012172:	f001 fd7d 	bl	8013c70 <_vfiprintf_r>
 8012176:	b002      	add	sp, #8
 8012178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801217c:	b004      	add	sp, #16
 801217e:	4770      	bx	lr
 8012180:	20000018 	.word	0x20000018

08012184 <putchar>:
 8012184:	4b09      	ldr	r3, [pc, #36]	; (80121ac <putchar+0x28>)
 8012186:	b513      	push	{r0, r1, r4, lr}
 8012188:	681c      	ldr	r4, [r3, #0]
 801218a:	4601      	mov	r1, r0
 801218c:	b134      	cbz	r4, 801219c <putchar+0x18>
 801218e:	69a3      	ldr	r3, [r4, #24]
 8012190:	b923      	cbnz	r3, 801219c <putchar+0x18>
 8012192:	9001      	str	r0, [sp, #4]
 8012194:	4620      	mov	r0, r4
 8012196:	f001 f88d 	bl	80132b4 <__sinit>
 801219a:	9901      	ldr	r1, [sp, #4]
 801219c:	68a2      	ldr	r2, [r4, #8]
 801219e:	4620      	mov	r0, r4
 80121a0:	b002      	add	sp, #8
 80121a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a6:	f001 be93 	b.w	8013ed0 <_putc_r>
 80121aa:	bf00      	nop
 80121ac:	20000018 	.word	0x20000018

080121b0 <_sbrk_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d06      	ldr	r5, [pc, #24]	; (80121cc <_sbrk_r+0x1c>)
 80121b4:	2300      	movs	r3, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	4608      	mov	r0, r1
 80121ba:	602b      	str	r3, [r5, #0]
 80121bc:	f7f1 fbf0 	bl	80039a0 <_sbrk>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d102      	bne.n	80121ca <_sbrk_r+0x1a>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b103      	cbz	r3, 80121ca <_sbrk_r+0x1a>
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	bd38      	pop	{r3, r4, r5, pc}
 80121cc:	200413b0 	.word	0x200413b0

080121d0 <__swbuf_r>:
 80121d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d2:	460e      	mov	r6, r1
 80121d4:	4614      	mov	r4, r2
 80121d6:	4605      	mov	r5, r0
 80121d8:	b118      	cbz	r0, 80121e2 <__swbuf_r+0x12>
 80121da:	6983      	ldr	r3, [r0, #24]
 80121dc:	b90b      	cbnz	r3, 80121e2 <__swbuf_r+0x12>
 80121de:	f001 f869 	bl	80132b4 <__sinit>
 80121e2:	4b21      	ldr	r3, [pc, #132]	; (8012268 <__swbuf_r+0x98>)
 80121e4:	429c      	cmp	r4, r3
 80121e6:	d12b      	bne.n	8012240 <__swbuf_r+0x70>
 80121e8:	686c      	ldr	r4, [r5, #4]
 80121ea:	69a3      	ldr	r3, [r4, #24]
 80121ec:	60a3      	str	r3, [r4, #8]
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	071a      	lsls	r2, r3, #28
 80121f2:	d52f      	bpl.n	8012254 <__swbuf_r+0x84>
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	b36b      	cbz	r3, 8012254 <__swbuf_r+0x84>
 80121f8:	6923      	ldr	r3, [r4, #16]
 80121fa:	6820      	ldr	r0, [r4, #0]
 80121fc:	1ac0      	subs	r0, r0, r3
 80121fe:	6963      	ldr	r3, [r4, #20]
 8012200:	b2f6      	uxtb	r6, r6
 8012202:	4283      	cmp	r3, r0
 8012204:	4637      	mov	r7, r6
 8012206:	dc04      	bgt.n	8012212 <__swbuf_r+0x42>
 8012208:	4621      	mov	r1, r4
 801220a:	4628      	mov	r0, r5
 801220c:	f000 ffbe 	bl	801318c <_fflush_r>
 8012210:	bb30      	cbnz	r0, 8012260 <__swbuf_r+0x90>
 8012212:	68a3      	ldr	r3, [r4, #8]
 8012214:	3b01      	subs	r3, #1
 8012216:	60a3      	str	r3, [r4, #8]
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	1c5a      	adds	r2, r3, #1
 801221c:	6022      	str	r2, [r4, #0]
 801221e:	701e      	strb	r6, [r3, #0]
 8012220:	6963      	ldr	r3, [r4, #20]
 8012222:	3001      	adds	r0, #1
 8012224:	4283      	cmp	r3, r0
 8012226:	d004      	beq.n	8012232 <__swbuf_r+0x62>
 8012228:	89a3      	ldrh	r3, [r4, #12]
 801222a:	07db      	lsls	r3, r3, #31
 801222c:	d506      	bpl.n	801223c <__swbuf_r+0x6c>
 801222e:	2e0a      	cmp	r6, #10
 8012230:	d104      	bne.n	801223c <__swbuf_r+0x6c>
 8012232:	4621      	mov	r1, r4
 8012234:	4628      	mov	r0, r5
 8012236:	f000 ffa9 	bl	801318c <_fflush_r>
 801223a:	b988      	cbnz	r0, 8012260 <__swbuf_r+0x90>
 801223c:	4638      	mov	r0, r7
 801223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012240:	4b0a      	ldr	r3, [pc, #40]	; (801226c <__swbuf_r+0x9c>)
 8012242:	429c      	cmp	r4, r3
 8012244:	d101      	bne.n	801224a <__swbuf_r+0x7a>
 8012246:	68ac      	ldr	r4, [r5, #8]
 8012248:	e7cf      	b.n	80121ea <__swbuf_r+0x1a>
 801224a:	4b09      	ldr	r3, [pc, #36]	; (8012270 <__swbuf_r+0xa0>)
 801224c:	429c      	cmp	r4, r3
 801224e:	bf08      	it	eq
 8012250:	68ec      	ldreq	r4, [r5, #12]
 8012252:	e7ca      	b.n	80121ea <__swbuf_r+0x1a>
 8012254:	4621      	mov	r1, r4
 8012256:	4628      	mov	r0, r5
 8012258:	f000 f80c 	bl	8012274 <__swsetup_r>
 801225c:	2800      	cmp	r0, #0
 801225e:	d0cb      	beq.n	80121f8 <__swbuf_r+0x28>
 8012260:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012264:	e7ea      	b.n	801223c <__swbuf_r+0x6c>
 8012266:	bf00      	nop
 8012268:	08018f44 	.word	0x08018f44
 801226c:	08018f64 	.word	0x08018f64
 8012270:	08018f24 	.word	0x08018f24

08012274 <__swsetup_r>:
 8012274:	4b32      	ldr	r3, [pc, #200]	; (8012340 <__swsetup_r+0xcc>)
 8012276:	b570      	push	{r4, r5, r6, lr}
 8012278:	681d      	ldr	r5, [r3, #0]
 801227a:	4606      	mov	r6, r0
 801227c:	460c      	mov	r4, r1
 801227e:	b125      	cbz	r5, 801228a <__swsetup_r+0x16>
 8012280:	69ab      	ldr	r3, [r5, #24]
 8012282:	b913      	cbnz	r3, 801228a <__swsetup_r+0x16>
 8012284:	4628      	mov	r0, r5
 8012286:	f001 f815 	bl	80132b4 <__sinit>
 801228a:	4b2e      	ldr	r3, [pc, #184]	; (8012344 <__swsetup_r+0xd0>)
 801228c:	429c      	cmp	r4, r3
 801228e:	d10f      	bne.n	80122b0 <__swsetup_r+0x3c>
 8012290:	686c      	ldr	r4, [r5, #4]
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012298:	0719      	lsls	r1, r3, #28
 801229a:	d42c      	bmi.n	80122f6 <__swsetup_r+0x82>
 801229c:	06dd      	lsls	r5, r3, #27
 801229e:	d411      	bmi.n	80122c4 <__swsetup_r+0x50>
 80122a0:	2309      	movs	r3, #9
 80122a2:	6033      	str	r3, [r6, #0]
 80122a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122a8:	81a3      	strh	r3, [r4, #12]
 80122aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122ae:	e03e      	b.n	801232e <__swsetup_r+0xba>
 80122b0:	4b25      	ldr	r3, [pc, #148]	; (8012348 <__swsetup_r+0xd4>)
 80122b2:	429c      	cmp	r4, r3
 80122b4:	d101      	bne.n	80122ba <__swsetup_r+0x46>
 80122b6:	68ac      	ldr	r4, [r5, #8]
 80122b8:	e7eb      	b.n	8012292 <__swsetup_r+0x1e>
 80122ba:	4b24      	ldr	r3, [pc, #144]	; (801234c <__swsetup_r+0xd8>)
 80122bc:	429c      	cmp	r4, r3
 80122be:	bf08      	it	eq
 80122c0:	68ec      	ldreq	r4, [r5, #12]
 80122c2:	e7e6      	b.n	8012292 <__swsetup_r+0x1e>
 80122c4:	0758      	lsls	r0, r3, #29
 80122c6:	d512      	bpl.n	80122ee <__swsetup_r+0x7a>
 80122c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122ca:	b141      	cbz	r1, 80122de <__swsetup_r+0x6a>
 80122cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122d0:	4299      	cmp	r1, r3
 80122d2:	d002      	beq.n	80122da <__swsetup_r+0x66>
 80122d4:	4630      	mov	r0, r6
 80122d6:	f7ff fa29 	bl	801172c <_free_r>
 80122da:	2300      	movs	r3, #0
 80122dc:	6363      	str	r3, [r4, #52]	; 0x34
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	2300      	movs	r3, #0
 80122e8:	6063      	str	r3, [r4, #4]
 80122ea:	6923      	ldr	r3, [r4, #16]
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	89a3      	ldrh	r3, [r4, #12]
 80122f0:	f043 0308 	orr.w	r3, r3, #8
 80122f4:	81a3      	strh	r3, [r4, #12]
 80122f6:	6923      	ldr	r3, [r4, #16]
 80122f8:	b94b      	cbnz	r3, 801230e <__swsetup_r+0x9a>
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012304:	d003      	beq.n	801230e <__swsetup_r+0x9a>
 8012306:	4621      	mov	r1, r4
 8012308:	4630      	mov	r0, r6
 801230a:	f001 f8af 	bl	801346c <__smakebuf_r>
 801230e:	89a0      	ldrh	r0, [r4, #12]
 8012310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012314:	f010 0301 	ands.w	r3, r0, #1
 8012318:	d00a      	beq.n	8012330 <__swsetup_r+0xbc>
 801231a:	2300      	movs	r3, #0
 801231c:	60a3      	str	r3, [r4, #8]
 801231e:	6963      	ldr	r3, [r4, #20]
 8012320:	425b      	negs	r3, r3
 8012322:	61a3      	str	r3, [r4, #24]
 8012324:	6923      	ldr	r3, [r4, #16]
 8012326:	b943      	cbnz	r3, 801233a <__swsetup_r+0xc6>
 8012328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801232c:	d1ba      	bne.n	80122a4 <__swsetup_r+0x30>
 801232e:	bd70      	pop	{r4, r5, r6, pc}
 8012330:	0781      	lsls	r1, r0, #30
 8012332:	bf58      	it	pl
 8012334:	6963      	ldrpl	r3, [r4, #20]
 8012336:	60a3      	str	r3, [r4, #8]
 8012338:	e7f4      	b.n	8012324 <__swsetup_r+0xb0>
 801233a:	2000      	movs	r0, #0
 801233c:	e7f7      	b.n	801232e <__swsetup_r+0xba>
 801233e:	bf00      	nop
 8012340:	20000018 	.word	0x20000018
 8012344:	08018f44 	.word	0x08018f44
 8012348:	08018f64 	.word	0x08018f64
 801234c:	08018f24 	.word	0x08018f24

08012350 <__assert_func>:
 8012350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012352:	4614      	mov	r4, r2
 8012354:	461a      	mov	r2, r3
 8012356:	4b09      	ldr	r3, [pc, #36]	; (801237c <__assert_func+0x2c>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4605      	mov	r5, r0
 801235c:	68d8      	ldr	r0, [r3, #12]
 801235e:	b14c      	cbz	r4, 8012374 <__assert_func+0x24>
 8012360:	4b07      	ldr	r3, [pc, #28]	; (8012380 <__assert_func+0x30>)
 8012362:	9100      	str	r1, [sp, #0]
 8012364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012368:	4906      	ldr	r1, [pc, #24]	; (8012384 <__assert_func+0x34>)
 801236a:	462b      	mov	r3, r5
 801236c:	f001 f820 	bl	80133b0 <fiprintf>
 8012370:	f001 fe4c 	bl	801400c <abort>
 8012374:	4b04      	ldr	r3, [pc, #16]	; (8012388 <__assert_func+0x38>)
 8012376:	461c      	mov	r4, r3
 8012378:	e7f3      	b.n	8012362 <__assert_func+0x12>
 801237a:	bf00      	nop
 801237c:	20000018 	.word	0x20000018
 8012380:	08018e54 	.word	0x08018e54
 8012384:	08018e61 	.word	0x08018e61
 8012388:	08018e8f 	.word	0x08018e8f

0801238c <quorem>:
 801238c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012390:	6903      	ldr	r3, [r0, #16]
 8012392:	690c      	ldr	r4, [r1, #16]
 8012394:	42a3      	cmp	r3, r4
 8012396:	4607      	mov	r7, r0
 8012398:	f2c0 8081 	blt.w	801249e <quorem+0x112>
 801239c:	3c01      	subs	r4, #1
 801239e:	f101 0814 	add.w	r8, r1, #20
 80123a2:	f100 0514 	add.w	r5, r0, #20
 80123a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123aa:	9301      	str	r3, [sp, #4]
 80123ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123b4:	3301      	adds	r3, #1
 80123b6:	429a      	cmp	r2, r3
 80123b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80123bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80123c4:	d331      	bcc.n	801242a <quorem+0x9e>
 80123c6:	f04f 0e00 	mov.w	lr, #0
 80123ca:	4640      	mov	r0, r8
 80123cc:	46ac      	mov	ip, r5
 80123ce:	46f2      	mov	sl, lr
 80123d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80123d4:	b293      	uxth	r3, r2
 80123d6:	fb06 e303 	mla	r3, r6, r3, lr
 80123da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80123de:	b29b      	uxth	r3, r3
 80123e0:	ebaa 0303 	sub.w	r3, sl, r3
 80123e4:	0c12      	lsrs	r2, r2, #16
 80123e6:	f8dc a000 	ldr.w	sl, [ip]
 80123ea:	fb06 e202 	mla	r2, r6, r2, lr
 80123ee:	fa13 f38a 	uxtah	r3, r3, sl
 80123f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123f6:	fa1f fa82 	uxth.w	sl, r2
 80123fa:	f8dc 2000 	ldr.w	r2, [ip]
 80123fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012402:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012406:	b29b      	uxth	r3, r3
 8012408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801240c:	4581      	cmp	r9, r0
 801240e:	f84c 3b04 	str.w	r3, [ip], #4
 8012412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012416:	d2db      	bcs.n	80123d0 <quorem+0x44>
 8012418:	f855 300b 	ldr.w	r3, [r5, fp]
 801241c:	b92b      	cbnz	r3, 801242a <quorem+0x9e>
 801241e:	9b01      	ldr	r3, [sp, #4]
 8012420:	3b04      	subs	r3, #4
 8012422:	429d      	cmp	r5, r3
 8012424:	461a      	mov	r2, r3
 8012426:	d32e      	bcc.n	8012486 <quorem+0xfa>
 8012428:	613c      	str	r4, [r7, #16]
 801242a:	4638      	mov	r0, r7
 801242c:	f001 fae8 	bl	8013a00 <__mcmp>
 8012430:	2800      	cmp	r0, #0
 8012432:	db24      	blt.n	801247e <quorem+0xf2>
 8012434:	3601      	adds	r6, #1
 8012436:	4628      	mov	r0, r5
 8012438:	f04f 0c00 	mov.w	ip, #0
 801243c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012440:	f8d0 e000 	ldr.w	lr, [r0]
 8012444:	b293      	uxth	r3, r2
 8012446:	ebac 0303 	sub.w	r3, ip, r3
 801244a:	0c12      	lsrs	r2, r2, #16
 801244c:	fa13 f38e 	uxtah	r3, r3, lr
 8012450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012458:	b29b      	uxth	r3, r3
 801245a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801245e:	45c1      	cmp	r9, r8
 8012460:	f840 3b04 	str.w	r3, [r0], #4
 8012464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012468:	d2e8      	bcs.n	801243c <quorem+0xb0>
 801246a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801246e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012472:	b922      	cbnz	r2, 801247e <quorem+0xf2>
 8012474:	3b04      	subs	r3, #4
 8012476:	429d      	cmp	r5, r3
 8012478:	461a      	mov	r2, r3
 801247a:	d30a      	bcc.n	8012492 <quorem+0x106>
 801247c:	613c      	str	r4, [r7, #16]
 801247e:	4630      	mov	r0, r6
 8012480:	b003      	add	sp, #12
 8012482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012486:	6812      	ldr	r2, [r2, #0]
 8012488:	3b04      	subs	r3, #4
 801248a:	2a00      	cmp	r2, #0
 801248c:	d1cc      	bne.n	8012428 <quorem+0x9c>
 801248e:	3c01      	subs	r4, #1
 8012490:	e7c7      	b.n	8012422 <quorem+0x96>
 8012492:	6812      	ldr	r2, [r2, #0]
 8012494:	3b04      	subs	r3, #4
 8012496:	2a00      	cmp	r2, #0
 8012498:	d1f0      	bne.n	801247c <quorem+0xf0>
 801249a:	3c01      	subs	r4, #1
 801249c:	e7eb      	b.n	8012476 <quorem+0xea>
 801249e:	2000      	movs	r0, #0
 80124a0:	e7ee      	b.n	8012480 <quorem+0xf4>
 80124a2:	0000      	movs	r0, r0
 80124a4:	0000      	movs	r0, r0
	...

080124a8 <_dtoa_r>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	ed2d 8b02 	vpush	{d8}
 80124b0:	ec57 6b10 	vmov	r6, r7, d0
 80124b4:	b095      	sub	sp, #84	; 0x54
 80124b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80124b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124bc:	9105      	str	r1, [sp, #20]
 80124be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124c2:	4604      	mov	r4, r0
 80124c4:	9209      	str	r2, [sp, #36]	; 0x24
 80124c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80124c8:	b975      	cbnz	r5, 80124e8 <_dtoa_r+0x40>
 80124ca:	2010      	movs	r0, #16
 80124cc:	f7ff f910 	bl	80116f0 <malloc>
 80124d0:	4602      	mov	r2, r0
 80124d2:	6260      	str	r0, [r4, #36]	; 0x24
 80124d4:	b920      	cbnz	r0, 80124e0 <_dtoa_r+0x38>
 80124d6:	4bb2      	ldr	r3, [pc, #712]	; (80127a0 <_dtoa_r+0x2f8>)
 80124d8:	21ea      	movs	r1, #234	; 0xea
 80124da:	48b2      	ldr	r0, [pc, #712]	; (80127a4 <_dtoa_r+0x2fc>)
 80124dc:	f7ff ff38 	bl	8012350 <__assert_func>
 80124e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124e4:	6005      	str	r5, [r0, #0]
 80124e6:	60c5      	str	r5, [r0, #12]
 80124e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ea:	6819      	ldr	r1, [r3, #0]
 80124ec:	b151      	cbz	r1, 8012504 <_dtoa_r+0x5c>
 80124ee:	685a      	ldr	r2, [r3, #4]
 80124f0:	604a      	str	r2, [r1, #4]
 80124f2:	2301      	movs	r3, #1
 80124f4:	4093      	lsls	r3, r2
 80124f6:	608b      	str	r3, [r1, #8]
 80124f8:	4620      	mov	r0, r4
 80124fa:	f001 f843 	bl	8013584 <_Bfree>
 80124fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012500:	2200      	movs	r2, #0
 8012502:	601a      	str	r2, [r3, #0]
 8012504:	1e3b      	subs	r3, r7, #0
 8012506:	bfb9      	ittee	lt
 8012508:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801250c:	9303      	strlt	r3, [sp, #12]
 801250e:	2300      	movge	r3, #0
 8012510:	f8c8 3000 	strge.w	r3, [r8]
 8012514:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012518:	4ba3      	ldr	r3, [pc, #652]	; (80127a8 <_dtoa_r+0x300>)
 801251a:	bfbc      	itt	lt
 801251c:	2201      	movlt	r2, #1
 801251e:	f8c8 2000 	strlt.w	r2, [r8]
 8012522:	ea33 0309 	bics.w	r3, r3, r9
 8012526:	d11b      	bne.n	8012560 <_dtoa_r+0xb8>
 8012528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801252a:	f242 730f 	movw	r3, #9999	; 0x270f
 801252e:	6013      	str	r3, [r2, #0]
 8012530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012534:	4333      	orrs	r3, r6
 8012536:	f000 857a 	beq.w	801302e <_dtoa_r+0xb86>
 801253a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801253c:	b963      	cbnz	r3, 8012558 <_dtoa_r+0xb0>
 801253e:	4b9b      	ldr	r3, [pc, #620]	; (80127ac <_dtoa_r+0x304>)
 8012540:	e024      	b.n	801258c <_dtoa_r+0xe4>
 8012542:	4b9b      	ldr	r3, [pc, #620]	; (80127b0 <_dtoa_r+0x308>)
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	3308      	adds	r3, #8
 8012548:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801254a:	6013      	str	r3, [r2, #0]
 801254c:	9800      	ldr	r0, [sp, #0]
 801254e:	b015      	add	sp, #84	; 0x54
 8012550:	ecbd 8b02 	vpop	{d8}
 8012554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012558:	4b94      	ldr	r3, [pc, #592]	; (80127ac <_dtoa_r+0x304>)
 801255a:	9300      	str	r3, [sp, #0]
 801255c:	3303      	adds	r3, #3
 801255e:	e7f3      	b.n	8012548 <_dtoa_r+0xa0>
 8012560:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012564:	2200      	movs	r2, #0
 8012566:	ec51 0b17 	vmov	r0, r1, d7
 801256a:	2300      	movs	r3, #0
 801256c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012570:	f7ee faca 	bl	8000b08 <__aeabi_dcmpeq>
 8012574:	4680      	mov	r8, r0
 8012576:	b158      	cbz	r0, 8012590 <_dtoa_r+0xe8>
 8012578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801257a:	2301      	movs	r3, #1
 801257c:	6013      	str	r3, [r2, #0]
 801257e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012580:	2b00      	cmp	r3, #0
 8012582:	f000 8551 	beq.w	8013028 <_dtoa_r+0xb80>
 8012586:	488b      	ldr	r0, [pc, #556]	; (80127b4 <_dtoa_r+0x30c>)
 8012588:	6018      	str	r0, [r3, #0]
 801258a:	1e43      	subs	r3, r0, #1
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	e7dd      	b.n	801254c <_dtoa_r+0xa4>
 8012590:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012594:	aa12      	add	r2, sp, #72	; 0x48
 8012596:	a913      	add	r1, sp, #76	; 0x4c
 8012598:	4620      	mov	r0, r4
 801259a:	f001 fad5 	bl	8013b48 <__d2b>
 801259e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125a2:	4683      	mov	fp, r0
 80125a4:	2d00      	cmp	r5, #0
 80125a6:	d07c      	beq.n	80126a2 <_dtoa_r+0x1fa>
 80125a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80125ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80125b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80125ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80125be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125c2:	4b7d      	ldr	r3, [pc, #500]	; (80127b8 <_dtoa_r+0x310>)
 80125c4:	2200      	movs	r2, #0
 80125c6:	4630      	mov	r0, r6
 80125c8:	4639      	mov	r1, r7
 80125ca:	f7ed fe7d 	bl	80002c8 <__aeabi_dsub>
 80125ce:	a36e      	add	r3, pc, #440	; (adr r3, 8012788 <_dtoa_r+0x2e0>)
 80125d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d4:	f7ee f830 	bl	8000638 <__aeabi_dmul>
 80125d8:	a36d      	add	r3, pc, #436	; (adr r3, 8012790 <_dtoa_r+0x2e8>)
 80125da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125de:	f7ed fe75 	bl	80002cc <__adddf3>
 80125e2:	4606      	mov	r6, r0
 80125e4:	4628      	mov	r0, r5
 80125e6:	460f      	mov	r7, r1
 80125e8:	f7ed ffbc 	bl	8000564 <__aeabi_i2d>
 80125ec:	a36a      	add	r3, pc, #424	; (adr r3, 8012798 <_dtoa_r+0x2f0>)
 80125ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f2:	f7ee f821 	bl	8000638 <__aeabi_dmul>
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4630      	mov	r0, r6
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ed fe65 	bl	80002cc <__adddf3>
 8012602:	4606      	mov	r6, r0
 8012604:	460f      	mov	r7, r1
 8012606:	f7ee fac7 	bl	8000b98 <__aeabi_d2iz>
 801260a:	2200      	movs	r2, #0
 801260c:	4682      	mov	sl, r0
 801260e:	2300      	movs	r3, #0
 8012610:	4630      	mov	r0, r6
 8012612:	4639      	mov	r1, r7
 8012614:	f7ee fa82 	bl	8000b1c <__aeabi_dcmplt>
 8012618:	b148      	cbz	r0, 801262e <_dtoa_r+0x186>
 801261a:	4650      	mov	r0, sl
 801261c:	f7ed ffa2 	bl	8000564 <__aeabi_i2d>
 8012620:	4632      	mov	r2, r6
 8012622:	463b      	mov	r3, r7
 8012624:	f7ee fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8012628:	b908      	cbnz	r0, 801262e <_dtoa_r+0x186>
 801262a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801262e:	f1ba 0f16 	cmp.w	sl, #22
 8012632:	d854      	bhi.n	80126de <_dtoa_r+0x236>
 8012634:	4b61      	ldr	r3, [pc, #388]	; (80127bc <_dtoa_r+0x314>)
 8012636:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012642:	f7ee fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8012646:	2800      	cmp	r0, #0
 8012648:	d04b      	beq.n	80126e2 <_dtoa_r+0x23a>
 801264a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801264e:	2300      	movs	r3, #0
 8012650:	930e      	str	r3, [sp, #56]	; 0x38
 8012652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012654:	1b5d      	subs	r5, r3, r5
 8012656:	1e6b      	subs	r3, r5, #1
 8012658:	9304      	str	r3, [sp, #16]
 801265a:	bf43      	ittte	mi
 801265c:	2300      	movmi	r3, #0
 801265e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012662:	9304      	strmi	r3, [sp, #16]
 8012664:	f04f 0800 	movpl.w	r8, #0
 8012668:	f1ba 0f00 	cmp.w	sl, #0
 801266c:	db3b      	blt.n	80126e6 <_dtoa_r+0x23e>
 801266e:	9b04      	ldr	r3, [sp, #16]
 8012670:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012674:	4453      	add	r3, sl
 8012676:	9304      	str	r3, [sp, #16]
 8012678:	2300      	movs	r3, #0
 801267a:	9306      	str	r3, [sp, #24]
 801267c:	9b05      	ldr	r3, [sp, #20]
 801267e:	2b09      	cmp	r3, #9
 8012680:	d869      	bhi.n	8012756 <_dtoa_r+0x2ae>
 8012682:	2b05      	cmp	r3, #5
 8012684:	bfc4      	itt	gt
 8012686:	3b04      	subgt	r3, #4
 8012688:	9305      	strgt	r3, [sp, #20]
 801268a:	9b05      	ldr	r3, [sp, #20]
 801268c:	f1a3 0302 	sub.w	r3, r3, #2
 8012690:	bfcc      	ite	gt
 8012692:	2500      	movgt	r5, #0
 8012694:	2501      	movle	r5, #1
 8012696:	2b03      	cmp	r3, #3
 8012698:	d869      	bhi.n	801276e <_dtoa_r+0x2c6>
 801269a:	e8df f003 	tbb	[pc, r3]
 801269e:	4e2c      	.short	0x4e2c
 80126a0:	5a4c      	.short	0x5a4c
 80126a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80126a6:	441d      	add	r5, r3
 80126a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80126ac:	2b20      	cmp	r3, #32
 80126ae:	bfc1      	itttt	gt
 80126b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80126b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80126b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80126bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80126c0:	bfda      	itte	le
 80126c2:	f1c3 0320 	rsble	r3, r3, #32
 80126c6:	fa06 f003 	lslle.w	r0, r6, r3
 80126ca:	4318      	orrgt	r0, r3
 80126cc:	f7ed ff3a 	bl	8000544 <__aeabi_ui2d>
 80126d0:	2301      	movs	r3, #1
 80126d2:	4606      	mov	r6, r0
 80126d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80126d8:	3d01      	subs	r5, #1
 80126da:	9310      	str	r3, [sp, #64]	; 0x40
 80126dc:	e771      	b.n	80125c2 <_dtoa_r+0x11a>
 80126de:	2301      	movs	r3, #1
 80126e0:	e7b6      	b.n	8012650 <_dtoa_r+0x1a8>
 80126e2:	900e      	str	r0, [sp, #56]	; 0x38
 80126e4:	e7b5      	b.n	8012652 <_dtoa_r+0x1aa>
 80126e6:	f1ca 0300 	rsb	r3, sl, #0
 80126ea:	9306      	str	r3, [sp, #24]
 80126ec:	2300      	movs	r3, #0
 80126ee:	eba8 080a 	sub.w	r8, r8, sl
 80126f2:	930d      	str	r3, [sp, #52]	; 0x34
 80126f4:	e7c2      	b.n	801267c <_dtoa_r+0x1d4>
 80126f6:	2300      	movs	r3, #0
 80126f8:	9308      	str	r3, [sp, #32]
 80126fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	dc39      	bgt.n	8012774 <_dtoa_r+0x2cc>
 8012700:	f04f 0901 	mov.w	r9, #1
 8012704:	f8cd 9004 	str.w	r9, [sp, #4]
 8012708:	464b      	mov	r3, r9
 801270a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801270e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012710:	2200      	movs	r2, #0
 8012712:	6042      	str	r2, [r0, #4]
 8012714:	2204      	movs	r2, #4
 8012716:	f102 0614 	add.w	r6, r2, #20
 801271a:	429e      	cmp	r6, r3
 801271c:	6841      	ldr	r1, [r0, #4]
 801271e:	d92f      	bls.n	8012780 <_dtoa_r+0x2d8>
 8012720:	4620      	mov	r0, r4
 8012722:	f000 feef 	bl	8013504 <_Balloc>
 8012726:	9000      	str	r0, [sp, #0]
 8012728:	2800      	cmp	r0, #0
 801272a:	d14b      	bne.n	80127c4 <_dtoa_r+0x31c>
 801272c:	4b24      	ldr	r3, [pc, #144]	; (80127c0 <_dtoa_r+0x318>)
 801272e:	4602      	mov	r2, r0
 8012730:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012734:	e6d1      	b.n	80124da <_dtoa_r+0x32>
 8012736:	2301      	movs	r3, #1
 8012738:	e7de      	b.n	80126f8 <_dtoa_r+0x250>
 801273a:	2300      	movs	r3, #0
 801273c:	9308      	str	r3, [sp, #32]
 801273e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012740:	eb0a 0903 	add.w	r9, sl, r3
 8012744:	f109 0301 	add.w	r3, r9, #1
 8012748:	2b01      	cmp	r3, #1
 801274a:	9301      	str	r3, [sp, #4]
 801274c:	bfb8      	it	lt
 801274e:	2301      	movlt	r3, #1
 8012750:	e7dd      	b.n	801270e <_dtoa_r+0x266>
 8012752:	2301      	movs	r3, #1
 8012754:	e7f2      	b.n	801273c <_dtoa_r+0x294>
 8012756:	2501      	movs	r5, #1
 8012758:	2300      	movs	r3, #0
 801275a:	9305      	str	r3, [sp, #20]
 801275c:	9508      	str	r5, [sp, #32]
 801275e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012762:	2200      	movs	r2, #0
 8012764:	f8cd 9004 	str.w	r9, [sp, #4]
 8012768:	2312      	movs	r3, #18
 801276a:	9209      	str	r2, [sp, #36]	; 0x24
 801276c:	e7cf      	b.n	801270e <_dtoa_r+0x266>
 801276e:	2301      	movs	r3, #1
 8012770:	9308      	str	r3, [sp, #32]
 8012772:	e7f4      	b.n	801275e <_dtoa_r+0x2b6>
 8012774:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012778:	f8cd 9004 	str.w	r9, [sp, #4]
 801277c:	464b      	mov	r3, r9
 801277e:	e7c6      	b.n	801270e <_dtoa_r+0x266>
 8012780:	3101      	adds	r1, #1
 8012782:	6041      	str	r1, [r0, #4]
 8012784:	0052      	lsls	r2, r2, #1
 8012786:	e7c6      	b.n	8012716 <_dtoa_r+0x26e>
 8012788:	636f4361 	.word	0x636f4361
 801278c:	3fd287a7 	.word	0x3fd287a7
 8012790:	8b60c8b3 	.word	0x8b60c8b3
 8012794:	3fc68a28 	.word	0x3fc68a28
 8012798:	509f79fb 	.word	0x509f79fb
 801279c:	3fd34413 	.word	0x3fd34413
 80127a0:	08018e9d 	.word	0x08018e9d
 80127a4:	08018eb4 	.word	0x08018eb4
 80127a8:	7ff00000 	.word	0x7ff00000
 80127ac:	08018e99 	.word	0x08018e99
 80127b0:	08018e90 	.word	0x08018e90
 80127b4:	08018e31 	.word	0x08018e31
 80127b8:	3ff80000 	.word	0x3ff80000
 80127bc:	08019010 	.word	0x08019010
 80127c0:	08018f13 	.word	0x08018f13
 80127c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127c6:	9a00      	ldr	r2, [sp, #0]
 80127c8:	601a      	str	r2, [r3, #0]
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	2b0e      	cmp	r3, #14
 80127ce:	f200 80ad 	bhi.w	801292c <_dtoa_r+0x484>
 80127d2:	2d00      	cmp	r5, #0
 80127d4:	f000 80aa 	beq.w	801292c <_dtoa_r+0x484>
 80127d8:	f1ba 0f00 	cmp.w	sl, #0
 80127dc:	dd36      	ble.n	801284c <_dtoa_r+0x3a4>
 80127de:	4ac3      	ldr	r2, [pc, #780]	; (8012aec <_dtoa_r+0x644>)
 80127e0:	f00a 030f 	and.w	r3, sl, #15
 80127e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127e8:	ed93 7b00 	vldr	d7, [r3]
 80127ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80127f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80127f4:	eeb0 8a47 	vmov.f32	s16, s14
 80127f8:	eef0 8a67 	vmov.f32	s17, s15
 80127fc:	d016      	beq.n	801282c <_dtoa_r+0x384>
 80127fe:	4bbc      	ldr	r3, [pc, #752]	; (8012af0 <_dtoa_r+0x648>)
 8012800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012808:	f7ee f840 	bl	800088c <__aeabi_ddiv>
 801280c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012810:	f007 070f 	and.w	r7, r7, #15
 8012814:	2503      	movs	r5, #3
 8012816:	4eb6      	ldr	r6, [pc, #728]	; (8012af0 <_dtoa_r+0x648>)
 8012818:	b957      	cbnz	r7, 8012830 <_dtoa_r+0x388>
 801281a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801281e:	ec53 2b18 	vmov	r2, r3, d8
 8012822:	f7ee f833 	bl	800088c <__aeabi_ddiv>
 8012826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801282a:	e029      	b.n	8012880 <_dtoa_r+0x3d8>
 801282c:	2502      	movs	r5, #2
 801282e:	e7f2      	b.n	8012816 <_dtoa_r+0x36e>
 8012830:	07f9      	lsls	r1, r7, #31
 8012832:	d508      	bpl.n	8012846 <_dtoa_r+0x39e>
 8012834:	ec51 0b18 	vmov	r0, r1, d8
 8012838:	e9d6 2300 	ldrd	r2, r3, [r6]
 801283c:	f7ed fefc 	bl	8000638 <__aeabi_dmul>
 8012840:	ec41 0b18 	vmov	d8, r0, r1
 8012844:	3501      	adds	r5, #1
 8012846:	107f      	asrs	r7, r7, #1
 8012848:	3608      	adds	r6, #8
 801284a:	e7e5      	b.n	8012818 <_dtoa_r+0x370>
 801284c:	f000 80a6 	beq.w	801299c <_dtoa_r+0x4f4>
 8012850:	f1ca 0600 	rsb	r6, sl, #0
 8012854:	4ba5      	ldr	r3, [pc, #660]	; (8012aec <_dtoa_r+0x644>)
 8012856:	4fa6      	ldr	r7, [pc, #664]	; (8012af0 <_dtoa_r+0x648>)
 8012858:	f006 020f 	and.w	r2, r6, #15
 801285c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012864:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012868:	f7ed fee6 	bl	8000638 <__aeabi_dmul>
 801286c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012870:	1136      	asrs	r6, r6, #4
 8012872:	2300      	movs	r3, #0
 8012874:	2502      	movs	r5, #2
 8012876:	2e00      	cmp	r6, #0
 8012878:	f040 8085 	bne.w	8012986 <_dtoa_r+0x4de>
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1d2      	bne.n	8012826 <_dtoa_r+0x37e>
 8012880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 808c 	beq.w	80129a0 <_dtoa_r+0x4f8>
 8012888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801288c:	4b99      	ldr	r3, [pc, #612]	; (8012af4 <_dtoa_r+0x64c>)
 801288e:	2200      	movs	r2, #0
 8012890:	4630      	mov	r0, r6
 8012892:	4639      	mov	r1, r7
 8012894:	f7ee f942 	bl	8000b1c <__aeabi_dcmplt>
 8012898:	2800      	cmp	r0, #0
 801289a:	f000 8081 	beq.w	80129a0 <_dtoa_r+0x4f8>
 801289e:	9b01      	ldr	r3, [sp, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d07d      	beq.n	80129a0 <_dtoa_r+0x4f8>
 80128a4:	f1b9 0f00 	cmp.w	r9, #0
 80128a8:	dd3c      	ble.n	8012924 <_dtoa_r+0x47c>
 80128aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80128ae:	9307      	str	r3, [sp, #28]
 80128b0:	2200      	movs	r2, #0
 80128b2:	4b91      	ldr	r3, [pc, #580]	; (8012af8 <_dtoa_r+0x650>)
 80128b4:	4630      	mov	r0, r6
 80128b6:	4639      	mov	r1, r7
 80128b8:	f7ed febe 	bl	8000638 <__aeabi_dmul>
 80128bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128c0:	3501      	adds	r5, #1
 80128c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80128c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80128ca:	4628      	mov	r0, r5
 80128cc:	f7ed fe4a 	bl	8000564 <__aeabi_i2d>
 80128d0:	4632      	mov	r2, r6
 80128d2:	463b      	mov	r3, r7
 80128d4:	f7ed feb0 	bl	8000638 <__aeabi_dmul>
 80128d8:	4b88      	ldr	r3, [pc, #544]	; (8012afc <_dtoa_r+0x654>)
 80128da:	2200      	movs	r2, #0
 80128dc:	f7ed fcf6 	bl	80002cc <__adddf3>
 80128e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80128e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128e8:	9303      	str	r3, [sp, #12]
 80128ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d15c      	bne.n	80129aa <_dtoa_r+0x502>
 80128f0:	4b83      	ldr	r3, [pc, #524]	; (8012b00 <_dtoa_r+0x658>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	4630      	mov	r0, r6
 80128f6:	4639      	mov	r1, r7
 80128f8:	f7ed fce6 	bl	80002c8 <__aeabi_dsub>
 80128fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012900:	4606      	mov	r6, r0
 8012902:	460f      	mov	r7, r1
 8012904:	f7ee f928 	bl	8000b58 <__aeabi_dcmpgt>
 8012908:	2800      	cmp	r0, #0
 801290a:	f040 8296 	bne.w	8012e3a <_dtoa_r+0x992>
 801290e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012912:	4630      	mov	r0, r6
 8012914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012918:	4639      	mov	r1, r7
 801291a:	f7ee f8ff 	bl	8000b1c <__aeabi_dcmplt>
 801291e:	2800      	cmp	r0, #0
 8012920:	f040 8288 	bne.w	8012e34 <_dtoa_r+0x98c>
 8012924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012928:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801292c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801292e:	2b00      	cmp	r3, #0
 8012930:	f2c0 8158 	blt.w	8012be4 <_dtoa_r+0x73c>
 8012934:	f1ba 0f0e 	cmp.w	sl, #14
 8012938:	f300 8154 	bgt.w	8012be4 <_dtoa_r+0x73c>
 801293c:	4b6b      	ldr	r3, [pc, #428]	; (8012aec <_dtoa_r+0x644>)
 801293e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012942:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012948:	2b00      	cmp	r3, #0
 801294a:	f280 80e3 	bge.w	8012b14 <_dtoa_r+0x66c>
 801294e:	9b01      	ldr	r3, [sp, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	f300 80df 	bgt.w	8012b14 <_dtoa_r+0x66c>
 8012956:	f040 826d 	bne.w	8012e34 <_dtoa_r+0x98c>
 801295a:	4b69      	ldr	r3, [pc, #420]	; (8012b00 <_dtoa_r+0x658>)
 801295c:	2200      	movs	r2, #0
 801295e:	4640      	mov	r0, r8
 8012960:	4649      	mov	r1, r9
 8012962:	f7ed fe69 	bl	8000638 <__aeabi_dmul>
 8012966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801296a:	f7ee f8eb 	bl	8000b44 <__aeabi_dcmpge>
 801296e:	9e01      	ldr	r6, [sp, #4]
 8012970:	4637      	mov	r7, r6
 8012972:	2800      	cmp	r0, #0
 8012974:	f040 8243 	bne.w	8012dfe <_dtoa_r+0x956>
 8012978:	9d00      	ldr	r5, [sp, #0]
 801297a:	2331      	movs	r3, #49	; 0x31
 801297c:	f805 3b01 	strb.w	r3, [r5], #1
 8012980:	f10a 0a01 	add.w	sl, sl, #1
 8012984:	e23f      	b.n	8012e06 <_dtoa_r+0x95e>
 8012986:	07f2      	lsls	r2, r6, #31
 8012988:	d505      	bpl.n	8012996 <_dtoa_r+0x4ee>
 801298a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801298e:	f7ed fe53 	bl	8000638 <__aeabi_dmul>
 8012992:	3501      	adds	r5, #1
 8012994:	2301      	movs	r3, #1
 8012996:	1076      	asrs	r6, r6, #1
 8012998:	3708      	adds	r7, #8
 801299a:	e76c      	b.n	8012876 <_dtoa_r+0x3ce>
 801299c:	2502      	movs	r5, #2
 801299e:	e76f      	b.n	8012880 <_dtoa_r+0x3d8>
 80129a0:	9b01      	ldr	r3, [sp, #4]
 80129a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80129a6:	930c      	str	r3, [sp, #48]	; 0x30
 80129a8:	e78d      	b.n	80128c6 <_dtoa_r+0x41e>
 80129aa:	9900      	ldr	r1, [sp, #0]
 80129ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80129ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129b0:	4b4e      	ldr	r3, [pc, #312]	; (8012aec <_dtoa_r+0x644>)
 80129b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129b6:	4401      	add	r1, r0
 80129b8:	9102      	str	r1, [sp, #8]
 80129ba:	9908      	ldr	r1, [sp, #32]
 80129bc:	eeb0 8a47 	vmov.f32	s16, s14
 80129c0:	eef0 8a67 	vmov.f32	s17, s15
 80129c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80129cc:	2900      	cmp	r1, #0
 80129ce:	d045      	beq.n	8012a5c <_dtoa_r+0x5b4>
 80129d0:	494c      	ldr	r1, [pc, #304]	; (8012b04 <_dtoa_r+0x65c>)
 80129d2:	2000      	movs	r0, #0
 80129d4:	f7ed ff5a 	bl	800088c <__aeabi_ddiv>
 80129d8:	ec53 2b18 	vmov	r2, r3, d8
 80129dc:	f7ed fc74 	bl	80002c8 <__aeabi_dsub>
 80129e0:	9d00      	ldr	r5, [sp, #0]
 80129e2:	ec41 0b18 	vmov	d8, r0, r1
 80129e6:	4639      	mov	r1, r7
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7ee f8d5 	bl	8000b98 <__aeabi_d2iz>
 80129ee:	900c      	str	r0, [sp, #48]	; 0x30
 80129f0:	f7ed fdb8 	bl	8000564 <__aeabi_i2d>
 80129f4:	4602      	mov	r2, r0
 80129f6:	460b      	mov	r3, r1
 80129f8:	4630      	mov	r0, r6
 80129fa:	4639      	mov	r1, r7
 80129fc:	f7ed fc64 	bl	80002c8 <__aeabi_dsub>
 8012a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a02:	3330      	adds	r3, #48	; 0x30
 8012a04:	f805 3b01 	strb.w	r3, [r5], #1
 8012a08:	ec53 2b18 	vmov	r2, r3, d8
 8012a0c:	4606      	mov	r6, r0
 8012a0e:	460f      	mov	r7, r1
 8012a10:	f7ee f884 	bl	8000b1c <__aeabi_dcmplt>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d165      	bne.n	8012ae4 <_dtoa_r+0x63c>
 8012a18:	4632      	mov	r2, r6
 8012a1a:	463b      	mov	r3, r7
 8012a1c:	4935      	ldr	r1, [pc, #212]	; (8012af4 <_dtoa_r+0x64c>)
 8012a1e:	2000      	movs	r0, #0
 8012a20:	f7ed fc52 	bl	80002c8 <__aeabi_dsub>
 8012a24:	ec53 2b18 	vmov	r2, r3, d8
 8012a28:	f7ee f878 	bl	8000b1c <__aeabi_dcmplt>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	f040 80b9 	bne.w	8012ba4 <_dtoa_r+0x6fc>
 8012a32:	9b02      	ldr	r3, [sp, #8]
 8012a34:	429d      	cmp	r5, r3
 8012a36:	f43f af75 	beq.w	8012924 <_dtoa_r+0x47c>
 8012a3a:	4b2f      	ldr	r3, [pc, #188]	; (8012af8 <_dtoa_r+0x650>)
 8012a3c:	ec51 0b18 	vmov	r0, r1, d8
 8012a40:	2200      	movs	r2, #0
 8012a42:	f7ed fdf9 	bl	8000638 <__aeabi_dmul>
 8012a46:	4b2c      	ldr	r3, [pc, #176]	; (8012af8 <_dtoa_r+0x650>)
 8012a48:	ec41 0b18 	vmov	d8, r0, r1
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4630      	mov	r0, r6
 8012a50:	4639      	mov	r1, r7
 8012a52:	f7ed fdf1 	bl	8000638 <__aeabi_dmul>
 8012a56:	4606      	mov	r6, r0
 8012a58:	460f      	mov	r7, r1
 8012a5a:	e7c4      	b.n	80129e6 <_dtoa_r+0x53e>
 8012a5c:	ec51 0b17 	vmov	r0, r1, d7
 8012a60:	f7ed fdea 	bl	8000638 <__aeabi_dmul>
 8012a64:	9b02      	ldr	r3, [sp, #8]
 8012a66:	9d00      	ldr	r5, [sp, #0]
 8012a68:	930c      	str	r3, [sp, #48]	; 0x30
 8012a6a:	ec41 0b18 	vmov	d8, r0, r1
 8012a6e:	4639      	mov	r1, r7
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7ee f891 	bl	8000b98 <__aeabi_d2iz>
 8012a76:	9011      	str	r0, [sp, #68]	; 0x44
 8012a78:	f7ed fd74 	bl	8000564 <__aeabi_i2d>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4630      	mov	r0, r6
 8012a82:	4639      	mov	r1, r7
 8012a84:	f7ed fc20 	bl	80002c8 <__aeabi_dsub>
 8012a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a8a:	3330      	adds	r3, #48	; 0x30
 8012a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8012a90:	9b02      	ldr	r3, [sp, #8]
 8012a92:	429d      	cmp	r5, r3
 8012a94:	4606      	mov	r6, r0
 8012a96:	460f      	mov	r7, r1
 8012a98:	f04f 0200 	mov.w	r2, #0
 8012a9c:	d134      	bne.n	8012b08 <_dtoa_r+0x660>
 8012a9e:	4b19      	ldr	r3, [pc, #100]	; (8012b04 <_dtoa_r+0x65c>)
 8012aa0:	ec51 0b18 	vmov	r0, r1, d8
 8012aa4:	f7ed fc12 	bl	80002cc <__adddf3>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4630      	mov	r0, r6
 8012aae:	4639      	mov	r1, r7
 8012ab0:	f7ee f852 	bl	8000b58 <__aeabi_dcmpgt>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d175      	bne.n	8012ba4 <_dtoa_r+0x6fc>
 8012ab8:	ec53 2b18 	vmov	r2, r3, d8
 8012abc:	4911      	ldr	r1, [pc, #68]	; (8012b04 <_dtoa_r+0x65c>)
 8012abe:	2000      	movs	r0, #0
 8012ac0:	f7ed fc02 	bl	80002c8 <__aeabi_dsub>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ee f826 	bl	8000b1c <__aeabi_dcmplt>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	f43f af27 	beq.w	8012924 <_dtoa_r+0x47c>
 8012ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ad8:	1e6b      	subs	r3, r5, #1
 8012ada:	930c      	str	r3, [sp, #48]	; 0x30
 8012adc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ae0:	2b30      	cmp	r3, #48	; 0x30
 8012ae2:	d0f8      	beq.n	8012ad6 <_dtoa_r+0x62e>
 8012ae4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012ae8:	e04a      	b.n	8012b80 <_dtoa_r+0x6d8>
 8012aea:	bf00      	nop
 8012aec:	08019010 	.word	0x08019010
 8012af0:	08018fe8 	.word	0x08018fe8
 8012af4:	3ff00000 	.word	0x3ff00000
 8012af8:	40240000 	.word	0x40240000
 8012afc:	401c0000 	.word	0x401c0000
 8012b00:	40140000 	.word	0x40140000
 8012b04:	3fe00000 	.word	0x3fe00000
 8012b08:	4baf      	ldr	r3, [pc, #700]	; (8012dc8 <_dtoa_r+0x920>)
 8012b0a:	f7ed fd95 	bl	8000638 <__aeabi_dmul>
 8012b0e:	4606      	mov	r6, r0
 8012b10:	460f      	mov	r7, r1
 8012b12:	e7ac      	b.n	8012a6e <_dtoa_r+0x5c6>
 8012b14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012b18:	9d00      	ldr	r5, [sp, #0]
 8012b1a:	4642      	mov	r2, r8
 8012b1c:	464b      	mov	r3, r9
 8012b1e:	4630      	mov	r0, r6
 8012b20:	4639      	mov	r1, r7
 8012b22:	f7ed feb3 	bl	800088c <__aeabi_ddiv>
 8012b26:	f7ee f837 	bl	8000b98 <__aeabi_d2iz>
 8012b2a:	9002      	str	r0, [sp, #8]
 8012b2c:	f7ed fd1a 	bl	8000564 <__aeabi_i2d>
 8012b30:	4642      	mov	r2, r8
 8012b32:	464b      	mov	r3, r9
 8012b34:	f7ed fd80 	bl	8000638 <__aeabi_dmul>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	4639      	mov	r1, r7
 8012b40:	f7ed fbc2 	bl	80002c8 <__aeabi_dsub>
 8012b44:	9e02      	ldr	r6, [sp, #8]
 8012b46:	9f01      	ldr	r7, [sp, #4]
 8012b48:	3630      	adds	r6, #48	; 0x30
 8012b4a:	f805 6b01 	strb.w	r6, [r5], #1
 8012b4e:	9e00      	ldr	r6, [sp, #0]
 8012b50:	1bae      	subs	r6, r5, r6
 8012b52:	42b7      	cmp	r7, r6
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	d137      	bne.n	8012bca <_dtoa_r+0x722>
 8012b5a:	f7ed fbb7 	bl	80002cc <__adddf3>
 8012b5e:	4642      	mov	r2, r8
 8012b60:	464b      	mov	r3, r9
 8012b62:	4606      	mov	r6, r0
 8012b64:	460f      	mov	r7, r1
 8012b66:	f7ed fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8012b6a:	b9c8      	cbnz	r0, 8012ba0 <_dtoa_r+0x6f8>
 8012b6c:	4642      	mov	r2, r8
 8012b6e:	464b      	mov	r3, r9
 8012b70:	4630      	mov	r0, r6
 8012b72:	4639      	mov	r1, r7
 8012b74:	f7ed ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 8012b78:	b110      	cbz	r0, 8012b80 <_dtoa_r+0x6d8>
 8012b7a:	9b02      	ldr	r3, [sp, #8]
 8012b7c:	07d9      	lsls	r1, r3, #31
 8012b7e:	d40f      	bmi.n	8012ba0 <_dtoa_r+0x6f8>
 8012b80:	4620      	mov	r0, r4
 8012b82:	4659      	mov	r1, fp
 8012b84:	f000 fcfe 	bl	8013584 <_Bfree>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	702b      	strb	r3, [r5, #0]
 8012b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b8e:	f10a 0001 	add.w	r0, sl, #1
 8012b92:	6018      	str	r0, [r3, #0]
 8012b94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f43f acd8 	beq.w	801254c <_dtoa_r+0xa4>
 8012b9c:	601d      	str	r5, [r3, #0]
 8012b9e:	e4d5      	b.n	801254c <_dtoa_r+0xa4>
 8012ba0:	f8cd a01c 	str.w	sl, [sp, #28]
 8012ba4:	462b      	mov	r3, r5
 8012ba6:	461d      	mov	r5, r3
 8012ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bac:	2a39      	cmp	r2, #57	; 0x39
 8012bae:	d108      	bne.n	8012bc2 <_dtoa_r+0x71a>
 8012bb0:	9a00      	ldr	r2, [sp, #0]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d1f7      	bne.n	8012ba6 <_dtoa_r+0x6fe>
 8012bb6:	9a07      	ldr	r2, [sp, #28]
 8012bb8:	9900      	ldr	r1, [sp, #0]
 8012bba:	3201      	adds	r2, #1
 8012bbc:	9207      	str	r2, [sp, #28]
 8012bbe:	2230      	movs	r2, #48	; 0x30
 8012bc0:	700a      	strb	r2, [r1, #0]
 8012bc2:	781a      	ldrb	r2, [r3, #0]
 8012bc4:	3201      	adds	r2, #1
 8012bc6:	701a      	strb	r2, [r3, #0]
 8012bc8:	e78c      	b.n	8012ae4 <_dtoa_r+0x63c>
 8012bca:	4b7f      	ldr	r3, [pc, #508]	; (8012dc8 <_dtoa_r+0x920>)
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f7ed fd33 	bl	8000638 <__aeabi_dmul>
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	460f      	mov	r7, r1
 8012bda:	f7ed ff95 	bl	8000b08 <__aeabi_dcmpeq>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d09b      	beq.n	8012b1a <_dtoa_r+0x672>
 8012be2:	e7cd      	b.n	8012b80 <_dtoa_r+0x6d8>
 8012be4:	9a08      	ldr	r2, [sp, #32]
 8012be6:	2a00      	cmp	r2, #0
 8012be8:	f000 80c4 	beq.w	8012d74 <_dtoa_r+0x8cc>
 8012bec:	9a05      	ldr	r2, [sp, #20]
 8012bee:	2a01      	cmp	r2, #1
 8012bf0:	f300 80a8 	bgt.w	8012d44 <_dtoa_r+0x89c>
 8012bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012bf6:	2a00      	cmp	r2, #0
 8012bf8:	f000 80a0 	beq.w	8012d3c <_dtoa_r+0x894>
 8012bfc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012c00:	9e06      	ldr	r6, [sp, #24]
 8012c02:	4645      	mov	r5, r8
 8012c04:	9a04      	ldr	r2, [sp, #16]
 8012c06:	2101      	movs	r1, #1
 8012c08:	441a      	add	r2, r3
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	4498      	add	r8, r3
 8012c0e:	9204      	str	r2, [sp, #16]
 8012c10:	f000 fd74 	bl	80136fc <__i2b>
 8012c14:	4607      	mov	r7, r0
 8012c16:	2d00      	cmp	r5, #0
 8012c18:	dd0b      	ble.n	8012c32 <_dtoa_r+0x78a>
 8012c1a:	9b04      	ldr	r3, [sp, #16]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	dd08      	ble.n	8012c32 <_dtoa_r+0x78a>
 8012c20:	42ab      	cmp	r3, r5
 8012c22:	9a04      	ldr	r2, [sp, #16]
 8012c24:	bfa8      	it	ge
 8012c26:	462b      	movge	r3, r5
 8012c28:	eba8 0803 	sub.w	r8, r8, r3
 8012c2c:	1aed      	subs	r5, r5, r3
 8012c2e:	1ad3      	subs	r3, r2, r3
 8012c30:	9304      	str	r3, [sp, #16]
 8012c32:	9b06      	ldr	r3, [sp, #24]
 8012c34:	b1fb      	cbz	r3, 8012c76 <_dtoa_r+0x7ce>
 8012c36:	9b08      	ldr	r3, [sp, #32]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 809f 	beq.w	8012d7c <_dtoa_r+0x8d4>
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	dd11      	ble.n	8012c66 <_dtoa_r+0x7be>
 8012c42:	4639      	mov	r1, r7
 8012c44:	4632      	mov	r2, r6
 8012c46:	4620      	mov	r0, r4
 8012c48:	f000 fe14 	bl	8013874 <__pow5mult>
 8012c4c:	465a      	mov	r2, fp
 8012c4e:	4601      	mov	r1, r0
 8012c50:	4607      	mov	r7, r0
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 fd68 	bl	8013728 <__multiply>
 8012c58:	4659      	mov	r1, fp
 8012c5a:	9007      	str	r0, [sp, #28]
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f000 fc91 	bl	8013584 <_Bfree>
 8012c62:	9b07      	ldr	r3, [sp, #28]
 8012c64:	469b      	mov	fp, r3
 8012c66:	9b06      	ldr	r3, [sp, #24]
 8012c68:	1b9a      	subs	r2, r3, r6
 8012c6a:	d004      	beq.n	8012c76 <_dtoa_r+0x7ce>
 8012c6c:	4659      	mov	r1, fp
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 fe00 	bl	8013874 <__pow5mult>
 8012c74:	4683      	mov	fp, r0
 8012c76:	2101      	movs	r1, #1
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f000 fd3f 	bl	80136fc <__i2b>
 8012c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	4606      	mov	r6, r0
 8012c84:	dd7c      	ble.n	8012d80 <_dtoa_r+0x8d8>
 8012c86:	461a      	mov	r2, r3
 8012c88:	4601      	mov	r1, r0
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 fdf2 	bl	8013874 <__pow5mult>
 8012c90:	9b05      	ldr	r3, [sp, #20]
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	4606      	mov	r6, r0
 8012c96:	dd76      	ble.n	8012d86 <_dtoa_r+0x8de>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	9306      	str	r3, [sp, #24]
 8012c9c:	6933      	ldr	r3, [r6, #16]
 8012c9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ca2:	6918      	ldr	r0, [r3, #16]
 8012ca4:	f000 fcda 	bl	801365c <__hi0bits>
 8012ca8:	f1c0 0020 	rsb	r0, r0, #32
 8012cac:	9b04      	ldr	r3, [sp, #16]
 8012cae:	4418      	add	r0, r3
 8012cb0:	f010 001f 	ands.w	r0, r0, #31
 8012cb4:	f000 8086 	beq.w	8012dc4 <_dtoa_r+0x91c>
 8012cb8:	f1c0 0320 	rsb	r3, r0, #32
 8012cbc:	2b04      	cmp	r3, #4
 8012cbe:	dd7f      	ble.n	8012dc0 <_dtoa_r+0x918>
 8012cc0:	f1c0 001c 	rsb	r0, r0, #28
 8012cc4:	9b04      	ldr	r3, [sp, #16]
 8012cc6:	4403      	add	r3, r0
 8012cc8:	4480      	add	r8, r0
 8012cca:	4405      	add	r5, r0
 8012ccc:	9304      	str	r3, [sp, #16]
 8012cce:	f1b8 0f00 	cmp.w	r8, #0
 8012cd2:	dd05      	ble.n	8012ce0 <_dtoa_r+0x838>
 8012cd4:	4659      	mov	r1, fp
 8012cd6:	4642      	mov	r2, r8
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f000 fe25 	bl	8013928 <__lshift>
 8012cde:	4683      	mov	fp, r0
 8012ce0:	9b04      	ldr	r3, [sp, #16]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	dd05      	ble.n	8012cf2 <_dtoa_r+0x84a>
 8012ce6:	4631      	mov	r1, r6
 8012ce8:	461a      	mov	r2, r3
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 fe1c 	bl	8013928 <__lshift>
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d069      	beq.n	8012dcc <_dtoa_r+0x924>
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	4658      	mov	r0, fp
 8012cfc:	f000 fe80 	bl	8013a00 <__mcmp>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	da63      	bge.n	8012dcc <_dtoa_r+0x924>
 8012d04:	2300      	movs	r3, #0
 8012d06:	4659      	mov	r1, fp
 8012d08:	220a      	movs	r2, #10
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	f000 fc5c 	bl	80135c8 <__multadd>
 8012d10:	9b08      	ldr	r3, [sp, #32]
 8012d12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012d16:	4683      	mov	fp, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	f000 818f 	beq.w	801303c <_dtoa_r+0xb94>
 8012d1e:	4639      	mov	r1, r7
 8012d20:	2300      	movs	r3, #0
 8012d22:	220a      	movs	r2, #10
 8012d24:	4620      	mov	r0, r4
 8012d26:	f000 fc4f 	bl	80135c8 <__multadd>
 8012d2a:	f1b9 0f00 	cmp.w	r9, #0
 8012d2e:	4607      	mov	r7, r0
 8012d30:	f300 808e 	bgt.w	8012e50 <_dtoa_r+0x9a8>
 8012d34:	9b05      	ldr	r3, [sp, #20]
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	dc50      	bgt.n	8012ddc <_dtoa_r+0x934>
 8012d3a:	e089      	b.n	8012e50 <_dtoa_r+0x9a8>
 8012d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d42:	e75d      	b.n	8012c00 <_dtoa_r+0x758>
 8012d44:	9b01      	ldr	r3, [sp, #4]
 8012d46:	1e5e      	subs	r6, r3, #1
 8012d48:	9b06      	ldr	r3, [sp, #24]
 8012d4a:	42b3      	cmp	r3, r6
 8012d4c:	bfbf      	itttt	lt
 8012d4e:	9b06      	ldrlt	r3, [sp, #24]
 8012d50:	9606      	strlt	r6, [sp, #24]
 8012d52:	1af2      	sublt	r2, r6, r3
 8012d54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012d56:	bfb6      	itet	lt
 8012d58:	189b      	addlt	r3, r3, r2
 8012d5a:	1b9e      	subge	r6, r3, r6
 8012d5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012d5e:	9b01      	ldr	r3, [sp, #4]
 8012d60:	bfb8      	it	lt
 8012d62:	2600      	movlt	r6, #0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	bfb5      	itete	lt
 8012d68:	eba8 0503 	sublt.w	r5, r8, r3
 8012d6c:	9b01      	ldrge	r3, [sp, #4]
 8012d6e:	2300      	movlt	r3, #0
 8012d70:	4645      	movge	r5, r8
 8012d72:	e747      	b.n	8012c04 <_dtoa_r+0x75c>
 8012d74:	9e06      	ldr	r6, [sp, #24]
 8012d76:	9f08      	ldr	r7, [sp, #32]
 8012d78:	4645      	mov	r5, r8
 8012d7a:	e74c      	b.n	8012c16 <_dtoa_r+0x76e>
 8012d7c:	9a06      	ldr	r2, [sp, #24]
 8012d7e:	e775      	b.n	8012c6c <_dtoa_r+0x7c4>
 8012d80:	9b05      	ldr	r3, [sp, #20]
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	dc18      	bgt.n	8012db8 <_dtoa_r+0x910>
 8012d86:	9b02      	ldr	r3, [sp, #8]
 8012d88:	b9b3      	cbnz	r3, 8012db8 <_dtoa_r+0x910>
 8012d8a:	9b03      	ldr	r3, [sp, #12]
 8012d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d90:	b9a3      	cbnz	r3, 8012dbc <_dtoa_r+0x914>
 8012d92:	9b03      	ldr	r3, [sp, #12]
 8012d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d98:	0d1b      	lsrs	r3, r3, #20
 8012d9a:	051b      	lsls	r3, r3, #20
 8012d9c:	b12b      	cbz	r3, 8012daa <_dtoa_r+0x902>
 8012d9e:	9b04      	ldr	r3, [sp, #16]
 8012da0:	3301      	adds	r3, #1
 8012da2:	9304      	str	r3, [sp, #16]
 8012da4:	f108 0801 	add.w	r8, r8, #1
 8012da8:	2301      	movs	r3, #1
 8012daa:	9306      	str	r3, [sp, #24]
 8012dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f47f af74 	bne.w	8012c9c <_dtoa_r+0x7f4>
 8012db4:	2001      	movs	r0, #1
 8012db6:	e779      	b.n	8012cac <_dtoa_r+0x804>
 8012db8:	2300      	movs	r3, #0
 8012dba:	e7f6      	b.n	8012daa <_dtoa_r+0x902>
 8012dbc:	9b02      	ldr	r3, [sp, #8]
 8012dbe:	e7f4      	b.n	8012daa <_dtoa_r+0x902>
 8012dc0:	d085      	beq.n	8012cce <_dtoa_r+0x826>
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	301c      	adds	r0, #28
 8012dc6:	e77d      	b.n	8012cc4 <_dtoa_r+0x81c>
 8012dc8:	40240000 	.word	0x40240000
 8012dcc:	9b01      	ldr	r3, [sp, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	dc38      	bgt.n	8012e44 <_dtoa_r+0x99c>
 8012dd2:	9b05      	ldr	r3, [sp, #20]
 8012dd4:	2b02      	cmp	r3, #2
 8012dd6:	dd35      	ble.n	8012e44 <_dtoa_r+0x99c>
 8012dd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012ddc:	f1b9 0f00 	cmp.w	r9, #0
 8012de0:	d10d      	bne.n	8012dfe <_dtoa_r+0x956>
 8012de2:	4631      	mov	r1, r6
 8012de4:	464b      	mov	r3, r9
 8012de6:	2205      	movs	r2, #5
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 fbed 	bl	80135c8 <__multadd>
 8012dee:	4601      	mov	r1, r0
 8012df0:	4606      	mov	r6, r0
 8012df2:	4658      	mov	r0, fp
 8012df4:	f000 fe04 	bl	8013a00 <__mcmp>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	f73f adbd 	bgt.w	8012978 <_dtoa_r+0x4d0>
 8012dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e00:	9d00      	ldr	r5, [sp, #0]
 8012e02:	ea6f 0a03 	mvn.w	sl, r3
 8012e06:	f04f 0800 	mov.w	r8, #0
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f000 fbb9 	bl	8013584 <_Bfree>
 8012e12:	2f00      	cmp	r7, #0
 8012e14:	f43f aeb4 	beq.w	8012b80 <_dtoa_r+0x6d8>
 8012e18:	f1b8 0f00 	cmp.w	r8, #0
 8012e1c:	d005      	beq.n	8012e2a <_dtoa_r+0x982>
 8012e1e:	45b8      	cmp	r8, r7
 8012e20:	d003      	beq.n	8012e2a <_dtoa_r+0x982>
 8012e22:	4641      	mov	r1, r8
 8012e24:	4620      	mov	r0, r4
 8012e26:	f000 fbad 	bl	8013584 <_Bfree>
 8012e2a:	4639      	mov	r1, r7
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	f000 fba9 	bl	8013584 <_Bfree>
 8012e32:	e6a5      	b.n	8012b80 <_dtoa_r+0x6d8>
 8012e34:	2600      	movs	r6, #0
 8012e36:	4637      	mov	r7, r6
 8012e38:	e7e1      	b.n	8012dfe <_dtoa_r+0x956>
 8012e3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012e3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012e40:	4637      	mov	r7, r6
 8012e42:	e599      	b.n	8012978 <_dtoa_r+0x4d0>
 8012e44:	9b08      	ldr	r3, [sp, #32]
 8012e46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f000 80fd 	beq.w	801304a <_dtoa_r+0xba2>
 8012e50:	2d00      	cmp	r5, #0
 8012e52:	dd05      	ble.n	8012e60 <_dtoa_r+0x9b8>
 8012e54:	4639      	mov	r1, r7
 8012e56:	462a      	mov	r2, r5
 8012e58:	4620      	mov	r0, r4
 8012e5a:	f000 fd65 	bl	8013928 <__lshift>
 8012e5e:	4607      	mov	r7, r0
 8012e60:	9b06      	ldr	r3, [sp, #24]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d05c      	beq.n	8012f20 <_dtoa_r+0xa78>
 8012e66:	6879      	ldr	r1, [r7, #4]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 fb4b 	bl	8013504 <_Balloc>
 8012e6e:	4605      	mov	r5, r0
 8012e70:	b928      	cbnz	r0, 8012e7e <_dtoa_r+0x9d6>
 8012e72:	4b80      	ldr	r3, [pc, #512]	; (8013074 <_dtoa_r+0xbcc>)
 8012e74:	4602      	mov	r2, r0
 8012e76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012e7a:	f7ff bb2e 	b.w	80124da <_dtoa_r+0x32>
 8012e7e:	693a      	ldr	r2, [r7, #16]
 8012e80:	3202      	adds	r2, #2
 8012e82:	0092      	lsls	r2, r2, #2
 8012e84:	f107 010c 	add.w	r1, r7, #12
 8012e88:	300c      	adds	r0, #12
 8012e8a:	f7fe fc39 	bl	8011700 <memcpy>
 8012e8e:	2201      	movs	r2, #1
 8012e90:	4629      	mov	r1, r5
 8012e92:	4620      	mov	r0, r4
 8012e94:	f000 fd48 	bl	8013928 <__lshift>
 8012e98:	9b00      	ldr	r3, [sp, #0]
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	9301      	str	r3, [sp, #4]
 8012e9e:	9b00      	ldr	r3, [sp, #0]
 8012ea0:	444b      	add	r3, r9
 8012ea2:	9307      	str	r3, [sp, #28]
 8012ea4:	9b02      	ldr	r3, [sp, #8]
 8012ea6:	f003 0301 	and.w	r3, r3, #1
 8012eaa:	46b8      	mov	r8, r7
 8012eac:	9306      	str	r3, [sp, #24]
 8012eae:	4607      	mov	r7, r0
 8012eb0:	9b01      	ldr	r3, [sp, #4]
 8012eb2:	4631      	mov	r1, r6
 8012eb4:	3b01      	subs	r3, #1
 8012eb6:	4658      	mov	r0, fp
 8012eb8:	9302      	str	r3, [sp, #8]
 8012eba:	f7ff fa67 	bl	801238c <quorem>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	3330      	adds	r3, #48	; 0x30
 8012ec2:	9004      	str	r0, [sp, #16]
 8012ec4:	4641      	mov	r1, r8
 8012ec6:	4658      	mov	r0, fp
 8012ec8:	9308      	str	r3, [sp, #32]
 8012eca:	f000 fd99 	bl	8013a00 <__mcmp>
 8012ece:	463a      	mov	r2, r7
 8012ed0:	4681      	mov	r9, r0
 8012ed2:	4631      	mov	r1, r6
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f000 fdaf 	bl	8013a38 <__mdiff>
 8012eda:	68c2      	ldr	r2, [r0, #12]
 8012edc:	9b08      	ldr	r3, [sp, #32]
 8012ede:	4605      	mov	r5, r0
 8012ee0:	bb02      	cbnz	r2, 8012f24 <_dtoa_r+0xa7c>
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	4658      	mov	r0, fp
 8012ee6:	f000 fd8b 	bl	8013a00 <__mcmp>
 8012eea:	9b08      	ldr	r3, [sp, #32]
 8012eec:	4602      	mov	r2, r0
 8012eee:	4629      	mov	r1, r5
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012ef6:	f000 fb45 	bl	8013584 <_Bfree>
 8012efa:	9b05      	ldr	r3, [sp, #20]
 8012efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012efe:	9d01      	ldr	r5, [sp, #4]
 8012f00:	ea43 0102 	orr.w	r1, r3, r2
 8012f04:	9b06      	ldr	r3, [sp, #24]
 8012f06:	430b      	orrs	r3, r1
 8012f08:	9b08      	ldr	r3, [sp, #32]
 8012f0a:	d10d      	bne.n	8012f28 <_dtoa_r+0xa80>
 8012f0c:	2b39      	cmp	r3, #57	; 0x39
 8012f0e:	d029      	beq.n	8012f64 <_dtoa_r+0xabc>
 8012f10:	f1b9 0f00 	cmp.w	r9, #0
 8012f14:	dd01      	ble.n	8012f1a <_dtoa_r+0xa72>
 8012f16:	9b04      	ldr	r3, [sp, #16]
 8012f18:	3331      	adds	r3, #49	; 0x31
 8012f1a:	9a02      	ldr	r2, [sp, #8]
 8012f1c:	7013      	strb	r3, [r2, #0]
 8012f1e:	e774      	b.n	8012e0a <_dtoa_r+0x962>
 8012f20:	4638      	mov	r0, r7
 8012f22:	e7b9      	b.n	8012e98 <_dtoa_r+0x9f0>
 8012f24:	2201      	movs	r2, #1
 8012f26:	e7e2      	b.n	8012eee <_dtoa_r+0xa46>
 8012f28:	f1b9 0f00 	cmp.w	r9, #0
 8012f2c:	db06      	blt.n	8012f3c <_dtoa_r+0xa94>
 8012f2e:	9905      	ldr	r1, [sp, #20]
 8012f30:	ea41 0909 	orr.w	r9, r1, r9
 8012f34:	9906      	ldr	r1, [sp, #24]
 8012f36:	ea59 0101 	orrs.w	r1, r9, r1
 8012f3a:	d120      	bne.n	8012f7e <_dtoa_r+0xad6>
 8012f3c:	2a00      	cmp	r2, #0
 8012f3e:	ddec      	ble.n	8012f1a <_dtoa_r+0xa72>
 8012f40:	4659      	mov	r1, fp
 8012f42:	2201      	movs	r2, #1
 8012f44:	4620      	mov	r0, r4
 8012f46:	9301      	str	r3, [sp, #4]
 8012f48:	f000 fcee 	bl	8013928 <__lshift>
 8012f4c:	4631      	mov	r1, r6
 8012f4e:	4683      	mov	fp, r0
 8012f50:	f000 fd56 	bl	8013a00 <__mcmp>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	9b01      	ldr	r3, [sp, #4]
 8012f58:	dc02      	bgt.n	8012f60 <_dtoa_r+0xab8>
 8012f5a:	d1de      	bne.n	8012f1a <_dtoa_r+0xa72>
 8012f5c:	07da      	lsls	r2, r3, #31
 8012f5e:	d5dc      	bpl.n	8012f1a <_dtoa_r+0xa72>
 8012f60:	2b39      	cmp	r3, #57	; 0x39
 8012f62:	d1d8      	bne.n	8012f16 <_dtoa_r+0xa6e>
 8012f64:	9a02      	ldr	r2, [sp, #8]
 8012f66:	2339      	movs	r3, #57	; 0x39
 8012f68:	7013      	strb	r3, [r2, #0]
 8012f6a:	462b      	mov	r3, r5
 8012f6c:	461d      	mov	r5, r3
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f74:	2a39      	cmp	r2, #57	; 0x39
 8012f76:	d050      	beq.n	801301a <_dtoa_r+0xb72>
 8012f78:	3201      	adds	r2, #1
 8012f7a:	701a      	strb	r2, [r3, #0]
 8012f7c:	e745      	b.n	8012e0a <_dtoa_r+0x962>
 8012f7e:	2a00      	cmp	r2, #0
 8012f80:	dd03      	ble.n	8012f8a <_dtoa_r+0xae2>
 8012f82:	2b39      	cmp	r3, #57	; 0x39
 8012f84:	d0ee      	beq.n	8012f64 <_dtoa_r+0xabc>
 8012f86:	3301      	adds	r3, #1
 8012f88:	e7c7      	b.n	8012f1a <_dtoa_r+0xa72>
 8012f8a:	9a01      	ldr	r2, [sp, #4]
 8012f8c:	9907      	ldr	r1, [sp, #28]
 8012f8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f92:	428a      	cmp	r2, r1
 8012f94:	d02a      	beq.n	8012fec <_dtoa_r+0xb44>
 8012f96:	4659      	mov	r1, fp
 8012f98:	2300      	movs	r3, #0
 8012f9a:	220a      	movs	r2, #10
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	f000 fb13 	bl	80135c8 <__multadd>
 8012fa2:	45b8      	cmp	r8, r7
 8012fa4:	4683      	mov	fp, r0
 8012fa6:	f04f 0300 	mov.w	r3, #0
 8012faa:	f04f 020a 	mov.w	r2, #10
 8012fae:	4641      	mov	r1, r8
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	d107      	bne.n	8012fc4 <_dtoa_r+0xb1c>
 8012fb4:	f000 fb08 	bl	80135c8 <__multadd>
 8012fb8:	4680      	mov	r8, r0
 8012fba:	4607      	mov	r7, r0
 8012fbc:	9b01      	ldr	r3, [sp, #4]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	9301      	str	r3, [sp, #4]
 8012fc2:	e775      	b.n	8012eb0 <_dtoa_r+0xa08>
 8012fc4:	f000 fb00 	bl	80135c8 <__multadd>
 8012fc8:	4639      	mov	r1, r7
 8012fca:	4680      	mov	r8, r0
 8012fcc:	2300      	movs	r3, #0
 8012fce:	220a      	movs	r2, #10
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f000 faf9 	bl	80135c8 <__multadd>
 8012fd6:	4607      	mov	r7, r0
 8012fd8:	e7f0      	b.n	8012fbc <_dtoa_r+0xb14>
 8012fda:	f1b9 0f00 	cmp.w	r9, #0
 8012fde:	9a00      	ldr	r2, [sp, #0]
 8012fe0:	bfcc      	ite	gt
 8012fe2:	464d      	movgt	r5, r9
 8012fe4:	2501      	movle	r5, #1
 8012fe6:	4415      	add	r5, r2
 8012fe8:	f04f 0800 	mov.w	r8, #0
 8012fec:	4659      	mov	r1, fp
 8012fee:	2201      	movs	r2, #1
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	f000 fc98 	bl	8013928 <__lshift>
 8012ff8:	4631      	mov	r1, r6
 8012ffa:	4683      	mov	fp, r0
 8012ffc:	f000 fd00 	bl	8013a00 <__mcmp>
 8013000:	2800      	cmp	r0, #0
 8013002:	dcb2      	bgt.n	8012f6a <_dtoa_r+0xac2>
 8013004:	d102      	bne.n	801300c <_dtoa_r+0xb64>
 8013006:	9b01      	ldr	r3, [sp, #4]
 8013008:	07db      	lsls	r3, r3, #31
 801300a:	d4ae      	bmi.n	8012f6a <_dtoa_r+0xac2>
 801300c:	462b      	mov	r3, r5
 801300e:	461d      	mov	r5, r3
 8013010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013014:	2a30      	cmp	r2, #48	; 0x30
 8013016:	d0fa      	beq.n	801300e <_dtoa_r+0xb66>
 8013018:	e6f7      	b.n	8012e0a <_dtoa_r+0x962>
 801301a:	9a00      	ldr	r2, [sp, #0]
 801301c:	429a      	cmp	r2, r3
 801301e:	d1a5      	bne.n	8012f6c <_dtoa_r+0xac4>
 8013020:	f10a 0a01 	add.w	sl, sl, #1
 8013024:	2331      	movs	r3, #49	; 0x31
 8013026:	e779      	b.n	8012f1c <_dtoa_r+0xa74>
 8013028:	4b13      	ldr	r3, [pc, #76]	; (8013078 <_dtoa_r+0xbd0>)
 801302a:	f7ff baaf 	b.w	801258c <_dtoa_r+0xe4>
 801302e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013030:	2b00      	cmp	r3, #0
 8013032:	f47f aa86 	bne.w	8012542 <_dtoa_r+0x9a>
 8013036:	4b11      	ldr	r3, [pc, #68]	; (801307c <_dtoa_r+0xbd4>)
 8013038:	f7ff baa8 	b.w	801258c <_dtoa_r+0xe4>
 801303c:	f1b9 0f00 	cmp.w	r9, #0
 8013040:	dc03      	bgt.n	801304a <_dtoa_r+0xba2>
 8013042:	9b05      	ldr	r3, [sp, #20]
 8013044:	2b02      	cmp	r3, #2
 8013046:	f73f aec9 	bgt.w	8012ddc <_dtoa_r+0x934>
 801304a:	9d00      	ldr	r5, [sp, #0]
 801304c:	4631      	mov	r1, r6
 801304e:	4658      	mov	r0, fp
 8013050:	f7ff f99c 	bl	801238c <quorem>
 8013054:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013058:	f805 3b01 	strb.w	r3, [r5], #1
 801305c:	9a00      	ldr	r2, [sp, #0]
 801305e:	1aaa      	subs	r2, r5, r2
 8013060:	4591      	cmp	r9, r2
 8013062:	ddba      	ble.n	8012fda <_dtoa_r+0xb32>
 8013064:	4659      	mov	r1, fp
 8013066:	2300      	movs	r3, #0
 8013068:	220a      	movs	r2, #10
 801306a:	4620      	mov	r0, r4
 801306c:	f000 faac 	bl	80135c8 <__multadd>
 8013070:	4683      	mov	fp, r0
 8013072:	e7eb      	b.n	801304c <_dtoa_r+0xba4>
 8013074:	08018f13 	.word	0x08018f13
 8013078:	08018e30 	.word	0x08018e30
 801307c:	08018e90 	.word	0x08018e90

08013080 <__sflush_r>:
 8013080:	898a      	ldrh	r2, [r1, #12]
 8013082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013086:	4605      	mov	r5, r0
 8013088:	0710      	lsls	r0, r2, #28
 801308a:	460c      	mov	r4, r1
 801308c:	d458      	bmi.n	8013140 <__sflush_r+0xc0>
 801308e:	684b      	ldr	r3, [r1, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dc05      	bgt.n	80130a0 <__sflush_r+0x20>
 8013094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013096:	2b00      	cmp	r3, #0
 8013098:	dc02      	bgt.n	80130a0 <__sflush_r+0x20>
 801309a:	2000      	movs	r0, #0
 801309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130a2:	2e00      	cmp	r6, #0
 80130a4:	d0f9      	beq.n	801309a <__sflush_r+0x1a>
 80130a6:	2300      	movs	r3, #0
 80130a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80130ac:	682f      	ldr	r7, [r5, #0]
 80130ae:	602b      	str	r3, [r5, #0]
 80130b0:	d032      	beq.n	8013118 <__sflush_r+0x98>
 80130b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	075a      	lsls	r2, r3, #29
 80130b8:	d505      	bpl.n	80130c6 <__sflush_r+0x46>
 80130ba:	6863      	ldr	r3, [r4, #4]
 80130bc:	1ac0      	subs	r0, r0, r3
 80130be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130c0:	b10b      	cbz	r3, 80130c6 <__sflush_r+0x46>
 80130c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130c4:	1ac0      	subs	r0, r0, r3
 80130c6:	2300      	movs	r3, #0
 80130c8:	4602      	mov	r2, r0
 80130ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130cc:	6a21      	ldr	r1, [r4, #32]
 80130ce:	4628      	mov	r0, r5
 80130d0:	47b0      	blx	r6
 80130d2:	1c43      	adds	r3, r0, #1
 80130d4:	89a3      	ldrh	r3, [r4, #12]
 80130d6:	d106      	bne.n	80130e6 <__sflush_r+0x66>
 80130d8:	6829      	ldr	r1, [r5, #0]
 80130da:	291d      	cmp	r1, #29
 80130dc:	d82c      	bhi.n	8013138 <__sflush_r+0xb8>
 80130de:	4a2a      	ldr	r2, [pc, #168]	; (8013188 <__sflush_r+0x108>)
 80130e0:	40ca      	lsrs	r2, r1
 80130e2:	07d6      	lsls	r6, r2, #31
 80130e4:	d528      	bpl.n	8013138 <__sflush_r+0xb8>
 80130e6:	2200      	movs	r2, #0
 80130e8:	6062      	str	r2, [r4, #4]
 80130ea:	04d9      	lsls	r1, r3, #19
 80130ec:	6922      	ldr	r2, [r4, #16]
 80130ee:	6022      	str	r2, [r4, #0]
 80130f0:	d504      	bpl.n	80130fc <__sflush_r+0x7c>
 80130f2:	1c42      	adds	r2, r0, #1
 80130f4:	d101      	bne.n	80130fa <__sflush_r+0x7a>
 80130f6:	682b      	ldr	r3, [r5, #0]
 80130f8:	b903      	cbnz	r3, 80130fc <__sflush_r+0x7c>
 80130fa:	6560      	str	r0, [r4, #84]	; 0x54
 80130fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130fe:	602f      	str	r7, [r5, #0]
 8013100:	2900      	cmp	r1, #0
 8013102:	d0ca      	beq.n	801309a <__sflush_r+0x1a>
 8013104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013108:	4299      	cmp	r1, r3
 801310a:	d002      	beq.n	8013112 <__sflush_r+0x92>
 801310c:	4628      	mov	r0, r5
 801310e:	f7fe fb0d 	bl	801172c <_free_r>
 8013112:	2000      	movs	r0, #0
 8013114:	6360      	str	r0, [r4, #52]	; 0x34
 8013116:	e7c1      	b.n	801309c <__sflush_r+0x1c>
 8013118:	6a21      	ldr	r1, [r4, #32]
 801311a:	2301      	movs	r3, #1
 801311c:	4628      	mov	r0, r5
 801311e:	47b0      	blx	r6
 8013120:	1c41      	adds	r1, r0, #1
 8013122:	d1c7      	bne.n	80130b4 <__sflush_r+0x34>
 8013124:	682b      	ldr	r3, [r5, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d0c4      	beq.n	80130b4 <__sflush_r+0x34>
 801312a:	2b1d      	cmp	r3, #29
 801312c:	d001      	beq.n	8013132 <__sflush_r+0xb2>
 801312e:	2b16      	cmp	r3, #22
 8013130:	d101      	bne.n	8013136 <__sflush_r+0xb6>
 8013132:	602f      	str	r7, [r5, #0]
 8013134:	e7b1      	b.n	801309a <__sflush_r+0x1a>
 8013136:	89a3      	ldrh	r3, [r4, #12]
 8013138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313c:	81a3      	strh	r3, [r4, #12]
 801313e:	e7ad      	b.n	801309c <__sflush_r+0x1c>
 8013140:	690f      	ldr	r7, [r1, #16]
 8013142:	2f00      	cmp	r7, #0
 8013144:	d0a9      	beq.n	801309a <__sflush_r+0x1a>
 8013146:	0793      	lsls	r3, r2, #30
 8013148:	680e      	ldr	r6, [r1, #0]
 801314a:	bf08      	it	eq
 801314c:	694b      	ldreq	r3, [r1, #20]
 801314e:	600f      	str	r7, [r1, #0]
 8013150:	bf18      	it	ne
 8013152:	2300      	movne	r3, #0
 8013154:	eba6 0807 	sub.w	r8, r6, r7
 8013158:	608b      	str	r3, [r1, #8]
 801315a:	f1b8 0f00 	cmp.w	r8, #0
 801315e:	dd9c      	ble.n	801309a <__sflush_r+0x1a>
 8013160:	6a21      	ldr	r1, [r4, #32]
 8013162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013164:	4643      	mov	r3, r8
 8013166:	463a      	mov	r2, r7
 8013168:	4628      	mov	r0, r5
 801316a:	47b0      	blx	r6
 801316c:	2800      	cmp	r0, #0
 801316e:	dc06      	bgt.n	801317e <__sflush_r+0xfe>
 8013170:	89a3      	ldrh	r3, [r4, #12]
 8013172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013176:	81a3      	strh	r3, [r4, #12]
 8013178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801317c:	e78e      	b.n	801309c <__sflush_r+0x1c>
 801317e:	4407      	add	r7, r0
 8013180:	eba8 0800 	sub.w	r8, r8, r0
 8013184:	e7e9      	b.n	801315a <__sflush_r+0xda>
 8013186:	bf00      	nop
 8013188:	20400001 	.word	0x20400001

0801318c <_fflush_r>:
 801318c:	b538      	push	{r3, r4, r5, lr}
 801318e:	690b      	ldr	r3, [r1, #16]
 8013190:	4605      	mov	r5, r0
 8013192:	460c      	mov	r4, r1
 8013194:	b913      	cbnz	r3, 801319c <_fflush_r+0x10>
 8013196:	2500      	movs	r5, #0
 8013198:	4628      	mov	r0, r5
 801319a:	bd38      	pop	{r3, r4, r5, pc}
 801319c:	b118      	cbz	r0, 80131a6 <_fflush_r+0x1a>
 801319e:	6983      	ldr	r3, [r0, #24]
 80131a0:	b90b      	cbnz	r3, 80131a6 <_fflush_r+0x1a>
 80131a2:	f000 f887 	bl	80132b4 <__sinit>
 80131a6:	4b14      	ldr	r3, [pc, #80]	; (80131f8 <_fflush_r+0x6c>)
 80131a8:	429c      	cmp	r4, r3
 80131aa:	d11b      	bne.n	80131e4 <_fflush_r+0x58>
 80131ac:	686c      	ldr	r4, [r5, #4]
 80131ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d0ef      	beq.n	8013196 <_fflush_r+0xa>
 80131b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80131b8:	07d0      	lsls	r0, r2, #31
 80131ba:	d404      	bmi.n	80131c6 <_fflush_r+0x3a>
 80131bc:	0599      	lsls	r1, r3, #22
 80131be:	d402      	bmi.n	80131c6 <_fflush_r+0x3a>
 80131c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131c2:	f000 f92c 	bl	801341e <__retarget_lock_acquire_recursive>
 80131c6:	4628      	mov	r0, r5
 80131c8:	4621      	mov	r1, r4
 80131ca:	f7ff ff59 	bl	8013080 <__sflush_r>
 80131ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131d0:	07da      	lsls	r2, r3, #31
 80131d2:	4605      	mov	r5, r0
 80131d4:	d4e0      	bmi.n	8013198 <_fflush_r+0xc>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	059b      	lsls	r3, r3, #22
 80131da:	d4dd      	bmi.n	8013198 <_fflush_r+0xc>
 80131dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131de:	f000 f91f 	bl	8013420 <__retarget_lock_release_recursive>
 80131e2:	e7d9      	b.n	8013198 <_fflush_r+0xc>
 80131e4:	4b05      	ldr	r3, [pc, #20]	; (80131fc <_fflush_r+0x70>)
 80131e6:	429c      	cmp	r4, r3
 80131e8:	d101      	bne.n	80131ee <_fflush_r+0x62>
 80131ea:	68ac      	ldr	r4, [r5, #8]
 80131ec:	e7df      	b.n	80131ae <_fflush_r+0x22>
 80131ee:	4b04      	ldr	r3, [pc, #16]	; (8013200 <_fflush_r+0x74>)
 80131f0:	429c      	cmp	r4, r3
 80131f2:	bf08      	it	eq
 80131f4:	68ec      	ldreq	r4, [r5, #12]
 80131f6:	e7da      	b.n	80131ae <_fflush_r+0x22>
 80131f8:	08018f44 	.word	0x08018f44
 80131fc:	08018f64 	.word	0x08018f64
 8013200:	08018f24 	.word	0x08018f24

08013204 <std>:
 8013204:	2300      	movs	r3, #0
 8013206:	b510      	push	{r4, lr}
 8013208:	4604      	mov	r4, r0
 801320a:	e9c0 3300 	strd	r3, r3, [r0]
 801320e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013212:	6083      	str	r3, [r0, #8]
 8013214:	8181      	strh	r1, [r0, #12]
 8013216:	6643      	str	r3, [r0, #100]	; 0x64
 8013218:	81c2      	strh	r2, [r0, #14]
 801321a:	6183      	str	r3, [r0, #24]
 801321c:	4619      	mov	r1, r3
 801321e:	2208      	movs	r2, #8
 8013220:	305c      	adds	r0, #92	; 0x5c
 8013222:	f7fe fa7b 	bl	801171c <memset>
 8013226:	4b05      	ldr	r3, [pc, #20]	; (801323c <std+0x38>)
 8013228:	6263      	str	r3, [r4, #36]	; 0x24
 801322a:	4b05      	ldr	r3, [pc, #20]	; (8013240 <std+0x3c>)
 801322c:	62a3      	str	r3, [r4, #40]	; 0x28
 801322e:	4b05      	ldr	r3, [pc, #20]	; (8013244 <std+0x40>)
 8013230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013232:	4b05      	ldr	r3, [pc, #20]	; (8013248 <std+0x44>)
 8013234:	6224      	str	r4, [r4, #32]
 8013236:	6323      	str	r3, [r4, #48]	; 0x30
 8013238:	bd10      	pop	{r4, pc}
 801323a:	bf00      	nop
 801323c:	08013f61 	.word	0x08013f61
 8013240:	08013f83 	.word	0x08013f83
 8013244:	08013fbb 	.word	0x08013fbb
 8013248:	08013fdf 	.word	0x08013fdf

0801324c <_cleanup_r>:
 801324c:	4901      	ldr	r1, [pc, #4]	; (8013254 <_cleanup_r+0x8>)
 801324e:	f000 b8c1 	b.w	80133d4 <_fwalk_reent>
 8013252:	bf00      	nop
 8013254:	0801318d 	.word	0x0801318d

08013258 <__sfmoreglue>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	1e4a      	subs	r2, r1, #1
 801325c:	2568      	movs	r5, #104	; 0x68
 801325e:	4355      	muls	r5, r2
 8013260:	460e      	mov	r6, r1
 8013262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013266:	f7fe fab1 	bl	80117cc <_malloc_r>
 801326a:	4604      	mov	r4, r0
 801326c:	b140      	cbz	r0, 8013280 <__sfmoreglue+0x28>
 801326e:	2100      	movs	r1, #0
 8013270:	e9c0 1600 	strd	r1, r6, [r0]
 8013274:	300c      	adds	r0, #12
 8013276:	60a0      	str	r0, [r4, #8]
 8013278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801327c:	f7fe fa4e 	bl	801171c <memset>
 8013280:	4620      	mov	r0, r4
 8013282:	bd70      	pop	{r4, r5, r6, pc}

08013284 <__sfp_lock_acquire>:
 8013284:	4801      	ldr	r0, [pc, #4]	; (801328c <__sfp_lock_acquire+0x8>)
 8013286:	f000 b8ca 	b.w	801341e <__retarget_lock_acquire_recursive>
 801328a:	bf00      	nop
 801328c:	200413ac 	.word	0x200413ac

08013290 <__sfp_lock_release>:
 8013290:	4801      	ldr	r0, [pc, #4]	; (8013298 <__sfp_lock_release+0x8>)
 8013292:	f000 b8c5 	b.w	8013420 <__retarget_lock_release_recursive>
 8013296:	bf00      	nop
 8013298:	200413ac 	.word	0x200413ac

0801329c <__sinit_lock_acquire>:
 801329c:	4801      	ldr	r0, [pc, #4]	; (80132a4 <__sinit_lock_acquire+0x8>)
 801329e:	f000 b8be 	b.w	801341e <__retarget_lock_acquire_recursive>
 80132a2:	bf00      	nop
 80132a4:	200413a7 	.word	0x200413a7

080132a8 <__sinit_lock_release>:
 80132a8:	4801      	ldr	r0, [pc, #4]	; (80132b0 <__sinit_lock_release+0x8>)
 80132aa:	f000 b8b9 	b.w	8013420 <__retarget_lock_release_recursive>
 80132ae:	bf00      	nop
 80132b0:	200413a7 	.word	0x200413a7

080132b4 <__sinit>:
 80132b4:	b510      	push	{r4, lr}
 80132b6:	4604      	mov	r4, r0
 80132b8:	f7ff fff0 	bl	801329c <__sinit_lock_acquire>
 80132bc:	69a3      	ldr	r3, [r4, #24]
 80132be:	b11b      	cbz	r3, 80132c8 <__sinit+0x14>
 80132c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132c4:	f7ff bff0 	b.w	80132a8 <__sinit_lock_release>
 80132c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80132cc:	6523      	str	r3, [r4, #80]	; 0x50
 80132ce:	4b13      	ldr	r3, [pc, #76]	; (801331c <__sinit+0x68>)
 80132d0:	4a13      	ldr	r2, [pc, #76]	; (8013320 <__sinit+0x6c>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80132d6:	42a3      	cmp	r3, r4
 80132d8:	bf04      	itt	eq
 80132da:	2301      	moveq	r3, #1
 80132dc:	61a3      	streq	r3, [r4, #24]
 80132de:	4620      	mov	r0, r4
 80132e0:	f000 f820 	bl	8013324 <__sfp>
 80132e4:	6060      	str	r0, [r4, #4]
 80132e6:	4620      	mov	r0, r4
 80132e8:	f000 f81c 	bl	8013324 <__sfp>
 80132ec:	60a0      	str	r0, [r4, #8]
 80132ee:	4620      	mov	r0, r4
 80132f0:	f000 f818 	bl	8013324 <__sfp>
 80132f4:	2200      	movs	r2, #0
 80132f6:	60e0      	str	r0, [r4, #12]
 80132f8:	2104      	movs	r1, #4
 80132fa:	6860      	ldr	r0, [r4, #4]
 80132fc:	f7ff ff82 	bl	8013204 <std>
 8013300:	68a0      	ldr	r0, [r4, #8]
 8013302:	2201      	movs	r2, #1
 8013304:	2109      	movs	r1, #9
 8013306:	f7ff ff7d 	bl	8013204 <std>
 801330a:	68e0      	ldr	r0, [r4, #12]
 801330c:	2202      	movs	r2, #2
 801330e:	2112      	movs	r1, #18
 8013310:	f7ff ff78 	bl	8013204 <std>
 8013314:	2301      	movs	r3, #1
 8013316:	61a3      	str	r3, [r4, #24]
 8013318:	e7d2      	b.n	80132c0 <__sinit+0xc>
 801331a:	bf00      	nop
 801331c:	08018e1c 	.word	0x08018e1c
 8013320:	0801324d 	.word	0x0801324d

08013324 <__sfp>:
 8013324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013326:	4607      	mov	r7, r0
 8013328:	f7ff ffac 	bl	8013284 <__sfp_lock_acquire>
 801332c:	4b1e      	ldr	r3, [pc, #120]	; (80133a8 <__sfp+0x84>)
 801332e:	681e      	ldr	r6, [r3, #0]
 8013330:	69b3      	ldr	r3, [r6, #24]
 8013332:	b913      	cbnz	r3, 801333a <__sfp+0x16>
 8013334:	4630      	mov	r0, r6
 8013336:	f7ff ffbd 	bl	80132b4 <__sinit>
 801333a:	3648      	adds	r6, #72	; 0x48
 801333c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013340:	3b01      	subs	r3, #1
 8013342:	d503      	bpl.n	801334c <__sfp+0x28>
 8013344:	6833      	ldr	r3, [r6, #0]
 8013346:	b30b      	cbz	r3, 801338c <__sfp+0x68>
 8013348:	6836      	ldr	r6, [r6, #0]
 801334a:	e7f7      	b.n	801333c <__sfp+0x18>
 801334c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013350:	b9d5      	cbnz	r5, 8013388 <__sfp+0x64>
 8013352:	4b16      	ldr	r3, [pc, #88]	; (80133ac <__sfp+0x88>)
 8013354:	60e3      	str	r3, [r4, #12]
 8013356:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801335a:	6665      	str	r5, [r4, #100]	; 0x64
 801335c:	f000 f85e 	bl	801341c <__retarget_lock_init_recursive>
 8013360:	f7ff ff96 	bl	8013290 <__sfp_lock_release>
 8013364:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013368:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801336c:	6025      	str	r5, [r4, #0]
 801336e:	61a5      	str	r5, [r4, #24]
 8013370:	2208      	movs	r2, #8
 8013372:	4629      	mov	r1, r5
 8013374:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013378:	f7fe f9d0 	bl	801171c <memset>
 801337c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013380:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013384:	4620      	mov	r0, r4
 8013386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013388:	3468      	adds	r4, #104	; 0x68
 801338a:	e7d9      	b.n	8013340 <__sfp+0x1c>
 801338c:	2104      	movs	r1, #4
 801338e:	4638      	mov	r0, r7
 8013390:	f7ff ff62 	bl	8013258 <__sfmoreglue>
 8013394:	4604      	mov	r4, r0
 8013396:	6030      	str	r0, [r6, #0]
 8013398:	2800      	cmp	r0, #0
 801339a:	d1d5      	bne.n	8013348 <__sfp+0x24>
 801339c:	f7ff ff78 	bl	8013290 <__sfp_lock_release>
 80133a0:	230c      	movs	r3, #12
 80133a2:	603b      	str	r3, [r7, #0]
 80133a4:	e7ee      	b.n	8013384 <__sfp+0x60>
 80133a6:	bf00      	nop
 80133a8:	08018e1c 	.word	0x08018e1c
 80133ac:	ffff0001 	.word	0xffff0001

080133b0 <fiprintf>:
 80133b0:	b40e      	push	{r1, r2, r3}
 80133b2:	b503      	push	{r0, r1, lr}
 80133b4:	4601      	mov	r1, r0
 80133b6:	ab03      	add	r3, sp, #12
 80133b8:	4805      	ldr	r0, [pc, #20]	; (80133d0 <fiprintf+0x20>)
 80133ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80133be:	6800      	ldr	r0, [r0, #0]
 80133c0:	9301      	str	r3, [sp, #4]
 80133c2:	f000 fc55 	bl	8013c70 <_vfiprintf_r>
 80133c6:	b002      	add	sp, #8
 80133c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133cc:	b003      	add	sp, #12
 80133ce:	4770      	bx	lr
 80133d0:	20000018 	.word	0x20000018

080133d4 <_fwalk_reent>:
 80133d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d8:	4606      	mov	r6, r0
 80133da:	4688      	mov	r8, r1
 80133dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133e0:	2700      	movs	r7, #0
 80133e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80133e6:	f1b9 0901 	subs.w	r9, r9, #1
 80133ea:	d505      	bpl.n	80133f8 <_fwalk_reent+0x24>
 80133ec:	6824      	ldr	r4, [r4, #0]
 80133ee:	2c00      	cmp	r4, #0
 80133f0:	d1f7      	bne.n	80133e2 <_fwalk_reent+0xe>
 80133f2:	4638      	mov	r0, r7
 80133f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f8:	89ab      	ldrh	r3, [r5, #12]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d907      	bls.n	801340e <_fwalk_reent+0x3a>
 80133fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013402:	3301      	adds	r3, #1
 8013404:	d003      	beq.n	801340e <_fwalk_reent+0x3a>
 8013406:	4629      	mov	r1, r5
 8013408:	4630      	mov	r0, r6
 801340a:	47c0      	blx	r8
 801340c:	4307      	orrs	r7, r0
 801340e:	3568      	adds	r5, #104	; 0x68
 8013410:	e7e9      	b.n	80133e6 <_fwalk_reent+0x12>
	...

08013414 <_localeconv_r>:
 8013414:	4800      	ldr	r0, [pc, #0]	; (8013418 <_localeconv_r+0x4>)
 8013416:	4770      	bx	lr
 8013418:	2000016c 	.word	0x2000016c

0801341c <__retarget_lock_init_recursive>:
 801341c:	4770      	bx	lr

0801341e <__retarget_lock_acquire_recursive>:
 801341e:	4770      	bx	lr

08013420 <__retarget_lock_release_recursive>:
 8013420:	4770      	bx	lr

08013422 <__swhatbuf_r>:
 8013422:	b570      	push	{r4, r5, r6, lr}
 8013424:	460e      	mov	r6, r1
 8013426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801342a:	2900      	cmp	r1, #0
 801342c:	b096      	sub	sp, #88	; 0x58
 801342e:	4614      	mov	r4, r2
 8013430:	461d      	mov	r5, r3
 8013432:	da07      	bge.n	8013444 <__swhatbuf_r+0x22>
 8013434:	2300      	movs	r3, #0
 8013436:	602b      	str	r3, [r5, #0]
 8013438:	89b3      	ldrh	r3, [r6, #12]
 801343a:	061a      	lsls	r2, r3, #24
 801343c:	d410      	bmi.n	8013460 <__swhatbuf_r+0x3e>
 801343e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013442:	e00e      	b.n	8013462 <__swhatbuf_r+0x40>
 8013444:	466a      	mov	r2, sp
 8013446:	f000 fdf9 	bl	801403c <_fstat_r>
 801344a:	2800      	cmp	r0, #0
 801344c:	dbf2      	blt.n	8013434 <__swhatbuf_r+0x12>
 801344e:	9a01      	ldr	r2, [sp, #4]
 8013450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013458:	425a      	negs	r2, r3
 801345a:	415a      	adcs	r2, r3
 801345c:	602a      	str	r2, [r5, #0]
 801345e:	e7ee      	b.n	801343e <__swhatbuf_r+0x1c>
 8013460:	2340      	movs	r3, #64	; 0x40
 8013462:	2000      	movs	r0, #0
 8013464:	6023      	str	r3, [r4, #0]
 8013466:	b016      	add	sp, #88	; 0x58
 8013468:	bd70      	pop	{r4, r5, r6, pc}
	...

0801346c <__smakebuf_r>:
 801346c:	898b      	ldrh	r3, [r1, #12]
 801346e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013470:	079d      	lsls	r5, r3, #30
 8013472:	4606      	mov	r6, r0
 8013474:	460c      	mov	r4, r1
 8013476:	d507      	bpl.n	8013488 <__smakebuf_r+0x1c>
 8013478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801347c:	6023      	str	r3, [r4, #0]
 801347e:	6123      	str	r3, [r4, #16]
 8013480:	2301      	movs	r3, #1
 8013482:	6163      	str	r3, [r4, #20]
 8013484:	b002      	add	sp, #8
 8013486:	bd70      	pop	{r4, r5, r6, pc}
 8013488:	ab01      	add	r3, sp, #4
 801348a:	466a      	mov	r2, sp
 801348c:	f7ff ffc9 	bl	8013422 <__swhatbuf_r>
 8013490:	9900      	ldr	r1, [sp, #0]
 8013492:	4605      	mov	r5, r0
 8013494:	4630      	mov	r0, r6
 8013496:	f7fe f999 	bl	80117cc <_malloc_r>
 801349a:	b948      	cbnz	r0, 80134b0 <__smakebuf_r+0x44>
 801349c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134a0:	059a      	lsls	r2, r3, #22
 80134a2:	d4ef      	bmi.n	8013484 <__smakebuf_r+0x18>
 80134a4:	f023 0303 	bic.w	r3, r3, #3
 80134a8:	f043 0302 	orr.w	r3, r3, #2
 80134ac:	81a3      	strh	r3, [r4, #12]
 80134ae:	e7e3      	b.n	8013478 <__smakebuf_r+0xc>
 80134b0:	4b0d      	ldr	r3, [pc, #52]	; (80134e8 <__smakebuf_r+0x7c>)
 80134b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80134b4:	89a3      	ldrh	r3, [r4, #12]
 80134b6:	6020      	str	r0, [r4, #0]
 80134b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134bc:	81a3      	strh	r3, [r4, #12]
 80134be:	9b00      	ldr	r3, [sp, #0]
 80134c0:	6163      	str	r3, [r4, #20]
 80134c2:	9b01      	ldr	r3, [sp, #4]
 80134c4:	6120      	str	r0, [r4, #16]
 80134c6:	b15b      	cbz	r3, 80134e0 <__smakebuf_r+0x74>
 80134c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134cc:	4630      	mov	r0, r6
 80134ce:	f000 fdc7 	bl	8014060 <_isatty_r>
 80134d2:	b128      	cbz	r0, 80134e0 <__smakebuf_r+0x74>
 80134d4:	89a3      	ldrh	r3, [r4, #12]
 80134d6:	f023 0303 	bic.w	r3, r3, #3
 80134da:	f043 0301 	orr.w	r3, r3, #1
 80134de:	81a3      	strh	r3, [r4, #12]
 80134e0:	89a0      	ldrh	r0, [r4, #12]
 80134e2:	4305      	orrs	r5, r0
 80134e4:	81a5      	strh	r5, [r4, #12]
 80134e6:	e7cd      	b.n	8013484 <__smakebuf_r+0x18>
 80134e8:	0801324d 	.word	0x0801324d

080134ec <__malloc_lock>:
 80134ec:	4801      	ldr	r0, [pc, #4]	; (80134f4 <__malloc_lock+0x8>)
 80134ee:	f7ff bf96 	b.w	801341e <__retarget_lock_acquire_recursive>
 80134f2:	bf00      	nop
 80134f4:	200413a8 	.word	0x200413a8

080134f8 <__malloc_unlock>:
 80134f8:	4801      	ldr	r0, [pc, #4]	; (8013500 <__malloc_unlock+0x8>)
 80134fa:	f7ff bf91 	b.w	8013420 <__retarget_lock_release_recursive>
 80134fe:	bf00      	nop
 8013500:	200413a8 	.word	0x200413a8

08013504 <_Balloc>:
 8013504:	b570      	push	{r4, r5, r6, lr}
 8013506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013508:	4604      	mov	r4, r0
 801350a:	460d      	mov	r5, r1
 801350c:	b976      	cbnz	r6, 801352c <_Balloc+0x28>
 801350e:	2010      	movs	r0, #16
 8013510:	f7fe f8ee 	bl	80116f0 <malloc>
 8013514:	4602      	mov	r2, r0
 8013516:	6260      	str	r0, [r4, #36]	; 0x24
 8013518:	b920      	cbnz	r0, 8013524 <_Balloc+0x20>
 801351a:	4b18      	ldr	r3, [pc, #96]	; (801357c <_Balloc+0x78>)
 801351c:	4818      	ldr	r0, [pc, #96]	; (8013580 <_Balloc+0x7c>)
 801351e:	2166      	movs	r1, #102	; 0x66
 8013520:	f7fe ff16 	bl	8012350 <__assert_func>
 8013524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013528:	6006      	str	r6, [r0, #0]
 801352a:	60c6      	str	r6, [r0, #12]
 801352c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801352e:	68f3      	ldr	r3, [r6, #12]
 8013530:	b183      	cbz	r3, 8013554 <_Balloc+0x50>
 8013532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801353a:	b9b8      	cbnz	r0, 801356c <_Balloc+0x68>
 801353c:	2101      	movs	r1, #1
 801353e:	fa01 f605 	lsl.w	r6, r1, r5
 8013542:	1d72      	adds	r2, r6, #5
 8013544:	0092      	lsls	r2, r2, #2
 8013546:	4620      	mov	r0, r4
 8013548:	f000 fb5a 	bl	8013c00 <_calloc_r>
 801354c:	b160      	cbz	r0, 8013568 <_Balloc+0x64>
 801354e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013552:	e00e      	b.n	8013572 <_Balloc+0x6e>
 8013554:	2221      	movs	r2, #33	; 0x21
 8013556:	2104      	movs	r1, #4
 8013558:	4620      	mov	r0, r4
 801355a:	f000 fb51 	bl	8013c00 <_calloc_r>
 801355e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013560:	60f0      	str	r0, [r6, #12]
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1e4      	bne.n	8013532 <_Balloc+0x2e>
 8013568:	2000      	movs	r0, #0
 801356a:	bd70      	pop	{r4, r5, r6, pc}
 801356c:	6802      	ldr	r2, [r0, #0]
 801356e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013572:	2300      	movs	r3, #0
 8013574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013578:	e7f7      	b.n	801356a <_Balloc+0x66>
 801357a:	bf00      	nop
 801357c:	08018e9d 	.word	0x08018e9d
 8013580:	08018f84 	.word	0x08018f84

08013584 <_Bfree>:
 8013584:	b570      	push	{r4, r5, r6, lr}
 8013586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013588:	4605      	mov	r5, r0
 801358a:	460c      	mov	r4, r1
 801358c:	b976      	cbnz	r6, 80135ac <_Bfree+0x28>
 801358e:	2010      	movs	r0, #16
 8013590:	f7fe f8ae 	bl	80116f0 <malloc>
 8013594:	4602      	mov	r2, r0
 8013596:	6268      	str	r0, [r5, #36]	; 0x24
 8013598:	b920      	cbnz	r0, 80135a4 <_Bfree+0x20>
 801359a:	4b09      	ldr	r3, [pc, #36]	; (80135c0 <_Bfree+0x3c>)
 801359c:	4809      	ldr	r0, [pc, #36]	; (80135c4 <_Bfree+0x40>)
 801359e:	218a      	movs	r1, #138	; 0x8a
 80135a0:	f7fe fed6 	bl	8012350 <__assert_func>
 80135a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135a8:	6006      	str	r6, [r0, #0]
 80135aa:	60c6      	str	r6, [r0, #12]
 80135ac:	b13c      	cbz	r4, 80135be <_Bfree+0x3a>
 80135ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80135b0:	6862      	ldr	r2, [r4, #4]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80135b8:	6021      	str	r1, [r4, #0]
 80135ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80135be:	bd70      	pop	{r4, r5, r6, pc}
 80135c0:	08018e9d 	.word	0x08018e9d
 80135c4:	08018f84 	.word	0x08018f84

080135c8 <__multadd>:
 80135c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135cc:	690e      	ldr	r6, [r1, #16]
 80135ce:	4607      	mov	r7, r0
 80135d0:	4698      	mov	r8, r3
 80135d2:	460c      	mov	r4, r1
 80135d4:	f101 0014 	add.w	r0, r1, #20
 80135d8:	2300      	movs	r3, #0
 80135da:	6805      	ldr	r5, [r0, #0]
 80135dc:	b2a9      	uxth	r1, r5
 80135de:	fb02 8101 	mla	r1, r2, r1, r8
 80135e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80135e6:	0c2d      	lsrs	r5, r5, #16
 80135e8:	fb02 c505 	mla	r5, r2, r5, ip
 80135ec:	b289      	uxth	r1, r1
 80135ee:	3301      	adds	r3, #1
 80135f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80135f4:	429e      	cmp	r6, r3
 80135f6:	f840 1b04 	str.w	r1, [r0], #4
 80135fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80135fe:	dcec      	bgt.n	80135da <__multadd+0x12>
 8013600:	f1b8 0f00 	cmp.w	r8, #0
 8013604:	d022      	beq.n	801364c <__multadd+0x84>
 8013606:	68a3      	ldr	r3, [r4, #8]
 8013608:	42b3      	cmp	r3, r6
 801360a:	dc19      	bgt.n	8013640 <__multadd+0x78>
 801360c:	6861      	ldr	r1, [r4, #4]
 801360e:	4638      	mov	r0, r7
 8013610:	3101      	adds	r1, #1
 8013612:	f7ff ff77 	bl	8013504 <_Balloc>
 8013616:	4605      	mov	r5, r0
 8013618:	b928      	cbnz	r0, 8013626 <__multadd+0x5e>
 801361a:	4602      	mov	r2, r0
 801361c:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <__multadd+0x8c>)
 801361e:	480e      	ldr	r0, [pc, #56]	; (8013658 <__multadd+0x90>)
 8013620:	21b5      	movs	r1, #181	; 0xb5
 8013622:	f7fe fe95 	bl	8012350 <__assert_func>
 8013626:	6922      	ldr	r2, [r4, #16]
 8013628:	3202      	adds	r2, #2
 801362a:	f104 010c 	add.w	r1, r4, #12
 801362e:	0092      	lsls	r2, r2, #2
 8013630:	300c      	adds	r0, #12
 8013632:	f7fe f865 	bl	8011700 <memcpy>
 8013636:	4621      	mov	r1, r4
 8013638:	4638      	mov	r0, r7
 801363a:	f7ff ffa3 	bl	8013584 <_Bfree>
 801363e:	462c      	mov	r4, r5
 8013640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013644:	3601      	adds	r6, #1
 8013646:	f8c3 8014 	str.w	r8, [r3, #20]
 801364a:	6126      	str	r6, [r4, #16]
 801364c:	4620      	mov	r0, r4
 801364e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013652:	bf00      	nop
 8013654:	08018f13 	.word	0x08018f13
 8013658:	08018f84 	.word	0x08018f84

0801365c <__hi0bits>:
 801365c:	0c03      	lsrs	r3, r0, #16
 801365e:	041b      	lsls	r3, r3, #16
 8013660:	b9d3      	cbnz	r3, 8013698 <__hi0bits+0x3c>
 8013662:	0400      	lsls	r0, r0, #16
 8013664:	2310      	movs	r3, #16
 8013666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801366a:	bf04      	itt	eq
 801366c:	0200      	lsleq	r0, r0, #8
 801366e:	3308      	addeq	r3, #8
 8013670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013674:	bf04      	itt	eq
 8013676:	0100      	lsleq	r0, r0, #4
 8013678:	3304      	addeq	r3, #4
 801367a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801367e:	bf04      	itt	eq
 8013680:	0080      	lsleq	r0, r0, #2
 8013682:	3302      	addeq	r3, #2
 8013684:	2800      	cmp	r0, #0
 8013686:	db05      	blt.n	8013694 <__hi0bits+0x38>
 8013688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801368c:	f103 0301 	add.w	r3, r3, #1
 8013690:	bf08      	it	eq
 8013692:	2320      	moveq	r3, #32
 8013694:	4618      	mov	r0, r3
 8013696:	4770      	bx	lr
 8013698:	2300      	movs	r3, #0
 801369a:	e7e4      	b.n	8013666 <__hi0bits+0xa>

0801369c <__lo0bits>:
 801369c:	6803      	ldr	r3, [r0, #0]
 801369e:	f013 0207 	ands.w	r2, r3, #7
 80136a2:	4601      	mov	r1, r0
 80136a4:	d00b      	beq.n	80136be <__lo0bits+0x22>
 80136a6:	07da      	lsls	r2, r3, #31
 80136a8:	d424      	bmi.n	80136f4 <__lo0bits+0x58>
 80136aa:	0798      	lsls	r0, r3, #30
 80136ac:	bf49      	itett	mi
 80136ae:	085b      	lsrmi	r3, r3, #1
 80136b0:	089b      	lsrpl	r3, r3, #2
 80136b2:	2001      	movmi	r0, #1
 80136b4:	600b      	strmi	r3, [r1, #0]
 80136b6:	bf5c      	itt	pl
 80136b8:	600b      	strpl	r3, [r1, #0]
 80136ba:	2002      	movpl	r0, #2
 80136bc:	4770      	bx	lr
 80136be:	b298      	uxth	r0, r3
 80136c0:	b9b0      	cbnz	r0, 80136f0 <__lo0bits+0x54>
 80136c2:	0c1b      	lsrs	r3, r3, #16
 80136c4:	2010      	movs	r0, #16
 80136c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80136ca:	bf04      	itt	eq
 80136cc:	0a1b      	lsreq	r3, r3, #8
 80136ce:	3008      	addeq	r0, #8
 80136d0:	071a      	lsls	r2, r3, #28
 80136d2:	bf04      	itt	eq
 80136d4:	091b      	lsreq	r3, r3, #4
 80136d6:	3004      	addeq	r0, #4
 80136d8:	079a      	lsls	r2, r3, #30
 80136da:	bf04      	itt	eq
 80136dc:	089b      	lsreq	r3, r3, #2
 80136de:	3002      	addeq	r0, #2
 80136e0:	07da      	lsls	r2, r3, #31
 80136e2:	d403      	bmi.n	80136ec <__lo0bits+0x50>
 80136e4:	085b      	lsrs	r3, r3, #1
 80136e6:	f100 0001 	add.w	r0, r0, #1
 80136ea:	d005      	beq.n	80136f8 <__lo0bits+0x5c>
 80136ec:	600b      	str	r3, [r1, #0]
 80136ee:	4770      	bx	lr
 80136f0:	4610      	mov	r0, r2
 80136f2:	e7e8      	b.n	80136c6 <__lo0bits+0x2a>
 80136f4:	2000      	movs	r0, #0
 80136f6:	4770      	bx	lr
 80136f8:	2020      	movs	r0, #32
 80136fa:	4770      	bx	lr

080136fc <__i2b>:
 80136fc:	b510      	push	{r4, lr}
 80136fe:	460c      	mov	r4, r1
 8013700:	2101      	movs	r1, #1
 8013702:	f7ff feff 	bl	8013504 <_Balloc>
 8013706:	4602      	mov	r2, r0
 8013708:	b928      	cbnz	r0, 8013716 <__i2b+0x1a>
 801370a:	4b05      	ldr	r3, [pc, #20]	; (8013720 <__i2b+0x24>)
 801370c:	4805      	ldr	r0, [pc, #20]	; (8013724 <__i2b+0x28>)
 801370e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013712:	f7fe fe1d 	bl	8012350 <__assert_func>
 8013716:	2301      	movs	r3, #1
 8013718:	6144      	str	r4, [r0, #20]
 801371a:	6103      	str	r3, [r0, #16]
 801371c:	bd10      	pop	{r4, pc}
 801371e:	bf00      	nop
 8013720:	08018f13 	.word	0x08018f13
 8013724:	08018f84 	.word	0x08018f84

08013728 <__multiply>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	4614      	mov	r4, r2
 801372e:	690a      	ldr	r2, [r1, #16]
 8013730:	6923      	ldr	r3, [r4, #16]
 8013732:	429a      	cmp	r2, r3
 8013734:	bfb8      	it	lt
 8013736:	460b      	movlt	r3, r1
 8013738:	460d      	mov	r5, r1
 801373a:	bfbc      	itt	lt
 801373c:	4625      	movlt	r5, r4
 801373e:	461c      	movlt	r4, r3
 8013740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013748:	68ab      	ldr	r3, [r5, #8]
 801374a:	6869      	ldr	r1, [r5, #4]
 801374c:	eb0a 0709 	add.w	r7, sl, r9
 8013750:	42bb      	cmp	r3, r7
 8013752:	b085      	sub	sp, #20
 8013754:	bfb8      	it	lt
 8013756:	3101      	addlt	r1, #1
 8013758:	f7ff fed4 	bl	8013504 <_Balloc>
 801375c:	b930      	cbnz	r0, 801376c <__multiply+0x44>
 801375e:	4602      	mov	r2, r0
 8013760:	4b42      	ldr	r3, [pc, #264]	; (801386c <__multiply+0x144>)
 8013762:	4843      	ldr	r0, [pc, #268]	; (8013870 <__multiply+0x148>)
 8013764:	f240 115d 	movw	r1, #349	; 0x15d
 8013768:	f7fe fdf2 	bl	8012350 <__assert_func>
 801376c:	f100 0614 	add.w	r6, r0, #20
 8013770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013774:	4633      	mov	r3, r6
 8013776:	2200      	movs	r2, #0
 8013778:	4543      	cmp	r3, r8
 801377a:	d31e      	bcc.n	80137ba <__multiply+0x92>
 801377c:	f105 0c14 	add.w	ip, r5, #20
 8013780:	f104 0314 	add.w	r3, r4, #20
 8013784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801378c:	9202      	str	r2, [sp, #8]
 801378e:	ebac 0205 	sub.w	r2, ip, r5
 8013792:	3a15      	subs	r2, #21
 8013794:	f022 0203 	bic.w	r2, r2, #3
 8013798:	3204      	adds	r2, #4
 801379a:	f105 0115 	add.w	r1, r5, #21
 801379e:	458c      	cmp	ip, r1
 80137a0:	bf38      	it	cc
 80137a2:	2204      	movcc	r2, #4
 80137a4:	9201      	str	r2, [sp, #4]
 80137a6:	9a02      	ldr	r2, [sp, #8]
 80137a8:	9303      	str	r3, [sp, #12]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d808      	bhi.n	80137c0 <__multiply+0x98>
 80137ae:	2f00      	cmp	r7, #0
 80137b0:	dc55      	bgt.n	801385e <__multiply+0x136>
 80137b2:	6107      	str	r7, [r0, #16]
 80137b4:	b005      	add	sp, #20
 80137b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ba:	f843 2b04 	str.w	r2, [r3], #4
 80137be:	e7db      	b.n	8013778 <__multiply+0x50>
 80137c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80137c4:	f1ba 0f00 	cmp.w	sl, #0
 80137c8:	d020      	beq.n	801380c <__multiply+0xe4>
 80137ca:	f105 0e14 	add.w	lr, r5, #20
 80137ce:	46b1      	mov	r9, r6
 80137d0:	2200      	movs	r2, #0
 80137d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80137d6:	f8d9 b000 	ldr.w	fp, [r9]
 80137da:	b2a1      	uxth	r1, r4
 80137dc:	fa1f fb8b 	uxth.w	fp, fp
 80137e0:	fb0a b101 	mla	r1, sl, r1, fp
 80137e4:	4411      	add	r1, r2
 80137e6:	f8d9 2000 	ldr.w	r2, [r9]
 80137ea:	0c24      	lsrs	r4, r4, #16
 80137ec:	0c12      	lsrs	r2, r2, #16
 80137ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80137f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80137f6:	b289      	uxth	r1, r1
 80137f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80137fc:	45f4      	cmp	ip, lr
 80137fe:	f849 1b04 	str.w	r1, [r9], #4
 8013802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013806:	d8e4      	bhi.n	80137d2 <__multiply+0xaa>
 8013808:	9901      	ldr	r1, [sp, #4]
 801380a:	5072      	str	r2, [r6, r1]
 801380c:	9a03      	ldr	r2, [sp, #12]
 801380e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013812:	3304      	adds	r3, #4
 8013814:	f1b9 0f00 	cmp.w	r9, #0
 8013818:	d01f      	beq.n	801385a <__multiply+0x132>
 801381a:	6834      	ldr	r4, [r6, #0]
 801381c:	f105 0114 	add.w	r1, r5, #20
 8013820:	46b6      	mov	lr, r6
 8013822:	f04f 0a00 	mov.w	sl, #0
 8013826:	880a      	ldrh	r2, [r1, #0]
 8013828:	f8be b002 	ldrh.w	fp, [lr, #2]
 801382c:	fb09 b202 	mla	r2, r9, r2, fp
 8013830:	4492      	add	sl, r2
 8013832:	b2a4      	uxth	r4, r4
 8013834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013838:	f84e 4b04 	str.w	r4, [lr], #4
 801383c:	f851 4b04 	ldr.w	r4, [r1], #4
 8013840:	f8be 2000 	ldrh.w	r2, [lr]
 8013844:	0c24      	lsrs	r4, r4, #16
 8013846:	fb09 2404 	mla	r4, r9, r4, r2
 801384a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801384e:	458c      	cmp	ip, r1
 8013850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013854:	d8e7      	bhi.n	8013826 <__multiply+0xfe>
 8013856:	9a01      	ldr	r2, [sp, #4]
 8013858:	50b4      	str	r4, [r6, r2]
 801385a:	3604      	adds	r6, #4
 801385c:	e7a3      	b.n	80137a6 <__multiply+0x7e>
 801385e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1a5      	bne.n	80137b2 <__multiply+0x8a>
 8013866:	3f01      	subs	r7, #1
 8013868:	e7a1      	b.n	80137ae <__multiply+0x86>
 801386a:	bf00      	nop
 801386c:	08018f13 	.word	0x08018f13
 8013870:	08018f84 	.word	0x08018f84

08013874 <__pow5mult>:
 8013874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013878:	4615      	mov	r5, r2
 801387a:	f012 0203 	ands.w	r2, r2, #3
 801387e:	4606      	mov	r6, r0
 8013880:	460f      	mov	r7, r1
 8013882:	d007      	beq.n	8013894 <__pow5mult+0x20>
 8013884:	4c25      	ldr	r4, [pc, #148]	; (801391c <__pow5mult+0xa8>)
 8013886:	3a01      	subs	r2, #1
 8013888:	2300      	movs	r3, #0
 801388a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801388e:	f7ff fe9b 	bl	80135c8 <__multadd>
 8013892:	4607      	mov	r7, r0
 8013894:	10ad      	asrs	r5, r5, #2
 8013896:	d03d      	beq.n	8013914 <__pow5mult+0xa0>
 8013898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801389a:	b97c      	cbnz	r4, 80138bc <__pow5mult+0x48>
 801389c:	2010      	movs	r0, #16
 801389e:	f7fd ff27 	bl	80116f0 <malloc>
 80138a2:	4602      	mov	r2, r0
 80138a4:	6270      	str	r0, [r6, #36]	; 0x24
 80138a6:	b928      	cbnz	r0, 80138b4 <__pow5mult+0x40>
 80138a8:	4b1d      	ldr	r3, [pc, #116]	; (8013920 <__pow5mult+0xac>)
 80138aa:	481e      	ldr	r0, [pc, #120]	; (8013924 <__pow5mult+0xb0>)
 80138ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80138b0:	f7fe fd4e 	bl	8012350 <__assert_func>
 80138b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138b8:	6004      	str	r4, [r0, #0]
 80138ba:	60c4      	str	r4, [r0, #12]
 80138bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80138c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80138c4:	b94c      	cbnz	r4, 80138da <__pow5mult+0x66>
 80138c6:	f240 2171 	movw	r1, #625	; 0x271
 80138ca:	4630      	mov	r0, r6
 80138cc:	f7ff ff16 	bl	80136fc <__i2b>
 80138d0:	2300      	movs	r3, #0
 80138d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80138d6:	4604      	mov	r4, r0
 80138d8:	6003      	str	r3, [r0, #0]
 80138da:	f04f 0900 	mov.w	r9, #0
 80138de:	07eb      	lsls	r3, r5, #31
 80138e0:	d50a      	bpl.n	80138f8 <__pow5mult+0x84>
 80138e2:	4639      	mov	r1, r7
 80138e4:	4622      	mov	r2, r4
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ff ff1e 	bl	8013728 <__multiply>
 80138ec:	4639      	mov	r1, r7
 80138ee:	4680      	mov	r8, r0
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff fe47 	bl	8013584 <_Bfree>
 80138f6:	4647      	mov	r7, r8
 80138f8:	106d      	asrs	r5, r5, #1
 80138fa:	d00b      	beq.n	8013914 <__pow5mult+0xa0>
 80138fc:	6820      	ldr	r0, [r4, #0]
 80138fe:	b938      	cbnz	r0, 8013910 <__pow5mult+0x9c>
 8013900:	4622      	mov	r2, r4
 8013902:	4621      	mov	r1, r4
 8013904:	4630      	mov	r0, r6
 8013906:	f7ff ff0f 	bl	8013728 <__multiply>
 801390a:	6020      	str	r0, [r4, #0]
 801390c:	f8c0 9000 	str.w	r9, [r0]
 8013910:	4604      	mov	r4, r0
 8013912:	e7e4      	b.n	80138de <__pow5mult+0x6a>
 8013914:	4638      	mov	r0, r7
 8013916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391a:	bf00      	nop
 801391c:	080190d8 	.word	0x080190d8
 8013920:	08018e9d 	.word	0x08018e9d
 8013924:	08018f84 	.word	0x08018f84

08013928 <__lshift>:
 8013928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801392c:	460c      	mov	r4, r1
 801392e:	6849      	ldr	r1, [r1, #4]
 8013930:	6923      	ldr	r3, [r4, #16]
 8013932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013936:	68a3      	ldr	r3, [r4, #8]
 8013938:	4607      	mov	r7, r0
 801393a:	4691      	mov	r9, r2
 801393c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013940:	f108 0601 	add.w	r6, r8, #1
 8013944:	42b3      	cmp	r3, r6
 8013946:	db0b      	blt.n	8013960 <__lshift+0x38>
 8013948:	4638      	mov	r0, r7
 801394a:	f7ff fddb 	bl	8013504 <_Balloc>
 801394e:	4605      	mov	r5, r0
 8013950:	b948      	cbnz	r0, 8013966 <__lshift+0x3e>
 8013952:	4602      	mov	r2, r0
 8013954:	4b28      	ldr	r3, [pc, #160]	; (80139f8 <__lshift+0xd0>)
 8013956:	4829      	ldr	r0, [pc, #164]	; (80139fc <__lshift+0xd4>)
 8013958:	f240 11d9 	movw	r1, #473	; 0x1d9
 801395c:	f7fe fcf8 	bl	8012350 <__assert_func>
 8013960:	3101      	adds	r1, #1
 8013962:	005b      	lsls	r3, r3, #1
 8013964:	e7ee      	b.n	8013944 <__lshift+0x1c>
 8013966:	2300      	movs	r3, #0
 8013968:	f100 0114 	add.w	r1, r0, #20
 801396c:	f100 0210 	add.w	r2, r0, #16
 8013970:	4618      	mov	r0, r3
 8013972:	4553      	cmp	r3, sl
 8013974:	db33      	blt.n	80139de <__lshift+0xb6>
 8013976:	6920      	ldr	r0, [r4, #16]
 8013978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801397c:	f104 0314 	add.w	r3, r4, #20
 8013980:	f019 091f 	ands.w	r9, r9, #31
 8013984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801398c:	d02b      	beq.n	80139e6 <__lshift+0xbe>
 801398e:	f1c9 0e20 	rsb	lr, r9, #32
 8013992:	468a      	mov	sl, r1
 8013994:	2200      	movs	r2, #0
 8013996:	6818      	ldr	r0, [r3, #0]
 8013998:	fa00 f009 	lsl.w	r0, r0, r9
 801399c:	4302      	orrs	r2, r0
 801399e:	f84a 2b04 	str.w	r2, [sl], #4
 80139a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80139a6:	459c      	cmp	ip, r3
 80139a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80139ac:	d8f3      	bhi.n	8013996 <__lshift+0x6e>
 80139ae:	ebac 0304 	sub.w	r3, ip, r4
 80139b2:	3b15      	subs	r3, #21
 80139b4:	f023 0303 	bic.w	r3, r3, #3
 80139b8:	3304      	adds	r3, #4
 80139ba:	f104 0015 	add.w	r0, r4, #21
 80139be:	4584      	cmp	ip, r0
 80139c0:	bf38      	it	cc
 80139c2:	2304      	movcc	r3, #4
 80139c4:	50ca      	str	r2, [r1, r3]
 80139c6:	b10a      	cbz	r2, 80139cc <__lshift+0xa4>
 80139c8:	f108 0602 	add.w	r6, r8, #2
 80139cc:	3e01      	subs	r6, #1
 80139ce:	4638      	mov	r0, r7
 80139d0:	612e      	str	r6, [r5, #16]
 80139d2:	4621      	mov	r1, r4
 80139d4:	f7ff fdd6 	bl	8013584 <_Bfree>
 80139d8:	4628      	mov	r0, r5
 80139da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139de:	f842 0f04 	str.w	r0, [r2, #4]!
 80139e2:	3301      	adds	r3, #1
 80139e4:	e7c5      	b.n	8013972 <__lshift+0x4a>
 80139e6:	3904      	subs	r1, #4
 80139e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80139ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80139f0:	459c      	cmp	ip, r3
 80139f2:	d8f9      	bhi.n	80139e8 <__lshift+0xc0>
 80139f4:	e7ea      	b.n	80139cc <__lshift+0xa4>
 80139f6:	bf00      	nop
 80139f8:	08018f13 	.word	0x08018f13
 80139fc:	08018f84 	.word	0x08018f84

08013a00 <__mcmp>:
 8013a00:	b530      	push	{r4, r5, lr}
 8013a02:	6902      	ldr	r2, [r0, #16]
 8013a04:	690c      	ldr	r4, [r1, #16]
 8013a06:	1b12      	subs	r2, r2, r4
 8013a08:	d10e      	bne.n	8013a28 <__mcmp+0x28>
 8013a0a:	f100 0314 	add.w	r3, r0, #20
 8013a0e:	3114      	adds	r1, #20
 8013a10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a20:	42a5      	cmp	r5, r4
 8013a22:	d003      	beq.n	8013a2c <__mcmp+0x2c>
 8013a24:	d305      	bcc.n	8013a32 <__mcmp+0x32>
 8013a26:	2201      	movs	r2, #1
 8013a28:	4610      	mov	r0, r2
 8013a2a:	bd30      	pop	{r4, r5, pc}
 8013a2c:	4283      	cmp	r3, r0
 8013a2e:	d3f3      	bcc.n	8013a18 <__mcmp+0x18>
 8013a30:	e7fa      	b.n	8013a28 <__mcmp+0x28>
 8013a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a36:	e7f7      	b.n	8013a28 <__mcmp+0x28>

08013a38 <__mdiff>:
 8013a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	460c      	mov	r4, r1
 8013a3e:	4606      	mov	r6, r0
 8013a40:	4611      	mov	r1, r2
 8013a42:	4620      	mov	r0, r4
 8013a44:	4617      	mov	r7, r2
 8013a46:	f7ff ffdb 	bl	8013a00 <__mcmp>
 8013a4a:	1e05      	subs	r5, r0, #0
 8013a4c:	d110      	bne.n	8013a70 <__mdiff+0x38>
 8013a4e:	4629      	mov	r1, r5
 8013a50:	4630      	mov	r0, r6
 8013a52:	f7ff fd57 	bl	8013504 <_Balloc>
 8013a56:	b930      	cbnz	r0, 8013a66 <__mdiff+0x2e>
 8013a58:	4b39      	ldr	r3, [pc, #228]	; (8013b40 <__mdiff+0x108>)
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	f240 2132 	movw	r1, #562	; 0x232
 8013a60:	4838      	ldr	r0, [pc, #224]	; (8013b44 <__mdiff+0x10c>)
 8013a62:	f7fe fc75 	bl	8012350 <__assert_func>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a70:	bfa4      	itt	ge
 8013a72:	463b      	movge	r3, r7
 8013a74:	4627      	movge	r7, r4
 8013a76:	4630      	mov	r0, r6
 8013a78:	6879      	ldr	r1, [r7, #4]
 8013a7a:	bfa6      	itte	ge
 8013a7c:	461c      	movge	r4, r3
 8013a7e:	2500      	movge	r5, #0
 8013a80:	2501      	movlt	r5, #1
 8013a82:	f7ff fd3f 	bl	8013504 <_Balloc>
 8013a86:	b920      	cbnz	r0, 8013a92 <__mdiff+0x5a>
 8013a88:	4b2d      	ldr	r3, [pc, #180]	; (8013b40 <__mdiff+0x108>)
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013a90:	e7e6      	b.n	8013a60 <__mdiff+0x28>
 8013a92:	693e      	ldr	r6, [r7, #16]
 8013a94:	60c5      	str	r5, [r0, #12]
 8013a96:	6925      	ldr	r5, [r4, #16]
 8013a98:	f107 0114 	add.w	r1, r7, #20
 8013a9c:	f104 0914 	add.w	r9, r4, #20
 8013aa0:	f100 0e14 	add.w	lr, r0, #20
 8013aa4:	f107 0210 	add.w	r2, r7, #16
 8013aa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013aac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013ab0:	46f2      	mov	sl, lr
 8013ab2:	2700      	movs	r7, #0
 8013ab4:	f859 3b04 	ldr.w	r3, [r9], #4
 8013ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013abc:	fa1f f883 	uxth.w	r8, r3
 8013ac0:	fa17 f78b 	uxtah	r7, r7, fp
 8013ac4:	0c1b      	lsrs	r3, r3, #16
 8013ac6:	eba7 0808 	sub.w	r8, r7, r8
 8013aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013ad2:	fa1f f888 	uxth.w	r8, r8
 8013ad6:	141f      	asrs	r7, r3, #16
 8013ad8:	454d      	cmp	r5, r9
 8013ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013ade:	f84a 3b04 	str.w	r3, [sl], #4
 8013ae2:	d8e7      	bhi.n	8013ab4 <__mdiff+0x7c>
 8013ae4:	1b2b      	subs	r3, r5, r4
 8013ae6:	3b15      	subs	r3, #21
 8013ae8:	f023 0303 	bic.w	r3, r3, #3
 8013aec:	3304      	adds	r3, #4
 8013aee:	3415      	adds	r4, #21
 8013af0:	42a5      	cmp	r5, r4
 8013af2:	bf38      	it	cc
 8013af4:	2304      	movcc	r3, #4
 8013af6:	4419      	add	r1, r3
 8013af8:	4473      	add	r3, lr
 8013afa:	469e      	mov	lr, r3
 8013afc:	460d      	mov	r5, r1
 8013afe:	4565      	cmp	r5, ip
 8013b00:	d30e      	bcc.n	8013b20 <__mdiff+0xe8>
 8013b02:	f10c 0203 	add.w	r2, ip, #3
 8013b06:	1a52      	subs	r2, r2, r1
 8013b08:	f022 0203 	bic.w	r2, r2, #3
 8013b0c:	3903      	subs	r1, #3
 8013b0e:	458c      	cmp	ip, r1
 8013b10:	bf38      	it	cc
 8013b12:	2200      	movcc	r2, #0
 8013b14:	441a      	add	r2, r3
 8013b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013b1a:	b17b      	cbz	r3, 8013b3c <__mdiff+0x104>
 8013b1c:	6106      	str	r6, [r0, #16]
 8013b1e:	e7a5      	b.n	8013a6c <__mdiff+0x34>
 8013b20:	f855 8b04 	ldr.w	r8, [r5], #4
 8013b24:	fa17 f488 	uxtah	r4, r7, r8
 8013b28:	1422      	asrs	r2, r4, #16
 8013b2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013b2e:	b2a4      	uxth	r4, r4
 8013b30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013b34:	f84e 4b04 	str.w	r4, [lr], #4
 8013b38:	1417      	asrs	r7, r2, #16
 8013b3a:	e7e0      	b.n	8013afe <__mdiff+0xc6>
 8013b3c:	3e01      	subs	r6, #1
 8013b3e:	e7ea      	b.n	8013b16 <__mdiff+0xde>
 8013b40:	08018f13 	.word	0x08018f13
 8013b44:	08018f84 	.word	0x08018f84

08013b48 <__d2b>:
 8013b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b4c:	4689      	mov	r9, r1
 8013b4e:	2101      	movs	r1, #1
 8013b50:	ec57 6b10 	vmov	r6, r7, d0
 8013b54:	4690      	mov	r8, r2
 8013b56:	f7ff fcd5 	bl	8013504 <_Balloc>
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	b930      	cbnz	r0, 8013b6c <__d2b+0x24>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	4b25      	ldr	r3, [pc, #148]	; (8013bf8 <__d2b+0xb0>)
 8013b62:	4826      	ldr	r0, [pc, #152]	; (8013bfc <__d2b+0xb4>)
 8013b64:	f240 310a 	movw	r1, #778	; 0x30a
 8013b68:	f7fe fbf2 	bl	8012350 <__assert_func>
 8013b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013b74:	bb35      	cbnz	r5, 8013bc4 <__d2b+0x7c>
 8013b76:	2e00      	cmp	r6, #0
 8013b78:	9301      	str	r3, [sp, #4]
 8013b7a:	d028      	beq.n	8013bce <__d2b+0x86>
 8013b7c:	4668      	mov	r0, sp
 8013b7e:	9600      	str	r6, [sp, #0]
 8013b80:	f7ff fd8c 	bl	801369c <__lo0bits>
 8013b84:	9900      	ldr	r1, [sp, #0]
 8013b86:	b300      	cbz	r0, 8013bca <__d2b+0x82>
 8013b88:	9a01      	ldr	r2, [sp, #4]
 8013b8a:	f1c0 0320 	rsb	r3, r0, #32
 8013b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b92:	430b      	orrs	r3, r1
 8013b94:	40c2      	lsrs	r2, r0
 8013b96:	6163      	str	r3, [r4, #20]
 8013b98:	9201      	str	r2, [sp, #4]
 8013b9a:	9b01      	ldr	r3, [sp, #4]
 8013b9c:	61a3      	str	r3, [r4, #24]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	bf14      	ite	ne
 8013ba2:	2202      	movne	r2, #2
 8013ba4:	2201      	moveq	r2, #1
 8013ba6:	6122      	str	r2, [r4, #16]
 8013ba8:	b1d5      	cbz	r5, 8013be0 <__d2b+0x98>
 8013baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013bae:	4405      	add	r5, r0
 8013bb0:	f8c9 5000 	str.w	r5, [r9]
 8013bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013bb8:	f8c8 0000 	str.w	r0, [r8]
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	b003      	add	sp, #12
 8013bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013bc8:	e7d5      	b.n	8013b76 <__d2b+0x2e>
 8013bca:	6161      	str	r1, [r4, #20]
 8013bcc:	e7e5      	b.n	8013b9a <__d2b+0x52>
 8013bce:	a801      	add	r0, sp, #4
 8013bd0:	f7ff fd64 	bl	801369c <__lo0bits>
 8013bd4:	9b01      	ldr	r3, [sp, #4]
 8013bd6:	6163      	str	r3, [r4, #20]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	6122      	str	r2, [r4, #16]
 8013bdc:	3020      	adds	r0, #32
 8013bde:	e7e3      	b.n	8013ba8 <__d2b+0x60>
 8013be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013be8:	f8c9 0000 	str.w	r0, [r9]
 8013bec:	6918      	ldr	r0, [r3, #16]
 8013bee:	f7ff fd35 	bl	801365c <__hi0bits>
 8013bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013bf6:	e7df      	b.n	8013bb8 <__d2b+0x70>
 8013bf8:	08018f13 	.word	0x08018f13
 8013bfc:	08018f84 	.word	0x08018f84

08013c00 <_calloc_r>:
 8013c00:	b513      	push	{r0, r1, r4, lr}
 8013c02:	434a      	muls	r2, r1
 8013c04:	4611      	mov	r1, r2
 8013c06:	9201      	str	r2, [sp, #4]
 8013c08:	f7fd fde0 	bl	80117cc <_malloc_r>
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	b118      	cbz	r0, 8013c18 <_calloc_r+0x18>
 8013c10:	9a01      	ldr	r2, [sp, #4]
 8013c12:	2100      	movs	r1, #0
 8013c14:	f7fd fd82 	bl	801171c <memset>
 8013c18:	4620      	mov	r0, r4
 8013c1a:	b002      	add	sp, #8
 8013c1c:	bd10      	pop	{r4, pc}

08013c1e <__sfputc_r>:
 8013c1e:	6893      	ldr	r3, [r2, #8]
 8013c20:	3b01      	subs	r3, #1
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	b410      	push	{r4}
 8013c26:	6093      	str	r3, [r2, #8]
 8013c28:	da08      	bge.n	8013c3c <__sfputc_r+0x1e>
 8013c2a:	6994      	ldr	r4, [r2, #24]
 8013c2c:	42a3      	cmp	r3, r4
 8013c2e:	db01      	blt.n	8013c34 <__sfputc_r+0x16>
 8013c30:	290a      	cmp	r1, #10
 8013c32:	d103      	bne.n	8013c3c <__sfputc_r+0x1e>
 8013c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c38:	f7fe baca 	b.w	80121d0 <__swbuf_r>
 8013c3c:	6813      	ldr	r3, [r2, #0]
 8013c3e:	1c58      	adds	r0, r3, #1
 8013c40:	6010      	str	r0, [r2, #0]
 8013c42:	7019      	strb	r1, [r3, #0]
 8013c44:	4608      	mov	r0, r1
 8013c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <__sfputs_r>:
 8013c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c4e:	4606      	mov	r6, r0
 8013c50:	460f      	mov	r7, r1
 8013c52:	4614      	mov	r4, r2
 8013c54:	18d5      	adds	r5, r2, r3
 8013c56:	42ac      	cmp	r4, r5
 8013c58:	d101      	bne.n	8013c5e <__sfputs_r+0x12>
 8013c5a:	2000      	movs	r0, #0
 8013c5c:	e007      	b.n	8013c6e <__sfputs_r+0x22>
 8013c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c62:	463a      	mov	r2, r7
 8013c64:	4630      	mov	r0, r6
 8013c66:	f7ff ffda 	bl	8013c1e <__sfputc_r>
 8013c6a:	1c43      	adds	r3, r0, #1
 8013c6c:	d1f3      	bne.n	8013c56 <__sfputs_r+0xa>
 8013c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c70 <_vfiprintf_r>:
 8013c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c74:	460d      	mov	r5, r1
 8013c76:	b09d      	sub	sp, #116	; 0x74
 8013c78:	4614      	mov	r4, r2
 8013c7a:	4698      	mov	r8, r3
 8013c7c:	4606      	mov	r6, r0
 8013c7e:	b118      	cbz	r0, 8013c88 <_vfiprintf_r+0x18>
 8013c80:	6983      	ldr	r3, [r0, #24]
 8013c82:	b90b      	cbnz	r3, 8013c88 <_vfiprintf_r+0x18>
 8013c84:	f7ff fb16 	bl	80132b4 <__sinit>
 8013c88:	4b89      	ldr	r3, [pc, #548]	; (8013eb0 <_vfiprintf_r+0x240>)
 8013c8a:	429d      	cmp	r5, r3
 8013c8c:	d11b      	bne.n	8013cc6 <_vfiprintf_r+0x56>
 8013c8e:	6875      	ldr	r5, [r6, #4]
 8013c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c92:	07d9      	lsls	r1, r3, #31
 8013c94:	d405      	bmi.n	8013ca2 <_vfiprintf_r+0x32>
 8013c96:	89ab      	ldrh	r3, [r5, #12]
 8013c98:	059a      	lsls	r2, r3, #22
 8013c9a:	d402      	bmi.n	8013ca2 <_vfiprintf_r+0x32>
 8013c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c9e:	f7ff fbbe 	bl	801341e <__retarget_lock_acquire_recursive>
 8013ca2:	89ab      	ldrh	r3, [r5, #12]
 8013ca4:	071b      	lsls	r3, r3, #28
 8013ca6:	d501      	bpl.n	8013cac <_vfiprintf_r+0x3c>
 8013ca8:	692b      	ldr	r3, [r5, #16]
 8013caa:	b9eb      	cbnz	r3, 8013ce8 <_vfiprintf_r+0x78>
 8013cac:	4629      	mov	r1, r5
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f7fe fae0 	bl	8012274 <__swsetup_r>
 8013cb4:	b1c0      	cbz	r0, 8013ce8 <_vfiprintf_r+0x78>
 8013cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cb8:	07dc      	lsls	r4, r3, #31
 8013cba:	d50e      	bpl.n	8013cda <_vfiprintf_r+0x6a>
 8013cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cc0:	b01d      	add	sp, #116	; 0x74
 8013cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc6:	4b7b      	ldr	r3, [pc, #492]	; (8013eb4 <_vfiprintf_r+0x244>)
 8013cc8:	429d      	cmp	r5, r3
 8013cca:	d101      	bne.n	8013cd0 <_vfiprintf_r+0x60>
 8013ccc:	68b5      	ldr	r5, [r6, #8]
 8013cce:	e7df      	b.n	8013c90 <_vfiprintf_r+0x20>
 8013cd0:	4b79      	ldr	r3, [pc, #484]	; (8013eb8 <_vfiprintf_r+0x248>)
 8013cd2:	429d      	cmp	r5, r3
 8013cd4:	bf08      	it	eq
 8013cd6:	68f5      	ldreq	r5, [r6, #12]
 8013cd8:	e7da      	b.n	8013c90 <_vfiprintf_r+0x20>
 8013cda:	89ab      	ldrh	r3, [r5, #12]
 8013cdc:	0598      	lsls	r0, r3, #22
 8013cde:	d4ed      	bmi.n	8013cbc <_vfiprintf_r+0x4c>
 8013ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ce2:	f7ff fb9d 	bl	8013420 <__retarget_lock_release_recursive>
 8013ce6:	e7e9      	b.n	8013cbc <_vfiprintf_r+0x4c>
 8013ce8:	2300      	movs	r3, #0
 8013cea:	9309      	str	r3, [sp, #36]	; 0x24
 8013cec:	2320      	movs	r3, #32
 8013cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013cf6:	2330      	movs	r3, #48	; 0x30
 8013cf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ebc <_vfiprintf_r+0x24c>
 8013cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d00:	f04f 0901 	mov.w	r9, #1
 8013d04:	4623      	mov	r3, r4
 8013d06:	469a      	mov	sl, r3
 8013d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d0c:	b10a      	cbz	r2, 8013d12 <_vfiprintf_r+0xa2>
 8013d0e:	2a25      	cmp	r2, #37	; 0x25
 8013d10:	d1f9      	bne.n	8013d06 <_vfiprintf_r+0x96>
 8013d12:	ebba 0b04 	subs.w	fp, sl, r4
 8013d16:	d00b      	beq.n	8013d30 <_vfiprintf_r+0xc0>
 8013d18:	465b      	mov	r3, fp
 8013d1a:	4622      	mov	r2, r4
 8013d1c:	4629      	mov	r1, r5
 8013d1e:	4630      	mov	r0, r6
 8013d20:	f7ff ff94 	bl	8013c4c <__sfputs_r>
 8013d24:	3001      	adds	r0, #1
 8013d26:	f000 80aa 	beq.w	8013e7e <_vfiprintf_r+0x20e>
 8013d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d2c:	445a      	add	r2, fp
 8013d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8013d30:	f89a 3000 	ldrb.w	r3, [sl]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f000 80a2 	beq.w	8013e7e <_vfiprintf_r+0x20e>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d44:	f10a 0a01 	add.w	sl, sl, #1
 8013d48:	9304      	str	r3, [sp, #16]
 8013d4a:	9307      	str	r3, [sp, #28]
 8013d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d50:	931a      	str	r3, [sp, #104]	; 0x68
 8013d52:	4654      	mov	r4, sl
 8013d54:	2205      	movs	r2, #5
 8013d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d5a:	4858      	ldr	r0, [pc, #352]	; (8013ebc <_vfiprintf_r+0x24c>)
 8013d5c:	f7ec fa60 	bl	8000220 <memchr>
 8013d60:	9a04      	ldr	r2, [sp, #16]
 8013d62:	b9d8      	cbnz	r0, 8013d9c <_vfiprintf_r+0x12c>
 8013d64:	06d1      	lsls	r1, r2, #27
 8013d66:	bf44      	itt	mi
 8013d68:	2320      	movmi	r3, #32
 8013d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d6e:	0713      	lsls	r3, r2, #28
 8013d70:	bf44      	itt	mi
 8013d72:	232b      	movmi	r3, #43	; 0x2b
 8013d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d78:	f89a 3000 	ldrb.w	r3, [sl]
 8013d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8013d7e:	d015      	beq.n	8013dac <_vfiprintf_r+0x13c>
 8013d80:	9a07      	ldr	r2, [sp, #28]
 8013d82:	4654      	mov	r4, sl
 8013d84:	2000      	movs	r0, #0
 8013d86:	f04f 0c0a 	mov.w	ip, #10
 8013d8a:	4621      	mov	r1, r4
 8013d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d90:	3b30      	subs	r3, #48	; 0x30
 8013d92:	2b09      	cmp	r3, #9
 8013d94:	d94e      	bls.n	8013e34 <_vfiprintf_r+0x1c4>
 8013d96:	b1b0      	cbz	r0, 8013dc6 <_vfiprintf_r+0x156>
 8013d98:	9207      	str	r2, [sp, #28]
 8013d9a:	e014      	b.n	8013dc6 <_vfiprintf_r+0x156>
 8013d9c:	eba0 0308 	sub.w	r3, r0, r8
 8013da0:	fa09 f303 	lsl.w	r3, r9, r3
 8013da4:	4313      	orrs	r3, r2
 8013da6:	9304      	str	r3, [sp, #16]
 8013da8:	46a2      	mov	sl, r4
 8013daa:	e7d2      	b.n	8013d52 <_vfiprintf_r+0xe2>
 8013dac:	9b03      	ldr	r3, [sp, #12]
 8013dae:	1d19      	adds	r1, r3, #4
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	9103      	str	r1, [sp, #12]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	bfbb      	ittet	lt
 8013db8:	425b      	neglt	r3, r3
 8013dba:	f042 0202 	orrlt.w	r2, r2, #2
 8013dbe:	9307      	strge	r3, [sp, #28]
 8013dc0:	9307      	strlt	r3, [sp, #28]
 8013dc2:	bfb8      	it	lt
 8013dc4:	9204      	strlt	r2, [sp, #16]
 8013dc6:	7823      	ldrb	r3, [r4, #0]
 8013dc8:	2b2e      	cmp	r3, #46	; 0x2e
 8013dca:	d10c      	bne.n	8013de6 <_vfiprintf_r+0x176>
 8013dcc:	7863      	ldrb	r3, [r4, #1]
 8013dce:	2b2a      	cmp	r3, #42	; 0x2a
 8013dd0:	d135      	bne.n	8013e3e <_vfiprintf_r+0x1ce>
 8013dd2:	9b03      	ldr	r3, [sp, #12]
 8013dd4:	1d1a      	adds	r2, r3, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	9203      	str	r2, [sp, #12]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	bfb8      	it	lt
 8013dde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013de2:	3402      	adds	r4, #2
 8013de4:	9305      	str	r3, [sp, #20]
 8013de6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ecc <_vfiprintf_r+0x25c>
 8013dea:	7821      	ldrb	r1, [r4, #0]
 8013dec:	2203      	movs	r2, #3
 8013dee:	4650      	mov	r0, sl
 8013df0:	f7ec fa16 	bl	8000220 <memchr>
 8013df4:	b140      	cbz	r0, 8013e08 <_vfiprintf_r+0x198>
 8013df6:	2340      	movs	r3, #64	; 0x40
 8013df8:	eba0 000a 	sub.w	r0, r0, sl
 8013dfc:	fa03 f000 	lsl.w	r0, r3, r0
 8013e00:	9b04      	ldr	r3, [sp, #16]
 8013e02:	4303      	orrs	r3, r0
 8013e04:	3401      	adds	r4, #1
 8013e06:	9304      	str	r3, [sp, #16]
 8013e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e0c:	482c      	ldr	r0, [pc, #176]	; (8013ec0 <_vfiprintf_r+0x250>)
 8013e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e12:	2206      	movs	r2, #6
 8013e14:	f7ec fa04 	bl	8000220 <memchr>
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	d03f      	beq.n	8013e9c <_vfiprintf_r+0x22c>
 8013e1c:	4b29      	ldr	r3, [pc, #164]	; (8013ec4 <_vfiprintf_r+0x254>)
 8013e1e:	bb1b      	cbnz	r3, 8013e68 <_vfiprintf_r+0x1f8>
 8013e20:	9b03      	ldr	r3, [sp, #12]
 8013e22:	3307      	adds	r3, #7
 8013e24:	f023 0307 	bic.w	r3, r3, #7
 8013e28:	3308      	adds	r3, #8
 8013e2a:	9303      	str	r3, [sp, #12]
 8013e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e2e:	443b      	add	r3, r7
 8013e30:	9309      	str	r3, [sp, #36]	; 0x24
 8013e32:	e767      	b.n	8013d04 <_vfiprintf_r+0x94>
 8013e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e38:	460c      	mov	r4, r1
 8013e3a:	2001      	movs	r0, #1
 8013e3c:	e7a5      	b.n	8013d8a <_vfiprintf_r+0x11a>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	3401      	adds	r4, #1
 8013e42:	9305      	str	r3, [sp, #20]
 8013e44:	4619      	mov	r1, r3
 8013e46:	f04f 0c0a 	mov.w	ip, #10
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e50:	3a30      	subs	r2, #48	; 0x30
 8013e52:	2a09      	cmp	r2, #9
 8013e54:	d903      	bls.n	8013e5e <_vfiprintf_r+0x1ee>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d0c5      	beq.n	8013de6 <_vfiprintf_r+0x176>
 8013e5a:	9105      	str	r1, [sp, #20]
 8013e5c:	e7c3      	b.n	8013de6 <_vfiprintf_r+0x176>
 8013e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e62:	4604      	mov	r4, r0
 8013e64:	2301      	movs	r3, #1
 8013e66:	e7f0      	b.n	8013e4a <_vfiprintf_r+0x1da>
 8013e68:	ab03      	add	r3, sp, #12
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	462a      	mov	r2, r5
 8013e6e:	4b16      	ldr	r3, [pc, #88]	; (8013ec8 <_vfiprintf_r+0x258>)
 8013e70:	a904      	add	r1, sp, #16
 8013e72:	4630      	mov	r0, r6
 8013e74:	f7fd fda4 	bl	80119c0 <_printf_float>
 8013e78:	4607      	mov	r7, r0
 8013e7a:	1c78      	adds	r0, r7, #1
 8013e7c:	d1d6      	bne.n	8013e2c <_vfiprintf_r+0x1bc>
 8013e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e80:	07d9      	lsls	r1, r3, #31
 8013e82:	d405      	bmi.n	8013e90 <_vfiprintf_r+0x220>
 8013e84:	89ab      	ldrh	r3, [r5, #12]
 8013e86:	059a      	lsls	r2, r3, #22
 8013e88:	d402      	bmi.n	8013e90 <_vfiprintf_r+0x220>
 8013e8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e8c:	f7ff fac8 	bl	8013420 <__retarget_lock_release_recursive>
 8013e90:	89ab      	ldrh	r3, [r5, #12]
 8013e92:	065b      	lsls	r3, r3, #25
 8013e94:	f53f af12 	bmi.w	8013cbc <_vfiprintf_r+0x4c>
 8013e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e9a:	e711      	b.n	8013cc0 <_vfiprintf_r+0x50>
 8013e9c:	ab03      	add	r3, sp, #12
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	462a      	mov	r2, r5
 8013ea2:	4b09      	ldr	r3, [pc, #36]	; (8013ec8 <_vfiprintf_r+0x258>)
 8013ea4:	a904      	add	r1, sp, #16
 8013ea6:	4630      	mov	r0, r6
 8013ea8:	f7fe f82e 	bl	8011f08 <_printf_i>
 8013eac:	e7e4      	b.n	8013e78 <_vfiprintf_r+0x208>
 8013eae:	bf00      	nop
 8013eb0:	08018f44 	.word	0x08018f44
 8013eb4:	08018f64 	.word	0x08018f64
 8013eb8:	08018f24 	.word	0x08018f24
 8013ebc:	080190e4 	.word	0x080190e4
 8013ec0:	080190ee 	.word	0x080190ee
 8013ec4:	080119c1 	.word	0x080119c1
 8013ec8:	08013c4d 	.word	0x08013c4d
 8013ecc:	080190ea 	.word	0x080190ea

08013ed0 <_putc_r>:
 8013ed0:	b570      	push	{r4, r5, r6, lr}
 8013ed2:	460d      	mov	r5, r1
 8013ed4:	4614      	mov	r4, r2
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	b118      	cbz	r0, 8013ee2 <_putc_r+0x12>
 8013eda:	6983      	ldr	r3, [r0, #24]
 8013edc:	b90b      	cbnz	r3, 8013ee2 <_putc_r+0x12>
 8013ede:	f7ff f9e9 	bl	80132b4 <__sinit>
 8013ee2:	4b1c      	ldr	r3, [pc, #112]	; (8013f54 <_putc_r+0x84>)
 8013ee4:	429c      	cmp	r4, r3
 8013ee6:	d124      	bne.n	8013f32 <_putc_r+0x62>
 8013ee8:	6874      	ldr	r4, [r6, #4]
 8013eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013eec:	07d8      	lsls	r0, r3, #31
 8013eee:	d405      	bmi.n	8013efc <_putc_r+0x2c>
 8013ef0:	89a3      	ldrh	r3, [r4, #12]
 8013ef2:	0599      	lsls	r1, r3, #22
 8013ef4:	d402      	bmi.n	8013efc <_putc_r+0x2c>
 8013ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ef8:	f7ff fa91 	bl	801341e <__retarget_lock_acquire_recursive>
 8013efc:	68a3      	ldr	r3, [r4, #8]
 8013efe:	3b01      	subs	r3, #1
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	60a3      	str	r3, [r4, #8]
 8013f04:	da05      	bge.n	8013f12 <_putc_r+0x42>
 8013f06:	69a2      	ldr	r2, [r4, #24]
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	db1c      	blt.n	8013f46 <_putc_r+0x76>
 8013f0c:	b2eb      	uxtb	r3, r5
 8013f0e:	2b0a      	cmp	r3, #10
 8013f10:	d019      	beq.n	8013f46 <_putc_r+0x76>
 8013f12:	6823      	ldr	r3, [r4, #0]
 8013f14:	1c5a      	adds	r2, r3, #1
 8013f16:	6022      	str	r2, [r4, #0]
 8013f18:	701d      	strb	r5, [r3, #0]
 8013f1a:	b2ed      	uxtb	r5, r5
 8013f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f1e:	07da      	lsls	r2, r3, #31
 8013f20:	d405      	bmi.n	8013f2e <_putc_r+0x5e>
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	059b      	lsls	r3, r3, #22
 8013f26:	d402      	bmi.n	8013f2e <_putc_r+0x5e>
 8013f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f2a:	f7ff fa79 	bl	8013420 <__retarget_lock_release_recursive>
 8013f2e:	4628      	mov	r0, r5
 8013f30:	bd70      	pop	{r4, r5, r6, pc}
 8013f32:	4b09      	ldr	r3, [pc, #36]	; (8013f58 <_putc_r+0x88>)
 8013f34:	429c      	cmp	r4, r3
 8013f36:	d101      	bne.n	8013f3c <_putc_r+0x6c>
 8013f38:	68b4      	ldr	r4, [r6, #8]
 8013f3a:	e7d6      	b.n	8013eea <_putc_r+0x1a>
 8013f3c:	4b07      	ldr	r3, [pc, #28]	; (8013f5c <_putc_r+0x8c>)
 8013f3e:	429c      	cmp	r4, r3
 8013f40:	bf08      	it	eq
 8013f42:	68f4      	ldreq	r4, [r6, #12]
 8013f44:	e7d1      	b.n	8013eea <_putc_r+0x1a>
 8013f46:	4629      	mov	r1, r5
 8013f48:	4622      	mov	r2, r4
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f7fe f940 	bl	80121d0 <__swbuf_r>
 8013f50:	4605      	mov	r5, r0
 8013f52:	e7e3      	b.n	8013f1c <_putc_r+0x4c>
 8013f54:	08018f44 	.word	0x08018f44
 8013f58:	08018f64 	.word	0x08018f64
 8013f5c:	08018f24 	.word	0x08018f24

08013f60 <__sread>:
 8013f60:	b510      	push	{r4, lr}
 8013f62:	460c      	mov	r4, r1
 8013f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f68:	f000 f8ae 	bl	80140c8 <_read_r>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	bfab      	itete	ge
 8013f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f72:	89a3      	ldrhlt	r3, [r4, #12]
 8013f74:	181b      	addge	r3, r3, r0
 8013f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f7a:	bfac      	ite	ge
 8013f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f7e:	81a3      	strhlt	r3, [r4, #12]
 8013f80:	bd10      	pop	{r4, pc}

08013f82 <__swrite>:
 8013f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f86:	461f      	mov	r7, r3
 8013f88:	898b      	ldrh	r3, [r1, #12]
 8013f8a:	05db      	lsls	r3, r3, #23
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	460c      	mov	r4, r1
 8013f90:	4616      	mov	r6, r2
 8013f92:	d505      	bpl.n	8013fa0 <__swrite+0x1e>
 8013f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f98:	2302      	movs	r3, #2
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f000 f870 	bl	8014080 <_lseek_r>
 8013fa0:	89a3      	ldrh	r3, [r4, #12]
 8013fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013faa:	81a3      	strh	r3, [r4, #12]
 8013fac:	4632      	mov	r2, r6
 8013fae:	463b      	mov	r3, r7
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb6:	f000 b817 	b.w	8013fe8 <_write_r>

08013fba <__sseek>:
 8013fba:	b510      	push	{r4, lr}
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fc2:	f000 f85d 	bl	8014080 <_lseek_r>
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	89a3      	ldrh	r3, [r4, #12]
 8013fca:	bf15      	itete	ne
 8013fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013fd6:	81a3      	strheq	r3, [r4, #12]
 8013fd8:	bf18      	it	ne
 8013fda:	81a3      	strhne	r3, [r4, #12]
 8013fdc:	bd10      	pop	{r4, pc}

08013fde <__sclose>:
 8013fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe2:	f000 b81b 	b.w	801401c <_close_r>
	...

08013fe8 <_write_r>:
 8013fe8:	b538      	push	{r3, r4, r5, lr}
 8013fea:	4d07      	ldr	r5, [pc, #28]	; (8014008 <_write_r+0x20>)
 8013fec:	4604      	mov	r4, r0
 8013fee:	4608      	mov	r0, r1
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	602a      	str	r2, [r5, #0]
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	f7ef fc81 	bl	80038fe <_write>
 8013ffc:	1c43      	adds	r3, r0, #1
 8013ffe:	d102      	bne.n	8014006 <_write_r+0x1e>
 8014000:	682b      	ldr	r3, [r5, #0]
 8014002:	b103      	cbz	r3, 8014006 <_write_r+0x1e>
 8014004:	6023      	str	r3, [r4, #0]
 8014006:	bd38      	pop	{r3, r4, r5, pc}
 8014008:	200413b0 	.word	0x200413b0

0801400c <abort>:
 801400c:	b508      	push	{r3, lr}
 801400e:	2006      	movs	r0, #6
 8014010:	f000 f894 	bl	801413c <raise>
 8014014:	2001      	movs	r0, #1
 8014016:	f7ef fc4b 	bl	80038b0 <_exit>
	...

0801401c <_close_r>:
 801401c:	b538      	push	{r3, r4, r5, lr}
 801401e:	4d06      	ldr	r5, [pc, #24]	; (8014038 <_close_r+0x1c>)
 8014020:	2300      	movs	r3, #0
 8014022:	4604      	mov	r4, r0
 8014024:	4608      	mov	r0, r1
 8014026:	602b      	str	r3, [r5, #0]
 8014028:	f7ef fc85 	bl	8003936 <_close>
 801402c:	1c43      	adds	r3, r0, #1
 801402e:	d102      	bne.n	8014036 <_close_r+0x1a>
 8014030:	682b      	ldr	r3, [r5, #0]
 8014032:	b103      	cbz	r3, 8014036 <_close_r+0x1a>
 8014034:	6023      	str	r3, [r4, #0]
 8014036:	bd38      	pop	{r3, r4, r5, pc}
 8014038:	200413b0 	.word	0x200413b0

0801403c <_fstat_r>:
 801403c:	b538      	push	{r3, r4, r5, lr}
 801403e:	4d07      	ldr	r5, [pc, #28]	; (801405c <_fstat_r+0x20>)
 8014040:	2300      	movs	r3, #0
 8014042:	4604      	mov	r4, r0
 8014044:	4608      	mov	r0, r1
 8014046:	4611      	mov	r1, r2
 8014048:	602b      	str	r3, [r5, #0]
 801404a:	f7ef fc80 	bl	800394e <_fstat>
 801404e:	1c43      	adds	r3, r0, #1
 8014050:	d102      	bne.n	8014058 <_fstat_r+0x1c>
 8014052:	682b      	ldr	r3, [r5, #0]
 8014054:	b103      	cbz	r3, 8014058 <_fstat_r+0x1c>
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	bd38      	pop	{r3, r4, r5, pc}
 801405a:	bf00      	nop
 801405c:	200413b0 	.word	0x200413b0

08014060 <_isatty_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4d06      	ldr	r5, [pc, #24]	; (801407c <_isatty_r+0x1c>)
 8014064:	2300      	movs	r3, #0
 8014066:	4604      	mov	r4, r0
 8014068:	4608      	mov	r0, r1
 801406a:	602b      	str	r3, [r5, #0]
 801406c:	f7ef fc7f 	bl	800396e <_isatty>
 8014070:	1c43      	adds	r3, r0, #1
 8014072:	d102      	bne.n	801407a <_isatty_r+0x1a>
 8014074:	682b      	ldr	r3, [r5, #0]
 8014076:	b103      	cbz	r3, 801407a <_isatty_r+0x1a>
 8014078:	6023      	str	r3, [r4, #0]
 801407a:	bd38      	pop	{r3, r4, r5, pc}
 801407c:	200413b0 	.word	0x200413b0

08014080 <_lseek_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	4d07      	ldr	r5, [pc, #28]	; (80140a0 <_lseek_r+0x20>)
 8014084:	4604      	mov	r4, r0
 8014086:	4608      	mov	r0, r1
 8014088:	4611      	mov	r1, r2
 801408a:	2200      	movs	r2, #0
 801408c:	602a      	str	r2, [r5, #0]
 801408e:	461a      	mov	r2, r3
 8014090:	f7ef fc78 	bl	8003984 <_lseek>
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d102      	bne.n	801409e <_lseek_r+0x1e>
 8014098:	682b      	ldr	r3, [r5, #0]
 801409a:	b103      	cbz	r3, 801409e <_lseek_r+0x1e>
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	200413b0 	.word	0x200413b0

080140a4 <__ascii_mbtowc>:
 80140a4:	b082      	sub	sp, #8
 80140a6:	b901      	cbnz	r1, 80140aa <__ascii_mbtowc+0x6>
 80140a8:	a901      	add	r1, sp, #4
 80140aa:	b142      	cbz	r2, 80140be <__ascii_mbtowc+0x1a>
 80140ac:	b14b      	cbz	r3, 80140c2 <__ascii_mbtowc+0x1e>
 80140ae:	7813      	ldrb	r3, [r2, #0]
 80140b0:	600b      	str	r3, [r1, #0]
 80140b2:	7812      	ldrb	r2, [r2, #0]
 80140b4:	1e10      	subs	r0, r2, #0
 80140b6:	bf18      	it	ne
 80140b8:	2001      	movne	r0, #1
 80140ba:	b002      	add	sp, #8
 80140bc:	4770      	bx	lr
 80140be:	4610      	mov	r0, r2
 80140c0:	e7fb      	b.n	80140ba <__ascii_mbtowc+0x16>
 80140c2:	f06f 0001 	mvn.w	r0, #1
 80140c6:	e7f8      	b.n	80140ba <__ascii_mbtowc+0x16>

080140c8 <_read_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4d07      	ldr	r5, [pc, #28]	; (80140e8 <_read_r+0x20>)
 80140cc:	4604      	mov	r4, r0
 80140ce:	4608      	mov	r0, r1
 80140d0:	4611      	mov	r1, r2
 80140d2:	2200      	movs	r2, #0
 80140d4:	602a      	str	r2, [r5, #0]
 80140d6:	461a      	mov	r2, r3
 80140d8:	f7ef fbf4 	bl	80038c4 <_read>
 80140dc:	1c43      	adds	r3, r0, #1
 80140de:	d102      	bne.n	80140e6 <_read_r+0x1e>
 80140e0:	682b      	ldr	r3, [r5, #0]
 80140e2:	b103      	cbz	r3, 80140e6 <_read_r+0x1e>
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	bd38      	pop	{r3, r4, r5, pc}
 80140e8:	200413b0 	.word	0x200413b0

080140ec <_raise_r>:
 80140ec:	291f      	cmp	r1, #31
 80140ee:	b538      	push	{r3, r4, r5, lr}
 80140f0:	4604      	mov	r4, r0
 80140f2:	460d      	mov	r5, r1
 80140f4:	d904      	bls.n	8014100 <_raise_r+0x14>
 80140f6:	2316      	movs	r3, #22
 80140f8:	6003      	str	r3, [r0, #0]
 80140fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014102:	b112      	cbz	r2, 801410a <_raise_r+0x1e>
 8014104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014108:	b94b      	cbnz	r3, 801411e <_raise_r+0x32>
 801410a:	4620      	mov	r0, r4
 801410c:	f000 f830 	bl	8014170 <_getpid_r>
 8014110:	462a      	mov	r2, r5
 8014112:	4601      	mov	r1, r0
 8014114:	4620      	mov	r0, r4
 8014116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801411a:	f000 b817 	b.w	801414c <_kill_r>
 801411e:	2b01      	cmp	r3, #1
 8014120:	d00a      	beq.n	8014138 <_raise_r+0x4c>
 8014122:	1c59      	adds	r1, r3, #1
 8014124:	d103      	bne.n	801412e <_raise_r+0x42>
 8014126:	2316      	movs	r3, #22
 8014128:	6003      	str	r3, [r0, #0]
 801412a:	2001      	movs	r0, #1
 801412c:	e7e7      	b.n	80140fe <_raise_r+0x12>
 801412e:	2400      	movs	r4, #0
 8014130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014134:	4628      	mov	r0, r5
 8014136:	4798      	blx	r3
 8014138:	2000      	movs	r0, #0
 801413a:	e7e0      	b.n	80140fe <_raise_r+0x12>

0801413c <raise>:
 801413c:	4b02      	ldr	r3, [pc, #8]	; (8014148 <raise+0xc>)
 801413e:	4601      	mov	r1, r0
 8014140:	6818      	ldr	r0, [r3, #0]
 8014142:	f7ff bfd3 	b.w	80140ec <_raise_r>
 8014146:	bf00      	nop
 8014148:	20000018 	.word	0x20000018

0801414c <_kill_r>:
 801414c:	b538      	push	{r3, r4, r5, lr}
 801414e:	4d07      	ldr	r5, [pc, #28]	; (801416c <_kill_r+0x20>)
 8014150:	2300      	movs	r3, #0
 8014152:	4604      	mov	r4, r0
 8014154:	4608      	mov	r0, r1
 8014156:	4611      	mov	r1, r2
 8014158:	602b      	str	r3, [r5, #0]
 801415a:	f7ef fb99 	bl	8003890 <_kill>
 801415e:	1c43      	adds	r3, r0, #1
 8014160:	d102      	bne.n	8014168 <_kill_r+0x1c>
 8014162:	682b      	ldr	r3, [r5, #0]
 8014164:	b103      	cbz	r3, 8014168 <_kill_r+0x1c>
 8014166:	6023      	str	r3, [r4, #0]
 8014168:	bd38      	pop	{r3, r4, r5, pc}
 801416a:	bf00      	nop
 801416c:	200413b0 	.word	0x200413b0

08014170 <_getpid_r>:
 8014170:	f7ef bb86 	b.w	8003880 <_getpid>

08014174 <__ascii_wctomb>:
 8014174:	b149      	cbz	r1, 801418a <__ascii_wctomb+0x16>
 8014176:	2aff      	cmp	r2, #255	; 0xff
 8014178:	bf85      	ittet	hi
 801417a:	238a      	movhi	r3, #138	; 0x8a
 801417c:	6003      	strhi	r3, [r0, #0]
 801417e:	700a      	strbls	r2, [r1, #0]
 8014180:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014184:	bf98      	it	ls
 8014186:	2001      	movls	r0, #1
 8014188:	4770      	bx	lr
 801418a:	4608      	mov	r0, r1
 801418c:	4770      	bx	lr
	...

08014190 <_init>:
 8014190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014192:	bf00      	nop
 8014194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014196:	bc08      	pop	{r3}
 8014198:	469e      	mov	lr, r3
 801419a:	4770      	bx	lr

0801419c <_fini>:
 801419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801419e:	bf00      	nop
 80141a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141a2:	bc08      	pop	{r3}
 80141a4:	469e      	mov	lr, r3
 80141a6:	4770      	bx	lr
