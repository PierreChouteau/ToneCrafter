
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013550  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005128  08013720  08013720  00023720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018848  08018848  00030940  2**0
                  CONTENTS
  4 .ARM          00000008  08018848  08018848  00028848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018850  08018850  00030940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018850  08018850  00028850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018854  08018854  00028854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000940  20000000  08018858  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000409ec  20000940  08019198  00030940  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2004132c  08019198  0003132c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY
 12 .debug_info   000386c4  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d05  00000000  00000000  00069034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e0  00000000  00000000  0006fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002708  00000000  00000000  00072720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c980  00000000  00000000  00074e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034250  00000000  00000000  000817a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fc47  00000000  00000000  000b59f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001e563f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c58c  00000000  00000000  001e5710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000940 	.word	0x20000940
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013708 	.word	0x08013708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000944 	.word	0x20000944
 800020c:	08013708 	.word	0x08013708

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	f5ad 6db6 	sub.w	sp, sp, #1456	; 0x5b0
 8000f9e:	af02      	add	r7, sp, #8
//	SCB_InvalidateDCache();
//	SCB_InvalidateICache();


	char buf[50];
	int buf_len = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	float y_val;
	float test = 0.0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8000fae:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8000fb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 8000fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fbc:	4aac      	ldr	r2, [pc, #688]	; (8001270 <main+0x2d8>)
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	4615      	mov	r5, r2
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fca:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	4aa8      	ldr	r2, [pc, #672]	; (8001274 <main+0x2dc>)
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	4615      	mov	r5, r2
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fe0:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4aa4      	ldr	r2, [pc, #656]	; (8001278 <main+0x2e0>)
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	463b      	mov	r3, r7
 8000fec:	2201      	movs	r2, #1
 8000fee:	809a      	strh	r2, [r3, #4]
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	80da      	strh	r2, [r3, #6]
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	811a      	strh	r2, [r3, #8]
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	f243 02e4 	movw	r2, #12516	; 0x30e4
 8001002:	60da      	str	r2, [r3, #12]
	AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 8001004:	f00c fa4c 	bl	800d4a0 <ai_tonecrafter_data_weights_get>
 8001008:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 800100a:	463b      	mov	r3, r7
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	463b      	mov	r3, r7
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <main+0x2e4>)
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	463b      	mov	r3, r7
 800101c:	2201      	movs	r2, #1
 800101e:	839a      	strh	r2, [r3, #28]
 8001020:	463b      	mov	r3, r7
 8001022:	2201      	movs	r2, #1
 8001024:	83da      	strh	r2, [r3, #30]
 8001026:	463b      	mov	r3, r7
 8001028:	2201      	movs	r2, #1
 800102a:	841a      	strh	r2, [r3, #32]
 800102c:	463b      	mov	r3, r7
 800102e:	f44f 7244 	mov.w	r2, #784	; 0x310
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
 8001034:	463b      	mov	r3, r7
 8001036:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
	AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8001042:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001046:	2201      	movs	r2, #1
 8001048:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800104a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800104e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001052:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8001054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001058:	2201      	movs	r2, #1
 800105a:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800105c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001060:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001064:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001066:	f000 f919 	bl	800129c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800106a:	f001 f977 	bl	800235c <MX_GPIO_Init>
	MX_DMA_Init();
 800106e:	f001 f8b3 	bl	80021d8 <MX_DMA_Init>
	MX_ADC3_Init();
 8001072:	f000 f9d3 	bl	800141c <MX_ADC3_Init>
	MX_CRC_Init();
 8001076:	f000 fa23 	bl	80014c0 <MX_CRC_Init>
	MX_DCMI_Init();
 800107a:	f000 fa43 	bl	8001504 <MX_DCMI_Init>
	MX_DMA2D_Init();
 800107e:	f000 fa75 	bl	800156c <MX_DMA2D_Init>
	MX_FMC_Init();
 8001082:	f001 f917 	bl	80022b4 <MX_FMC_Init>
	MX_I2C1_Init();
 8001086:	f000 faa3 	bl	80015d0 <MX_I2C1_Init>
	MX_I2C3_Init();
 800108a:	f000 fae1 	bl	8001650 <MX_I2C3_Init>
	MX_LTDC_Init();
 800108e:	f000 fb1f 	bl	80016d0 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001092:	f000 fba1 	bl	80017d8 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001096:	f000 fbe1 	bl	800185c <MX_RTC_Init>
	MX_SAI2_Init();
 800109a:	f000 fc85 	bl	80019a8 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 800109e:	f000 fd3f 	bl	8001b20 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 80010a2:	f000 fd5d 	bl	8001b60 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 80010a6:	f000 fd8b 	bl	8001bc0 <MX_TIM1_Init>
	MX_TIM2_Init();
 80010aa:	f000 fe35 	bl	8001d18 <MX_TIM2_Init>
	MX_TIM3_Init();
 80010ae:	f000 fea9 	bl	8001e04 <MX_TIM3_Init>
	MX_TIM5_Init();
 80010b2:	f000 ff1f 	bl	8001ef4 <MX_TIM5_Init>
	MX_TIM8_Init();
 80010b6:	f000 ff95 	bl	8001fe4 <MX_TIM8_Init>
	MX_TIM12_Init();
 80010ba:	f000 ffe7 	bl	800208c <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80010be:	f001 f82b 	bl	8002118 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80010c2:	f001 f859 	bl	8002178 <MX_USART6_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// ici ton code !

    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 80010c6:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80010ca:	496d      	ldr	r1, [pc, #436]	; (8001280 <main+0x2e8>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00f febf 	bl	8010e50 <siprintf>
 80010d2:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80010d6:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	4868      	ldr	r0, [pc, #416]	; (8001284 <main+0x2ec>)
 80010e4:	f00a fcfa 	bl	800badc <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_tonecrafter_create(&tonecrafter, AI_TONECRAFTER_DATA_CONFIG);
 80010e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c f970 	bl	800d3d4 <ai_tonecrafter_create>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if (ai_err.type != AI_ERROR_NONE)
 80010fa:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d011      	beq.n	8001126 <main+0x18e>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001102:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <main+0x2f0>)
 8001108:	4618      	mov	r0, r3
 800110a:	f00f fea1 	bl	8010e50 <siprintf>
 800110e:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001112:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8001116:	b29a      	uxth	r2, r3
 8001118:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <main+0x2ec>)
 8001120:	f00a fcdc 	bl	800badc <HAL_UART_Transmit>
      while(1);
 8001124:	e7fe      	b.n	8001124 <main+0x18c>
    }

    // Initialize neural network
    if (!ai_tonecrafter_init(tonecrafter, &ai_params))
 8001126:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	463a      	mov	r2, r7
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f00c f965 	bl	800d400 <ai_tonecrafter_init>
 8001136:	4603      	mov	r3, r0
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d011      	beq.n	8001166 <main+0x1ce>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001142:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001146:	4951      	ldr	r1, [pc, #324]	; (800128c <main+0x2f4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f00f fe81 	bl	8010e50 <siprintf>
 800114e:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001152:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8001156:	b29a      	uxth	r2, r3
 8001158:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	4849      	ldr	r0, [pc, #292]	; (8001284 <main+0x2ec>)
 8001160:	f00a fcbc 	bl	800badc <HAL_UART_Transmit>
      while(1);
 8001164:	e7fe      	b.n	8001164 <main+0x1cc>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LED_Toggle();
 8001166:	f002 fc3b 	bl	80039e0 <LED_Toggle>
		HAL_Delay(500);
 800116a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116e:	f002 ff37 	bl	8003fe0 <HAL_Delay>

		  // Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8001178:	e022      	b.n	80011c0 <main+0x228>
		{
		  ((ai_float *)in_data)[i] = (ai_float)test;
 800117a:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001184:	4413      	add	r3, r2
 8001186:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	601a      	str	r2, [r3, #0]
		  test += 0.1;
 800118e:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f7ff f9f8 	bl	8000588 <__aeabi_f2d>
 8001198:	a333      	add	r3, pc, #204	; (adr r3, 8001268 <main+0x2d0>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff f895 	bl	80002cc <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fd1d 	bl	8000be8 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 80011b4:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 80011b6:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80011c0:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80011c4:	2b77      	cmp	r3, #119	; 0x77
 80011c6:	d9d8      	bls.n	800117a <main+0x1e2>
		}

		// Get current timestamp
		timestamp = htim12.Instance->CNT;
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <main+0x2f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598

		// Perform inference
		nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 80011d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c f94c 	bl	800d47e <ai_tonecrafter_run>
 80011e6:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
		if (nbatch != 1) {
 80011ea:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d010      	beq.n	8001214 <main+0x27c>
		  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80011f2:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <main+0x2fc>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00f fe29 	bl	8010e50 <siprintf>
 80011fe:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
		  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001202:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8001206:	b29a      	uxth	r2, r3
 8001208:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	481d      	ldr	r0, [pc, #116]	; (8001284 <main+0x2ec>)
 8001210:	f00a fc64 	bl	800badc <HAL_UART_Transmit>
		}

		// Read output (predicted y) of neural network
		y_val = ((float *)out_data)[0];
 8001214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800121e:	6013      	str	r3, [r2, #0]

		// Print output of neural network along with inference time (microseconds)
		buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 8001220:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f7ff f9af 	bl	8000588 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4918      	ldr	r1, [pc, #96]	; (8001290 <main+0x2f8>)
 8001230:	6809      	ldr	r1, [r1, #0]
 8001232:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001234:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8001238:	1a41      	subs	r1, r0, r1
 800123a:	f207 505c 	addw	r0, r7, #1372	; 0x55c
 800123e:	9100      	str	r1, [sp, #0]
 8001240:	4915      	ldr	r1, [pc, #84]	; (8001298 <main+0x300>)
 8001242:	f00f fe05 	bl	8010e50 <siprintf>
 8001246:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
		HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800124a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800124e:	b29a      	uxth	r2, r3
 8001250:	f207 515c 	addw	r1, r7, #1372	; 0x55c
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <main+0x2ec>)
 8001258:	f00a fc40 	bl	800badc <HAL_UART_Transmit>

		// Wait before doing it again
		HAL_Delay(500);
 800125c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001260:	f002 febe 	bl	8003fe0 <HAL_Delay>
		LED_Toggle();
 8001264:	e77f      	b.n	8001166 <main+0x1ce>
 8001266:	bf00      	nop
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3fb99999 	.word	0x3fb99999
 8001270:	080137cc 	.word	0x080137cc
 8001274:	080137e4 	.word	0x080137e4
 8001278:	40040440 	.word	0x40040440
 800127c:	00040440 	.word	0x00040440
 8001280:	08013720 	.word	0x08013720
 8001284:	200011ec 	.word	0x200011ec
 8001288:	0801373c 	.word	0x0801373c
 800128c:	08013764 	.word	0x08013764
 8001290:	200012fc 	.word	0x200012fc
 8001294:	08013788 	.word	0x08013788
 8001298:	080137ac 	.word	0x080137ac

0800129c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b4      	sub	sp, #208	; 0xd0
 80012a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a6:	2230      	movs	r2, #48	; 0x30
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00f f876 	bl	801039c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2284      	movs	r2, #132	; 0x84
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00f f867 	bl	801039c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80012ce:	f006 fa43 	bl	8007758 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <SystemClock_Config+0x174>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <SystemClock_Config+0x174>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <SystemClock_Config+0x174>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <SystemClock_Config+0x178>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a49      	ldr	r2, [pc, #292]	; (8001414 <SystemClock_Config+0x178>)
 80012f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <SystemClock_Config+0x178>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001302:	2309      	movs	r3, #9
 8001304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001324:	2319      	movs	r3, #25
 8001326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800132a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800132e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001338:	2309      	movs	r3, #9
 800133a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001342:	4618      	mov	r0, r3
 8001344:	f007 fa2c 	bl	80087a0 <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800134e:	f001 fa43 	bl	80027d8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001352:	f006 fa11 	bl	8007778 <HAL_PWREx_EnableOverDrive>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800135c:	f001 fa3c 	bl	80027d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001372:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001386:	2106      	movs	r1, #6
 8001388:	4618      	mov	r0, r3
 800138a:	f007 fcad 	bl	8008ce8 <HAL_RCC_ClockConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001394:	f001 fa20 	bl	80027d8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <SystemClock_Config+0x17c>)
 800139a:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013b0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80013b2:	2305      	movs	r3, #5
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80013b6:	2308      	movs	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80013d2:	2300      	movs	r3, #0
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80013da:	2300      	movs	r3, #0
 80013dc:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013de:	2300      	movs	r3, #0
 80013e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80013e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 fe7d 	bl	80090f8 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001404:	f001 f9e8 	bl	80027d8 <Error_Handler>
	}
}
 8001408:	bf00      	nop
 800140a:	37d0      	adds	r7, #208	; 0xd0
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000
 8001418:	01b14868 	.word	0x01b14868

0800141c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <MX_ADC3_Init+0x9c>)
 8001432:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800143a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_ADC3_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_ADC3_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_ADC3_Init+0x98>)
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <MX_ADC3_Init+0xa0>)
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_ADC3_Init+0x98>)
 800146a:	2201      	movs	r2, #1
 800146c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_ADC3_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_ADC3_Init+0x98>)
 800147e:	f002 fdd3 	bl	8004028 <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001488:	f001 f9a6 	bl	80027d8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800148c:	2304      	movs	r3, #4
 800148e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_ADC3_Init+0x98>)
 800149e:	f002 fe07 	bl	80040b0 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80014a8:	f001 f996 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20001004 	.word	0x20001004
 80014b8:	40012200 	.word	0x40012200
 80014bc:	0f000001 	.word	0x0f000001

080014c0 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_CRC_Init+0x3c>)
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <MX_CRC_Init+0x40>)
 80014c8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_CRC_Init+0x3c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_CRC_Init+0x3c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_CRC_Init+0x3c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_CRC_Init+0x3c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_CRC_Init+0x3c>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_CRC_Init+0x3c>)
 80014ea:	f003 f90b 	bl	8004704 <HAL_CRC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 80014f4:	f001 f970 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000db8 	.word	0x20000db8
 8001500:	40023000 	.word	0x40023000

08001504 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_DCMI_Init+0x60>)
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <MX_DCMI_Init+0x64>)
 800150c:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_DCMI_Init+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_DCMI_Init+0x60>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_DCMI_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_DCMI_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_DCMI_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <MX_DCMI_Init+0x60>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_DCMI_Init+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_DCMI_Init+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_DCMI_Init+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_DCMI_Init+0x60>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_DCMI_Init+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_DCMI_Init+0x60>)
 8001552:	f003 f9c1 	bl	80048d8 <HAL_DCMI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 800155c:	f001 f93c 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000104c 	.word	0x2000104c
 8001568:	50050000 	.word	0x50050000

0800156c <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <MX_DMA2D_Init+0x60>)
 8001574:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 80015a2:	f003 fe5f 	bl	8005264 <HAL_DMA2D_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80015ac:	f001 f914 	bl	80027d8 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80015b0:	2101      	movs	r1, #1
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_DMA2D_Init+0x5c>)
 80015b4:	f003 ffb0 	bl	8005518 <HAL_DMA2D_ConfigLayer>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80015be:	f001 f90b 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20001270 	.word	0x20001270
 80015cc:	4002b000 	.word	0x4002b000

080015d0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_I2C1_Init+0x74>)
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_I2C1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_I2C1_Init+0x74>)
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <MX_I2C1_Init+0x7c>)
 80015de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_I2C1_Init+0x74>)
 800160c:	f005 fc9e 	bl	8006f4c <HAL_I2C_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001616:	f001 f8df 	bl	80027d8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161a:	2100      	movs	r1, #0
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_I2C1_Init+0x74>)
 800161e:	f005 fd25 	bl	800706c <HAL_I2CEx_ConfigAnalogFilter>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001628:	f001 f8d6 	bl	80027d8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_I2C1_Init+0x74>)
 8001630:	f005 fd67 	bl	8007102 <HAL_I2CEx_ConfigDigitalFilter>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800163a:	f001 f8cd 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000d6c 	.word	0x20000d6c
 8001648:	40005400 	.word	0x40005400
 800164c:	00c0eaff 	.word	0x00c0eaff

08001650 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C3_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_I2C3_Init+0x74>)
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <MX_I2C3_Init+0x7c>)
 800165e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001668:	2201      	movs	r2, #1
 800166a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_I2C3_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_I2C3_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_I2C3_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800168a:	480e      	ldr	r0, [pc, #56]	; (80016c4 <MX_I2C3_Init+0x74>)
 800168c:	f005 fc5e 	bl	8006f4c <HAL_I2C_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001696:	f001 f89f 	bl	80027d8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <MX_I2C3_Init+0x74>)
 800169e:	f005 fce5 	bl	800706c <HAL_I2CEx_ConfigAnalogFilter>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 80016a8:	f001 f896 	bl	80027d8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_I2C3_Init+0x74>)
 80016b0:	f005 fd27 	bl	8007102 <HAL_I2CEx_ConfigDigitalFilter>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 80016ba:	f001 f88d 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000b44 	.word	0x20000b44
 80016c8:	40005c00 	.word	0x40005c00
 80016cc:	00c0eaff 	.word	0x00c0eaff

080016d0 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2234      	movs	r2, #52	; 0x34
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00e fe5d 	bl	801039c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <MX_LTDC_Init+0x100>)
 80016e4:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <MX_LTDC_Init+0x104>)
 80016e6:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <MX_LTDC_Init+0x100>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <MX_LTDC_Init+0x100>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <MX_LTDC_Init+0x100>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <MX_LTDC_Init+0x100>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001708:	2209      	movs	r2, #9
 800170a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <MX_LTDC_Init+0x100>)
 800170e:	2235      	movs	r2, #53	; 0x35
 8001710:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001714:	220b      	movs	r2, #11
 8001716:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <MX_LTDC_Init+0x100>)
 800171a:	f240 2215 	movw	r2, #533	; 0x215
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001722:	f240 121b 	movw	r2, #283	; 0x11b
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <MX_LTDC_Init+0x100>)
 800172a:	f240 2235 	movw	r2, #565	; 0x235
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001732:	f240 121d 	movw	r2, #285	; 0x11d
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_LTDC_Init+0x100>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001740:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_LTDC_Init+0x100>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001750:	481f      	ldr	r0, [pc, #124]	; (80017d0 <MX_LTDC_Init+0x100>)
 8001752:	f005 fd23 	bl	800719c <HAL_LTDC_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 800175c:	f001 f83c 	bl	80027d8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001764:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001768:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800176e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001772:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001778:	23ff      	movs	r3, #255	; 0xff
 800177a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001780:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001784:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001786:	2307      	movs	r3, #7
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800178a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001790:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001796:	f44f 7388 	mov.w	r3, #272	; 0x110
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <MX_LTDC_Init+0x100>)
 80017b6:	f005 fdc1 	bl	800733c <HAL_LTDC_ConfigLayer>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 80017c0:	f001 f80a 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 80017c4:	f002 f928 	bl	8003a18 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000f5c 	.word	0x20000f5c
 80017d4:	40016800 	.word	0x40016800

080017d8 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <MX_QUADSPI_Init+0x80>)
 80017e0:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017f0:	2210      	movs	r2, #16
 80017f2:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017f6:	2218      	movs	r2, #24
 80017f8:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 80017fc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001800:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001814:	480f      	ldr	r0, [pc, #60]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 8001816:	f005 ffff 	bl	8007818 <HAL_QSPI_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001820:	f000 ffda 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 8001826:	f002 f9f9 	bl	8003c1c <DISCO_QSPI_ResetMemory>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_QUADSPI_Init+0x5c>
 8001830:	f000 ffd2 	bl	80027d8 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_QUADSPI_Init+0x7c>)
 8001836:	f002 fa33 	bl	8003ca0 <DISCO_QSPI_DummyCyclesCfg>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_QUADSPI_Init+0x6c>
 8001840:	f000 ffca 	bl	80027d8 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001844:	f002 f9b8 	bl	8003bb8 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001848:	205c      	movs	r0, #92	; 0x5c
 800184a:	f002 ff4c 	bl	80046e6 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000137c 	.word	0x2000137c
 8001858:	a0001000 	.word	0xa0001000

0800185c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b092      	sub	sp, #72	; 0x48
 8001860:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	222c      	movs	r2, #44	; 0x2c
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f00e fd8c 	bl	801039c <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <MX_RTC_Init+0x144>)
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <MX_RTC_Init+0x148>)
 8001888:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800188a:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <MX_RTC_Init+0x144>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <MX_RTC_Init+0x144>)
 8001892:	227f      	movs	r2, #127	; 0x7f
 8001894:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <MX_RTC_Init+0x144>)
 8001898:	22ff      	movs	r2, #255	; 0xff
 800189a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <MX_RTC_Init+0x144>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <MX_RTC_Init+0x144>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <MX_RTC_Init+0x144>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018ae:	483c      	ldr	r0, [pc, #240]	; (80019a0 <MX_RTC_Init+0x144>)
 80018b0:	f008 f956 	bl	8009b60 <HAL_RTC_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_RTC_Init+0x62>
	{
		Error_Handler();
 80018ba:	f000 ff8d 	bl	80027d8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	482f      	ldr	r0, [pc, #188]	; (80019a0 <MX_RTC_Init+0x144>)
 80018e2:	f008 f9cf 	bl	8009c84 <HAL_RTC_SetTime>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 80018ec:	f000 ff74 	bl	80027d8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	4823      	ldr	r0, [pc, #140]	; (80019a0 <MX_RTC_Init+0x144>)
 8001912:	f008 fa75 	bl	8009e00 <HAL_RTC_SetDate>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 800191c:	f000 ff5c 	bl	80027d8 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001920:	2300      	movs	r3, #0
 8001922:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001924:	2300      	movs	r3, #0
 8001926:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001928:	2300      	movs	r3, #0
 800192a:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <MX_RTC_Init+0x144>)
 8001958:	f008 fafa 	bl	8009f50 <HAL_RTC_SetAlarm>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001962:	f000 ff39 	bl	80027d8 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	2201      	movs	r2, #1
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <MX_RTC_Init+0x144>)
 8001974:	f008 faec 	bl	8009f50 <HAL_RTC_SetAlarm>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 800197e:	f000 ff2b 	bl	80027d8 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001982:	2202      	movs	r2, #2
 8001984:	2100      	movs	r1, #0
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <MX_RTC_Init+0x144>)
 8001988:	f008 fc6c 	bl	800a264 <HAL_RTCEx_SetTimeStamp>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001992:	f000 ff21 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3748      	adds	r7, #72	; 0x48
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20001120 	.word	0x20001120
 80019a4:	40002800 	.word	0x40002800

080019a8 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019ae:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <MX_SAI2_Init+0x16c>)
 80019b0:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80019be:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019c4:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80019ca:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019dc:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019ec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80019f0:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80019f8:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <MX_SAI2_Init+0x168>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80019fe:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a12:	2220      	movs	r2, #32
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a1c:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001a38:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a40:	2205      	movs	r2, #5
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001a44:	4832      	ldr	r0, [pc, #200]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001a46:	f008 fc63 	bl	800a310 <HAL_SAI_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001a50:	f000 fec2 	bl	80027d8 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <MX_SAI2_Init+0x174>)
 8001a58:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a62:	2203      	movs	r2, #3
 8001a64:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001aaa:	2220      	movs	r2, #32
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001abe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001adc:	480e      	ldr	r0, [pc, #56]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001ade:	f008 fc17 	bl	800a310 <HAL_SAI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001ae8:	f000 fe76 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <MX_SAI2_Init+0x168>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001afa:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <MX_SAI2_Init+0x170>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b0a:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000ce8 	.word	0x20000ce8
 8001b14:	40015c04 	.word	0x40015c04
 8001b18:	20000abc 	.word	0x20000abc
 8001b1c:	40015c24 	.word	0x40015c24

08001b20 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b26:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <MX_SDMMC1_SD_Init+0x3c>)
 8001b28:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <MX_SDMMC1_SD_Init+0x38>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	20000e3c 	.word	0x20000e3c
 8001b5c:	40012c00 	.word	0x40012c00

08001b60 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b66:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b6a:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_SPDIFRX_Init+0x5c>)
 8001baa:	f008 fde7 	bl	800a77c <HAL_SPDIFRX_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001bb4:	f000 fe10 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000c9c 	.word	0x20000c9c

08001bc0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09a      	sub	sp, #104	; 0x68
 8001bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	222c      	movs	r2, #44	; 0x2c
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00e fbce 	bl	801039c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c02:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <MX_TIM1_Init+0x154>)
 8001c04:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c18:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c2c:	4838      	ldr	r0, [pc, #224]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c2e:	f008 fe01 	bl	800a834 <HAL_TIM_Base_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001c38:	f000 fdce 	bl	80027d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c46:	4619      	mov	r1, r3
 8001c48:	4831      	ldr	r0, [pc, #196]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c4a:	f009 f949 	bl	800aee0 <HAL_TIM_ConfigClockSource>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001c54:	f000 fdc0 	bl	80027d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c58:	482d      	ldr	r0, [pc, #180]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c5a:	f008 febb 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001c64:	f000 fdb8 	bl	80027d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4825      	ldr	r0, [pc, #148]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001c7c:	f009 fdb6 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8001c86:	f000 fda7 	bl	80027d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4818      	ldr	r0, [pc, #96]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001cb0:	f009 f806 	bl	800acc0 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001cba:	f000 fd8d 	bl	80027d8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001cf4:	f009 fe08 	bl	800b908 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001cfe:	f000 fd6b 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM1_Init+0x150>)
 8001d04:	f001 f9c4 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3768      	adds	r7, #104	; 0x68
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20001140 	.word	0x20001140
 8001d14:	40010000 	.word	0x40010000

08001d18 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d72:	4823      	ldr	r0, [pc, #140]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d74:	f008 fd5e 	bl	800a834 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8001d7e:	f000 fd2b 	bl	80027d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	481c      	ldr	r0, [pc, #112]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001d90:	f009 f8a6 	bl	800aee0 <HAL_TIM_ConfigClockSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8001d9a:	f000 fd1d 	bl	80027d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d9e:	4818      	ldr	r0, [pc, #96]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001da0:	f008 fe18 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001daa:	f000 fd15 	bl	80027d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4810      	ldr	r0, [pc, #64]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001dbe:	f009 fd15 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001dc8:	f000 fd06 	bl	80027d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dcc:	2360      	movs	r3, #96	; 0x60
 8001dce:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001de4:	f008 ff6c 	bl	800acc0 <HAL_TIM_PWM_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8001dee:	f000 fcf3 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001df2:	4803      	ldr	r0, [pc, #12]	; (8001e00 <MX_TIM2_Init+0xe8>)
 8001df4:	f001 f94c 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001df8:	bf00      	nop
 8001dfa:	3738      	adds	r7, #56	; 0x38
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200012b0 	.word	0x200012b0

08001e04 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e38:	4a2d      	ldr	r2, [pc, #180]	; (8001ef0 <MX_TIM3_Init+0xec>)
 8001e3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e5e:	f008 fce9 	bl	800a834 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8001e68:	f000 fcb6 	bl	80027d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e76:	4619      	mov	r1, r3
 8001e78:	481c      	ldr	r0, [pc, #112]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e7a:	f009 f831 	bl	800aee0 <HAL_TIM_ConfigClockSource>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8001e84:	f000 fca8 	bl	80027d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001e8a:	f008 fda3 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8001e94:	f000 fca0 	bl	80027d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001ea8:	f009 fca0 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001eb2:	f000 fc91 	bl	80027d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	; 0x60
 8001eb8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001ece:	f008 fef7 	bl	800acc0 <HAL_TIM_PWM_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001ed8:	f000 fc7e 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM3_Init+0xe8>)
 8001ede:	f001 f8d7 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001ee2:	bf00      	nop
 8001ee4:	3738      	adds	r7, #56	; 0x38
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000f10 	.word	0x20000f10
 8001ef0:	40000400 	.word	0x40000400

08001ef4 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	; 0x38
 8001ef8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f28:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <MX_TIM5_Init+0xec>)
 8001f2a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f3e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f4c:	4823      	ldr	r0, [pc, #140]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f4e:	f008 fc71 	bl	800a834 <HAL_TIM_Base_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001f58:	f000 fc3e 	bl	80027d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f66:	4619      	mov	r1, r3
 8001f68:	481c      	ldr	r0, [pc, #112]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f6a:	f008 ffb9 	bl	800aee0 <HAL_TIM_ConfigClockSource>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001f74:	f000 fc30 	bl	80027d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f78:	4818      	ldr	r0, [pc, #96]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f7a:	f008 fd2b 	bl	800a9d4 <HAL_TIM_PWM_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001f84:	f000 fc28 	bl	80027d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001f98:	f009 fc28 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001fa2:	f000 fc19 	bl	80027d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa6:	2360      	movs	r3, #96	; 0x60
 8001fa8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	220c      	movs	r2, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4807      	ldr	r0, [pc, #28]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001fbe:	f008 fe7f 	bl	800acc0 <HAL_TIM_PWM_ConfigChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8001fc8:	f000 fc06 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <MX_TIM5_Init+0xe8>)
 8001fce:	f001 f85f 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8001fd2:	bf00      	nop
 8001fd4:	3738      	adds	r7, #56	; 0x38
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000ec0 	.word	0x20000ec0
 8001fe0:	40000c00 	.word	0x40000c00

08001fe4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <MX_TIM8_Init+0xa0>)
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <MX_TIM8_Init+0xa4>)
 8002006:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_TIM8_Init+0xa0>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_TIM8_Init+0xa0>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_TIM8_Init+0xa0>)
 8002016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM8_Init+0xa0>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_TIM8_Init+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_TIM8_Init+0xa0>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <MX_TIM8_Init+0xa0>)
 8002030:	f008 fc00 	bl	800a834 <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 800203a:	f000 fbcd 	bl	80027d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002042:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4619      	mov	r1, r3
 800204a:	480e      	ldr	r0, [pc, #56]	; (8002084 <MX_TIM8_Init+0xa0>)
 800204c:	f008 ff48 	bl	800aee0 <HAL_TIM_ConfigClockSource>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8002056:	f000 fbbf 	bl	80027d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <MX_TIM8_Init+0xa0>)
 800206c:	f009 fbbe 	bl	800b7ec <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8002076:	f000 fbaf 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000bf0 	.word	0x20000bf0
 8002088:	40010400 	.word	0x40010400

0800208c <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM12_Init+0x84>)
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <MX_TIM12_Init+0x88>)
 80020a8:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_TIM12_Init+0x84>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_TIM12_Init+0x84>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM12_Init+0x84>)
 80020b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020bc:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_TIM12_Init+0x84>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <MX_TIM12_Init+0x84>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_TIM12_Init+0x84>)
 80020cc:	f008 fc82 	bl	800a9d4 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 80020d6:	f000 fb7f 	bl	80027d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	; 0x60
 80020dc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM12_Init+0x84>)
 80020f2:	f008 fde5 	bl	800acc0 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 80020fc:	f000 fb6c 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM12_Init+0x84>)
 8002102:	f000 ffc5 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200012fc 	.word	0x200012fc
 8002114:	40001800 	.word	0x40001800

08002118 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART1_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800215c:	f009 fc70 	bl	800ba40 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002166:	f000 fb37 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000109c 	.word	0x2000109c
 8002174:	40011000 	.word	0x40011000

08002178 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <MX_USART6_UART_Init+0x5c>)
 8002180:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_USART6_UART_Init+0x58>)
 80021bc:	f009 fc40 	bl	800ba40 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 80021c6:	f000 fb07 	bl	80027d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200011ec 	.word	0x200011ec
 80021d4:	40011400 	.word	0x40011400

080021d8 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <MX_DMA_Init+0xd0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <MX_DMA_Init+0xd0>)
 80021e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <MX_DMA_Init+0xd0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <MX_DMA_Init+0xd4>)
 80021f8:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <MX_DMA_Init+0xd8>)
 80021fa:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <MX_DMA_Init+0xd4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <MX_DMA_Init+0xd4>)
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <MX_DMA_Init+0xd4>)
 800220a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002210:	4b26      	ldr	r3, [pc, #152]	; (80022ac <MX_DMA_Init+0xd4>)
 8002212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002216:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_DMA_Init+0xd4>)
 800221a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800221e:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <MX_DMA_Init+0xd4>)
 8002222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002226:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <MX_DMA_Init+0xd4>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_DMA_Init+0xd4>)
 8002230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002234:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_DMA_Init+0xd4>)
 8002238:	2204      	movs	r2, #4
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_DMA_Init+0xd4>)
 800223e:	2203      	movs	r2, #3
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_DMA_Init+0xd4>)
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_DMA_Init+0xd4>)
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800224e:	4817      	ldr	r0, [pc, #92]	; (80022ac <MX_DMA_Init+0xd4>)
 8002250:	f002 fc8c 	bl	8004b6c <HAL_DMA_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 800225a:	f000 fabd 	bl	80027d8 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2105      	movs	r1, #5
 8002262:	2038      	movs	r0, #56	; 0x38
 8002264:	f002 fa15 	bl	8004692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002268:	2038      	movs	r0, #56	; 0x38
 800226a:	f002 fa2e 	bl	80046ca <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2105      	movs	r1, #5
 8002272:	2039      	movs	r0, #57	; 0x39
 8002274:	f002 fa0d 	bl	8004692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002278:	2039      	movs	r0, #57	; 0x39
 800227a:	f002 fa26 	bl	80046ca <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2105      	movs	r1, #5
 8002282:	203c      	movs	r0, #60	; 0x3c
 8002284:	f002 fa05 	bl	8004692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002288:	203c      	movs	r0, #60	; 0x3c
 800228a:	f002 fa1e 	bl	80046ca <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2105      	movs	r1, #5
 8002292:	2046      	movs	r0, #70	; 0x46
 8002294:	f002 f9fd 	bl	8004692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	f002 fa16 	bl	80046ca <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	20000b90 	.word	0x20000b90
 80022b0:	40026410 	.word	0x40026410

080022b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <MX_FMC_Init+0xa0>)
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <MX_FMC_Init+0xa4>)
 80022d0:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_FMC_Init+0xa0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_FMC_Init+0xa0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <MX_FMC_Init+0xa0>)
 80022e0:	2204      	movs	r2, #4
 80022e2:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <MX_FMC_Init+0xa0>)
 80022e6:	2210      	movs	r2, #16
 80022e8:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_FMC_Init+0xa0>)
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <MX_FMC_Init+0xa0>)
 80022f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f6:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_FMC_Init+0xa0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_FMC_Init+0xa0>)
 8002300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002304:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <MX_FMC_Init+0xa0>)
 8002308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_FMC_Init+0xa0>)
 8002310:	2200      	movs	r2, #0
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002314:	2302      	movs	r3, #2
 8002316:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002318:	2307      	movs	r3, #7
 800231a:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800231c:	2304      	movs	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002320:	2307      	movs	r3, #7
 8002322:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002324:	2303      	movs	r3, #3
 8002326:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800232c:	2302      	movs	r3, #2
 800232e:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4807      	ldr	r0, [pc, #28]	; (8002354 <MX_FMC_Init+0xa0>)
 8002336:	f008 f9a1 	bl	800a67c <HAL_SDRAM_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002340:	f000 fa4a 	bl	80027d8 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002344:	f240 6003 	movw	r0, #1539	; 0x603
 8002348:	f001 fda0 	bl	8003e8c <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20001348 	.word	0x20001348
 8002358:	a0000140 	.word	0xa0000140

0800235c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b090      	sub	sp, #64	; 0x40
 8002360:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	4baf      	ldr	r3, [pc, #700]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4aae      	ldr	r2, [pc, #696]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4bac      	ldr	r3, [pc, #688]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800238a:	4ba9      	ldr	r3, [pc, #676]	; (8002630 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4aa8      	ldr	r2, [pc, #672]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	4ba3      	ldr	r3, [pc, #652]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4aa2      	ldr	r2, [pc, #648]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4ba0      	ldr	r3, [pc, #640]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023ba:	4b9d      	ldr	r3, [pc, #628]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a9c      	ldr	r2, [pc, #624]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	4b97      	ldr	r3, [pc, #604]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a96      	ldr	r2, [pc, #600]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b94      	ldr	r3, [pc, #592]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b91      	ldr	r3, [pc, #580]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a90      	ldr	r2, [pc, #576]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <MX_GPIO_Init+0x2d4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8002402:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a8a      	ldr	r2, [pc, #552]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800241a:	4b85      	ldr	r3, [pc, #532]	; (8002630 <MX_GPIO_Init+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a84      	ldr	r2, [pc, #528]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b82      	ldr	r3, [pc, #520]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a7e      	ldr	r2, [pc, #504]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b7c      	ldr	r3, [pc, #496]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800244a:	4b79      	ldr	r3, [pc, #484]	; (8002630 <MX_GPIO_Init+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a78      	ldr	r2, [pc, #480]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002450:	f043 0320 	orr.w	r3, r3, #32
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a72      	ldr	r2, [pc, #456]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b70      	ldr	r3, [pc, #448]	; (8002630 <MX_GPIO_Init+0x2d4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	2120      	movs	r1, #32
 800247e:	486d      	ldr	r0, [pc, #436]	; (8002634 <MX_GPIO_Init+0x2d8>)
 8002480:	f003 fa88 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	210e      	movs	r1, #14
 8002488:	486b      	ldr	r0, [pc, #428]	; (8002638 <MX_GPIO_Init+0x2dc>)
 800248a:	f003 fa83 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	2108      	movs	r1, #8
 8002492:	486a      	ldr	r0, [pc, #424]	; (800263c <MX_GPIO_Init+0x2e0>)
 8002494:	f003 fa7e 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249e:	4866      	ldr	r0, [pc, #408]	; (8002638 <MX_GPIO_Init+0x2dc>)
 80024a0:	f003 fa78 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024aa:	4865      	ldr	r0, [pc, #404]	; (8002640 <MX_GPIO_Init+0x2e4>)
 80024ac:	f003 fa72 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	21c8      	movs	r1, #200	; 0xc8
 80024b4:	4863      	ldr	r0, [pc, #396]	; (8002644 <MX_GPIO_Init+0x2e8>)
 80024b6:	f003 fa6d 	bl	8005994 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80024ba:	2308      	movs	r3, #8
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	485e      	ldr	r0, [pc, #376]	; (8002648 <MX_GPIO_Init+0x2ec>)
 80024ce:	f003 f8b5 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80024d2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e4:	230b      	movs	r3, #11
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4855      	ldr	r0, [pc, #340]	; (8002644 <MX_GPIO_Init+0x2e8>)
 80024f0:	f003 f8a4 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80024f4:	f643 4323 	movw	r3, #15395	; 0x3c23
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002506:	230a      	movs	r3, #10
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250e:	4619      	mov	r1, r3
 8002510:	484e      	ldr	r0, [pc, #312]	; (800264c <MX_GPIO_Init+0x2f0>)
 8002512:	f003 f893 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	4849      	ldr	r0, [pc, #292]	; (8002650 <MX_GPIO_Init+0x2f4>)
 800252c:	f003 f886 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002530:	2340      	movs	r3, #64	; 0x40
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <MX_GPIO_Init+0x2f8>)
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002540:	4619      	mov	r1, r3
 8002542:	483c      	ldr	r0, [pc, #240]	; (8002634 <MX_GPIO_Init+0x2d8>)
 8002544:	f003 f87a 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002548:	2320      	movs	r3, #32
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254c:	2301      	movs	r3, #1
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255c:	4619      	mov	r1, r3
 800255e:	4835      	ldr	r0, [pc, #212]	; (8002634 <MX_GPIO_Init+0x2d8>)
 8002560:	f003 f86c 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002564:	f241 030e 	movw	r3, #4110	; 0x100e
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	482e      	ldr	r0, [pc, #184]	; (8002638 <MX_GPIO_Init+0x2dc>)
 800257e:	f003 f85d 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	4830      	ldr	r0, [pc, #192]	; (8002658 <MX_GPIO_Init+0x2fc>)
 8002598:	f003 f850 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800259c:	2308      	movs	r3, #8
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b0:	4619      	mov	r1, r3
 80025b2:	4822      	ldr	r0, [pc, #136]	; (800263c <MX_GPIO_Init+0x2e0>)
 80025b4:	f003 f842 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80025b8:	2310      	movs	r3, #16
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	481a      	ldr	r0, [pc, #104]	; (8002634 <MX_GPIO_Init+0x2d8>)
 80025cc:	f003 f836 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80025d0:	f248 0304 	movw	r3, #32772	; 0x8004
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e2:	4619      	mov	r1, r3
 80025e4:	4816      	ldr	r0, [pc, #88]	; (8002640 <MX_GPIO_Init+0x2e4>)
 80025e6:	f003 f829 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80025ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002600:	4619      	mov	r1, r3
 8002602:	480f      	ldr	r0, [pc, #60]	; (8002640 <MX_GPIO_Init+0x2e4>)
 8002604:	f003 f81a 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260e:	2300      	movs	r3, #0
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	4806      	ldr	r0, [pc, #24]	; (8002638 <MX_GPIO_Init+0x2dc>)
 800261e:	f003 f80d 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_GPIO_Init+0x300>)
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	e017      	b.n	8002660 <MX_GPIO_Init+0x304>
 8002630:	40023800 	.word	0x40023800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40022000 	.word	0x40022000
 800263c:	40022800 	.word	0x40022800
 8002640:	40021c00 	.word	0x40021c00
 8002644:	40021800 	.word	0x40021800
 8002648:	40021000 	.word	0x40021000
 800264c:	40020400 	.word	0x40020400
 8002650:	40022400 	.word	0x40022400
 8002654:	10120000 	.word	0x10120000
 8002658:	40020800 	.word	0x40020800
 800265c:	10110000 	.word	0x10110000
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002666:	4619      	mov	r1, r3
 8002668:	4844      	ldr	r0, [pc, #272]	; (800277c <MX_GPIO_Init+0x420>)
 800266a:	f002 ffe7 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800266e:	2310      	movs	r3, #16
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800267e:	230a      	movs	r3, #10
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002686:	4619      	mov	r1, r3
 8002688:	483d      	ldr	r0, [pc, #244]	; (8002780 <MX_GPIO_Init+0x424>)
 800268a:	f002 ffd7 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800268e:	23c8      	movs	r3, #200	; 0xc8
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002692:	2301      	movs	r3, #1
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a2:	4619      	mov	r1, r3
 80026a4:	4837      	ldr	r0, [pc, #220]	; (8002784 <MX_GPIO_Init+0x428>)
 80026a6:	f002 ffc9 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80026aa:	2305      	movs	r3, #5
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026ba:	230a      	movs	r3, #10
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4830      	ldr	r0, [pc, #192]	; (8002788 <MX_GPIO_Init+0x42c>)
 80026c6:	f002 ffb9 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80026ca:	2332      	movs	r3, #50	; 0x32
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026da:	230b      	movs	r3, #11
 80026dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e2:	4619      	mov	r1, r3
 80026e4:	4828      	ldr	r0, [pc, #160]	; (8002788 <MX_GPIO_Init+0x42c>)
 80026e6:	f002 ffa9 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80026ea:	2304      	movs	r3, #4
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ee:	2300      	movs	r3, #0
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026fa:	4619      	mov	r1, r3
 80026fc:	4821      	ldr	r0, [pc, #132]	; (8002784 <MX_GPIO_Init+0x428>)
 80026fe:	f002 ff9d 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002702:	2386      	movs	r3, #134	; 0x86
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002712:	230b      	movs	r3, #11
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271a:	4619      	mov	r1, r3
 800271c:	481b      	ldr	r0, [pc, #108]	; (800278c <MX_GPIO_Init+0x430>)
 800271e:	f002 ff8d 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002722:	2328      	movs	r3, #40	; 0x28
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002732:	230a      	movs	r3, #10
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273a:	4619      	mov	r1, r3
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <MX_GPIO_Init+0x430>)
 800273e:	f002 ff7d 	bl	800563c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002742:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002754:	2305      	movs	r3, #5
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275c:	4619      	mov	r1, r3
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <MX_GPIO_Init+0x434>)
 8002760:	f002 ff6c 	bl	800563c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2105      	movs	r1, #5
 8002768:	2028      	movs	r0, #40	; 0x28
 800276a:	f001 ff92 	bl	8004692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800276e:	2028      	movs	r0, #40	; 0x28
 8002770:	f001 ffab 	bl	80046ca <HAL_NVIC_EnableIRQ>

}
 8002774:	bf00      	nop
 8002776:	3740      	adds	r7, #64	; 0x40
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40022000 	.word	0x40022000
 8002780:	40021c00 	.word	0x40021c00
 8002784:	40021800 	.word	0x40021800
 8002788:	40020800 	.word	0x40020800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400

08002794 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f00e fb19 	bl	8010dd4 <iprintf>
	printf("\n");
 80027a2:	200a      	movs	r0, #10
 80027a4:	f00e fb2e 	bl	8010e04 <putchar>
	Error_Handler();
 80027a8:	f000 f816 	bl	80027d8 <Error_Handler>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80027c6:	f001 fbeb 	bl	8003fa0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40001000 	.word	0x40001000

080027d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 80027dc:	f001 f900 	bl	80039e0 <LED_Toggle>
		HAL_Delay(100);
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	f001 fbfd 	bl	8003fe0 <HAL_Delay>
		LED_Toggle();
 80027e6:	e7f9      	b.n	80027dc <Error_Handler+0x4>

080027e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a21      	ldr	r2, [pc, #132]	; (800288c <HAL_ADC_MspInit+0xa4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d13c      	bne.n	8002884 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002810:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_ADC_MspInit+0xa8>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002852:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002856:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002858:	2303      	movs	r3, #3
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	480b      	ldr	r0, [pc, #44]	; (8002894 <HAL_ADC_MspInit+0xac>)
 8002868:	f002 fee8 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800286c:	2301      	movs	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2303      	movs	r3, #3
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <HAL_ADC_MspInit+0xb0>)
 8002880:	f002 fedc 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012200 	.word	0x40012200
 8002890:	40023800 	.word	0x40023800
 8002894:	40021400 	.word	0x40021400
 8002898:	40020000 	.word	0x40020000

0800289c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_CRC_MspInit+0x38>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10b      	bne.n	80028c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_CRC_MspInit+0x3c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_CRC_MspInit+0x3c>)
 80028b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_CRC_MspInit+0x3c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023000 	.word	0x40023000
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	; 0x38
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6c      	ldr	r2, [pc, #432]	; (8002aac <HAL_DCMI_MspInit+0x1d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f040 80d2 	bne.w	8002aa4 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002900:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	4a6a      	ldr	r2, [pc, #424]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6353      	str	r3, [r2, #52]	; 0x34
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	623b      	str	r3, [r7, #32]
 8002916:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002918:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002930:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6313      	str	r3, [r2, #48]	; 0x30
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_DCMI_MspInit+0x1d4>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002990:	2360      	movs	r3, #96	; 0x60
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029a0:	230d      	movs	r3, #13
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4842      	ldr	r0, [pc, #264]	; (8002ab4 <HAL_DCMI_MspInit+0x1d8>)
 80029ac:	f002 fe46 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80029b0:	2308      	movs	r3, #8
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029c0:	230d      	movs	r3, #13
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	483b      	ldr	r0, [pc, #236]	; (8002ab8 <HAL_DCMI_MspInit+0x1dc>)
 80029cc:	f002 fe36 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029e2:	230d      	movs	r3, #13
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4833      	ldr	r0, [pc, #204]	; (8002abc <HAL_DCMI_MspInit+0x1e0>)
 80029ee:	f002 fe25 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80029f2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a04:	230d      	movs	r3, #13
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	482c      	ldr	r0, [pc, #176]	; (8002ac0 <HAL_DCMI_MspInit+0x1e4>)
 8002a10:	f002 fe14 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a14:	2350      	movs	r3, #80	; 0x50
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a24:	230d      	movs	r3, #13
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4825      	ldr	r0, [pc, #148]	; (8002ac4 <HAL_DCMI_MspInit+0x1e8>)
 8002a30:	f002 fe04 	bl	800563c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a36:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_DCMI_MspInit+0x1f0>)
 8002a38:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a40:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a42:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a54:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a64:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a7a:	f002 f877 	bl	8004b6c <HAL_DMA_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002a84:	f7ff fea8 	bl	80027d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a8c:	649a      	str	r2, [r3, #72]	; 0x48
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_DCMI_MspInit+0x1ec>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2105      	movs	r1, #5
 8002a98:	204e      	movs	r0, #78	; 0x4e
 8002a9a:	f001 fdfa 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002a9e:	204e      	movs	r0, #78	; 0x4e
 8002aa0:	f001 fe13 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002aa4:	bf00      	nop
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	50050000 	.word	0x50050000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	20000ddc 	.word	0x20000ddc
 8002acc:	40026428 	.word	0x40026428

08002ad0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_DMA2D_MspInit+0x44>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d113      	bne.n	8002b0a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_DMA2D_MspInit+0x48>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_DMA2D_MspInit+0x48>)
 8002ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_DMA2D_MspInit+0x48>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2105      	movs	r1, #5
 8002afe:	205a      	movs	r0, #90	; 0x5a
 8002b00:	f001 fdc7 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002b04:	205a      	movs	r0, #90	; 0x5a
 8002b06:	f001 fde0 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	4002b000 	.word	0x4002b000
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <HAL_I2C_MspInit+0xdc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d129      	bne.n	8002b92 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b5c:	2312      	movs	r3, #18
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	4619      	mov	r1, r3
 8002b72:	4823      	ldr	r0, [pc, #140]	; (8002c00 <HAL_I2C_MspInit+0xe4>)
 8002b74:	f002 fd62 	bl	800563c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b90:	e02d      	b.n	8002bee <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_I2C_MspInit+0xe8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d128      	bne.n	8002bee <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002bb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bba:	2312      	movs	r3, #18
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <HAL_I2C_MspInit+0xec>)
 8002bd2:	f002 fd33 	bl	800563c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_I2C_MspInit+0xe0>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	3730      	adds	r7, #48	; 0x30
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40005c00 	.word	0x40005c00
 8002c08:	40021c00 	.word	0x40021c00

08002c0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a51      	ldr	r2, [pc, #324]	; (8002d70 <HAL_LTDC_MspInit+0x164>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f040 809b 	bne.w	8002d66 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	4a4f      	ldr	r2, [pc, #316]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3c:	4b4d      	ldr	r3, [pc, #308]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c4e:	f043 0310 	orr.w	r3, r3, #16
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c60:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a43      	ldr	r2, [pc, #268]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c78:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	4a3d      	ldr	r2, [pc, #244]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c82:	6313      	str	r3, [r2, #48]	; 0x30
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c90:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_LTDC_MspInit+0x168>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cd0:	230e      	movs	r3, #14
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4827      	ldr	r0, [pc, #156]	; (8002d78 <HAL_LTDC_MspInit+0x16c>)
 8002cdc:	f002 fcae 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002ce0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cf2:	230e      	movs	r3, #14
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481f      	ldr	r0, [pc, #124]	; (8002d7c <HAL_LTDC_MspInit+0x170>)
 8002cfe:	f002 fc9d 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002d02:	23f7      	movs	r3, #247	; 0xf7
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d12:	230e      	movs	r3, #14
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4818      	ldr	r0, [pc, #96]	; (8002d80 <HAL_LTDC_MspInit+0x174>)
 8002d1e:	f002 fc8d 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d34:	2309      	movs	r3, #9
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4811      	ldr	r0, [pc, #68]	; (8002d84 <HAL_LTDC_MspInit+0x178>)
 8002d40:	f002 fc7c 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002d44:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d56:	230e      	movs	r3, #14
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_LTDC_MspInit+0x17c>)
 8002d62:	f002 fc6b 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002d66:	bf00      	nop
 8002d68:	3738      	adds	r7, #56	; 0x38
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40016800 	.word	0x40016800
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40022400 	.word	0x40022400
 8002d80:	40022800 	.word	0x40022800
 8002d84:	40021800 	.word	0x40021800
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <HAL_QSPI_MspInit+0x11c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d178      	bne.n	8002ea0 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	4a3e      	ldr	r2, [pc, #248]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a38      	ldr	r2, [pc, #224]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b30      	ldr	r3, [pc, #192]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_QSPI_MspInit+0x120>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e1e:	2309      	movs	r3, #9
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	4619      	mov	r1, r3
 8002e28:	4821      	ldr	r0, [pc, #132]	; (8002eb0 <HAL_QSPI_MspInit+0x124>)
 8002e2a:	f002 fc07 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002e2e:	2340      	movs	r3, #64	; 0x40
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e3e:	230a      	movs	r3, #10
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 031c 	add.w	r3, r7, #28
 8002e46:	4619      	mov	r1, r3
 8002e48:	481a      	ldr	r0, [pc, #104]	; (8002eb4 <HAL_QSPI_MspInit+0x128>)
 8002e4a:	f002 fbf7 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e5e:	2309      	movs	r3, #9
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	4812      	ldr	r0, [pc, #72]	; (8002eb4 <HAL_QSPI_MspInit+0x128>)
 8002e6a:	f002 fbe7 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e80:	2309      	movs	r3, #9
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <HAL_QSPI_MspInit+0x12c>)
 8002e8c:	f002 fbd6 	bl	800563c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2105      	movs	r1, #5
 8002e94:	205c      	movs	r0, #92	; 0x5c
 8002e96:	f001 fbfc 	bl	8004692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002e9a:	205c      	movs	r0, #92	; 0x5c
 8002e9c:	f001 fc15 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3730      	adds	r7, #48	; 0x30
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	a0001000 	.word	0xa0001000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020c00 	.word	0x40020c00

08002ebc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_RTC_MspInit+0x2c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d105      	bne.n	8002eda <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_RTC_MspInit+0x30>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a06      	ldr	r2, [pc, #24]	; (8002eec <HAL_RTC_MspInit+0x30>)
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40002800 	.word	0x40002800
 8002eec:	40023800 	.word	0x40023800

08002ef0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f10:	d127      	bne.n	8002f62 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_SPDIFRX_MspInit+0x7c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002f52:	2308      	movs	r3, #8
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <HAL_SPDIFRX_MspInit+0x80>)
 8002f5e:	f002 fb6d 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002f62:	bf00      	nop
 8002f64:	3728      	adds	r7, #40	; 0x28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020c00 	.word	0x40020c00

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_TIM_Base_MspInit+0xc8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f9e:	e046      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	e034      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_TIM_Base_MspInit+0xd0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
}
 8002fe6:	e022      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIM_Base_MspInit+0xd4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
}
 800300a:	e010      	b.n	800302e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_TIM_Base_MspInit+0xd8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10b      	bne.n	800302e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40023800 	.word	0x40023800
 8003044:	40000400 	.word	0x40000400
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_TIM_PWM_MspInit+0x38>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10b      	bne.n	800307a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40001800 	.word	0x40001800
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_TIM_MspPostInit+0x178>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11d      	bne.n	80030ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80030ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	484a      	ldr	r0, [pc, #296]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 80030e8:	f002 faa8 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030ec:	e087      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d11d      	bne.n	8003134 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	4a43      	ldr	r2, [pc, #268]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6313      	str	r3, [r2, #48]	; 0x30
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003122:	2301      	movs	r3, #1
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4838      	ldr	r0, [pc, #224]	; (8003210 <HAL_TIM_MspPostInit+0x180>)
 800312e:	f002 fa85 	bl	800563c <HAL_GPIO_Init>
}
 8003132:	e064      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <HAL_TIM_MspPostInit+0x184>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11c      	bne.n	8003178 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003156:	2310      	movs	r3, #16
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003166:	2302      	movs	r3, #2
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4829      	ldr	r0, [pc, #164]	; (8003218 <HAL_TIM_MspPostInit+0x188>)
 8003172:	f002 fa63 	bl	800563c <HAL_GPIO_Init>
}
 8003176:	e042      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_TIM_MspPostInit+0x18c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11c      	bne.n	80031bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031aa:	2302      	movs	r3, #2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	481a      	ldr	r0, [pc, #104]	; (8003220 <HAL_TIM_MspPostInit+0x190>)
 80031b6:	f002 fa41 	bl	800563c <HAL_GPIO_Init>
}
 80031ba:	e020      	b.n	80031fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_TIM_MspPostInit+0x194>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11b      	bne.n	80031fe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_TIM_MspPostInit+0x17c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80031de:	2340      	movs	r3, #64	; 0x40
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80031ee:	2309      	movs	r3, #9
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	480b      	ldr	r0, [pc, #44]	; (8003228 <HAL_TIM_MspPostInit+0x198>)
 80031fa:	f002 fa1f 	bl	800563c <HAL_GPIO_Init>
}
 80031fe:	bf00      	nop
 8003200:	3730      	adds	r7, #48	; 0x30
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40023800 	.word	0x40023800
 8003210:	40020000 	.word	0x40020000
 8003214:	40000400 	.word	0x40000400
 8003218:	40020400 	.word	0x40020400
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40022000 	.word	0x40022000
 8003224:	40001800 	.word	0x40001800
 8003228:	40021c00 	.word	0x40021c00

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_UART_MspInit+0x110>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d145      	bne.n	80032da <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_UART_MspInit+0x114>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_UART_MspInit+0x114>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_UART_MspInit+0x114>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a6:	2307      	movs	r3, #7
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	4824      	ldr	r0, [pc, #144]	; (8003344 <HAL_UART_MspInit+0x118>)
 80032b2:	f002 f9c3 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c8:	2307      	movs	r3, #7
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	481d      	ldr	r0, [pc, #116]	; (8003348 <HAL_UART_MspInit+0x11c>)
 80032d4:	f002 f9b2 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032d8:	e02c      	b.n	8003334 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_UART_MspInit+0x120>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d127      	bne.n	8003334 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032ea:	f043 0320 	orr.w	r3, r3, #32
 80032ee:	6453      	str	r3, [r2, #68]	; 0x44
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_UART_MspInit+0x114>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_UART_MspInit+0x114>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_UART_MspInit+0x114>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003324:	2308      	movs	r3, #8
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	4619      	mov	r1, r3
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <HAL_UART_MspInit+0x124>)
 8003330:	f002 f984 	bl	800563c <HAL_GPIO_Init>
}
 8003334:	bf00      	nop
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40011000 	.word	0x40011000
 8003340:	40023800 	.word	0x40023800
 8003344:	40020400 	.word	0x40020400
 8003348:	40020000 	.word	0x40020000
 800334c:	40011400 	.word	0x40011400
 8003350:	40020800 	.word	0x40020800

08003354 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003368:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_FMC_MspInit+0x10c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d173      	bne.n	8003458 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_FMC_MspInit+0x10c>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_FMC_MspInit+0x110>)
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a3a      	ldr	r2, [pc, #232]	; (8003464 <HAL_FMC_MspInit+0x110>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6393      	str	r3, [r2, #56]	; 0x38
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_FMC_MspInit+0x110>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800338e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003392:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a0:	230c      	movs	r3, #12
 80033a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	482f      	ldr	r0, [pc, #188]	; (8003468 <HAL_FMC_MspInit+0x114>)
 80033aa:	f002 f947 	bl	800563c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80033ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80033b2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c0:	230c      	movs	r3, #12
 80033c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4828      	ldr	r0, [pc, #160]	; (800346c <HAL_FMC_MspInit+0x118>)
 80033ca:	f002 f937 	bl	800563c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80033ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033d2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e0:	230c      	movs	r3, #12
 80033e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4821      	ldr	r0, [pc, #132]	; (8003470 <HAL_FMC_MspInit+0x11c>)
 80033ea:	f002 f927 	bl	800563c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80033ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033f2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003400:	230c      	movs	r3, #12
 8003402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	4619      	mov	r1, r3
 8003408:	481a      	ldr	r0, [pc, #104]	; (8003474 <HAL_FMC_MspInit+0x120>)
 800340a:	f002 f917 	bl	800563c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800340e:	2328      	movs	r3, #40	; 0x28
 8003410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800341e:	230c      	movs	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4814      	ldr	r0, [pc, #80]	; (8003478 <HAL_FMC_MspInit+0x124>)
 8003428:	f002 f908 	bl	800563c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800342c:	2308      	movs	r3, #8
 800342e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800343c:	230c      	movs	r3, #12
 800343e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	480d      	ldr	r0, [pc, #52]	; (800347c <HAL_FMC_MspInit+0x128>)
 8003446:	f002 f8f9 	bl	800563c <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_FMC_MspInit+0x12c>)
 800344c:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <HAL_FMC_MspInit+0x130>)
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_FMC_MspInit+0x130>)
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <HAL_FMC_MspInit+0x12c>)
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
 8003456:	e000      	b.n	800345a <HAL_FMC_MspInit+0x106>
    return;
 8003458:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000095c 	.word	0x2000095c
 8003464:	40023800 	.word	0x40023800
 8003468:	40021000 	.word	0x40021000
 800346c:	40021800 	.word	0x40021800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021400 	.word	0x40021400
 8003478:	40021c00 	.word	0x40021c00
 800347c:	40020800 	.word	0x40020800
 8003480:	20001348 	.word	0x20001348
 8003484:	20000b90 	.word	0x20000b90

08003488 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003490:	f7ff ff60 	bl	8003354 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6f      	ldr	r2, [pc, #444]	; (8003668 <HAL_SAI_MspInit+0x1cc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d175      	bne.n	800359a <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034b6:	4b6e      	ldr	r3, [pc, #440]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	4a6d      	ldr	r2, [pc, #436]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80034bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80034d6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 80034d8:	2310      	movs	r3, #16
 80034da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034e8:	230a      	movs	r3, #10
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4619      	mov	r1, r3
 80034f2:	4860      	ldr	r0, [pc, #384]	; (8003674 <HAL_SAI_MspInit+0x1d8>)
 80034f4:	f002 f8a2 	bl	800563c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034f8:	23e0      	movs	r3, #224	; 0xe0
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003504:	2302      	movs	r3, #2
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003508:	230a      	movs	r3, #10
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	4858      	ldr	r0, [pc, #352]	; (8003674 <HAL_SAI_MspInit+0x1d8>)
 8003514:	f002 f892 	bl	800563c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003518:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800351a:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_SAI_MspInit+0x1e0>)
 800351c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003520:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003524:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003532:	4b51      	ldr	r3, [pc, #324]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003538:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800353a:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800353c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003540:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003548:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800354c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003550:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003554:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003558:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800355c:	2204      	movs	r2, #4
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003560:	4b45      	ldr	r3, [pc, #276]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003562:	2203      	movs	r2, #3
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003566:	4b44      	ldr	r3, [pc, #272]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003568:	2200      	movs	r2, #0
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003572:	4841      	ldr	r0, [pc, #260]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003574:	f001 fafa 	bl	8004b6c <HAL_DMA_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 800357e:	f7ff f92b 	bl	80027d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003586:	671a      	str	r2, [r3, #112]	; 0x70
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a39      	ldr	r2, [pc, #228]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003592:	66da      	str	r2, [r3, #108]	; 0x6c
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_SAI_MspInit+0x1dc>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a38      	ldr	r2, [pc, #224]	; (8003680 <HAL_SAI_MspInit+0x1e4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d15c      	bne.n	800365e <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80035a4:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035ac:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80035b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b6:	6453      	str	r3, [r2, #68]	; 0x44
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_SAI_MspInit+0x1d4>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a28      	ldr	r2, [pc, #160]	; (800366c <HAL_SAI_MspInit+0x1d0>)
 80035cc:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035dc:	2302      	movs	r3, #2
 80035de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035e0:	230a      	movs	r3, #10
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	4619      	mov	r1, r3
 80035ea:	4826      	ldr	r0, [pc, #152]	; (8003684 <HAL_SAI_MspInit+0x1e8>)
 80035ec:	f002 f826 	bl	800563c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 80035f2:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_SAI_MspInit+0x1f0>)
 80035f4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fc:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800360a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003616:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800361a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800361e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003626:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800362a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800362e:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003636:	4814      	ldr	r0, [pc, #80]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003638:	f001 fa98 	bl	8004b6c <HAL_DMA_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003642:	f7ff f8c9 	bl	80027d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800364a:	671a      	str	r2, [r3, #112]	; 0x70
 800364c:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 8003656:	66da      	str	r2, [r3, #108]	; 0x6c
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <HAL_SAI_MspInit+0x1ec>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40015c04 	.word	0x40015c04
 800366c:	20000960 	.word	0x20000960
 8003670:	40023800 	.word	0x40023800
 8003674:	40022000 	.word	0x40022000
 8003678:	2000118c 	.word	0x2000118c
 800367c:	40026470 	.word	0x40026470
 8003680:	40015c24 	.word	0x40015c24
 8003684:	40021800 	.word	0x40021800
 8003688:	20000c3c 	.word	0x20000c3c
 800368c:	400264b8 	.word	0x400264b8

08003690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2036      	movs	r0, #54	; 0x36
 80036a6:	f000 fff4 	bl	8004692 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036aa:	2036      	movs	r0, #54	; 0x36
 80036ac:	f001 f80d 	bl	80046ca <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_InitTick+0xa0>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_InitTick+0xa0>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6413      	str	r3, [r2, #64]	; 0x40
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_InitTick+0xa0>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036c8:	f107 0210 	add.w	r2, r7, #16
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f005 fcde 	bl	8009094 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036d8:	f005 fcb4 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 80036dc:	4603      	mov	r3, r0
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <HAL_InitTick+0xa4>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	3b01      	subs	r3, #1
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_InitTick+0xa8>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_InitTick+0xac>)
 80036f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_InitTick+0xa8>)
 80036f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036fe:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <HAL_InitTick+0xa8>)
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <HAL_InitTick+0xa8>)
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_InitTick+0xa8>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <HAL_InitTick+0xa8>)
 8003712:	f007 f88f 	bl	800a834 <HAL_TIM_Base_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800371c:	4806      	ldr	r0, [pc, #24]	; (8003738 <HAL_InitTick+0xa8>)
 800371e:	f007 f8e1 	bl	800a8e4 <HAL_TIM_Base_Start_IT>
 8003722:	4603      	mov	r3, r0
 8003724:	e000      	b.n	8003728 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3730      	adds	r7, #48	; 0x30
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	431bde83 	.word	0x431bde83
 8003738:	200013c8 	.word	0x200013c8
 800373c:	40001000 	.word	0x40001000

08003740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <NMI_Handler+0x4>

08003746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374a:	e7fe      	b.n	800374a <HardFault_Handler+0x4>

0800374c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003750:	e7fe      	b.n	8003750 <MemManage_Handler+0x4>

08003752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003756:	e7fe      	b.n	8003756 <BusFault_Handler+0x4>

08003758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800375c:	e7fe      	b.n	800375c <UsageFault_Handler+0x4>

0800375e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003770:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003774:	f002 f942 	bl	80059fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <TIM6_DAC_IRQHandler+0x10>)
 8003782:	f007 f97e 	bl	800aa82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200013c8 	.word	0x200013c8

08003790 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA2_Stream0_IRQHandler+0x10>)
 8003796:	f001 fb29 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000b90 	.word	0x20000b90

080037a4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <DMA2_Stream1_IRQHandler+0x10>)
 80037aa:	f001 fb1f 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000ddc 	.word	0x20000ddc

080037b8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <DMA2_Stream4_IRQHandler+0x10>)
 80037be:	f001 fb15 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000118c 	.word	0x2000118c

080037cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <OTG_FS_IRQHandler+0x10>)
 80037d2:	f002 f936 	bl	8005a42 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20041018 	.word	0x20041018

080037e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <DMA2_Stream7_IRQHandler+0x10>)
 80037e6:	f001 fb01 	bl	8004dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000c3c 	.word	0x20000c3c

080037f4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80037f8:	4802      	ldr	r0, [pc, #8]	; (8003804 <DCMI_IRQHandler+0x10>)
 80037fa:	f001 f8e7 	bl	80049cc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000104c 	.word	0x2000104c

08003808 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <DMA2D_IRQHandler+0x10>)
 800380e:	f001 fd73 	bl	80052f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20001270 	.word	0x20001270

0800381c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <QUADSPI_IRQHandler+0x10>)
 8003822:	f004 f875 	bl	8007910 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2000137c 	.word	0x2000137c

08003830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
	return 1;
 8003834:	2301      	movs	r3, #1
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_kill>:

int _kill(int pid, int sig)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800384a:	f00c fd67 	bl	801031c <__errno>
 800384e:	4603      	mov	r3, r0
 8003850:	2216      	movs	r2, #22
 8003852:	601a      	str	r2, [r3, #0]
	return -1;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_exit>:

void _exit (int status)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ffe7 	bl	8003840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003872:	e7fe      	b.n	8003872 <_exit+0x12>

08003874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e00a      	b.n	800389c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003886:	f3af 8000 	nop.w
 800388a:	4601      	mov	r1, r0
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	60ba      	str	r2, [r7, #8]
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbf0      	blt.n	8003886 <_read+0x12>
	}

return len;
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e009      	b.n	80038d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	60ba      	str	r2, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f893 	bl	80039f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3301      	adds	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	dbf1      	blt.n	80038c0 <_write+0x12>
	}
	return len;
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_close>:

int _close(int file)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	return -1;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800390e:	605a      	str	r2, [r3, #4]
	return 0;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_isatty>:

int _isatty(int file)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	return 1;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
	return 0;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003958:	4a14      	ldr	r2, [pc, #80]	; (80039ac <_sbrk+0x5c>)
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <_sbrk+0x60>)
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003964:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <_sbrk+0x64>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <_sbrk+0x64>)
 800396e:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <_sbrk+0x68>)
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <_sbrk+0x64>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d207      	bcs.n	8003990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003980:	f00c fccc 	bl	801031c <__errno>
 8003984:	4603      	mov	r3, r0
 8003986:	220c      	movs	r2, #12
 8003988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800398e:	e009      	b.n	80039a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <_sbrk+0x64>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <_sbrk+0x64>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <_sbrk+0x64>)
 80039a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20050000 	.word	0x20050000
 80039b0:	00000800 	.word	0x00000800
 80039b4:	20000964 	.word	0x20000964
 80039b8:	20041330 	.word	0x20041330

080039bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <SystemInit+0x20>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <SystemInit+0x20>)
 80039c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80039e4:	2102      	movs	r1, #2
 80039e6:	4802      	ldr	r0, [pc, #8]	; (80039f0 <LED_Toggle+0x10>)
 80039e8:	f001 ffed 	bl	80059c6 <HAL_GPIO_TogglePin>

}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40022000 	.word	0x40022000

080039f4 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80039fc:	1d39      	adds	r1, r7, #4
 80039fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a02:	2201      	movs	r2, #1
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <__io_putchar+0x20>)
 8003a06:	f008 f869 	bl	800badc <HAL_UART_Transmit>
	return ch;
 8003a0a:	687b      	ldr	r3, [r7, #4]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000109c 	.word	0x2000109c

08003a18 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <LCD_Init+0x44>)
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d002      	beq.n	8003a2a <LCD_Init+0x12>
 8003a24:	480e      	ldr	r0, [pc, #56]	; (8003a60 <LCD_Init+0x48>)
 8003a26:	f7fe feb5 	bl	8002794 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <LCD_Init+0x4c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	480a      	ldr	r0, [pc, #40]	; (8003a5c <LCD_Init+0x44>)
 8003a34:	f003 fcc0 	bl	80073b8 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003a38:	f000 f81a 	bl	8003a70 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003a3c:	480a      	ldr	r0, [pc, #40]	; (8003a68 <LCD_Init+0x50>)
 8003a3e:	f000 f87d 	bl	8003b3c <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a46:	f000 f861 	bl	8003b0c <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003a4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003a4e:	f000 f82d 	bl	8003aac <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <LCD_Init+0x54>)
 8003a54:	f000 f842 	bl	8003adc <LCD_SetFillColor>


}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000f5c 	.word	0x20000f5c
 8003a60:	08013820 	.word	0x08013820
 8003a64:	20000004 	.word	0x20000004
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	ffff0000 	.word	0xffff0000

08003a70 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <LCD_DisplayOn+0x30>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <LCD_DisplayOn+0x30>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003a84:	2201      	movs	r2, #1
 8003a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a8a:	4806      	ldr	r0, [pc, #24]	; (8003aa4 <LCD_DisplayOn+0x34>)
 8003a8c:	f001 ff82 	bl	8005994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003a90:	2201      	movs	r2, #1
 8003a92:	2108      	movs	r1, #8
 8003a94:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <LCD_DisplayOn+0x38>)
 8003a96:	f001 ff7d 	bl	8005994 <HAL_GPIO_WritePin>
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000f5c 	.word	0x20000f5c
 8003aa4:	40022000 	.word	0x40022000
 8003aa8:	40022800 	.word	0x40022800

08003aac <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <LCD_SetStrokeColor+0x28>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <LCD_SetStrokeColor+0x28>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f84c 	bl	8003b5c <ARGB888ToRGB565>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <LCD_SetStrokeColor+0x2c>)
 8003aca:	601a      	str	r2, [r3, #0]
#endif
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000968 	.word	0x20000968
 8003ad8:	20000974 	.word	0x20000974

08003adc <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8003ae4:	4a07      	ldr	r2, [pc, #28]	; (8003b04 <LCD_SetFillColor+0x28>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <LCD_SetFillColor+0x28>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f834 	bl	8003b5c <ARGB888ToRGB565>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <LCD_SetFillColor+0x2c>)
 8003afa:	601a      	str	r2, [r3, #0]
#endif
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	2000096c 	.word	0x2000096c
 8003b08:	20000978 	.word	0x20000978

08003b0c <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8003b14:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <LCD_SetBackColor+0x28>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <LCD_SetBackColor+0x28>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f81c 	bl	8003b5c <ARGB888ToRGB565>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <LCD_SetBackColor+0x2c>)
 8003b2a:	601a      	str	r2, [r3, #0]
#endif
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000970 	.word	0x20000970
 8003b38:	2000097c 	.word	0x2000097c

08003b3c <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <LCD_SetFont+0x1c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000980 	.word	0x20000980

08003b5c <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8003b74:	7d7b      	ldrb	r3, [r7, #21]
 8003b76:	08db      	lsrs	r3, r3, #3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8003b82:	7dbb      	ldrb	r3, [r7, #22]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003b90:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	02db      	lsls	r3, r3, #11
 8003b9a:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8003b9c:	89fa      	ldrh	r2, [r7, #14]
 8003b9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	8a7b      	ldrh	r3, [r7, #18]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	b29b      	uxth	r3, r3
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b090      	sub	sp, #64	; 0x40
 8003bbc:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003bc4:	23eb      	movs	r3, #235	; 0xeb
 8003bc6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003bc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003bd8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003bde:	230a      	movs	r3, #10
 8003be0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003be6:	2300      	movs	r3, #0
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003bf6:	463a      	mov	r2, r7
 8003bf8:	f107 0308 	add.w	r3, r7, #8
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8003c00:	f004 fa54 	bl	80080ac <HAL_QSPI_MemoryMapped>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3740      	adds	r7, #64	; 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	2000137c 	.word	0x2000137c

08003c1c <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b090      	sub	sp, #64	; 0x40
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c28:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003c2a:	2366      	movs	r3, #102	; 0x66
 8003c2c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c42:	2300      	movs	r3, #0
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c46:	2300      	movs	r3, #0
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f004 f81b 	bl	8007c90 <HAL_QSPI_Command>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e019      	b.n	8003c98 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8003c64:	2399      	movs	r3, #153	; 0x99
 8003c66:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c68:	f107 0308 	add.w	r3, r7, #8
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f004 f80c 	bl	8007c90 <HAL_QSPI_Command>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00a      	b.n	8003c98 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c82:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8c7 	bl	8003e1a <QSPI_AutoPollingMemReady>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3740      	adds	r7, #64	; 0x40
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b094      	sub	sp, #80	; 0x50
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003cae:	2385      	movs	r3, #133	; 0x85
 8003cb0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f003 ffd6 	bl	8007c90 <HAL_QSPI_Command>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e048      	b.n	8003d80 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cee:	f107 030f 	add.w	r3, r7, #15
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f004 f8be 	bl	8007e7a <HAL_QSPI_Receive>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e03b      	b.n	8003d80 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f83d 	bl	8003d88 <QSPI_WriteEnable>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e033      	b.n	8003d80 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003d18:	2381      	movs	r3, #129	; 0x81
 8003d1a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	b25b      	sxtb	r3, r3
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	b25a      	sxtb	r2, r3
 8003d26:	23f0      	movs	r3, #240	; 0xf0
 8003d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	408b      	lsls	r3, r1
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f003 ff9b 	bl	8007c90 <HAL_QSPI_Command>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00d      	b.n	8003d80 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d64:	f107 030f 	add.w	r3, r7, #15
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f003 ffec 	bl	8007d4c <HAL_QSPI_Transmit>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3750      	adds	r7, #80	; 0x50
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b096      	sub	sp, #88	; 0x58
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d96:	2306      	movs	r3, #6
 8003d98:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003dae:	2300      	movs	r3, #0
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003db2:	2300      	movs	r3, #0
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003db6:	f107 0320 	add.w	r3, r7, #32
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f003 ff65 	bl	8007c90 <HAL_QSPI_Command>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e020      	b.n	8003e12 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003de0:	2310      	movs	r3, #16
 8003de2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003de4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003de8:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003dea:	2305      	movs	r3, #5
 8003dec:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003df4:	f107 0208 	add.w	r2, r7, #8
 8003df8:	f107 0120 	add.w	r1, r7, #32
 8003dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f004 f8dc 	bl	8007fbe <HAL_QSPI_AutoPolling>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3758      	adds	r7, #88	; 0x58
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b096      	sub	sp, #88	; 0x58
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e2a:	2305      	movs	r3, #5
 8003e2c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e3a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e44:	2300      	movs	r3, #0
 8003e46:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003e50:	2301      	movs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003e60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e64:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003e66:	f107 0208 	add.w	r2, r7, #8
 8003e6a:	f107 0120 	add.w	r1, r7, #32
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f004 f8a4 	bl	8007fbe <HAL_QSPI_AutoPolling>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3758      	adds	r7, #88	; 0x58
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb4:	4923      	ldr	r1, [pc, #140]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003eb6:	4824      	ldr	r0, [pc, #144]	; (8003f48 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003eb8:	f006 fc14 	bl	800a6e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f000 f88f 	bl	8003fe0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003ec2:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003eca:	2210      	movs	r2, #16
 8003ecc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ede:	4919      	ldr	r1, [pc, #100]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ee0:	4819      	ldr	r0, [pc, #100]	; (8003f48 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003ee2:	f006 fbff 	bl	800a6e4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ee8:	2203      	movs	r2, #3
 8003eea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003eee:	2210      	movs	r2, #16
 8003ef0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f02:	4910      	ldr	r1, [pc, #64]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f04:	4810      	ldr	r0, [pc, #64]	; (8003f48 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f06:	f006 fbed 	bl	800a6e4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003f0a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003f0e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f12:	2204      	movs	r2, #4
 8003f14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f18:	2210      	movs	r2, #16
 8003f1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a07      	ldr	r2, [pc, #28]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f26:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2c:	4905      	ldr	r1, [pc, #20]	; (8003f44 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f30:	f006 fbd8 	bl	800a6e4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4804      	ldr	r0, [pc, #16]	; (8003f48 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003f38:	f006 fbff 	bl	800a73a <HAL_SDRAM_ProgramRefreshRate>
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000984 	.word	0x20000984
 8003f48:	20001348 	.word	0x20001348

08003f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f50:	480d      	ldr	r0, [pc, #52]	; (8003f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f52:	490e      	ldr	r1, [pc, #56]	; (8003f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f54:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f58:	e002      	b.n	8003f60 <LoopCopyDataInit>

08003f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5e:	3304      	adds	r3, #4

08003f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f64:	d3f9      	bcc.n	8003f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f66:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f68:	4c0b      	ldr	r4, [pc, #44]	; (8003f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f6c:	e001      	b.n	8003f72 <LoopFillZerobss>

08003f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f70:	3204      	adds	r2, #4

08003f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f74:	d3fb      	bcc.n	8003f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f76:	f7ff fd21 	bl	80039bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f7a:	f00c f9d5 	bl	8010328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f7e:	f7fd f80b 	bl	8000f98 <main>
  bx  lr    
 8003f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f8c:	20000940 	.word	0x20000940
  ldr r2, =_sidata
 8003f90:	08018858 	.word	0x08018858
  ldr r2, =_sbss
 8003f94:	20000940 	.word	0x20000940
  ldr r4, =_ebss
 8003f98:	2004132c 	.word	0x2004132c

08003f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f9c:	e7fe      	b.n	8003f9c <ADC_IRQHandler>
	...

08003fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_IncTick+0x20>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_IncTick+0x24>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_IncTick+0x24>)
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000014 	.word	0x20000014
 8003fc4:	20041014 	.word	0x20041014

08003fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return uwTick;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <HAL_GetTick+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20041014 	.word	0x20041014

08003fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff ffee 	bl	8003fc8 <HAL_GetTick>
 8003fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff8:	d005      	beq.n	8004006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_Delay+0x44>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004006:	bf00      	nop
 8004008:	f7ff ffde 	bl	8003fc8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d8f7      	bhi.n	8004008 <HAL_Delay+0x28>
  {
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000014 	.word	0x20000014

08004028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e031      	b.n	80040a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe fbce 	bl	80027e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_ADC_Init+0x84>)
 800406c:	4013      	ands	r3, r2
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f964 	bl	8004344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	f043 0201 	orr.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
 8004092:	e001      	b.n	8004098 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	ffffeefd 	.word	0xffffeefd

080040b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e12a      	b.n	8004322 <HAL_ADC_ConfigChannel+0x272>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d93a      	bls.n	8004152 <HAL_ADC_ConfigChannel+0xa2>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e4:	d035      	beq.n	8004152 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	3b1e      	subs	r3, #30
 80040fc:	2207      	movs	r2, #7
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	400a      	ands	r2, r1
 800410a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a87      	ldr	r2, [pc, #540]	; (8004330 <HAL_ADC_ConfigChannel+0x280>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800412a:	e035      	b.n	8004198 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68d9      	ldr	r1, [r3, #12]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	4603      	mov	r3, r0
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4403      	add	r3, r0
 8004144:	3b1e      	subs	r3, #30
 8004146:	409a      	lsls	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004150:	e022      	b.n	8004198 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6919      	ldr	r1, [r3, #16]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	4613      	mov	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	2207      	movs	r2, #7
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43da      	mvns	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	400a      	ands	r2, r1
 8004174:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6919      	ldr	r1, [r3, #16]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	4618      	mov	r0, r3
 8004188:	4603      	mov	r3, r0
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4403      	add	r3, r0
 800418e:	409a      	lsls	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b06      	cmp	r3, #6
 800419e:	d824      	bhi.n	80041ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b05      	subs	r3, #5
 80041b2:	221f      	movs	r2, #31
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43da      	mvns	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	400a      	ands	r2, r1
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b05      	subs	r3, #5
 80041dc:	fa00 f203 	lsl.w	r2, r0, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	635a      	str	r2, [r3, #52]	; 0x34
 80041e8:	e04c      	b.n	8004284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d824      	bhi.n	800423c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b23      	subs	r3, #35	; 0x23
 8004204:	221f      	movs	r2, #31
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	400a      	ands	r2, r1
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4618      	mov	r0, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	3b23      	subs	r3, #35	; 0x23
 800422e:	fa00 f203 	lsl.w	r2, r0, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
 800423a:	e023      	b.n	8004284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	3b41      	subs	r3, #65	; 0x41
 800424e:	221f      	movs	r2, #31
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43da      	mvns	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	400a      	ands	r2, r1
 800425c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	4618      	mov	r0, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3b41      	subs	r3, #65	; 0x41
 8004278:	fa00 f203 	lsl.w	r2, r0, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_ADC_ConfigChannel+0x284>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10a      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1f4>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004296:	d105      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 800429e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80042a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <HAL_ADC_ConfigChannel+0x284>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d109      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x212>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d105      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 80042bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_ADC_ConfigChannel+0x284>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d125      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x268>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_ADC_ConfigChannel+0x280>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <HAL_ADC_ConfigChannel+0x22e>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b11      	cmp	r3, #17
 80042dc:	d11c      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_ADC_ConfigChannel+0x288>)
 80042e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_ADC_ConfigChannel+0x280>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d111      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_ADC_ConfigChannel+0x28c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a11      	ldr	r2, [pc, #68]	; (8004340 <HAL_ADC_ConfigChannel+0x290>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0c9a      	lsrs	r2, r3, #18
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800430a:	e002      	b.n	8004312 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	10000012 	.word	0x10000012
 8004334:	40012000 	.word	0x40012000
 8004338:	40012300 	.word	0x40012300
 800433c:	20000000 	.word	0x20000000
 8004340:	431bde83 	.word	0x431bde83

08004344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800434c:	4b78      	ldr	r3, [pc, #480]	; (8004530 <ADC_Init+0x1ec>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4a77      	ldr	r2, [pc, #476]	; (8004530 <ADC_Init+0x1ec>)
 8004352:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004356:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004358:	4b75      	ldr	r3, [pc, #468]	; (8004530 <ADC_Init+0x1ec>)
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4973      	ldr	r1, [pc, #460]	; (8004530 <ADC_Init+0x1ec>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	4a58      	ldr	r2, [pc, #352]	; (8004534 <ADC_Init+0x1f0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	e00f      	b.n	800443e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800442c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800443c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0202 	bic.w	r2, r2, #2
 800444c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	005a      	lsls	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800448a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	3b01      	subs	r3, #1
 8004498:	035a      	lsls	r2, r3, #13
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e007      	b.n	80044b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	051a      	lsls	r2, r3, #20
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044f6:	025a      	lsls	r2, r3, #9
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	029a      	lsls	r2, r3, #10
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40012300 	.word	0x40012300
 8004534:	0f000001 	.word	0x0f000001

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db12      	blt.n	80045c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	490a      	ldr	r1, [pc, #40]	; (80045d4 <__NVIC_DisableIRQ+0x44>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2001      	movs	r0, #1
 80045b2:	fa00 f202 	lsl.w	r2, r0, r2
 80045b6:	3320      	adds	r3, #32
 80045b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80045bc:	f3bf 8f4f 	dsb	sy
}
 80045c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045c2:	f3bf 8f6f 	isb	sy
}
 80045c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100

080045d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	; (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf28      	it	cs
 800464a:	2304      	movcs	r3, #4
 800464c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3304      	adds	r3, #4
 8004652:	2b06      	cmp	r3, #6
 8004654:	d902      	bls.n	800465c <NVIC_EncodePriority+0x30>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3b03      	subs	r3, #3
 800465a:	e000      	b.n	800465e <NVIC_EncodePriority+0x32>
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	401a      	ands	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004674:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43d9      	mvns	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	4313      	orrs	r3, r2
         );
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a4:	f7ff ff48 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff ffbc 	bl	800462c <NVIC_EncodePriority>
 80046b4:	4602      	mov	r2, r0
 80046b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff8b 	bl	80045d8 <__NVIC_SetPriority>
}
 80046c2:	bf00      	nop
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff3b 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff4b 	bl	8004590 <__NVIC_DisableIRQ>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e054      	b.n	80047c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7f5b      	ldrb	r3, [r3, #29]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe f8b8 	bl	800289c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10c      	bne.n	8004754 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_CRC_Init+0xc4>)
 8004740:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0218 	bic.w	r2, r2, #24
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e00c      	b.n	800476e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6899      	ldr	r1, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	461a      	mov	r2, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f834 	bl	80047cc <HAL_CRCEx_Polynomial_Set>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e028      	b.n	80047c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	795b      	ldrb	r3, [r3, #5]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800477e:	611a      	str	r2, [r3, #16]
 8004780:	e004      	b.n	800478c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6912      	ldr	r2, [r2, #16]
 800478a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	04c11db7 	.word	0x04c11db7

080047cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047dc:	231f      	movs	r3, #31
 80047de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047e0:	bf00      	nop
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	613a      	str	r2, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_CRCEx_Polynomial_Set+0x34>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_CRCEx_Polynomial_Set+0x16>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b18      	cmp	r3, #24
 8004804:	d846      	bhi.n	8004894 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	0800489b 	.word	0x0800489b
 8004810:	08004895 	.word	0x08004895
 8004814:	08004895 	.word	0x08004895
 8004818:	08004895 	.word	0x08004895
 800481c:	08004895 	.word	0x08004895
 8004820:	08004895 	.word	0x08004895
 8004824:	08004895 	.word	0x08004895
 8004828:	08004895 	.word	0x08004895
 800482c:	08004889 	.word	0x08004889
 8004830:	08004895 	.word	0x08004895
 8004834:	08004895 	.word	0x08004895
 8004838:	08004895 	.word	0x08004895
 800483c:	08004895 	.word	0x08004895
 8004840:	08004895 	.word	0x08004895
 8004844:	08004895 	.word	0x08004895
 8004848:	08004895 	.word	0x08004895
 800484c:	0800487d 	.word	0x0800487d
 8004850:	08004895 	.word	0x08004895
 8004854:	08004895 	.word	0x08004895
 8004858:	08004895 	.word	0x08004895
 800485c:	08004895 	.word	0x08004895
 8004860:	08004895 	.word	0x08004895
 8004864:	08004895 	.word	0x08004895
 8004868:	08004895 	.word	0x08004895
 800486c:	08004871 	.word	0x08004871
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d913      	bls.n	800489e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800487a:	e010      	b.n	800489e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b07      	cmp	r3, #7
 8004880:	d90f      	bls.n	80048a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004886:	e00c      	b.n	80048a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d90b      	bls.n	80048a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004892:	e008      	b.n	80048a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
      break;
 8004898:	e006      	b.n	80048a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 0118 	bic.w	r1, r3, #24
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e069      	b.n	80049be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fff0 	bl	80028dc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_DCMI_Init+0xf0>)
 800491e:	400b      	ands	r3, r1
 8004920:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004936:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004942:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800494e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800495a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004966:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d112      	bne.n	800499e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7f1b      	ldrb	r3, [r3, #28]
 800497c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7f5b      	ldrb	r3, [r3, #29]
 8004982:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004984:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7f9b      	ldrb	r3, [r3, #30]
 800498a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800498c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7fdb      	ldrb	r3, [r3, #31]
 8004994:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800499a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800499c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 021e 	orr.w	r2, r2, #30
 80049ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	ffe0f007 	.word	0xffe0f007

080049cc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2204      	movs	r2, #4
 80049ec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	f043 0202 	orr.w	r2, r3, #2
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	4a35      	ldr	r2, [pc, #212]	; (8004adc <HAL_DCMI_IRQHandler+0x110>)
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f9ca 	bl	8004da8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01e      	beq.n	8004a5c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3e:	4a27      	ldr	r2, [pc, #156]	; (8004adc <HAL_DCMI_IRQHandler+0x110>)
 8004a40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f9ae 	bl	8004da8 <HAL_DMA_Abort_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f86a 	bl	8004b30 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f840 	bl	8004af4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2208      	movs	r2, #8
 8004a84:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f83e 	bl	8004b08 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01d      	beq.n	8004ad2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 021e 	bic.w	r2, r2, #30
 8004ab2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f825 	bl	8004b1c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	08004b31 	.word	0x08004b31

08004ae0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d009      	beq.n	8004b5c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff ffbf 	bl	8004ae0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b78:	f7ff fa26 	bl	8003fc8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e099      	b.n	8004cbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba8:	e00f      	b.n	8004bca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004baa:	f7ff fa0d 	bl	8003fc8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d908      	bls.n	8004bca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e078      	b.n	8004cbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e8      	bne.n	8004baa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <HAL_DMA_Init+0x158>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d107      	bne.n	8004c34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d117      	bne.n	8004c8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa7b 	bl	800516c <DMA_CheckFifoParam>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e016      	b.n	8004cbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa32 	bl	8005100 <DMA_CalcBaseAndBitshift>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	223f      	movs	r2, #63	; 0x3f
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	f010803f 	.word	0xf010803f

08004cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cd6:	f7ff f977 	bl	8003fc8 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d008      	beq.n	8004cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e052      	b.n	8004da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0216 	bic.w	r2, r2, #22
 8004d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_DMA_Abort+0x62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0208 	bic.w	r2, r2, #8
 8004d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4a:	e013      	b.n	8004d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d4c:	f7ff f93c 	bl	8003fc8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d90c      	bls.n	8004d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e015      	b.n	8004da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e4      	bne.n	8004d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	223f      	movs	r2, #63	; 0x3f
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d004      	beq.n	8004dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e00c      	b.n	8004de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2205      	movs	r2, #5
 8004dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004df8:	4b92      	ldr	r3, [pc, #584]	; (8005044 <HAL_DMA_IRQHandler+0x258>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a92      	ldr	r2, [pc, #584]	; (8005048 <HAL_DMA_IRQHandler+0x25c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	2208      	movs	r2, #8
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	2208      	movs	r2, #8
 8004e46:	409a      	lsls	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	2204      	movs	r2, #4
 8004e94:	409a      	lsls	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2210      	movs	r2, #16
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d043      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03c      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d018      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d024      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e01f      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01b      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4798      	blx	r3
 8004f2c:	e016      	b.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0208 	bic.w	r2, r2, #8
 8004f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	2220      	movs	r2, #32
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 808e 	beq.w	800508a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8086 	beq.w	800508a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	2220      	movs	r2, #32
 8004f84:	409a      	lsls	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d136      	bne.n	8005004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0216 	bic.w	r2, r2, #22
 8004fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_DMA_IRQHandler+0x1da>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	223f      	movs	r2, #63	; 0x3f
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d07d      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
        }
        return;
 8005002:	e078      	b.n	80050f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01c      	beq.n	800504c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d108      	bne.n	8005032 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	2b00      	cmp	r3, #0
 8005026:	d030      	beq.n	800508a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
 8005030:	e02b      	b.n	800508a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d027      	beq.n	800508a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
 8005042:	e022      	b.n	800508a <HAL_DMA_IRQHandler+0x29e>
 8005044:	20000000 	.word	0x20000000
 8005048:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0210 	bic.w	r2, r2, #16
 8005068:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	2b00      	cmp	r3, #0
 8005090:	d032      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d022      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2205      	movs	r2, #5
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d307      	bcc.n	80050d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f2      	bne.n	80050b6 <HAL_DMA_IRQHandler+0x2ca>
 80050d0:	e000      	b.n	80050d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80050d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
 80050f4:	e000      	b.n	80050f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050f6:	bf00      	nop
    }
  }
}
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	3b10      	subs	r3, #16
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <DMA_CalcBaseAndBitshift+0x60>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <DMA_CalcBaseAndBitshift+0x64>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d908      	bls.n	8005140 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <DMA_CalcBaseAndBitshift+0x68>)
 8005136:	4013      	ands	r3, r2
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58
 800513e:	e006      	b.n	800514e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <DMA_CalcBaseAndBitshift+0x68>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	aaaaaaab 	.word	0xaaaaaaab
 8005164:	08015344 	.word	0x08015344
 8005168:	fffffc00 	.word	0xfffffc00

0800516c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d11f      	bne.n	80051c6 <DMA_CheckFifoParam+0x5a>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d856      	bhi.n	800523a <DMA_CheckFifoParam+0xce>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <DMA_CheckFifoParam+0x28>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051b7 	.word	0x080051b7
 800519c:	080051a5 	.word	0x080051a5
 80051a0:	0800523b 	.word	0x0800523b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d046      	beq.n	800523e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b4:	e043      	b.n	800523e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051be:	d140      	bne.n	8005242 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c4:	e03d      	b.n	8005242 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ce:	d121      	bne.n	8005214 <DMA_CheckFifoParam+0xa8>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d837      	bhi.n	8005246 <DMA_CheckFifoParam+0xda>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <DMA_CheckFifoParam+0x70>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051f3 	.word	0x080051f3
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005205 	.word	0x08005205
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e030      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d025      	beq.n	800524a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005202:	e022      	b.n	800524a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800520c:	d11f      	bne.n	800524e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005212:	e01c      	b.n	800524e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d903      	bls.n	8005222 <DMA_CheckFifoParam+0xb6>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d003      	beq.n	8005228 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005220:	e018      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
      break;
 8005226:	e015      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e00b      	b.n	8005252 <DMA_CheckFifoParam+0xe6>
      break;
 800523a:	bf00      	nop
 800523c:	e00a      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;
 800523e:	bf00      	nop
 8005240:	e008      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;
 8005242:	bf00      	nop
 8005244:	e006      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;
 8005246:	bf00      	nop
 8005248:	e004      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;   
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <DMA_CheckFifoParam+0xe8>
      break;
 8005252:	bf00      	nop
    }
  } 
  
  return status; 
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e039      	b.n	80052ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fd fc20 	bl	8002ad0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	f023 0107 	bic.w	r1, r3, #7
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <HAL_DMA2D_Init+0x90>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d1      	ldr	r1, [r2, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	ffffc000 	.word	0xffffc000

080052f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d026      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d021      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005332:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d026      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d021      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800538a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	f043 0202 	orr.w	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2204      	movs	r2, #4
 80053a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d026      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d021      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2204      	movs	r2, #4
 8005442:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f853 	bl	80054f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d024      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01f      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800546c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2202      	movs	r2, #2
 8005474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01f      	beq.n	80054e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01a      	beq.n	80054e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f80e 	bl	8005504 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_DMA2D_ConfigLayer+0x20>
 8005534:	2302      	movs	r3, #2
 8005536:	e079      	b.n	800562c <HAL_DMA2D_ConfigLayer+0x114>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	3318      	adds	r3, #24
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005562:	4b35      	ldr	r3, [pc, #212]	; (8005638 <HAL_DMA2D_ConfigLayer+0x120>)
 8005564:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b0a      	cmp	r3, #10
 800556c:	d003      	beq.n	8005576 <HAL_DMA2D_ConfigLayer+0x5e>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b09      	cmp	r3, #9
 8005574:	d107      	bne.n	8005586 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e005      	b.n	8005592 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d120      	bne.n	80055da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	ea02 0103 	and.w	r1, r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b0a      	cmp	r3, #10
 80055c0:	d003      	beq.n	80055ca <HAL_DMA2D_ConfigLayer+0xb2>
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b09      	cmp	r3, #9
 80055c8:	d127      	bne.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
 80055d8:	e01f      	b.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	ea02 0103 	and.w	r1, r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b0a      	cmp	r3, #10
 8005602:	d003      	beq.n	800560c <HAL_DMA2D_ConfigLayer+0xf4>
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b09      	cmp	r3, #9
 800560a:	d106      	bne.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005618:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	ff03000f 	.word	0xff03000f

0800563c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e175      	b.n	8005948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4013      	ands	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	f040 8164 	bne.w	8005942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00b      	beq.n	800569a <HAL_GPIO_Init+0x5e>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d007      	beq.n	800569a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800568e:	2b11      	cmp	r3, #17
 8005690:	d003      	beq.n	800569a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b12      	cmp	r3, #18
 8005698:	d130      	bne.n	80056fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056d0:	2201      	movs	r2, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 0201 	and.w	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x100>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b12      	cmp	r3, #18
 800573a:	d123      	bne.n	8005784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	08da      	lsrs	r2, r3, #3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3208      	adds	r2, #8
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	220f      	movs	r2, #15
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	08da      	lsrs	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3208      	adds	r2, #8
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0203 	and.w	r2, r3, #3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80be 	beq.w	8005942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	4b66      	ldr	r3, [pc, #408]	; (8005960 <HAL_GPIO_Init+0x324>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	4a65      	ldr	r2, [pc, #404]	; (8005960 <HAL_GPIO_Init+0x324>)
 80057cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d0:	6453      	str	r3, [r2, #68]	; 0x44
 80057d2:	4b63      	ldr	r3, [pc, #396]	; (8005960 <HAL_GPIO_Init+0x324>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057de:	4a61      	ldr	r2, [pc, #388]	; (8005964 <HAL_GPIO_Init+0x328>)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3302      	adds	r3, #2
 80057e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	220f      	movs	r2, #15
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_GPIO_Init+0x32c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d037      	beq.n	800587a <HAL_GPIO_Init+0x23e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a57      	ldr	r2, [pc, #348]	; (800596c <HAL_GPIO_Init+0x330>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_GPIO_Init+0x23a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a56      	ldr	r2, [pc, #344]	; (8005970 <HAL_GPIO_Init+0x334>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02b      	beq.n	8005872 <HAL_GPIO_Init+0x236>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a55      	ldr	r2, [pc, #340]	; (8005974 <HAL_GPIO_Init+0x338>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d025      	beq.n	800586e <HAL_GPIO_Init+0x232>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a54      	ldr	r2, [pc, #336]	; (8005978 <HAL_GPIO_Init+0x33c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01f      	beq.n	800586a <HAL_GPIO_Init+0x22e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a53      	ldr	r2, [pc, #332]	; (800597c <HAL_GPIO_Init+0x340>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d019      	beq.n	8005866 <HAL_GPIO_Init+0x22a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a52      	ldr	r2, [pc, #328]	; (8005980 <HAL_GPIO_Init+0x344>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_GPIO_Init+0x226>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a51      	ldr	r2, [pc, #324]	; (8005984 <HAL_GPIO_Init+0x348>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00d      	beq.n	800585e <HAL_GPIO_Init+0x222>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a50      	ldr	r2, [pc, #320]	; (8005988 <HAL_GPIO_Init+0x34c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <HAL_GPIO_Init+0x21e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a4f      	ldr	r2, [pc, #316]	; (800598c <HAL_GPIO_Init+0x350>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d101      	bne.n	8005856 <HAL_GPIO_Init+0x21a>
 8005852:	2309      	movs	r3, #9
 8005854:	e012      	b.n	800587c <HAL_GPIO_Init+0x240>
 8005856:	230a      	movs	r3, #10
 8005858:	e010      	b.n	800587c <HAL_GPIO_Init+0x240>
 800585a:	2308      	movs	r3, #8
 800585c:	e00e      	b.n	800587c <HAL_GPIO_Init+0x240>
 800585e:	2307      	movs	r3, #7
 8005860:	e00c      	b.n	800587c <HAL_GPIO_Init+0x240>
 8005862:	2306      	movs	r3, #6
 8005864:	e00a      	b.n	800587c <HAL_GPIO_Init+0x240>
 8005866:	2305      	movs	r3, #5
 8005868:	e008      	b.n	800587c <HAL_GPIO_Init+0x240>
 800586a:	2304      	movs	r3, #4
 800586c:	e006      	b.n	800587c <HAL_GPIO_Init+0x240>
 800586e:	2303      	movs	r3, #3
 8005870:	e004      	b.n	800587c <HAL_GPIO_Init+0x240>
 8005872:	2302      	movs	r3, #2
 8005874:	e002      	b.n	800587c <HAL_GPIO_Init+0x240>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_GPIO_Init+0x240>
 800587a:	2300      	movs	r3, #0
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	f002 0203 	and.w	r2, r2, #3
 8005882:	0092      	lsls	r2, r2, #2
 8005884:	4093      	lsls	r3, r2
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800588c:	4935      	ldr	r1, [pc, #212]	; (8005964 <HAL_GPIO_Init+0x328>)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	3302      	adds	r3, #2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800589a:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <HAL_GPIO_Init+0x354>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058be:	4a34      	ldr	r2, [pc, #208]	; (8005990 <HAL_GPIO_Init+0x354>)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_GPIO_Init+0x354>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e8:	4a29      	ldr	r2, [pc, #164]	; (8005990 <HAL_GPIO_Init+0x354>)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <HAL_GPIO_Init+0x354>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005912:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_GPIO_Init+0x354>)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_GPIO_Init+0x354>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800593c:	4a14      	ldr	r2, [pc, #80]	; (8005990 <HAL_GPIO_Init+0x354>)
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	3301      	adds	r3, #1
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b0f      	cmp	r3, #15
 800594c:	f67f ae86 	bls.w	800565c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800
 8005964:	40013800 	.word	0x40013800
 8005968:	40020000 	.word	0x40020000
 800596c:	40020400 	.word	0x40020400
 8005970:	40020800 	.word	0x40020800
 8005974:	40020c00 	.word	0x40020c00
 8005978:	40021000 	.word	0x40021000
 800597c:	40021400 	.word	0x40021400
 8005980:	40021800 	.word	0x40021800
 8005984:	40021c00 	.word	0x40021c00
 8005988:	40022000 	.word	0x40022000
 800598c:	40022400 	.word	0x40022400
 8005990:	40013c00 	.word	0x40013c00

08005994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
 80059a0:	4613      	mov	r3, r2
 80059a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059a4:	787b      	ldrb	r3, [r7, #1]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059aa:	887a      	ldrh	r2, [r7, #2]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059b0:	e003      	b.n	80059ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059b2:	887b      	ldrh	r3, [r7, #2]
 80059b4:	041a      	lsls	r2, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	619a      	str	r2, [r3, #24]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059d8:	887a      	ldrh	r2, [r7, #2]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4013      	ands	r3, r2
 80059de:	041a      	lsls	r2, r3, #16
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	43d9      	mvns	r1, r3
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	400b      	ands	r3, r1
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	619a      	str	r2, [r3, #24]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f806 	bl	8005a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40013c00 	.word	0x40013c00

08005a2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b086      	sub	sp, #24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f006 fe57 	bl	800c70c <USB_GetMode>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 80ef 	bne.w	8005c44 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 fe3b 	bl	800c6e6 <USB_ReadInterrupts>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80e5 	beq.w	8005c42 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f006 fe32 	bl	800c6e6 <USB_ReadInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a8c:	d104      	bne.n	8005a98 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f006 fe22 	bl	800c6e6 <USB_ReadInterrupts>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aac:	d104      	bne.n	8005ab8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ab6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f006 fe12 	bl	800c6e6 <USB_ReadInterrupts>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005acc:	d104      	bne.n	8005ad8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ad6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f006 fe02 	bl	800c6e6 <USB_ReadInterrupts>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d103      	bne.n	8005af4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2202      	movs	r2, #2
 8005af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f006 fdf4 	bl	800c6e6 <USB_ReadInterrupts>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b08:	d115      	bne.n	8005b36 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b12:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f007 fac7 	bl	800d0b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f006 fdf9 	bl	800c728 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f006 fdd3 	bl	800c6e6 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b4a:	d102      	bne.n	8005b52 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 f98a 	bl	8006e66 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f006 fdc5 	bl	800c6e6 <USB_ReadInterrupts>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d106      	bne.n	8005b74 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f007 fa8a 	bl	800d080 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f006 fdb4 	bl	800c6e6 <USB_ReadInterrupts>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d101      	bne.n	8005b8c <HAL_HCD_IRQHandler+0x14a>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_HCD_IRQHandler+0x14c>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0210 	bic.w	r2, r2, #16
 8005ba0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 f88d 	bl	8006cc2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0210 	orr.w	r2, r2, #16
 8005bb6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f006 fd92 	bl	800c6e6 <USB_ReadInterrupts>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bcc:	d13a      	bne.n	8005c44 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f006 fde2 	bl	800c79c <USB_HC_ReadInterrupt>
 8005bd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e025      	b.n	8005c2c <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d018      	beq.n	8005c26 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0a:	d106      	bne.n	8005c1a <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f836 	bl	8005c84 <HCD_HC_IN_IRQHandler>
 8005c18:	e005      	b.n	8005c26 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc51 	bl	80064c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d3d4      	bcc.n	8005be0 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c3e:	615a      	str	r2, [r3, #20]
 8005c40:	e000      	b.n	8005c44 <HAL_HCD_IRQHandler+0x202>
      return;
 8005c42:	bf00      	nop
    }
  }
}
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_HCD_Stop+0x16>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e00d      	b.n	8005c7c <HAL_HCD_Stop+0x32>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f006 fec2 	bl	800c9f6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d119      	bne.n	8005ce8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	60d3      	str	r3, [r2, #12]
 8005ce6:	e101      	b.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfe:	d12b      	bne.n	8005d58 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	212c      	movs	r1, #44	; 0x2c
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	3361      	adds	r3, #97	; 0x61
 8005d22:	2207      	movs	r2, #7
 8005d24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f006 fd34 	bl	800c7be <USB_HC_Halt>
 8005d56:	e0c9      	b.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d109      	bne.n	8005d82 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	6093      	str	r3, [r2, #8]
 8005d80:	e0b4      	b.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d133      	bne.n	8005e00 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3361      	adds	r3, #97	; 0x61
 8005dc6:	2205      	movs	r2, #5
 8005dc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2310      	movs	r3, #16
 8005dda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	2308      	movs	r3, #8
 8005dec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f006 fce0 	bl	800c7be <USB_HC_Halt>
 8005dfe:	e075      	b.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e16:	d134      	bne.n	8005e82 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3361      	adds	r3, #97	; 0x61
 8005e46:	2208      	movs	r2, #8
 8005e48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	2310      	movs	r3, #16
 8005e5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f006 fc9f 	bl	800c7be <USB_HC_Halt>
 8005e80:	e034      	b.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d129      	bne.n	8005eec <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	212c      	movs	r1, #44	; 0x2c
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3361      	adds	r3, #97	; 0x61
 8005ec6:	2206      	movs	r2, #6
 8005ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f006 fc72 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f02:	d122      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1e:	f043 0302 	orr.w	r3, r3, #2
 8005f22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f006 fc45 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	461a      	mov	r2, r3
 8005f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f46:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f48:	e2ba      	b.n	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 811b 	bne.w	8006198 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d019      	beq.n	8005f9e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	212c      	movs	r1, #44	; 0x2c
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	3348      	adds	r3, #72	; 0x48
 8005f78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0159      	lsls	r1, r3, #5
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	202c      	movs	r0, #44	; 0x2c
 8005f94:	fb00 f303 	mul.w	r3, r0, r3
 8005f98:	440b      	add	r3, r1
 8005f9a:	3350      	adds	r3, #80	; 0x50
 8005f9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	212c      	movs	r1, #44	; 0x2c
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	3361      	adds	r3, #97	; 0x61
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	212c      	movs	r1, #44	; 0x2c
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	335c      	adds	r3, #92	; 0x5c
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	212c      	movs	r1, #44	; 0x2c
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	333f      	adds	r3, #63	; 0x3f
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	333f      	adds	r3, #63	; 0x3f
 8005ff6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d121      	bne.n	8006040 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006016:	f043 0302 	orr.w	r3, r3, #2
 800601a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f006 fbc9 	bl	800c7be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	461a      	mov	r2, r3
 800603a:	2310      	movs	r3, #16
 800603c:	6093      	str	r3, [r2, #8]
 800603e:	e066      	b.n	800610e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	212c      	movs	r1, #44	; 0x2c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	333f      	adds	r3, #63	; 0x3f
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d127      	bne.n	80060a4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006072:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	212c      	movs	r1, #44	; 0x2c
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	3360      	adds	r3, #96	; 0x60
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	b2d9      	uxtb	r1, r3
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	202c      	movs	r0, #44	; 0x2c
 8006090:	fb00 f303 	mul.w	r3, r0, r3
 8006094:	4413      	add	r3, r2
 8006096:	3360      	adds	r3, #96	; 0x60
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f007 f819 	bl	800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060a2:	e034      	b.n	800610e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	212c      	movs	r1, #44	; 0x2c
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	333f      	adds	r3, #63	; 0x3f
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12a      	bne.n	800610e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	212c      	movs	r1, #44	; 0x2c
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	3360      	adds	r3, #96	; 0x60
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	212c      	movs	r1, #44	; 0x2c
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	3354      	adds	r3, #84	; 0x54
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f083 0301 	eor.w	r3, r3, #1
 80060de:	b2d8      	uxtb	r0, r3
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	212c      	movs	r1, #44	; 0x2c
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	3354      	adds	r3, #84	; 0x54
 80060ee:	4602      	mov	r2, r0
 80060f0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	b2d9      	uxtb	r1, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	202c      	movs	r0, #44	; 0x2c
 80060fc:	fb00 f303 	mul.w	r3, r0, r3
 8006100:	4413      	add	r3, r2
 8006102:	3360      	adds	r3, #96	; 0x60
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f006 ffe3 	bl	800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d12b      	bne.n	800616e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	212c      	movs	r1, #44	; 0x2c
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	3348      	adds	r3, #72	; 0x48
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	202c      	movs	r0, #44	; 0x2c
 800612c:	fb00 f202 	mul.w	r2, r0, r2
 8006130:	440a      	add	r2, r1
 8006132:	3240      	adds	r2, #64	; 0x40
 8006134:	8812      	ldrh	r2, [r2, #0]
 8006136:	fbb3 f3f2 	udiv	r3, r3, r2
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 81be 	beq.w	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	212c      	movs	r1, #44	; 0x2c
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3354      	adds	r3, #84	; 0x54
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f083 0301 	eor.w	r3, r3, #1
 8006158:	b2d8      	uxtb	r0, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	212c      	movs	r1, #44	; 0x2c
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	3354      	adds	r3, #84	; 0x54
 8006168:	4602      	mov	r2, r0
 800616a:	701a      	strb	r2, [r3, #0]
}
 800616c:	e1a8      	b.n	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	212c      	movs	r1, #44	; 0x2c
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	3354      	adds	r3, #84	; 0x54
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f083 0301 	eor.w	r3, r3, #1
 8006182:	b2d8      	uxtb	r0, r3
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	212c      	movs	r1, #44	; 0x2c
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3354      	adds	r3, #84	; 0x54
 8006192:	4602      	mov	r2, r0
 8006194:	701a      	strb	r2, [r3, #0]
}
 8006196:	e193      	b.n	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	f040 8106 	bne.w	80063bc <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ca:	f023 0302 	bic.w	r3, r3, #2
 80061ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	212c      	movs	r1, #44	; 0x2c
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3361      	adds	r3, #97	; 0x61
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d109      	bne.n	80061f8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	212c      	movs	r1, #44	; 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	3360      	adds	r3, #96	; 0x60
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e0c9      	b.n	800638c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	212c      	movs	r1, #44	; 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	3361      	adds	r3, #97	; 0x61
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b05      	cmp	r3, #5
 800620a:	d109      	bne.n	8006220 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	212c      	movs	r1, #44	; 0x2c
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	3360      	adds	r3, #96	; 0x60
 800621a:	2205      	movs	r2, #5
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e0b5      	b.n	800638c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	212c      	movs	r1, #44	; 0x2c
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	3361      	adds	r3, #97	; 0x61
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b06      	cmp	r3, #6
 8006232:	d009      	beq.n	8006248 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3361      	adds	r3, #97	; 0x61
 8006242:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006244:	2b08      	cmp	r3, #8
 8006246:	d150      	bne.n	80062ea <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	212c      	movs	r1, #44	; 0x2c
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	335c      	adds	r3, #92	; 0x5c
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	202c      	movs	r0, #44	; 0x2c
 8006260:	fb00 f303 	mul.w	r3, r0, r3
 8006264:	440b      	add	r3, r1
 8006266:	335c      	adds	r3, #92	; 0x5c
 8006268:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	335c      	adds	r3, #92	; 0x5c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d912      	bls.n	80062a4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	335c      	adds	r3, #92	; 0x5c
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	212c      	movs	r1, #44	; 0x2c
 8006296:	fb01 f303 	mul.w	r3, r1, r3
 800629a:	4413      	add	r3, r2
 800629c:	3360      	adds	r3, #96	; 0x60
 800629e:	2204      	movs	r2, #4
 80062a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062a2:	e073      	b.n	800638c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	212c      	movs	r1, #44	; 0x2c
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	3360      	adds	r3, #96	; 0x60
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	461a      	mov	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062e8:	e050      	b.n	800638c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	212c      	movs	r1, #44	; 0x2c
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	4413      	add	r3, r2
 80062f6:	3361      	adds	r3, #97	; 0x61
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d122      	bne.n	8006344 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	212c      	movs	r1, #44	; 0x2c
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	3360      	adds	r3, #96	; 0x60
 800630c:	2202      	movs	r2, #2
 800630e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006326:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800632e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e023      	b.n	800638c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	212c      	movs	r1, #44	; 0x2c
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	4413      	add	r3, r2
 8006350:	3361      	adds	r3, #97	; 0x61
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b07      	cmp	r3, #7
 8006356:	d119      	bne.n	800638c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	212c      	movs	r1, #44	; 0x2c
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	335c      	adds	r3, #92	; 0x5c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	202c      	movs	r0, #44	; 0x2c
 8006370:	fb00 f303 	mul.w	r3, r0, r3
 8006374:	440b      	add	r3, r1
 8006376:	335c      	adds	r3, #92	; 0x5c
 8006378:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	212c      	movs	r1, #44	; 0x2c
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	4413      	add	r3, r2
 8006386:	3360      	adds	r3, #96	; 0x60
 8006388:	2204      	movs	r2, #4
 800638a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	461a      	mov	r2, r3
 800639a:	2302      	movs	r3, #2
 800639c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	b2d9      	uxtb	r1, r3
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	202c      	movs	r0, #44	; 0x2c
 80063a8:	fb00 f303 	mul.w	r3, r0, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	3360      	adds	r3, #96	; 0x60
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f006 fe8d 	bl	800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80063ba:	e081      	b.n	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d176      	bne.n	80064c0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	212c      	movs	r1, #44	; 0x2c
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	4413      	add	r3, r2
 80063de:	333f      	adds	r3, #63	; 0x3f
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d121      	bne.n	800642a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	212c      	movs	r1, #44	; 0x2c
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	335c      	adds	r3, #92	; 0x5c
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006412:	f043 0302 	orr.w	r3, r3, #2
 8006416:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	4611      	mov	r1, r2
 8006422:	4618      	mov	r0, r3
 8006424:	f006 f9cb 	bl	800c7be <USB_HC_Halt>
 8006428:	e041      	b.n	80064ae <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	212c      	movs	r1, #44	; 0x2c
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	333f      	adds	r3, #63	; 0x3f
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	212c      	movs	r1, #44	; 0x2c
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	4413      	add	r3, r2
 800644a:	333f      	adds	r3, #63	; 0x3f
 800644c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800644e:	2b02      	cmp	r3, #2
 8006450:	d12d      	bne.n	80064ae <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	335c      	adds	r3, #92	; 0x5c
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d120      	bne.n	80064ae <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	212c      	movs	r1, #44	; 0x2c
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	4413      	add	r3, r2
 8006478:	3361      	adds	r3, #97	; 0x61
 800647a:	2203      	movs	r2, #3
 800647c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4413      	add	r3, r2
 8006486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f006 f988 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	461a      	mov	r2, r3
 80064bc:	2310      	movs	r3, #16
 80064be:	6093      	str	r3, [r2, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d119      	bne.n	800652c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	2304      	movs	r3, #4
 8006508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	440a      	add	r2, r1
 8006520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006524:	f043 0302 	orr.w	r3, r3, #2
 8006528:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800652a:	e3c6      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d13e      	bne.n	80065c0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	461a      	mov	r2, r3
 8006550:	2320      	movs	r3, #32
 8006552:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	212c      	movs	r1, #44	; 0x2c
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	4413      	add	r3, r2
 8006560:	333d      	adds	r3, #61	; 0x3d
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	f040 83a8 	bne.w	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	212c      	movs	r1, #44	; 0x2c
 8006570:	fb01 f303 	mul.w	r3, r1, r3
 8006574:	4413      	add	r3, r2
 8006576:	333d      	adds	r3, #61	; 0x3d
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	212c      	movs	r1, #44	; 0x2c
 8006582:	fb01 f303 	mul.w	r3, r1, r3
 8006586:	4413      	add	r3, r2
 8006588:	3360      	adds	r3, #96	; 0x60
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f006 f900 	bl	800c7be <USB_HC_Halt>
}
 80065be:	e37c      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d6:	d122      	bne.n	800661e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f006 f8db 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800661a:	6093      	str	r3, [r2, #8]
}
 800661c:	e34d      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d150      	bne.n	80066d6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	212c      	movs	r1, #44	; 0x2c
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	335c      	adds	r3, #92	; 0x5c
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d111      	bne.n	8006680 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	212c      	movs	r1, #44	; 0x2c
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	333d      	adds	r3, #61	; 0x3d
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	461a      	mov	r2, r3
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	440a      	add	r2, r1
 8006696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800669a:	f043 0302 	orr.w	r3, r3, #2
 800669e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f006 f887 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	461a      	mov	r2, r3
 80066be:	2301      	movs	r3, #1
 80066c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	212c      	movs	r1, #44	; 0x2c
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	3361      	adds	r3, #97	; 0x61
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
}
 80066d4:	e2f1      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	d13c      	bne.n	8006766 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	212c      	movs	r1, #44	; 0x2c
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	3361      	adds	r3, #97	; 0x61
 80066fa:	2204      	movs	r2, #4
 80066fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	212c      	movs	r1, #44	; 0x2c
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	333d      	adds	r3, #61	; 0x3d
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	212c      	movs	r1, #44	; 0x2c
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	335c      	adds	r3, #92	; 0x5c
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	4413      	add	r3, r2
 800672a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	440a      	add	r2, r1
 8006738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673c:	f043 0302 	orr.w	r3, r3, #2
 8006740:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	4611      	mov	r1, r2
 800674c:	4618      	mov	r0, r3
 800674e:	f006 f836 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	461a      	mov	r2, r3
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	6093      	str	r3, [r2, #8]
}
 8006764:	e2a9      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d12a      	bne.n	80067d2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	461a      	mov	r2, r3
 800678a:	2308      	movs	r3, #8
 800678c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	4413      	add	r3, r2
 8006796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f006 f800 	bl	800c7be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	212c      	movs	r1, #44	; 0x2c
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	3361      	adds	r3, #97	; 0x61
 80067cc:	2205      	movs	r2, #5
 80067ce:	701a      	strb	r2, [r3, #0]
}
 80067d0:	e273      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d150      	bne.n	800688a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	212c      	movs	r1, #44	; 0x2c
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	4413      	add	r3, r2
 80067f4:	335c      	adds	r3, #92	; 0x5c
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	212c      	movs	r1, #44	; 0x2c
 8006800:	fb01 f303 	mul.w	r3, r1, r3
 8006804:	4413      	add	r3, r2
 8006806:	3361      	adds	r3, #97	; 0x61
 8006808:	2203      	movs	r2, #3
 800680a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	212c      	movs	r1, #44	; 0x2c
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	333d      	adds	r3, #61	; 0x3d
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d112      	bne.n	8006846 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	212c      	movs	r1, #44	; 0x2c
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	333c      	adds	r3, #60	; 0x3c
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	212c      	movs	r1, #44	; 0x2c
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	333d      	adds	r3, #61	; 0x3d
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	4413      	add	r3, r2
 800684e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	440a      	add	r2, r1
 800685c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f005 ffa4 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	461a      	mov	r2, r3
 8006884:	2310      	movs	r3, #16
 8006886:	6093      	str	r3, [r2, #8]
}
 8006888:	e217      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d174      	bne.n	800698a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d121      	bne.n	80068ec <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	212c      	movs	r1, #44	; 0x2c
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	3361      	adds	r3, #97	; 0x61
 80068b6:	2206      	movs	r2, #6
 80068b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f005 ff6a 	bl	800c7be <USB_HC_Halt>
 80068ea:	e044      	b.n	8006976 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	212c      	movs	r1, #44	; 0x2c
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	335c      	adds	r3, #92	; 0x5c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	202c      	movs	r0, #44	; 0x2c
 8006904:	fb00 f303 	mul.w	r3, r0, r3
 8006908:	440b      	add	r3, r1
 800690a:	335c      	adds	r3, #92	; 0x5c
 800690c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	212c      	movs	r1, #44	; 0x2c
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	4413      	add	r3, r2
 800691a:	335c      	adds	r3, #92	; 0x5c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d920      	bls.n	8006964 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	212c      	movs	r1, #44	; 0x2c
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	4413      	add	r3, r2
 800692e:	335c      	adds	r3, #92	; 0x5c
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	212c      	movs	r1, #44	; 0x2c
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	3360      	adds	r3, #96	; 0x60
 8006942:	2204      	movs	r2, #4
 8006944:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	b2d9      	uxtb	r1, r3
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	202c      	movs	r0, #44	; 0x2c
 8006950:	fb00 f303 	mul.w	r3, r0, r3
 8006954:	4413      	add	r3, r2
 8006956:	3360      	adds	r3, #96	; 0x60
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f006 fbb9 	bl	800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006962:	e008      	b.n	8006976 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	3360      	adds	r3, #96	; 0x60
 8006972:	2202      	movs	r2, #2
 8006974:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	6093      	str	r3, [r2, #8]
}
 8006988:	e197      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a0:	d134      	bne.n	8006a0c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f005 fef6 	bl	800c7be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	461a      	mov	r2, r3
 80069e0:	2310      	movs	r3, #16
 80069e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	461a      	mov	r2, r3
 80069f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	212c      	movs	r1, #44	; 0x2c
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	3361      	adds	r3, #97	; 0x61
 8006a06:	2208      	movs	r2, #8
 8006a08:	701a      	strb	r2, [r3, #0]
}
 8006a0a:	e156      	b.n	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	f040 814b 	bne.w	8006cba <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	212c      	movs	r1, #44	; 0x2c
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	3361      	adds	r3, #97	; 0x61
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d179      	bne.n	8006b4c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	212c      	movs	r1, #44	; 0x2c
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	3360      	adds	r3, #96	; 0x60
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	212c      	movs	r1, #44	; 0x2c
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	333f      	adds	r3, #63	; 0x3f
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d00a      	beq.n	8006a94 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	212c      	movs	r1, #44	; 0x2c
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	333f      	adds	r3, #63	; 0x3f
 8006a8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	f040 80fc 	bne.w	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d142      	bne.n	8006b22 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	212c      	movs	r1, #44	; 0x2c
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	334c      	adds	r3, #76	; 0x4c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80ed 	beq.w	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	212c      	movs	r1, #44	; 0x2c
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	334c      	adds	r3, #76	; 0x4c
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	202c      	movs	r0, #44	; 0x2c
 8006ac8:	fb00 f202 	mul.w	r2, r0, r2
 8006acc:	440a      	add	r2, r1
 8006ace:	3240      	adds	r2, #64	; 0x40
 8006ad0:	8812      	ldrh	r2, [r2, #0]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	fb00 f202 	mul.w	r2, r0, r2
 8006ae0:	440a      	add	r2, r1
 8006ae2:	3240      	adds	r2, #64	; 0x40
 8006ae4:	8812      	ldrh	r2, [r2, #0]
 8006ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80ca 	beq.w	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	212c      	movs	r1, #44	; 0x2c
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	3355      	adds	r3, #85	; 0x55
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f083 0301 	eor.w	r3, r3, #1
 8006b0c:	b2d8      	uxtb	r0, r3
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	212c      	movs	r1, #44	; 0x2c
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	3355      	adds	r3, #85	; 0x55
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e0b4      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	212c      	movs	r1, #44	; 0x2c
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3355      	adds	r3, #85	; 0x55
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2d8      	uxtb	r0, r3
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	212c      	movs	r1, #44	; 0x2c
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	3355      	adds	r3, #85	; 0x55
 8006b46:	4602      	mov	r2, r0
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e09f      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	212c      	movs	r1, #44	; 0x2c
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	3361      	adds	r3, #97	; 0x61
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d109      	bne.n	8006b74 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	212c      	movs	r1, #44	; 0x2c
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3360      	adds	r3, #96	; 0x60
 8006b6e:	2202      	movs	r2, #2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e08b      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	212c      	movs	r1, #44	; 0x2c
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	3361      	adds	r3, #97	; 0x61
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d109      	bne.n	8006b9c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	3360      	adds	r3, #96	; 0x60
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	e077      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	212c      	movs	r1, #44	; 0x2c
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3361      	adds	r3, #97	; 0x61
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d109      	bne.n	8006bc4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	3360      	adds	r3, #96	; 0x60
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	e063      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	212c      	movs	r1, #44	; 0x2c
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	3361      	adds	r3, #97	; 0x61
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d009      	beq.n	8006bec <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	212c      	movs	r1, #44	; 0x2c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	3361      	adds	r3, #97	; 0x61
 8006be6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d14f      	bne.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	212c      	movs	r1, #44	; 0x2c
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	335c      	adds	r3, #92	; 0x5c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	202c      	movs	r0, #44	; 0x2c
 8006c04:	fb00 f303 	mul.w	r3, r0, r3
 8006c08:	440b      	add	r3, r1
 8006c0a:	335c      	adds	r3, #92	; 0x5c
 8006c0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	212c      	movs	r1, #44	; 0x2c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	335c      	adds	r3, #92	; 0x5c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d912      	bls.n	8006c48 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	212c      	movs	r1, #44	; 0x2c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	335c      	adds	r3, #92	; 0x5c
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	212c      	movs	r1, #44	; 0x2c
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	3360      	adds	r3, #96	; 0x60
 8006c42:	2204      	movs	r2, #4
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e021      	b.n	8006c8c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	212c      	movs	r1, #44	; 0x2c
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	3360      	adds	r3, #96	; 0x60
 8006c56:	2202      	movs	r2, #2
 8006c58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c70:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	b2d9      	uxtb	r1, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	202c      	movs	r0, #44	; 0x2c
 8006ca8:	fb00 f303 	mul.w	r3, r0, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	3360      	adds	r3, #96	; 0x60
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f006 fa0d 	bl	800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006cba:	bf00      	nop
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b08a      	sub	sp, #40	; 0x28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	0c5b      	lsrs	r3, r3, #17
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d004      	beq.n	8006d08 <HCD_RXQLVL_IRQHandler+0x46>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	f000 80a9 	beq.w	8006e58 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006d06:	e0aa      	b.n	8006e5e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80a6 	beq.w	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3344      	adds	r3, #68	; 0x44
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 809b 	beq.w	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	3350      	adds	r3, #80	; 0x50
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	441a      	add	r2, r3
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	202c      	movs	r0, #44	; 0x2c
 8006d40:	fb00 f303 	mul.w	r3, r0, r3
 8006d44:	440b      	add	r3, r1
 8006d46:	334c      	adds	r3, #76	; 0x4c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d87a      	bhi.n	8006e44 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	212c      	movs	r1, #44	; 0x2c
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3344      	adds	r3, #68	; 0x44
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	b292      	uxth	r2, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	f005 fc94 	bl	800c694 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	212c      	movs	r1, #44	; 0x2c
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	3344      	adds	r3, #68	; 0x44
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	441a      	add	r2, r3
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	202c      	movs	r0, #44	; 0x2c
 8006d86:	fb00 f303 	mul.w	r3, r0, r3
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3344      	adds	r3, #68	; 0x44
 8006d8e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3350      	adds	r3, #80	; 0x50
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	441a      	add	r2, r3
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	202c      	movs	r0, #44	; 0x2c
 8006daa:	fb00 f303 	mul.w	r3, r0, r3
 8006dae:	440b      	add	r3, r1
 8006db0:	3350      	adds	r3, #80	; 0x50
 8006db2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	0cdb      	lsrs	r3, r3, #19
 8006dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	212c      	movs	r1, #44	; 0x2c
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3340      	adds	r3, #64	; 0x40
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d13c      	bne.n	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d039      	beq.n	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dfe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	461a      	mov	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	212c      	movs	r1, #44	; 0x2c
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	4413      	add	r3, r2
 8006e26:	3354      	adds	r3, #84	; 0x54
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f083 0301 	eor.w	r3, r3, #1
 8006e2e:	b2d8      	uxtb	r0, r3
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	212c      	movs	r1, #44	; 0x2c
 8006e36:	fb01 f303 	mul.w	r3, r1, r3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3354      	adds	r3, #84	; 0x54
 8006e3e:	4602      	mov	r2, r0
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e00b      	b.n	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	212c      	movs	r1, #44	; 0x2c
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	3360      	adds	r3, #96	; 0x60
 8006e52:	2204      	movs	r2, #4
 8006e54:	701a      	strb	r2, [r3, #0]
      break;
 8006e56:	e001      	b.n	8006e5c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006e58:	bf00      	nop
 8006e5a:	e000      	b.n	8006e5e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006e5c:	bf00      	nop
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e92:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d10b      	bne.n	8006eb6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d102      	bne.n	8006eae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f006 f8f7 	bl	800d09c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f043 0302 	orr.w	r3, r3, #2
 8006eb4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d132      	bne.n	8006f26 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f043 0308 	orr.w	r3, r3, #8
 8006ec6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d126      	bne.n	8006f20 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d113      	bne.n	8006f02 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ee4:	d106      	bne.n	8006ef4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2102      	movs	r1, #2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f005 fc1b 	bl	800c728 <USB_InitFSLSPClkSel>
 8006ef2:	e011      	b.n	8006f18 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f005 fc14 	bl	800c728 <USB_InitFSLSPClkSel>
 8006f00:	e00a      	b.n	8006f18 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d106      	bne.n	8006f18 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f10:	461a      	mov	r2, r3
 8006f12:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006f16:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f006 f8e9 	bl	800d0f0 <HAL_HCD_PortEnabled_Callback>
 8006f1e:	e002      	b.n	8006f26 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f006 f8f3 	bl	800d10c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d103      	bne.n	8006f38 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f043 0320 	orr.w	r3, r3, #32
 8006f36:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6013      	str	r3, [r2, #0]
}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e07f      	b.n	800705e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fdd2 	bl	8002b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	; 0x24
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	e006      	b.n	8006fd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d104      	bne.n	8006fe6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <HAL_I2C_Init+0x11c>)
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	ea42 0103 	orr.w	r1, r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	02008000 	.word	0x02008000

0800706c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b20      	cmp	r3, #32
 8007080:	d138      	bne.n	80070f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800708c:	2302      	movs	r3, #2
 800708e:	e032      	b.n	80070f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	; 0x24
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	d139      	bne.n	800718c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007122:	2302      	movs	r3, #2
 8007124:	e033      	b.n	800718e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	; 0x24
 8007132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0bf      	b.n	800732e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fb fd22 	bl	8002c0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80071de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6999      	ldr	r1, [r3, #24]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <HAL_LTDC_Init+0x19c>)
 8007210:	400b      	ands	r3, r1
 8007212:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	041b      	lsls	r3, r3, #16
 800721a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6899      	ldr	r1, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68d9      	ldr	r1, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b3e      	ldr	r3, [pc, #248]	; (8007338 <HAL_LTDC_Init+0x19c>)
 800723e:	400b      	ands	r3, r1
 8007240:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68d9      	ldr	r1, [r3, #12]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6919      	ldr	r1, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <HAL_LTDC_Init+0x19c>)
 800726c:	400b      	ands	r3, r1
 800726e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6919      	ldr	r1, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6959      	ldr	r1, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <HAL_LTDC_Init+0x19c>)
 800729a:	400b      	ands	r3, r1
 800729c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6959      	ldr	r1, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0206 	orr.w	r2, r2, #6
 800730a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	f000f800 	.word	0xf000f800

0800733c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800733c:	b5b0      	push	{r4, r5, r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_LTDC_ConfigLayer+0x1a>
 8007352:	2302      	movs	r3, #2
 8007354:	e02c      	b.n	80073b0 <HAL_LTDC_ConfigLayer+0x74>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2134      	movs	r1, #52	; 0x34
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4614      	mov	r4, r2
 800737a:	461d      	mov	r5, r3
 800737c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f847 	bl	8007424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2201      	movs	r2, #1
 800739c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bdb0      	pop	{r4, r5, r7, pc}

080073b8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_LTDC_SetAddress+0x1a>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e024      	b.n	800741c <HAL_LTDC_SetAddress+0x64>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2202      	movs	r2, #2
 80073de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2234      	movs	r2, #52	; 0x34
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	3338      	adds	r3, #56	; 0x38
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6979      	ldr	r1, [r7, #20]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f811 	bl	8007424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2201      	movs	r2, #1
 8007408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007424:	b480      	push	{r7}
 8007426:	b089      	sub	sp, #36	; 0x24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	0c1b      	lsrs	r3, r3, #16
 800743c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007440:	4413      	add	r3, r2
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	3384      	adds	r3, #132	; 0x84
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	4611      	mov	r1, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	01d2      	lsls	r2, r2, #7
 8007460:	440a      	add	r2, r1
 8007462:	3284      	adds	r2, #132	; 0x84
 8007464:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007468:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747a:	4413      	add	r3, r2
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4619      	mov	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	01db      	lsls	r3, r3, #7
 8007488:	440b      	add	r3, r1
 800748a:	3384      	adds	r3, #132	; 0x84
 800748c:	4619      	mov	r1, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	4313      	orrs	r3, r2
 8007492:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a2:	4413      	add	r3, r2
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	01db      	lsls	r3, r3, #7
 80074b2:	4413      	add	r3, r2
 80074b4:	3384      	adds	r3, #132	; 0x84
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	4611      	mov	r1, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	01d2      	lsls	r2, r2, #7
 80074c2:	440a      	add	r2, r1
 80074c4:	3284      	adds	r2, #132	; 0x84
 80074c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074da:	4413      	add	r3, r2
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4619      	mov	r1, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	01db      	lsls	r3, r3, #7
 80074e8:	440b      	add	r3, r1
 80074ea:	3384      	adds	r3, #132	; 0x84
 80074ec:	4619      	mov	r1, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	01db      	lsls	r3, r3, #7
 80074fe:	4413      	add	r3, r2
 8007500:	3384      	adds	r3, #132	; 0x84
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	4611      	mov	r1, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	01d2      	lsls	r2, r2, #7
 800750e:	440a      	add	r2, r1
 8007510:	3284      	adds	r2, #132	; 0x84
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	01db      	lsls	r3, r3, #7
 8007522:	4413      	add	r3, r2
 8007524:	3384      	adds	r3, #132	; 0x84
 8007526:	461a      	mov	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	061b      	lsls	r3, r3, #24
 8007548:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	4413      	add	r3, r2
 8007556:	3384      	adds	r3, #132	; 0x84
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	01db      	lsls	r3, r3, #7
 8007564:	4413      	add	r3, r2
 8007566:	3384      	adds	r3, #132	; 0x84
 8007568:	461a      	mov	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007574:	461a      	mov	r2, r3
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	431a      	orrs	r2, r3
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	01db      	lsls	r3, r3, #7
 8007588:	440b      	add	r3, r1
 800758a:	3384      	adds	r3, #132	; 0x84
 800758c:	4619      	mov	r1, r3
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	01db      	lsls	r3, r3, #7
 800759e:	4413      	add	r3, r2
 80075a0:	3384      	adds	r3, #132	; 0x84
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	4611      	mov	r1, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	01d2      	lsls	r2, r2, #7
 80075ae:	440a      	add	r2, r1
 80075b0:	3284      	adds	r2, #132	; 0x84
 80075b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	01db      	lsls	r3, r3, #7
 80075c2:	4413      	add	r3, r2
 80075c4:	3384      	adds	r3, #132	; 0x84
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	4413      	add	r3, r2
 80075da:	3384      	adds	r3, #132	; 0x84
 80075dc:	69da      	ldr	r2, [r3, #28]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	01db      	lsls	r3, r3, #7
 80075e8:	440b      	add	r3, r1
 80075ea:	3384      	adds	r3, #132	; 0x84
 80075ec:	4619      	mov	r1, r3
 80075ee:	4b58      	ldr	r3, [pc, #352]	; (8007750 <LTDC_SetConfig+0x32c>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	68f9      	ldr	r1, [r7, #12]
 80075fe:	6809      	ldr	r1, [r1, #0]
 8007600:	4608      	mov	r0, r1
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	01c9      	lsls	r1, r1, #7
 8007606:	4401      	add	r1, r0
 8007608:	3184      	adds	r1, #132	; 0x84
 800760a:	4313      	orrs	r3, r2
 800760c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	01db      	lsls	r3, r3, #7
 8007618:	4413      	add	r3, r2
 800761a:	3384      	adds	r3, #132	; 0x84
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	4413      	add	r3, r2
 800762a:	3384      	adds	r3, #132	; 0x84
 800762c:	461a      	mov	r2, r3
 800762e:	2300      	movs	r3, #0
 8007630:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	01db      	lsls	r3, r3, #7
 800763c:	4413      	add	r3, r2
 800763e:	3384      	adds	r3, #132	; 0x84
 8007640:	461a      	mov	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007650:	2304      	movs	r3, #4
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e01b      	b.n	800768e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d102      	bne.n	8007664 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800765e:	2303      	movs	r3, #3
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	e014      	b.n	800768e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b04      	cmp	r3, #4
 800766a:	d00b      	beq.n	8007684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007670:	2b02      	cmp	r3, #2
 8007672:	d007      	beq.n	8007684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007678:	2b03      	cmp	r3, #3
 800767a:	d003      	beq.n	8007684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007680:	2b07      	cmp	r3, #7
 8007682:	d102      	bne.n	800768a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007684:	2302      	movs	r3, #2
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	e001      	b.n	800768e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800768a:	2301      	movs	r3, #1
 800768c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	01db      	lsls	r3, r3, #7
 8007698:	4413      	add	r3, r2
 800769a:	3384      	adds	r3, #132	; 0x84
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	4611      	mov	r1, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	01d2      	lsls	r2, r2, #7
 80076a8:	440a      	add	r2, r1
 80076aa:	3284      	adds	r2, #132	; 0x84
 80076ac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	041a      	lsls	r2, r3, #16
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1acb      	subs	r3, r1, r3
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	fb01 f303 	mul.w	r3, r1, r3
 80076ce:	3303      	adds	r3, #3
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	6809      	ldr	r1, [r1, #0]
 80076d4:	4608      	mov	r0, r1
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	01c9      	lsls	r1, r1, #7
 80076da:	4401      	add	r1, r0
 80076dc:	3184      	adds	r1, #132	; 0x84
 80076de:	4313      	orrs	r3, r2
 80076e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	01db      	lsls	r3, r3, #7
 80076ec:	4413      	add	r3, r2
 80076ee:	3384      	adds	r3, #132	; 0x84
 80076f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	01db      	lsls	r3, r3, #7
 80076fc:	440b      	add	r3, r1
 80076fe:	3384      	adds	r3, #132	; 0x84
 8007700:	4619      	mov	r1, r3
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <LTDC_SetConfig+0x330>)
 8007704:	4013      	ands	r3, r2
 8007706:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	01db      	lsls	r3, r3, #7
 8007712:	4413      	add	r3, r2
 8007714:	3384      	adds	r3, #132	; 0x84
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	01db      	lsls	r3, r3, #7
 8007728:	4413      	add	r3, r2
 800772a:	3384      	adds	r3, #132	; 0x84
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	4611      	mov	r1, r2
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	01d2      	lsls	r2, r2, #7
 8007738:	440a      	add	r2, r1
 800773a:	3284      	adds	r2, #132	; 0x84
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	6013      	str	r3, [r2, #0]
}
 8007742:	bf00      	nop
 8007744:	3724      	adds	r7, #36	; 0x24
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	fffff8f8 	.word	0xfffff8f8
 8007754:	fffff800 	.word	0xfffff800

08007758 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a04      	ldr	r2, [pc, #16]	; (8007774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007766:	6013      	str	r3, [r2, #0]
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40007000 	.word	0x40007000

08007778 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <HAL_PWREx_EnableOverDrive+0x98>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	4a22      	ldr	r2, [pc, #136]	; (8007810 <HAL_PWREx_EnableOverDrive+0x98>)
 8007788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778c:	6413      	str	r3, [r2, #64]	; 0x40
 800778e:	4b20      	ldr	r3, [pc, #128]	; (8007810 <HAL_PWREx_EnableOverDrive+0x98>)
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800779a:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1d      	ldr	r2, [pc, #116]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077a6:	f7fc fc0f 	bl	8003fc8 <HAL_GetTick>
 80077aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077ac:	e009      	b.n	80077c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077ae:	f7fc fc0b 	bl	8003fc8 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077bc:	d901      	bls.n	80077c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e022      	b.n	8007808 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077c2:	4b14      	ldr	r3, [pc, #80]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ce:	d1ee      	bne.n	80077ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077d0:	4b10      	ldr	r3, [pc, #64]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a0f      	ldr	r2, [pc, #60]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077dc:	f7fc fbf4 	bl	8003fc8 <HAL_GetTick>
 80077e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077e2:	e009      	b.n	80077f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077e4:	f7fc fbf0 	bl	8003fc8 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077f2:	d901      	bls.n	80077f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e007      	b.n	8007808 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077f8:	4b06      	ldr	r3, [pc, #24]	; (8007814 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d1ee      	bne.n	80077e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	40023800 	.word	0x40023800
 8007814:	40007000 	.word	0x40007000

08007818 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007820:	f7fc fbd2 	bl	8003fc8 <HAL_GetTick>
 8007824:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e067      	b.n	8007900 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fb faa1 	bl	8002d8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800784a:	f241 3188 	movw	r1, #5000	; 0x1388
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fda8 	bl	80083a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	021a      	lsls	r2, r3, #8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	2120      	movs	r1, #32
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fdd3 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d135      	bne.n	80078f6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <HAL_QSPI_Init+0xf0>)
 8007892:	4013      	ands	r3, r2
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6852      	ldr	r2, [r2, #4]
 8007898:	0611      	lsls	r1, r2, #24
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68d2      	ldr	r2, [r2, #12]
 800789e:	4311      	orrs	r1, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	69d2      	ldr	r2, [r2, #28]
 80078a4:	4311      	orrs	r1, r2
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6a12      	ldr	r2, [r2, #32]
 80078aa:	4311      	orrs	r1, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6812      	ldr	r2, [r2, #0]
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <HAL_QSPI_Init+0xf4>)
 80078bc:	4013      	ands	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6912      	ldr	r2, [r2, #16]
 80078c2:	0411      	lsls	r1, r2, #16
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6952      	ldr	r2, [r2, #20]
 80078c8:	4311      	orrs	r1, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6992      	ldr	r2, [r2, #24]
 80078ce:	4311      	orrs	r1, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	430b      	orrs	r3, r1
 80078d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80078fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	00ffff2f 	.word	0x00ffff2f
 800790c:	ffe0f8fe 	.word	0xffe0f8fe

08007910 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d064      	beq.n	80079fc <HAL_QSPI_IRQHandler+0xec>
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d05f      	beq.n	80079fc <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3320      	adds	r3, #32
 8007942:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b12      	cmp	r3, #18
 800794e:	d125      	bne.n	800799c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007950:	e01c      	b.n	800798c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00f      	beq.n	800797a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	781a      	ldrb	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	1e5a      	subs	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	62da      	str	r2, [r3, #44]	; 0x2c
 8007978:	e008      	b.n	800798c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007988:	601a      	str	r2, [r3, #0]
          break;
 800798a:	e033      	b.n	80079f4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1db      	bne.n	8007952 <HAL_QSPI_IRQHandler+0x42>
 800799a:	e02b      	b.n	80079f4 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b22      	cmp	r3, #34	; 0x22
 80079a6:	d125      	bne.n	80079f4 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80079a8:	e01d      	b.n	80079e6 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	1e5a      	subs	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
 80079d2:	e008      	b.n	80079e6 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079e2:	601a      	str	r2, [r3, #0]
          break;
 80079e4:	e006      	b.n	80079f4 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1da      	bne.n	80079aa <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbed 	bl	80081d4 <HAL_QSPI_FifoThresholdCallback>
 80079fa:	e142      	b.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80b6 	beq.w	8007b74 <HAL_QSPI_IRQHandler+0x264>
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80b0 	beq.w	8007b74 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007a2a:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b12      	cmp	r3, #18
 8007a36:	d123      	bne.n	8007a80 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d011      	beq.n	8007a6a <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0204 	bic.w	r2, r2, #4
 8007a54:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0201 	bic.w	r2, r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fc3e 	bl	80082ec <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fba1 	bl	80081c0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007a7e:	e0fd      	b.n	8007c7c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b22      	cmp	r3, #34	; 0x22
 8007a8a:	d146      	bne.n	8007b1a <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d012      	beq.n	8007ac0 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0204 	bic.w	r2, r2, #4
 8007aa8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e021      	b.n	8007b04 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3320      	adds	r3, #32
 8007ac6:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8007ac8:	e013      	b.n	8007af2 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	1e5a      	subs	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <HAL_QSPI_IRQHandler+0x1ba>
 8007b00:	e000      	b.n	8007b04 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8007b02:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbf1 	bl	80082ec <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb4a 	bl	80081ac <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007b18:	e0b0      	b.n	8007c7c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d107      	bne.n	8007b36 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb32 	bl	8008198 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007b34:	e0a2      	b.n	8007c7c <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	f040 809c 	bne.w	8007c7c <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b52:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb0d 	bl	8008184 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007b6a:	e087      	b.n	8007c7c <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 faff 	bl	8008170 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007b72:	e083      	b.n	8007c7c <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01f      	beq.n	8007bbe <HAL_QSPI_IRQHandler+0x2ae>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01a      	beq.n	8007bbe <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007bac:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb16 	bl	80081e8 <HAL_QSPI_StatusMatchCallback>
 8007bbc:	e061      	b.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d047      	beq.n	8007c58 <HAL_QSPI_IRQHandler+0x348>
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d042      	beq.n	8007c58 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007be8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d021      	beq.n	8007c48 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0204 	bic.w	r2, r2, #4
 8007c12:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <HAL_QSPI_IRQHandler+0x37c>)
 8007c1a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd f8c1 	bl	8004da8 <HAL_DMA_Abort_IT>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d029      	beq.n	8007c80 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c30:	f043 0204 	orr.w	r2, r3, #4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa95 	bl	8008170 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007c46:	e01b      	b.n	8007c80 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fa8d 	bl	8008170 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007c56:	e013      	b.n	8007c80 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00f      	beq.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2210      	movs	r2, #16
 8007c72:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fac1 	bl	80081fc <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8007c7a:	e002      	b.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007c80:	bf00      	nop
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	080083c1 	.word	0x080083c1

08007c90 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007c9c:	f7fc f994 	bl	8003fc8 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_QSPI_Command+0x22>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e048      	b.n	8007d44 <HAL_QSPI_Command+0xb4>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d137      	bne.n	8007d36 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2120      	movs	r1, #32
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fba1 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d125      	bne.n	8007d3a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fbce 	bl	8008494 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d115      	bne.n	8007d2c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2201      	movs	r2, #1
 8007d08:	2102      	movs	r1, #2
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fb8b 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10f      	bne.n	8007d3a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d2a:	e006      	b.n	8007d3a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d34:	e001      	b.n	8007d3a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007d36:	2302      	movs	r3, #2
 8007d38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007d5c:	f7fc f934 	bl	8003fc8 <HAL_GetTick>
 8007d60:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3320      	adds	r3, #32
 8007d68:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_QSPI_Transmit+0x2e>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e07b      	b.n	8007e72 <HAL_QSPI_Transmit+0x126>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d16a      	bne.n	8007e64 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d05b      	beq.n	8007e52 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2212      	movs	r2, #18
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695a      	ldr	r2, [r3, #20]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007dce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007dd0:	e01b      	b.n	8007e0a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2104      	movs	r1, #4
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fb22 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007de6:	7ffb      	ldrb	r3, [r7, #31]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d113      	bne.n	8007e14 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	1e5a      	subs	r2, r3, #1
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1df      	bne.n	8007dd2 <HAL_QSPI_Transmit+0x86>
 8007e12:	e000      	b.n	8007e16 <HAL_QSPI_Transmit+0xca>
          break;
 8007e14:	bf00      	nop
      }

      if (status == HAL_OK)
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d115      	bne.n	8007e48 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2201      	movs	r2, #1
 8007e24:	2102      	movs	r1, #2
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fafd 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007e30:	7ffb      	ldrb	r3, [r7, #31]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d108      	bne.n	8007e48 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f9e6 	bl	8008210 <HAL_QSPI_Abort>
 8007e44:	4603      	mov	r3, r0
 8007e46:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e50:	e00a      	b.n	8007e68 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f043 0208 	orr.w	r2, r3, #8
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e001      	b.n	8007e68 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
 8007e66:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b08a      	sub	sp, #40	; 0x28
 8007e7e:	af02      	add	r7, sp, #8
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007e8a:	f7fc f89d 	bl	8003fc8 <HAL_GetTick>
 8007e8e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3320      	adds	r3, #32
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d101      	bne.n	8007eb0 <HAL_QSPI_Receive+0x36>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e082      	b.n	8007fb6 <HAL_QSPI_Receive+0x13c>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d171      	bne.n	8007fa8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d062      	beq.n	8007f96 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2222      	movs	r2, #34	; 0x22
 8007ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f08:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007f12:	e01c      	b.n	8007f4e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	2106      	movs	r1, #6
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fa81 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007f28:	7ffb      	ldrb	r3, [r7, #31]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d114      	bne.n	8007f58 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	1e5a      	subs	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1de      	bne.n	8007f14 <HAL_QSPI_Receive+0x9a>
 8007f56:	e000      	b.n	8007f5a <HAL_QSPI_Receive+0xe0>
          break;
 8007f58:	bf00      	nop
      }

      if (status == HAL_OK)
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d115      	bne.n	8007f8c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2201      	movs	r2, #1
 8007f68:	2102      	movs	r1, #2
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fa5b 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007f74:	7ffb      	ldrb	r3, [r7, #31]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d108      	bne.n	8007f8c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f944 	bl	8008210 <HAL_QSPI_Abort>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f94:	e00a      	b.n	8007fac <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	f043 0208 	orr.w	r2, r3, #8
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	77fb      	strb	r3, [r7, #31]
 8007fa6:	e001      	b.n	8007fac <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	af02      	add	r7, sp, #8
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007fcc:	f7fb fffc 	bl	8003fc8 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_QSPI_AutoPolling+0x24>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e060      	b.n	80080a4 <HAL_QSPI_AutoPolling+0xe6>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d14f      	bne.n	8008096 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2242      	movs	r2, #66	; 0x42
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2200      	movs	r2, #0
 800800c:	2120      	movs	r1, #32
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa09 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d13d      	bne.n	800809a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6852      	ldr	r2, [r2, #4]
 8008030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	431a      	orrs	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008054:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800805e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fa15 	bl	8008494 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2201      	movs	r2, #1
 8008072:	2108      	movs	r1, #8
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f9d6 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2208      	movs	r2, #8
 800808a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008094:	e001      	b.n	800809a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008096:	2302      	movs	r3, #2
 8008098:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80080b8:	f7fb ff86 	bl	8003fc8 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_QSPI_MemoryMapped+0x22>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e04c      	b.n	8008168 <HAL_QSPI_MemoryMapped+0xbc>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d13b      	bne.n	800815a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2282      	movs	r2, #130	; 0x82
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2200      	movs	r2, #0
 80080fa:	2120      	movs	r1, #32
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f992 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d128      	bne.n	800815e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f023 0108 	bic.w	r1, r3, #8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b08      	cmp	r3, #8
 8008128:	d110      	bne.n	800814c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2210      	movs	r2, #16
 800813a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800814a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800814c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f99e 	bl	8008494 <QSPI_Config>
 8008158:	e001      	b.n	800815e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800815a:	2302      	movs	r3, #2
 800815c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800821c:	f7fb fed4 	bl	8003fc8 <HAL_GetTick>
 8008220:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d056      	beq.n	80082e0 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0204 	bic.w	r2, r2, #4
 8008256:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825c:	4618      	mov	r0, r3
 800825e:	f7fc fd33 	bl	8004cc8 <HAL_DMA_Abort>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	f043 0204 	orr.w	r2, r3, #4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0202 	orr.w	r2, r2, #2
 8008286:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2201      	movs	r2, #1
 8008292:	2102      	movs	r1, #2
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8c6 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10e      	bne.n	80082c2 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2202      	movs	r2, #2
 80082aa:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	2120      	movs	r1, #32
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8b4 	bl	8008426 <QSPI_WaitFlagStateUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80082d6:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d046      	beq.n	8008396 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2208      	movs	r2, #8
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008326:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01b      	beq.n	800836e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0204 	bic.w	r2, r2, #4
 8008344:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <HAL_QSPI_Abort_IT+0xb4>)
 800834c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	4618      	mov	r0, r3
 8008354:	f7fc fd28 	bl	8004da8 <HAL_DMA_Abort_IT>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01b      	beq.n	8008396 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff ff0c 	bl	8008184 <HAL_QSPI_AbortCpltCallback>
 800836c:	e013      	b.n	8008396 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2202      	movs	r2, #2
 8008374:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008384:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0202 	orr.w	r2, r2, #2
 8008394:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	080083c1 	.word	0x080083c1

080083a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d114      	bne.n	8008410 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2202      	movs	r2, #2
 80083ec:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80083fc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0202 	orr.w	r2, r2, #2
 800840c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800840e:	e006      	b.n	800841e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fea9 	bl	8008170 <HAL_QSPI_ErrorCallback>
}
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008436:	e01a      	b.n	800846e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843e:	d016      	beq.n	800846e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008440:	f7fb fdc2 	bl	8003fc8 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	429a      	cmp	r2, r3
 800844e:	d302      	bcc.n	8008456 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2204      	movs	r2, #4
 800845a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f043 0201 	orr.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e00e      	b.n	800848c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4013      	ands	r3, r2
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf14      	ite	ne
 800847c:	2301      	movne	r3, #1
 800847e:	2300      	moveq	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	429a      	cmp	r2, r3
 8008488:	d1d6      	bne.n	8008438 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d009      	beq.n	80084bc <QSPI_Config+0x28>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80084ae:	d005      	beq.n	80084bc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3a01      	subs	r2, #1
 80084ba:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80b9 	beq.w	8008638 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d05f      	beq.n	800858e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	6892      	ldr	r2, [r2, #8]
 80084d6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d031      	beq.n	8008544 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ee:	431a      	orrs	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	431a      	orrs	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	049b      	lsls	r3, r3, #18
 80084fc:	431a      	orrs	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	431a      	orrs	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	431a      	orrs	r2, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	431a      	orrs	r2, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	431a      	orrs	r2, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	431a      	orrs	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	ea42 0103 	orr.w	r1, r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	430a      	orrs	r2, r1
 800852c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008534:	f000 812e 	beq.w	8008794 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	6852      	ldr	r2, [r2, #4]
 8008540:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008542:	e127      	b.n	8008794 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	431a      	orrs	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008552:	431a      	orrs	r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	431a      	orrs	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	049b      	lsls	r3, r3, #18
 8008560:	431a      	orrs	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	431a      	orrs	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	431a      	orrs	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	431a      	orrs	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	431a      	orrs	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	ea42 0103 	orr.w	r1, r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	430a      	orrs	r2, r1
 800858a:	615a      	str	r2, [r3, #20]
}
 800858c:	e102      	b.n	8008794 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02e      	beq.n	80085f4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	431a      	orrs	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a4:	431a      	orrs	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	431a      	orrs	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	049b      	lsls	r3, r3, #18
 80085b2:	431a      	orrs	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	431a      	orrs	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	ea42 0103 	orr.w	r1, r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	430a      	orrs	r2, r1
 80085dc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80085e4:	f000 80d6 	beq.w	8008794 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	6852      	ldr	r2, [r2, #4]
 80085f0:	619a      	str	r2, [r3, #24]
}
 80085f2:	e0cf      	b.n	8008794 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	431a      	orrs	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	431a      	orrs	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	049b      	lsls	r3, r3, #18
 8008610:	431a      	orrs	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	431a      	orrs	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	431a      	orrs	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	431a      	orrs	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	ea42 0103 	orr.w	r1, r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	430a      	orrs	r2, r1
 8008634:	615a      	str	r2, [r3, #20]
}
 8008636:	e0ad      	b.n	8008794 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d058      	beq.n	80086f2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	6892      	ldr	r2, [r2, #8]
 8008648:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d02d      	beq.n	80086ae <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	431a      	orrs	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	431a      	orrs	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	431a      	orrs	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	049b      	lsls	r3, r3, #18
 800866e:	431a      	orrs	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	431a      	orrs	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	431a      	orrs	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	431a      	orrs	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	431a      	orrs	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	ea42 0103 	orr.w	r1, r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	430a      	orrs	r2, r1
 8008698:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80086a0:	d078      	beq.n	8008794 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	6852      	ldr	r2, [r2, #4]
 80086aa:	619a      	str	r2, [r3, #24]
}
 80086ac:	e072      	b.n	8008794 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	431a      	orrs	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086bc:	431a      	orrs	r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	431a      	orrs	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	049b      	lsls	r3, r3, #18
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	431a      	orrs	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	ea42 0103 	orr.w	r1, r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	615a      	str	r2, [r3, #20]
}
 80086f0:	e050      	b.n	8008794 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d02a      	beq.n	8008750 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	431a      	orrs	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	431a      	orrs	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	431a      	orrs	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	049b      	lsls	r3, r3, #18
 8008716:	431a      	orrs	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	431a      	orrs	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	431a      	orrs	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	431a      	orrs	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	ea42 0103 	orr.w	r1, r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	430a      	orrs	r2, r1
 800873a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008742:	d027      	beq.n	8008794 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	619a      	str	r2, [r3, #24]
}
 800874e:	e021      	b.n	8008794 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01d      	beq.n	8008794 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	431a      	orrs	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	431a      	orrs	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	431a      	orrs	r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	049b      	lsls	r3, r3, #18
 8008774:	431a      	orrs	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	431a      	orrs	r2, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	431a      	orrs	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	ea42 0103 	orr.w	r1, r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	430a      	orrs	r2, r1
 8008792:	615a      	str	r2, [r3, #20]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e291      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8087 	beq.w	80088d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087c4:	4b96      	ldr	r3, [pc, #600]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f003 030c 	and.w	r3, r3, #12
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d00c      	beq.n	80087ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087d0:	4b93      	ldr	r3, [pc, #588]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 030c 	and.w	r3, r3, #12
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d112      	bne.n	8008802 <HAL_RCC_OscConfig+0x62>
 80087dc:	4b90      	ldr	r3, [pc, #576]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087e8:	d10b      	bne.n	8008802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ea:	4b8d      	ldr	r3, [pc, #564]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d06c      	beq.n	80088d0 <HAL_RCC_OscConfig+0x130>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d168      	bne.n	80088d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e26b      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880a:	d106      	bne.n	800881a <HAL_RCC_OscConfig+0x7a>
 800880c:	4b84      	ldr	r3, [pc, #528]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a83      	ldr	r2, [pc, #524]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e02e      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x9c>
 8008822:	4b7f      	ldr	r3, [pc, #508]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a7e      	ldr	r2, [pc, #504]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4b7c      	ldr	r3, [pc, #496]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a7b      	ldr	r2, [pc, #492]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e01d      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008844:	d10c      	bne.n	8008860 <HAL_RCC_OscConfig+0xc0>
 8008846:	4b76      	ldr	r3, [pc, #472]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a75      	ldr	r2, [pc, #468]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800884c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	4b73      	ldr	r3, [pc, #460]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a72      	ldr	r2, [pc, #456]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e00b      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 8008860:	4b6f      	ldr	r3, [pc, #444]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a6e      	ldr	r2, [pc, #440]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	4b6c      	ldr	r3, [pc, #432]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a6b      	ldr	r2, [pc, #428]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fb fba2 	bl	8003fc8 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008888:	f7fb fb9e 	bl	8003fc8 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	; 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e21f      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889a:	4b61      	ldr	r3, [pc, #388]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0xe8>
 80088a6:	e014      	b.n	80088d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fb fb8e 	bl	8003fc8 <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088b0:	f7fb fb8a 	bl	8003fc8 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b64      	cmp	r3, #100	; 0x64
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e20b      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c2:	4b57      	ldr	r3, [pc, #348]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x110>
 80088ce:	e000      	b.n	80088d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d069      	beq.n	80089b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088de:	4b50      	ldr	r3, [pc, #320]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00b      	beq.n	8008902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ea:	4b4d      	ldr	r3, [pc, #308]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d11c      	bne.n	8008930 <HAL_RCC_OscConfig+0x190>
 80088f6:	4b4a      	ldr	r3, [pc, #296]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d116      	bne.n	8008930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008902:	4b47      	ldr	r3, [pc, #284]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <HAL_RCC_OscConfig+0x17a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d001      	beq.n	800891a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e1df      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891a:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	493d      	ldr	r1, [pc, #244]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800892a:	4313      	orrs	r3, r2
 800892c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800892e:	e040      	b.n	80089b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d023      	beq.n	8008980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008938:	4b39      	ldr	r3, [pc, #228]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a38      	ldr	r2, [pc, #224]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008944:	f7fb fb40 	bl	8003fc8 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800894c:	f7fb fb3c 	bl	8003fc8 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e1bd      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895e:	4b30      	ldr	r3, [pc, #192]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800896a:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	4929      	ldr	r1, [pc, #164]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 800897a:	4313      	orrs	r3, r2
 800897c:	600b      	str	r3, [r1, #0]
 800897e:	e018      	b.n	80089b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008980:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fb fb1c 	bl	8003fc8 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008994:	f7fb fb18 	bl	8003fc8 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e199      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089a6:	4b1e      	ldr	r3, [pc, #120]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d038      	beq.n	8008a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d019      	beq.n	80089fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089c6:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80089c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d2:	f7fb faf9 	bl	8003fc8 <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089d8:	e008      	b.n	80089ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089da:	f7fb faf5 	bl	8003fc8 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e176      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80089ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0f0      	beq.n	80089da <HAL_RCC_OscConfig+0x23a>
 80089f8:	e01a      	b.n	8008a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089fa:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 80089fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089fe:	4a08      	ldr	r2, [pc, #32]	; (8008a20 <HAL_RCC_OscConfig+0x280>)
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a06:	f7fb fadf 	bl	8003fc8 <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a0c:	e00a      	b.n	8008a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a0e:	f7fb fadb 	bl	8003fc8 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d903      	bls.n	8008a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e15c      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
 8008a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a24:	4b91      	ldr	r3, [pc, #580]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1ee      	bne.n	8008a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80a4 	beq.w	8008b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a3e:	4b8b      	ldr	r3, [pc, #556]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10d      	bne.n	8008a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a4a:	4b88      	ldr	r3, [pc, #544]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	4a87      	ldr	r2, [pc, #540]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a54:	6413      	str	r3, [r2, #64]	; 0x40
 8008a56:	4b85      	ldr	r3, [pc, #532]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a5e:	60bb      	str	r3, [r7, #8]
 8008a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a66:	4b82      	ldr	r3, [pc, #520]	; (8008c70 <HAL_RCC_OscConfig+0x4d0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d118      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008a72:	4b7f      	ldr	r3, [pc, #508]	; (8008c70 <HAL_RCC_OscConfig+0x4d0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a7e      	ldr	r2, [pc, #504]	; (8008c70 <HAL_RCC_OscConfig+0x4d0>)
 8008a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a7e:	f7fb faa3 	bl	8003fc8 <HAL_GetTick>
 8008a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a84:	e008      	b.n	8008a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a86:	f7fb fa9f 	bl	8003fc8 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	2b64      	cmp	r3, #100	; 0x64
 8008a92:	d901      	bls.n	8008a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e120      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a98:	4b75      	ldr	r3, [pc, #468]	; (8008c70 <HAL_RCC_OscConfig+0x4d0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0f0      	beq.n	8008a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d106      	bne.n	8008aba <HAL_RCC_OscConfig+0x31a>
 8008aac:	4b6f      	ldr	r3, [pc, #444]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	4a6e      	ldr	r2, [pc, #440]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab8:	e02d      	b.n	8008b16 <HAL_RCC_OscConfig+0x376>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCC_OscConfig+0x33c>
 8008ac2:	4b6a      	ldr	r3, [pc, #424]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac6:	4a69      	ldr	r2, [pc, #420]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ace:	4b67      	ldr	r3, [pc, #412]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad2:	4a66      	ldr	r2, [pc, #408]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ad4:	f023 0304 	bic.w	r3, r3, #4
 8008ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8008ada:	e01c      	b.n	8008b16 <HAL_RCC_OscConfig+0x376>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	d10c      	bne.n	8008afe <HAL_RCC_OscConfig+0x35e>
 8008ae4:	4b61      	ldr	r3, [pc, #388]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae8:	4a60      	ldr	r2, [pc, #384]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008aea:	f043 0304 	orr.w	r3, r3, #4
 8008aee:	6713      	str	r3, [r2, #112]	; 0x70
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	4a5d      	ldr	r2, [pc, #372]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	6713      	str	r3, [r2, #112]	; 0x70
 8008afc:	e00b      	b.n	8008b16 <HAL_RCC_OscConfig+0x376>
 8008afe:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	4a5a      	ldr	r2, [pc, #360]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0a:	4b58      	ldr	r3, [pc, #352]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0e:	4a57      	ldr	r2, [pc, #348]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d015      	beq.n	8008b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b1e:	f7fb fa53 	bl	8003fc8 <HAL_GetTick>
 8008b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b24:	e00a      	b.n	8008b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b26:	f7fb fa4f 	bl	8003fc8 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e0ce      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b3c:	4b4b      	ldr	r3, [pc, #300]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0ee      	beq.n	8008b26 <HAL_RCC_OscConfig+0x386>
 8008b48:	e014      	b.n	8008b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b4a:	f7fb fa3d 	bl	8003fc8 <HAL_GetTick>
 8008b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b50:	e00a      	b.n	8008b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b52:	f7fb fa39 	bl	8003fc8 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e0b8      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b68:	4b40      	ldr	r3, [pc, #256]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1ee      	bne.n	8008b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d105      	bne.n	8008b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b7a:	4b3c      	ldr	r3, [pc, #240]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	4a3b      	ldr	r2, [pc, #236]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80a4 	beq.w	8008cd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b90:	4b36      	ldr	r3, [pc, #216]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 030c 	and.w	r3, r3, #12
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d06b      	beq.n	8008c74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d149      	bne.n	8008c38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ba4:	4b31      	ldr	r3, [pc, #196]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a30      	ldr	r2, [pc, #192]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb0:	f7fb fa0a 	bl	8003fc8 <HAL_GetTick>
 8008bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bb8:	f7fb fa06 	bl	8003fc8 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e087      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bca:	4b28      	ldr	r3, [pc, #160]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f0      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69da      	ldr	r2, [r3, #28]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	019b      	lsls	r3, r3, #6
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	041b      	lsls	r3, r3, #16
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	061b      	lsls	r3, r3, #24
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c04:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c10:	f7fb f9da 	bl	8003fc8 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c16:	e008      	b.n	8008c2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c18:	f7fb f9d6 	bl	8003fc8 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e057      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c2a:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0f0      	beq.n	8008c18 <HAL_RCC_OscConfig+0x478>
 8008c36:	e04f      	b.n	8008cd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a0b      	ldr	r2, [pc, #44]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fb f9c0 	bl	8003fc8 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c4c:	f7fb f9bc 	bl	8003fc8 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e03d      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c5e:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <HAL_RCC_OscConfig+0x4cc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x4ac>
 8008c6a:	e035      	b.n	8008cd8 <HAL_RCC_OscConfig+0x538>
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008c74:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <HAL_RCC_OscConfig+0x544>)
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d028      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d121      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d11a      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008caa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d111      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d107      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d001      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40023800 	.word	0x40023800

08008ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0d0      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d00:	4b6a      	ldr	r3, [pc, #424]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d910      	bls.n	8008d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d0e:	4b67      	ldr	r3, [pc, #412]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f023 020f 	bic.w	r2, r3, #15
 8008d16:	4965      	ldr	r1, [pc, #404]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d1e:	4b63      	ldr	r3, [pc, #396]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 030f 	and.w	r3, r3, #15
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d001      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0b8      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d020      	beq.n	8008d7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d48:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	4a58      	ldr	r2, [pc, #352]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d60:	4b53      	ldr	r3, [pc, #332]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	4a52      	ldr	r2, [pc, #328]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d6c:	4b50      	ldr	r3, [pc, #320]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	494d      	ldr	r1, [pc, #308]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d040      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d107      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d92:	4b47      	ldr	r3, [pc, #284]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d115      	bne.n	8008dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e07f      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d107      	bne.n	8008dba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008daa:	4b41      	ldr	r3, [pc, #260]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d109      	bne.n	8008dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e073      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dba:	4b3d      	ldr	r3, [pc, #244]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e06b      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dca:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f023 0203 	bic.w	r2, r3, #3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4936      	ldr	r1, [pc, #216]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ddc:	f7fb f8f4 	bl	8003fc8 <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008de2:	e00a      	b.n	8008dfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008de4:	f7fb f8f0 	bl	8003fc8 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e053      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dfa:	4b2d      	ldr	r3, [pc, #180]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 020c 	and.w	r2, r3, #12
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d1eb      	bne.n	8008de4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e0c:	4b27      	ldr	r3, [pc, #156]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d210      	bcs.n	8008e3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1a:	4b24      	ldr	r3, [pc, #144]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f023 020f 	bic.w	r2, r3, #15
 8008e22:	4922      	ldr	r1, [pc, #136]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2a:	4b20      	ldr	r3, [pc, #128]	; (8008eac <HAL_RCC_ClockConfig+0x1c4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d001      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e032      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d008      	beq.n	8008e5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	4916      	ldr	r1, [pc, #88]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e66:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	490e      	ldr	r1, [pc, #56]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e7a:	f000 f821 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	091b      	lsrs	r3, r3, #4
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	490a      	ldr	r1, [pc, #40]	; (8008eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8008e8c:	5ccb      	ldrb	r3, [r1, r3]
 8008e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e92:	4a09      	ldr	r2, [pc, #36]	; (8008eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8008e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e96:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <HAL_RCC_ClockConfig+0x1d4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fa fbf8 	bl	8003690 <HAL_InitTick>

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	40023c00 	.word	0x40023c00
 8008eb0:	40023800 	.word	0x40023800
 8008eb4:	08013874 	.word	0x08013874
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	20000010 	.word	0x20000010

08008ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ec0:	b5b0      	push	{r4, r5, r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6079      	str	r1, [r7, #4]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	60f9      	str	r1, [r7, #12]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ed6:	4952      	ldr	r1, [pc, #328]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ed8:	6889      	ldr	r1, [r1, #8]
 8008eda:	f001 010c 	and.w	r1, r1, #12
 8008ede:	2908      	cmp	r1, #8
 8008ee0:	d00d      	beq.n	8008efe <HAL_RCC_GetSysClockFreq+0x3e>
 8008ee2:	2908      	cmp	r1, #8
 8008ee4:	f200 8094 	bhi.w	8009010 <HAL_RCC_GetSysClockFreq+0x150>
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d002      	beq.n	8008ef2 <HAL_RCC_GetSysClockFreq+0x32>
 8008eec:	2904      	cmp	r1, #4
 8008eee:	d003      	beq.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x38>
 8008ef0:	e08e      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ef2:	4b4c      	ldr	r3, [pc, #304]	; (8009024 <HAL_RCC_GetSysClockFreq+0x164>)
 8008ef4:	60bb      	str	r3, [r7, #8]
      break;
 8008ef6:	e08e      	b.n	8009016 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	; (8009028 <HAL_RCC_GetSysClockFreq+0x168>)
 8008efa:	60bb      	str	r3, [r7, #8]
      break;
 8008efc:	e08b      	b.n	8009016 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008efe:	4948      	ldr	r1, [pc, #288]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f00:	6849      	ldr	r1, [r1, #4]
 8008f02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008f06:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008f08:	4945      	ldr	r1, [pc, #276]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f0a:	6849      	ldr	r1, [r1, #4]
 8008f0c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d024      	beq.n	8008f5e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f14:	4942      	ldr	r1, [pc, #264]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f16:	6849      	ldr	r1, [r1, #4]
 8008f18:	0989      	lsrs	r1, r1, #6
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	f04f 0100 	mov.w	r1, #0
 8008f20:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008f24:	f04f 0500 	mov.w	r5, #0
 8008f28:	ea00 0204 	and.w	r2, r0, r4
 8008f2c:	ea01 0305 	and.w	r3, r1, r5
 8008f30:	493d      	ldr	r1, [pc, #244]	; (8009028 <HAL_RCC_GetSysClockFreq+0x168>)
 8008f32:	fb01 f003 	mul.w	r0, r1, r3
 8008f36:	2100      	movs	r1, #0
 8008f38:	fb01 f102 	mul.w	r1, r1, r2
 8008f3c:	1844      	adds	r4, r0, r1
 8008f3e:	493a      	ldr	r1, [pc, #232]	; (8009028 <HAL_RCC_GetSysClockFreq+0x168>)
 8008f40:	fba2 0101 	umull	r0, r1, r2, r1
 8008f44:	1863      	adds	r3, r4, r1
 8008f46:	4619      	mov	r1, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	f7f7 fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4613      	mov	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e04a      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f5e:	4b30      	ldr	r3, [pc, #192]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	099b      	lsrs	r3, r3, #6
 8008f64:	461a      	mov	r2, r3
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f6e:	f04f 0100 	mov.w	r1, #0
 8008f72:	ea02 0400 	and.w	r4, r2, r0
 8008f76:	ea03 0501 	and.w	r5, r3, r1
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	014b      	lsls	r3, r1, #5
 8008f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f8c:	0142      	lsls	r2, r0, #5
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	1b00      	subs	r0, r0, r4
 8008f94:	eb61 0105 	sbc.w	r1, r1, r5
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	f04f 0300 	mov.w	r3, #0
 8008fa0:	018b      	lsls	r3, r1, #6
 8008fa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008fa6:	0182      	lsls	r2, r0, #6
 8008fa8:	1a12      	subs	r2, r2, r0
 8008faa:	eb63 0301 	sbc.w	r3, r3, r1
 8008fae:	f04f 0000 	mov.w	r0, #0
 8008fb2:	f04f 0100 	mov.w	r1, #0
 8008fb6:	00d9      	lsls	r1, r3, #3
 8008fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fbc:	00d0      	lsls	r0, r2, #3
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	1912      	adds	r2, r2, r4
 8008fc4:	eb45 0303 	adc.w	r3, r5, r3
 8008fc8:	f04f 0000 	mov.w	r0, #0
 8008fcc:	f04f 0100 	mov.w	r1, #0
 8008fd0:	0299      	lsls	r1, r3, #10
 8008fd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008fd6:	0290      	lsls	r0, r2, #10
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	f7f7 fe4e 	bl	8000c88 <__aeabi_uldivmod>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	0c1b      	lsrs	r3, r3, #16
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	3301      	adds	r3, #1
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	fbb2 f3f3 	udiv	r3, r2, r3
 800900c:	60bb      	str	r3, [r7, #8]
      break;
 800900e:	e002      	b.n	8009016 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <HAL_RCC_GetSysClockFreq+0x164>)
 8009012:	60bb      	str	r3, [r7, #8]
      break;
 8009014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009016:	68bb      	ldr	r3, [r7, #8]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bdb0      	pop	{r4, r5, r7, pc}
 8009020:	40023800 	.word	0x40023800
 8009024:	00f42400 	.word	0x00f42400
 8009028:	017d7840 	.word	0x017d7840

0800902c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <HAL_RCC_GetHCLKFreq+0x14>)
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000000 	.word	0x20000000

08009044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009048:	f7ff fff0 	bl	800902c <HAL_RCC_GetHCLKFreq>
 800904c:	4602      	mov	r2, r0
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	0a9b      	lsrs	r3, r3, #10
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	4903      	ldr	r1, [pc, #12]	; (8009068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800905a:	5ccb      	ldrb	r3, [r1, r3]
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	40023800 	.word	0x40023800
 8009068:	08013884 	.word	0x08013884

0800906c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009070:	f7ff ffdc 	bl	800902c <HAL_RCC_GetHCLKFreq>
 8009074:	4602      	mov	r2, r0
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	0b5b      	lsrs	r3, r3, #13
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	4903      	ldr	r1, [pc, #12]	; (8009090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009082:	5ccb      	ldrb	r3, [r1, r3]
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009088:	4618      	mov	r0, r3
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40023800 	.word	0x40023800
 8009090:	08013884 	.word	0x08013884

08009094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	220f      	movs	r2, #15
 80090a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <HAL_RCC_GetClockConfig+0x5c>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0203 	and.w	r2, r3, #3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <HAL_RCC_GetClockConfig+0x5c>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <HAL_RCC_GetClockConfig+0x5c>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <HAL_RCC_GetClockConfig+0x5c>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80090d6:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <HAL_RCC_GetClockConfig+0x60>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 020f 	and.w	r2, r3, #15
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	601a      	str	r2, [r3, #0]
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40023800 	.word	0x40023800
 80090f4:	40023c00 	.word	0x40023c00

080090f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d012      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009120:	4b69      	ldr	r3, [pc, #420]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a68      	ldr	r2, [pc, #416]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800912a:	6093      	str	r3, [r2, #8]
 800912c:	4b66      	ldr	r3, [pc, #408]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009134:	4964      	ldr	r1, [pc, #400]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009136:	4313      	orrs	r3, r2
 8009138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009142:	2301      	movs	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d017      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009152:	4b5d      	ldr	r3, [pc, #372]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009160:	4959      	ldr	r1, [pc, #356]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009162:	4313      	orrs	r3, r2
 8009164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009170:	d101      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009172:	2301      	movs	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800917e:	2301      	movs	r3, #1
 8009180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d017      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800918e:	4b4e      	ldr	r3, [pc, #312]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	494a      	ldr	r1, [pc, #296]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091ac:	d101      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80091ca:	2301      	movs	r3, #1
 80091cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 808b 	beq.w	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80091dc:	4b3a      	ldr	r3, [pc, #232]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	4a39      	ldr	r2, [pc, #228]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e6:	6413      	str	r3, [r2, #64]	; 0x40
 80091e8:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091f4:	4b35      	ldr	r3, [pc, #212]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a34      	ldr	r2, [pc, #208]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009200:	f7fa fee2 	bl	8003fc8 <HAL_GetTick>
 8009204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009206:	e008      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009208:	f7fa fede 	bl	8003fc8 <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b64      	cmp	r3, #100	; 0x64
 8009214:	d901      	bls.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e357      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800921a:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f0      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009226:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d035      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d02e      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009244:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800924c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800924e:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009258:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800925a:	4b1b      	ldr	r3, [pc, #108]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	4a1a      	ldr	r2, [pc, #104]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009266:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800926c:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800926e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b01      	cmp	r3, #1
 8009276:	d114      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009278:	f7fa fea6 	bl	8003fc8 <HAL_GetTick>
 800927c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800927e:	e00a      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009280:	f7fa fea2 	bl	8003fc8 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	f241 3288 	movw	r2, #5000	; 0x1388
 800928e:	4293      	cmp	r3, r2
 8009290:	d901      	bls.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e319      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0ee      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092ae:	d111      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092bc:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80092be:	400b      	ands	r3, r1
 80092c0:	4901      	ldr	r1, [pc, #4]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	608b      	str	r3, [r1, #8]
 80092c6:	e00b      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80092c8:	40023800 	.word	0x40023800
 80092cc:	40007000 	.word	0x40007000
 80092d0:	0ffffcff 	.word	0x0ffffcff
 80092d4:	4bb1      	ldr	r3, [pc, #708]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	4ab0      	ldr	r2, [pc, #704]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80092da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80092de:	6093      	str	r3, [r2, #8]
 80092e0:	4bae      	ldr	r3, [pc, #696]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80092e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092ec:	49ab      	ldr	r1, [pc, #684]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092fe:	4ba7      	ldr	r3, [pc, #668]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009304:	4aa5      	ldr	r2, [pc, #660]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800930a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800930e:	4ba3      	ldr	r3, [pc, #652]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	49a0      	ldr	r1, [pc, #640]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800931a:	4313      	orrs	r3, r2
 800931c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800932c:	4b9b      	ldr	r3, [pc, #620]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933a:	4998      	ldr	r1, [pc, #608]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800933c:	4313      	orrs	r3, r2
 800933e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800934e:	4b93      	ldr	r3, [pc, #588]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935c:	498f      	ldr	r1, [pc, #572]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009370:	4b8a      	ldr	r3, [pc, #552]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937e:	4987      	ldr	r1, [pc, #540]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009392:	4b82      	ldr	r3, [pc, #520]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a0:	497e      	ldr	r1, [pc, #504]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093b4:	4b79      	ldr	r3, [pc, #484]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	f023 0203 	bic.w	r2, r3, #3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c2:	4976      	ldr	r1, [pc, #472]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093d6:	4b71      	ldr	r3, [pc, #452]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093dc:	f023 020c 	bic.w	r2, r3, #12
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e4:	496d      	ldr	r1, [pc, #436]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00a      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093f8:	4b68      	ldr	r3, [pc, #416]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009406:	4965      	ldr	r1, [pc, #404]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009408:	4313      	orrs	r3, r2
 800940a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800941a:	4b60      	ldr	r3, [pc, #384]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800941c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009428:	495c      	ldr	r1, [pc, #368]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800943c:	4b57      	ldr	r3, [pc, #348]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	4954      	ldr	r1, [pc, #336]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800945e:	4b4f      	ldr	r3, [pc, #316]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946c:	494b      	ldr	r1, [pc, #300]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009480:	4b46      	ldr	r3, [pc, #280]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800948e:	4943      	ldr	r1, [pc, #268]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80094a2:	4b3e      	ldr	r3, [pc, #248]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b0:	493a      	ldr	r1, [pc, #232]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094c4:	4b35      	ldr	r3, [pc, #212]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d2:	4932      	ldr	r1, [pc, #200]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d011      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80094e6:	4b2d      	ldr	r3, [pc, #180]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f4:	4929      	ldr	r1, [pc, #164]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009504:	d101      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009506:	2301      	movs	r3, #1
 8009508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009516:	2301      	movs	r3, #1
 8009518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009526:	4b1d      	ldr	r3, [pc, #116]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800952c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009534:	4919      	ldr	r1, [pc, #100]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009536:	4313      	orrs	r3, r2
 8009538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009548:	4b14      	ldr	r3, [pc, #80]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800954a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800954e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009558:	4910      	ldr	r1, [pc, #64]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800955a:	4313      	orrs	r3, r2
 800955c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d006      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80d9 	beq.w	8009726 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a08      	ldr	r2, [pc, #32]	; (800959c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800957a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800957e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009580:	f7fa fd22 	bl	8003fc8 <HAL_GetTick>
 8009584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009586:	e00b      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009588:	f7fa fd1e 	bl	8003fc8 <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b64      	cmp	r3, #100	; 0x64
 8009594:	d904      	bls.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e197      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800959a:	bf00      	nop
 800959c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095a0:	4b6c      	ldr	r3, [pc, #432]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1ed      	bne.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d021      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11d      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80095c0:	4b64      	ldr	r3, [pc, #400]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095ce:	4b61      	ldr	r3, [pc, #388]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d4:	0e1b      	lsrs	r3, r3, #24
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	019a      	lsls	r2, r3, #6
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	041b      	lsls	r3, r3, #16
 80095e6:	431a      	orrs	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	061b      	lsls	r3, r3, #24
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	071b      	lsls	r3, r3, #28
 80095f4:	4957      	ldr	r1, [pc, #348]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009610:	d00a      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800961a:	2b00      	cmp	r3, #0
 800961c:	d02e      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009626:	d129      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009628:	4b4a      	ldr	r3, [pc, #296]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	f003 0303 	and.w	r3, r3, #3
 8009634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009636:	4b47      	ldr	r3, [pc, #284]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963c:	0f1b      	lsrs	r3, r3, #28
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	019a      	lsls	r2, r3, #6
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	041b      	lsls	r3, r3, #16
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	061b      	lsls	r3, r3, #24
 8009656:	431a      	orrs	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	071b      	lsls	r3, r3, #28
 800965c:	493d      	ldr	r1, [pc, #244]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009664:	4b3b      	ldr	r3, [pc, #236]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966a:	f023 021f 	bic.w	r2, r3, #31
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	3b01      	subs	r3, #1
 8009674:	4937      	ldr	r1, [pc, #220]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01d      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009688:	4b32      	ldr	r3, [pc, #200]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800968a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800968e:	0e1b      	lsrs	r3, r3, #24
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009696:	4b2f      	ldr	r3, [pc, #188]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800969c:	0f1b      	lsrs	r3, r3, #28
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	019a      	lsls	r2, r3, #6
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	431a      	orrs	r2, r3
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	431a      	orrs	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	071b      	lsls	r3, r3, #28
 80096bc:	4925      	ldr	r1, [pc, #148]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d011      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	019a      	lsls	r2, r3, #6
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	061b      	lsls	r3, r3, #24
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	071b      	lsls	r3, r3, #28
 80096ec:	4919      	ldr	r1, [pc, #100]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80096f4:	4b17      	ldr	r3, [pc, #92]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a16      	ldr	r2, [pc, #88]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009700:	f7fa fc62 	bl	8003fc8 <HAL_GetTick>
 8009704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009706:	e008      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009708:	f7fa fc5e 	bl	8003fc8 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b64      	cmp	r3, #100	; 0x64
 8009714:	d901      	bls.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e0d7      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800971a:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f0      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b01      	cmp	r3, #1
 800972a:	f040 80cd 	bne.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a08      	ldr	r2, [pc, #32]	; (8009754 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800973a:	f7fa fc45 	bl	8003fc8 <HAL_GetTick>
 800973e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009740:	e00a      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009742:	f7fa fc41 	bl	8003fc8 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b64      	cmp	r3, #100	; 0x64
 800974e:	d903      	bls.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e0ba      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009758:	4b5e      	ldr	r3, [pc, #376]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009764:	d0ed      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009782:	2b00      	cmp	r3, #0
 8009784:	d02e      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d12a      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800978e:	4b51      	ldr	r3, [pc, #324]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800979c:	4b4d      	ldr	r3, [pc, #308]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a2:	0f1b      	lsrs	r3, r3, #28
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	019a      	lsls	r2, r3, #6
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	061b      	lsls	r3, r3, #24
 80097bc:	431a      	orrs	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	071b      	lsls	r3, r3, #28
 80097c2:	4944      	ldr	r1, [pc, #272]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80097ca:	4b42      	ldr	r3, [pc, #264]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d8:	3b01      	subs	r3, #1
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	493d      	ldr	r1, [pc, #244]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d022      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097f8:	d11d      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80097fa:	4b36      	ldr	r3, [pc, #216]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80097fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009800:	0e1b      	lsrs	r3, r3, #24
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009808:	4b32      	ldr	r3, [pc, #200]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800980a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980e:	0f1b      	lsrs	r3, r3, #28
 8009810:	f003 0307 	and.w	r3, r3, #7
 8009814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	019a      	lsls	r2, r3, #6
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	431a      	orrs	r2, r3
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	061b      	lsls	r3, r3, #24
 8009828:	431a      	orrs	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	071b      	lsls	r3, r3, #28
 800982e:	4929      	ldr	r1, [pc, #164]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009830:	4313      	orrs	r3, r2
 8009832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d028      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009842:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009848:	0e1b      	lsrs	r3, r3, #24
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009850:	4b20      	ldr	r3, [pc, #128]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	019a      	lsls	r2, r3, #6
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	041b      	lsls	r3, r3, #16
 8009868:	431a      	orrs	r2, r3
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	061b      	lsls	r3, r3, #24
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	071b      	lsls	r3, r3, #28
 8009876:	4917      	ldr	r1, [pc, #92]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009878:	4313      	orrs	r3, r2
 800987a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800987e:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4911      	ldr	r1, [pc, #68]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a0e      	ldr	r2, [pc, #56]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800989a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800989e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a0:	f7fa fb92 	bl	8003fc8 <HAL_GetTick>
 80098a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098a6:	e008      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80098a8:	f7fa fb8e 	bl	8003fc8 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	2b64      	cmp	r3, #100	; 0x64
 80098b4:	d901      	bls.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e007      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098c6:	d1ef      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40023800 	.word	0x40023800

080098d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098f6:	f040 808c 	bne.w	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80098fa:	4b95      	ldr	r3, [pc, #596]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009900:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009908:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009910:	d07c      	beq.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009918:	d87d      	bhi.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009926:	d039      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009928:	e075      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800992a:	4b89      	ldr	r3, [pc, #548]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d108      	bne.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009936:	4b86      	ldr	r3, [pc, #536]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800993e:	4a85      	ldr	r2, [pc, #532]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009940:	fbb2 f3f3 	udiv	r3, r2, r3
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	e007      	b.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009948:	4b81      	ldr	r3, [pc, #516]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009950:	4a81      	ldr	r2, [pc, #516]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009952:	fbb2 f3f3 	udiv	r3, r2, r3
 8009956:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009958:	4b7d      	ldr	r3, [pc, #500]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	0e1b      	lsrs	r3, r3, #24
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009966:	4b7a      	ldr	r3, [pc, #488]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996c:	099b      	lsrs	r3, r3, #6
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	fb02 f203 	mul.w	r2, r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	fbb2 f3f3 	udiv	r3, r2, r3
 800997e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009980:	4b73      	ldr	r3, [pc, #460]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	617b      	str	r3, [r7, #20]
        break;
 800999a:	e03d      	b.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800999c:	4b6c      	ldr	r3, [pc, #432]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d108      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80099a8:	4b69      	ldr	r3, [pc, #420]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b0:	4a68      	ldr	r2, [pc, #416]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80099b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	e007      	b.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80099ba:	4b65      	ldr	r3, [pc, #404]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099c2:	4a65      	ldr	r2, [pc, #404]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80099c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80099ca:	4b61      	ldr	r3, [pc, #388]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d0:	0e1b      	lsrs	r3, r3, #24
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80099d8:	4b5d      	ldr	r3, [pc, #372]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099de:	099b      	lsrs	r3, r3, #6
 80099e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	fb02 f203 	mul.w	r2, r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80099f2:	4b57      	ldr	r3, [pc, #348]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	3301      	adds	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a08:	617b      	str	r3, [r7, #20]
        break;
 8009a0a:	e005      	b.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a0c:	4b53      	ldr	r3, [pc, #332]	; (8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009a0e:	617b      	str	r3, [r7, #20]
        break;
 8009a10:	e002      	b.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009a12:	bf00      	nop
 8009a14:	e000      	b.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009a16:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a1e:	f040 808c 	bne.w	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009a22:	4b4b      	ldr	r3, [pc, #300]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009a30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a38:	d07c      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a40:	d87d      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a4e:	d039      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009a50:	e075      	b.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009a52:	4b3f      	ldr	r3, [pc, #252]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d108      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a5e:	4b3c      	ldr	r3, [pc, #240]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a66:	4a3b      	ldr	r2, [pc, #236]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	e007      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a70:	4b37      	ldr	r3, [pc, #220]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a78:	4a37      	ldr	r2, [pc, #220]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009a80:	4b33      	ldr	r3, [pc, #204]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a86:	0e1b      	lsrs	r3, r3, #24
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009a8e:	4b30      	ldr	r3, [pc, #192]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a94:	099b      	lsrs	r3, r3, #6
 8009a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	fb02 f203 	mul.w	r2, r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009aa8:	4b29      	ldr	r3, [pc, #164]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	f003 031f 	and.w	r3, r3, #31
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac0:	617b      	str	r3, [r7, #20]
        break;
 8009ac2:	e03d      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009ac4:	4b22      	ldr	r3, [pc, #136]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d108      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ad0:	4b1f      	ldr	r3, [pc, #124]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ad8:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e007      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ae2:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aea:	4a1b      	ldr	r2, [pc, #108]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009af2:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af8:	0e1b      	lsrs	r3, r3, #24
 8009afa:	f003 030f 	and.w	r3, r3, #15
 8009afe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009b00:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b06:	099b      	lsrs	r3, r3, #6
 8009b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	fb02 f203 	mul.w	r2, r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b18:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	3301      	adds	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b30:	617b      	str	r3, [r7, #20]
        break;
 8009b32:	e005      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009b36:	617b      	str	r3, [r7, #20]
        break;
 8009b38:	e002      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8009b3e:	bf00      	nop

  return frequency;
 8009b40:	697b      	ldr	r3, [r7, #20]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40023800 	.word	0x40023800
 8009b54:	00f42400 	.word	0x00f42400
 8009b58:	017d7840 	.word	0x017d7840
 8009b5c:	00bb8000 	.word	0x00bb8000

08009b60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e081      	b.n	8009c76 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7f5b      	ldrb	r3, [r3, #29]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d105      	bne.n	8009b88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7f9 f99a 	bl	8002ebc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	22ca      	movs	r2, #202	; 0xca
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2253      	movs	r2, #83	; 0x53
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fb16 	bl	800a1d0 <RTC_EnterInitMode>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d008      	beq.n	8009bbc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	22ff      	movs	r2, #255	; 0xff
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e05c      	b.n	8009c76 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6899      	ldr	r1, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b2e      	ldr	r3, [pc, #184]	; (8009c80 <HAL_RTC_Init+0x120>)
 8009bc8:	400b      	ands	r3, r1
 8009bca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6899      	ldr	r1, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68d2      	ldr	r2, [r2, #12]
 8009bf2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6919      	ldr	r1, [r3, #16]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	041a      	lsls	r2, r3, #16
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c16:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10e      	bne.n	8009c44 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 faaa 	bl	800a180 <HAL_RTC_WaitForSynchro>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	22ff      	movs	r2, #255	; 0xff
 8009c38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2204      	movs	r2, #4
 8009c3e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e018      	b.n	8009c76 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0208 	bic.w	r2, r2, #8
 8009c52:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	22ff      	movs	r2, #255	; 0xff
 8009c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009c74:	2300      	movs	r3, #0
  }
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	ff8fffbf 	.word	0xff8fffbf

08009c84 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c84:	b590      	push	{r4, r7, lr}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	7f1b      	ldrb	r3, [r3, #28]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_RTC_SetTime+0x1c>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e0a8      	b.n	8009df2 <HAL_RTC_SetTime+0x16e>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d126      	bne.n	8009d00 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 faac 	bl	800a228 <RTC_ByteToBcd2>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	785b      	ldrb	r3, [r3, #1]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 faa5 	bl	800a228 <RTC_ByteToBcd2>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009ce2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fa9d 	bl	800a228 <RTC_ByteToBcd2>
 8009cee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009cf0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	7b1b      	ldrb	r3, [r3, #12]
 8009cf8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e018      	b.n	8009d32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2200      	movs	r2, #0
 8009d12:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009d20:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009d26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	7b1b      	ldrb	r3, [r3, #12]
 8009d2c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	22ca      	movs	r2, #202	; 0xca
 8009d38:	625a      	str	r2, [r3, #36]	; 0x24
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2253      	movs	r2, #83	; 0x53
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fa44 	bl	800a1d0 <RTC_EnterInitMode>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	22ff      	movs	r2, #255	; 0xff
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e045      	b.n	8009df2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	4b23      	ldr	r3, [pc, #140]	; (8009dfc <HAL_RTC_SetTime+0x178>)
 8009d6e:	400b      	ands	r3, r1
 8009d70:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d80:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6899      	ldr	r1, [r3, #8]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	691a      	ldr	r2, [r3, #16]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	431a      	orrs	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009da8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d111      	bne.n	8009ddc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f9e1 	bl	800a180 <HAL_RTC_WaitForSynchro>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00b      	beq.n	8009ddc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	22ff      	movs	r2, #255	; 0xff
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e00a      	b.n	8009df2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	22ff      	movs	r2, #255	; 0xff
 8009de2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009df0:	2300      	movs	r3, #0
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	007f7f7f 	.word	0x007f7f7f

08009e00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	7f1b      	ldrb	r3, [r3, #28]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_RTC_SetDate+0x1c>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e092      	b.n	8009f42 <HAL_RTC_SetDate+0x142>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2202      	movs	r2, #2
 8009e26:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10e      	bne.n	8009e4c <HAL_RTC_SetDate+0x4c>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	f003 0310 	and.w	r3, r3, #16
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d008      	beq.n	8009e4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	f023 0310 	bic.w	r3, r3, #16
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	330a      	adds	r3, #10
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d11c      	bne.n	8009e8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	78db      	ldrb	r3, [r3, #3]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 f9e6 	bl	800a228 <RTC_ByteToBcd2>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f9df 	bl	800a228 <RTC_ByteToBcd2>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009e6e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	789b      	ldrb	r3, [r3, #2]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f9d7 	bl	800a228 <RTC_ByteToBcd2>
 8009e7a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009e7c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	e00e      	b.n	8009eaa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	78db      	ldrb	r3, [r3, #3]
 8009e90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009e98:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009e9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	22ca      	movs	r2, #202	; 0xca
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2253      	movs	r2, #83	; 0x53
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f988 	bl	800a1d0 <RTC_EnterInitMode>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00b      	beq.n	8009ede <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	22ff      	movs	r2, #255	; 0xff
 8009ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2204      	movs	r2, #4
 8009ed2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e031      	b.n	8009f42 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6979      	ldr	r1, [r7, #20]
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <HAL_RTC_SetDate+0x14c>)
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 0320 	and.w	r3, r3, #32
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d111      	bne.n	8009f2c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f939 	bl	800a180 <HAL_RTC_WaitForSynchro>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	22ff      	movs	r2, #255	; 0xff
 8009f1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2204      	movs	r2, #4
 8009f20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e00a      	b.n	8009f42 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	22ff      	movs	r2, #255	; 0xff
 8009f32:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2201      	movs	r2, #1
 8009f38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009f40:	2300      	movs	r3, #0
  }
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd90      	pop	{r4, r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	00ffff3f 	.word	0x00ffff3f

08009f50 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009f50:	b590      	push	{r4, r7, lr}
 8009f52:	b089      	sub	sp, #36	; 0x24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	7f1b      	ldrb	r3, [r3, #28]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <HAL_RTC_SetAlarm+0x24>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e101      	b.n	800a178 <HAL_RTC_SetAlarm+0x228>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d137      	bne.n	8009ff6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d102      	bne.n	8009f9a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2200      	movs	r2, #0
 8009f98:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f942 	bl	800a228 <RTC_ByteToBcd2>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	785b      	ldrb	r3, [r3, #1]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f93b 	bl	800a228 <RTC_ByteToBcd2>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009fb6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	789b      	ldrb	r3, [r3, #2]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f933 	bl	800a228 <RTC_ByteToBcd2>
 8009fc2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009fc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	7b1b      	ldrb	r3, [r3, #12]
 8009fcc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009fce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 f925 	bl	800a228 <RTC_ByteToBcd2>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009fe2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009fea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	e023      	b.n	800a03e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2200      	movs	r2, #0
 800a008:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a016:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a01c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	7b1b      	ldrb	r3, [r3, #12]
 800a022:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a024:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a02c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a02e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a034:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a03a:	4313      	orrs	r3, r2
 800a03c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	22ca      	movs	r2, #202	; 0xca
 800a050:	625a      	str	r2, [r3, #36]	; 0x24
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2253      	movs	r2, #83	; 0x53
 800a058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a062:	d13f      	bne.n	800a0e4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689a      	ldr	r2, [r3, #8]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a072:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a082:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a084:	f7f9 ffa0 	bl	8003fc8 <HAL_GetTick>
 800a088:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a08a:	e013      	b.n	800a0b4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a08c:	f7f9 ff9c 	bl	8003fc8 <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a09a:	d90b      	bls.n	800a0b4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	22ff      	movs	r2, #255	; 0xff
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2203      	movs	r2, #3
 800a0a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e061      	b.n	800a178 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0e4      	beq.n	800a08c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69fa      	ldr	r2, [r7, #28]
 800a0c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0e0:	609a      	str	r2, [r3, #8]
 800a0e2:	e03e      	b.n	800a162 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689a      	ldr	r2, [r3, #8]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a0f2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a102:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a104:	f7f9 ff60 	bl	8003fc8 <HAL_GetTick>
 800a108:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a10a:	e013      	b.n	800a134 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a10c:	f7f9 ff5c 	bl	8003fc8 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a11a:	d90b      	bls.n	800a134 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	22ff      	movs	r2, #255	; 0xff
 800a122:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2203      	movs	r2, #3
 800a128:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e021      	b.n	800a178 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0e4      	beq.n	800a10c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a160:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	22ff      	movs	r2, #255	; 0xff
 800a168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2201      	movs	r2, #1
 800a16e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3724      	adds	r7, #36	; 0x24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd90      	pop	{r4, r7, pc}

0800a180 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a19a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a19c:	f7f9 ff14 	bl	8003fc8 <HAL_GetTick>
 800a1a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a1a2:	e009      	b.n	800a1b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a1a4:	f7f9 ff10 	bl	8003fc8 <HAL_GetTick>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e007      	b.n	800a1c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0ee      	beq.n	800a1a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d119      	bne.n	800a21e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1f4:	f7f9 fee8 	bl	8003fc8 <HAL_GetTick>
 800a1f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a1fa:	e009      	b.n	800a210 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a1fc:	f7f9 fee4 	bl	8003fc8 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a20a:	d901      	bls.n	800a210 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e007      	b.n	800a220 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0ee      	beq.n	800a1fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a236:	e005      	b.n	800a244 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	3b0a      	subs	r3, #10
 800a242:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	2b09      	cmp	r3, #9
 800a248:	d8f6      	bhi.n	800a238 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	b2da      	uxtb	r2, r3
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	4313      	orrs	r3, r2
 800a256:	b2db      	uxtb	r3, r3
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	7f1b      	ldrb	r3, [r3, #28]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e03e      	b.n	800a2fe <HAL_RTCEx_SetTimeStamp+0x9a>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2201      	movs	r2, #1
 800a284:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2202      	movs	r2, #2
 800a28a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a294:	4013      	ands	r3, r2
 800a296:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	22ca      	movs	r2, #202	; 0xca
 800a2a6:	625a      	str	r2, [r3, #36]	; 0x24
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2253      	movs	r2, #83	; 0x53
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0206 	bic.w	r2, r2, #6
 800a2be:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	22ff      	movs	r2, #255	; 0xff
 800a2ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	fffff7f7 	.word	0xfffff7f7

0800a310 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e156      	b.n	800a5dc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7f9 f8aa 	bl	800349c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f95b 	bl	800a60c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d00c      	beq.n	800a378 <HAL_SAI_Init+0x68>
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d80d      	bhi.n	800a37e <HAL_SAI_Init+0x6e>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_SAI_Init+0x5c>
 800a366:	2b01      	cmp	r3, #1
 800a368:	d003      	beq.n	800a372 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a36a:	e008      	b.n	800a37e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	61fb      	str	r3, [r7, #28]
      break;
 800a370:	e006      	b.n	800a380 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a372:	2310      	movs	r3, #16
 800a374:	61fb      	str	r3, [r7, #28]
      break;
 800a376:	e003      	b.n	800a380 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a378:	2320      	movs	r3, #32
 800a37a:	61fb      	str	r3, [r7, #28]
      break;
 800a37c:	e000      	b.n	800a380 <HAL_SAI_Init+0x70>
      break;
 800a37e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b03      	cmp	r3, #3
 800a386:	d81e      	bhi.n	800a3c6 <HAL_SAI_Init+0xb6>
 800a388:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <HAL_SAI_Init+0x80>)
 800a38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38e:	bf00      	nop
 800a390:	0800a3a1 	.word	0x0800a3a1
 800a394:	0800a3a7 	.word	0x0800a3a7
 800a398:	0800a3af 	.word	0x0800a3af
 800a39c:	0800a3b7 	.word	0x0800a3b7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
    }
    break;
 800a3a4:	e010      	b.n	800a3c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3aa:	617b      	str	r3, [r7, #20]
    }
    break;
 800a3ac:	e00c      	b.n	800a3c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a3ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3b2:	617b      	str	r3, [r7, #20]
    }
    break;
 800a3b4:	e008      	b.n	800a3c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a3b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3ba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f043 0301 	orr.w	r3, r3, #1
 800a3c2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a3c4:	e000      	b.n	800a3c8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a3c6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a85      	ldr	r2, [pc, #532]	; (800a5e4 <HAL_SAI_Init+0x2d4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d004      	beq.n	800a3dc <HAL_SAI_Init+0xcc>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a84      	ldr	r2, [pc, #528]	; (800a5e8 <HAL_SAI_Init+0x2d8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d103      	bne.n	800a3e4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a3dc:	4a83      	ldr	r2, [pc, #524]	; (800a5ec <HAL_SAI_Init+0x2dc>)
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	e002      	b.n	800a3ea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a3e4:	4a82      	ldr	r2, [pc, #520]	; (800a5f0 <HAL_SAI_Init+0x2e0>)
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d04c      	beq.n	800a48c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a7a      	ldr	r2, [pc, #488]	; (800a5e4 <HAL_SAI_Init+0x2d4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_SAI_Init+0xfa>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a78      	ldr	r2, [pc, #480]	; (800a5e8 <HAL_SAI_Init+0x2d8>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d104      	bne.n	800a414 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a40a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a40e:	f7ff fa63 	bl	80098d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a412:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a76      	ldr	r2, [pc, #472]	; (800a5f4 <HAL_SAI_Init+0x2e4>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d004      	beq.n	800a428 <HAL_SAI_Init+0x118>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a75      	ldr	r2, [pc, #468]	; (800a5f8 <HAL_SAI_Init+0x2e8>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d104      	bne.n	800a432 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a428:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a42c:	f7ff fa54 	bl	80098d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a430:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	461a      	mov	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	025b      	lsls	r3, r3, #9
 800a444:	fbb2 f3f3 	udiv	r3, r2, r3
 800a448:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4a6b      	ldr	r2, [pc, #428]	; (800a5fc <HAL_SAI_Init+0x2ec>)
 800a44e:	fba2 2303 	umull	r2, r3, r2, r3
 800a452:	08da      	lsrs	r2, r3, #3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a458:	68f9      	ldr	r1, [r7, #12]
 800a45a:	4b68      	ldr	r3, [pc, #416]	; (800a5fc <HAL_SAI_Init+0x2ec>)
 800a45c:	fba3 2301 	umull	r2, r3, r3, r1
 800a460:	08da      	lsrs	r2, r3, #3
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	1aca      	subs	r2, r1, r3
 800a46c:	2a08      	cmp	r2, #8
 800a46e:	d904      	bls.n	800a47a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d104      	bne.n	800a48c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	085a      	lsrs	r2, r3, #1
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <HAL_SAI_Init+0x18c>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d109      	bne.n	800a4b0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d101      	bne.n	800a4a8 <HAL_SAI_Init+0x198>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e001      	b.n	800a4ac <HAL_SAI_Init+0x19c>
 800a4a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e008      	b.n	800a4c2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d102      	bne.n	800a4be <HAL_SAI_Init+0x1ae>
 800a4b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4bc:	e000      	b.n	800a4c0 <HAL_SAI_Init+0x1b0>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6819      	ldr	r1, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	4b4c      	ldr	r3, [pc, #304]	; (800a600 <HAL_SAI_Init+0x2f0>)
 800a4ce:	400b      	ands	r3, r1
 800a4d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6819      	ldr	r1, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a4e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a4fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a506:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	051b      	lsls	r3, r3, #20
 800a50e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6859      	ldr	r1, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b38      	ldr	r3, [pc, #224]	; (800a604 <HAL_SAI_Init+0x2f4>)
 800a524:	400b      	ands	r3, r1
 800a526:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6859      	ldr	r1, [r3, #4]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	431a      	orrs	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	431a      	orrs	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6899      	ldr	r1, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b2d      	ldr	r3, [pc, #180]	; (800a608 <HAL_SAI_Init+0x2f8>)
 800a552:	400b      	ands	r3, r1
 800a554:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6899      	ldr	r1, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a566:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a56c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a572:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a578:	3b01      	subs	r3, #1
 800a57a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a57c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68d9      	ldr	r1, [r3, #12]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a594:	400b      	ands	r3, r1
 800a596:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68d9      	ldr	r1, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ac:	041b      	lsls	r3, r3, #16
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	40015804 	.word	0x40015804
 800a5e8:	40015824 	.word	0x40015824
 800a5ec:	40015800 	.word	0x40015800
 800a5f0:	40015c00 	.word	0x40015c00
 800a5f4:	40015c04 	.word	0x40015c04
 800a5f8:	40015c24 	.word	0x40015c24
 800a5fc:	cccccccd 	.word	0xcccccccd
 800a600:	ff05c010 	.word	0xff05c010
 800a604:	ffff1ff0 	.word	0xffff1ff0
 800a608:	fff88000 	.word	0xfff88000

0800a60c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a614:	4b17      	ldr	r3, [pc, #92]	; (800a674 <SAI_Disable+0x68>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a17      	ldr	r2, [pc, #92]	; (800a678 <SAI_Disable+0x6c>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	0b1b      	lsrs	r3, r3, #12
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a636:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	1e5a      	subs	r2, r3, #1
 800a63c:	60fa      	str	r2, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	72fb      	strb	r3, [r7, #11]
      break;
 800a656:	e006      	b.n	800a666 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e8      	bne.n	800a638 <SAI_Disable+0x2c>

  return status;
 800a666:	7afb      	ldrb	r3, [r7, #11]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	20000000 	.word	0x20000000
 800a678:	95cbec1b 	.word	0x95cbec1b

0800a67c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e025      	b.n	800a6dc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7f8 feef 	bl	8003488 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f001 fe55 	bl	800c36c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	f001 febf 	bl	800c450 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d101      	bne.n	800a700 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e018      	b.n	800a732 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	4618      	mov	r0, r3
 800a712:	f001 ff1d 	bl	800c550 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d104      	bne.n	800a728 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2205      	movs	r2, #5
 800a722:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a726:	e003      	b.n	800a730 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d101      	bne.n	800a754 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a750:	2302      	movs	r3, #2
 800a752:	e00e      	b.n	800a772 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	4618      	mov	r0, r3
 800a764:	f001 ff18 	bl	800c598 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e04c      	b.n	800a828 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7f8 fba4 	bl	8002ef0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0203 	bic.w	r2, r2, #3
 800a7be:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4b19      	ldr	r3, [pc, #100]	; (800a830 <HAL_SPDIFRX_Init+0xb4>)
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a7d8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a7de:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a7e4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a7ea:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a7f0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a7f6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a7fc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a802:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a808:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	fff88407 	.word	0xfff88407

0800a834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e049      	b.n	800a8da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f8 fb8a 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3304      	adds	r3, #4
 800a870:	4619      	mov	r1, r3
 800a872:	4610      	mov	r0, r2
 800a874:	f000 fc22 	bl	800b0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d001      	beq.n	800a8fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e054      	b.n	800a9a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68da      	ldr	r2, [r3, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f042 0201 	orr.w	r2, r2, #1
 800a912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a26      	ldr	r2, [pc, #152]	; (800a9b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d022      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a926:	d01d      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a22      	ldr	r2, [pc, #136]	; (800a9b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d018      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a21      	ldr	r2, [pc, #132]	; (800a9bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d013      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a1f      	ldr	r2, [pc, #124]	; (800a9c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00e      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d009      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a1c      	ldr	r2, [pc, #112]	; (800a9c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d004      	beq.n	800a964 <HAL_TIM_Base_Start_IT+0x80>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a1b      	ldr	r2, [pc, #108]	; (800a9cc <HAL_TIM_Base_Start_IT+0xe8>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d115      	bne.n	800a990 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	4b19      	ldr	r3, [pc, #100]	; (800a9d0 <HAL_TIM_Base_Start_IT+0xec>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b06      	cmp	r3, #6
 800a974:	d015      	beq.n	800a9a2 <HAL_TIM_Base_Start_IT+0xbe>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97c:	d011      	beq.n	800a9a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f042 0201 	orr.w	r2, r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a98e:	e008      	b.n	800a9a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	e000      	b.n	800a9a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	40010000 	.word	0x40010000
 800a9b8:	40000400 	.word	0x40000400
 800a9bc:	40000800 	.word	0x40000800
 800a9c0:	40000c00 	.word	0x40000c00
 800a9c4:	40010400 	.word	0x40010400
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40001800 	.word	0x40001800
 800a9d0:	00010007 	.word	0x00010007

0800a9d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e049      	b.n	800aa7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7f8 fb28 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f000 fb52 	bl	800b0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d122      	bne.n	800aade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d11b      	bne.n	800aade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f06f 0202 	mvn.w	r2, #2
 800aaae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	f003 0303 	and.w	r3, r3, #3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fadb 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800aaca:	e005      	b.n	800aad8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 facd 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fade 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d122      	bne.n	800ab32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b04      	cmp	r3, #4
 800aaf8:	d11b      	bne.n	800ab32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f06f 0204 	mvn.w	r2, #4
 800ab02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fab1 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800ab1e:	e005      	b.n	800ab2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 faa3 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fab4 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d122      	bne.n	800ab86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f003 0308 	and.w	r3, r3, #8
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	d11b      	bne.n	800ab86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f06f 0208 	mvn.w	r2, #8
 800ab56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2204      	movs	r2, #4
 800ab5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	f003 0303 	and.w	r3, r3, #3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d003      	beq.n	800ab74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fa87 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800ab72:	e005      	b.n	800ab80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fa79 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa8a 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f003 0310 	and.w	r3, r3, #16
 800ab90:	2b10      	cmp	r3, #16
 800ab92:	d122      	bne.n	800abda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	f003 0310 	and.w	r3, r3, #16
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d11b      	bne.n	800abda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f06f 0210 	mvn.w	r2, #16
 800abaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2208      	movs	r2, #8
 800abb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fa5d 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800abc6:	e005      	b.n	800abd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fa4f 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa60 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d10e      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d107      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f06f 0201 	mvn.w	r2, #1
 800abfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7f7 fdd7 	bl	80027b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac10:	2b80      	cmp	r3, #128	; 0x80
 800ac12:	d10e      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1e:	2b80      	cmp	r3, #128	; 0x80
 800ac20:	d107      	bne.n	800ac32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fef3 	bl	800ba18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac40:	d10e      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4c:	2b80      	cmp	r3, #128	; 0x80
 800ac4e:	d107      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fee6 	bl	800ba2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6a:	2b40      	cmp	r3, #64	; 0x40
 800ac6c:	d10e      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	d107      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa0e 	bl	800b0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d10e      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d107      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0220 	mvn.w	r2, #32
 800acb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fea6 	bl	800ba04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d101      	bne.n	800acda <HAL_TIM_PWM_ConfigChannel+0x1a>
 800acd6:	2302      	movs	r3, #2
 800acd8:	e0fd      	b.n	800aed6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b14      	cmp	r3, #20
 800ace6:	f200 80f0 	bhi.w	800aeca <HAL_TIM_PWM_ConfigChannel+0x20a>
 800acea:	a201      	add	r2, pc, #4	; (adr r2, 800acf0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad45 	.word	0x0800ad45
 800acf4:	0800aecb 	.word	0x0800aecb
 800acf8:	0800aecb 	.word	0x0800aecb
 800acfc:	0800aecb 	.word	0x0800aecb
 800ad00:	0800ad85 	.word	0x0800ad85
 800ad04:	0800aecb 	.word	0x0800aecb
 800ad08:	0800aecb 	.word	0x0800aecb
 800ad0c:	0800aecb 	.word	0x0800aecb
 800ad10:	0800adc7 	.word	0x0800adc7
 800ad14:	0800aecb 	.word	0x0800aecb
 800ad18:	0800aecb 	.word	0x0800aecb
 800ad1c:	0800aecb 	.word	0x0800aecb
 800ad20:	0800ae07 	.word	0x0800ae07
 800ad24:	0800aecb 	.word	0x0800aecb
 800ad28:	0800aecb 	.word	0x0800aecb
 800ad2c:	0800aecb 	.word	0x0800aecb
 800ad30:	0800ae49 	.word	0x0800ae49
 800ad34:	0800aecb 	.word	0x0800aecb
 800ad38:	0800aecb 	.word	0x0800aecb
 800ad3c:	0800aecb 	.word	0x0800aecb
 800ad40:	0800ae89 	.word	0x0800ae89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fa56 	bl	800b1fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f042 0208 	orr.w	r2, r2, #8
 800ad5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699a      	ldr	r2, [r3, #24]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0204 	bic.w	r2, r2, #4
 800ad6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6999      	ldr	r1, [r3, #24]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	691a      	ldr	r2, [r3, #16]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	619a      	str	r2, [r3, #24]
      break;
 800ad82:	e0a3      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68b9      	ldr	r1, [r7, #8]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 faa8 	bl	800b2e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	699a      	ldr	r2, [r3, #24]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6999      	ldr	r1, [r3, #24]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	021a      	lsls	r2, r3, #8
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	619a      	str	r2, [r3, #24]
      break;
 800adc4:	e082      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 faff 	bl	800b3d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f042 0208 	orr.w	r2, r2, #8
 800ade0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69da      	ldr	r2, [r3, #28]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f022 0204 	bic.w	r2, r2, #4
 800adf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	69d9      	ldr	r1, [r3, #28]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	61da      	str	r2, [r3, #28]
      break;
 800ae04:	e062      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fb55 	bl	800b4bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69da      	ldr	r2, [r3, #28]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69da      	ldr	r2, [r3, #28]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69d9      	ldr	r1, [r3, #28]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	021a      	lsls	r2, r3, #8
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	61da      	str	r2, [r3, #28]
      break;
 800ae46:	e041      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68b9      	ldr	r1, [r7, #8]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fb8c 	bl	800b56c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0208 	orr.w	r2, r2, #8
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0204 	bic.w	r2, r2, #4
 800ae72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	691a      	ldr	r2, [r3, #16]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae86:	e021      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fbbe 	bl	800b610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	021a      	lsls	r2, r3, #8
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	430a      	orrs	r2, r1
 800aec6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aec8:	e000      	b.n	800aecc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800aeca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop

0800aee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d101      	bne.n	800aef8 <HAL_TIM_ConfigClockSource+0x18>
 800aef4:	2302      	movs	r3, #2
 800aef6:	e0b3      	b.n	800b060 <HAL_TIM_ConfigClockSource+0x180>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4b55      	ldr	r3, [pc, #340]	; (800b068 <HAL_TIM_ConfigClockSource+0x188>)
 800af14:	4013      	ands	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af30:	d03e      	beq.n	800afb0 <HAL_TIM_ConfigClockSource+0xd0>
 800af32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af36:	f200 8087 	bhi.w	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af3e:	f000 8085 	beq.w	800b04c <HAL_TIM_ConfigClockSource+0x16c>
 800af42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af46:	d87f      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af48:	2b70      	cmp	r3, #112	; 0x70
 800af4a:	d01a      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0xa2>
 800af4c:	2b70      	cmp	r3, #112	; 0x70
 800af4e:	d87b      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af50:	2b60      	cmp	r3, #96	; 0x60
 800af52:	d050      	beq.n	800aff6 <HAL_TIM_ConfigClockSource+0x116>
 800af54:	2b60      	cmp	r3, #96	; 0x60
 800af56:	d877      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af58:	2b50      	cmp	r3, #80	; 0x50
 800af5a:	d03c      	beq.n	800afd6 <HAL_TIM_ConfigClockSource+0xf6>
 800af5c:	2b50      	cmp	r3, #80	; 0x50
 800af5e:	d873      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af60:	2b40      	cmp	r3, #64	; 0x40
 800af62:	d058      	beq.n	800b016 <HAL_TIM_ConfigClockSource+0x136>
 800af64:	2b40      	cmp	r3, #64	; 0x40
 800af66:	d86f      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af68:	2b30      	cmp	r3, #48	; 0x30
 800af6a:	d064      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x156>
 800af6c:	2b30      	cmp	r3, #48	; 0x30
 800af6e:	d86b      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af70:	2b20      	cmp	r3, #32
 800af72:	d060      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x156>
 800af74:	2b20      	cmp	r3, #32
 800af76:	d867      	bhi.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d05c      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x156>
 800af7c:	2b10      	cmp	r3, #16
 800af7e:	d05a      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800af80:	e062      	b.n	800b048 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6899      	ldr	r1, [r3, #8]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f000 fc0b 	bl	800b7ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	609a      	str	r2, [r3, #8]
      break;
 800afae:	e04e      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	6899      	ldr	r1, [r3, #8]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f000 fbf4 	bl	800b7ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689a      	ldr	r2, [r3, #8]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afd2:	609a      	str	r2, [r3, #8]
      break;
 800afd4:	e03b      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6818      	ldr	r0, [r3, #0]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	6859      	ldr	r1, [r3, #4]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f000 fb68 	bl	800b6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2150      	movs	r1, #80	; 0x50
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fbc1 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800aff4:	e02b      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	6859      	ldr	r1, [r3, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	461a      	mov	r2, r3
 800b004:	f000 fb87 	bl	800b716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2160      	movs	r1, #96	; 0x60
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fbb1 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b014:	e01b      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6859      	ldr	r1, [r3, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	461a      	mov	r2, r3
 800b024:	f000 fb48 	bl	800b6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2140      	movs	r1, #64	; 0x40
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fba1 	bl	800b776 <TIM_ITRx_SetConfig>
      break;
 800b034:	e00b      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	4610      	mov	r0, r2
 800b042:	f000 fb98 	bl	800b776 <TIM_ITRx_SetConfig>
        break;
 800b046:	e002      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b048:	bf00      	nop
 800b04a:	e000      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b04c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	fffeff88 	.word	0xfffeff88

0800b06c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a40      	ldr	r2, [pc, #256]	; (800b1d0 <TIM_Base_SetConfig+0x114>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d013      	beq.n	800b0fc <TIM_Base_SetConfig+0x40>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0da:	d00f      	beq.n	800b0fc <TIM_Base_SetConfig+0x40>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a3d      	ldr	r2, [pc, #244]	; (800b1d4 <TIM_Base_SetConfig+0x118>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00b      	beq.n	800b0fc <TIM_Base_SetConfig+0x40>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a3c      	ldr	r2, [pc, #240]	; (800b1d8 <TIM_Base_SetConfig+0x11c>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d007      	beq.n	800b0fc <TIM_Base_SetConfig+0x40>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a3b      	ldr	r2, [pc, #236]	; (800b1dc <TIM_Base_SetConfig+0x120>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d003      	beq.n	800b0fc <TIM_Base_SetConfig+0x40>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a3a      	ldr	r2, [pc, #232]	; (800b1e0 <TIM_Base_SetConfig+0x124>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d108      	bne.n	800b10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a2f      	ldr	r2, [pc, #188]	; (800b1d0 <TIM_Base_SetConfig+0x114>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d02b      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11c:	d027      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a2c      	ldr	r2, [pc, #176]	; (800b1d4 <TIM_Base_SetConfig+0x118>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d023      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a2b      	ldr	r2, [pc, #172]	; (800b1d8 <TIM_Base_SetConfig+0x11c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d01f      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <TIM_Base_SetConfig+0x120>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d01b      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a29      	ldr	r2, [pc, #164]	; (800b1e0 <TIM_Base_SetConfig+0x124>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d017      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a28      	ldr	r2, [pc, #160]	; (800b1e4 <TIM_Base_SetConfig+0x128>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d013      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a27      	ldr	r2, [pc, #156]	; (800b1e8 <TIM_Base_SetConfig+0x12c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00f      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a26      	ldr	r2, [pc, #152]	; (800b1ec <TIM_Base_SetConfig+0x130>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d00b      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a25      	ldr	r2, [pc, #148]	; (800b1f0 <TIM_Base_SetConfig+0x134>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d007      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a24      	ldr	r2, [pc, #144]	; (800b1f4 <TIM_Base_SetConfig+0x138>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d003      	beq.n	800b16e <TIM_Base_SetConfig+0xb2>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a23      	ldr	r2, [pc, #140]	; (800b1f8 <TIM_Base_SetConfig+0x13c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d108      	bne.n	800b180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	689a      	ldr	r2, [r3, #8]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a0a      	ldr	r2, [pc, #40]	; (800b1d0 <TIM_Base_SetConfig+0x114>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d003      	beq.n	800b1b4 <TIM_Base_SetConfig+0xf8>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a0c      	ldr	r2, [pc, #48]	; (800b1e0 <TIM_Base_SetConfig+0x124>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d103      	bne.n	800b1bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	691a      	ldr	r2, [r3, #16]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	615a      	str	r2, [r3, #20]
}
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	40010000 	.word	0x40010000
 800b1d4:	40000400 	.word	0x40000400
 800b1d8:	40000800 	.word	0x40000800
 800b1dc:	40000c00 	.word	0x40000c00
 800b1e0:	40010400 	.word	0x40010400
 800b1e4:	40014000 	.word	0x40014000
 800b1e8:	40014400 	.word	0x40014400
 800b1ec:	40014800 	.word	0x40014800
 800b1f0:	40001800 	.word	0x40001800
 800b1f4:	40001c00 	.word	0x40001c00
 800b1f8:	40002000 	.word	0x40002000

0800b1fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f023 0201 	bic.w	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <TIM_OC1_SetConfig+0xd8>)
 800b228:	4013      	ands	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0303 	bic.w	r3, r3, #3
 800b232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f023 0302 	bic.w	r3, r3, #2
 800b244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a21      	ldr	r2, [pc, #132]	; (800b2d8 <TIM_OC1_SetConfig+0xdc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_OC1_SetConfig+0x64>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a20      	ldr	r2, [pc, #128]	; (800b2dc <TIM_OC1_SetConfig+0xe0>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d10c      	bne.n	800b27a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f023 0308 	bic.w	r3, r3, #8
 800b266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	4313      	orrs	r3, r2
 800b270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f023 0304 	bic.w	r3, r3, #4
 800b278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a16      	ldr	r2, [pc, #88]	; (800b2d8 <TIM_OC1_SetConfig+0xdc>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d003      	beq.n	800b28a <TIM_OC1_SetConfig+0x8e>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a15      	ldr	r2, [pc, #84]	; (800b2dc <TIM_OC1_SetConfig+0xe0>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d111      	bne.n	800b2ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	621a      	str	r2, [r3, #32]
}
 800b2c8:	bf00      	nop
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	fffeff8f 	.word	0xfffeff8f
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40010400 	.word	0x40010400

0800b2e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	f023 0210 	bic.w	r2, r3, #16
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <TIM_OC2_SetConfig+0xe4>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f023 0320 	bic.w	r3, r3, #32
 800b32a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	4313      	orrs	r3, r2
 800b336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a23      	ldr	r2, [pc, #140]	; (800b3c8 <TIM_OC2_SetConfig+0xe8>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_OC2_SetConfig+0x68>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a22      	ldr	r2, [pc, #136]	; (800b3cc <TIM_OC2_SetConfig+0xec>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d10d      	bne.n	800b364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b34e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	011b      	lsls	r3, r3, #4
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <TIM_OC2_SetConfig+0xe8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_OC2_SetConfig+0x94>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <TIM_OC2_SetConfig+0xec>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d113      	bne.n	800b39c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b37a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	621a      	str	r2, [r3, #32]
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	feff8fff 	.word	0xfeff8fff
 800b3c8:	40010000 	.word	0x40010000
 800b3cc:	40010400 	.word	0x40010400

0800b3d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4b2d      	ldr	r3, [pc, #180]	; (800b4b0 <TIM_OC3_SetConfig+0xe0>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4313      	orrs	r3, r2
 800b410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	021b      	lsls	r3, r3, #8
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	4313      	orrs	r3, r2
 800b424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a22      	ldr	r2, [pc, #136]	; (800b4b4 <TIM_OC3_SetConfig+0xe4>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d003      	beq.n	800b436 <TIM_OC3_SetConfig+0x66>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a21      	ldr	r2, [pc, #132]	; (800b4b8 <TIM_OC3_SetConfig+0xe8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d10d      	bne.n	800b452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b43c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	4313      	orrs	r3, r2
 800b448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a17      	ldr	r2, [pc, #92]	; (800b4b4 <TIM_OC3_SetConfig+0xe4>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d003      	beq.n	800b462 <TIM_OC3_SetConfig+0x92>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <TIM_OC3_SetConfig+0xe8>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d113      	bne.n	800b48a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	621a      	str	r2, [r3, #32]
}
 800b4a4:	bf00      	nop
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	fffeff8f 	.word	0xfffeff8f
 800b4b4:	40010000 	.word	0x40010000
 800b4b8:	40010400 	.word	0x40010400

0800b4bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a1b      	ldr	r3, [r3, #32]
 800b4ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	69db      	ldr	r3, [r3, #28]
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4b1e      	ldr	r3, [pc, #120]	; (800b560 <TIM_OC4_SetConfig+0xa4>)
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	021b      	lsls	r3, r3, #8
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	031b      	lsls	r3, r3, #12
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4313      	orrs	r3, r2
 800b512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a13      	ldr	r2, [pc, #76]	; (800b564 <TIM_OC4_SetConfig+0xa8>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d003      	beq.n	800b524 <TIM_OC4_SetConfig+0x68>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a12      	ldr	r2, [pc, #72]	; (800b568 <TIM_OC4_SetConfig+0xac>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d109      	bne.n	800b538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b52a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	019b      	lsls	r3, r3, #6
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	621a      	str	r2, [r3, #32]
}
 800b552:	bf00      	nop
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	feff8fff 	.word	0xfeff8fff
 800b564:	40010000 	.word	0x40010000
 800b568:	40010400 	.word	0x40010400

0800b56c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <TIM_OC5_SetConfig+0x98>)
 800b598:	4013      	ands	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	041b      	lsls	r3, r3, #16
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a12      	ldr	r2, [pc, #72]	; (800b608 <TIM_OC5_SetConfig+0x9c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d003      	beq.n	800b5ca <TIM_OC5_SetConfig+0x5e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a11      	ldr	r2, [pc, #68]	; (800b60c <TIM_OC5_SetConfig+0xa0>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d109      	bne.n	800b5de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	621a      	str	r2, [r3, #32]
}
 800b5f8:	bf00      	nop
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	fffeff8f 	.word	0xfffeff8f
 800b608:	40010000 	.word	0x40010000
 800b60c:	40010400 	.word	0x40010400

0800b610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <TIM_OC6_SetConfig+0x9c>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	051b      	lsls	r3, r3, #20
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a13      	ldr	r2, [pc, #76]	; (800b6b0 <TIM_OC6_SetConfig+0xa0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d003      	beq.n	800b670 <TIM_OC6_SetConfig+0x60>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <TIM_OC6_SetConfig+0xa4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d109      	bne.n	800b684 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	029b      	lsls	r3, r3, #10
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	621a      	str	r2, [r3, #32]
}
 800b69e:	bf00      	nop
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	feff8fff 	.word	0xfeff8fff
 800b6b0:	40010000 	.word	0x40010000
 800b6b4:	40010400 	.word	0x40010400

0800b6b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	f023 0201 	bic.w	r2, r3, #1
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	011b      	lsls	r3, r3, #4
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f023 030a 	bic.w	r3, r3, #10
 800b6f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	621a      	str	r2, [r3, #32]
}
 800b70a:	bf00      	nop
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b716:	b480      	push	{r7}
 800b718:	b087      	sub	sp, #28
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	f023 0210 	bic.w	r2, r3, #16
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	031b      	lsls	r3, r3, #12
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	4313      	orrs	r3, r2
 800b74a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	621a      	str	r2, [r3, #32]
}
 800b76a:	bf00      	nop
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	f043 0307 	orr.w	r3, r3, #7
 800b798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	609a      	str	r2, [r3, #8]
}
 800b7a0:	bf00      	nop
 800b7a2:	3714      	adds	r7, #20
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	021a      	lsls	r2, r3, #8
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	609a      	str	r2, [r3, #8]
}
 800b7e0:	bf00      	nop
 800b7e2:	371c      	adds	r7, #28
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b800:	2302      	movs	r3, #2
 800b802:	e06d      	b.n	800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a30      	ldr	r2, [pc, #192]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d004      	beq.n	800b838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a2f      	ldr	r2, [pc, #188]	; (800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d108      	bne.n	800b84a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b83e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	4313      	orrs	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	4313      	orrs	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a20      	ldr	r2, [pc, #128]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d022      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b876:	d01d      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a1d      	ldr	r2, [pc, #116]	; (800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d018      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a1c      	ldr	r2, [pc, #112]	; (800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d013      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1a      	ldr	r2, [pc, #104]	; (800b8fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00e      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a15      	ldr	r2, [pc, #84]	; (800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d009      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a16      	ldr	r2, [pc, #88]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d004      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a15      	ldr	r2, [pc, #84]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d10c      	bne.n	800b8ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	40010000 	.word	0x40010000
 800b8f0:	40010400 	.word	0x40010400
 800b8f4:	40000400 	.word	0x40000400
 800b8f8:	40000800 	.word	0x40000800
 800b8fc:	40000c00 	.word	0x40000c00
 800b900:	40014000 	.word	0x40014000
 800b904:	40001800 	.word	0x40001800

0800b908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b912:	2300      	movs	r3, #0
 800b914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d101      	bne.n	800b924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b920:	2302      	movs	r3, #2
 800b922:	e065      	b.n	800b9f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	4313      	orrs	r3, r2
 800b938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	4313      	orrs	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4313      	orrs	r3, r2
 800b962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	4313      	orrs	r3, r2
 800b970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	041b      	lsls	r3, r3, #16
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a16      	ldr	r2, [pc, #88]	; (800b9fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d004      	beq.n	800b9b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d115      	bne.n	800b9de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	051b      	lsls	r3, r3, #20
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	40010000 	.word	0x40010000
 800ba00:	40010400 	.word	0x40010400

0800ba04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e040      	b.n	800bad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7f7 fbe2 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2224      	movs	r2, #36	; 0x24
 800ba6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f022 0201 	bic.w	r2, r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f8c0 	bl	800bc04 <UART_SetConfig>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e022      	b.n	800bad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fb16 	bl	800c0c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685a      	ldr	r2, [r3, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800baaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fb9d 	bl	800c20c <UART_CheckIdleState>
 800bad2:	4603      	mov	r3, r0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08a      	sub	sp, #40	; 0x28
 800bae0:	af02      	add	r7, sp, #8
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	4613      	mov	r3, r2
 800baea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	f040 8081 	bne.w	800bbf8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <HAL_UART_Transmit+0x26>
 800bafc:	88fb      	ldrh	r3, [r7, #6]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e079      	b.n	800bbfa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d101      	bne.n	800bb14 <HAL_UART_Transmit+0x38>
 800bb10:	2302      	movs	r3, #2
 800bb12:	e072      	b.n	800bbfa <HAL_UART_Transmit+0x11e>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2221      	movs	r2, #33	; 0x21
 800bb28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb2a:	f7f8 fa4d 	bl	8003fc8 <HAL_GetTick>
 800bb2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	88fa      	ldrh	r2, [r7, #6]
 800bb34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	88fa      	ldrh	r2, [r7, #6]
 800bb3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb48:	d108      	bne.n	800bb5c <HAL_UART_Transmit+0x80>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d104      	bne.n	800bb5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	e003      	b.n	800bb64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb60:	2300      	movs	r3, #0
 800bb62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bb6c:	e02c      	b.n	800bbc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2200      	movs	r2, #0
 800bb76:	2180      	movs	r1, #128	; 0x80
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 fb7a 	bl	800c272 <UART_WaitOnFlagUntilTimeout>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e038      	b.n	800bbfa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10b      	bne.n	800bba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	3302      	adds	r3, #2
 800bba2:	61bb      	str	r3, [r7, #24]
 800bba4:	e007      	b.n	800bbb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1cc      	bne.n	800bb6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2140      	movs	r1, #64	; 0x40
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 fb47 	bl	800c272 <UART_WaitOnFlagUntilTimeout>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e005      	b.n	800bbfa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e000      	b.n	800bbfa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800bbf8:	2302      	movs	r3, #2
  }
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	4ba7      	ldr	r3, [pc, #668]	; (800becc <UART_SetConfig+0x2c8>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6812      	ldr	r2, [r2, #0]
 800bc36:	6979      	ldr	r1, [r7, #20]
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68da      	ldr	r2, [r3, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a95      	ldr	r2, [pc, #596]	; (800bed0 <UART_SetConfig+0x2cc>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d120      	bne.n	800bcc2 <UART_SetConfig+0xbe>
 800bc80:	4b94      	ldr	r3, [pc, #592]	; (800bed4 <UART_SetConfig+0x2d0>)
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	f003 0303 	and.w	r3, r3, #3
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d816      	bhi.n	800bcbc <UART_SetConfig+0xb8>
 800bc8e:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <UART_SetConfig+0x90>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bcb1 	.word	0x0800bcb1
 800bc9c:	0800bcab 	.word	0x0800bcab
 800bca0:	0800bcb7 	.word	0x0800bcb7
 800bca4:	2301      	movs	r3, #1
 800bca6:	77fb      	strb	r3, [r7, #31]
 800bca8:	e14f      	b.n	800bf4a <UART_SetConfig+0x346>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e14c      	b.n	800bf4a <UART_SetConfig+0x346>
 800bcb0:	2304      	movs	r3, #4
 800bcb2:	77fb      	strb	r3, [r7, #31]
 800bcb4:	e149      	b.n	800bf4a <UART_SetConfig+0x346>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	77fb      	strb	r3, [r7, #31]
 800bcba:	e146      	b.n	800bf4a <UART_SetConfig+0x346>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	77fb      	strb	r3, [r7, #31]
 800bcc0:	e143      	b.n	800bf4a <UART_SetConfig+0x346>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a84      	ldr	r2, [pc, #528]	; (800bed8 <UART_SetConfig+0x2d4>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d132      	bne.n	800bd32 <UART_SetConfig+0x12e>
 800bccc:	4b81      	ldr	r3, [pc, #516]	; (800bed4 <UART_SetConfig+0x2d0>)
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd2:	f003 030c 	and.w	r3, r3, #12
 800bcd6:	2b0c      	cmp	r3, #12
 800bcd8:	d828      	bhi.n	800bd2c <UART_SetConfig+0x128>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <UART_SetConfig+0xdc>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bd15 	.word	0x0800bd15
 800bce4:	0800bd2d 	.word	0x0800bd2d
 800bce8:	0800bd2d 	.word	0x0800bd2d
 800bcec:	0800bd2d 	.word	0x0800bd2d
 800bcf0:	0800bd21 	.word	0x0800bd21
 800bcf4:	0800bd2d 	.word	0x0800bd2d
 800bcf8:	0800bd2d 	.word	0x0800bd2d
 800bcfc:	0800bd2d 	.word	0x0800bd2d
 800bd00:	0800bd1b 	.word	0x0800bd1b
 800bd04:	0800bd2d 	.word	0x0800bd2d
 800bd08:	0800bd2d 	.word	0x0800bd2d
 800bd0c:	0800bd2d 	.word	0x0800bd2d
 800bd10:	0800bd27 	.word	0x0800bd27
 800bd14:	2300      	movs	r3, #0
 800bd16:	77fb      	strb	r3, [r7, #31]
 800bd18:	e117      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	77fb      	strb	r3, [r7, #31]
 800bd1e:	e114      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd20:	2304      	movs	r3, #4
 800bd22:	77fb      	strb	r3, [r7, #31]
 800bd24:	e111      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd26:	2308      	movs	r3, #8
 800bd28:	77fb      	strb	r3, [r7, #31]
 800bd2a:	e10e      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd2c:	2310      	movs	r3, #16
 800bd2e:	77fb      	strb	r3, [r7, #31]
 800bd30:	e10b      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a69      	ldr	r2, [pc, #420]	; (800bedc <UART_SetConfig+0x2d8>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d120      	bne.n	800bd7e <UART_SetConfig+0x17a>
 800bd3c:	4b65      	ldr	r3, [pc, #404]	; (800bed4 <UART_SetConfig+0x2d0>)
 800bd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd46:	2b30      	cmp	r3, #48	; 0x30
 800bd48:	d013      	beq.n	800bd72 <UART_SetConfig+0x16e>
 800bd4a:	2b30      	cmp	r3, #48	; 0x30
 800bd4c:	d814      	bhi.n	800bd78 <UART_SetConfig+0x174>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	d009      	beq.n	800bd66 <UART_SetConfig+0x162>
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d810      	bhi.n	800bd78 <UART_SetConfig+0x174>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <UART_SetConfig+0x15c>
 800bd5a:	2b10      	cmp	r3, #16
 800bd5c:	d006      	beq.n	800bd6c <UART_SetConfig+0x168>
 800bd5e:	e00b      	b.n	800bd78 <UART_SetConfig+0x174>
 800bd60:	2300      	movs	r3, #0
 800bd62:	77fb      	strb	r3, [r7, #31]
 800bd64:	e0f1      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd66:	2302      	movs	r3, #2
 800bd68:	77fb      	strb	r3, [r7, #31]
 800bd6a:	e0ee      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	77fb      	strb	r3, [r7, #31]
 800bd70:	e0eb      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd72:	2308      	movs	r3, #8
 800bd74:	77fb      	strb	r3, [r7, #31]
 800bd76:	e0e8      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd78:	2310      	movs	r3, #16
 800bd7a:	77fb      	strb	r3, [r7, #31]
 800bd7c:	e0e5      	b.n	800bf4a <UART_SetConfig+0x346>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a57      	ldr	r2, [pc, #348]	; (800bee0 <UART_SetConfig+0x2dc>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d120      	bne.n	800bdca <UART_SetConfig+0x1c6>
 800bd88:	4b52      	ldr	r3, [pc, #328]	; (800bed4 <UART_SetConfig+0x2d0>)
 800bd8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bd92:	2bc0      	cmp	r3, #192	; 0xc0
 800bd94:	d013      	beq.n	800bdbe <UART_SetConfig+0x1ba>
 800bd96:	2bc0      	cmp	r3, #192	; 0xc0
 800bd98:	d814      	bhi.n	800bdc4 <UART_SetConfig+0x1c0>
 800bd9a:	2b80      	cmp	r3, #128	; 0x80
 800bd9c:	d009      	beq.n	800bdb2 <UART_SetConfig+0x1ae>
 800bd9e:	2b80      	cmp	r3, #128	; 0x80
 800bda0:	d810      	bhi.n	800bdc4 <UART_SetConfig+0x1c0>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <UART_SetConfig+0x1a8>
 800bda6:	2b40      	cmp	r3, #64	; 0x40
 800bda8:	d006      	beq.n	800bdb8 <UART_SetConfig+0x1b4>
 800bdaa:	e00b      	b.n	800bdc4 <UART_SetConfig+0x1c0>
 800bdac:	2300      	movs	r3, #0
 800bdae:	77fb      	strb	r3, [r7, #31]
 800bdb0:	e0cb      	b.n	800bf4a <UART_SetConfig+0x346>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	77fb      	strb	r3, [r7, #31]
 800bdb6:	e0c8      	b.n	800bf4a <UART_SetConfig+0x346>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	77fb      	strb	r3, [r7, #31]
 800bdbc:	e0c5      	b.n	800bf4a <UART_SetConfig+0x346>
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e0c2      	b.n	800bf4a <UART_SetConfig+0x346>
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e0bf      	b.n	800bf4a <UART_SetConfig+0x346>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a45      	ldr	r2, [pc, #276]	; (800bee4 <UART_SetConfig+0x2e0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d125      	bne.n	800be20 <UART_SetConfig+0x21c>
 800bdd4:	4b3f      	ldr	r3, [pc, #252]	; (800bed4 <UART_SetConfig+0x2d0>)
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bde2:	d017      	beq.n	800be14 <UART_SetConfig+0x210>
 800bde4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bde8:	d817      	bhi.n	800be1a <UART_SetConfig+0x216>
 800bdea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdee:	d00b      	beq.n	800be08 <UART_SetConfig+0x204>
 800bdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf4:	d811      	bhi.n	800be1a <UART_SetConfig+0x216>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <UART_SetConfig+0x1fe>
 800bdfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdfe:	d006      	beq.n	800be0e <UART_SetConfig+0x20a>
 800be00:	e00b      	b.n	800be1a <UART_SetConfig+0x216>
 800be02:	2300      	movs	r3, #0
 800be04:	77fb      	strb	r3, [r7, #31]
 800be06:	e0a0      	b.n	800bf4a <UART_SetConfig+0x346>
 800be08:	2302      	movs	r3, #2
 800be0a:	77fb      	strb	r3, [r7, #31]
 800be0c:	e09d      	b.n	800bf4a <UART_SetConfig+0x346>
 800be0e:	2304      	movs	r3, #4
 800be10:	77fb      	strb	r3, [r7, #31]
 800be12:	e09a      	b.n	800bf4a <UART_SetConfig+0x346>
 800be14:	2308      	movs	r3, #8
 800be16:	77fb      	strb	r3, [r7, #31]
 800be18:	e097      	b.n	800bf4a <UART_SetConfig+0x346>
 800be1a:	2310      	movs	r3, #16
 800be1c:	77fb      	strb	r3, [r7, #31]
 800be1e:	e094      	b.n	800bf4a <UART_SetConfig+0x346>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a30      	ldr	r2, [pc, #192]	; (800bee8 <UART_SetConfig+0x2e4>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d125      	bne.n	800be76 <UART_SetConfig+0x272>
 800be2a:	4b2a      	ldr	r3, [pc, #168]	; (800bed4 <UART_SetConfig+0x2d0>)
 800be2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be38:	d017      	beq.n	800be6a <UART_SetConfig+0x266>
 800be3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be3e:	d817      	bhi.n	800be70 <UART_SetConfig+0x26c>
 800be40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be44:	d00b      	beq.n	800be5e <UART_SetConfig+0x25a>
 800be46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be4a:	d811      	bhi.n	800be70 <UART_SetConfig+0x26c>
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <UART_SetConfig+0x254>
 800be50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be54:	d006      	beq.n	800be64 <UART_SetConfig+0x260>
 800be56:	e00b      	b.n	800be70 <UART_SetConfig+0x26c>
 800be58:	2301      	movs	r3, #1
 800be5a:	77fb      	strb	r3, [r7, #31]
 800be5c:	e075      	b.n	800bf4a <UART_SetConfig+0x346>
 800be5e:	2302      	movs	r3, #2
 800be60:	77fb      	strb	r3, [r7, #31]
 800be62:	e072      	b.n	800bf4a <UART_SetConfig+0x346>
 800be64:	2304      	movs	r3, #4
 800be66:	77fb      	strb	r3, [r7, #31]
 800be68:	e06f      	b.n	800bf4a <UART_SetConfig+0x346>
 800be6a:	2308      	movs	r3, #8
 800be6c:	77fb      	strb	r3, [r7, #31]
 800be6e:	e06c      	b.n	800bf4a <UART_SetConfig+0x346>
 800be70:	2310      	movs	r3, #16
 800be72:	77fb      	strb	r3, [r7, #31]
 800be74:	e069      	b.n	800bf4a <UART_SetConfig+0x346>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a1c      	ldr	r2, [pc, #112]	; (800beec <UART_SetConfig+0x2e8>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d137      	bne.n	800bef0 <UART_SetConfig+0x2ec>
 800be80:	4b14      	ldr	r3, [pc, #80]	; (800bed4 <UART_SetConfig+0x2d0>)
 800be82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be8e:	d017      	beq.n	800bec0 <UART_SetConfig+0x2bc>
 800be90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be94:	d817      	bhi.n	800bec6 <UART_SetConfig+0x2c2>
 800be96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be9a:	d00b      	beq.n	800beb4 <UART_SetConfig+0x2b0>
 800be9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea0:	d811      	bhi.n	800bec6 <UART_SetConfig+0x2c2>
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <UART_SetConfig+0x2aa>
 800bea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beaa:	d006      	beq.n	800beba <UART_SetConfig+0x2b6>
 800beac:	e00b      	b.n	800bec6 <UART_SetConfig+0x2c2>
 800beae:	2300      	movs	r3, #0
 800beb0:	77fb      	strb	r3, [r7, #31]
 800beb2:	e04a      	b.n	800bf4a <UART_SetConfig+0x346>
 800beb4:	2302      	movs	r3, #2
 800beb6:	77fb      	strb	r3, [r7, #31]
 800beb8:	e047      	b.n	800bf4a <UART_SetConfig+0x346>
 800beba:	2304      	movs	r3, #4
 800bebc:	77fb      	strb	r3, [r7, #31]
 800bebe:	e044      	b.n	800bf4a <UART_SetConfig+0x346>
 800bec0:	2308      	movs	r3, #8
 800bec2:	77fb      	strb	r3, [r7, #31]
 800bec4:	e041      	b.n	800bf4a <UART_SetConfig+0x346>
 800bec6:	2310      	movs	r3, #16
 800bec8:	77fb      	strb	r3, [r7, #31]
 800beca:	e03e      	b.n	800bf4a <UART_SetConfig+0x346>
 800becc:	efff69f3 	.word	0xefff69f3
 800bed0:	40011000 	.word	0x40011000
 800bed4:	40023800 	.word	0x40023800
 800bed8:	40004400 	.word	0x40004400
 800bedc:	40004800 	.word	0x40004800
 800bee0:	40004c00 	.word	0x40004c00
 800bee4:	40005000 	.word	0x40005000
 800bee8:	40011400 	.word	0x40011400
 800beec:	40007800 	.word	0x40007800
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a71      	ldr	r2, [pc, #452]	; (800c0bc <UART_SetConfig+0x4b8>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d125      	bne.n	800bf46 <UART_SetConfig+0x342>
 800befa:	4b71      	ldr	r3, [pc, #452]	; (800c0c0 <UART_SetConfig+0x4bc>)
 800befc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bf04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf08:	d017      	beq.n	800bf3a <UART_SetConfig+0x336>
 800bf0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf0e:	d817      	bhi.n	800bf40 <UART_SetConfig+0x33c>
 800bf10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf14:	d00b      	beq.n	800bf2e <UART_SetConfig+0x32a>
 800bf16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf1a:	d811      	bhi.n	800bf40 <UART_SetConfig+0x33c>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <UART_SetConfig+0x324>
 800bf20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf24:	d006      	beq.n	800bf34 <UART_SetConfig+0x330>
 800bf26:	e00b      	b.n	800bf40 <UART_SetConfig+0x33c>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	77fb      	strb	r3, [r7, #31]
 800bf2c:	e00d      	b.n	800bf4a <UART_SetConfig+0x346>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	77fb      	strb	r3, [r7, #31]
 800bf32:	e00a      	b.n	800bf4a <UART_SetConfig+0x346>
 800bf34:	2304      	movs	r3, #4
 800bf36:	77fb      	strb	r3, [r7, #31]
 800bf38:	e007      	b.n	800bf4a <UART_SetConfig+0x346>
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	77fb      	strb	r3, [r7, #31]
 800bf3e:	e004      	b.n	800bf4a <UART_SetConfig+0x346>
 800bf40:	2310      	movs	r3, #16
 800bf42:	77fb      	strb	r3, [r7, #31]
 800bf44:	e001      	b.n	800bf4a <UART_SetConfig+0x346>
 800bf46:	2310      	movs	r3, #16
 800bf48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf52:	d15b      	bne.n	800c00c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800bf54:	7ffb      	ldrb	r3, [r7, #31]
 800bf56:	2b08      	cmp	r3, #8
 800bf58:	d827      	bhi.n	800bfaa <UART_SetConfig+0x3a6>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <UART_SetConfig+0x35c>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bf85 	.word	0x0800bf85
 800bf64:	0800bf8d 	.word	0x0800bf8d
 800bf68:	0800bf95 	.word	0x0800bf95
 800bf6c:	0800bfab 	.word	0x0800bfab
 800bf70:	0800bf9b 	.word	0x0800bf9b
 800bf74:	0800bfab 	.word	0x0800bfab
 800bf78:	0800bfab 	.word	0x0800bfab
 800bf7c:	0800bfab 	.word	0x0800bfab
 800bf80:	0800bfa3 	.word	0x0800bfa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf84:	f7fd f85e 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 800bf88:	61b8      	str	r0, [r7, #24]
        break;
 800bf8a:	e013      	b.n	800bfb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf8c:	f7fd f86e 	bl	800906c <HAL_RCC_GetPCLK2Freq>
 800bf90:	61b8      	str	r0, [r7, #24]
        break;
 800bf92:	e00f      	b.n	800bfb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf94:	4b4b      	ldr	r3, [pc, #300]	; (800c0c4 <UART_SetConfig+0x4c0>)
 800bf96:	61bb      	str	r3, [r7, #24]
        break;
 800bf98:	e00c      	b.n	800bfb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf9a:	f7fc ff91 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 800bf9e:	61b8      	str	r0, [r7, #24]
        break;
 800bfa0:	e008      	b.n	800bfb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfa6:	61bb      	str	r3, [r7, #24]
        break;
 800bfa8:	e004      	b.n	800bfb4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	77bb      	strb	r3, [r7, #30]
        break;
 800bfb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d074      	beq.n	800c0a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	005a      	lsls	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	085b      	lsrs	r3, r3, #1
 800bfc4:	441a      	add	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b0f      	cmp	r3, #15
 800bfd6:	d916      	bls.n	800c006 <UART_SetConfig+0x402>
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfde:	d212      	bcs.n	800c006 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f023 030f 	bic.w	r3, r3, #15
 800bfe8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	085b      	lsrs	r3, r3, #1
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	f003 0307 	and.w	r3, r3, #7
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	89fb      	ldrh	r3, [r7, #14]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	89fa      	ldrh	r2, [r7, #14]
 800c002:	60da      	str	r2, [r3, #12]
 800c004:	e04e      	b.n	800c0a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	77bb      	strb	r3, [r7, #30]
 800c00a:	e04b      	b.n	800c0a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c00c:	7ffb      	ldrb	r3, [r7, #31]
 800c00e:	2b08      	cmp	r3, #8
 800c010:	d827      	bhi.n	800c062 <UART_SetConfig+0x45e>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <UART_SetConfig+0x414>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c045 	.word	0x0800c045
 800c020:	0800c04d 	.word	0x0800c04d
 800c024:	0800c063 	.word	0x0800c063
 800c028:	0800c053 	.word	0x0800c053
 800c02c:	0800c063 	.word	0x0800c063
 800c030:	0800c063 	.word	0x0800c063
 800c034:	0800c063 	.word	0x0800c063
 800c038:	0800c05b 	.word	0x0800c05b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c03c:	f7fd f802 	bl	8009044 <HAL_RCC_GetPCLK1Freq>
 800c040:	61b8      	str	r0, [r7, #24]
        break;
 800c042:	e013      	b.n	800c06c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c044:	f7fd f812 	bl	800906c <HAL_RCC_GetPCLK2Freq>
 800c048:	61b8      	str	r0, [r7, #24]
        break;
 800c04a:	e00f      	b.n	800c06c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c04c:	4b1d      	ldr	r3, [pc, #116]	; (800c0c4 <UART_SetConfig+0x4c0>)
 800c04e:	61bb      	str	r3, [r7, #24]
        break;
 800c050:	e00c      	b.n	800c06c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c052:	f7fc ff35 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 800c056:	61b8      	str	r0, [r7, #24]
        break;
 800c058:	e008      	b.n	800c06c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c05a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c05e:	61bb      	str	r3, [r7, #24]
        break;
 800c060:	e004      	b.n	800c06c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	77bb      	strb	r3, [r7, #30]
        break;
 800c06a:	bf00      	nop
    }

    if (pclk != 0U)
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d018      	beq.n	800c0a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	085a      	lsrs	r2, r3, #1
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	441a      	add	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	fbb2 f3f3 	udiv	r3, r2, r3
 800c084:	b29b      	uxth	r3, r3
 800c086:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b0f      	cmp	r3, #15
 800c08c:	d908      	bls.n	800c0a0 <UART_SetConfig+0x49c>
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d204      	bcs.n	800c0a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	60da      	str	r2, [r3, #12]
 800c09e:	e001      	b.n	800c0a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c0b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3720      	adds	r7, #32
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	40007c00 	.word	0x40007c00
 800c0c0:	40023800 	.word	0x40023800
 800c0c4:	00f42400 	.word	0x00f42400

0800c0c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00a      	beq.n	800c0f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00a      	beq.n	800c114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	430a      	orrs	r2, r1
 800c112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	f003 0304 	and.w	r3, r3, #4
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00a      	beq.n	800c136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	f003 0308 	and.w	r3, r3, #8
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00a      	beq.n	800c158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	430a      	orrs	r2, r1
 800c156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	f003 0310 	and.w	r3, r3, #16
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	f003 0320 	and.w	r3, r3, #32
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00a      	beq.n	800c19c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	430a      	orrs	r2, r1
 800c19a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01a      	beq.n	800c1de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1c6:	d10a      	bne.n	800c1de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	605a      	str	r2, [r3, #4]
  }
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af02      	add	r7, sp, #8
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c21c:	f7f7 fed4 	bl	8003fc8 <HAL_GetTick>
 800c220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0308 	and.w	r3, r3, #8
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	d10e      	bne.n	800c24e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f817 	bl	800c272 <UART_WaitOnFlagUntilTimeout>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e00d      	b.n	800c26a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2220      	movs	r2, #32
 800c252:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2220      	movs	r2, #32
 800c258:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	60f8      	str	r0, [r7, #12]
 800c27a:	60b9      	str	r1, [r7, #8]
 800c27c:	603b      	str	r3, [r7, #0]
 800c27e:	4613      	mov	r3, r2
 800c280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c282:	e05e      	b.n	800c342 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c28a:	d05a      	beq.n	800c342 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c28c:	f7f7 fe9c 	bl	8003fc8 <HAL_GetTick>
 800c290:	4602      	mov	r2, r0
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d302      	bcc.n	800c2a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d11b      	bne.n	800c2da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f022 0201 	bic.w	r2, r2, #1
 800c2c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2220      	movs	r2, #32
 800c2cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e043      	b.n	800c362 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 0304 	and.w	r3, r3, #4
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02c      	beq.n	800c342 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f6:	d124      	bne.n	800c342 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c300:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c310:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	689a      	ldr	r2, [r3, #8]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2220      	movs	r2, #32
 800c326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2220      	movs	r2, #32
 800c32c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2220      	movs	r2, #32
 800c332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e00f      	b.n	800c362 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69da      	ldr	r2, [r3, #28]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	4013      	ands	r3, r2
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	bf0c      	ite	eq
 800c352:	2301      	moveq	r3, #1
 800c354:	2300      	movne	r3, #0
 800c356:	b2db      	uxtb	r3, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	79fb      	ldrb	r3, [r7, #7]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d091      	beq.n	800c284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d027      	beq.n	800c3d6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4b2f      	ldr	r3, [pc, #188]	; (800c44c <FMC_SDRAM_Init+0xe0>)
 800c390:	4013      	ands	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c39c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c3a2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c3a8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c3ae:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c3b4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c3ba:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c3c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c3c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	e032      	b.n	800c43c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c3f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	4b12      	ldr	r3, [pc, #72]	; (800c44c <FMC_SDRAM_Init+0xe0>)
 800c404:	4013      	ands	r3, r2
 800c406:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c410:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c416:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c41c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c422:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c428:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	ffff8000 	.word	0xffff8000

0800c450 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d02e      	beq.n	800c4c8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c476:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	3b01      	subs	r3, #1
 800c484:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c486:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c490:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	3b01      	subs	r3, #1
 800c498:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c49a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c4a4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c4ae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	609a      	str	r2, [r3, #8]
 800c4c6:	e039      	b.n	800c53c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <FMC_SDRAM_Timing_Init+0xfc>)
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4fa:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	3b01      	subs	r3, #1
 800c508:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c50a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	3b01      	subs	r3, #1
 800c512:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c514:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c51e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	3b01      	subs	r3, #1
 800c526:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c528:	4313      	orrs	r3, r2
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	371c      	adds	r7, #28
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	ff0f0fff 	.word	0xff0f0fff

0800c550 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <FMC_SDRAM_SendCommand+0x44>)
 800c562:	4013      	ands	r3, r2
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	6811      	ldr	r1, [r2, #0]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	6852      	ldr	r2, [r2, #4]
 800c56c:	4311      	orrs	r1, r2
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	6892      	ldr	r2, [r2, #8]
 800c572:	3a01      	subs	r2, #1
 800c574:	0152      	lsls	r2, r2, #5
 800c576:	4311      	orrs	r1, r2
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	68d2      	ldr	r2, [r2, #12]
 800c57c:	0252      	lsls	r2, r2, #9
 800c57e:	430a      	orrs	r2, r1
 800c580:	431a      	orrs	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	ffc00000 	.word	0xffc00000

0800c598 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	695a      	ldr	r2, [r3, #20]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f043 0201 	orr.w	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	f023 0201 	bic.w	r2, r3, #1
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	019b      	lsls	r3, r3, #6
 800c616:	f043 0220 	orr.w	r2, r3, #32
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4a09      	ldr	r2, [pc, #36]	; (800c64c <USB_FlushTxFifo+0x48>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d901      	bls.n	800c630 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e006      	b.n	800c63e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f003 0320 	and.w	r3, r3, #32
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d0f0      	beq.n	800c61e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	00030d40 	.word	0x00030d40

0800c650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2210      	movs	r2, #16
 800c660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3301      	adds	r3, #1
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	4a09      	ldr	r2, [pc, #36]	; (800c690 <USB_FlushRxFifo+0x40>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d901      	bls.n	800c674 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c670:	2303      	movs	r3, #3
 800c672:	e006      	b.n	800c682 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	f003 0310 	and.w	r3, r3, #16
 800c67c:	2b10      	cmp	r3, #16
 800c67e:	d0f0      	beq.n	800c662 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	00030d40 	.word	0x00030d40

0800c694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c694:	b480      	push	{r7}
 800c696:	b089      	sub	sp, #36	; 0x24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
 800c6ac:	3303      	adds	r3, #3
 800c6ae:	089b      	lsrs	r3, r3, #2
 800c6b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61bb      	str	r3, [r7, #24]
 800c6b6:	e00b      	b.n	800c6d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	61bb      	str	r3, [r7, #24]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d3ef      	bcc.n	800c6b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c6d8:	69fb      	ldr	r3, [r7, #28]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3724      	adds	r7, #36	; 0x24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	f003 0301 	and.w	r3, r3, #1
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	f003 0303 	and.w	r3, r3, #3
 800c75a:	68f9      	ldr	r1, [r7, #12]
 800c75c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c760:	4313      	orrs	r3, r2
 800c762:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d107      	bne.n	800c77a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c770:	461a      	mov	r2, r3
 800c772:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c776:	6053      	str	r3, [r2, #4]
 800c778:	e009      	b.n	800c78e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c77a:	78fb      	ldrb	r3, [r7, #3]
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d106      	bne.n	800c78e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c786:	461a      	mov	r2, r3
 800c788:	f241 7370 	movw	r3, #6000	; 0x1770
 800c78c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	b29b      	uxth	r3, r3
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b089      	sub	sp, #36	; 0x24
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c7ce:	78fb      	ldrb	r3, [r7, #3]
 800c7d0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	015a      	lsls	r2, r3, #5
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	4413      	add	r3, r2
 800c7de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	0c9b      	lsrs	r3, r3, #18
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	0fdb      	lsrs	r3, r3, #31
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f003 0320 	and.w	r3, r3, #32
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	d104      	bne.n	800c818 <USB_HC_Halt+0x5a>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	e0e8      	b.n	800c9ea <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <USB_HC_Halt+0x66>
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b02      	cmp	r3, #2
 800c822:	d173      	bne.n	800c90c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	0151      	lsls	r1, r2, #5
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	440a      	add	r2, r1
 800c83a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c83e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c842:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f003 0320 	and.w	r3, r3, #32
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 80cb 	bne.w	800c9e8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d143      	bne.n	800c8e6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	4413      	add	r3, r2
 800c866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	0151      	lsls	r1, r2, #5
 800c870:	69ba      	ldr	r2, [r7, #24]
 800c872:	440a      	add	r2, r1
 800c874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c87c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	4413      	add	r3, r2
 800c886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	69ba      	ldr	r2, [r7, #24]
 800c892:	440a      	add	r2, r1
 800c894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c89c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	0151      	lsls	r1, r2, #5
 800c8b0:	69ba      	ldr	r2, [r7, #24]
 800c8b2:	440a      	add	r2, r1
 800c8b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8bc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	61fb      	str	r3, [r7, #28]
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8ca:	d81d      	bhi.n	800c908 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8e2:	d0ec      	beq.n	800c8be <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c8e4:	e080      	b.n	800c9e8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c904:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c906:	e06f      	b.n	800c9e8 <USB_HC_Halt+0x22a>
            break;
 800c908:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c90a:	e06d      	b.n	800c9e8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	4413      	add	r3, r2
 800c914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	440a      	add	r2, r1
 800c922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c92a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d143      	bne.n	800c9c4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	4413      	add	r3, r2
 800c944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	0151      	lsls	r1, r2, #5
 800c94e:	69ba      	ldr	r2, [r7, #24]
 800c950:	440a      	add	r2, r1
 800c952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c95a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	4413      	add	r3, r2
 800c964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	440a      	add	r2, r1
 800c972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c97a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	4413      	add	r3, r2
 800c984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	440a      	add	r2, r1
 800c992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c99a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9a8:	d81d      	bhi.n	800c9e6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c0:	d0ec      	beq.n	800c99c <USB_HC_Halt+0x1de>
 800c9c2:	e011      	b.n	800c9e8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	015a      	lsls	r2, r3, #5
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	0151      	lsls	r1, r2, #5
 800c9d6:	69ba      	ldr	r2, [r7, #24]
 800c9d8:	440a      	add	r2, r1
 800c9da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	e000      	b.n	800c9e8 <USB_HC_Halt+0x22a>
          break;
 800c9e6:	bf00      	nop
    }
  }

  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3724      	adds	r7, #36	; 0x24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b086      	sub	sp, #24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fdea 	bl	800c5e0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ca0c:	2110      	movs	r1, #16
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fdf8 	bl	800c604 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7ff fe1b 	bl	800c650 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	e01f      	b.n	800ca60 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca36:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca3e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca46:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca54:	461a      	mov	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	613b      	str	r3, [r7, #16]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2b0f      	cmp	r3, #15
 800ca64:	d9dc      	bls.n	800ca20 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ca66:	2300      	movs	r3, #0
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	e034      	b.n	800cad6 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca82:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca8a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca92:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caa0:	461a      	mov	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	3301      	adds	r3, #1
 800caaa:	617b      	str	r3, [r7, #20]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cab2:	d80c      	bhi.n	800cace <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	015a      	lsls	r2, r3, #5
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	4413      	add	r3, r2
 800cabc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caca:	d0ec      	beq.n	800caa6 <USB_StopHost+0xb0>
 800cacc:	e000      	b.n	800cad0 <USB_StopHost+0xda>
        break;
 800cace:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	3301      	adds	r3, #1
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b0f      	cmp	r3, #15
 800cada:	d9c7      	bls.n	800ca6c <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cae2:	461a      	mov	r2, r3
 800cae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cae8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caf0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fd63 	bl	800c5be <USB_EnableGlobalInt>

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f804 	bl	800cb26 <USBH_HandleSof>
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b082      	sub	sp, #8
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b0b      	cmp	r3, #11
 800cb36:	d10a      	bne.n	800cb4e <USBH_HandleSof+0x28>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d005      	beq.n	800cb4e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	4798      	blx	r3
  }
}
 800cb4e:	bf00      	nop
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cb66:	bf00      	nop
}
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cb82:	bf00      	nop
}
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 faa3 	bl	800d128 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	791b      	ldrb	r3, [r3, #4]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f80b 	bl	800cc04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	795b      	ldrb	r3, [r3, #5]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f805 	bl	800cc04 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b0a      	cmp	r3, #10
 800cc14:	d80d      	bhi.n	800cc32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	33e0      	adds	r3, #224	; 0xe0
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	78fb      	ldrb	r3, [r7, #3]
 800cc24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	33e0      	adds	r3, #224	; 0xe0
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	440b      	add	r3, r1
 800cc30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	689a      	ldr	r2, [r3, #8]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	601a      	str	r2, [r3, #0]
}
 800cc7c:	bf00      	nop
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6892      	ldr	r2, [r2, #8]
 800cc9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6852      	ldr	r2, [r2, #4]
 800cca8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d103      	bne.n	800ccbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	1e5a      	subs	r2, r3, #1
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cce2:	2300      	movs	r3, #0
 800cce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce6:	4b4f      	ldr	r3, [pc, #316]	; (800ce24 <xTaskIncrementTick+0x148>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f040 808a 	bne.w	800ce04 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccf0:	4b4d      	ldr	r3, [pc, #308]	; (800ce28 <xTaskIncrementTick+0x14c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccf8:	4a4b      	ldr	r2, [pc, #300]	; (800ce28 <xTaskIncrementTick+0x14c>)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d122      	bne.n	800cd4a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd04:	4b49      	ldr	r3, [pc, #292]	; (800ce2c <xTaskIncrementTick+0x150>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00c      	beq.n	800cd28 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	b672      	cpsid	i
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	b662      	cpsie	i
 800cd22:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <xTaskIncrementTick+0x4a>
 800cd28:	4b40      	ldr	r3, [pc, #256]	; (800ce2c <xTaskIncrementTick+0x150>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	4b40      	ldr	r3, [pc, #256]	; (800ce30 <xTaskIncrementTick+0x154>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a3e      	ldr	r2, [pc, #248]	; (800ce2c <xTaskIncrementTick+0x150>)
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	4a3e      	ldr	r2, [pc, #248]	; (800ce30 <xTaskIncrementTick+0x154>)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6013      	str	r3, [r2, #0]
 800cd3c:	4b3d      	ldr	r3, [pc, #244]	; (800ce34 <xTaskIncrementTick+0x158>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a3c      	ldr	r2, [pc, #240]	; (800ce34 <xTaskIncrementTick+0x158>)
 800cd44:	6013      	str	r3, [r2, #0]
 800cd46:	f000 f905 	bl	800cf54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd4a:	4b3b      	ldr	r3, [pc, #236]	; (800ce38 <xTaskIncrementTick+0x15c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d348      	bcc.n	800cde6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd54:	4b35      	ldr	r3, [pc, #212]	; (800ce2c <xTaskIncrementTick+0x150>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d104      	bne.n	800cd68 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd5e:	4b36      	ldr	r3, [pc, #216]	; (800ce38 <xTaskIncrementTick+0x15c>)
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd64:	601a      	str	r2, [r3, #0]
					break;
 800cd66:	e03e      	b.n	800cde6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd68:	4b30      	ldr	r3, [pc, #192]	; (800ce2c <xTaskIncrementTick+0x150>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d203      	bcs.n	800cd88 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd80:	4a2d      	ldr	r2, [pc, #180]	; (800ce38 <xTaskIncrementTick+0x15c>)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd86:	e02e      	b.n	800cde6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ff7b 	bl	800cc88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	3318      	adds	r3, #24
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ff72 	bl	800cc88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	2201      	movs	r2, #1
 800cdaa:	409a      	lsls	r2, r3
 800cdac:	4b23      	ldr	r3, [pc, #140]	; (800ce3c <xTaskIncrementTick+0x160>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	4a22      	ldr	r2, [pc, #136]	; (800ce3c <xTaskIncrementTick+0x160>)
 800cdb4:	6013      	str	r3, [r2, #0]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdba:	4613      	mov	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4a1f      	ldr	r2, [pc, #124]	; (800ce40 <xTaskIncrementTick+0x164>)
 800cdc4:	441a      	add	r2, r3
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4610      	mov	r0, r2
 800cdce:	f7ff ff37 	bl	800cc40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd6:	4b1b      	ldr	r3, [pc, #108]	; (800ce44 <xTaskIncrementTick+0x168>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3b9      	bcc.n	800cd54 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde4:	e7b6      	b.n	800cd54 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cde6:	4b17      	ldr	r3, [pc, #92]	; (800ce44 <xTaskIncrementTick+0x168>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdec:	4914      	ldr	r1, [pc, #80]	; (800ce40 <xTaskIncrementTick+0x164>)
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	440b      	add	r3, r1
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d907      	bls.n	800ce0e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	e004      	b.n	800ce0e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ce04:	4b10      	ldr	r3, [pc, #64]	; (800ce48 <xTaskIncrementTick+0x16c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	4a0f      	ldr	r2, [pc, #60]	; (800ce48 <xTaskIncrementTick+0x16c>)
 800ce0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <xTaskIncrementTick+0x170>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d001      	beq.n	800ce1a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ce16:	2301      	movs	r3, #1
 800ce18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ce1a:	697b      	ldr	r3, [r7, #20]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20000a44 	.word	0x20000a44
 800ce28:	20000a2c 	.word	0x20000a2c
 800ce2c:	20000a24 	.word	0x20000a24
 800ce30:	20000a28 	.word	0x20000a28
 800ce34:	20000a3c 	.word	0x20000a3c
 800ce38:	20000a40 	.word	0x20000a40
 800ce3c:	20000a30 	.word	0x20000a30
 800ce40:	20000998 	.word	0x20000998
 800ce44:	20000994 	.word	0x20000994
 800ce48:	20000a34 	.word	0x20000a34
 800ce4c:	20000a38 	.word	0x20000a38

0800ce50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce56:	4b3a      	ldr	r3, [pc, #232]	; (800cf40 <vTaskSwitchContext+0xf0>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce5e:	4b39      	ldr	r3, [pc, #228]	; (800cf44 <vTaskSwitchContext+0xf4>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce64:	e068      	b.n	800cf38 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800ce66:	4b37      	ldr	r3, [pc, #220]	; (800cf44 <vTaskSwitchContext+0xf4>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ce6c:	4b36      	ldr	r3, [pc, #216]	; (800cf48 <vTaskSwitchContext+0xf8>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	61fb      	str	r3, [r7, #28]
 800ce74:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ce78:	61bb      	str	r3, [r7, #24]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d111      	bne.n	800cea8 <vTaskSwitchContext+0x58>
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	3304      	adds	r3, #4
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69ba      	ldr	r2, [r7, #24]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d10b      	bne.n	800cea8 <vTaskSwitchContext+0x58>
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	3308      	adds	r3, #8
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d105      	bne.n	800cea8 <vTaskSwitchContext+0x58>
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	330c      	adds	r3, #12
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	69ba      	ldr	r2, [r7, #24]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d008      	beq.n	800ceba <vTaskSwitchContext+0x6a>
 800cea8:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <vTaskSwitchContext+0xf8>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	4b26      	ldr	r3, [pc, #152]	; (800cf48 <vTaskSwitchContext+0xf8>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3334      	adds	r3, #52	; 0x34
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7f4 f863 	bl	8000f80 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceba:	4b24      	ldr	r3, [pc, #144]	; (800cf4c <vTaskSwitchContext+0xfc>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	fab3 f383 	clz	r3, r3
 800cec6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cec8:	7afb      	ldrb	r3, [r7, #11]
 800ceca:	f1c3 031f 	rsb	r3, r3, #31
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	491f      	ldr	r1, [pc, #124]	; (800cf50 <vTaskSwitchContext+0x100>)
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10c      	bne.n	800cefe <vTaskSwitchContext+0xae>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	b672      	cpsid	i
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	b662      	cpsie	i
 800cef8:	607b      	str	r3, [r7, #4]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <vTaskSwitchContext+0xac>
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4a11      	ldr	r2, [pc, #68]	; (800cf50 <vTaskSwitchContext+0x100>)
 800cf0a:	4413      	add	r3, r2
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	605a      	str	r2, [r3, #4]
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d104      	bne.n	800cf2e <vTaskSwitchContext+0xde>
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	605a      	str	r2, [r3, #4]
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	4a04      	ldr	r2, [pc, #16]	; (800cf48 <vTaskSwitchContext+0xf8>)
 800cf36:	6013      	str	r3, [r2, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	3720      	adds	r7, #32
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	20000a44 	.word	0x20000a44
 800cf44:	20000a38 	.word	0x20000a38
 800cf48:	20000994 	.word	0x20000994
 800cf4c:	20000a30 	.word	0x20000a30
 800cf50:	20000998 	.word	0x20000998

0800cf54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf5a:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <prvResetNextTaskUnblockTime+0x38>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d104      	bne.n	800cf6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf64:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <prvResetNextTaskUnblockTime+0x3c>)
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf6c:	e008      	b.n	800cf80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6e:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <prvResetNextTaskUnblockTime+0x38>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	4a04      	ldr	r2, [pc, #16]	; (800cf90 <prvResetNextTaskUnblockTime+0x3c>)
 800cf7e:	6013      	str	r3, [r2, #0]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	20000a24 	.word	0x20000a24
 800cf90:	20000a40 	.word	0x20000a40
	...

0800cfa0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <pxCurrentTCBConst2>)
 800cfa2:	6819      	ldr	r1, [r3, #0]
 800cfa4:	6808      	ldr	r0, [r1, #0]
 800cfa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfaa:	f380 8809 	msr	PSP, r0
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f380 8811 	msr	BASEPRI, r0
 800cfba:	4770      	bx	lr
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst2>:
 800cfc0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
	...

0800cfd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfd0:	f3ef 8009 	mrs	r0, PSP
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <pxCurrentTCBConst>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	f01e 0f10 	tst.w	lr, #16
 800cfe0:	bf08      	it	eq
 800cfe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfea:	6010      	str	r0, [r2, #0]
 800cfec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cff4:	b672      	cpsid	i
 800cff6:	f380 8811 	msr	BASEPRI, r0
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	b662      	cpsie	i
 800d004:	f7ff ff24 	bl	800ce50 <vTaskSwitchContext>
 800d008:	f04f 0000 	mov.w	r0, #0
 800d00c:	f380 8811 	msr	BASEPRI, r0
 800d010:	bc09      	pop	{r0, r3}
 800d012:	6819      	ldr	r1, [r3, #0]
 800d014:	6808      	ldr	r0, [r1, #0]
 800d016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01a:	f01e 0f10 	tst.w	lr, #16
 800d01e:	bf08      	it	eq
 800d020:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d024:	f380 8809 	msr	PSP, r0
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop

0800d030 <pxCurrentTCBConst>:
 800d030:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop

0800d038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	b672      	cpsid	i
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	b662      	cpsie	i
 800d052:	607b      	str	r3, [r7, #4]
}
 800d054:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d056:	f7ff fe41 	bl	800ccdc <xTaskIncrementTick>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d003      	beq.n	800d068 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d060:	4b06      	ldr	r3, [pc, #24]	; (800d07c <SysTick_Handler+0x44>)
 800d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d072:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d074:	bf00      	nop
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	e000ed04 	.word	0xe000ed04

0800d080 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fd37 	bl	800cb02 <USBH_LL_IncTimer>
}
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fd6f 	bl	800cb8e <USBH_LL_Connect>
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff fd78 	bl	800cbbc <USBH_LL_Disconnect>
}
 800d0cc:	bf00      	nop
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	70fb      	strb	r3, [r7, #3]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fd29 	bl	800cb56 <USBH_LL_PortEnabled>
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7ff fd29 	bl	800cb72 <USBH_LL_PortDisabled>
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f8 fd83 	bl	8005c4a <HAL_HCD_Stop>
 800d144:	4603      	mov	r3, r0
 800d146:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f808 	bl	800d160 <USBH_Get_USB_Status>
 800d150:	4603      	mov	r3, r0
 800d152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d154:	7bbb      	ldrb	r3, [r7, #14]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	2b03      	cmp	r3, #3
 800d172:	d817      	bhi.n	800d1a4 <USBH_Get_USB_Status+0x44>
 800d174:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <USBH_Get_USB_Status+0x1c>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d18d 	.word	0x0800d18d
 800d180:	0800d193 	.word	0x0800d193
 800d184:	0800d199 	.word	0x0800d199
 800d188:	0800d19f 	.word	0x0800d19f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73fb      	strb	r3, [r7, #15]
    break;
 800d190:	e00b      	b.n	800d1aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d192:	2302      	movs	r3, #2
 800d194:	73fb      	strb	r3, [r7, #15]
    break;
 800d196:	e008      	b.n	800d1aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d198:	2301      	movs	r3, #1
 800d19a:	73fb      	strb	r3, [r7, #15]
    break;
 800d19c:	e005      	b.n	800d1aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d19e:	2302      	movs	r3, #2
 800d1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a2:	e002      	b.n	800d1aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a8:	bf00      	nop
  }
  return usb_status;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <tonecrafter_configure_activations>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	3303      	adds	r3, #3
 800d1c8:	f023 0303 	bic.w	r3, r3, #3
 800d1cc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    lstm_scratch0_array.data = AI_PTR(activations + 0);
 800d1ce:	4a1b      	ldr	r2, [pc, #108]	; (800d23c <tonecrafter_configure_activations+0x84>)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(activations + 0);
 800d1d4:	4a19      	ldr	r2, [pc, #100]	; (800d23c <tonecrafter_configure_activations+0x84>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <tonecrafter_configure_activations+0x88>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800d1e0:	4b17      	ldr	r3, [pc, #92]	; (800d240 <tonecrafter_configure_activations+0x88>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations + 512);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d1ec:	4a15      	ldr	r2, [pc, #84]	; (800d244 <tonecrafter_configure_activations+0x8c>)
 800d1ee:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations + 512);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d1f6:	4a13      	ldr	r2, [pc, #76]	; (800d244 <tonecrafter_configure_activations+0x8c>)
 800d1f8:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations + 672);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800d200:	4a11      	ldr	r2, [pc, #68]	; (800d248 <tonecrafter_configure_activations+0x90>)
 800d202:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations + 672);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 800d20a:	4a0f      	ldr	r2, [pc, #60]	; (800d248 <tonecrafter_configure_activations+0x90>)
 800d20c:	60d3      	str	r3, [r2, #12]
    lstm_output_array.data = AI_PTR(activations + 688);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d214:	4a0d      	ldr	r2, [pc, #52]	; (800d24c <tonecrafter_configure_activations+0x94>)
 800d216:	6093      	str	r3, [r2, #8]
    lstm_output_array.data_start = AI_PTR(activations + 688);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d21e:	4a0b      	ldr	r2, [pc, #44]	; (800d24c <tonecrafter_configure_activations+0x94>)
 800d220:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(NULL);
 800d222:	4b0b      	ldr	r3, [pc, #44]	; (800d250 <tonecrafter_configure_activations+0x98>)
 800d224:	2200      	movs	r2, #0
 800d226:	609a      	str	r2, [r3, #8]
    dense_output_array.data_start = AI_PTR(NULL);
 800d228:	4b09      	ldr	r3, [pc, #36]	; (800d250 <tonecrafter_configure_activations+0x98>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800d22e:	2301      	movs	r3, #1
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	20000078 	.word	0x20000078
 800d240:	20000128 	.word	0x20000128
 800d244:	20000138 	.word	0x20000138
 800d248:	20000148 	.word	0x20000148
 800d24c:	20000158 	.word	0x20000158
 800d250:	20000168 	.word	0x20000168

0800d254 <tonecrafter_configure_weights>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800d264:	4b51      	ldr	r3, [pc, #324]	; (800d3ac <tonecrafter_configure_weights+0x158>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d26c:	4a4f      	ldr	r2, [pc, #316]	; (800d3ac <tonecrafter_configure_weights+0x158>)
 800d26e:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12512);
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800d276:	4413      	add	r3, r2
 800d278:	4a4c      	ldr	r2, [pc, #304]	; (800d3ac <tonecrafter_configure_weights+0x158>)
 800d27a:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12512);
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	f243 03e0 	movw	r3, #12512	; 0x30e0
 800d282:	4413      	add	r3, r2
 800d284:	4a49      	ldr	r2, [pc, #292]	; (800d3ac <tonecrafter_configure_weights+0x158>)
 800d286:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800d288:	4b49      	ldr	r3, [pc, #292]	; (800d3b0 <tonecrafter_configure_weights+0x15c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d290:	4a47      	ldr	r2, [pc, #284]	; (800d3b0 <tonecrafter_configure_weights+0x15c>)
 800d292:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 12416);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800d29a:	4a45      	ldr	r2, [pc, #276]	; (800d3b0 <tonecrafter_configure_weights+0x15c>)
 800d29c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 12416);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 800d2a4:	4a42      	ldr	r2, [pc, #264]	; (800d3b0 <tonecrafter_configure_weights+0x15c>)
 800d2a6:	60d3      	str	r3, [r2, #12]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 800d2a8:	4b42      	ldr	r3, [pc, #264]	; (800d3b4 <tonecrafter_configure_weights+0x160>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2b0:	4a40      	ldr	r2, [pc, #256]	; (800d3b4 <tonecrafter_configure_weights+0x160>)
 800d2b2:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(weights + 12032);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800d2ba:	4a3e      	ldr	r2, [pc, #248]	; (800d3b4 <tonecrafter_configure_weights+0x160>)
 800d2bc:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(weights + 12032);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800d2c4:	4a3b      	ldr	r2, [pc, #236]	; (800d3b4 <tonecrafter_configure_weights+0x160>)
 800d2c6:	60d3      	str	r3, [r2, #12]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 800d2c8:	4b3b      	ldr	r3, [pc, #236]	; (800d3b8 <tonecrafter_configure_weights+0x164>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2d0:	4a39      	ldr	r2, [pc, #228]	; (800d3b8 <tonecrafter_configure_weights+0x164>)
 800d2d2:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(weights + 11744);
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800d2da:	4413      	add	r3, r2
 800d2dc:	4a36      	ldr	r2, [pc, #216]	; (800d3b8 <tonecrafter_configure_weights+0x164>)
 800d2de:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(weights + 11744);
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	f642 53e0 	movw	r3, #11744	; 0x2de0
 800d2e6:	4413      	add	r3, r2
 800d2e8:	4a33      	ldr	r2, [pc, #204]	; (800d3b8 <tonecrafter_configure_weights+0x164>)
 800d2ea:	60d3      	str	r3, [r2, #12]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800d2ec:	4b33      	ldr	r3, [pc, #204]	; (800d3bc <tonecrafter_configure_weights+0x168>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2f4:	4a31      	ldr	r2, [pc, #196]	; (800d3bc <tonecrafter_configure_weights+0x168>)
 800d2f6:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(weights + 2528);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800d2fe:	4a2f      	ldr	r2, [pc, #188]	; (800d3bc <tonecrafter_configure_weights+0x168>)
 800d300:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(weights + 2528);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800d308:	4a2c      	ldr	r2, [pc, #176]	; (800d3bc <tonecrafter_configure_weights+0x168>)
 800d30a:	60d3      	str	r3, [r2, #12]
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 800d30c:	4b2c      	ldr	r3, [pc, #176]	; (800d3c0 <tonecrafter_configure_weights+0x16c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d314:	4a2a      	ldr	r2, [pc, #168]	; (800d3c0 <tonecrafter_configure_weights+0x16c>)
 800d316:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(weights + 992);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d31e:	4a28      	ldr	r2, [pc, #160]	; (800d3c0 <tonecrafter_configure_weights+0x16c>)
 800d320:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(weights + 992);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d328:	4a25      	ldr	r2, [pc, #148]	; (800d3c0 <tonecrafter_configure_weights+0x16c>)
 800d32a:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800d32c:	4b25      	ldr	r3, [pc, #148]	; (800d3c4 <tonecrafter_configure_weights+0x170>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d334:	4a23      	ldr	r2, [pc, #140]	; (800d3c4 <tonecrafter_configure_weights+0x170>)
 800d336:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 976);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800d33e:	4a21      	ldr	r2, [pc, #132]	; (800d3c4 <tonecrafter_configure_weights+0x170>)
 800d340:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights + 976);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800d348:	4a1e      	ldr	r2, [pc, #120]	; (800d3c4 <tonecrafter_configure_weights+0x170>)
 800d34a:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800d34c:	4b1e      	ldr	r3, [pc, #120]	; (800d3c8 <tonecrafter_configure_weights+0x174>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d354:	4a1c      	ldr	r2, [pc, #112]	; (800d3c8 <tonecrafter_configure_weights+0x174>)
 800d356:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 208);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	33d0      	adds	r3, #208	; 0xd0
 800d35c:	4a1a      	ldr	r2, [pc, #104]	; (800d3c8 <tonecrafter_configure_weights+0x174>)
 800d35e:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights + 208);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	33d0      	adds	r3, #208	; 0xd0
 800d364:	4a18      	ldr	r2, [pc, #96]	; (800d3c8 <tonecrafter_configure_weights+0x174>)
 800d366:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800d368:	4b18      	ldr	r3, [pc, #96]	; (800d3cc <tonecrafter_configure_weights+0x178>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d370:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <tonecrafter_configure_weights+0x178>)
 800d372:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 192);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	33c0      	adds	r3, #192	; 0xc0
 800d378:	4a14      	ldr	r2, [pc, #80]	; (800d3cc <tonecrafter_configure_weights+0x178>)
 800d37a:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights + 192);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	33c0      	adds	r3, #192	; 0xc0
 800d380:	4a12      	ldr	r2, [pc, #72]	; (800d3cc <tonecrafter_configure_weights+0x178>)
 800d382:	60d3      	str	r3, [r2, #12]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <tonecrafter_configure_weights+0x17c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d38c:	4a10      	ldr	r2, [pc, #64]	; (800d3d0 <tonecrafter_configure_weights+0x17c>)
 800d38e:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights + 0);
 800d390:	4a0f      	ldr	r2, [pc, #60]	; (800d3d0 <tonecrafter_configure_weights+0x17c>)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 800d396:	4a0e      	ldr	r2, [pc, #56]	; (800d3d0 <tonecrafter_configure_weights+0x17c>)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800d39c:	2301      	movs	r3, #1
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	20000088 	.word	0x20000088
 800d3b0:	20000098 	.word	0x20000098
 800d3b4:	200000a8 	.word	0x200000a8
 800d3b8:	200000b8 	.word	0x200000b8
 800d3bc:	200000c8 	.word	0x200000c8
 800d3c0:	200000d8 	.word	0x200000d8
 800d3c4:	200000e8 	.word	0x200000e8
 800d3c8:	200000f8 	.word	0x200000f8
 800d3cc:	20000108 	.word	0x20000108
 800d3d0:	20000118 	.word	0x20000118

0800d3d4 <ai_tonecrafter_create>:
}

AI_API_ENTRY
ai_error ai_tonecrafter_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800d3de:	2300      	movs	r3, #0
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4a04      	ldr	r2, [pc, #16]	; (800d3fc <ai_tonecrafter_create+0x28>)
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f861 	bl	800d4b4 <ai_platform_network_create>
 800d3f2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20000018 	.word	0x20000018

0800d400 <ai_tonecrafter_init>:
}

AI_API_ENTRY
ai_bool ai_tonecrafter_init(
  ai_handle network, const ai_network_params* params)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f8d5 	bl	800d5bc <ai_platform_network_init>
 800d412:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <ai_tonecrafter_init+0x1e>
 800d41a:	2300      	movs	r3, #0
 800d41c:	e02b      	b.n	800d476 <ai_tonecrafter_init+0x76>

  ai_bool ok = true;
 800d41e:	2301      	movs	r3, #1
 800d420:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_weights(net_ctx, &params->params);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	4619      	mov	r1, r3
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff ff14 	bl	800d254 <tonecrafter_configure_weights>
 800d42c:	4603      	mov	r3, r0
 800d42e:	461a      	mov	r2, r3
 800d430:	7afb      	ldrb	r3, [r7, #11]
 800d432:	4013      	ands	r3, r2
 800d434:	2b00      	cmp	r3, #0
 800d436:	bf14      	ite	ne
 800d438:	2301      	movne	r3, #1
 800d43a:	2300      	moveq	r3, #0
 800d43c:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_activations(net_ctx, &params->activations);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	3318      	adds	r3, #24
 800d442:	4619      	mov	r1, r3
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff feb7 	bl	800d1b8 <tonecrafter_configure_activations>
 800d44a:	4603      	mov	r3, r0
 800d44c:	461a      	mov	r2, r3
 800d44e:	7afb      	ldrb	r3, [r7, #11]
 800d450:	4013      	ands	r3, r2
 800d452:	2b00      	cmp	r3, #0
 800d454:	bf14      	ite	ne
 800d456:	2301      	movne	r3, #1
 800d458:	2300      	moveq	r3, #0
 800d45a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f995 	bl	800d78c <ai_platform_network_post_init>
 800d462:	4603      	mov	r3, r0
 800d464:	461a      	mov	r2, r3
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	4013      	ands	r3, r2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	bf14      	ite	ne
 800d46e:	2301      	movne	r3, #1
 800d470:	2300      	moveq	r3, #0
 800d472:	72fb      	strb	r3, [r7, #11]

  return ok;
 800d474:	7afb      	ldrb	r3, [r7, #11]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <ai_tonecrafter_run>:


AI_API_ENTRY
ai_i32 ai_tonecrafter_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	60b9      	str	r1, [r7, #8]
 800d488:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	68b9      	ldr	r1, [r7, #8]
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f000 fa28 	bl	800d8e4 <ai_platform_network_process>
 800d494:	4603      	mov	r3, r0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 800d4a4:	4b02      	ldr	r3, [pc, #8]	; (800d4b0 <ai_tonecrafter_data_weights_get+0x10>)

}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	0801536c 	.word	0x0801536c

0800d4b4 <ai_platform_network_create>:
 800d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b6:	4d36      	ldr	r5, [pc, #216]	; (800d590 <ai_platform_network_create+0xdc>)
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	4e36      	ldr	r6, [pc, #216]	; (800d594 <ai_platform_network_create+0xe0>)
 800d4bc:	6829      	ldr	r1, [r5, #0]
 800d4be:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800d4c2:	f021 0101 	bic.w	r1, r1, #1
 800d4c6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800d4ca:	6029      	str	r1, [r5, #0]
 800d4cc:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800d4d0:	6831      	ldr	r1, [r6, #0]
 800d4d2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800d4d6:	194d      	adds	r5, r1, r5
 800d4d8:	2d01      	cmp	r5, #1
 800d4da:	d92f      	bls.n	800d53c <ai_platform_network_create+0x88>
 800d4dc:	f240 4549 	movw	r5, #1097	; 0x449
 800d4e0:	42a9      	cmp	r1, r5
 800d4e2:	d02b      	beq.n	800d53c <ai_platform_network_create+0x88>
 800d4e4:	492c      	ldr	r1, [pc, #176]	; (800d598 <ai_platform_network_create+0xe4>)
 800d4e6:	6809      	ldr	r1, [r1, #0]
 800d4e8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800d4ec:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800d4f0:	d015      	beq.n	800d51e <ai_platform_network_create+0x6a>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d031      	beq.n	800d55a <ai_platform_network_create+0xa6>
 800d4f6:	461e      	mov	r6, r3
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	4a28      	ldr	r2, [pc, #160]	; (800d59c <ai_platform_network_create+0xe8>)
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	f000 fc9f 	bl	800de44 <core_init>
 800d506:	2800      	cmp	r0, #0
 800d508:	d02b      	beq.n	800d562 <ai_platform_network_create+0xae>
 800d50a:	0223      	lsls	r3, r4, #8
 800d50c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d510:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800d514:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800d518:	d92e      	bls.n	800d578 <ai_platform_network_create+0xc4>
 800d51a:	2301      	movs	r3, #1
 800d51c:	e022      	b.n	800d564 <ai_platform_network_create+0xb0>
 800d51e:	4920      	ldr	r1, [pc, #128]	; (800d5a0 <ai_platform_network_create+0xec>)
 800d520:	2501      	movs	r5, #1
 800d522:	460e      	mov	r6, r1
 800d524:	600d      	str	r5, [r1, #0]
 800d526:	6831      	ldr	r1, [r6, #0]
 800d528:	2900      	cmp	r1, #0
 800d52a:	d1fc      	bne.n	800d526 <ai_platform_network_create+0x72>
 800d52c:	491d      	ldr	r1, [pc, #116]	; (800d5a4 <ai_platform_network_create+0xf0>)
 800d52e:	4e1e      	ldr	r6, [pc, #120]	; (800d5a8 <ai_platform_network_create+0xf4>)
 800d530:	4d1e      	ldr	r5, [pc, #120]	; (800d5ac <ai_platform_network_create+0xf8>)
 800d532:	600e      	str	r6, [r1, #0]
 800d534:	6809      	ldr	r1, [r1, #0]
 800d536:	42a9      	cmp	r1, r5
 800d538:	d0db      	beq.n	800d4f2 <ai_platform_network_create+0x3e>
 800d53a:	e7fe      	b.n	800d53a <ai_platform_network_create+0x86>
 800d53c:	491c      	ldr	r1, [pc, #112]	; (800d5b0 <ai_platform_network_create+0xfc>)
 800d53e:	2501      	movs	r5, #1
 800d540:	460e      	mov	r6, r1
 800d542:	600d      	str	r5, [r1, #0]
 800d544:	6831      	ldr	r1, [r6, #0]
 800d546:	2900      	cmp	r1, #0
 800d548:	d1fc      	bne.n	800d544 <ai_platform_network_create+0x90>
 800d54a:	491a      	ldr	r1, [pc, #104]	; (800d5b4 <ai_platform_network_create+0x100>)
 800d54c:	4e16      	ldr	r6, [pc, #88]	; (800d5a8 <ai_platform_network_create+0xf4>)
 800d54e:	4d17      	ldr	r5, [pc, #92]	; (800d5ac <ai_platform_network_create+0xf8>)
 800d550:	600e      	str	r6, [r1, #0]
 800d552:	6809      	ldr	r1, [r1, #0]
 800d554:	42a9      	cmp	r1, r5
 800d556:	d0cc      	beq.n	800d4f2 <ai_platform_network_create+0x3e>
 800d558:	e7fe      	b.n	800d558 <ai_platform_network_create+0xa4>
 800d55a:	f241 0010 	movw	r0, #4112	; 0x1010
 800d55e:	b003      	add	sp, #12
 800d560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d562:	2330      	movs	r3, #48	; 0x30
 800d564:	2100      	movs	r1, #0
 800d566:	2210      	movs	r2, #16
 800d568:	6029      	str	r1, [r5, #0]
 800d56a:	2000      	movs	r0, #0
 800d56c:	f363 0007 	bfi	r0, r3, #0, #8
 800d570:	f362 201f 	bfi	r0, r2, #8, #24
 800d574:	b003      	add	sp, #12
 800d576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d578:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <ai_platform_network_create+0x104>)
 800d57a:	a802      	add	r0, sp, #8
 800d57c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d580:	f002 fdf4 	bl	801016c <ai_check_custom_types>
 800d584:	b110      	cbz	r0, 800d58c <ai_platform_network_create+0xd8>
 800d586:	2200      	movs	r2, #0
 800d588:	4613      	mov	r3, r2
 800d58a:	e7ee      	b.n	800d56a <ai_platform_network_create+0xb6>
 800d58c:	2302      	movs	r3, #2
 800d58e:	e7e9      	b.n	800d564 <ai_platform_network_create+0xb0>
 800d590:	e0002000 	.word	0xe0002000
 800d594:	e0042000 	.word	0xe0042000
 800d598:	5c001000 	.word	0x5c001000
 800d59c:	a1c00100 	.word	0xa1c00100
 800d5a0:	58024c08 	.word	0x58024c08
 800d5a4:	58024c00 	.word	0x58024c00
 800d5a8:	f407a5c2 	.word	0xf407a5c2
 800d5ac:	b5e8b5cd 	.word	0xb5e8b5cd
 800d5b0:	40023008 	.word	0x40023008
 800d5b4:	40023000 	.word	0x40023000
 800d5b8:	84048403 	.word	0x84048403

0800d5bc <ai_platform_network_init>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d05e      	beq.n	800d680 <ai_platform_network_init+0xc4>
 800d5c2:	4b68      	ldr	r3, [pc, #416]	; (800d764 <ai_platform_network_init+0x1a8>)
 800d5c4:	6802      	ldr	r2, [r0, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d15a      	bne.n	800d680 <ai_platform_network_init+0xc4>
 800d5ca:	4a67      	ldr	r2, [pc, #412]	; (800d768 <ai_platform_network_init+0x1ac>)
 800d5cc:	4c67      	ldr	r4, [pc, #412]	; (800d76c <ai_platform_network_init+0x1b0>)
 800d5ce:	6813      	ldr	r3, [r2, #0]
 800d5d0:	f023 0301 	bic.w	r3, r3, #1
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5e0:	189a      	adds	r2, r3, r2
 800d5e2:	2a01      	cmp	r2, #1
 800d5e4:	d93d      	bls.n	800d662 <ai_platform_network_init+0xa6>
 800d5e6:	f240 4249 	movw	r2, #1097	; 0x449
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d039      	beq.n	800d662 <ai_platform_network_init+0xa6>
 800d5ee:	4b60      	ldr	r3, [pc, #384]	; (800d770 <ai_platform_network_init+0x1b4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d5fa:	d06b      	beq.n	800d6d4 <ai_platform_network_init+0x118>
 800d5fc:	4605      	mov	r5, r0
 800d5fe:	460c      	mov	r4, r1
 800d600:	2900      	cmp	r1, #0
 800d602:	f000 80a8 	beq.w	800d756 <ai_platform_network_init+0x19a>
 800d606:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800d608:	690e      	ldr	r6, [r1, #16]
 800d60a:	2f00      	cmp	r7, #0
 800d60c:	f000 8092 	beq.w	800d734 <ai_platform_network_init+0x178>
 800d610:	2e00      	cmp	r6, #0
 800d612:	d07d      	beq.n	800d710 <ai_platform_network_init+0x154>
 800d614:	f104 0718 	add.w	r7, r4, #24
 800d618:	f105 0c18 	add.w	ip, r5, #24
 800d61c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800d620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d62a:	2403      	movs	r4, #3
 800d62c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d630:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d632:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d634:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d638:	e886 0003 	stmia.w	r6, {r0, r1}
 800d63c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d63e:	60ec      	str	r4, [r5, #12]
 800d640:	b16a      	cbz	r2, 800d65e <ai_platform_network_init+0xa2>
 800d642:	68d3      	ldr	r3, [r2, #12]
 800d644:	6095      	str	r5, [r2, #8]
 800d646:	b153      	cbz	r3, 800d65e <ai_platform_network_init+0xa2>
 800d648:	429a      	cmp	r2, r3
 800d64a:	d104      	bne.n	800d656 <ai_platform_network_init+0x9a>
 800d64c:	e007      	b.n	800d65e <ai_platform_network_init+0xa2>
 800d64e:	429a      	cmp	r2, r3
 800d650:	4613      	mov	r3, r2
 800d652:	d004      	beq.n	800d65e <ai_platform_network_init+0xa2>
 800d654:	b11a      	cbz	r2, 800d65e <ai_platform_network_init+0xa2>
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	609d      	str	r5, [r3, #8]
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	d1f7      	bne.n	800d64e <ai_platform_network_init+0x92>
 800d65e:	4628      	mov	r0, r5
 800d660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d662:	4b44      	ldr	r3, [pc, #272]	; (800d774 <ai_platform_network_init+0x1b8>)
 800d664:	2201      	movs	r2, #1
 800d666:	461c      	mov	r4, r3
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1fc      	bne.n	800d66a <ai_platform_network_init+0xae>
 800d670:	4b41      	ldr	r3, [pc, #260]	; (800d778 <ai_platform_network_init+0x1bc>)
 800d672:	4c42      	ldr	r4, [pc, #264]	; (800d77c <ai_platform_network_init+0x1c0>)
 800d674:	4a42      	ldr	r2, [pc, #264]	; (800d780 <ai_platform_network_init+0x1c4>)
 800d676:	601c      	str	r4, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d0be      	beq.n	800d5fc <ai_platform_network_init+0x40>
 800d67e:	e7fe      	b.n	800d67e <ai_platform_network_init+0xc2>
 800d680:	4a39      	ldr	r2, [pc, #228]	; (800d768 <ai_platform_network_init+0x1ac>)
 800d682:	493a      	ldr	r1, [pc, #232]	; (800d76c <ai_platform_network_init+0x1b0>)
 800d684:	6813      	ldr	r3, [r2, #0]
 800d686:	f023 0301 	bic.w	r3, r3, #1
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	680b      	ldr	r3, [r1, #0]
 800d68e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d696:	185a      	adds	r2, r3, r1
 800d698:	2a01      	cmp	r2, #1
 800d69a:	d90c      	bls.n	800d6b6 <ai_platform_network_init+0xfa>
 800d69c:	f240 4249 	movw	r2, #1097	; 0x449
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d008      	beq.n	800d6b6 <ai_platform_network_init+0xfa>
 800d6a4:	4b32      	ldr	r3, [pc, #200]	; (800d770 <ai_platform_network_init+0x1b4>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d6b0:	d01f      	beq.n	800d6f2 <ai_platform_network_init+0x136>
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b6:	4b2f      	ldr	r3, [pc, #188]	; (800d774 <ai_platform_network_init+0x1b8>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	680b      	ldr	r3, [r1, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1fc      	bne.n	800d6be <ai_platform_network_init+0x102>
 800d6c4:	4b2c      	ldr	r3, [pc, #176]	; (800d778 <ai_platform_network_init+0x1bc>)
 800d6c6:	492d      	ldr	r1, [pc, #180]	; (800d77c <ai_platform_network_init+0x1c0>)
 800d6c8:	4a2d      	ldr	r2, [pc, #180]	; (800d780 <ai_platform_network_init+0x1c4>)
 800d6ca:	6019      	str	r1, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d0ef      	beq.n	800d6b2 <ai_platform_network_init+0xf6>
 800d6d2:	e7fe      	b.n	800d6d2 <ai_platform_network_init+0x116>
 800d6d4:	4b2b      	ldr	r3, [pc, #172]	; (800d784 <ai_platform_network_init+0x1c8>)
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	461c      	mov	r4, r3
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1fc      	bne.n	800d6dc <ai_platform_network_init+0x120>
 800d6e2:	4b29      	ldr	r3, [pc, #164]	; (800d788 <ai_platform_network_init+0x1cc>)
 800d6e4:	4c25      	ldr	r4, [pc, #148]	; (800d77c <ai_platform_network_init+0x1c0>)
 800d6e6:	4a26      	ldr	r2, [pc, #152]	; (800d780 <ai_platform_network_init+0x1c4>)
 800d6e8:	601c      	str	r4, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d085      	beq.n	800d5fc <ai_platform_network_init+0x40>
 800d6f0:	e7fe      	b.n	800d6f0 <ai_platform_network_init+0x134>
 800d6f2:	4b24      	ldr	r3, [pc, #144]	; (800d784 <ai_platform_network_init+0x1c8>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	680b      	ldr	r3, [r1, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1fc      	bne.n	800d6fa <ai_platform_network_init+0x13e>
 800d700:	4b21      	ldr	r3, [pc, #132]	; (800d788 <ai_platform_network_init+0x1cc>)
 800d702:	491e      	ldr	r1, [pc, #120]	; (800d77c <ai_platform_network_init+0x1c0>)
 800d704:	4a1e      	ldr	r2, [pc, #120]	; (800d780 <ai_platform_network_init+0x1c4>)
 800d706:	6019      	str	r1, [r3, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d0d1      	beq.n	800d6b2 <ai_platform_network_init+0xf6>
 800d70e:	e7fe      	b.n	800d70e <ai_platform_network_init+0x152>
 800d710:	8921      	ldrh	r1, [r4, #8]
 800d712:	88e2      	ldrh	r2, [r4, #6]
 800d714:	68e3      	ldr	r3, [r4, #12]
 800d716:	fb02 f201 	mul.w	r2, r2, r1
 800d71a:	fb03 f302 	mul.w	r3, r3, r2
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f43f af78 	beq.w	800d614 <ai_platform_network_init+0x58>
 800d724:	f105 0010 	add.w	r0, r5, #16
 800d728:	2212      	movs	r2, #18
 800d72a:	2110      	movs	r1, #16
 800d72c:	f000 fb8c 	bl	800de48 <core_set_error>
 800d730:	4630      	mov	r0, r6
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d734:	8c09      	ldrh	r1, [r1, #32]
 800d736:	8be2      	ldrh	r2, [r4, #30]
 800d738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73a:	fb02 f201 	mul.w	r2, r2, r1
 800d73e:	fb03 f302 	mul.w	r3, r3, r2
 800d742:	2b00      	cmp	r3, #0
 800d744:	f43f af64 	beq.w	800d610 <ai_platform_network_init+0x54>
 800d748:	2213      	movs	r2, #19
 800d74a:	2110      	movs	r1, #16
 800d74c:	3010      	adds	r0, #16
 800d74e:	f000 fb7b 	bl	800de48 <core_set_error>
 800d752:	4638      	mov	r0, r7
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d756:	2211      	movs	r2, #17
 800d758:	2110      	movs	r1, #16
 800d75a:	3010      	adds	r0, #16
 800d75c:	f000 fb74 	bl	800de48 <core_set_error>
 800d760:	4620      	mov	r0, r4
 800d762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d764:	a1c00100 	.word	0xa1c00100
 800d768:	e0002000 	.word	0xe0002000
 800d76c:	e0042000 	.word	0xe0042000
 800d770:	5c001000 	.word	0x5c001000
 800d774:	40023008 	.word	0x40023008
 800d778:	40023000 	.word	0x40023000
 800d77c:	f407a5c2 	.word	0xf407a5c2
 800d780:	b5e8b5cd 	.word	0xb5e8b5cd
 800d784:	58024c08 	.word	0x58024c08
 800d788:	58024c00 	.word	0x58024c00

0800d78c <ai_platform_network_post_init>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	b118      	cbz	r0, 800d798 <ai_platform_network_post_init+0xc>
 800d790:	4b4a      	ldr	r3, [pc, #296]	; (800d8bc <ai_platform_network_post_init+0x130>)
 800d792:	6802      	ldr	r2, [r0, #0]
 800d794:	429a      	cmp	r2, r3
 800d796:	d029      	beq.n	800d7ec <ai_platform_network_post_init+0x60>
 800d798:	4a49      	ldr	r2, [pc, #292]	; (800d8c0 <ai_platform_network_post_init+0x134>)
 800d79a:	494a      	ldr	r1, [pc, #296]	; (800d8c4 <ai_platform_network_post_init+0x138>)
 800d79c:	6813      	ldr	r3, [r2, #0]
 800d79e:	f023 0301 	bic.w	r3, r3, #1
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	680b      	ldr	r3, [r1, #0]
 800d7a6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d7aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7ae:	185a      	adds	r2, r3, r1
 800d7b0:	2a01      	cmp	r2, #1
 800d7b2:	d90c      	bls.n	800d7ce <ai_platform_network_post_init+0x42>
 800d7b4:	f240 4249 	movw	r2, #1097	; 0x449
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d008      	beq.n	800d7ce <ai_platform_network_post_init+0x42>
 800d7bc:	4b42      	ldr	r3, [pc, #264]	; (800d8c8 <ai_platform_network_post_init+0x13c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7c4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d7c8:	d044      	beq.n	800d854 <ai_platform_network_post_init+0xc8>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	4b3f      	ldr	r3, [pc, #252]	; (800d8cc <ai_platform_network_post_init+0x140>)
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	680b      	ldr	r3, [r1, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1fc      	bne.n	800d7d6 <ai_platform_network_post_init+0x4a>
 800d7dc:	4b3c      	ldr	r3, [pc, #240]	; (800d8d0 <ai_platform_network_post_init+0x144>)
 800d7de:	493d      	ldr	r1, [pc, #244]	; (800d8d4 <ai_platform_network_post_init+0x148>)
 800d7e0:	4a3d      	ldr	r2, [pc, #244]	; (800d8d8 <ai_platform_network_post_init+0x14c>)
 800d7e2:	6019      	str	r1, [r3, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d0ef      	beq.n	800d7ca <ai_platform_network_post_init+0x3e>
 800d7ea:	e7fe      	b.n	800d7ea <ai_platform_network_post_init+0x5e>
 800d7ec:	4a34      	ldr	r2, [pc, #208]	; (800d8c0 <ai_platform_network_post_init+0x134>)
 800d7ee:	4935      	ldr	r1, [pc, #212]	; (800d8c4 <ai_platform_network_post_init+0x138>)
 800d7f0:	6813      	ldr	r3, [r2, #0]
 800d7f2:	f023 0301 	bic.w	r3, r3, #1
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d7fc:	680b      	ldr	r3, [r1, #0]
 800d7fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d802:	189a      	adds	r2, r3, r2
 800d804:	2a01      	cmp	r2, #1
 800d806:	d94a      	bls.n	800d89e <ai_platform_network_post_init+0x112>
 800d808:	f240 4249 	movw	r2, #1097	; 0x449
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d046      	beq.n	800d89e <ai_platform_network_post_init+0x112>
 800d810:	4b2d      	ldr	r3, [pc, #180]	; (800d8c8 <ai_platform_network_post_init+0x13c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d818:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d81c:	d030      	beq.n	800d880 <ai_platform_network_post_init+0xf4>
 800d81e:	68c3      	ldr	r3, [r0, #12]
 800d820:	4604      	mov	r4, r0
 800d822:	f013 0502 	ands.w	r5, r3, #2
 800d826:	d024      	beq.n	800d872 <ai_platform_network_post_init+0xe6>
 800d828:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d82a:	b18b      	cbz	r3, 800d850 <ai_platform_network_post_init+0xc4>
 800d82c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800d82e:	b90d      	cbnz	r5, 800d834 <ai_platform_network_post_init+0xa8>
 800d830:	e00e      	b.n	800d850 <ai_platform_network_post_init+0xc4>
 800d832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d834:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d836:	4629      	mov	r1, r5
 800d838:	2000      	movs	r0, #0
 800d83a:	4798      	blx	r3
 800d83c:	68ea      	ldr	r2, [r5, #12]
 800d83e:	1b53      	subs	r3, r2, r5
 800d840:	4615      	mov	r5, r2
 800d842:	bf18      	it	ne
 800d844:	2301      	movne	r3, #1
 800d846:	2a00      	cmp	r2, #0
 800d848:	bf08      	it	eq
 800d84a:	2300      	moveq	r3, #0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1f0      	bne.n	800d832 <ai_platform_network_post_init+0xa6>
 800d850:	2001      	movs	r0, #1
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	4b21      	ldr	r3, [pc, #132]	; (800d8dc <ai_platform_network_post_init+0x150>)
 800d856:	2201      	movs	r2, #1
 800d858:	4619      	mov	r1, r3
 800d85a:	601a      	str	r2, [r3, #0]
 800d85c:	680b      	ldr	r3, [r1, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1fc      	bne.n	800d85c <ai_platform_network_post_init+0xd0>
 800d862:	4b1f      	ldr	r3, [pc, #124]	; (800d8e0 <ai_platform_network_post_init+0x154>)
 800d864:	491b      	ldr	r1, [pc, #108]	; (800d8d4 <ai_platform_network_post_init+0x148>)
 800d866:	4a1c      	ldr	r2, [pc, #112]	; (800d8d8 <ai_platform_network_post_init+0x14c>)
 800d868:	6019      	str	r1, [r3, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d0ac      	beq.n	800d7ca <ai_platform_network_post_init+0x3e>
 800d870:	e7fe      	b.n	800d870 <ai_platform_network_post_init+0xe4>
 800d872:	2210      	movs	r2, #16
 800d874:	2111      	movs	r1, #17
 800d876:	3010      	adds	r0, #16
 800d878:	f000 fae6 	bl	800de48 <core_set_error>
 800d87c:	4628      	mov	r0, r5
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	4b16      	ldr	r3, [pc, #88]	; (800d8dc <ai_platform_network_post_init+0x150>)
 800d882:	2201      	movs	r2, #1
 800d884:	4619      	mov	r1, r3
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	680b      	ldr	r3, [r1, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1fc      	bne.n	800d888 <ai_platform_network_post_init+0xfc>
 800d88e:	4b14      	ldr	r3, [pc, #80]	; (800d8e0 <ai_platform_network_post_init+0x154>)
 800d890:	4910      	ldr	r1, [pc, #64]	; (800d8d4 <ai_platform_network_post_init+0x148>)
 800d892:	4a11      	ldr	r2, [pc, #68]	; (800d8d8 <ai_platform_network_post_init+0x14c>)
 800d894:	6019      	str	r1, [r3, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4293      	cmp	r3, r2
 800d89a:	d0c0      	beq.n	800d81e <ai_platform_network_post_init+0x92>
 800d89c:	e7fe      	b.n	800d89c <ai_platform_network_post_init+0x110>
 800d89e:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <ai_platform_network_post_init+0x140>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	680b      	ldr	r3, [r1, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1fc      	bne.n	800d8a6 <ai_platform_network_post_init+0x11a>
 800d8ac:	4b08      	ldr	r3, [pc, #32]	; (800d8d0 <ai_platform_network_post_init+0x144>)
 800d8ae:	4909      	ldr	r1, [pc, #36]	; (800d8d4 <ai_platform_network_post_init+0x148>)
 800d8b0:	4a09      	ldr	r2, [pc, #36]	; (800d8d8 <ai_platform_network_post_init+0x14c>)
 800d8b2:	6019      	str	r1, [r3, #0]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d0b1      	beq.n	800d81e <ai_platform_network_post_init+0x92>
 800d8ba:	e7fe      	b.n	800d8ba <ai_platform_network_post_init+0x12e>
 800d8bc:	a1c00100 	.word	0xa1c00100
 800d8c0:	e0002000 	.word	0xe0002000
 800d8c4:	e0042000 	.word	0xe0042000
 800d8c8:	5c001000 	.word	0x5c001000
 800d8cc:	40023008 	.word	0x40023008
 800d8d0:	40023000 	.word	0x40023000
 800d8d4:	f407a5c2 	.word	0xf407a5c2
 800d8d8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d8dc:	58024c08 	.word	0x58024c08
 800d8e0:	58024c00 	.word	0x58024c00

0800d8e4 <ai_platform_network_process>:
 800d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	4692      	mov	sl, r2
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	b120      	cbz	r0, 800d8fa <ai_platform_network_process+0x16>
 800d8f0:	4b86      	ldr	r3, [pc, #536]	; (800db0c <ai_platform_network_process+0x228>)
 800d8f2:	6802      	ldr	r2, [r0, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	bf18      	it	ne
 800d8f8:	2400      	movne	r4, #0
 800d8fa:	4a85      	ldr	r2, [pc, #532]	; (800db10 <ai_platform_network_process+0x22c>)
 800d8fc:	4885      	ldr	r0, [pc, #532]	; (800db14 <ai_platform_network_process+0x230>)
 800d8fe:	6813      	ldr	r3, [r2, #0]
 800d900:	f023 0301 	bic.w	r3, r3, #1
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	6803      	ldr	r3, [r0, #0]
 800d908:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800d90c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d910:	181a      	adds	r2, r3, r0
 800d912:	2a01      	cmp	r2, #1
 800d914:	f240 80c6 	bls.w	800daa4 <ai_platform_network_process+0x1c0>
 800d918:	f240 4249 	movw	r2, #1097	; 0x449
 800d91c:	4293      	cmp	r3, r2
 800d91e:	f000 80c1 	beq.w	800daa4 <ai_platform_network_process+0x1c0>
 800d922:	4b7d      	ldr	r3, [pc, #500]	; (800db18 <ai_platform_network_process+0x234>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d92a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d92e:	f000 80a9 	beq.w	800da84 <ai_platform_network_process+0x1a0>
 800d932:	2c00      	cmp	r4, #0
 800d934:	f000 80db 	beq.w	800daee <ai_platform_network_process+0x20a>
 800d938:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800d93c:	68e0      	ldr	r0, [r4, #12]
 800d93e:	461a      	mov	r2, r3
 800d940:	f000 0003 	and.w	r0, r0, #3
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 80bd 	beq.w	800dac4 <ai_platform_network_process+0x1e0>
 800d94a:	2600      	movs	r6, #0
 800d94c:	2803      	cmp	r0, #3
 800d94e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d950:	6166      	str	r6, [r4, #20]
 800d952:	f040 80c6 	bne.w	800dae2 <ai_platform_network_process+0x1fe>
 800d956:	2900      	cmp	r1, #0
 800d958:	f000 80b7 	beq.w	800daca <ai_platform_network_process+0x1e6>
 800d95c:	fab5 f085 	clz	r0, r5
 800d960:	0940      	lsrs	r0, r0, #5
 800d962:	2800      	cmp	r0, #0
 800d964:	f040 80b1 	bne.w	800daca <ai_platform_network_process+0x1e6>
 800d968:	882e      	ldrh	r6, [r5, #0]
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	f000 80ad 	beq.w	800daca <ai_platform_network_process+0x1e6>
 800d970:	888f      	ldrh	r7, [r1, #4]
 800d972:	686e      	ldr	r6, [r5, #4]
 800d974:	9701      	str	r7, [sp, #4]
 800d976:	2e00      	cmp	r6, #0
 800d978:	f000 825f 	beq.w	800de3a <ai_platform_network_process+0x556>
 800d97c:	6836      	ldr	r6, [r6, #0]
 800d97e:	2e00      	cmp	r6, #0
 800d980:	f000 825b 	beq.w	800de3a <ai_platform_network_process+0x556>
 800d984:	68ab      	ldr	r3, [r5, #8]
 800d986:	f8d3 9000 	ldr.w	r9, [r3]
 800d98a:	f1b9 0f00 	cmp.w	r9, #0
 800d98e:	f000 809c 	beq.w	800daca <ai_platform_network_process+0x1e6>
 800d992:	460f      	mov	r7, r1
 800d994:	4680      	mov	r8, r0
 800d996:	e05e      	b.n	800da56 <ai_platform_network_process+0x172>
 800d998:	68f3      	ldr	r3, [r6, #12]
 800d99a:	68da      	ldr	r2, [r3, #12]
 800d99c:	455a      	cmp	r2, fp
 800d99e:	d168      	bne.n	800da72 <ai_platform_network_process+0x18e>
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	4572      	cmp	r2, lr
 800d9a4:	d165      	bne.n	800da72 <ai_platform_network_process+0x18e>
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	459c      	cmp	ip, r3
 800d9aa:	d162      	bne.n	800da72 <ai_platform_network_process+0x18e>
 800d9ac:	6800      	ldr	r0, [r0, #0]
 800d9ae:	f002 fc8d 	bl	80102cc <ai_array_get_byte_size>
 800d9b2:	68f2      	ldr	r2, [r6, #12]
 800d9b4:	6973      	ldr	r3, [r6, #20]
 800d9b6:	68d2      	ldr	r2, [r2, #12]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	fb03 f302 	mul.w	r3, r3, r2
 800d9be:	4298      	cmp	r0, r3
 800d9c0:	d357      	bcc.n	800da72 <ai_platform_network_process+0x18e>
 800d9c2:	69b3      	ldr	r3, [r6, #24]
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	f002 fc35 	bl	8010234 <ai_array_to_buffer_fmt>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	4043      	eors	r3, r0
 800d9ce:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800d9d2:	f040 8229 	bne.w	800de28 <ai_platform_network_process+0x544>
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 821d 	beq.w	800de18 <ai_platform_network_process+0x534>
 800d9de:	88bb      	ldrh	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 808a 	beq.w	800dafa <ai_platform_network_process+0x216>
 800d9e6:	9a01      	ldr	r2, [sp, #4]
 800d9e8:	68f1      	ldr	r1, [r6, #12]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	68c9      	ldr	r1, [r1, #12]
 800d9ee:	bf38      	it	cc
 800d9f0:	461a      	movcc	r2, r3
 800d9f2:	9201      	str	r2, [sp, #4]
 800d9f4:	6972      	ldr	r2, [r6, #20]
 800d9f6:	68d3      	ldr	r3, [r2, #12]
 800d9f8:	fb03 f301 	mul.w	r3, r3, r1
 800d9fc:	f8c9 3008 	str.w	r3, [r9, #8]
 800da00:	88ba      	ldrh	r2, [r7, #4]
 800da02:	fb03 f302 	mul.w	r3, r3, r2
 800da06:	f8c9 300c 	str.w	r3, [r9, #12]
 800da0a:	6939      	ldr	r1, [r7, #16]
 800da0c:	f8c9 1004 	str.w	r1, [r9, #4]
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	4413      	add	r3, r2
 800da14:	f8c9 3000 	str.w	r3, [r9]
 800da18:	69b0      	ldr	r0, [r6, #24]
 800da1a:	6803      	ldr	r3, [r0, #0]
 800da1c:	009a      	lsls	r2, r3, #2
 800da1e:	d408      	bmi.n	800da32 <ai_platform_network_process+0x14e>
 800da20:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800da24:	1a9b      	subs	r3, r3, r2
 800da26:	4419      	add	r1, r3
 800da28:	6081      	str	r1, [r0, #8]
 800da2a:	69b3      	ldr	r3, [r6, #24]
 800da2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	882b      	ldrh	r3, [r5, #0]
 800da38:	4598      	cmp	r8, r3
 800da3a:	d27b      	bcs.n	800db34 <ai_platform_network_process+0x250>
 800da3c:	686b      	ldr	r3, [r5, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d078      	beq.n	800db34 <ai_platform_network_process+0x250>
 800da42:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800da46:	2e00      	cmp	r6, #0
 800da48:	d074      	beq.n	800db34 <ai_platform_network_process+0x250>
 800da4a:	68ab      	ldr	r3, [r5, #8]
 800da4c:	3718      	adds	r7, #24
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800da54:	d039      	beq.n	800daca <ai_platform_network_process+0x1e6>
 800da56:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800da5a:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800da5e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800da62:	fb0b f30e 	mul.w	r3, fp, lr
 800da66:	69b0      	ldr	r0, [r6, #24]
 800da68:	fb0c f303 	mul.w	r3, ip, r3
 800da6c:	6841      	ldr	r1, [r0, #4]
 800da6e:	4299      	cmp	r1, r3
 800da70:	d292      	bcs.n	800d998 <ai_platform_network_process+0xb4>
 800da72:	f104 0010 	add.w	r0, r4, #16
 800da76:	2218      	movs	r2, #24
 800da78:	2112      	movs	r1, #18
 800da7a:	f04f 0b00 	mov.w	fp, #0
 800da7e:	f000 f9e3 	bl	800de48 <core_set_error>
 800da82:	e02a      	b.n	800dada <ai_platform_network_process+0x1f6>
 800da84:	4b25      	ldr	r3, [pc, #148]	; (800db1c <ai_platform_network_process+0x238>)
 800da86:	2201      	movs	r2, #1
 800da88:	4618      	mov	r0, r3
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	6803      	ldr	r3, [r0, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1fc      	bne.n	800da8c <ai_platform_network_process+0x1a8>
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <ai_platform_network_process+0x23c>)
 800da94:	4823      	ldr	r0, [pc, #140]	; (800db24 <ai_platform_network_process+0x240>)
 800da96:	4a24      	ldr	r2, [pc, #144]	; (800db28 <ai_platform_network_process+0x244>)
 800da98:	6018      	str	r0, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4293      	cmp	r3, r2
 800da9e:	f43f af48 	beq.w	800d932 <ai_platform_network_process+0x4e>
 800daa2:	e7fe      	b.n	800daa2 <ai_platform_network_process+0x1be>
 800daa4:	4b21      	ldr	r3, [pc, #132]	; (800db2c <ai_platform_network_process+0x248>)
 800daa6:	2201      	movs	r2, #1
 800daa8:	4618      	mov	r0, r3
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	6803      	ldr	r3, [r0, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1fc      	bne.n	800daac <ai_platform_network_process+0x1c8>
 800dab2:	4b1f      	ldr	r3, [pc, #124]	; (800db30 <ai_platform_network_process+0x24c>)
 800dab4:	481b      	ldr	r0, [pc, #108]	; (800db24 <ai_platform_network_process+0x240>)
 800dab6:	4a1c      	ldr	r2, [pc, #112]	; (800db28 <ai_platform_network_process+0x244>)
 800dab8:	6018      	str	r0, [r3, #0]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4293      	cmp	r3, r2
 800dabe:	f43f af38 	beq.w	800d932 <ai_platform_network_process+0x4e>
 800dac2:	e7fe      	b.n	800dac2 <ai_platform_network_process+0x1de>
 800dac4:	2803      	cmp	r0, #3
 800dac6:	6163      	str	r3, [r4, #20]
 800dac8:	d10b      	bne.n	800dae2 <ai_platform_network_process+0x1fe>
 800daca:	f04f 0b00 	mov.w	fp, #0
 800dace:	f104 0010 	add.w	r0, r4, #16
 800dad2:	2217      	movs	r2, #23
 800dad4:	2112      	movs	r1, #18
 800dad6:	f000 f9b7 	bl	800de48 <core_set_error>
 800dada:	4658      	mov	r0, fp
 800dadc:	b003      	add	sp, #12
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	f104 0010 	add.w	r0, r4, #16
 800dae6:	2230      	movs	r2, #48	; 0x30
 800dae8:	2111      	movs	r1, #17
 800daea:	f000 f9ad 	bl	800de48 <core_set_error>
 800daee:	f04f 0b00 	mov.w	fp, #0
 800daf2:	4658      	mov	r0, fp
 800daf4:	b003      	add	sp, #12
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	f104 0010 	add.w	r0, r4, #16
 800dafe:	2221      	movs	r2, #33	; 0x21
 800db00:	2112      	movs	r1, #18
 800db02:	469b      	mov	fp, r3
 800db04:	f000 f9a0 	bl	800de48 <core_set_error>
 800db08:	e7e7      	b.n	800dada <ai_platform_network_process+0x1f6>
 800db0a:	bf00      	nop
 800db0c:	a1c00100 	.word	0xa1c00100
 800db10:	e0002000 	.word	0xe0002000
 800db14:	e0042000 	.word	0xe0042000
 800db18:	5c001000 	.word	0x5c001000
 800db1c:	58024c08 	.word	0x58024c08
 800db20:	58024c00 	.word	0x58024c00
 800db24:	f407a5c2 	.word	0xf407a5c2
 800db28:	b5e8b5cd 	.word	0xb5e8b5cd
 800db2c:	40023008 	.word	0x40023008
 800db30:	40023000 	.word	0x40023000
 800db34:	f1ba 0f00 	cmp.w	sl, #0
 800db38:	f000 808c 	beq.w	800dc54 <ai_platform_network_process+0x370>
 800db3c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800db40:	2b01      	cmp	r3, #1
 800db42:	f240 813b 	bls.w	800ddbc <ai_platform_network_process+0x4d8>
 800db46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800db48:	f115 0f0c 	cmn.w	r5, #12
 800db4c:	f000 8136 	beq.w	800ddbc <ai_platform_network_process+0x4d8>
 800db50:	89ab      	ldrh	r3, [r5, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 8132 	beq.w	800ddbc <ai_platform_network_process+0x4d8>
 800db58:	4656      	mov	r6, sl
 800db5a:	f04f 0900 	mov.w	r9, #0
 800db5e:	9400      	str	r4, [sp, #0]
 800db60:	4599      	cmp	r9, r3
 800db62:	d274      	bcs.n	800dc4e <ai_platform_network_process+0x36a>
 800db64:	692b      	ldr	r3, [r5, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d071      	beq.n	800dc4e <ai_platform_network_process+0x36a>
 800db6a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800db6e:	2f00      	cmp	r7, #0
 800db70:	d06d      	beq.n	800dc4e <ai_platform_network_process+0x36a>
 800db72:	696b      	ldr	r3, [r5, #20]
 800db74:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800db78:	f8d3 8000 	ldr.w	r8, [r3]
 800db7c:	eb18 0a04 	adds.w	sl, r8, r4
 800db80:	f000 8125 	beq.w	800ddce <ai_platform_network_process+0x4ea>
 800db84:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800db88:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800db8c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800db90:	fb0b f30e 	mul.w	r3, fp, lr
 800db94:	69b8      	ldr	r0, [r7, #24]
 800db96:	fb0c f303 	mul.w	r3, ip, r3
 800db9a:	6841      	ldr	r1, [r0, #4]
 800db9c:	4299      	cmp	r1, r3
 800db9e:	f0c0 810c 	bcc.w	800ddba <ai_platform_network_process+0x4d6>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68da      	ldr	r2, [r3, #12]
 800dba6:	455a      	cmp	r2, fp
 800dba8:	f040 8107 	bne.w	800ddba <ai_platform_network_process+0x4d6>
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	4572      	cmp	r2, lr
 800dbb0:	f040 8103 	bne.w	800ddba <ai_platform_network_process+0x4d6>
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	459c      	cmp	ip, r3
 800dbb8:	f040 80ff 	bne.w	800ddba <ai_platform_network_process+0x4d6>
 800dbbc:	6800      	ldr	r0, [r0, #0]
 800dbbe:	f002 fb85 	bl	80102cc <ai_array_get_byte_size>
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	68d2      	ldr	r2, [r2, #12]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	fb03 f302 	mul.w	r3, r3, r2
 800dbce:	4298      	cmp	r0, r3
 800dbd0:	f0c0 80f3 	bcc.w	800ddba <ai_platform_network_process+0x4d6>
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	f002 fb2c 	bl	8010234 <ai_array_to_buffer_fmt>
 800dbdc:	6833      	ldr	r3, [r6, #0]
 800dbde:	4043      	eors	r3, r0
 800dbe0:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800dbe4:	f040 810e 	bne.w	800de04 <ai_platform_network_process+0x520>
 800dbe8:	6933      	ldr	r3, [r6, #16]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 8101 	beq.w	800ddf2 <ai_platform_network_process+0x50e>
 800dbf0:	88b3      	ldrh	r3, [r6, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 80f4 	beq.w	800dde0 <ai_platform_network_process+0x4fc>
 800dbf8:	9a01      	ldr	r2, [sp, #4]
 800dbfa:	68f9      	ldr	r1, [r7, #12]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	68c9      	ldr	r1, [r1, #12]
 800dc00:	bf38      	it	cc
 800dc02:	461a      	movcc	r2, r3
 800dc04:	9201      	str	r2, [sp, #4]
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	68d3      	ldr	r3, [r2, #12]
 800dc0a:	fb03 f301 	mul.w	r3, r3, r1
 800dc0e:	f8ca 3008 	str.w	r3, [sl, #8]
 800dc12:	88b2      	ldrh	r2, [r6, #4]
 800dc14:	fb03 f302 	mul.w	r3, r3, r2
 800dc18:	f8ca 300c 	str.w	r3, [sl, #12]
 800dc1c:	6931      	ldr	r1, [r6, #16]
 800dc1e:	f8ca 1004 	str.w	r1, [sl, #4]
 800dc22:	6932      	ldr	r2, [r6, #16]
 800dc24:	4413      	add	r3, r2
 800dc26:	f848 3004 	str.w	r3, [r8, r4]
 800dc2a:	69b8      	ldr	r0, [r7, #24]
 800dc2c:	6803      	ldr	r3, [r0, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	d408      	bmi.n	800dc44 <ai_platform_network_process+0x360>
 800dc32:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800dc36:	1a9b      	subs	r3, r3, r2
 800dc38:	4419      	add	r1, r3
 800dc3a:	6081      	str	r1, [r0, #8]
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dc42:	60da      	str	r2, [r3, #12]
 800dc44:	f109 0901 	add.w	r9, r9, #1
 800dc48:	3618      	adds	r6, #24
 800dc4a:	89ab      	ldrh	r3, [r5, #12]
 800dc4c:	e788      	b.n	800db60 <ai_platform_network_process+0x27c>
 800dc4e:	e9dd 4300 	ldrd	r4, r3, [sp]
 800dc52:	82a3      	strh	r3, [r4, #20]
 800dc54:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	f000 80a9 	beq.w	800ddb0 <ai_platform_network_process+0x4cc>
 800dc5e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800dc60:	2a01      	cmp	r2, #1
 800dc62:	f240 80a8 	bls.w	800ddb6 <ai_platform_network_process+0x4d2>
 800dc66:	f105 060c 	add.w	r6, r5, #12
 800dc6a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800dc6e:	8aa3      	ldrh	r3, [r4, #20]
 800dc70:	455b      	cmp	r3, fp
 800dc72:	f67f af32 	bls.w	800dada <ai_platform_network_process+0x1f6>
 800dc76:	9400      	str	r4, [sp, #0]
 800dc78:	2d00      	cmp	r5, #0
 800dc7a:	d037      	beq.n	800dcec <ai_platform_network_process+0x408>
 800dc7c:	882b      	ldrh	r3, [r5, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d034      	beq.n	800dcec <ai_platform_network_process+0x408>
 800dc82:	686b      	ldr	r3, [r5, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d031      	beq.n	800dcec <ai_platform_network_process+0x408>
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d02e      	beq.n	800dcec <ai_platform_network_process+0x408>
 800dc8e:	f04f 0800 	mov.w	r8, #0
 800dc92:	e01a      	b.n	800dcca <ai_platform_network_process+0x3e6>
 800dc94:	68d4      	ldr	r4, [r2, #12]
 800dc96:	1b00      	subs	r0, r0, r4
 800dc98:	4401      	add	r1, r0
 800dc9a:	6091      	str	r1, [r2, #8]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	60da      	str	r2, [r3, #12]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f108 0801 	add.w	r8, r8, #1
 800dca8:	68b9      	ldr	r1, [r7, #8]
 800dcaa:	f85a 2009 	ldr.w	r2, [sl, r9]
 800dcae:	440b      	add	r3, r1
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d301      	bcc.n	800dcb8 <ai_platform_network_process+0x3d4>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	607b      	str	r3, [r7, #4]
 800dcba:	882b      	ldrh	r3, [r5, #0]
 800dcbc:	4598      	cmp	r8, r3
 800dcbe:	d215      	bcs.n	800dcec <ai_platform_network_process+0x408>
 800dcc0:	686b      	ldr	r3, [r5, #4]
 800dcc2:	b19b      	cbz	r3, 800dcec <ai_platform_network_process+0x408>
 800dcc4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dcc8:	b183      	cbz	r3, 800dcec <ai_platform_network_process+0x408>
 800dcca:	68a9      	ldr	r1, [r5, #8]
 800dccc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800dcd0:	699a      	ldr	r2, [r3, #24]
 800dcd2:	f8d1 a000 	ldr.w	sl, [r1]
 800dcd6:	6814      	ldr	r4, [r2, #0]
 800dcd8:	eb0a 0709 	add.w	r7, sl, r9
 800dcdc:	6890      	ldr	r0, [r2, #8]
 800dcde:	00a4      	lsls	r4, r4, #2
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	d5d7      	bpl.n	800dc94 <ai_platform_network_process+0x3b0>
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	f002 fb4b 	bl	8010380 <memcpy>
 800dcea:	e7da      	b.n	800dca2 <ai_platform_network_process+0x3be>
 800dcec:	9800      	ldr	r0, [sp, #0]
 800dcee:	f002 fa67 	bl	80101c0 <ai_layers_forward_all>
 800dcf2:	2e00      	cmp	r6, #0
 800dcf4:	d04a      	beq.n	800dd8c <ai_platform_network_process+0x4a8>
 800dcf6:	8833      	ldrh	r3, [r6, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d047      	beq.n	800dd8c <ai_platform_network_process+0x4a8>
 800dcfc:	6873      	ldr	r3, [r6, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d044      	beq.n	800dd8c <ai_platform_network_process+0x4a8>
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d041      	beq.n	800dd8c <ai_platform_network_process+0x4a8>
 800dd08:	f04f 0800 	mov.w	r8, #0
 800dd0c:	e019      	b.n	800dd42 <ai_platform_network_process+0x45e>
 800dd0e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800dd12:	4291      	cmp	r1, r2
 800dd14:	d301      	bcc.n	800dd1a <ai_platform_network_process+0x436>
 800dd16:	68f9      	ldr	r1, [r7, #12]
 800dd18:	1a51      	subs	r1, r2, r1
 800dd1a:	6079      	str	r1, [r7, #4]
 800dd1c:	f108 0801 	add.w	r8, r8, #1
 800dd20:	6998      	ldr	r0, [r3, #24]
 800dd22:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800dd26:	1b12      	subs	r2, r2, r4
 800dd28:	440a      	add	r2, r1
 800dd2a:	6082      	str	r2, [r0, #8]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	60da      	str	r2, [r3, #12]
 800dd32:	8833      	ldrh	r3, [r6, #0]
 800dd34:	4598      	cmp	r8, r3
 800dd36:	d229      	bcs.n	800dd8c <ai_platform_network_process+0x4a8>
 800dd38:	6873      	ldr	r3, [r6, #4]
 800dd3a:	b33b      	cbz	r3, 800dd8c <ai_platform_network_process+0x4a8>
 800dd3c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dd40:	b323      	cbz	r3, 800dd8c <ai_platform_network_process+0x4a8>
 800dd42:	68b2      	ldr	r2, [r6, #8]
 800dd44:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800dd48:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800dd4c:	f8d2 a000 	ldr.w	sl, [r2]
 800dd50:	f8de 1000 	ldr.w	r1, [lr]
 800dd54:	eb0a 0709 	add.w	r7, sl, r9
 800dd58:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800dd5c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800dd60:	eb00 0102 	add.w	r1, r0, r2
 800dd64:	d0d3      	beq.n	800dd0e <ai_platform_network_process+0x42a>
 800dd66:	f8de 1008 	ldr.w	r1, [lr, #8]
 800dd6a:	f002 fb09 	bl	8010380 <memcpy>
 800dd6e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800dd72:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800dd76:	440b      	add	r3, r1
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d301      	bcc.n	800dd80 <ai_platform_network_process+0x49c>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	f108 0801 	add.w	r8, r8, #1
 800dd86:	8833      	ldrh	r3, [r6, #0]
 800dd88:	4598      	cmp	r8, r3
 800dd8a:	d3d5      	bcc.n	800dd38 <ai_platform_network_process+0x454>
 800dd8c:	9b00      	ldr	r3, [sp, #0]
 800dd8e:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800dd92:	461a      	mov	r2, r3
 800dd94:	8a9b      	ldrh	r3, [r3, #20]
 800dd96:	f10b 0b01 	add.w	fp, fp, #1
 800dd9a:	fa1f fb8b 	uxth.w	fp, fp
 800dd9e:	455b      	cmp	r3, fp
 800dda0:	f8a2 b016 	strh.w	fp, [r2, #22]
 800dda4:	f63f af68 	bhi.w	800dc78 <ai_platform_network_process+0x394>
 800dda8:	4658      	mov	r0, fp
 800ddaa:	b003      	add	sp, #12
 800ddac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb0:	4615      	mov	r5, r2
 800ddb2:	4616      	mov	r6, r2
 800ddb4:	e759      	b.n	800dc6a <ai_platform_network_process+0x386>
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	e757      	b.n	800dc6a <ai_platform_network_process+0x386>
 800ddba:	9c00      	ldr	r4, [sp, #0]
 800ddbc:	f104 0010 	add.w	r0, r4, #16
 800ddc0:	2218      	movs	r2, #24
 800ddc2:	2113      	movs	r1, #19
 800ddc4:	f04f 0b00 	mov.w	fp, #0
 800ddc8:	f000 f83e 	bl	800de48 <core_set_error>
 800ddcc:	e685      	b.n	800dada <ai_platform_network_process+0x1f6>
 800ddce:	9c00      	ldr	r4, [sp, #0]
 800ddd0:	2217      	movs	r2, #23
 800ddd2:	2113      	movs	r1, #19
 800ddd4:	46d3      	mov	fp, sl
 800ddd6:	f104 0010 	add.w	r0, r4, #16
 800ddda:	f000 f835 	bl	800de48 <core_set_error>
 800ddde:	e67c      	b.n	800dada <ai_platform_network_process+0x1f6>
 800dde0:	9c00      	ldr	r4, [sp, #0]
 800dde2:	2221      	movs	r2, #33	; 0x21
 800dde4:	2113      	movs	r1, #19
 800dde6:	469b      	mov	fp, r3
 800dde8:	f104 0010 	add.w	r0, r4, #16
 800ddec:	f000 f82c 	bl	800de48 <core_set_error>
 800ddf0:	e673      	b.n	800dada <ai_platform_network_process+0x1f6>
 800ddf2:	9c00      	ldr	r4, [sp, #0]
 800ddf4:	2217      	movs	r2, #23
 800ddf6:	2113      	movs	r1, #19
 800ddf8:	469b      	mov	fp, r3
 800ddfa:	f104 0010 	add.w	r0, r4, #16
 800ddfe:	f000 f823 	bl	800de48 <core_set_error>
 800de02:	e66a      	b.n	800dada <ai_platform_network_process+0x1f6>
 800de04:	9c00      	ldr	r4, [sp, #0]
 800de06:	2219      	movs	r2, #25
 800de08:	2113      	movs	r1, #19
 800de0a:	f04f 0b00 	mov.w	fp, #0
 800de0e:	f104 0010 	add.w	r0, r4, #16
 800de12:	f000 f819 	bl	800de48 <core_set_error>
 800de16:	e660      	b.n	800dada <ai_platform_network_process+0x1f6>
 800de18:	f104 0010 	add.w	r0, r4, #16
 800de1c:	2217      	movs	r2, #23
 800de1e:	2112      	movs	r1, #18
 800de20:	469b      	mov	fp, r3
 800de22:	f000 f811 	bl	800de48 <core_set_error>
 800de26:	e658      	b.n	800dada <ai_platform_network_process+0x1f6>
 800de28:	f104 0010 	add.w	r0, r4, #16
 800de2c:	2219      	movs	r2, #25
 800de2e:	2112      	movs	r1, #18
 800de30:	f04f 0b00 	mov.w	fp, #0
 800de34:	f000 f808 	bl	800de48 <core_set_error>
 800de38:	e64f      	b.n	800dada <ai_platform_network_process+0x1f6>
 800de3a:	f1ba 0f00 	cmp.w	sl, #0
 800de3e:	f47f ae7f 	bne.w	800db40 <ai_platform_network_process+0x25c>
 800de42:	e70d      	b.n	800dc60 <ai_platform_network_process+0x37c>

0800de44 <core_init>:
 800de44:	2001      	movs	r0, #1
 800de46:	4770      	bx	lr

0800de48 <core_set_error>:
 800de48:	4603      	mov	r3, r0
 800de4a:	7800      	ldrb	r0, [r0, #0]
 800de4c:	b930      	cbnz	r0, 800de5c <core_set_error+0x14>
 800de4e:	7019      	strb	r1, [r3, #0]
 800de50:	2001      	movs	r0, #1
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	f362 211f 	bfi	r1, r2, #8, #24
 800de58:	6019      	str	r1, [r3, #0]
 800de5a:	4770      	bx	lr
 800de5c:	2000      	movs	r0, #0
 800de5e:	4770      	bx	lr

0800de60 <func_dummy>:
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop

0800de64 <ai_dict8_dot_array_f32>:
 800de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	9d06      	ldr	r5, [sp, #24]
 800de6a:	4c88      	ldr	r4, [pc, #544]	; (800e08c <ai_dict8_dot_array_f32+0x228>)
 800de6c:	2d07      	cmp	r5, #7
 800de6e:	442c      	add	r4, r5
 800de70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de74:	f104 0620 	add.w	r6, r4, #32
 800de78:	d817      	bhi.n	800deaa <ai_dict8_dot_array_f32+0x46>
 800de7a:	42b3      	cmp	r3, r6
 800de7c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e090 <ai_dict8_dot_array_f32+0x22c>
 800de80:	d20b      	bcs.n	800de9a <ai_dict8_dot_array_f32+0x36>
 800de82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de86:	ecf3 7a01 	vldmia	r3!, {s15}
 800de8a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800de8e:	42b3      	cmp	r3, r6
 800de90:	edd4 6a00 	vldr	s13, [r4]
 800de94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800de98:	d3f3      	bcc.n	800de82 <ai_dict8_dot_array_f32+0x1e>
 800de9a:	edd0 7a00 	vldr	s15, [r0]
 800de9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dea2:	ed80 7a00 	vstr	s14, [r0]
 800dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deaa:	f001 0503 	and.w	r5, r1, #3
 800deae:	2d02      	cmp	r5, #2
 800deb0:	f000 80f0 	beq.w	800e094 <ai_dict8_dot_array_f32+0x230>
 800deb4:	2d03      	cmp	r5, #3
 800deb6:	f000 81ff 	beq.w	800e2b8 <ai_dict8_dot_array_f32+0x454>
 800deba:	2d01      	cmp	r5, #1
 800debc:	f000 81f0 	beq.w	800e2a0 <ai_dict8_dot_array_f32+0x43c>
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	f200 81fc 	bhi.w	800e2be <ai_dict8_dot_array_f32+0x45a>
 800dec6:	1ae4      	subs	r4, r4, r3
 800dec8:	f101 0810 	add.w	r8, r1, #16
 800decc:	f101 0508 	add.w	r5, r1, #8
 800ded0:	f103 0720 	add.w	r7, r3, #32
 800ded4:	0964      	lsrs	r4, r4, #5
 800ded6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800e090 <ai_dict8_dot_array_f32+0x22c>
 800deda:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800dede:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800dee2:	3508      	adds	r5, #8
 800dee4:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800dee8:	3720      	adds	r7, #32
 800deea:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800deee:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800def2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800def6:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800defa:	edde 7a00 	vldr	s15, [lr]
 800defe:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800df02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800df06:	eddc 5a00 	vldr	s11, [ip]
 800df0a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800df0e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800df12:	eee5 7a86 	vfma.f32	s15, s11, s12
 800df16:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800df1a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800df1e:	ed9c 4a00 	vldr	s8, [ip]
 800df22:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800df26:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800df2a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800df2e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800df32:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800df36:	eee4 7a26 	vfma.f32	s15, s8, s13
 800df3a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800df3e:	ed9c 4a00 	vldr	s8, [ip]
 800df42:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800df46:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800df4a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800df4e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800df52:	ed9e 5a00 	vldr	s10, [lr]
 800df56:	ed9c 4a00 	vldr	s8, [ip]
 800df5a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800df5e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800df62:	4545      	cmp	r5, r8
 800df64:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800df68:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800df6c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800df70:	ed9e 5a00 	vldr	s10, [lr]
 800df74:	ed9c 6a00 	vldr	s12, [ip]
 800df78:	eee4 7a24 	vfma.f32	s15, s8, s9
 800df7c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800df80:	eee6 7a26 	vfma.f32	s15, s12, s13
 800df84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df88:	d1a9      	bne.n	800dede <ai_dict8_dot_array_f32+0x7a>
 800df8a:	3401      	adds	r4, #1
 800df8c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800df90:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800df94:	42b3      	cmp	r3, r6
 800df96:	d280      	bcs.n	800de9a <ai_dict8_dot_array_f32+0x36>
 800df98:	461c      	mov	r4, r3
 800df9a:	780d      	ldrb	r5, [r1, #0]
 800df9c:	ecf4 6a01 	vldmia	r4!, {s13}
 800dfa0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800dfa4:	42a6      	cmp	r6, r4
 800dfa6:	edd5 7a00 	vldr	s15, [r5]
 800dfaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfae:	f67f af74 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800dfb2:	784d      	ldrb	r5, [r1, #1]
 800dfb4:	f103 0408 	add.w	r4, r3, #8
 800dfb8:	edd3 6a01 	vldr	s13, [r3, #4]
 800dfbc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800dfc0:	42a6      	cmp	r6, r4
 800dfc2:	edd5 7a00 	vldr	s15, [r5]
 800dfc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfca:	f67f af66 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800dfce:	788d      	ldrb	r5, [r1, #2]
 800dfd0:	f103 040c 	add.w	r4, r3, #12
 800dfd4:	edd3 6a02 	vldr	s13, [r3, #8]
 800dfd8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800dfdc:	42a6      	cmp	r6, r4
 800dfde:	edd5 7a00 	vldr	s15, [r5]
 800dfe2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dfe6:	f67f af58 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800dfea:	78cd      	ldrb	r5, [r1, #3]
 800dfec:	f103 0410 	add.w	r4, r3, #16
 800dff0:	edd3 6a03 	vldr	s13, [r3, #12]
 800dff4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800dff8:	42a6      	cmp	r6, r4
 800dffa:	edd5 7a00 	vldr	s15, [r5]
 800dffe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e002:	f67f af4a 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e006:	790d      	ldrb	r5, [r1, #4]
 800e008:	f103 0414 	add.w	r4, r3, #20
 800e00c:	edd3 6a04 	vldr	s13, [r3, #16]
 800e010:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e014:	42a6      	cmp	r6, r4
 800e016:	edd5 7a00 	vldr	s15, [r5]
 800e01a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e01e:	f67f af3c 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e022:	794d      	ldrb	r5, [r1, #5]
 800e024:	f103 0418 	add.w	r4, r3, #24
 800e028:	edd3 6a05 	vldr	s13, [r3, #20]
 800e02c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e030:	42a6      	cmp	r6, r4
 800e032:	edd5 7a00 	vldr	s15, [r5]
 800e036:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e03a:	f67f af2e 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e03e:	798d      	ldrb	r5, [r1, #6]
 800e040:	f103 041c 	add.w	r4, r3, #28
 800e044:	edd3 6a06 	vldr	s13, [r3, #24]
 800e048:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e04c:	42a6      	cmp	r6, r4
 800e04e:	edd5 7a00 	vldr	s15, [r5]
 800e052:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e056:	f67f af20 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e05a:	79cd      	ldrb	r5, [r1, #7]
 800e05c:	f103 0420 	add.w	r4, r3, #32
 800e060:	edd3 6a07 	vldr	s13, [r3, #28]
 800e064:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e068:	42a6      	cmp	r6, r4
 800e06a:	edd5 7a00 	vldr	s15, [r5]
 800e06e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e072:	f67f af12 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e076:	7a09      	ldrb	r1, [r1, #8]
 800e078:	edd3 7a08 	vldr	s15, [r3, #32]
 800e07c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e080:	edd2 6a00 	vldr	s13, [r2]
 800e084:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e088:	e707      	b.n	800de9a <ai_dict8_dot_array_f32+0x36>
 800e08a:	bf00      	nop
 800e08c:	3ffffff8 	.word	0x3ffffff8
 800e090:	00000000 	.word	0x00000000
 800e094:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800e090 <ai_dict8_dot_array_f32+0x22c>
 800e098:	780d      	ldrb	r5, [r1, #0]
 800e09a:	3304      	adds	r3, #4
 800e09c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e0a0:	3101      	adds	r1, #1
 800e0a2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e0a6:	edd5 6a00 	vldr	s13, [r5]
 800e0aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0ae:	780d      	ldrb	r5, [r1, #0]
 800e0b0:	1d1f      	adds	r7, r3, #4
 800e0b2:	edd3 7a00 	vldr	s15, [r3]
 800e0b6:	f101 0c01 	add.w	ip, r1, #1
 800e0ba:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e0be:	42bc      	cmp	r4, r7
 800e0c0:	edd5 6a00 	vldr	s13, [r5]
 800e0c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0c8:	d365      	bcc.n	800e196 <ai_dict8_dot_array_f32+0x332>
 800e0ca:	3324      	adds	r3, #36	; 0x24
 800e0cc:	f101 0e11 	add.w	lr, r1, #17
 800e0d0:	3109      	adds	r1, #9
 800e0d2:	eba6 0803 	sub.w	r8, r6, r3
 800e0d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e0da:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800e0de:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800e0e2:	3108      	adds	r1, #8
 800e0e4:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800e0e8:	3320      	adds	r3, #32
 800e0ea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e0ee:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800e0f2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e0f6:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800e0fa:	edd5 7a00 	vldr	s15, [r5]
 800e0fe:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800e102:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e106:	edd4 5a00 	vldr	s11, [r4]
 800e10a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800e10e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800e112:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e116:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e11a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800e11e:	ed94 4a00 	vldr	s8, [r4]
 800e122:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800e126:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e12a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800e12e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e132:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800e136:	eee4 7a26 	vfma.f32	s15, s8, s13
 800e13a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800e13e:	ed94 4a00 	vldr	s8, [r4]
 800e142:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800e146:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800e14a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e14e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800e152:	ed95 5a00 	vldr	s10, [r5]
 800e156:	ed94 4a00 	vldr	s8, [r4]
 800e15a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800e15e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800e162:	458e      	cmp	lr, r1
 800e164:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e168:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e16c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800e170:	ed95 5a00 	vldr	s10, [r5]
 800e174:	ed94 6a00 	vldr	s12, [r4]
 800e178:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e17c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e180:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e184:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e188:	d1a9      	bne.n	800e0de <ai_dict8_dot_array_f32+0x27a>
 800e18a:	f108 0801 	add.w	r8, r8, #1
 800e18e:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800e192:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800e196:	42b7      	cmp	r7, r6
 800e198:	f4bf ae7f 	bcs.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e19c:	463b      	mov	r3, r7
 800e19e:	f89c 1000 	ldrb.w	r1, [ip]
 800e1a2:	ecf3 6a01 	vldmia	r3!, {s13}
 800e1a6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e1aa:	429e      	cmp	r6, r3
 800e1ac:	edd1 7a00 	vldr	s15, [r1]
 800e1b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1b4:	f67f ae71 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e1b8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800e1bc:	f107 0308 	add.w	r3, r7, #8
 800e1c0:	edd7 6a01 	vldr	s13, [r7, #4]
 800e1c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e1c8:	429e      	cmp	r6, r3
 800e1ca:	edd1 7a00 	vldr	s15, [r1]
 800e1ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1d2:	f67f ae62 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e1d6:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800e1da:	f107 030c 	add.w	r3, r7, #12
 800e1de:	edd7 6a02 	vldr	s13, [r7, #8]
 800e1e2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e1e6:	429e      	cmp	r6, r3
 800e1e8:	edd1 7a00 	vldr	s15, [r1]
 800e1ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e1f0:	f67f ae53 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e1f4:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800e1f8:	f107 0310 	add.w	r3, r7, #16
 800e1fc:	edd7 6a03 	vldr	s13, [r7, #12]
 800e200:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e204:	429e      	cmp	r6, r3
 800e206:	edd1 7a00 	vldr	s15, [r1]
 800e20a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e20e:	f67f ae44 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e212:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800e216:	f107 0314 	add.w	r3, r7, #20
 800e21a:	edd7 6a04 	vldr	s13, [r7, #16]
 800e21e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e222:	429e      	cmp	r6, r3
 800e224:	edd1 7a00 	vldr	s15, [r1]
 800e228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e22c:	f67f ae35 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e230:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800e234:	f107 0318 	add.w	r3, r7, #24
 800e238:	edd7 6a05 	vldr	s13, [r7, #20]
 800e23c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e240:	429e      	cmp	r6, r3
 800e242:	edd1 7a00 	vldr	s15, [r1]
 800e246:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e24a:	f67f ae26 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e24e:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800e252:	f107 031c 	add.w	r3, r7, #28
 800e256:	edd7 6a06 	vldr	s13, [r7, #24]
 800e25a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e25e:	429e      	cmp	r6, r3
 800e260:	edd1 7a00 	vldr	s15, [r1]
 800e264:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e268:	f67f ae17 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e26c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800e270:	f107 0320 	add.w	r3, r7, #32
 800e274:	edd7 6a07 	vldr	s13, [r7, #28]
 800e278:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e27c:	429e      	cmp	r6, r3
 800e27e:	edd1 7a00 	vldr	s15, [r1]
 800e282:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e286:	f67f ae08 	bls.w	800de9a <ai_dict8_dot_array_f32+0x36>
 800e28a:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800e28e:	edd7 7a08 	vldr	s15, [r7, #32]
 800e292:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e296:	edd2 6a00 	vldr	s13, [r2]
 800e29a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e29e:	e5fc      	b.n	800de9a <ai_dict8_dot_array_f32+0x36>
 800e2a0:	780d      	ldrb	r5, [r1, #0]
 800e2a2:	3304      	adds	r3, #4
 800e2a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e2a8:	3101      	adds	r1, #1
 800e2aa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800e2ae:	ed95 7a00 	vldr	s14, [r5]
 800e2b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2b6:	e6ef      	b.n	800e098 <ai_dict8_dot_array_f32+0x234>
 800e2b8:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800e090 <ai_dict8_dot_array_f32+0x22c>
 800e2bc:	e6f7      	b.n	800e0ae <ai_dict8_dot_array_f32+0x24a>
 800e2be:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800e090 <ai_dict8_dot_array_f32+0x22c>
 800e2c2:	e667      	b.n	800df94 <ai_dict8_dot_array_f32+0x130>

0800e2c4 <ai_dict4_dot_array_f32>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2ca:	f027 0c01 	bic.w	ip, r7, #1
 800e2ce:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800e2d2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800e2d6:	f000 80ad 	beq.w	800e434 <ai_dict4_dot_array_f32+0x170>
 800e2da:	1d0d      	adds	r5, r1, #4
 800e2dc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800e2e0:	f103 0420 	add.w	r4, r3, #32
 800e2e4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800e43c <ai_dict4_dot_array_f32+0x178>
 800e2e8:	eb05 0e09 	add.w	lr, r5, r9
 800e2ec:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800e2f0:	3504      	adds	r5, #4
 800e2f2:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800e2f6:	3420      	adds	r4, #32
 800e2f8:	f006 0a0f 	and.w	sl, r6, #15
 800e2fc:	0936      	lsrs	r6, r6, #4
 800e2fe:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800e302:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e306:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800e30a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e30e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800e312:	edda 7a00 	vldr	s15, [sl]
 800e316:	edd6 5a00 	vldr	s11, [r6]
 800e31a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e31e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800e322:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800e326:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800e32a:	f006 060f 	and.w	r6, r6, #15
 800e32e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800e332:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800e336:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e33a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800e33e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e342:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800e346:	ed9a 3a00 	vldr	s6, [sl]
 800e34a:	ed96 5a00 	vldr	s10, [r6]
 800e34e:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800e352:	eee3 7a04 	vfma.f32	s15, s6, s8
 800e356:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800e35a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800e35e:	f00a 0a0f 	and.w	sl, sl, #15
 800e362:	45ae      	cmp	lr, r5
 800e364:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800e368:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800e36c:	ed9b 3a00 	vldr	s6, [fp]
 800e370:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800e374:	eee5 7a06 	vfma.f32	s15, s10, s12
 800e378:	ed9a 4a00 	vldr	s8, [sl]
 800e37c:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800e380:	f006 060f 	and.w	r6, r6, #15
 800e384:	ed9a 5a00 	vldr	s10, [sl]
 800e388:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e38c:	ed96 6a00 	vldr	s12, [r6]
 800e390:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e394:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e398:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e39c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e3a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3a4:	d1a2      	bne.n	800e2ec <ai_dict4_dot_array_f32+0x28>
 800e3a6:	4449      	add	r1, r9
 800e3a8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800e3ac:	459c      	cmp	ip, r3
 800e3ae:	d92d      	bls.n	800e40c <ai_dict4_dot_array_f32+0x148>
 800e3b0:	f10c 0c07 	add.w	ip, ip, #7
 800e3b4:	f103 0508 	add.w	r5, r3, #8
 800e3b8:	f103 0810 	add.w	r8, r3, #16
 800e3bc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800e3c0:	ebac 0c05 	sub.w	ip, ip, r5
 800e3c4:	f02c 0407 	bic.w	r4, ip, #7
 800e3c8:	44a0      	add	r8, r4
 800e3ca:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800e3ce:	3508      	adds	r5, #8
 800e3d0:	ed55 5a03 	vldr	s11, [r5, #-12]
 800e3d4:	f004 060f 	and.w	r6, r4, #15
 800e3d8:	0924      	lsrs	r4, r4, #4
 800e3da:	ed55 6a04 	vldr	s13, [r5, #-16]
 800e3de:	45a8      	cmp	r8, r5
 800e3e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e3e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e3e8:	edd6 7a00 	vldr	s15, [r6]
 800e3ec:	ed94 6a00 	vldr	s12, [r4]
 800e3f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e3f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e3f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3fc:	d1e5      	bne.n	800e3ca <ai_dict4_dot_array_f32+0x106>
 800e3fe:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800e402:	f10c 0c01 	add.w	ip, ip, #1
 800e406:	4461      	add	r1, ip
 800e408:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800e40c:	07fc      	lsls	r4, r7, #31
 800e40e:	d509      	bpl.n	800e424 <ai_dict4_dot_array_f32+0x160>
 800e410:	7809      	ldrb	r1, [r1, #0]
 800e412:	edd3 7a00 	vldr	s15, [r3]
 800e416:	090b      	lsrs	r3, r1, #4
 800e418:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e41c:	edd2 6a00 	vldr	s13, [r2]
 800e420:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e424:	edd0 7a00 	vldr	s15, [r0]
 800e428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e42c:	ed80 7a00 	vstr	s14, [r0]
 800e430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e434:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800e43c <ai_dict4_dot_array_f32+0x178>
 800e438:	e7b8      	b.n	800e3ac <ai_dict4_dot_array_f32+0xe8>
 800e43a:	bf00      	nop
 800e43c:	00000000 	.word	0x00000000

0800e440 <ai_dict_decompress_f32>:
 800e440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e444:	9f08      	ldr	r7, [sp, #32]
 800e446:	2b04      	cmp	r3, #4
 800e448:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800e44c:	d00e      	beq.n	800e46c <ai_dict_decompress_f32+0x2c>
 800e44e:	2b08      	cmp	r3, #8
 800e450:	d10a      	bne.n	800e468 <ai_dict_decompress_f32+0x28>
 800e452:	42b8      	cmp	r0, r7
 800e454:	d208      	bcs.n	800e468 <ai_dict_decompress_f32+0x28>
 800e456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e45a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f840 3b04 	str.w	r3, [r0], #4
 800e464:	4287      	cmp	r7, r0
 800e466:	d8f6      	bhi.n	800e456 <ai_dict_decompress_f32+0x16>
 800e468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800e472:	f003 0e01 	and.w	lr, r3, #1
 800e476:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800e47a:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 800e47e:	42b8      	cmp	r0, r7
 800e480:	d2f2      	bcs.n	800e468 <ai_dict_decompress_f32+0x28>
 800e482:	f1bc 0f00 	cmp.w	ip, #0
 800e486:	d019      	beq.n	800e4bc <ai_dict_decompress_f32+0x7c>
 800e488:	f100 0508 	add.w	r5, r0, #8
 800e48c:	1e4c      	subs	r4, r1, #1
 800e48e:	eb01 0608 	add.w	r6, r1, r8
 800e492:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e496:	3508      	adds	r5, #8
 800e498:	091b      	lsrs	r3, r3, #4
 800e49a:	42a6      	cmp	r6, r4
 800e49c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f845 3c10 	str.w	r3, [r5, #-16]
 800e4a6:	7823      	ldrb	r3, [r4, #0]
 800e4a8:	f003 030f 	and.w	r3, r3, #15
 800e4ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f845 3c0c 	str.w	r3, [r5, #-12]
 800e4b6:	d1ec      	bne.n	800e492 <ai_dict_decompress_f32+0x52>
 800e4b8:	4461      	add	r1, ip
 800e4ba:	4448      	add	r0, r9
 800e4bc:	f1be 0f00 	cmp.w	lr, #0
 800e4c0:	d103      	bne.n	800e4ca <ai_dict_decompress_f32+0x8a>
 800e4c2:	4287      	cmp	r7, r0
 800e4c4:	d8dd      	bhi.n	800e482 <ai_dict_decompress_f32+0x42>
 800e4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ca:	780b      	ldrb	r3, [r1, #0]
 800e4cc:	3004      	adds	r0, #4
 800e4ce:	3101      	adds	r1, #1
 800e4d0:	091b      	lsrs	r3, r3, #4
 800e4d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f840 3c04 	str.w	r3, [r0, #-4]
 800e4dc:	e7cf      	b.n	800e47e <ai_dict_decompress_f32+0x3e>
 800e4de:	bf00      	nop

0800e4e0 <forward_conv2d>:
 800e4e0:	6942      	ldr	r2, [r0, #20]
 800e4e2:	8813      	ldrh	r3, [r2, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 8639 	beq.w	800f15c <forward_conv2d+0xc7c>
 800e4ea:	6852      	ldr	r2, [r2, #4]
 800e4ec:	6851      	ldr	r1, [r2, #4]
 800e4ee:	b101      	cbz	r1, 800e4f2 <forward_conv2d+0x12>
 800e4f0:	6809      	ldr	r1, [r1, #0]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	f240 862f 	bls.w	800f156 <forward_conv2d+0xc76>
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	ed2d 8b08 	vpush	{d8-d11}
 800e500:	b0c9      	sub	sp, #292	; 0x124
 800e502:	6914      	ldr	r4, [r2, #16]
 800e504:	af02      	add	r7, sp, #8
 800e506:	2c00      	cmp	r4, #0
 800e508:	f000 8621 	beq.w	800f14e <forward_conv2d+0xc6e>
 800e50c:	6824      	ldr	r4, [r4, #0]
 800e50e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800e512:	2b02      	cmp	r3, #2
 800e514:	f000 8616 	beq.w	800f144 <forward_conv2d+0xc64>
 800e518:	69d5      	ldr	r5, [r2, #28]
 800e51a:	2d00      	cmp	r5, #0
 800e51c:	f000 860b 	beq.w	800f136 <forward_conv2d+0xc56>
 800e520:	f112 0318 	adds.w	r3, r2, #24
 800e524:	682c      	ldr	r4, [r5, #0]
 800e526:	d004      	beq.n	800e532 <forward_conv2d+0x52>
 800e528:	8b13      	ldrh	r3, [r2, #24]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	f240 8618 	bls.w	800f160 <forward_conv2d+0xc80>
 800e530:	686b      	ldr	r3, [r5, #4]
 800e532:	68aa      	ldr	r2, [r5, #8]
 800e534:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800e538:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e53c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800e540:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800e544:	68ce      	ldr	r6, [r1, #12]
 800e546:	69a1      	ldr	r1, [r4, #24]
 800e548:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800e54a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800e54e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e552:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e556:	f8de 1004 	ldr.w	r1, [lr, #4]
 800e55a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800e55e:	f8de 100c 	ldr.w	r1, [lr, #12]
 800e562:	64f9      	str	r1, [r7, #76]	; 0x4c
 800e564:	f8de 1008 	ldr.w	r1, [lr, #8]
 800e568:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800e56c:	6871      	ldr	r1, [r6, #4]
 800e56e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800e572:	68f1      	ldr	r1, [r6, #12]
 800e574:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800e578:	68b1      	ldr	r1, [r6, #8]
 800e57a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800e57e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e582:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e586:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e58a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800e58e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800e592:	6889      	ldr	r1, [r1, #8]
 800e594:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800e598:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e59a:	e9d5 ab00 	ldrd	sl, fp, [r5]
 800e59e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e5a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e5a4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800e5a8:	6981      	ldr	r1, [r0, #24]
 800e5aa:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 800e5ae:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 85b0 	beq.w	800f118 <forward_conv2d+0xc38>
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	69c0      	ldr	r0, [r0, #28]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	f000 8594 	beq.w	800f0fe <forward_conv2d+0xc1e>
 800e5d6:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 800e5da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5de:	6892      	ldr	r2, [r2, #8]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800e5e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5ea:	f001 fe6f 	bl	80102cc <ai_array_get_byte_size>
 800e5ee:	69a3      	ldr	r3, [r4, #24]
 800e5f0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800e5f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e5f8:	681c      	ldr	r4, [r3, #0]
 800e5fa:	fa1f f289 	uxth.w	r2, r9
 800e5fe:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800e602:	fa1f f388 	uxth.w	r3, r8
 800e606:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 800e60a:	f3c4 5041 	ubfx	r0, r4, #21, #2
 800e60e:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800e612:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 800e616:	3a01      	subs	r2, #1
 800e618:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800e61c:	fa45 f000 	asr.w	r0, r5, r0
 800e620:	6a35      	ldr	r5, [r6, #32]
 800e622:	fb0e 1202 	mla	r2, lr, r2, r1
 800e626:	3b01      	subs	r3, #1
 800e628:	3c01      	subs	r4, #1
 800e62a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800e62e:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 800e632:	b285      	uxth	r5, r0
 800e634:	fb04 1103 	mla	r1, r4, r3, r1
 800e638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e63c:	64ba      	str	r2, [r7, #72]	; 0x48
 800e63e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e642:	4619      	mov	r1, r3
 800e644:	4ad1      	ldr	r2, [pc, #836]	; (800e98c <forward_conv2d+0x4ac>)
 800e646:	2b00      	cmp	r3, #0
 800e648:	bf08      	it	eq
 800e64a:	4611      	moveq	r1, r2
 800e64c:	f1bc 0f04 	cmp.w	ip, #4
 800e650:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e654:	f000 852a 	beq.w	800f0ac <forward_conv2d+0xbcc>
 800e658:	f1bc 0f08 	cmp.w	ip, #8
 800e65c:	f000 8526 	beq.w	800f0ac <forward_conv2d+0xbcc>
 800e660:	fa1f f38a 	uxth.w	r3, sl
 800e664:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e66c:	425b      	negs	r3, r3
 800e66e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e672:	2a00      	cmp	r2, #0
 800e674:	f000 8222 	beq.w	800eabc <forward_conv2d+0x5dc>
 800e678:	fa1f f48b 	uxth.w	r4, fp
 800e67c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e680:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 800e684:	fa0f f588 	sxth.w	r5, r8
 800e688:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e68c:	fa0f f689 	sxth.w	r6, r9
 800e690:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800e694:	4264      	negs	r4, r4
 800e696:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800e69a:	fb02 f200 	mul.w	r2, r2, r0
 800e69e:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 800e6a2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e6a6:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 800e6aa:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800e6ae:	0084      	lsls	r4, r0, #2
 800e6b0:	fb01 f300 	mul.w	r3, r1, r0
 800e6b4:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 800e990 <forward_conv2d+0x4b0>
 800e6b8:	fb00 f202 	mul.w	r2, r0, r2
 800e6bc:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 800e6c0:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 800e6c4:	fb06 fc05 	mul.w	ip, r6, r5
 800e6c8:	fb05 f500 	mul.w	r5, r5, r0
 800e6cc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e6d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6d4:	460a      	mov	r2, r1
 800e6d6:	637d      	str	r5, [r7, #52]	; 0x34
 800e6d8:	4605      	mov	r5, r0
 800e6da:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e6de:	fb04 f505 	mul.w	r5, r4, r5
 800e6e2:	653e      	str	r6, [r7, #80]	; 0x50
 800e6e4:	66fc      	str	r4, [r7, #108]	; 0x6c
 800e6e6:	fb01 f606 	mul.w	r6, r1, r6
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	607d      	str	r5, [r7, #4]
 800e6ee:	0085      	lsls	r5, r0, #2
 800e6f0:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800e6f4:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 800e6f8:	4625      	mov	r5, r4
 800e6fa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800e6fc:	63be      	str	r6, [r7, #56]	; 0x38
 800e6fe:	fb01 f505 	mul.w	r5, r1, r5
 800e702:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 800e706:	fb04 f402 	mul.w	r4, r4, r2
 800e70a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e70e:	00b6      	lsls	r6, r6, #2
 800e710:	62bd      	str	r5, [r7, #40]	; 0x28
 800e712:	fb00 f001 	mul.w	r0, r0, r1
 800e716:	009d      	lsls	r5, r3, #2
 800e718:	61bc      	str	r4, [r7, #24]
 800e71a:	0094      	lsls	r4, r2, #2
 800e71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e720:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800e724:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 800e728:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800e72c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800e72e:	633c      	str	r4, [r7, #48]	; 0x30
 800e730:	6238      	str	r0, [r7, #32]
 800e732:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800e736:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800e73a:	fb06 f000 	mul.w	r0, r6, r0
 800e73e:	fb02 f201 	mul.w	r2, r2, r1
 800e742:	61f8      	str	r0, [r7, #28]
 800e744:	0118      	lsls	r0, r3, #4
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800e74c:	60b8      	str	r0, [r7, #8]
 800e74e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e756:	66bb      	str	r3, [r7, #104]	; 0x68
 800e758:	2300      	movs	r3, #0
 800e75a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e75e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800e762:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e768:	2900      	cmp	r1, #0
 800e76a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e76c:	4413      	add	r3, r2
 800e76e:	bfb4      	ite	lt
 800e770:	2100      	movlt	r1, #0
 800e772:	2200      	movge	r2, #0
 800e774:	4283      	cmp	r3, r0
 800e776:	bf28      	it	cs
 800e778:	4603      	movcs	r3, r0
 800e77a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e77e:	2801      	cmp	r0, #1
 800e780:	f000 82f9 	beq.w	800ed76 <forward_conv2d+0x896>
 800e784:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800e788:	4281      	cmp	r1, r0
 800e78a:	f000 81b5 	beq.w	800eaf8 <forward_conv2d+0x618>
 800e78e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800e792:	2900      	cmp	r1, #0
 800e794:	f000 8171 	beq.w	800ea7a <forward_conv2d+0x59a>
 800e798:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e79a:	1a9b      	subs	r3, r3, r2
 800e79c:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 800e7a0:	1815      	adds	r5, r2, r0
 800e7a2:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800e7a6:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800e7aa:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800e7ae:	3d01      	subs	r5, #1
 800e7b0:	fb92 f1f0 	sdiv	r1, r2, r0
 800e7b4:	fb00 2111 	mls	r1, r0, r1, r2
 800e7b8:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800e7bc:	2400      	movs	r4, #0
 800e7be:	1a41      	subs	r1, r0, r1
 800e7c0:	67bc      	str	r4, [r7, #120]	; 0x78
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	fb91 f0f0 	sdiv	r0, r1, r0
 800e7c8:	fb04 1110 	mls	r1, r4, r0, r1
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	1a5b      	subs	r3, r3, r1
 800e7d0:	4411      	add	r1, r2
 800e7d2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e7d6:	4423      	add	r3, r4
 800e7d8:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800e7dc:	fb02 f201 	mul.w	r2, r2, r1
 800e7e0:	677a      	str	r2, [r7, #116]	; 0x74
 800e7e2:	1e5a      	subs	r2, r3, #1
 800e7e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e7e8:	fb92 f8f0 	sdiv	r8, r2, r0
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e7f2:	46c2      	mov	sl, r8
 800e7f4:	fbb1 f3f4 	udiv	r3, r1, r4
 800e7f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800e7fc:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800e800:	fb95 f5f0 	sdiv	r5, r5, r0
 800e804:	eba1 0008 	sub.w	r0, r1, r8
 800e808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e80a:	eba1 0c03 	sub.w	ip, r1, r3
 800e80e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800e812:	fbb2 f2f4 	udiv	r2, r2, r4
 800e816:	fb0e f403 	mul.w	r4, lr, r3
 800e81a:	0096      	lsls	r6, r2, #2
 800e81c:	fb03 f305 	mul.w	r3, r3, r5
 800e820:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800e824:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e826:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800e82a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e82c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800e830:	fb04 f300 	mul.w	r3, r4, r0
 800e834:	663e      	str	r6, [r7, #96]	; 0x60
 800e836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e83a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e83e:	1b9b      	subs	r3, r3, r6
 800e840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e844:	008b      	lsls	r3, r1, #2
 800e846:	647b      	str	r3, [r7, #68]	; 0x44
 800e848:	00d3      	lsls	r3, r2, #3
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e84c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e84e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e852:	189e      	adds	r6, r3, r2
 800e854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f2c0 8138 	blt.w	800eace <forward_conv2d+0x5ee>
 800e85e:	2100      	movs	r1, #0
 800e860:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e866:	4688      	mov	r8, r1
 800e868:	460d      	mov	r5, r1
 800e86a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800e86e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800e872:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e876:	0080      	lsls	r0, r0, #2
 800e878:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e87c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e880:	4422      	add	r2, r4
 800e882:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800e886:	4423      	add	r3, r4
 800e888:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800e88c:	42a2      	cmp	r2, r4
 800e88e:	bf94      	ite	ls
 800e890:	ebc5 0202 	rsbls	r2, r5, r2
 800e894:	ebc5 0204 	rsbhi	r2, r5, r4
 800e898:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 800e89c:	eb08 0403 	add.w	r4, r8, r3
 800e8a0:	1a52      	subs	r2, r2, r1
 800e8a2:	462b      	mov	r3, r5
 800e8a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800e8a8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800e8ac:	2d00      	cmp	r5, #0
 800e8ae:	bf08      	it	eq
 800e8b0:	4633      	moveq	r3, r6
 800e8b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800e8b6:	440a      	add	r2, r1
 800e8b8:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 800e8bc:	42b3      	cmp	r3, r6
 800e8be:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800e8c2:	fb00 5004 	mla	r0, r0, r4, r5
 800e8c6:	460a      	mov	r2, r1
 800e8c8:	fe08 6a06 	vseleq.f32	s12, s16, s12
 800e8cc:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800e8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8d2:	fb96 f6f1 	sdiv	r6, r6, r1
 800e8d6:	fb9c f5f1 	sdiv	r5, ip, r1
 800e8da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8dc:	440d      	add	r5, r1
 800e8de:	fb06 0112 	mls	r1, r6, r2, r0
 800e8e2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800e8e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e8ea:	fb0e 0505 	mla	r5, lr, r5, r0
 800e8ee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e8f2:	1b92      	subs	r2, r2, r6
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d073      	beq.n	800e9e0 <forward_conv2d+0x500>
 800e8f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e8fa:	fb02 f80e 	mul.w	r8, r2, lr
 800e8fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e900:	fb00 fb01 	mul.w	fp, r0, r1
 800e904:	2a00      	cmp	r2, #0
 800e906:	d06b      	beq.n	800e9e0 <forward_conv2d+0x500>
 800e908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e90a:	189a      	adds	r2, r3, r2
 800e90c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800e910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	643b      	str	r3, [r7, #64]	; 0x40
 800e918:	2300      	movs	r3, #0
 800e91a:	673b      	str	r3, [r7, #112]	; 0x70
 800e91c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e924:	4413      	add	r3, r2
 800e926:	188a      	adds	r2, r1, r2
 800e928:	657b      	str	r3, [r7, #84]	; 0x54
 800e92a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800e92e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e936:	f1ba 0f00 	cmp.w	sl, #0
 800e93a:	ecf3 7a01 	vldmia	r3!, {s15}
 800e93e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800e942:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e946:	f340 80c0 	ble.w	800eaca <forward_conv2d+0x5ea>
 800e94a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800e94e:	f04f 0c00 	mov.w	ip, #0
 800e952:	2e00      	cmp	r6, #0
 800e954:	dd1e      	ble.n	800e994 <forward_conv2d+0x4b4>
 800e956:	2100      	movs	r1, #0
 800e958:	eb00 040e 	add.w	r4, r0, lr
 800e95c:	4284      	cmp	r4, r0
 800e95e:	d910      	bls.n	800e982 <forward_conv2d+0x4a2>
 800e960:	4603      	mov	r3, r0
 800e962:	462a      	mov	r2, r5
 800e964:	ecb3 7a01 	vldmia	r3!, {s14}
 800e968:	ecf2 6a01 	vldmia	r2!, {s13}
 800e96c:	429c      	cmp	r4, r3
 800e96e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e972:	d8f7      	bhi.n	800e964 <forward_conv2d+0x484>
 800e974:	43c3      	mvns	r3, r0
 800e976:	441c      	add	r4, r3
 800e978:	f024 0403 	bic.w	r4, r4, #3
 800e97c:	3404      	adds	r4, #4
 800e97e:	4425      	add	r5, r4
 800e980:	4420      	add	r0, r4
 800e982:	3101      	adds	r1, #1
 800e984:	4448      	add	r0, r9
 800e986:	428e      	cmp	r6, r1
 800e988:	d1e6      	bne.n	800e958 <forward_conv2d+0x478>
 800e98a:	e003      	b.n	800e994 <forward_conv2d+0x4b4>
 800e98c:	0800de61 	.word	0x0800de61
 800e990:	00000000 	.word	0x00000000
 800e994:	f10c 0c01 	add.w	ip, ip, #1
 800e998:	4458      	add	r0, fp
 800e99a:	4445      	add	r5, r8
 800e99c:	45e2      	cmp	sl, ip
 800e99e:	d1d8      	bne.n	800e952 <forward_conv2d+0x472>
 800e9a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800e9a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9a8:	441d      	add	r5, r3
 800e9aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e9ae:	ece3 7a01 	vstmia	r3!, {s15}
 800e9b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e9b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d1b9      	bne.n	800e932 <forward_conv2d+0x452>
 800e9be:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800e9c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9c4:	4472      	add	r2, lr
 800e9c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9c8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9d0:	673b      	str	r3, [r7, #112]	; 0x70
 800e9d2:	1a52      	subs	r2, r2, r1
 800e9d4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800e9d8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d19d      	bne.n	800e91c <forward_conv2d+0x43c>
 800e9e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800e9e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e9ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9f0:	4410      	add	r0, r2
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800e9f8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800e9fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800e9fe:	4401      	add	r1, r0
 800ea00:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800ea04:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ea08:	1a8a      	subs	r2, r1, r2
 800ea0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ea0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ea12:	429a      	cmp	r2, r3
 800ea14:	f47f af1a 	bne.w	800e84c <forward_conv2d+0x36c>
 800ea18:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 800ea1c:	2400      	movs	r4, #0
 800ea1e:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800ea22:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 800ea26:	46a2      	mov	sl, r4
 800ea28:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800ea2a:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 800ea2e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea32:	4633      	mov	r3, r6
 800ea34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ea38:	f10a 0a01 	add.w	sl, sl, #1
 800ea3c:	608d      	str	r5, [r1, #8]
 800ea3e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800ea42:	4416      	add	r6, r2
 800ea44:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea48:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ea4c:	4405      	add	r5, r0
 800ea4e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800ea52:	4608      	mov	r0, r1
 800ea54:	47a0      	blx	r4
 800ea56:	eba6 0309 	sub.w	r3, r6, r9
 800ea5a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	bfa8      	it	ge
 800ea62:	464e      	movge	r6, r9
 800ea64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea68:	4553      	cmp	r3, sl
 800ea6a:	d1e0      	bne.n	800ea2e <forward_conv2d+0x54e>
 800ea6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea70:	69fa      	ldr	r2, [r7, #28]
 800ea72:	66be      	str	r6, [r7, #104]	; 0x68
 800ea74:	4413      	add	r3, r2
 800ea76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea7a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800ea7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea80:	4604      	mov	r4, r0
 800ea82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea86:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	4414      	add	r4, r2
 800ea8e:	1a82      	subs	r2, r0, r2
 800ea90:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ea94:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800ea98:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800ea9c:	3101      	adds	r1, #1
 800ea9e:	68da      	ldr	r2, [r3, #12]
 800eaa0:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800eaa4:	609a      	str	r2, [r3, #8]
 800eaa6:	69bc      	ldr	r4, [r7, #24]
 800eaa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eaac:	4420      	add	r0, r4
 800eaae:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800eab2:	428b      	cmp	r3, r1
 800eab4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800eab8:	f47f ae51 	bne.w	800e75e <forward_conv2d+0x27e>
 800eabc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800eac0:	46bd      	mov	sp, r7
 800eac2:	ecbd 8b08 	vpop	{d8-d11}
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaca:	461a      	mov	r2, r3
 800eacc:	e76a      	b.n	800e9a4 <forward_conv2d+0x4c4>
 800eace:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ead2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ead6:	460d      	mov	r5, r1
 800ead8:	4688      	mov	r8, r1
 800eada:	1853      	adds	r3, r2, r1
 800eadc:	4611      	mov	r1, r2
 800eade:	fb95 f2f2 	sdiv	r2, r5, r2
 800eae2:	fb01 5212 	mls	r2, r1, r2, r5
 800eae6:	460c      	mov	r4, r1
 800eae8:	1a8a      	subs	r2, r1, r2
 800eaea:	fb92 f1f1 	sdiv	r1, r2, r1
 800eaee:	fb04 2111 	mls	r1, r4, r1, r2
 800eaf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eaf4:	1888      	adds	r0, r1, r2
 800eaf6:	e6b8      	b.n	800e86a <forward_conv2d+0x38a>
 800eaf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eafa:	2901      	cmp	r1, #1
 800eafc:	f47f ae47 	bne.w	800e78e <forward_conv2d+0x2ae>
 800eb00:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800eb04:	2900      	cmp	r1, #0
 800eb06:	d0b8      	beq.n	800ea7a <forward_conv2d+0x59a>
 800eb08:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800eb0c:	1a99      	subs	r1, r3, r2
 800eb0e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800eb12:	0083      	lsls	r3, r0, #2
 800eb14:	fb02 f000 	mul.w	r0, r2, r0
 800eb18:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800eb1c:	6778      	str	r0, [r7, #116]	; 0x74
 800eb1e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800eb22:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 800eb26:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800eb2a:	1a41      	subs	r1, r0, r1
 800eb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb2e:	fb00 f202 	mul.w	r2, r0, r2
 800eb32:	fb03 f301 	mul.w	r3, r3, r1
 800eb36:	627a      	str	r2, [r7, #36]	; 0x24
 800eb38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800eb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800eb44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800eb48:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb4a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800eb4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb52:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800eb56:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 800eb60:	643b      	str	r3, [r7, #64]	; 0x40
 800eb62:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 800eb66:	0092      	lsls	r2, r2, #2
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	657a      	str	r2, [r7, #84]	; 0x54
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	008b      	lsls	r3, r1, #2
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f2c0 8280 	blt.w	800f07c <forward_conv2d+0xb9c>
 800eb7c:	2400      	movs	r4, #0
 800eb7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eb80:	4621      	mov	r1, r4
 800eb82:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800eb86:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800eb8a:	1818      	adds	r0, r3, r0
 800eb8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eb90:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 800eb94:	18f3      	adds	r3, r6, r3
 800eb96:	4420      	add	r0, r4
 800eb98:	461c      	mov	r4, r3
 800eb9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eb9e:	0080      	lsls	r0, r0, #2
 800eba0:	429c      	cmp	r4, r3
 800eba2:	bf28      	it	cs
 800eba4:	461c      	movcs	r4, r3
 800eba6:	1a64      	subs	r4, r4, r1
 800eba8:	2d00      	cmp	r5, #0
 800ebaa:	f000 8258 	beq.w	800f05e <forward_conv2d+0xb7e>
 800ebae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ebb2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800ebb6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800ebba:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800ebbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ebc2:	428d      	cmp	r5, r1
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	eba6 0104 	sub.w	r1, r6, r4
 800ebca:	eba3 0304 	sub.w	r3, r3, r4
 800ebce:	fe08 4a04 	vseleq.f32	s8, s16, s8
 800ebd2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800ebd4:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 800ebd8:	4428      	add	r0, r5
 800ebda:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800ebde:	fb05 6e00 	mla	lr, r5, r0, r6
 800ebe2:	eb0e 000b 	add.w	r0, lr, fp
 800ebe6:	4570      	cmp	r0, lr
 800ebe8:	6478      	str	r0, [r7, #68]	; 0x44
 800ebea:	f240 80a7 	bls.w	800ed3c <forward_conv2d+0x85c>
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	fb01 f10b 	mul.w	r1, r1, fp
 800ebf4:	f024 0803 	bic.w	r8, r4, #3
 800ebf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ebfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebfe:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 809a 	beq.w	800ed3c <forward_conv2d+0x85c>
 800ec08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ec0a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ec0e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800ec12:	089b      	lsrs	r3, r3, #2
 800ec14:	4401      	add	r1, r0
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	1810      	adds	r0, r2, r0
 800ec1c:	1a8a      	subs	r2, r1, r2
 800ec1e:	617a      	str	r2, [r7, #20]
 800ec20:	fb03 f20a 	mul.w	r2, r3, sl
 800ec24:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 800ec28:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ec2a:	011a      	lsls	r2, r3, #4
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	663a      	str	r2, [r7, #96]	; 0x60
 800ec30:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ec36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec38:	6979      	ldr	r1, [r7, #20]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	188a      	adds	r2, r1, r2
 800ec3e:	613b      	str	r3, [r7, #16]
 800ec40:	673a      	str	r2, [r7, #112]	; 0x70
 800ec42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ec46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec4a:	ecf3 6a01 	vldmia	r3!, {s13}
 800ec4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ec52:	ee66 6a84 	vmul.f32	s13, s13, s8
 800ec56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	dd57      	ble.n	800ed0e <forward_conv2d+0x82e>
 800ec5e:	4676      	mov	r6, lr
 800ec60:	f04f 0c00 	mov.w	ip, #0
 800ec64:	f1b8 0f00 	cmp.w	r8, #0
 800ec68:	f340 81f7 	ble.w	800f05a <forward_conv2d+0xb7a>
 800ec6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec70:	f109 0310 	add.w	r3, r9, #16
 800ec74:	2000      	movs	r0, #0
 800ec76:	18b1      	adds	r1, r6, r2
 800ec78:	4632      	mov	r2, r6
 800ec7a:	eb02 050b 	add.w	r5, r2, fp
 800ec7e:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ec82:	ed92 6a00 	vldr	s12, [r2]
 800ec86:	3004      	adds	r0, #4
 800ec88:	ed95 7a00 	vldr	s14, [r5]
 800ec8c:	eb01 050b 	add.w	r5, r1, fp
 800ec90:	ed53 4a04 	vldr	s9, [r3, #-16]
 800ec94:	4540      	cmp	r0, r8
 800ec96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec9a:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ec9e:	edd1 5a00 	vldr	s11, [r1]
 800eca2:	4452      	add	r2, sl
 800eca4:	ed95 7a00 	vldr	s14, [r5]
 800eca8:	4451      	add	r1, sl
 800ecaa:	eee4 7a86 	vfma.f32	s15, s9, s12
 800ecae:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ecb2:	f103 0310 	add.w	r3, r3, #16
 800ecb6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ecba:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ecbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ecc2:	dbda      	blt.n	800ec7a <forward_conv2d+0x79a>
 800ecc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ecc8:	441e      	add	r6, r3
 800ecca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eccc:	4499      	add	r9, r3
 800ecce:	4284      	cmp	r4, r0
 800ecd0:	dd11      	ble.n	800ecf6 <forward_conv2d+0x816>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	4633      	mov	r3, r6
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	3201      	adds	r2, #1
 800ecda:	edd3 7a00 	vldr	s15, [r3]
 800ecde:	ecb1 7a01 	vldmia	r1!, {s14}
 800ece2:	445b      	add	r3, fp
 800ece4:	42a2      	cmp	r2, r4
 800ece6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ecea:	d1f5      	bne.n	800ecd8 <forward_conv2d+0x7f8>
 800ecec:	1a20      	subs	r0, r4, r0
 800ecee:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800ecf2:	fb00 660b 	mla	r6, r0, fp, r6
 800ecf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecfa:	f10c 0c01 	add.w	ip, ip, #1
 800ecfe:	441e      	add	r6, r3
 800ed00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ed04:	4499      	add	r9, r3
 800ed06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ed0a:	4563      	cmp	r3, ip
 800ed0c:	d1aa      	bne.n	800ec64 <forward_conv2d+0x784>
 800ed0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ed14:	4499      	add	r9, r3
 800ed16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed18:	ece3 6a01 	vstmia	r3!, {s13}
 800ed1c:	673b      	str	r3, [r7, #112]	; 0x70
 800ed1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d18f      	bne.n	800ec46 <forward_conv2d+0x766>
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f10e 0e04 	add.w	lr, lr, #4
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	1a9b      	subs	r3, r3, r2
 800ed30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ed34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed36:	4573      	cmp	r3, lr
 800ed38:	f63f af7b 	bhi.w	800ec32 <forward_conv2d+0x752>
 800ed3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ed40:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ed44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed46:	440a      	add	r2, r1
 800ed48:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	4608      	mov	r0, r1
 800ed50:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800ed54:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800ed58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ed5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed5e:	4410      	add	r0, r2
 800ed60:	1a8a      	subs	r2, r1, r2
 800ed62:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800ed66:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ed6a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	f47f aeff 	bne.w	800eb72 <forward_conv2d+0x692>
 800ed74:	e652      	b.n	800ea1c <forward_conv2d+0x53c>
 800ed76:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ed78:	2801      	cmp	r0, #1
 800ed7a:	f47f ad08 	bne.w	800e78e <forward_conv2d+0x2ae>
 800ed7e:	1a9b      	subs	r3, r3, r2
 800ed80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed86:	fb00 f101 	mul.w	r1, r0, r1
 800ed8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ed8e:	6779      	str	r1, [r7, #116]	; 0x74
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 815c 	beq.w	800f04e <forward_conv2d+0xb6e>
 800ed96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	fb03 f202 	mul.w	r2, r3, r2
 800ed9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eda2:	4401      	add	r1, r0
 800eda4:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800eda8:	330a      	adds	r3, #10
 800edaa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800edac:	6439      	str	r1, [r7, #64]	; 0x40
 800edae:	1a12      	subs	r2, r2, r0
 800edb0:	f023 0307 	bic.w	r3, r3, #7
 800edb4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800edb8:	647a      	str	r2, [r7, #68]	; 0x44
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800edc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800edc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800edcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800edd0:	2300      	movs	r3, #0
 800edd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800edd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd8:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800eddc:	ebad 0d03 	sub.w	sp, sp, r3
 800ede0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ede4:	ab02      	add	r3, sp, #8
 800ede6:	663b      	str	r3, [r7, #96]	; 0x60
 800ede8:	b132      	cbz	r2, 800edf8 <forward_conv2d+0x918>
 800edea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800edee:	4618      	mov	r0, r3
 800edf0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800edf4:	f001 fac4 	bl	8010380 <memcpy>
 800edf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f000 8152 	beq.w	800f0a6 <forward_conv2d+0xbc6>
 800ee02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee06:	ed93 2a00 	vldr	s4, [r3]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f000 8100 	beq.w	800f01a <forward_conv2d+0xb3a>
 800ee1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee1e:	f04f 0b00 	mov.w	fp, #0
 800ee22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee26:	eb03 0802 	add.w	r8, r3, r2
 800ee2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ee36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ee40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ee44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f2c0 8124 	blt.w	800f096 <forward_conv2d+0xbb6>
 800ee4e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800ee52:	2300      	movs	r3, #0
 800ee54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee56:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800ee5a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ee5e:	4421      	add	r1, r4
 800ee60:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800ee62:	4540      	cmp	r0, r8
 800ee64:	bf94      	ite	ls
 800ee66:	ebc3 0300 	rsbls	r3, r3, r0
 800ee6a:	ebc3 0308 	rsbhi	r3, r3, r8
 800ee6e:	4422      	add	r2, r4
 800ee70:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800ee74:	1ac0      	subs	r0, r0, r3
 800ee76:	eba4 0903 	sub.w	r9, r4, r3
 800ee7a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800ee7e:	fb03 f304 	mul.w	r3, r3, r4
 800ee82:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800ee86:	2c00      	cmp	r4, #0
 800ee88:	f340 8102 	ble.w	800f090 <forward_conv2d+0xbb0>
 800ee8c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800ee8e:	f023 0c0f 	bic.w	ip, r3, #15
 800ee92:	eef0 6a42 	vmov.f32	s13, s4
 800ee96:	f04f 0e00 	mov.w	lr, #0
 800ee9a:	fb04 f000 	mul.w	r0, r4, r0
 800ee9e:	fb04 f909 	mul.w	r9, r4, r9
 800eea2:	65b8      	str	r0, [r7, #88]	; 0x58
 800eea4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800eea8:	0900      	lsrs	r0, r0, #4
 800eeaa:	3001      	adds	r0, #1
 800eeac:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800eeb0:	0100      	lsls	r0, r0, #4
 800eeb2:	6578      	str	r0, [r7, #84]	; 0x54
 800eeb4:	f1bc 0f00 	cmp.w	ip, #0
 800eeb8:	f340 80e8 	ble.w	800f08c <forward_conv2d+0xbac>
 800eebc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800eec0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800eec4:	2500      	movs	r5, #0
 800eec6:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 800eeca:	3510      	adds	r5, #16
 800eecc:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800eed0:	3440      	adds	r4, #64	; 0x40
 800eed2:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 800eed6:	4565      	cmp	r5, ip
 800eed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eedc:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 800eee0:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 800eee4:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800eee8:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 800eeec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eef0:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 800eef4:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 800eef8:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 800eefc:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 800ef00:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 800ef04:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 800ef08:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ef0c:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 800ef10:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800ef14:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 800ef18:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800ef1c:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 800ef20:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 800ef24:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ef28:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 800ef2c:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 800ef30:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 800ef34:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800ef38:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 800ef3c:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 800ef40:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ef44:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 800ef48:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 800ef4c:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800ef50:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800ef54:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800ef58:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800ef5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ef60:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800ef64:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 800ef68:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ef6c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ef70:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ef74:	eee8 7a80 	vfma.f32	s15, s17, s0
 800ef78:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ef7c:	eee1 7aa2 	vfma.f32	s15, s3, s5
 800ef80:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ef84:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ef88:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ef8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ef90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ef94:	db97      	blt.n	800eec6 <forward_conv2d+0x9e6>
 800ef96:	4451      	add	r1, sl
 800ef98:	4452      	add	r2, sl
 800ef9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ef9c:	4283      	cmp	r3, r0
 800ef9e:	dd0f      	ble.n	800efc0 <forward_conv2d+0xae0>
 800efa0:	4604      	mov	r4, r0
 800efa2:	460e      	mov	r6, r1
 800efa4:	4615      	mov	r5, r2
 800efa6:	3401      	adds	r4, #1
 800efa8:	ecb5 7a01 	vldmia	r5!, {s14}
 800efac:	ecf6 7a01 	vldmia	r6!, {s15}
 800efb0:	42a3      	cmp	r3, r4
 800efb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800efb6:	d1f6      	bne.n	800efa6 <forward_conv2d+0xac6>
 800efb8:	1a18      	subs	r0, r3, r0
 800efba:	0080      	lsls	r0, r0, #2
 800efbc:	4402      	add	r2, r0
 800efbe:	4401      	add	r1, r0
 800efc0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800efc2:	f10e 0e01 	add.w	lr, lr, #1
 800efc6:	4449      	add	r1, r9
 800efc8:	4402      	add	r2, r0
 800efca:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800efce:	4570      	cmp	r0, lr
 800efd0:	f47f af70 	bne.w	800eeb4 <forward_conv2d+0x9d4>
 800efd4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800efd8:	f10b 0b01 	add.w	fp, fp, #1
 800efdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efde:	4608      	mov	r0, r1
 800efe0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800efe4:	edc3 6a00 	vstr	s13, [r3]
 800efe8:	440b      	add	r3, r1
 800efea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800efee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eff2:	67bb      	str	r3, [r7, #120]	; 0x78
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	4410      	add	r0, r2
 800eff8:	eba8 0802 	sub.w	r8, r8, r2
 800effc:	1ac9      	subs	r1, r1, r3
 800effe:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800f002:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800f006:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800f00a:	4419      	add	r1, r3
 800f00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f010:	455b      	cmp	r3, fp
 800f012:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800f016:	f47f af15 	bne.w	800ee44 <forward_conv2d+0x964>
 800f01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f01e:	3301      	adds	r3, #1
 800f020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f024:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f028:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f02c:	440a      	add	r2, r1
 800f02e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800f032:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f036:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800f03a:	3204      	adds	r2, #4
 800f03c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800f040:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800f044:	429a      	cmp	r2, r3
 800f046:	f47f aec6 	bne.w	800edd6 <forward_conv2d+0x8f6>
 800f04a:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 800f04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f052:	2b00      	cmp	r3, #0
 800f054:	f47f ace2 	bne.w	800ea1c <forward_conv2d+0x53c>
 800f058:	e50f      	b.n	800ea7a <forward_conv2d+0x59a>
 800f05a:	2000      	movs	r0, #0
 800f05c:	e637      	b.n	800ecce <forward_conv2d+0x7ee>
 800f05e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f062:	eeb0 4a48 	vmov.f32	s8, s16
 800f066:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800f06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f06e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f072:	1b19      	subs	r1, r3, r4
 800f074:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f078:	1b1b      	subs	r3, r3, r4
 800f07a:	e5aa      	b.n	800ebd2 <forward_conv2d+0x6f2>
 800f07c:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800f080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f082:	4621      	mov	r1, r4
 800f084:	191a      	adds	r2, r3, r4
 800f086:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f08a:	e57a      	b.n	800eb82 <forward_conv2d+0x6a2>
 800f08c:	2000      	movs	r0, #0
 800f08e:	e785      	b.n	800ef9c <forward_conv2d+0xabc>
 800f090:	eef0 6a42 	vmov.f32	s13, s4
 800f094:	e79e      	b.n	800efd4 <forward_conv2d+0xaf4>
 800f096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f09a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f09c:	eba8 0303 	sub.w	r3, r8, r3
 800f0a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f0a4:	e6d7      	b.n	800ee56 <forward_conv2d+0x976>
 800f0a6:	eeb0 2a48 	vmov.f32	s4, s16
 800f0aa:	e6b1      	b.n	800ee10 <forward_conv2d+0x930>
 800f0ac:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800f0b0:	68ca      	ldr	r2, [r1, #12]
 800f0b2:	2a00      	cmp	r2, #0
 800f0b4:	f43f aad4 	beq.w	800e660 <forward_conv2d+0x180>
 800f0b8:	6973      	ldr	r3, [r6, #20]
 800f0ba:	8818      	ldrh	r0, [r3, #0]
 800f0bc:	2803      	cmp	r0, #3
 800f0be:	d91b      	bls.n	800f0f8 <forward_conv2d+0xc18>
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c4:	b1ab      	cbz	r3, 800f0f2 <forward_conv2d+0xc12>
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	b19b      	cbz	r3, 800f0f2 <forward_conv2d+0xc12>
 800f0ca:	699c      	ldr	r4, [r3, #24]
 800f0cc:	462b      	mov	r3, r5
 800f0ce:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800f0d2:	6889      	ldr	r1, [r1, #8]
 800f0d4:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	bf18      	it	ne
 800f0dc:	4605      	movne	r5, r0
 800f0de:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 800f0e2:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800f0e6:	e9cd 5400 	strd	r5, r4, [sp]
 800f0ea:	f7ff f9a9 	bl	800e440 <ai_dict_decompress_f32>
 800f0ee:	f7ff bab7 	b.w	800e660 <forward_conv2d+0x180>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	deff      	udf	#255	; 0xff
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	deff      	udf	#255	; 0xff
 800f0fe:	b178      	cbz	r0, 800f120 <forward_conv2d+0xc40>
 800f100:	6883      	ldr	r3, [r0, #8]
 800f102:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f10a:	2301      	movs	r3, #1
 800f10c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f114:	f7ff ba70 	b.w	800e5f8 <forward_conv2d+0x118>
 800f118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f11c:	f7ff ba50 	b.w	800e5c0 <forward_conv2d+0xe0>
 800f120:	2301      	movs	r3, #1
 800f122:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f126:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f12a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f132:	f7ff ba61 	b.w	800e5f8 <forward_conv2d+0x118>
 800f136:	3218      	adds	r2, #24
 800f138:	d007      	beq.n	800f14a <forward_conv2d+0xc6a>
 800f13a:	462b      	mov	r3, r5
 800f13c:	462c      	mov	r4, r5
 800f13e:	462a      	mov	r2, r5
 800f140:	f7ff b9f8 	b.w	800e534 <forward_conv2d+0x54>
 800f144:	2300      	movs	r3, #0
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	deff      	udf	#255	; 0xff
 800f14a:	68d3      	ldr	r3, [r2, #12]
 800f14c:	deff      	udf	#255	; 0xff
 800f14e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800f152:	f7ff b9de 	b.w	800e512 <forward_conv2d+0x32>
 800f156:	2300      	movs	r3, #0
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	deff      	udf	#255	; 0xff
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	deff      	udf	#255	; 0xff
 800f160:	2300      	movs	r3, #0
 800f162:	f7ff b9e6 	b.w	800e532 <forward_conv2d+0x52>
 800f166:	bf00      	nop

0800f168 <forward_dense>:
 800f168:	6942      	ldr	r2, [r0, #20]
 800f16a:	8813      	ldrh	r3, [r2, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 81c8 	beq.w	800f502 <forward_dense+0x39a>
 800f172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f176:	ed2d 8b08 	vpush	{d8-d11}
 800f17a:	6851      	ldr	r1, [r2, #4]
 800f17c:	b091      	sub	sp, #68	; 0x44
 800f17e:	684d      	ldr	r5, [r1, #4]
 800f180:	b105      	cbz	r5, 800f184 <forward_dense+0x1c>
 800f182:	682d      	ldr	r5, [r5, #0]
 800f184:	2b01      	cmp	r3, #1
 800f186:	f240 81b9 	bls.w	800f4fc <forward_dense+0x394>
 800f18a:	690a      	ldr	r2, [r1, #16]
 800f18c:	b102      	cbz	r2, 800f190 <forward_dense+0x28>
 800f18e:	6812      	ldr	r2, [r2, #0]
 800f190:	2b02      	cmp	r3, #2
 800f192:	f000 81b8 	beq.w	800f506 <forward_dense+0x39e>
 800f196:	69cb      	ldr	r3, [r1, #28]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 8209 	beq.w	800f5b0 <forward_dense+0x448>
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	9008      	str	r0, [sp, #32]
 800f1a2:	f111 0018 	adds.w	r0, r1, #24
 800f1a6:	f000 81dc 	beq.w	800f562 <forward_dense+0x3fa>
 800f1aa:	8b09      	ldrh	r1, [r1, #24]
 800f1ac:	2901      	cmp	r1, #1
 800f1ae:	f240 81fc 	bls.w	800f5aa <forward_dense+0x442>
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 81d7 	beq.w	800f566 <forward_dense+0x3fe>
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	9306      	str	r3, [sp, #24]
 800f1bc:	9b08      	ldr	r3, [sp, #32]
 800f1be:	68d6      	ldr	r6, [r2, #12]
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	68b0      	ldr	r0, [r6, #8]
 800f1c4:	681f      	ldr	r7, [r3, #0]
 800f1c6:	68f4      	ldr	r4, [r6, #12]
 800f1c8:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800f1cc:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800f1d0:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800f1d4:	fb04 f000 	mul.w	r0, r4, r0
 800f1d8:	fa4e f10c 	asr.w	r1, lr, ip
 800f1dc:	2f04      	cmp	r7, #4
 800f1de:	9007      	str	r0, [sp, #28]
 800f1e0:	910b      	str	r1, [sp, #44]	; 0x2c
 800f1e2:	68e9      	ldr	r1, [r5, #12]
 800f1e4:	6870      	ldr	r0, [r6, #4]
 800f1e6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f1ea:	f000 81db 	beq.w	800f5a4 <forward_dense+0x43c>
 800f1ee:	2f08      	cmp	r7, #8
 800f1f0:	f000 81d8 	beq.w	800f5a4 <forward_dense+0x43c>
 800f1f4:	f04f 0a00 	mov.w	sl, #0
 800f1f8:	6992      	ldr	r2, [r2, #24]
 800f1fa:	0080      	lsls	r0, r0, #2
 800f1fc:	69a9      	ldr	r1, [r5, #24]
 800f1fe:	6894      	ldr	r4, [r2, #8]
 800f200:	9a08      	ldr	r2, [sp, #32]
 800f202:	9009      	str	r0, [sp, #36]	; 0x24
 800f204:	1826      	adds	r6, r4, r0
 800f206:	6952      	ldr	r2, [r2, #20]
 800f208:	9404      	str	r4, [sp, #16]
 800f20a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800f20e:	9a07      	ldr	r2, [sp, #28]
 800f210:	688f      	ldr	r7, [r1, #8]
 800f212:	2a00      	cmp	r2, #0
 800f214:	f000 81c1 	beq.w	800f59a <forward_dense+0x432>
 800f218:	f1a8 0210 	sub.w	r2, r8, #16
 800f21c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800f220:	689d      	ldr	r5, [r3, #8]
 800f222:	0912      	lsrs	r2, r2, #4
 800f224:	910a      	str	r1, [sp, #40]	; 0x28
 800f226:	2100      	movs	r1, #0
 800f228:	9b06      	ldr	r3, [sp, #24]
 800f22a:	3201      	adds	r2, #1
 800f22c:	eddf 2acf 	vldr	s5, [pc, #828]	; 800f56c <forward_dense+0x404>
 800f230:	9105      	str	r1, [sp, #20]
 800f232:	f008 010f 	and.w	r1, r8, #15
 800f236:	0192      	lsls	r2, r2, #6
 800f238:	910d      	str	r1, [sp, #52]	; 0x34
 800f23a:	920c      	str	r2, [sp, #48]	; 0x30
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d042      	beq.n	800f2c6 <forward_dense+0x15e>
 800f240:	699b      	ldr	r3, [r3, #24]
 800f242:	689c      	ldr	r4, [r3, #8]
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	f1ba 0f00 	cmp.w	sl, #0
 800f24a:	d041      	beq.n	800f2d0 <forward_dense+0x168>
 800f24c:	42b3      	cmp	r3, r6
 800f24e:	d229      	bcs.n	800f2a4 <forward_dense+0x13c>
 800f250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f252:	469b      	mov	fp, r3
 800f254:	ab0f      	add	r3, sp, #60	; 0x3c
 800f256:	2a04      	cmp	r2, #4
 800f258:	9303      	str	r3, [sp, #12]
 800f25a:	4633      	mov	r3, r6
 800f25c:	4646      	mov	r6, r8
 800f25e:	4698      	mov	r8, r3
 800f260:	f000 8154 	beq.w	800f50c <forward_dense+0x3a4>
 800f264:	2c00      	cmp	r4, #0
 800f266:	f000 8183 	beq.w	800f570 <forward_dense+0x408>
 800f26a:	f8d4 c000 	ldr.w	ip, [r4]
 800f26e:	463b      	mov	r3, r7
 800f270:	4629      	mov	r1, r5
 800f272:	9600      	str	r6, [sp, #0]
 800f274:	4652      	mov	r2, sl
 800f276:	9803      	ldr	r0, [sp, #12]
 800f278:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f27c:	f7fe fdf2 	bl	800de64 <ai_dict8_dot_array_f32>
 800f280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f282:	3404      	adds	r4, #4
 800f284:	444d      	add	r5, r9
 800f286:	f84b 3b04 	str.w	r3, [fp], #4
 800f28a:	45c3      	cmp	fp, r8
 800f28c:	d3ea      	bcc.n	800f264 <forward_dense+0xfc>
 800f28e:	4643      	mov	r3, r8
 800f290:	46b0      	mov	r8, r6
 800f292:	461e      	mov	r6, r3
 800f294:	9a04      	ldr	r2, [sp, #16]
 800f296:	43d3      	mvns	r3, r2
 800f298:	4433      	add	r3, r6
 800f29a:	f023 0303 	bic.w	r3, r3, #3
 800f29e:	3304      	adds	r3, #4
 800f2a0:	18d3      	adds	r3, r2, r3
 800f2a2:	9304      	str	r3, [sp, #16]
 800f2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2a6:	9b05      	ldr	r3, [sp, #20]
 800f2a8:	4417      	add	r7, r2
 800f2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	4416      	add	r6, r2
 800f2b0:	9a07      	ldr	r2, [sp, #28]
 800f2b2:	9305      	str	r3, [sp, #20]
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	f000 8170 	beq.w	800f59a <forward_dense+0x432>
 800f2ba:	9b08      	ldr	r3, [sp, #32]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	689d      	ldr	r5, [r3, #8]
 800f2c0:	9b06      	ldr	r3, [sp, #24]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1bc      	bne.n	800f240 <forward_dense+0xd8>
 800f2c6:	461c      	mov	r4, r3
 800f2c8:	9b04      	ldr	r3, [sp, #16]
 800f2ca:	f1ba 0f00 	cmp.w	sl, #0
 800f2ce:	d1bd      	bne.n	800f24c <forward_dense+0xe4>
 800f2d0:	42b3      	cmp	r3, r6
 800f2d2:	d2e7      	bcs.n	800f2a4 <forward_dense+0x13c>
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2d8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f2dc:	eb07 0c03 	add.w	ip, r7, r3
 800f2e0:	469e      	mov	lr, r3
 800f2e2:	2c00      	cmp	r4, #0
 800f2e4:	f000 80fe 	beq.w	800f4e4 <forward_dense+0x37c>
 800f2e8:	f1b8 0f0f 	cmp.w	r8, #15
 800f2ec:	ed94 6a00 	vldr	s12, [r4]
 800f2f0:	f104 0404 	add.w	r4, r4, #4
 800f2f4:	f240 80fc 	bls.w	800f4f0 <forward_dense+0x388>
 800f2f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f2fc:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800f300:	4641      	mov	r1, r8
 800f302:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800f56c <forward_dense+0x404>
 800f306:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800f30a:	3910      	subs	r1, #16
 800f30c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800f310:	3240      	adds	r2, #64	; 0x40
 800f312:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800f316:	290f      	cmp	r1, #15
 800f318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f31c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800f320:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800f324:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800f328:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800f32c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f330:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800f334:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800f338:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800f33c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800f340:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800f344:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800f348:	eee2 7a03 	vfma.f32	s15, s4, s6
 800f34c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800f350:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800f354:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800f358:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800f35c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800f360:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800f364:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f368:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800f36c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800f370:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800f374:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800f378:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800f37c:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800f380:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f384:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800f388:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800f38c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800f390:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800f394:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800f398:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800f39c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f3a0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800f3a4:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800f3a8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f3ac:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f3b0:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f3b4:	eee8 7a88 	vfma.f32	s15, s17, s16
 800f3b8:	eee0 7a20 	vfma.f32	s15, s0, s1
 800f3bc:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f3c0:	eee2 7a03 	vfma.f32	s15, s4, s6
 800f3c4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f3c8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f3cc:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f3d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f3d4:	d897      	bhi.n	800f306 <forward_dense+0x19e>
 800f3d6:	eb05 010e 	add.w	r1, r5, lr
 800f3da:	465b      	mov	r3, fp
 800f3dc:	4662      	mov	r2, ip
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d075      	beq.n	800f4ce <forward_dense+0x366>
 800f3e2:	ed91 7a00 	vldr	s14, [r1]
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	edd2 7a00 	vldr	s15, [r2]
 800f3ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f3f0:	d06d      	beq.n	800f4ce <forward_dense+0x366>
 800f3f2:	ed91 7a01 	vldr	s14, [r1, #4]
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	edd2 7a01 	vldr	s15, [r2, #4]
 800f3fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f400:	d065      	beq.n	800f4ce <forward_dense+0x366>
 800f402:	ed91 7a02 	vldr	s14, [r1, #8]
 800f406:	2b03      	cmp	r3, #3
 800f408:	edd2 7a02 	vldr	s15, [r2, #8]
 800f40c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f410:	d05d      	beq.n	800f4ce <forward_dense+0x366>
 800f412:	ed91 7a03 	vldr	s14, [r1, #12]
 800f416:	2b04      	cmp	r3, #4
 800f418:	edd2 7a03 	vldr	s15, [r2, #12]
 800f41c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f420:	d055      	beq.n	800f4ce <forward_dense+0x366>
 800f422:	ed91 7a04 	vldr	s14, [r1, #16]
 800f426:	2b05      	cmp	r3, #5
 800f428:	edd2 7a04 	vldr	s15, [r2, #16]
 800f42c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f430:	d04d      	beq.n	800f4ce <forward_dense+0x366>
 800f432:	ed91 7a05 	vldr	s14, [r1, #20]
 800f436:	2b06      	cmp	r3, #6
 800f438:	edd2 7a05 	vldr	s15, [r2, #20]
 800f43c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f440:	d045      	beq.n	800f4ce <forward_dense+0x366>
 800f442:	ed91 7a06 	vldr	s14, [r1, #24]
 800f446:	2b07      	cmp	r3, #7
 800f448:	edd2 7a06 	vldr	s15, [r2, #24]
 800f44c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f450:	d03d      	beq.n	800f4ce <forward_dense+0x366>
 800f452:	ed91 7a07 	vldr	s14, [r1, #28]
 800f456:	2b08      	cmp	r3, #8
 800f458:	edd2 7a07 	vldr	s15, [r2, #28]
 800f45c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f460:	d035      	beq.n	800f4ce <forward_dense+0x366>
 800f462:	ed91 7a08 	vldr	s14, [r1, #32]
 800f466:	2b09      	cmp	r3, #9
 800f468:	edd2 7a08 	vldr	s15, [r2, #32]
 800f46c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f470:	d02d      	beq.n	800f4ce <forward_dense+0x366>
 800f472:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800f476:	2b0a      	cmp	r3, #10
 800f478:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800f47c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f480:	d025      	beq.n	800f4ce <forward_dense+0x366>
 800f482:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800f486:	2b0b      	cmp	r3, #11
 800f488:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800f48c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f490:	d01d      	beq.n	800f4ce <forward_dense+0x366>
 800f492:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800f496:	2b0c      	cmp	r3, #12
 800f498:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800f49c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4a0:	d015      	beq.n	800f4ce <forward_dense+0x366>
 800f4a2:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800f4a6:	2b0d      	cmp	r3, #13
 800f4a8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800f4ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4b0:	d00d      	beq.n	800f4ce <forward_dense+0x366>
 800f4b2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f4b6:	2b0e      	cmp	r3, #14
 800f4b8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800f4bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4c0:	d005      	beq.n	800f4ce <forward_dense+0x366>
 800f4c2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800f4c6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800f4ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f4ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f4d2:	444d      	add	r5, r9
 800f4d4:	ece0 6a01 	vstmia	r0!, {s13}
 800f4d8:	42b0      	cmp	r0, r6
 800f4da:	f4bf aedb 	bcs.w	800f294 <forward_dense+0x12c>
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	f47f af02 	bne.w	800f2e8 <forward_dense+0x180>
 800f4e4:	f1b8 0f0f 	cmp.w	r8, #15
 800f4e8:	eeb0 6a62 	vmov.f32	s12, s5
 800f4ec:	f63f af04 	bhi.w	800f2f8 <forward_dense+0x190>
 800f4f0:	4643      	mov	r3, r8
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	463a      	mov	r2, r7
 800f4f6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800f56c <forward_dense+0x404>
 800f4fa:	e770      	b.n	800f3de <forward_dense+0x276>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	deff      	udf	#255	; 0xff
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	deff      	udf	#255	; 0xff
 800f506:	2300      	movs	r3, #0
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	deff      	udf	#255	; 0xff
 800f50c:	b1a4      	cbz	r4, 800f538 <forward_dense+0x3d0>
 800f50e:	f8d4 c000 	ldr.w	ip, [r4]
 800f512:	463b      	mov	r3, r7
 800f514:	4629      	mov	r1, r5
 800f516:	9600      	str	r6, [sp, #0]
 800f518:	4652      	mov	r2, sl
 800f51a:	9803      	ldr	r0, [sp, #12]
 800f51c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800f520:	f7fe fed0 	bl	800e2c4 <ai_dict4_dot_array_f32>
 800f524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f526:	3404      	adds	r4, #4
 800f528:	444d      	add	r5, r9
 800f52a:	f84b 3b04 	str.w	r3, [fp], #4
 800f52e:	45c3      	cmp	fp, r8
 800f530:	f4bf aead 	bcs.w	800f28e <forward_dense+0x126>
 800f534:	2c00      	cmp	r4, #0
 800f536:	d1ea      	bne.n	800f50e <forward_dense+0x3a6>
 800f538:	4634      	mov	r4, r6
 800f53a:	4646      	mov	r6, r8
 800f53c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f540:	463b      	mov	r3, r7
 800f542:	4629      	mov	r1, r5
 800f544:	9400      	str	r4, [sp, #0]
 800f546:	4652      	mov	r2, sl
 800f548:	4640      	mov	r0, r8
 800f54a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800f54e:	f7fe feb9 	bl	800e2c4 <ai_dict4_dot_array_f32>
 800f552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f554:	444d      	add	r5, r9
 800f556:	f84b 3b04 	str.w	r3, [fp], #4
 800f55a:	45b3      	cmp	fp, r6
 800f55c:	d3f0      	bcc.n	800f540 <forward_dense+0x3d8>
 800f55e:	46a0      	mov	r8, r4
 800f560:	e698      	b.n	800f294 <forward_dense+0x12c>
 800f562:	9006      	str	r0, [sp, #24]
 800f564:	e62a      	b.n	800f1bc <forward_dense+0x54>
 800f566:	9306      	str	r3, [sp, #24]
 800f568:	e628      	b.n	800f1bc <forward_dense+0x54>
 800f56a:	bf00      	nop
 800f56c:	00000000 	.word	0x00000000
 800f570:	4634      	mov	r4, r6
 800f572:	4646      	mov	r6, r8
 800f574:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f578:	463b      	mov	r3, r7
 800f57a:	4629      	mov	r1, r5
 800f57c:	9400      	str	r4, [sp, #0]
 800f57e:	4652      	mov	r2, sl
 800f580:	4640      	mov	r0, r8
 800f582:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800f586:	f7fe fc6d 	bl	800de64 <ai_dict8_dot_array_f32>
 800f58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f58c:	444d      	add	r5, r9
 800f58e:	f84b 3b04 	str.w	r3, [fp], #4
 800f592:	45b3      	cmp	fp, r6
 800f594:	d3f0      	bcc.n	800f578 <forward_dense+0x410>
 800f596:	46a0      	mov	r8, r4
 800f598:	e67c      	b.n	800f294 <forward_dense+0x12c>
 800f59a:	b011      	add	sp, #68	; 0x44
 800f59c:	ecbd 8b08 	vpop	{d8-d11}
 800f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800f5a8:	e626      	b.n	800f1f8 <forward_dense+0x90>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9306      	str	r3, [sp, #24]
 800f5ae:	e605      	b.n	800f1bc <forward_dense+0x54>
 800f5b0:	9308      	str	r3, [sp, #32]
 800f5b2:	e5f6      	b.n	800f1a2 <forward_dense+0x3a>

0800f5b4 <array_f32_identity>:
 800f5b4:	4288      	cmp	r0, r1
 800f5b6:	d004      	beq.n	800f5c2 <array_f32_identity+0xe>
 800f5b8:	0092      	lsls	r2, r2, #2
 800f5ba:	68c9      	ldr	r1, [r1, #12]
 800f5bc:	68c0      	ldr	r0, [r0, #12]
 800f5be:	f000 bedf 	b.w	8010380 <memcpy>
 800f5c2:	4770      	bx	lr

0800f5c4 <lstm_cell>:
 800f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	b0b5      	sub	sp, #212	; 0xd4
 800f5cc:	8ccd      	ldrh	r5, [r1, #38]	; 0x26
 800f5ce:	4682      	mov	sl, r0
 800f5d0:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	9005      	str	r0, [sp, #20]
 800f5d6:	00af      	lsls	r7, r5, #2
 800f5d8:	910a      	str	r1, [sp, #40]	; 0x28
 800f5da:	fb05 f005 	mul.w	r0, r5, r5
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	fb01 f105 	mul.w	r1, r1, r5
 800f5e4:	6866      	ldr	r6, [r4, #4]
 800f5e6:	0080      	lsls	r0, r0, #2
 800f5e8:	9206      	str	r2, [sp, #24]
 800f5ea:	0089      	lsls	r1, r1, #2
 800f5ec:	9607      	str	r6, [sp, #28]
 800f5ee:	4406      	add	r6, r0
 800f5f0:	9701      	str	r7, [sp, #4]
 800f5f2:	440a      	add	r2, r1
 800f5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5f6:	441f      	add	r7, r3
 800f5f8:	9609      	str	r6, [sp, #36]	; 0x24
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	4406      	add	r6, r0
 800f5fe:	9208      	str	r2, [sp, #32]
 800f600:	9603      	str	r6, [sp, #12]
 800f602:	461e      	mov	r6, r3
 800f604:	9a01      	ldr	r2, [sp, #4]
 800f606:	440e      	add	r6, r1
 800f608:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f60c:	eb07 0e02 	add.w	lr, r7, r2
 800f610:	9602      	str	r6, [sp, #8]
 800f612:	eb09 0c02 	add.w	ip, r9, r2
 800f616:	9e03      	ldr	r6, [sp, #12]
 800f618:	eb0e 0802 	add.w	r8, lr, r2
 800f61c:	9a01      	ldr	r2, [sp, #4]
 800f61e:	1830      	adds	r0, r6, r0
 800f620:	9e02      	ldr	r6, [sp, #8]
 800f622:	4643      	mov	r3, r8
 800f624:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800f628:	1871      	adds	r1, r6, r1
 800f62a:	eb0c 0602 	add.w	r6, ip, r2
 800f62e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f630:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800f634:	921e      	str	r2, [sp, #120]	; 0x78
 800f636:	9a01      	ldr	r2, [sp, #4]
 800f638:	901b      	str	r0, [sp, #108]	; 0x6c
 800f63a:	eb08 0b02 	add.w	fp, r8, r2
 800f63e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f640:	6a20      	ldr	r0, [r4, #32]
 800f642:	911a      	str	r1, [sp, #104]	; 0x68
 800f644:	9619      	str	r6, [sp, #100]	; 0x64
 800f646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f648:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 800f64c:	921f      	str	r2, [sp, #124]	; 0x7c
 800f64e:	951d      	str	r5, [sp, #116]	; 0x74
 800f650:	9521      	str	r5, [sp, #132]	; 0x84
 800f652:	9525      	str	r5, [sp, #148]	; 0x94
 800f654:	9529      	str	r5, [sp, #164]	; 0xa4
 800f656:	952d      	str	r5, [sp, #180]	; 0xb4
 800f658:	9531      	str	r5, [sp, #196]	; 0xc4
 800f65a:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 800f65e:	4bd9      	ldr	r3, [pc, #868]	; (800f9c4 <lstm_cell+0x400>)
 800f660:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
 800f664:	e9cd ee26 	strd	lr, lr, [sp, #152]	; 0x98
 800f668:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
 800f66c:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
 800f670:	931c      	str	r3, [sp, #112]	; 0x70
 800f672:	9320      	str	r3, [sp, #128]	; 0x80
 800f674:	9324      	str	r3, [sp, #144]	; 0x90
 800f676:	9328      	str	r3, [sp, #160]	; 0xa0
 800f678:	932c      	str	r3, [sp, #176]	; 0xb0
 800f67a:	9330      	str	r3, [sp, #192]	; 0xc0
 800f67c:	2d00      	cmp	r5, #0
 800f67e:	f000 83c1 	beq.w	800fe04 <lstm_cell+0x840>
 800f682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f684:	46f3      	mov	fp, lr
 800f686:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800f68a:	46be      	mov	lr, r7
 800f68c:	3b04      	subs	r3, #4
 800f68e:	9712      	str	r7, [sp, #72]	; 0x48
 800f690:	1f28      	subs	r0, r5, #4
 800f692:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800f696:	461a      	mov	r2, r3
 800f698:	089b      	lsrs	r3, r3, #2
 800f69a:	0881      	lsrs	r1, r0, #2
 800f69c:	9610      	str	r6, [sp, #64]	; 0x40
 800f69e:	1c5f      	adds	r7, r3, #1
 800f6a0:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800f6a4:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
 800f6a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f6aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6ae:	9a01      	ldr	r2, [sp, #4]
 800f6b0:	013f      	lsls	r7, r7, #4
 800f6b2:	3101      	adds	r1, #1
 800f6b4:	930c      	str	r3, [sp, #48]	; 0x30
 800f6b6:	4653      	mov	r3, sl
 800f6b8:	970b      	str	r7, [sp, #44]	; 0x2c
 800f6ba:	2e03      	cmp	r6, #3
 800f6bc:	443b      	add	r3, r7
 800f6be:	eddf 6ac2 	vldr	s13, [pc, #776]	; 800f9c8 <lstm_cell+0x404>
 800f6c2:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 800f6c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f6c8:	930d      	str	r3, [sp, #52]	; 0x34
 800f6ca:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800f6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6d0:	46dc      	mov	ip, fp
 800f6d2:	edc0 6a00 	vstr	s13, [r0]
 800f6d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f6da:	9304      	str	r3, [sp, #16]
 800f6dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6de:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f6e2:	eb03 0802 	add.w	r8, r3, r2
 800f6e6:	f04f 0300 	mov.w	r3, #0
 800f6ea:	930e      	str	r3, [sp, #56]	; 0x38
 800f6ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f6f0:	930a      	str	r3, [sp, #40]	; 0x28
 800f6f2:	f240 823e 	bls.w	800fb72 <lstm_cell+0x5ae>
 800f6f6:	9b06      	ldr	r3, [sp, #24]
 800f6f8:	46b1      	mov	r9, r6
 800f6fa:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 800f9c8 <lstm_cell+0x404>
 800f6fe:	f103 0210 	add.w	r2, r3, #16
 800f702:	9b05      	ldr	r3, [sp, #20]
 800f704:	3310      	adds	r3, #16
 800f706:	ed12 7a03 	vldr	s14, [r2, #-12]
 800f70a:	f1a9 0904 	sub.w	r9, r9, #4
 800f70e:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f712:	3210      	adds	r2, #16
 800f714:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 800f718:	f1b9 0f03 	cmp.w	r9, #3
 800f71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f720:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f724:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 800f728:	f103 0310 	add.w	r3, r3, #16
 800f72c:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 800f730:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f734:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800f738:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800f73c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f740:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f744:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f748:	d8dd      	bhi.n	800f706 <lstm_cell+0x142>
 800f74a:	9b06      	ldr	r3, [sp, #24]
 800f74c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f74e:	eb03 0902 	add.w	r9, r3, r2
 800f752:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800f756:	b1ab      	cbz	r3, 800f784 <lstm_cell+0x1c0>
 800f758:	ed99 7a00 	vldr	s14, [r9]
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	edd2 7a00 	vldr	s15, [r2]
 800f762:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f766:	d00d      	beq.n	800f784 <lstm_cell+0x1c0>
 800f768:	ed99 7a01 	vldr	s14, [r9, #4]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	edd2 7a01 	vldr	s15, [r2, #4]
 800f772:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f776:	d005      	beq.n	800f784 <lstm_cell+0x1c0>
 800f778:	ed99 7a02 	vldr	s14, [r9, #8]
 800f77c:	edd2 7a02 	vldr	s15, [r2, #8]
 800f780:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f784:	2d03      	cmp	r5, #3
 800f786:	ed80 6a00 	vstr	s12, [r0]
 800f78a:	9b07      	ldr	r3, [sp, #28]
 800f78c:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 800f790:	f240 8334 	bls.w	800fdfc <lstm_cell+0x838>
 800f794:	f103 0210 	add.w	r2, r3, #16
 800f798:	46a9      	mov	r9, r5
 800f79a:	f10a 0310 	add.w	r3, sl, #16
 800f79e:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800f9c8 <lstm_cell+0x404>
 800f7a2:	ed12 7a03 	vldr	s14, [r2, #-12]
 800f7a6:	f1a9 0904 	sub.w	r9, r9, #4
 800f7aa:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f7ae:	3210      	adds	r2, #16
 800f7b0:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 800f7b4:	f1b9 0f03 	cmp.w	r9, #3
 800f7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7bc:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f7c0:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 800f7c4:	f103 0310 	add.w	r3, r3, #16
 800f7c8:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800f7cc:	eee5 7a07 	vfma.f32	s15, s10, s14
 800f7d0:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 800f7d4:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800f7d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f7dc:	eee5 7a07 	vfma.f32	s15, s10, s14
 800f7e0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800f7e4:	d8dd      	bhi.n	800f7a2 <lstm_cell+0x1de>
 800f7e6:	9b07      	ldr	r3, [sp, #28]
 800f7e8:	448a      	add	sl, r1
 800f7ea:	440b      	add	r3, r1
 800f7ec:	b1b7      	cbz	r7, 800f81c <lstm_cell+0x258>
 800f7ee:	463a      	mov	r2, r7
 800f7f0:	ed93 7a00 	vldr	s14, [r3]
 800f7f4:	2a01      	cmp	r2, #1
 800f7f6:	edda 7a00 	vldr	s15, [sl]
 800f7fa:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f7fe:	d00d      	beq.n	800f81c <lstm_cell+0x258>
 800f800:	ed93 7a01 	vldr	s14, [r3, #4]
 800f804:	2a02      	cmp	r2, #2
 800f806:	edda 7a01 	vldr	s15, [sl, #4]
 800f80a:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f80e:	d005      	beq.n	800f81c <lstm_cell+0x258>
 800f810:	ed93 7a02 	vldr	s14, [r3, #8]
 800f814:	edda 7a02 	vldr	s15, [sl, #8]
 800f818:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f81c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f822:	2e03      	cmp	r6, #3
 800f824:	ed80 6a00 	vstr	s12, [r0]
 800f828:	ecb2 7a01 	vldmia	r2!, {s14}
 800f82c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f82e:	9214      	str	r2, [sp, #80]	; 0x50
 800f830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f832:	4413      	add	r3, r2
 800f834:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f836:	edd3 7a00 	vldr	s15, [r3]
 800f83a:	ecf2 5a01 	vldmia	r2!, {s11}
 800f83e:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f842:	9215      	str	r2, [sp, #84]	; 0x54
 800f844:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f848:	eca0 6a01 	vstmia	r0!, {s12}
 800f84c:	edce 6a00 	vstr	s13, [lr]
 800f850:	f240 82cd 	bls.w	800fdee <lstm_cell+0x82a>
 800f854:	9b08      	ldr	r3, [sp, #32]
 800f856:	46b1      	mov	r9, r6
 800f858:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800f9c8 <lstm_cell+0x404>
 800f85c:	f103 0210 	add.w	r2, r3, #16
 800f860:	9b05      	ldr	r3, [sp, #20]
 800f862:	3310      	adds	r3, #16
 800f864:	ed12 7a03 	vldr	s14, [r2, #-12]
 800f868:	f1a9 0904 	sub.w	r9, r9, #4
 800f86c:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f870:	3210      	adds	r2, #16
 800f872:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 800f876:	f1b9 0f03 	cmp.w	r9, #3
 800f87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f87e:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f882:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 800f886:	f103 0310 	add.w	r3, r3, #16
 800f88a:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 800f88e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f892:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800f896:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800f89a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f89e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f8a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f8a6:	d8dd      	bhi.n	800f864 <lstm_cell+0x2a0>
 800f8a8:	9b08      	ldr	r3, [sp, #32]
 800f8aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8ac:	eb03 0902 	add.w	r9, r3, r2
 800f8b0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800f8b4:	b1ab      	cbz	r3, 800f8e2 <lstm_cell+0x31e>
 800f8b6:	ed99 7a00 	vldr	s14, [r9]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	edd2 7a00 	vldr	s15, [r2]
 800f8c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f8c4:	d00d      	beq.n	800f8e2 <lstm_cell+0x31e>
 800f8c6:	ed99 7a01 	vldr	s14, [r9, #4]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	edd2 7a01 	vldr	s15, [r2, #4]
 800f8d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f8d4:	d005      	beq.n	800f8e2 <lstm_cell+0x31e>
 800f8d6:	ed99 7a02 	vldr	s14, [r9, #8]
 800f8da:	edd2 7a02 	vldr	s15, [r2, #8]
 800f8de:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f8e2:	2d03      	cmp	r5, #3
 800f8e4:	ed8e 6a00 	vstr	s12, [lr]
 800f8e8:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 800f8ec:	f240 827a 	bls.w	800fde4 <lstm_cell+0x820>
 800f8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f2:	46a9      	mov	r9, r5
 800f8f4:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f9c8 <lstm_cell+0x404>
 800f8f8:	f103 0210 	add.w	r2, r3, #16
 800f8fc:	f10a 0310 	add.w	r3, sl, #16
 800f900:	ed12 7a03 	vldr	s14, [r2, #-12]
 800f904:	f1a9 0904 	sub.w	r9, r9, #4
 800f908:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f90c:	3210      	adds	r2, #16
 800f90e:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 800f912:	f1b9 0f03 	cmp.w	r9, #3
 800f916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f91a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f91e:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 800f922:	f103 0310 	add.w	r3, r3, #16
 800f926:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800f92a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800f92e:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 800f932:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800f936:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f93a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800f93e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800f942:	d8dd      	bhi.n	800f900 <lstm_cell+0x33c>
 800f944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f946:	448a      	add	sl, r1
 800f948:	440b      	add	r3, r1
 800f94a:	b1b7      	cbz	r7, 800f97a <lstm_cell+0x3b6>
 800f94c:	463a      	mov	r2, r7
 800f94e:	ed93 7a00 	vldr	s14, [r3]
 800f952:	2a01      	cmp	r2, #1
 800f954:	edda 7a00 	vldr	s15, [sl]
 800f958:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f95c:	d00d      	beq.n	800f97a <lstm_cell+0x3b6>
 800f95e:	ed93 7a01 	vldr	s14, [r3, #4]
 800f962:	2a02      	cmp	r2, #2
 800f964:	edda 7a01 	vldr	s15, [sl, #4]
 800f968:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f96c:	d005      	beq.n	800f97a <lstm_cell+0x3b6>
 800f96e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f972:	edda 7a02 	vldr	s15, [sl, #8]
 800f976:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f97a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f97e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f980:	2e03      	cmp	r6, #3
 800f982:	46c1      	mov	r9, r8
 800f984:	ed8e 6a00 	vstr	s12, [lr]
 800f988:	ecf2 5a01 	vldmia	r2!, {s11}
 800f98c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f98e:	9213      	str	r2, [sp, #76]	; 0x4c
 800f990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f992:	ed98 7a00 	vldr	s14, [r8]
 800f996:	4413      	add	r3, r2
 800f998:	edd3 7a00 	vldr	s15, [r3]
 800f99c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f9a0:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f9a4:	ecae 6a01 	vstmia	lr!, {s12}
 800f9a8:	edcc 6a00 	vstr	s13, [ip]
 800f9ac:	f240 80ec 	bls.w	800fb88 <lstm_cell+0x5c4>
 800f9b0:	9b02      	ldr	r3, [sp, #8]
 800f9b2:	46b2      	mov	sl, r6
 800f9b4:	ed9f 6a04 	vldr	s12, [pc, #16]	; 800f9c8 <lstm_cell+0x404>
 800f9b8:	f103 0210 	add.w	r2, r3, #16
 800f9bc:	9b05      	ldr	r3, [sp, #20]
 800f9be:	3310      	adds	r3, #16
 800f9c0:	e004      	b.n	800f9cc <lstm_cell+0x408>
 800f9c2:	bf00      	nop
 800f9c4:	01821040 	.word	0x01821040
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	ed12 7a03 	vldr	s14, [r2, #-12]
 800f9d0:	f1aa 0a04 	sub.w	sl, sl, #4
 800f9d4:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f9d8:	3210      	adds	r2, #16
 800f9da:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 800f9de:	f1ba 0f03 	cmp.w	sl, #3
 800f9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9e6:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f9ea:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 800f9ee:	f103 0310 	add.w	r3, r3, #16
 800f9f2:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 800f9f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f9fa:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800f9fe:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800fa02:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fa06:	eee5 7a87 	vfma.f32	s15, s11, s14
 800fa0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800fa0e:	d8dd      	bhi.n	800f9cc <lstm_cell+0x408>
 800fa10:	9b02      	ldr	r3, [sp, #8]
 800fa12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa14:	eb03 0a02 	add.w	sl, r3, r2
 800fa18:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800fa1c:	b1ab      	cbz	r3, 800fa4a <lstm_cell+0x486>
 800fa1e:	ed9a 7a00 	vldr	s14, [sl]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	edd2 7a00 	vldr	s15, [r2]
 800fa28:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa2c:	d00d      	beq.n	800fa4a <lstm_cell+0x486>
 800fa2e:	ed9a 7a01 	vldr	s14, [sl, #4]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	edd2 7a01 	vldr	s15, [r2, #4]
 800fa38:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa3c:	d005      	beq.n	800fa4a <lstm_cell+0x486>
 800fa3e:	ed9a 7a02 	vldr	s14, [sl, #8]
 800fa42:	edd2 7a02 	vldr	s15, [r2, #8]
 800fa46:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fa4a:	2d03      	cmp	r5, #3
 800fa4c:	ed8c 6a00 	vstr	s12, [ip]
 800fa50:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800fa54:	f240 8093 	bls.w	800fb7e <lstm_cell+0x5ba>
 800fa58:	9b03      	ldr	r3, [sp, #12]
 800fa5a:	46aa      	mov	sl, r5
 800fa5c:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 800f9c8 <lstm_cell+0x404>
 800fa60:	f103 0210 	add.w	r2, r3, #16
 800fa64:	f10b 0310 	add.w	r3, fp, #16
 800fa68:	ed12 7a03 	vldr	s14, [r2, #-12]
 800fa6c:	f1aa 0a04 	sub.w	sl, sl, #4
 800fa70:	ed53 7a03 	vldr	s15, [r3, #-12]
 800fa74:	3210      	adds	r2, #16
 800fa76:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 800fa7a:	f1ba 0f03 	cmp.w	sl, #3
 800fa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa82:	ed13 7a04 	vldr	s14, [r3, #-16]
 800fa86:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 800fa8a:	f103 0310 	add.w	r3, r3, #16
 800fa8e:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800fa92:	eee5 7a07 	vfma.f32	s15, s10, s14
 800fa96:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 800fa9a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800fa9e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800faa2:	eee5 7a07 	vfma.f32	s15, s10, s14
 800faa6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800faaa:	d8dd      	bhi.n	800fa68 <lstm_cell+0x4a4>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	448b      	add	fp, r1
 800fab0:	440b      	add	r3, r1
 800fab2:	b1b7      	cbz	r7, 800fae2 <lstm_cell+0x51e>
 800fab4:	463a      	mov	r2, r7
 800fab6:	ed93 7a00 	vldr	s14, [r3]
 800faba:	2a01      	cmp	r2, #1
 800fabc:	eddb 7a00 	vldr	s15, [fp]
 800fac0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fac4:	d00d      	beq.n	800fae2 <lstm_cell+0x51e>
 800fac6:	ed93 7a01 	vldr	s14, [r3, #4]
 800faca:	2a02      	cmp	r2, #2
 800facc:	eddb 7a01 	vldr	s15, [fp, #4]
 800fad0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fad4:	d005      	beq.n	800fae2 <lstm_cell+0x51e>
 800fad6:	ed93 7a02 	vldr	s14, [r3, #8]
 800fada:	eddb 7a02 	vldr	s15, [fp, #8]
 800fade:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fae2:	9a06      	ldr	r2, [sp, #24]
 800fae4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800fae8:	9b04      	ldr	r3, [sp, #16]
 800faea:	f108 0804 	add.w	r8, r8, #4
 800faee:	4692      	mov	sl, r2
 800faf0:	9a07      	ldr	r2, [sp, #28]
 800faf2:	ed8c 6a00 	vstr	s12, [ip]
 800faf6:	449a      	add	sl, r3
 800faf8:	ed99 7a00 	vldr	s14, [r9]
 800fafc:	f8cd a018 	str.w	sl, [sp, #24]
 800fb00:	4692      	mov	sl, r2
 800fb02:	9a01      	ldr	r2, [sp, #4]
 800fb04:	4492      	add	sl, r2
 800fb06:	9a08      	ldr	r2, [sp, #32]
 800fb08:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb0c:	4692      	mov	sl, r2
 800fb0e:	9a01      	ldr	r2, [sp, #4]
 800fb10:	449a      	add	sl, r3
 800fb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb14:	f8cd a020 	str.w	sl, [sp, #32]
 800fb18:	469a      	mov	sl, r3
 800fb1a:	9b02      	ldr	r3, [sp, #8]
 800fb1c:	4492      	add	sl, r2
 800fb1e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fb22:	469a      	mov	sl, r3
 800fb24:	9b04      	ldr	r3, [sp, #16]
 800fb26:	449a      	add	sl, r3
 800fb28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fb2a:	9316      	str	r3, [sp, #88]	; 0x58
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	f8cd a008 	str.w	sl, [sp, #8]
 800fb32:	4413      	add	r3, r2
 800fb34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb3a:	ecf3 5a01 	vldmia	r3!, {s11}
 800fb3e:	9310      	str	r3, [sp, #64]	; 0x40
 800fb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb42:	441a      	add	r2, r3
 800fb44:	4613      	mov	r3, r2
 800fb46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb48:	edd3 7a00 	vldr	s15, [r3]
 800fb4c:	3201      	adds	r2, #1
 800fb4e:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fb52:	4295      	cmp	r5, r2
 800fb54:	ee35 6a86 	vadd.f32	s12, s11, s12
 800fb58:	ecac 6a01 	vstmia	ip!, {s12}
 800fb5c:	d01b      	beq.n	800fb96 <lstm_cell+0x5d2>
 800fb5e:	4613      	mov	r3, r2
 800fb60:	2e03      	cmp	r6, #3
 800fb62:	920e      	str	r2, [sp, #56]	; 0x38
 800fb64:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fb68:	edc0 6a00 	vstr	s13, [r0]
 800fb6c:	930a      	str	r3, [sp, #40]	; 0x28
 800fb6e:	f63f adc2 	bhi.w	800f6f6 <lstm_cell+0x132>
 800fb72:	4633      	mov	r3, r6
 800fb74:	ed1f 6a6c 	vldr	s12, [pc, #-432]	; 800f9c8 <lstm_cell+0x404>
 800fb78:	e9dd 2905 	ldrd	r2, r9, [sp, #20]
 800fb7c:	e5eb      	b.n	800f756 <lstm_cell+0x192>
 800fb7e:	462a      	mov	r2, r5
 800fb80:	9b03      	ldr	r3, [sp, #12]
 800fb82:	ed5f 5a6f 	vldr	s11, [pc, #-444]	; 800f9c8 <lstm_cell+0x404>
 800fb86:	e796      	b.n	800fab6 <lstm_cell+0x4f2>
 800fb88:	4633      	mov	r3, r6
 800fb8a:	9a05      	ldr	r2, [sp, #20]
 800fb8c:	f8dd a008 	ldr.w	sl, [sp, #8]
 800fb90:	ed1f 6a73 	vldr	s12, [pc, #-460]	; 800f9c8 <lstm_cell+0x404>
 800fb94:	e742      	b.n	800fa1c <lstm_cell+0x458>
 800fb96:	a91c      	add	r1, sp, #112	; 0x70
 800fb98:	4617      	mov	r7, r2
 800fb9a:	960a      	str	r6, [sp, #40]	; 0x28
 800fb9c:	4608      	mov	r0, r1
 800fb9e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800fba2:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 800fba6:	47a8      	blx	r5
 800fba8:	a920      	add	r1, sp, #128	; 0x80
 800fbaa:	6965      	ldr	r5, [r4, #20]
 800fbac:	463a      	mov	r2, r7
 800fbae:	4608      	mov	r0, r1
 800fbb0:	69a3      	ldr	r3, [r4, #24]
 800fbb2:	47a8      	blx	r5
 800fbb4:	a924      	add	r1, sp, #144	; 0x90
 800fbb6:	68e5      	ldr	r5, [r4, #12]
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4608      	mov	r0, r1
 800fbbc:	6923      	ldr	r3, [r4, #16]
 800fbbe:	47a8      	blx	r5
 800fbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbc2:	9a01      	ldr	r2, [sp, #4]
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	f1a3 0803 	sub.w	r8, r3, #3
 800fbca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fbcc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800fbd0:	ea4f 0598 	mov.w	r5, r8, lsr #2
 800fbd4:	4413      	add	r3, r2
 800fbd6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fbd8:	469c      	mov	ip, r3
 800fbda:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
 800fbde:	3501      	adds	r5, #1
 800fbe0:	ed1f 4a87 	vldr	s8, [pc, #-540]	; 800f9c8 <lstm_cell+0x404>
 800fbe4:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 800fbe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fbea:	012d      	lsls	r5, r5, #4
 800fbec:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800fbf0:	e9cd b802 	strd	fp, r8, [sp, #8]
 800fbf4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fbf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fbfa:	2e03      	cmp	r6, #3
 800fbfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbfe:	ecb2 7a01 	vldmia	r2!, {s14}
 800fc02:	440b      	add	r3, r1
 800fc04:	920f      	str	r2, [sp, #60]	; 0x3c
 800fc06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fc08:	ecf2 7a01 	vldmia	r2!, {s15}
 800fc0c:	9211      	str	r2, [sp, #68]	; 0x44
 800fc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc14:	ed93 7a00 	vldr	s14, [r3]
 800fc18:	ecf2 6a01 	vldmia	r2!, {s13}
 800fc1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc20:	9212      	str	r2, [sp, #72]	; 0x48
 800fc22:	edc3 7a00 	vstr	s15, [r3]
 800fc26:	ed80 4a00 	vstr	s8, [r0]
 800fc2a:	f240 80d5 	bls.w	800fdd8 <lstm_cell+0x814>
 800fc2e:	9b05      	ldr	r3, [sp, #20]
 800fc30:	f108 0210 	add.w	r2, r8, #16
 800fc34:	46b2      	mov	sl, r6
 800fc36:	ed5f 6a9c 	vldr	s13, [pc, #-624]	; 800f9c8 <lstm_cell+0x404>
 800fc3a:	3310      	adds	r3, #16
 800fc3c:	ed12 7a03 	vldr	s14, [r2, #-12]
 800fc40:	f1aa 0a04 	sub.w	sl, sl, #4
 800fc44:	ed53 7a03 	vldr	s15, [r3, #-12]
 800fc48:	3210      	adds	r2, #16
 800fc4a:	ed12 6a08 	vldr	s12, [r2, #-32]	; 0xffffffe0
 800fc4e:	f1ba 0f03 	cmp.w	sl, #3
 800fc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc56:	ed13 7a04 	vldr	s14, [r3, #-16]
 800fc5a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800fc5e:	f103 0310 	add.w	r3, r3, #16
 800fc62:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800fc66:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc6a:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 800fc6e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800fc72:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fc76:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc7a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fc7e:	d8dd      	bhi.n	800fc3c <lstm_cell+0x678>
 800fc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc82:	eb08 0a03 	add.w	sl, r8, r3
 800fc86:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800fc8a:	b1ab      	cbz	r3, 800fcb8 <lstm_cell+0x6f4>
 800fc8c:	ed9a 7a00 	vldr	s14, [sl]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	edd2 7a00 	vldr	s15, [r2]
 800fc96:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fc9a:	d00d      	beq.n	800fcb8 <lstm_cell+0x6f4>
 800fc9c:	ed9a 7a01 	vldr	s14, [sl, #4]
 800fca0:	2b02      	cmp	r3, #2
 800fca2:	edd2 7a01 	vldr	s15, [r2, #4]
 800fca6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fcaa:	d005      	beq.n	800fcb8 <lstm_cell+0x6f4>
 800fcac:	ed9a 7a02 	vldr	s14, [sl, #8]
 800fcb0:	edd2 7a02 	vldr	s15, [r2, #8]
 800fcb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fcb8:	2f03      	cmp	r7, #3
 800fcba:	edc0 6a00 	vstr	s13, [r0]
 800fcbe:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800fcc2:	f240 8084 	bls.w	800fdce <lstm_cell+0x80a>
 800fcc6:	f109 0210 	add.w	r2, r9, #16
 800fcca:	f10b 0310 	add.w	r3, fp, #16
 800fcce:	46ba      	mov	sl, r7
 800fcd0:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 800f9c8 <lstm_cell+0x404>
 800fcd4:	ed12 7a03 	vldr	s14, [r2, #-12]
 800fcd8:	f1aa 0a04 	sub.w	sl, sl, #4
 800fcdc:	ed53 7a03 	vldr	s15, [r3, #-12]
 800fce0:	3210      	adds	r2, #16
 800fce2:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 800fce6:	f1ba 0f03 	cmp.w	sl, #3
 800fcea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcee:	ed13 7a04 	vldr	s14, [r3, #-16]
 800fcf2:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 800fcf6:	f103 0310 	add.w	r3, r3, #16
 800fcfa:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 800fcfe:	eee5 7a87 	vfma.f32	s15, s11, s14
 800fd02:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800fd06:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800fd0a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fd0e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800fd12:	ee36 6a27 	vadd.f32	s12, s12, s15
 800fd16:	d8dd      	bhi.n	800fcd4 <lstm_cell+0x710>
 800fd18:	9a03      	ldr	r2, [sp, #12]
 800fd1a:	44ab      	add	fp, r5
 800fd1c:	eb09 0305 	add.w	r3, r9, r5
 800fd20:	b1aa      	cbz	r2, 800fd4e <lstm_cell+0x78a>
 800fd22:	ed93 7a00 	vldr	s14, [r3]
 800fd26:	2a01      	cmp	r2, #1
 800fd28:	eddb 7a00 	vldr	s15, [fp]
 800fd2c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fd30:	d00d      	beq.n	800fd4e <lstm_cell+0x78a>
 800fd32:	ed93 7a01 	vldr	s14, [r3, #4]
 800fd36:	2a02      	cmp	r2, #2
 800fd38:	eddb 7a01 	vldr	s15, [fp, #4]
 800fd3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fd40:	d005      	beq.n	800fd4e <lstm_cell+0x78a>
 800fd42:	ed93 7a02 	vldr	s14, [r3, #8]
 800fd46:	eddb 7a02 	vldr	s15, [fp, #8]
 800fd4a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fd4e:	9b04      	ldr	r3, [sp, #16]
 800fd50:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fd54:	4498      	add	r8, r3
 800fd56:	9b01      	ldr	r3, [sp, #4]
 800fd58:	edc0 6a00 	vstr	s13, [r0]
 800fd5c:	4499      	add	r9, r3
 800fd5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd60:	ecbe 7a01 	vldmia	lr!, {s14}
 800fd64:	440b      	add	r3, r1
 800fd66:	ecbc 6a01 	vldmia	ip!, {s12}
 800fd6a:	3104      	adds	r1, #4
 800fd6c:	edd3 7a00 	vldr	s15, [r3]
 800fd70:	9b02      	ldr	r3, [sp, #8]
 800fd72:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fd76:	428b      	cmp	r3, r1
 800fd78:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fd7c:	ece0 6a01 	vstmia	r0!, {s13}
 800fd80:	f47f af3a 	bne.w	800fbf8 <lstm_cell+0x634>
 800fd84:	a928      	add	r1, sp, #160	; 0xa0
 800fd86:	469b      	mov	fp, r3
 800fd88:	463a      	mov	r2, r7
 800fd8a:	4608      	mov	r0, r1
 800fd8c:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 800fd90:	47a8      	blx	r5
 800fd92:	a930      	add	r1, sp, #192	; 0xc0
 800fd94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd96:	a82c      	add	r0, sp, #176	; 0xb0
 800fd98:	463a      	mov	r2, r7
 800fd9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fd9c:	47a8      	blx	r5
 800fd9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fda0:	449b      	add	fp, r3
 800fda2:	4619      	mov	r1, r3
 800fda4:	4618      	mov	r0, r3
 800fda6:	1a0a      	subs	r2, r1, r0
 800fda8:	6a23      	ldr	r3, [r4, #32]
 800fdaa:	ecf1 7a01 	vldmia	r1!, {s15}
 800fdae:	4413      	add	r3, r2
 800fdb0:	458b      	cmp	fp, r1
 800fdb2:	ed93 7a00 	vldr	s14, [r3]
 800fdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdba:	edc3 7a00 	vstr	s15, [r3]
 800fdbe:	d1f2      	bne.n	800fda6 <lstm_cell+0x7e2>
 800fdc0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800fdc4:	e9c4 2307 	strd	r2, r3, [r4, #28]
 800fdc8:	b035      	add	sp, #212	; 0xd4
 800fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdce:	464b      	mov	r3, r9
 800fdd0:	463a      	mov	r2, r7
 800fdd2:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 800fe50 <lstm_cell+0x88c>
 800fdd6:	e7a4      	b.n	800fd22 <lstm_cell+0x75e>
 800fdd8:	4633      	mov	r3, r6
 800fdda:	9a05      	ldr	r2, [sp, #20]
 800fddc:	46c2      	mov	sl, r8
 800fdde:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800fe50 <lstm_cell+0x88c>
 800fde2:	e752      	b.n	800fc8a <lstm_cell+0x6c6>
 800fde4:	462a      	mov	r2, r5
 800fde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde8:	eddf 5a19 	vldr	s11, [pc, #100]	; 800fe50 <lstm_cell+0x88c>
 800fdec:	e5af      	b.n	800f94e <lstm_cell+0x38a>
 800fdee:	4633      	mov	r3, r6
 800fdf0:	9a05      	ldr	r2, [sp, #20]
 800fdf2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fdf6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800fe50 <lstm_cell+0x88c>
 800fdfa:	e55b      	b.n	800f8b4 <lstm_cell+0x2f0>
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	eddf 5a14 	vldr	s11, [pc, #80]	; 800fe50 <lstm_cell+0x88c>
 800fe02:	e4f5      	b.n	800f7f0 <lstm_cell+0x22c>
 800fe04:	a91c      	add	r1, sp, #112	; 0x70
 800fe06:	462a      	mov	r2, r5
 800fe08:	e9d4 6305 	ldrd	r6, r3, [r4, #20]
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	47b0      	blx	r6
 800fe10:	a920      	add	r1, sp, #128	; 0x80
 800fe12:	6966      	ldr	r6, [r4, #20]
 800fe14:	462a      	mov	r2, r5
 800fe16:	4608      	mov	r0, r1
 800fe18:	69a3      	ldr	r3, [r4, #24]
 800fe1a:	47b0      	blx	r6
 800fe1c:	a924      	add	r1, sp, #144	; 0x90
 800fe1e:	68e6      	ldr	r6, [r4, #12]
 800fe20:	462a      	mov	r2, r5
 800fe22:	4608      	mov	r0, r1
 800fe24:	6923      	ldr	r3, [r4, #16]
 800fe26:	47b0      	blx	r6
 800fe28:	a928      	add	r1, sp, #160	; 0xa0
 800fe2a:	462a      	mov	r2, r5
 800fe2c:	69a3      	ldr	r3, [r4, #24]
 800fe2e:	4608      	mov	r0, r1
 800fe30:	6966      	ldr	r6, [r4, #20]
 800fe32:	47b0      	blx	r6
 800fe34:	462a      	mov	r2, r5
 800fe36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe38:	a930      	add	r1, sp, #192	; 0xc0
 800fe3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fe3c:	a82c      	add	r0, sp, #176	; 0xb0
 800fe3e:	47a8      	blx	r5
 800fe40:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800fe44:	e9c4 2307 	strd	r2, r3, [r4, #28]
 800fe48:	b035      	add	sp, #212	; 0xd4
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	bf00      	nop
 800fe50:	00000000 	.word	0x00000000

0800fe54 <forward_lstm>:
 800fe54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe58:	6943      	ldr	r3, [r0, #20]
 800fe5a:	b099      	sub	sp, #100	; 0x64
 800fe5c:	881c      	ldrh	r4, [r3, #0]
 800fe5e:	2c00      	cmp	r4, #0
 800fe60:	f000 80ea 	beq.w	8010038 <forward_lstm+0x1e4>
 800fe64:	6859      	ldr	r1, [r3, #4]
 800fe66:	684b      	ldr	r3, [r1, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 8130 	beq.w	80100ce <forward_lstm+0x27a>
 800fe6e:	f8d3 b000 	ldr.w	fp, [r3]
 800fe72:	2c01      	cmp	r4, #1
 800fe74:	f240 80db 	bls.w	801002e <forward_lstm+0x1da>
 800fe78:	690e      	ldr	r6, [r1, #16]
 800fe7a:	b106      	cbz	r6, 800fe7e <forward_lstm+0x2a>
 800fe7c:	6836      	ldr	r6, [r6, #0]
 800fe7e:	2c02      	cmp	r4, #2
 800fe80:	f000 80d5 	beq.w	801002e <forward_lstm+0x1da>
 800fe84:	69ca      	ldr	r2, [r1, #28]
 800fe86:	2a00      	cmp	r2, #0
 800fe88:	f000 8114 	beq.w	80100b4 <forward_lstm+0x260>
 800fe8c:	f111 0818 	adds.w	r8, r1, #24
 800fe90:	6815      	ldr	r5, [r2, #0]
 800fe92:	d008      	beq.n	800fea6 <forward_lstm+0x52>
 800fe94:	8b0f      	ldrh	r7, [r1, #24]
 800fe96:	2f01      	cmp	r7, #1
 800fe98:	f240 8114 	bls.w	80100c4 <forward_lstm+0x270>
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	f000 80d0 	beq.w	8010042 <forward_lstm+0x1ee>
 800fea2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800fea6:	f8db 700c 	ldr.w	r7, [fp, #12]
 800feaa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	69b6      	ldr	r6, [r6, #24]
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800feba:	9303      	str	r3, [sp, #12]
 800febc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800fec0:	f8d0 a018 	ldr.w	sl, [r0, #24]
 800fec4:	9309      	str	r3, [sp, #36]	; 0x24
 800fec6:	68b3      	ldr	r3, [r6, #8]
 800fec8:	9304      	str	r3, [sp, #16]
 800feca:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800fece:	e9d2 7205 	ldrd	r7, r2, [r2, #20]
 800fed2:	f1b9 0f00 	cmp.w	r9, #0
 800fed6:	f000 80fe 	beq.w	80100d6 <forward_lstm+0x282>
 800feda:	f8d9 9018 	ldr.w	r9, [r9, #24]
 800fede:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800fee2:	9605      	str	r6, [sp, #20]
 800fee4:	2f00      	cmp	r7, #0
 800fee6:	f000 80f4 	beq.w	80100d2 <forward_lstm+0x27e>
 800feea:	69bf      	ldr	r7, [r7, #24]
 800feec:	68be      	ldr	r6, [r7, #8]
 800feee:	9606      	str	r6, [sp, #24]
 800fef0:	2a00      	cmp	r2, #0
 800fef2:	f000 80f3 	beq.w	80100dc <forward_lstm+0x288>
 800fef6:	6992      	ldr	r2, [r2, #24]
 800fef8:	6892      	ldr	r2, [r2, #8]
 800fefa:	9207      	str	r2, [sp, #28]
 800fefc:	2c03      	cmp	r4, #3
 800fefe:	f000 8096 	beq.w	801002e <forward_lstm+0x1da>
 800ff02:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800ff04:	2a00      	cmp	r2, #0
 800ff06:	f000 8095 	beq.w	8010034 <forward_lstm+0x1e0>
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
 800ff10:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800ff14:	4681      	mov	r9, r0
 800ff16:	6992      	ldr	r2, [r2, #24]
 800ff18:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800ff1c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ff20:	00bf      	lsls	r7, r7, #2
 800ff22:	6894      	ldr	r4, [r2, #8]
 800ff24:	2100      	movs	r1, #0
 800ff26:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800ff2a:	463a      	mov	r2, r7
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	4427      	add	r7, r4
 800ff30:	69ad      	ldr	r5, [r5, #24]
 800ff32:	9002      	str	r0, [sp, #8]
 800ff34:	4620      	mov	r0, r4
 800ff36:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800ff3a:	68ad      	ldr	r5, [r5, #8]
 800ff3c:	f8de 8008 	ldr.w	r8, [lr, #8]
 800ff40:	9308      	str	r3, [sp, #32]
 800ff42:	f000 fa2b 	bl	801039c <memset>
 800ff46:	9b02      	ldr	r3, [sp, #8]
 800ff48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ff4c:	eb04 0e03 	add.w	lr, r4, r3
 800ff50:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ff54:	4b62      	ldr	r3, [pc, #392]	; (80100e0 <forward_lstm+0x28c>)
 800ff56:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800ff5a:	960b      	str	r6, [sp, #44]	; 0x2c
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	bf08      	it	eq
 800ff60:	4618      	moveq	r0, r3
 800ff62:	9e05      	ldr	r6, [sp, #20]
 800ff64:	2900      	cmp	r1, #0
 800ff66:	bf08      	it	eq
 800ff68:	4619      	moveq	r1, r3
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	bf08      	it	eq
 800ff6e:	461a      	moveq	r2, r3
 800ff70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff72:	960e      	str	r6, [sp, #56]	; 0x38
 800ff74:	9e06      	ldr	r6, [sp, #24]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	950a      	str	r5, [sp, #40]	; 0x28
 800ff7a:	9b02      	ldr	r3, [sp, #8]
 800ff7c:	9d03      	ldr	r5, [sp, #12]
 800ff7e:	9610      	str	r6, [sp, #64]	; 0x40
 800ff80:	4473      	add	r3, lr
 800ff82:	9e03      	ldr	r6, [sp, #12]
 800ff84:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800ff88:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
 800ff8c:	bf98      	it	ls
 800ff8e:	f04f 0a00 	movls.w	sl, #0
 800ff92:	9d08      	ldr	r5, [sp, #32]
 800ff94:	9415      	str	r4, [sp, #84]	; 0x54
 800ff96:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 800ff9a:	f899 4028 	ldrb.w	r4, [r9, #40]	; 0x28
 800ff9e:	9e07      	ldr	r6, [sp, #28]
 800ffa0:	950c      	str	r5, [sp, #48]	; 0x30
 800ffa2:	4655      	mov	r5, sl
 800ffa4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ffa8:	9617      	str	r6, [sp, #92]	; 0x5c
 800ffaa:	900d      	str	r0, [sp, #52]	; 0x34
 800ffac:	910f      	str	r1, [sp, #60]	; 0x3c
 800ffae:	9216      	str	r2, [sp, #88]	; 0x58
 800ffb0:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
 800ffb4:	2c00      	cmp	r4, #0
 800ffb6:	d041      	beq.n	801003c <forward_lstm+0x1e8>
 800ffb8:	9b01      	ldr	r3, [sp, #4]
 800ffba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ffbe:	1e5c      	subs	r4, r3, #1
 800ffc0:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 800ffc4:	b14a      	cbz	r2, 800ffda <forward_lstm+0x186>
 800ffc6:	9b01      	ldr	r3, [sp, #4]
 800ffc8:	f1ca 0500 	rsb	r5, sl, #0
 800ffcc:	1e5a      	subs	r2, r3, #1
 800ffce:	9b04      	ldr	r3, [sp, #16]
 800ffd0:	fb0a fa02 	mul.w	sl, sl, r2
 800ffd4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ffd8:	9304      	str	r3, [sp, #16]
 800ffda:	fb0c f308 	mul.w	r3, ip, r8
 800ffde:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800ffe2:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800ffe6:	9303      	str	r3, [sp, #12]
 800ffe8:	2d00      	cmp	r5, #0
 800ffea:	d143      	bne.n	8010074 <forward_lstm+0x220>
 800ffec:	4653      	mov	r3, sl
 800ffee:	fb0c f504 	mul.w	r5, ip, r4
 800fff2:	46ba      	mov	sl, r7
 800fff4:	9e04      	ldr	r6, [sp, #16]
 800fff6:	465f      	mov	r7, fp
 800fff8:	469b      	mov	fp, r3
 800fffa:	e002      	b.n	8010002 <forward_lstm+0x1ae>
 800fffc:	9b01      	ldr	r3, [sp, #4]
 800fffe:	429c      	cmp	r4, r3
 8010000:	da0c      	bge.n	801001c <forward_lstm+0x1c8>
 8010002:	69b8      	ldr	r0, [r7, #24]
 8010004:	4444      	add	r4, r8
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	4652      	mov	r2, sl
 801000a:	6880      	ldr	r0, [r0, #8]
 801000c:	4659      	mov	r1, fp
 801000e:	444e      	add	r6, r9
 8010010:	4428      	add	r0, r5
 8010012:	441d      	add	r5, r3
 8010014:	f7ff fad6 	bl	800f5c4 <lstm_cell>
 8010018:	2c00      	cmp	r4, #0
 801001a:	daef      	bge.n	800fffc <forward_lstm+0x1a8>
 801001c:	4630      	mov	r0, r6
 801001e:	9a02      	ldr	r2, [sp, #8]
 8010020:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010022:	9604      	str	r6, [sp, #16]
 8010024:	f000 f9ac 	bl	8010380 <memcpy>
 8010028:	b019      	add	sp, #100	; 0x64
 801002a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002e:	2300      	movs	r3, #0
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	deff      	udf	#255	; 0xff
 8010034:	6993      	ldr	r3, [r2, #24]
 8010036:	deff      	udf	#255	; 0xff
 8010038:	6863      	ldr	r3, [r4, #4]
 801003a:	deff      	udf	#255	; 0xff
 801003c:	f04f 0801 	mov.w	r8, #1
 8010040:	e7be      	b.n	800ffc0 <forward_lstm+0x16c>
 8010042:	f8db 300c 	ldr.w	r3, [fp, #12]
 8010046:	f04f 0800 	mov.w	r8, #0
 801004a:	68f7      	ldr	r7, [r6, #12]
 801004c:	69b2      	ldr	r2, [r6, #24]
 801004e:	46c4      	mov	ip, r8
 8010050:	68de      	ldr	r6, [r3, #12]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	6892      	ldr	r2, [r2, #8]
 8010056:	9303      	str	r3, [sp, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f8cd 8014 	str.w	r8, [sp, #20]
 801005e:	9309      	str	r3, [sp, #36]	; 0x24
 8010060:	4643      	mov	r3, r8
 8010062:	9601      	str	r6, [sp, #4]
 8010064:	f8cd 8018 	str.w	r8, [sp, #24]
 8010068:	9204      	str	r2, [sp, #16]
 801006a:	f8cd 801c 	str.w	r8, [sp, #28]
 801006e:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8010072:	e743      	b.n	800fefc <forward_lstm+0xa8>
 8010074:	4653      	mov	r3, sl
 8010076:	fb0c f504 	mul.w	r5, ip, r4
 801007a:	46da      	mov	sl, fp
 801007c:	9e04      	ldr	r6, [sp, #16]
 801007e:	469b      	mov	fp, r3
 8010080:	e001      	b.n	8010086 <forward_lstm+0x232>
 8010082:	2c00      	cmp	r4, #0
 8010084:	dbd0      	blt.n	8010028 <forward_lstm+0x1d4>
 8010086:	f8da 0018 	ldr.w	r0, [sl, #24]
 801008a:	463a      	mov	r2, r7
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	4659      	mov	r1, fp
 8010090:	6880      	ldr	r0, [r0, #8]
 8010092:	4444      	add	r4, r8
 8010094:	4428      	add	r0, r5
 8010096:	441d      	add	r5, r3
 8010098:	f7ff fa94 	bl	800f5c4 <lstm_cell>
 801009c:	4630      	mov	r0, r6
 801009e:	9a02      	ldr	r2, [sp, #8]
 80100a0:	444e      	add	r6, r9
 80100a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80100a4:	f000 f96c 	bl	8010380 <memcpy>
 80100a8:	9b01      	ldr	r3, [sp, #4]
 80100aa:	429c      	cmp	r4, r3
 80100ac:	dbe9      	blt.n	8010082 <forward_lstm+0x22e>
 80100ae:	b019      	add	sp, #100	; 0x64
 80100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b4:	f111 0518 	adds.w	r5, r1, #24
 80100b8:	d0c3      	beq.n	8010042 <forward_lstm+0x1ee>
 80100ba:	8b0f      	ldrh	r7, [r1, #24]
 80100bc:	4615      	mov	r5, r2
 80100be:	2f01      	cmp	r7, #1
 80100c0:	f63f aeec 	bhi.w	800fe9c <forward_lstm+0x48>
 80100c4:	2a00      	cmp	r2, #0
 80100c6:	d0bc      	beq.n	8010042 <forward_lstm+0x1ee>
 80100c8:	f04f 0800 	mov.w	r8, #0
 80100cc:	e6eb      	b.n	800fea6 <forward_lstm+0x52>
 80100ce:	469b      	mov	fp, r3
 80100d0:	e6cf      	b.n	800fe72 <forward_lstm+0x1e>
 80100d2:	9706      	str	r7, [sp, #24]
 80100d4:	e70c      	b.n	800fef0 <forward_lstm+0x9c>
 80100d6:	f8cd 9014 	str.w	r9, [sp, #20]
 80100da:	e703      	b.n	800fee4 <forward_lstm+0x90>
 80100dc:	9207      	str	r2, [sp, #28]
 80100de:	e70d      	b.n	800fefc <forward_lstm+0xa8>
 80100e0:	0800f5b5 	.word	0x0800f5b5

080100e4 <nl_func_sigmoid_array_f32>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80100ea:	688c      	ldr	r4, [r1, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	18e4      	adds	r4, r4, r3
 80100f2:	ed2d 8b02 	vpush	{d8}
 80100f6:	6885      	ldr	r5, [r0, #8]
 80100f8:	d218      	bcs.n	801012c <nl_func_sigmoid_array_f32+0x48>
 80100fa:	3304      	adds	r3, #4
 80100fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010100:	460f      	mov	r7, r1
 8010102:	3404      	adds	r4, #4
 8010104:	441d      	add	r5, r3
 8010106:	ed14 0a01 	vldr	s0, [r4, #-4]
 801010a:	1f26      	subs	r6, r4, #4
 801010c:	eeb1 0a40 	vneg.f32	s0, s0
 8010110:	f003 f89a 	bl	8013248 <expf>
 8010114:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010118:	f1a4 0308 	sub.w	r3, r4, #8
 801011c:	4634      	mov	r4, r6
 801011e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010122:	ed65 7a01 	vstmdb	r5!, {s15}
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	429a      	cmp	r2, r3
 801012a:	d9ec      	bls.n	8010106 <nl_func_sigmoid_array_f32+0x22>
 801012c:	ecbd 8b02 	vpop	{d8}
 8010130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010132:	bf00      	nop

08010134 <nl_func_tanh_array_f32>:
 8010134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010136:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801013a:	688c      	ldr	r4, [r1, #8]
 801013c:	6885      	ldr	r5, [r0, #8]
 801013e:	4413      	add	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	18e4      	adds	r4, r4, r3
 8010144:	d210      	bcs.n	8010168 <nl_func_tanh_array_f32+0x34>
 8010146:	3304      	adds	r3, #4
 8010148:	460f      	mov	r7, r1
 801014a:	3404      	adds	r4, #4
 801014c:	441d      	add	r5, r3
 801014e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8010152:	1f26      	subs	r6, r4, #4
 8010154:	f003 f826 	bl	80131a4 <tanhf>
 8010158:	ed25 0a01 	vstmdb	r5!, {s0}
 801015c:	f1a4 0308 	sub.w	r3, r4, #8
 8010160:	68ba      	ldr	r2, [r7, #8]
 8010162:	4634      	mov	r4, r6
 8010164:	429a      	cmp	r2, r3
 8010166:	d9f2      	bls.n	801014e <nl_func_tanh_array_f32+0x1a>
 8010168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016a:	bf00      	nop

0801016c <ai_check_custom_types>:
 801016c:	4b13      	ldr	r3, [pc, #76]	; (80101bc <ai_check_custom_types+0x50>)
 801016e:	b082      	sub	sp, #8
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	b118      	cbz	r0, 801017e <ai_check_custom_types+0x12>
 8010176:	7803      	ldrb	r3, [r0, #0]
 8010178:	2b03      	cmp	r3, #3
 801017a:	d002      	beq.n	8010182 <ai_check_custom_types+0x16>
 801017c:	2000      	movs	r0, #0
 801017e:	b002      	add	sp, #8
 8010180:	4770      	bx	lr
 8010182:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010186:	4293      	cmp	r3, r2
 8010188:	d004      	beq.n	8010194 <ai_check_custom_types+0x28>
 801018a:	2001      	movs	r0, #1
 801018c:	f080 0001 	eor.w	r0, r0, #1
 8010190:	b002      	add	sp, #8
 8010192:	4770      	bx	lr
 8010194:	7842      	ldrb	r2, [r0, #1]
 8010196:	3001      	adds	r0, #1
 8010198:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801019c:	429a      	cmp	r2, r3
 801019e:	d1f4      	bne.n	801018a <ai_check_custom_types+0x1e>
 80101a0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80101a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d1ee      	bne.n	801018a <ai_check_custom_types+0x1e>
 80101ac:	7842      	ldrb	r2, [r0, #1]
 80101ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d1e9      	bne.n	801018a <ai_check_custom_types+0x1e>
 80101b6:	2000      	movs	r0, #0
 80101b8:	e7e8      	b.n	801018c <ai_check_custom_types+0x20>
 80101ba:	bf00      	nop
 80101bc:	08013870 	.word	0x08013870

080101c0 <ai_layers_forward_all>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80101c4:	4604      	mov	r4, r0
 80101c6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80101c8:	b316      	cbz	r6, 8010210 <ai_layers_forward_all+0x50>
 80101ca:	b1c5      	cbz	r5, 80101fe <ai_layers_forward_all+0x3e>
 80101cc:	6545      	str	r5, [r0, #84]	; 0x54
 80101ce:	4629      	mov	r1, r5
 80101d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80101d2:	2001      	movs	r0, #1
 80101d4:	47b0      	blx	r6
 80101d6:	2700      	movs	r7, #0
 80101d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80101da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80101dc:	2002      	movs	r0, #2
 80101de:	47b0      	blx	r6
 80101e0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80101e2:	692b      	ldr	r3, [r5, #16]
 80101e4:	4628      	mov	r0, r5
 80101e6:	4798      	blx	r3
 80101e8:	68eb      	ldr	r3, [r5, #12]
 80101ea:	2003      	movs	r0, #3
 80101ec:	429d      	cmp	r5, r3
 80101ee:	4619      	mov	r1, r3
 80101f0:	d006      	beq.n	8010200 <ai_layers_forward_all+0x40>
 80101f2:	6563      	str	r3, [r4, #84]	; 0x54
 80101f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80101f6:	47b0      	blx	r6
 80101f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80101fa:	2900      	cmp	r1, #0
 80101fc:	d1ed      	bne.n	80101da <ai_layers_forward_all+0x1a>
 80101fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010200:	2100      	movs	r1, #0
 8010202:	6567      	str	r7, [r4, #84]	; 0x54
 8010204:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010206:	47b0      	blx	r6
 8010208:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801020a:	2900      	cmp	r1, #0
 801020c:	d1e5      	bne.n	80101da <ai_layers_forward_all+0x1a>
 801020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010210:	2d00      	cmp	r5, #0
 8010212:	d0f4      	beq.n	80101fe <ai_layers_forward_all+0x3e>
 8010214:	6545      	str	r5, [r0, #84]	; 0x54
 8010216:	692b      	ldr	r3, [r5, #16]
 8010218:	4628      	mov	r0, r5
 801021a:	4798      	blx	r3
 801021c:	68eb      	ldr	r3, [r5, #12]
 801021e:	42ab      	cmp	r3, r5
 8010220:	461d      	mov	r5, r3
 8010222:	d003      	beq.n	801022c <ai_layers_forward_all+0x6c>
 8010224:	6563      	str	r3, [r4, #84]	; 0x54
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1f5      	bne.n	8010216 <ai_layers_forward_all+0x56>
 801022a:	e7e8      	b.n	80101fe <ai_layers_forward_all+0x3e>
 801022c:	2300      	movs	r3, #0
 801022e:	6563      	str	r3, [r4, #84]	; 0x54
 8010230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010232:	bf00      	nop

08010234 <ai_array_to_buffer_fmt>:
 8010234:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010238:	2b02      	cmp	r3, #2
 801023a:	d01f      	beq.n	801027c <ai_array_to_buffer_fmt+0x48>
 801023c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8010240:	4a1b      	ldr	r2, [pc, #108]	; (80102b0 <ai_array_to_buffer_fmt+0x7c>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d00a      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 8010246:	dc0d      	bgt.n	8010264 <ai_array_to_buffer_fmt+0x30>
 8010248:	4a1a      	ldr	r2, [pc, #104]	; (80102b4 <ai_array_to_buffer_fmt+0x80>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d006      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 801024e:	dd1d      	ble.n	801028c <ai_array_to_buffer_fmt+0x58>
 8010250:	4a19      	ldr	r2, [pc, #100]	; (80102b8 <ai_array_to_buffer_fmt+0x84>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d002      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 8010256:	320f      	adds	r2, #15
 8010258:	4293      	cmp	r3, r2
 801025a:	d10d      	bne.n	8010278 <ai_array_to_buffer_fmt+0x44>
 801025c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010260:	4318      	orrs	r0, r3
 8010262:	4770      	bx	lr
 8010264:	4a15      	ldr	r2, [pc, #84]	; (80102bc <ai_array_to_buffer_fmt+0x88>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d0f8      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 801026a:	dd18      	ble.n	801029e <ai_array_to_buffer_fmt+0x6a>
 801026c:	4a14      	ldr	r2, [pc, #80]	; (80102c0 <ai_array_to_buffer_fmt+0x8c>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d0f4      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 8010272:	4a14      	ldr	r2, [pc, #80]	; (80102c4 <ai_array_to_buffer_fmt+0x90>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d0f1      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 8010278:	2340      	movs	r3, #64	; 0x40
 801027a:	e7ef      	b.n	801025c <ai_array_to_buffer_fmt+0x28>
 801027c:	4b12      	ldr	r3, [pc, #72]	; (80102c8 <ai_array_to_buffer_fmt+0x94>)
 801027e:	4003      	ands	r3, r0
 8010280:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010288:	4318      	orrs	r0, r3
 801028a:	4770      	bx	lr
 801028c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8010290:	4293      	cmp	r3, r2
 8010292:	d0e3      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 8010294:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010298:	4293      	cmp	r3, r2
 801029a:	d0df      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 801029c:	e7ec      	b.n	8010278 <ai_array_to_buffer_fmt+0x44>
 801029e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d0da      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 80102a6:	3207      	adds	r2, #7
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d0d7      	beq.n	801025c <ai_array_to_buffer_fmt+0x28>
 80102ac:	e7e4      	b.n	8010278 <ai_array_to_buffer_fmt+0x44>
 80102ae:	bf00      	nop
 80102b0:	00840040 	.word	0x00840040
 80102b4:	00040447 	.word	0x00040447
 80102b8:	00040840 	.word	0x00040840
 80102bc:	00840840 	.word	0x00840840
 80102c0:	0084084f 	.word	0x0084084f
 80102c4:	01821040 	.word	0x01821040
 80102c8:	00803fff 	.word	0x00803fff

080102cc <ai_array_get_byte_size>:
 80102cc:	b1e1      	cbz	r1, 8010308 <ai_array_get_byte_size+0x3c>
 80102ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80102d2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80102d6:	b410      	push	{r4}
 80102d8:	f3c0 3482 	ubfx	r4, r0, #14, #3
 80102dc:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80102e0:	4423      	add	r3, r4
 80102e2:	2804      	cmp	r0, #4
 80102e4:	fb01 f103 	mul.w	r1, r1, r3
 80102e8:	f101 0107 	add.w	r1, r1, #7
 80102ec:	f021 0107 	bic.w	r1, r1, #7
 80102f0:	fa21 f102 	lsr.w	r1, r1, r2
 80102f4:	d00a      	beq.n	801030c <ai_array_get_byte_size+0x40>
 80102f6:	2808      	cmp	r0, #8
 80102f8:	d101      	bne.n	80102fe <ai_array_get_byte_size+0x32>
 80102fa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80102fe:	3107      	adds	r1, #7
 8010300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010304:	08c8      	lsrs	r0, r1, #3
 8010306:	4770      	bx	lr
 8010308:	4608      	mov	r0, r1
 801030a:	4770      	bx	lr
 801030c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8010310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010314:	3107      	adds	r1, #7
 8010316:	08c8      	lsrs	r0, r1, #3
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop

0801031c <__errno>:
 801031c:	4b01      	ldr	r3, [pc, #4]	; (8010324 <__errno+0x8>)
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	2000076c 	.word	0x2000076c

08010328 <__libc_init_array>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	4d0d      	ldr	r5, [pc, #52]	; (8010360 <__libc_init_array+0x38>)
 801032c:	4c0d      	ldr	r4, [pc, #52]	; (8010364 <__libc_init_array+0x3c>)
 801032e:	1b64      	subs	r4, r4, r5
 8010330:	10a4      	asrs	r4, r4, #2
 8010332:	2600      	movs	r6, #0
 8010334:	42a6      	cmp	r6, r4
 8010336:	d109      	bne.n	801034c <__libc_init_array+0x24>
 8010338:	4d0b      	ldr	r5, [pc, #44]	; (8010368 <__libc_init_array+0x40>)
 801033a:	4c0c      	ldr	r4, [pc, #48]	; (801036c <__libc_init_array+0x44>)
 801033c:	f003 f9e4 	bl	8013708 <_init>
 8010340:	1b64      	subs	r4, r4, r5
 8010342:	10a4      	asrs	r4, r4, #2
 8010344:	2600      	movs	r6, #0
 8010346:	42a6      	cmp	r6, r4
 8010348:	d105      	bne.n	8010356 <__libc_init_array+0x2e>
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010350:	4798      	blx	r3
 8010352:	3601      	adds	r6, #1
 8010354:	e7ee      	b.n	8010334 <__libc_init_array+0xc>
 8010356:	f855 3b04 	ldr.w	r3, [r5], #4
 801035a:	4798      	blx	r3
 801035c:	3601      	adds	r6, #1
 801035e:	e7f2      	b.n	8010346 <__libc_init_array+0x1e>
 8010360:	08018850 	.word	0x08018850
 8010364:	08018850 	.word	0x08018850
 8010368:	08018850 	.word	0x08018850
 801036c:	08018854 	.word	0x08018854

08010370 <malloc>:
 8010370:	4b02      	ldr	r3, [pc, #8]	; (801037c <malloc+0xc>)
 8010372:	4601      	mov	r1, r0
 8010374:	6818      	ldr	r0, [r3, #0]
 8010376:	f000 b869 	b.w	801044c <_malloc_r>
 801037a:	bf00      	nop
 801037c:	2000076c 	.word	0x2000076c

08010380 <memcpy>:
 8010380:	440a      	add	r2, r1
 8010382:	4291      	cmp	r1, r2
 8010384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010388:	d100      	bne.n	801038c <memcpy+0xc>
 801038a:	4770      	bx	lr
 801038c:	b510      	push	{r4, lr}
 801038e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010396:	4291      	cmp	r1, r2
 8010398:	d1f9      	bne.n	801038e <memcpy+0xe>
 801039a:	bd10      	pop	{r4, pc}

0801039c <memset>:
 801039c:	4402      	add	r2, r0
 801039e:	4603      	mov	r3, r0
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d100      	bne.n	80103a6 <memset+0xa>
 80103a4:	4770      	bx	lr
 80103a6:	f803 1b01 	strb.w	r1, [r3], #1
 80103aa:	e7f9      	b.n	80103a0 <memset+0x4>

080103ac <_free_r>:
 80103ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103ae:	2900      	cmp	r1, #0
 80103b0:	d048      	beq.n	8010444 <_free_r+0x98>
 80103b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103b6:	9001      	str	r0, [sp, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f1a1 0404 	sub.w	r4, r1, #4
 80103be:	bfb8      	it	lt
 80103c0:	18e4      	addlt	r4, r4, r3
 80103c2:	f001 fef3 	bl	80121ac <__malloc_lock>
 80103c6:	4a20      	ldr	r2, [pc, #128]	; (8010448 <_free_r+0x9c>)
 80103c8:	9801      	ldr	r0, [sp, #4]
 80103ca:	6813      	ldr	r3, [r2, #0]
 80103cc:	4615      	mov	r5, r2
 80103ce:	b933      	cbnz	r3, 80103de <_free_r+0x32>
 80103d0:	6063      	str	r3, [r4, #4]
 80103d2:	6014      	str	r4, [r2, #0]
 80103d4:	b003      	add	sp, #12
 80103d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103da:	f001 beed 	b.w	80121b8 <__malloc_unlock>
 80103de:	42a3      	cmp	r3, r4
 80103e0:	d90b      	bls.n	80103fa <_free_r+0x4e>
 80103e2:	6821      	ldr	r1, [r4, #0]
 80103e4:	1862      	adds	r2, r4, r1
 80103e6:	4293      	cmp	r3, r2
 80103e8:	bf04      	itt	eq
 80103ea:	681a      	ldreq	r2, [r3, #0]
 80103ec:	685b      	ldreq	r3, [r3, #4]
 80103ee:	6063      	str	r3, [r4, #4]
 80103f0:	bf04      	itt	eq
 80103f2:	1852      	addeq	r2, r2, r1
 80103f4:	6022      	streq	r2, [r4, #0]
 80103f6:	602c      	str	r4, [r5, #0]
 80103f8:	e7ec      	b.n	80103d4 <_free_r+0x28>
 80103fa:	461a      	mov	r2, r3
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	b10b      	cbz	r3, 8010404 <_free_r+0x58>
 8010400:	42a3      	cmp	r3, r4
 8010402:	d9fa      	bls.n	80103fa <_free_r+0x4e>
 8010404:	6811      	ldr	r1, [r2, #0]
 8010406:	1855      	adds	r5, r2, r1
 8010408:	42a5      	cmp	r5, r4
 801040a:	d10b      	bne.n	8010424 <_free_r+0x78>
 801040c:	6824      	ldr	r4, [r4, #0]
 801040e:	4421      	add	r1, r4
 8010410:	1854      	adds	r4, r2, r1
 8010412:	42a3      	cmp	r3, r4
 8010414:	6011      	str	r1, [r2, #0]
 8010416:	d1dd      	bne.n	80103d4 <_free_r+0x28>
 8010418:	681c      	ldr	r4, [r3, #0]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	6053      	str	r3, [r2, #4]
 801041e:	4421      	add	r1, r4
 8010420:	6011      	str	r1, [r2, #0]
 8010422:	e7d7      	b.n	80103d4 <_free_r+0x28>
 8010424:	d902      	bls.n	801042c <_free_r+0x80>
 8010426:	230c      	movs	r3, #12
 8010428:	6003      	str	r3, [r0, #0]
 801042a:	e7d3      	b.n	80103d4 <_free_r+0x28>
 801042c:	6825      	ldr	r5, [r4, #0]
 801042e:	1961      	adds	r1, r4, r5
 8010430:	428b      	cmp	r3, r1
 8010432:	bf04      	itt	eq
 8010434:	6819      	ldreq	r1, [r3, #0]
 8010436:	685b      	ldreq	r3, [r3, #4]
 8010438:	6063      	str	r3, [r4, #4]
 801043a:	bf04      	itt	eq
 801043c:	1949      	addeq	r1, r1, r5
 801043e:	6021      	streq	r1, [r4, #0]
 8010440:	6054      	str	r4, [r2, #4]
 8010442:	e7c7      	b.n	80103d4 <_free_r+0x28>
 8010444:	b003      	add	sp, #12
 8010446:	bd30      	pop	{r4, r5, pc}
 8010448:	20000ab4 	.word	0x20000ab4

0801044c <_malloc_r>:
 801044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044e:	1ccd      	adds	r5, r1, #3
 8010450:	f025 0503 	bic.w	r5, r5, #3
 8010454:	3508      	adds	r5, #8
 8010456:	2d0c      	cmp	r5, #12
 8010458:	bf38      	it	cc
 801045a:	250c      	movcc	r5, #12
 801045c:	2d00      	cmp	r5, #0
 801045e:	4606      	mov	r6, r0
 8010460:	db01      	blt.n	8010466 <_malloc_r+0x1a>
 8010462:	42a9      	cmp	r1, r5
 8010464:	d903      	bls.n	801046e <_malloc_r+0x22>
 8010466:	230c      	movs	r3, #12
 8010468:	6033      	str	r3, [r6, #0]
 801046a:	2000      	movs	r0, #0
 801046c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046e:	f001 fe9d 	bl	80121ac <__malloc_lock>
 8010472:	4921      	ldr	r1, [pc, #132]	; (80104f8 <_malloc_r+0xac>)
 8010474:	680a      	ldr	r2, [r1, #0]
 8010476:	4614      	mov	r4, r2
 8010478:	b99c      	cbnz	r4, 80104a2 <_malloc_r+0x56>
 801047a:	4f20      	ldr	r7, [pc, #128]	; (80104fc <_malloc_r+0xb0>)
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	b923      	cbnz	r3, 801048a <_malloc_r+0x3e>
 8010480:	4621      	mov	r1, r4
 8010482:	4630      	mov	r0, r6
 8010484:	f000 fcd4 	bl	8010e30 <_sbrk_r>
 8010488:	6038      	str	r0, [r7, #0]
 801048a:	4629      	mov	r1, r5
 801048c:	4630      	mov	r0, r6
 801048e:	f000 fccf 	bl	8010e30 <_sbrk_r>
 8010492:	1c43      	adds	r3, r0, #1
 8010494:	d123      	bne.n	80104de <_malloc_r+0x92>
 8010496:	230c      	movs	r3, #12
 8010498:	6033      	str	r3, [r6, #0]
 801049a:	4630      	mov	r0, r6
 801049c:	f001 fe8c 	bl	80121b8 <__malloc_unlock>
 80104a0:	e7e3      	b.n	801046a <_malloc_r+0x1e>
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	1b5b      	subs	r3, r3, r5
 80104a6:	d417      	bmi.n	80104d8 <_malloc_r+0x8c>
 80104a8:	2b0b      	cmp	r3, #11
 80104aa:	d903      	bls.n	80104b4 <_malloc_r+0x68>
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	441c      	add	r4, r3
 80104b0:	6025      	str	r5, [r4, #0]
 80104b2:	e004      	b.n	80104be <_malloc_r+0x72>
 80104b4:	6863      	ldr	r3, [r4, #4]
 80104b6:	42a2      	cmp	r2, r4
 80104b8:	bf0c      	ite	eq
 80104ba:	600b      	streq	r3, [r1, #0]
 80104bc:	6053      	strne	r3, [r2, #4]
 80104be:	4630      	mov	r0, r6
 80104c0:	f001 fe7a 	bl	80121b8 <__malloc_unlock>
 80104c4:	f104 000b 	add.w	r0, r4, #11
 80104c8:	1d23      	adds	r3, r4, #4
 80104ca:	f020 0007 	bic.w	r0, r0, #7
 80104ce:	1ac2      	subs	r2, r0, r3
 80104d0:	d0cc      	beq.n	801046c <_malloc_r+0x20>
 80104d2:	1a1b      	subs	r3, r3, r0
 80104d4:	50a3      	str	r3, [r4, r2]
 80104d6:	e7c9      	b.n	801046c <_malloc_r+0x20>
 80104d8:	4622      	mov	r2, r4
 80104da:	6864      	ldr	r4, [r4, #4]
 80104dc:	e7cc      	b.n	8010478 <_malloc_r+0x2c>
 80104de:	1cc4      	adds	r4, r0, #3
 80104e0:	f024 0403 	bic.w	r4, r4, #3
 80104e4:	42a0      	cmp	r0, r4
 80104e6:	d0e3      	beq.n	80104b0 <_malloc_r+0x64>
 80104e8:	1a21      	subs	r1, r4, r0
 80104ea:	4630      	mov	r0, r6
 80104ec:	f000 fca0 	bl	8010e30 <_sbrk_r>
 80104f0:	3001      	adds	r0, #1
 80104f2:	d1dd      	bne.n	80104b0 <_malloc_r+0x64>
 80104f4:	e7cf      	b.n	8010496 <_malloc_r+0x4a>
 80104f6:	bf00      	nop
 80104f8:	20000ab4 	.word	0x20000ab4
 80104fc:	20000ab8 	.word	0x20000ab8

08010500 <__cvt>:
 8010500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010504:	ec55 4b10 	vmov	r4, r5, d0
 8010508:	2d00      	cmp	r5, #0
 801050a:	460e      	mov	r6, r1
 801050c:	4619      	mov	r1, r3
 801050e:	462b      	mov	r3, r5
 8010510:	bfbb      	ittet	lt
 8010512:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010516:	461d      	movlt	r5, r3
 8010518:	2300      	movge	r3, #0
 801051a:	232d      	movlt	r3, #45	; 0x2d
 801051c:	700b      	strb	r3, [r1, #0]
 801051e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010520:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010524:	4691      	mov	r9, r2
 8010526:	f023 0820 	bic.w	r8, r3, #32
 801052a:	bfbc      	itt	lt
 801052c:	4622      	movlt	r2, r4
 801052e:	4614      	movlt	r4, r2
 8010530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010534:	d005      	beq.n	8010542 <__cvt+0x42>
 8010536:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801053a:	d100      	bne.n	801053e <__cvt+0x3e>
 801053c:	3601      	adds	r6, #1
 801053e:	2102      	movs	r1, #2
 8010540:	e000      	b.n	8010544 <__cvt+0x44>
 8010542:	2103      	movs	r1, #3
 8010544:	ab03      	add	r3, sp, #12
 8010546:	9301      	str	r3, [sp, #4]
 8010548:	ab02      	add	r3, sp, #8
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	ec45 4b10 	vmov	d0, r4, r5
 8010550:	4653      	mov	r3, sl
 8010552:	4632      	mov	r2, r6
 8010554:	f000 fe08 	bl	8011168 <_dtoa_r>
 8010558:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801055c:	4607      	mov	r7, r0
 801055e:	d102      	bne.n	8010566 <__cvt+0x66>
 8010560:	f019 0f01 	tst.w	r9, #1
 8010564:	d022      	beq.n	80105ac <__cvt+0xac>
 8010566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801056a:	eb07 0906 	add.w	r9, r7, r6
 801056e:	d110      	bne.n	8010592 <__cvt+0x92>
 8010570:	783b      	ldrb	r3, [r7, #0]
 8010572:	2b30      	cmp	r3, #48	; 0x30
 8010574:	d10a      	bne.n	801058c <__cvt+0x8c>
 8010576:	2200      	movs	r2, #0
 8010578:	2300      	movs	r3, #0
 801057a:	4620      	mov	r0, r4
 801057c:	4629      	mov	r1, r5
 801057e:	f7f0 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 8010582:	b918      	cbnz	r0, 801058c <__cvt+0x8c>
 8010584:	f1c6 0601 	rsb	r6, r6, #1
 8010588:	f8ca 6000 	str.w	r6, [sl]
 801058c:	f8da 3000 	ldr.w	r3, [sl]
 8010590:	4499      	add	r9, r3
 8010592:	2200      	movs	r2, #0
 8010594:	2300      	movs	r3, #0
 8010596:	4620      	mov	r0, r4
 8010598:	4629      	mov	r1, r5
 801059a:	f7f0 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 801059e:	b108      	cbz	r0, 80105a4 <__cvt+0xa4>
 80105a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80105a4:	2230      	movs	r2, #48	; 0x30
 80105a6:	9b03      	ldr	r3, [sp, #12]
 80105a8:	454b      	cmp	r3, r9
 80105aa:	d307      	bcc.n	80105bc <__cvt+0xbc>
 80105ac:	9b03      	ldr	r3, [sp, #12]
 80105ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105b0:	1bdb      	subs	r3, r3, r7
 80105b2:	4638      	mov	r0, r7
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	b004      	add	sp, #16
 80105b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105bc:	1c59      	adds	r1, r3, #1
 80105be:	9103      	str	r1, [sp, #12]
 80105c0:	701a      	strb	r2, [r3, #0]
 80105c2:	e7f0      	b.n	80105a6 <__cvt+0xa6>

080105c4 <__exponent>:
 80105c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105c6:	4603      	mov	r3, r0
 80105c8:	2900      	cmp	r1, #0
 80105ca:	bfb8      	it	lt
 80105cc:	4249      	neglt	r1, r1
 80105ce:	f803 2b02 	strb.w	r2, [r3], #2
 80105d2:	bfb4      	ite	lt
 80105d4:	222d      	movlt	r2, #45	; 0x2d
 80105d6:	222b      	movge	r2, #43	; 0x2b
 80105d8:	2909      	cmp	r1, #9
 80105da:	7042      	strb	r2, [r0, #1]
 80105dc:	dd2a      	ble.n	8010634 <__exponent+0x70>
 80105de:	f10d 0407 	add.w	r4, sp, #7
 80105e2:	46a4      	mov	ip, r4
 80105e4:	270a      	movs	r7, #10
 80105e6:	46a6      	mov	lr, r4
 80105e8:	460a      	mov	r2, r1
 80105ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80105ee:	fb07 1516 	mls	r5, r7, r6, r1
 80105f2:	3530      	adds	r5, #48	; 0x30
 80105f4:	2a63      	cmp	r2, #99	; 0x63
 80105f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80105fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80105fe:	4631      	mov	r1, r6
 8010600:	dcf1      	bgt.n	80105e6 <__exponent+0x22>
 8010602:	3130      	adds	r1, #48	; 0x30
 8010604:	f1ae 0502 	sub.w	r5, lr, #2
 8010608:	f804 1c01 	strb.w	r1, [r4, #-1]
 801060c:	1c44      	adds	r4, r0, #1
 801060e:	4629      	mov	r1, r5
 8010610:	4561      	cmp	r1, ip
 8010612:	d30a      	bcc.n	801062a <__exponent+0x66>
 8010614:	f10d 0209 	add.w	r2, sp, #9
 8010618:	eba2 020e 	sub.w	r2, r2, lr
 801061c:	4565      	cmp	r5, ip
 801061e:	bf88      	it	hi
 8010620:	2200      	movhi	r2, #0
 8010622:	4413      	add	r3, r2
 8010624:	1a18      	subs	r0, r3, r0
 8010626:	b003      	add	sp, #12
 8010628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801062e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010632:	e7ed      	b.n	8010610 <__exponent+0x4c>
 8010634:	2330      	movs	r3, #48	; 0x30
 8010636:	3130      	adds	r1, #48	; 0x30
 8010638:	7083      	strb	r3, [r0, #2]
 801063a:	70c1      	strb	r1, [r0, #3]
 801063c:	1d03      	adds	r3, r0, #4
 801063e:	e7f1      	b.n	8010624 <__exponent+0x60>

08010640 <_printf_float>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	ed2d 8b02 	vpush	{d8}
 8010648:	b08d      	sub	sp, #52	; 0x34
 801064a:	460c      	mov	r4, r1
 801064c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010650:	4616      	mov	r6, r2
 8010652:	461f      	mov	r7, r3
 8010654:	4605      	mov	r5, r0
 8010656:	f001 fd3d 	bl	80120d4 <_localeconv_r>
 801065a:	f8d0 a000 	ldr.w	sl, [r0]
 801065e:	4650      	mov	r0, sl
 8010660:	f7ef fdd6 	bl	8000210 <strlen>
 8010664:	2300      	movs	r3, #0
 8010666:	930a      	str	r3, [sp, #40]	; 0x28
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	9305      	str	r3, [sp, #20]
 801066c:	f8d8 3000 	ldr.w	r3, [r8]
 8010670:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010674:	3307      	adds	r3, #7
 8010676:	f023 0307 	bic.w	r3, r3, #7
 801067a:	f103 0208 	add.w	r2, r3, #8
 801067e:	f8c8 2000 	str.w	r2, [r8]
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801068a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801068e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010692:	9307      	str	r3, [sp, #28]
 8010694:	f8cd 8018 	str.w	r8, [sp, #24]
 8010698:	ee08 0a10 	vmov	s16, r0
 801069c:	4b9f      	ldr	r3, [pc, #636]	; (801091c <_printf_float+0x2dc>)
 801069e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106a6:	f7f0 fa61 	bl	8000b6c <__aeabi_dcmpun>
 80106aa:	bb88      	cbnz	r0, 8010710 <_printf_float+0xd0>
 80106ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106b0:	4b9a      	ldr	r3, [pc, #616]	; (801091c <_printf_float+0x2dc>)
 80106b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106b6:	f7f0 fa3b 	bl	8000b30 <__aeabi_dcmple>
 80106ba:	bb48      	cbnz	r0, 8010710 <_printf_float+0xd0>
 80106bc:	2200      	movs	r2, #0
 80106be:	2300      	movs	r3, #0
 80106c0:	4640      	mov	r0, r8
 80106c2:	4649      	mov	r1, r9
 80106c4:	f7f0 fa2a 	bl	8000b1c <__aeabi_dcmplt>
 80106c8:	b110      	cbz	r0, 80106d0 <_printf_float+0x90>
 80106ca:	232d      	movs	r3, #45	; 0x2d
 80106cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106d0:	4b93      	ldr	r3, [pc, #588]	; (8010920 <_printf_float+0x2e0>)
 80106d2:	4894      	ldr	r0, [pc, #592]	; (8010924 <_printf_float+0x2e4>)
 80106d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80106d8:	bf94      	ite	ls
 80106da:	4698      	movls	r8, r3
 80106dc:	4680      	movhi	r8, r0
 80106de:	2303      	movs	r3, #3
 80106e0:	6123      	str	r3, [r4, #16]
 80106e2:	9b05      	ldr	r3, [sp, #20]
 80106e4:	f023 0204 	bic.w	r2, r3, #4
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	f04f 0900 	mov.w	r9, #0
 80106ee:	9700      	str	r7, [sp, #0]
 80106f0:	4633      	mov	r3, r6
 80106f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80106f4:	4621      	mov	r1, r4
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 f9d8 	bl	8010aac <_printf_common>
 80106fc:	3001      	adds	r0, #1
 80106fe:	f040 8090 	bne.w	8010822 <_printf_float+0x1e2>
 8010702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010706:	b00d      	add	sp, #52	; 0x34
 8010708:	ecbd 8b02 	vpop	{d8}
 801070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010710:	4642      	mov	r2, r8
 8010712:	464b      	mov	r3, r9
 8010714:	4640      	mov	r0, r8
 8010716:	4649      	mov	r1, r9
 8010718:	f7f0 fa28 	bl	8000b6c <__aeabi_dcmpun>
 801071c:	b140      	cbz	r0, 8010730 <_printf_float+0xf0>
 801071e:	464b      	mov	r3, r9
 8010720:	2b00      	cmp	r3, #0
 8010722:	bfbc      	itt	lt
 8010724:	232d      	movlt	r3, #45	; 0x2d
 8010726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801072a:	487f      	ldr	r0, [pc, #508]	; (8010928 <_printf_float+0x2e8>)
 801072c:	4b7f      	ldr	r3, [pc, #508]	; (801092c <_printf_float+0x2ec>)
 801072e:	e7d1      	b.n	80106d4 <_printf_float+0x94>
 8010730:	6863      	ldr	r3, [r4, #4]
 8010732:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010736:	9206      	str	r2, [sp, #24]
 8010738:	1c5a      	adds	r2, r3, #1
 801073a:	d13f      	bne.n	80107bc <_printf_float+0x17c>
 801073c:	2306      	movs	r3, #6
 801073e:	6063      	str	r3, [r4, #4]
 8010740:	9b05      	ldr	r3, [sp, #20]
 8010742:	6861      	ldr	r1, [r4, #4]
 8010744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010748:	2300      	movs	r3, #0
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	ab0a      	add	r3, sp, #40	; 0x28
 801074e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010752:	ab09      	add	r3, sp, #36	; 0x24
 8010754:	ec49 8b10 	vmov	d0, r8, r9
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	6022      	str	r2, [r4, #0]
 801075c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010760:	4628      	mov	r0, r5
 8010762:	f7ff fecd 	bl	8010500 <__cvt>
 8010766:	9b06      	ldr	r3, [sp, #24]
 8010768:	9909      	ldr	r1, [sp, #36]	; 0x24
 801076a:	2b47      	cmp	r3, #71	; 0x47
 801076c:	4680      	mov	r8, r0
 801076e:	d108      	bne.n	8010782 <_printf_float+0x142>
 8010770:	1cc8      	adds	r0, r1, #3
 8010772:	db02      	blt.n	801077a <_printf_float+0x13a>
 8010774:	6863      	ldr	r3, [r4, #4]
 8010776:	4299      	cmp	r1, r3
 8010778:	dd41      	ble.n	80107fe <_printf_float+0x1be>
 801077a:	f1ab 0b02 	sub.w	fp, fp, #2
 801077e:	fa5f fb8b 	uxtb.w	fp, fp
 8010782:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010786:	d820      	bhi.n	80107ca <_printf_float+0x18a>
 8010788:	3901      	subs	r1, #1
 801078a:	465a      	mov	r2, fp
 801078c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010790:	9109      	str	r1, [sp, #36]	; 0x24
 8010792:	f7ff ff17 	bl	80105c4 <__exponent>
 8010796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010798:	1813      	adds	r3, r2, r0
 801079a:	2a01      	cmp	r2, #1
 801079c:	4681      	mov	r9, r0
 801079e:	6123      	str	r3, [r4, #16]
 80107a0:	dc02      	bgt.n	80107a8 <_printf_float+0x168>
 80107a2:	6822      	ldr	r2, [r4, #0]
 80107a4:	07d2      	lsls	r2, r2, #31
 80107a6:	d501      	bpl.n	80107ac <_printf_float+0x16c>
 80107a8:	3301      	adds	r3, #1
 80107aa:	6123      	str	r3, [r4, #16]
 80107ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d09c      	beq.n	80106ee <_printf_float+0xae>
 80107b4:	232d      	movs	r3, #45	; 0x2d
 80107b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107ba:	e798      	b.n	80106ee <_printf_float+0xae>
 80107bc:	9a06      	ldr	r2, [sp, #24]
 80107be:	2a47      	cmp	r2, #71	; 0x47
 80107c0:	d1be      	bne.n	8010740 <_printf_float+0x100>
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1bc      	bne.n	8010740 <_printf_float+0x100>
 80107c6:	2301      	movs	r3, #1
 80107c8:	e7b9      	b.n	801073e <_printf_float+0xfe>
 80107ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80107ce:	d118      	bne.n	8010802 <_printf_float+0x1c2>
 80107d0:	2900      	cmp	r1, #0
 80107d2:	6863      	ldr	r3, [r4, #4]
 80107d4:	dd0b      	ble.n	80107ee <_printf_float+0x1ae>
 80107d6:	6121      	str	r1, [r4, #16]
 80107d8:	b913      	cbnz	r3, 80107e0 <_printf_float+0x1a0>
 80107da:	6822      	ldr	r2, [r4, #0]
 80107dc:	07d0      	lsls	r0, r2, #31
 80107de:	d502      	bpl.n	80107e6 <_printf_float+0x1a6>
 80107e0:	3301      	adds	r3, #1
 80107e2:	440b      	add	r3, r1
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80107e8:	f04f 0900 	mov.w	r9, #0
 80107ec:	e7de      	b.n	80107ac <_printf_float+0x16c>
 80107ee:	b913      	cbnz	r3, 80107f6 <_printf_float+0x1b6>
 80107f0:	6822      	ldr	r2, [r4, #0]
 80107f2:	07d2      	lsls	r2, r2, #31
 80107f4:	d501      	bpl.n	80107fa <_printf_float+0x1ba>
 80107f6:	3302      	adds	r3, #2
 80107f8:	e7f4      	b.n	80107e4 <_printf_float+0x1a4>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e7f2      	b.n	80107e4 <_printf_float+0x1a4>
 80107fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010804:	4299      	cmp	r1, r3
 8010806:	db05      	blt.n	8010814 <_printf_float+0x1d4>
 8010808:	6823      	ldr	r3, [r4, #0]
 801080a:	6121      	str	r1, [r4, #16]
 801080c:	07d8      	lsls	r0, r3, #31
 801080e:	d5ea      	bpl.n	80107e6 <_printf_float+0x1a6>
 8010810:	1c4b      	adds	r3, r1, #1
 8010812:	e7e7      	b.n	80107e4 <_printf_float+0x1a4>
 8010814:	2900      	cmp	r1, #0
 8010816:	bfd4      	ite	le
 8010818:	f1c1 0202 	rsble	r2, r1, #2
 801081c:	2201      	movgt	r2, #1
 801081e:	4413      	add	r3, r2
 8010820:	e7e0      	b.n	80107e4 <_printf_float+0x1a4>
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	055a      	lsls	r2, r3, #21
 8010826:	d407      	bmi.n	8010838 <_printf_float+0x1f8>
 8010828:	6923      	ldr	r3, [r4, #16]
 801082a:	4642      	mov	r2, r8
 801082c:	4631      	mov	r1, r6
 801082e:	4628      	mov	r0, r5
 8010830:	47b8      	blx	r7
 8010832:	3001      	adds	r0, #1
 8010834:	d12c      	bne.n	8010890 <_printf_float+0x250>
 8010836:	e764      	b.n	8010702 <_printf_float+0xc2>
 8010838:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801083c:	f240 80e0 	bls.w	8010a00 <_printf_float+0x3c0>
 8010840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010844:	2200      	movs	r2, #0
 8010846:	2300      	movs	r3, #0
 8010848:	f7f0 f95e 	bl	8000b08 <__aeabi_dcmpeq>
 801084c:	2800      	cmp	r0, #0
 801084e:	d034      	beq.n	80108ba <_printf_float+0x27a>
 8010850:	4a37      	ldr	r2, [pc, #220]	; (8010930 <_printf_float+0x2f0>)
 8010852:	2301      	movs	r3, #1
 8010854:	4631      	mov	r1, r6
 8010856:	4628      	mov	r0, r5
 8010858:	47b8      	blx	r7
 801085a:	3001      	adds	r0, #1
 801085c:	f43f af51 	beq.w	8010702 <_printf_float+0xc2>
 8010860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010864:	429a      	cmp	r2, r3
 8010866:	db02      	blt.n	801086e <_printf_float+0x22e>
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	07d8      	lsls	r0, r3, #31
 801086c:	d510      	bpl.n	8010890 <_printf_float+0x250>
 801086e:	ee18 3a10 	vmov	r3, s16
 8010872:	4652      	mov	r2, sl
 8010874:	4631      	mov	r1, r6
 8010876:	4628      	mov	r0, r5
 8010878:	47b8      	blx	r7
 801087a:	3001      	adds	r0, #1
 801087c:	f43f af41 	beq.w	8010702 <_printf_float+0xc2>
 8010880:	f04f 0800 	mov.w	r8, #0
 8010884:	f104 091a 	add.w	r9, r4, #26
 8010888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801088a:	3b01      	subs	r3, #1
 801088c:	4543      	cmp	r3, r8
 801088e:	dc09      	bgt.n	80108a4 <_printf_float+0x264>
 8010890:	6823      	ldr	r3, [r4, #0]
 8010892:	079b      	lsls	r3, r3, #30
 8010894:	f100 8105 	bmi.w	8010aa2 <_printf_float+0x462>
 8010898:	68e0      	ldr	r0, [r4, #12]
 801089a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801089c:	4298      	cmp	r0, r3
 801089e:	bfb8      	it	lt
 80108a0:	4618      	movlt	r0, r3
 80108a2:	e730      	b.n	8010706 <_printf_float+0xc6>
 80108a4:	2301      	movs	r3, #1
 80108a6:	464a      	mov	r2, r9
 80108a8:	4631      	mov	r1, r6
 80108aa:	4628      	mov	r0, r5
 80108ac:	47b8      	blx	r7
 80108ae:	3001      	adds	r0, #1
 80108b0:	f43f af27 	beq.w	8010702 <_printf_float+0xc2>
 80108b4:	f108 0801 	add.w	r8, r8, #1
 80108b8:	e7e6      	b.n	8010888 <_printf_float+0x248>
 80108ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dc39      	bgt.n	8010934 <_printf_float+0x2f4>
 80108c0:	4a1b      	ldr	r2, [pc, #108]	; (8010930 <_printf_float+0x2f0>)
 80108c2:	2301      	movs	r3, #1
 80108c4:	4631      	mov	r1, r6
 80108c6:	4628      	mov	r0, r5
 80108c8:	47b8      	blx	r7
 80108ca:	3001      	adds	r0, #1
 80108cc:	f43f af19 	beq.w	8010702 <_printf_float+0xc2>
 80108d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108d4:	4313      	orrs	r3, r2
 80108d6:	d102      	bne.n	80108de <_printf_float+0x29e>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	07d9      	lsls	r1, r3, #31
 80108dc:	d5d8      	bpl.n	8010890 <_printf_float+0x250>
 80108de:	ee18 3a10 	vmov	r3, s16
 80108e2:	4652      	mov	r2, sl
 80108e4:	4631      	mov	r1, r6
 80108e6:	4628      	mov	r0, r5
 80108e8:	47b8      	blx	r7
 80108ea:	3001      	adds	r0, #1
 80108ec:	f43f af09 	beq.w	8010702 <_printf_float+0xc2>
 80108f0:	f04f 0900 	mov.w	r9, #0
 80108f4:	f104 0a1a 	add.w	sl, r4, #26
 80108f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108fa:	425b      	negs	r3, r3
 80108fc:	454b      	cmp	r3, r9
 80108fe:	dc01      	bgt.n	8010904 <_printf_float+0x2c4>
 8010900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010902:	e792      	b.n	801082a <_printf_float+0x1ea>
 8010904:	2301      	movs	r3, #1
 8010906:	4652      	mov	r2, sl
 8010908:	4631      	mov	r1, r6
 801090a:	4628      	mov	r0, r5
 801090c:	47b8      	blx	r7
 801090e:	3001      	adds	r0, #1
 8010910:	f43f aef7 	beq.w	8010702 <_printf_float+0xc2>
 8010914:	f109 0901 	add.w	r9, r9, #1
 8010918:	e7ee      	b.n	80108f8 <_printf_float+0x2b8>
 801091a:	bf00      	nop
 801091c:	7fefffff 	.word	0x7fefffff
 8010920:	08018454 	.word	0x08018454
 8010924:	08018458 	.word	0x08018458
 8010928:	08018460 	.word	0x08018460
 801092c:	0801845c 	.word	0x0801845c
 8010930:	08018464 	.word	0x08018464
 8010934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010938:	429a      	cmp	r2, r3
 801093a:	bfa8      	it	ge
 801093c:	461a      	movge	r2, r3
 801093e:	2a00      	cmp	r2, #0
 8010940:	4691      	mov	r9, r2
 8010942:	dc37      	bgt.n	80109b4 <_printf_float+0x374>
 8010944:	f04f 0b00 	mov.w	fp, #0
 8010948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801094c:	f104 021a 	add.w	r2, r4, #26
 8010950:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010952:	9305      	str	r3, [sp, #20]
 8010954:	eba3 0309 	sub.w	r3, r3, r9
 8010958:	455b      	cmp	r3, fp
 801095a:	dc33      	bgt.n	80109c4 <_printf_float+0x384>
 801095c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010960:	429a      	cmp	r2, r3
 8010962:	db3b      	blt.n	80109dc <_printf_float+0x39c>
 8010964:	6823      	ldr	r3, [r4, #0]
 8010966:	07da      	lsls	r2, r3, #31
 8010968:	d438      	bmi.n	80109dc <_printf_float+0x39c>
 801096a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801096c:	9b05      	ldr	r3, [sp, #20]
 801096e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	eba2 0901 	sub.w	r9, r2, r1
 8010976:	4599      	cmp	r9, r3
 8010978:	bfa8      	it	ge
 801097a:	4699      	movge	r9, r3
 801097c:	f1b9 0f00 	cmp.w	r9, #0
 8010980:	dc35      	bgt.n	80109ee <_printf_float+0x3ae>
 8010982:	f04f 0800 	mov.w	r8, #0
 8010986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801098a:	f104 0a1a 	add.w	sl, r4, #26
 801098e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010992:	1a9b      	subs	r3, r3, r2
 8010994:	eba3 0309 	sub.w	r3, r3, r9
 8010998:	4543      	cmp	r3, r8
 801099a:	f77f af79 	ble.w	8010890 <_printf_float+0x250>
 801099e:	2301      	movs	r3, #1
 80109a0:	4652      	mov	r2, sl
 80109a2:	4631      	mov	r1, r6
 80109a4:	4628      	mov	r0, r5
 80109a6:	47b8      	blx	r7
 80109a8:	3001      	adds	r0, #1
 80109aa:	f43f aeaa 	beq.w	8010702 <_printf_float+0xc2>
 80109ae:	f108 0801 	add.w	r8, r8, #1
 80109b2:	e7ec      	b.n	801098e <_printf_float+0x34e>
 80109b4:	4613      	mov	r3, r2
 80109b6:	4631      	mov	r1, r6
 80109b8:	4642      	mov	r2, r8
 80109ba:	4628      	mov	r0, r5
 80109bc:	47b8      	blx	r7
 80109be:	3001      	adds	r0, #1
 80109c0:	d1c0      	bne.n	8010944 <_printf_float+0x304>
 80109c2:	e69e      	b.n	8010702 <_printf_float+0xc2>
 80109c4:	2301      	movs	r3, #1
 80109c6:	4631      	mov	r1, r6
 80109c8:	4628      	mov	r0, r5
 80109ca:	9205      	str	r2, [sp, #20]
 80109cc:	47b8      	blx	r7
 80109ce:	3001      	adds	r0, #1
 80109d0:	f43f ae97 	beq.w	8010702 <_printf_float+0xc2>
 80109d4:	9a05      	ldr	r2, [sp, #20]
 80109d6:	f10b 0b01 	add.w	fp, fp, #1
 80109da:	e7b9      	b.n	8010950 <_printf_float+0x310>
 80109dc:	ee18 3a10 	vmov	r3, s16
 80109e0:	4652      	mov	r2, sl
 80109e2:	4631      	mov	r1, r6
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b8      	blx	r7
 80109e8:	3001      	adds	r0, #1
 80109ea:	d1be      	bne.n	801096a <_printf_float+0x32a>
 80109ec:	e689      	b.n	8010702 <_printf_float+0xc2>
 80109ee:	9a05      	ldr	r2, [sp, #20]
 80109f0:	464b      	mov	r3, r9
 80109f2:	4442      	add	r2, r8
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	d1c1      	bne.n	8010982 <_printf_float+0x342>
 80109fe:	e680      	b.n	8010702 <_printf_float+0xc2>
 8010a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a02:	2a01      	cmp	r2, #1
 8010a04:	dc01      	bgt.n	8010a0a <_printf_float+0x3ca>
 8010a06:	07db      	lsls	r3, r3, #31
 8010a08:	d538      	bpl.n	8010a7c <_printf_float+0x43c>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	4642      	mov	r2, r8
 8010a0e:	4631      	mov	r1, r6
 8010a10:	4628      	mov	r0, r5
 8010a12:	47b8      	blx	r7
 8010a14:	3001      	adds	r0, #1
 8010a16:	f43f ae74 	beq.w	8010702 <_printf_float+0xc2>
 8010a1a:	ee18 3a10 	vmov	r3, s16
 8010a1e:	4652      	mov	r2, sl
 8010a20:	4631      	mov	r1, r6
 8010a22:	4628      	mov	r0, r5
 8010a24:	47b8      	blx	r7
 8010a26:	3001      	adds	r0, #1
 8010a28:	f43f ae6b 	beq.w	8010702 <_printf_float+0xc2>
 8010a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a30:	2200      	movs	r2, #0
 8010a32:	2300      	movs	r3, #0
 8010a34:	f7f0 f868 	bl	8000b08 <__aeabi_dcmpeq>
 8010a38:	b9d8      	cbnz	r0, 8010a72 <_printf_float+0x432>
 8010a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a3c:	f108 0201 	add.w	r2, r8, #1
 8010a40:	3b01      	subs	r3, #1
 8010a42:	4631      	mov	r1, r6
 8010a44:	4628      	mov	r0, r5
 8010a46:	47b8      	blx	r7
 8010a48:	3001      	adds	r0, #1
 8010a4a:	d10e      	bne.n	8010a6a <_printf_float+0x42a>
 8010a4c:	e659      	b.n	8010702 <_printf_float+0xc2>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4652      	mov	r2, sl
 8010a52:	4631      	mov	r1, r6
 8010a54:	4628      	mov	r0, r5
 8010a56:	47b8      	blx	r7
 8010a58:	3001      	adds	r0, #1
 8010a5a:	f43f ae52 	beq.w	8010702 <_printf_float+0xc2>
 8010a5e:	f108 0801 	add.w	r8, r8, #1
 8010a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a64:	3b01      	subs	r3, #1
 8010a66:	4543      	cmp	r3, r8
 8010a68:	dcf1      	bgt.n	8010a4e <_printf_float+0x40e>
 8010a6a:	464b      	mov	r3, r9
 8010a6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010a70:	e6dc      	b.n	801082c <_printf_float+0x1ec>
 8010a72:	f04f 0800 	mov.w	r8, #0
 8010a76:	f104 0a1a 	add.w	sl, r4, #26
 8010a7a:	e7f2      	b.n	8010a62 <_printf_float+0x422>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	4642      	mov	r2, r8
 8010a80:	e7df      	b.n	8010a42 <_printf_float+0x402>
 8010a82:	2301      	movs	r3, #1
 8010a84:	464a      	mov	r2, r9
 8010a86:	4631      	mov	r1, r6
 8010a88:	4628      	mov	r0, r5
 8010a8a:	47b8      	blx	r7
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	f43f ae38 	beq.w	8010702 <_printf_float+0xc2>
 8010a92:	f108 0801 	add.w	r8, r8, #1
 8010a96:	68e3      	ldr	r3, [r4, #12]
 8010a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a9a:	1a5b      	subs	r3, r3, r1
 8010a9c:	4543      	cmp	r3, r8
 8010a9e:	dcf0      	bgt.n	8010a82 <_printf_float+0x442>
 8010aa0:	e6fa      	b.n	8010898 <_printf_float+0x258>
 8010aa2:	f04f 0800 	mov.w	r8, #0
 8010aa6:	f104 0919 	add.w	r9, r4, #25
 8010aaa:	e7f4      	b.n	8010a96 <_printf_float+0x456>

08010aac <_printf_common>:
 8010aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab0:	4616      	mov	r6, r2
 8010ab2:	4699      	mov	r9, r3
 8010ab4:	688a      	ldr	r2, [r1, #8]
 8010ab6:	690b      	ldr	r3, [r1, #16]
 8010ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010abc:	4293      	cmp	r3, r2
 8010abe:	bfb8      	it	lt
 8010ac0:	4613      	movlt	r3, r2
 8010ac2:	6033      	str	r3, [r6, #0]
 8010ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ac8:	4607      	mov	r7, r0
 8010aca:	460c      	mov	r4, r1
 8010acc:	b10a      	cbz	r2, 8010ad2 <_printf_common+0x26>
 8010ace:	3301      	adds	r3, #1
 8010ad0:	6033      	str	r3, [r6, #0]
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	0699      	lsls	r1, r3, #26
 8010ad6:	bf42      	ittt	mi
 8010ad8:	6833      	ldrmi	r3, [r6, #0]
 8010ada:	3302      	addmi	r3, #2
 8010adc:	6033      	strmi	r3, [r6, #0]
 8010ade:	6825      	ldr	r5, [r4, #0]
 8010ae0:	f015 0506 	ands.w	r5, r5, #6
 8010ae4:	d106      	bne.n	8010af4 <_printf_common+0x48>
 8010ae6:	f104 0a19 	add.w	sl, r4, #25
 8010aea:	68e3      	ldr	r3, [r4, #12]
 8010aec:	6832      	ldr	r2, [r6, #0]
 8010aee:	1a9b      	subs	r3, r3, r2
 8010af0:	42ab      	cmp	r3, r5
 8010af2:	dc26      	bgt.n	8010b42 <_printf_common+0x96>
 8010af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010af8:	1e13      	subs	r3, r2, #0
 8010afa:	6822      	ldr	r2, [r4, #0]
 8010afc:	bf18      	it	ne
 8010afe:	2301      	movne	r3, #1
 8010b00:	0692      	lsls	r2, r2, #26
 8010b02:	d42b      	bmi.n	8010b5c <_printf_common+0xb0>
 8010b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b08:	4649      	mov	r1, r9
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	47c0      	blx	r8
 8010b0e:	3001      	adds	r0, #1
 8010b10:	d01e      	beq.n	8010b50 <_printf_common+0xa4>
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	68e5      	ldr	r5, [r4, #12]
 8010b16:	6832      	ldr	r2, [r6, #0]
 8010b18:	f003 0306 	and.w	r3, r3, #6
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	bf08      	it	eq
 8010b20:	1aad      	subeq	r5, r5, r2
 8010b22:	68a3      	ldr	r3, [r4, #8]
 8010b24:	6922      	ldr	r2, [r4, #16]
 8010b26:	bf0c      	ite	eq
 8010b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b2c:	2500      	movne	r5, #0
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	bfc4      	itt	gt
 8010b32:	1a9b      	subgt	r3, r3, r2
 8010b34:	18ed      	addgt	r5, r5, r3
 8010b36:	2600      	movs	r6, #0
 8010b38:	341a      	adds	r4, #26
 8010b3a:	42b5      	cmp	r5, r6
 8010b3c:	d11a      	bne.n	8010b74 <_printf_common+0xc8>
 8010b3e:	2000      	movs	r0, #0
 8010b40:	e008      	b.n	8010b54 <_printf_common+0xa8>
 8010b42:	2301      	movs	r3, #1
 8010b44:	4652      	mov	r2, sl
 8010b46:	4649      	mov	r1, r9
 8010b48:	4638      	mov	r0, r7
 8010b4a:	47c0      	blx	r8
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	d103      	bne.n	8010b58 <_printf_common+0xac>
 8010b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b58:	3501      	adds	r5, #1
 8010b5a:	e7c6      	b.n	8010aea <_printf_common+0x3e>
 8010b5c:	18e1      	adds	r1, r4, r3
 8010b5e:	1c5a      	adds	r2, r3, #1
 8010b60:	2030      	movs	r0, #48	; 0x30
 8010b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b66:	4422      	add	r2, r4
 8010b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b70:	3302      	adds	r3, #2
 8010b72:	e7c7      	b.n	8010b04 <_printf_common+0x58>
 8010b74:	2301      	movs	r3, #1
 8010b76:	4622      	mov	r2, r4
 8010b78:	4649      	mov	r1, r9
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	47c0      	blx	r8
 8010b7e:	3001      	adds	r0, #1
 8010b80:	d0e6      	beq.n	8010b50 <_printf_common+0xa4>
 8010b82:	3601      	adds	r6, #1
 8010b84:	e7d9      	b.n	8010b3a <_printf_common+0x8e>
	...

08010b88 <_printf_i>:
 8010b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	4691      	mov	r9, r2
 8010b90:	7e27      	ldrb	r7, [r4, #24]
 8010b92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b94:	2f78      	cmp	r7, #120	; 0x78
 8010b96:	4680      	mov	r8, r0
 8010b98:	469a      	mov	sl, r3
 8010b9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b9e:	d807      	bhi.n	8010bb0 <_printf_i+0x28>
 8010ba0:	2f62      	cmp	r7, #98	; 0x62
 8010ba2:	d80a      	bhi.n	8010bba <_printf_i+0x32>
 8010ba4:	2f00      	cmp	r7, #0
 8010ba6:	f000 80d8 	beq.w	8010d5a <_printf_i+0x1d2>
 8010baa:	2f58      	cmp	r7, #88	; 0x58
 8010bac:	f000 80a3 	beq.w	8010cf6 <_printf_i+0x16e>
 8010bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010bb8:	e03a      	b.n	8010c30 <_printf_i+0xa8>
 8010bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010bbe:	2b15      	cmp	r3, #21
 8010bc0:	d8f6      	bhi.n	8010bb0 <_printf_i+0x28>
 8010bc2:	a001      	add	r0, pc, #4	; (adr r0, 8010bc8 <_printf_i+0x40>)
 8010bc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010bc8:	08010c21 	.word	0x08010c21
 8010bcc:	08010c35 	.word	0x08010c35
 8010bd0:	08010bb1 	.word	0x08010bb1
 8010bd4:	08010bb1 	.word	0x08010bb1
 8010bd8:	08010bb1 	.word	0x08010bb1
 8010bdc:	08010bb1 	.word	0x08010bb1
 8010be0:	08010c35 	.word	0x08010c35
 8010be4:	08010bb1 	.word	0x08010bb1
 8010be8:	08010bb1 	.word	0x08010bb1
 8010bec:	08010bb1 	.word	0x08010bb1
 8010bf0:	08010bb1 	.word	0x08010bb1
 8010bf4:	08010d41 	.word	0x08010d41
 8010bf8:	08010c65 	.word	0x08010c65
 8010bfc:	08010d23 	.word	0x08010d23
 8010c00:	08010bb1 	.word	0x08010bb1
 8010c04:	08010bb1 	.word	0x08010bb1
 8010c08:	08010d63 	.word	0x08010d63
 8010c0c:	08010bb1 	.word	0x08010bb1
 8010c10:	08010c65 	.word	0x08010c65
 8010c14:	08010bb1 	.word	0x08010bb1
 8010c18:	08010bb1 	.word	0x08010bb1
 8010c1c:	08010d2b 	.word	0x08010d2b
 8010c20:	680b      	ldr	r3, [r1, #0]
 8010c22:	1d1a      	adds	r2, r3, #4
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	600a      	str	r2, [r1, #0]
 8010c28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c30:	2301      	movs	r3, #1
 8010c32:	e0a3      	b.n	8010d7c <_printf_i+0x1f4>
 8010c34:	6825      	ldr	r5, [r4, #0]
 8010c36:	6808      	ldr	r0, [r1, #0]
 8010c38:	062e      	lsls	r6, r5, #24
 8010c3a:	f100 0304 	add.w	r3, r0, #4
 8010c3e:	d50a      	bpl.n	8010c56 <_printf_i+0xce>
 8010c40:	6805      	ldr	r5, [r0, #0]
 8010c42:	600b      	str	r3, [r1, #0]
 8010c44:	2d00      	cmp	r5, #0
 8010c46:	da03      	bge.n	8010c50 <_printf_i+0xc8>
 8010c48:	232d      	movs	r3, #45	; 0x2d
 8010c4a:	426d      	negs	r5, r5
 8010c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c50:	485e      	ldr	r0, [pc, #376]	; (8010dcc <_printf_i+0x244>)
 8010c52:	230a      	movs	r3, #10
 8010c54:	e019      	b.n	8010c8a <_printf_i+0x102>
 8010c56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010c5a:	6805      	ldr	r5, [r0, #0]
 8010c5c:	600b      	str	r3, [r1, #0]
 8010c5e:	bf18      	it	ne
 8010c60:	b22d      	sxthne	r5, r5
 8010c62:	e7ef      	b.n	8010c44 <_printf_i+0xbc>
 8010c64:	680b      	ldr	r3, [r1, #0]
 8010c66:	6825      	ldr	r5, [r4, #0]
 8010c68:	1d18      	adds	r0, r3, #4
 8010c6a:	6008      	str	r0, [r1, #0]
 8010c6c:	0628      	lsls	r0, r5, #24
 8010c6e:	d501      	bpl.n	8010c74 <_printf_i+0xec>
 8010c70:	681d      	ldr	r5, [r3, #0]
 8010c72:	e002      	b.n	8010c7a <_printf_i+0xf2>
 8010c74:	0669      	lsls	r1, r5, #25
 8010c76:	d5fb      	bpl.n	8010c70 <_printf_i+0xe8>
 8010c78:	881d      	ldrh	r5, [r3, #0]
 8010c7a:	4854      	ldr	r0, [pc, #336]	; (8010dcc <_printf_i+0x244>)
 8010c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8010c7e:	bf0c      	ite	eq
 8010c80:	2308      	moveq	r3, #8
 8010c82:	230a      	movne	r3, #10
 8010c84:	2100      	movs	r1, #0
 8010c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c8a:	6866      	ldr	r6, [r4, #4]
 8010c8c:	60a6      	str	r6, [r4, #8]
 8010c8e:	2e00      	cmp	r6, #0
 8010c90:	bfa2      	ittt	ge
 8010c92:	6821      	ldrge	r1, [r4, #0]
 8010c94:	f021 0104 	bicge.w	r1, r1, #4
 8010c98:	6021      	strge	r1, [r4, #0]
 8010c9a:	b90d      	cbnz	r5, 8010ca0 <_printf_i+0x118>
 8010c9c:	2e00      	cmp	r6, #0
 8010c9e:	d04d      	beq.n	8010d3c <_printf_i+0x1b4>
 8010ca0:	4616      	mov	r6, r2
 8010ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8010caa:	5dc7      	ldrb	r7, [r0, r7]
 8010cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010cb0:	462f      	mov	r7, r5
 8010cb2:	42bb      	cmp	r3, r7
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	d9f4      	bls.n	8010ca2 <_printf_i+0x11a>
 8010cb8:	2b08      	cmp	r3, #8
 8010cba:	d10b      	bne.n	8010cd4 <_printf_i+0x14c>
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	07df      	lsls	r7, r3, #31
 8010cc0:	d508      	bpl.n	8010cd4 <_printf_i+0x14c>
 8010cc2:	6923      	ldr	r3, [r4, #16]
 8010cc4:	6861      	ldr	r1, [r4, #4]
 8010cc6:	4299      	cmp	r1, r3
 8010cc8:	bfde      	ittt	le
 8010cca:	2330      	movle	r3, #48	; 0x30
 8010ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010cd0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010cd4:	1b92      	subs	r2, r2, r6
 8010cd6:	6122      	str	r2, [r4, #16]
 8010cd8:	f8cd a000 	str.w	sl, [sp]
 8010cdc:	464b      	mov	r3, r9
 8010cde:	aa03      	add	r2, sp, #12
 8010ce0:	4621      	mov	r1, r4
 8010ce2:	4640      	mov	r0, r8
 8010ce4:	f7ff fee2 	bl	8010aac <_printf_common>
 8010ce8:	3001      	adds	r0, #1
 8010cea:	d14c      	bne.n	8010d86 <_printf_i+0x1fe>
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cf0:	b004      	add	sp, #16
 8010cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf6:	4835      	ldr	r0, [pc, #212]	; (8010dcc <_printf_i+0x244>)
 8010cf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010cfc:	6823      	ldr	r3, [r4, #0]
 8010cfe:	680e      	ldr	r6, [r1, #0]
 8010d00:	061f      	lsls	r7, r3, #24
 8010d02:	f856 5b04 	ldr.w	r5, [r6], #4
 8010d06:	600e      	str	r6, [r1, #0]
 8010d08:	d514      	bpl.n	8010d34 <_printf_i+0x1ac>
 8010d0a:	07d9      	lsls	r1, r3, #31
 8010d0c:	bf44      	itt	mi
 8010d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8010d12:	6023      	strmi	r3, [r4, #0]
 8010d14:	b91d      	cbnz	r5, 8010d1e <_printf_i+0x196>
 8010d16:	6823      	ldr	r3, [r4, #0]
 8010d18:	f023 0320 	bic.w	r3, r3, #32
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	2310      	movs	r3, #16
 8010d20:	e7b0      	b.n	8010c84 <_printf_i+0xfc>
 8010d22:	6823      	ldr	r3, [r4, #0]
 8010d24:	f043 0320 	orr.w	r3, r3, #32
 8010d28:	6023      	str	r3, [r4, #0]
 8010d2a:	2378      	movs	r3, #120	; 0x78
 8010d2c:	4828      	ldr	r0, [pc, #160]	; (8010dd0 <_printf_i+0x248>)
 8010d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d32:	e7e3      	b.n	8010cfc <_printf_i+0x174>
 8010d34:	065e      	lsls	r6, r3, #25
 8010d36:	bf48      	it	mi
 8010d38:	b2ad      	uxthmi	r5, r5
 8010d3a:	e7e6      	b.n	8010d0a <_printf_i+0x182>
 8010d3c:	4616      	mov	r6, r2
 8010d3e:	e7bb      	b.n	8010cb8 <_printf_i+0x130>
 8010d40:	680b      	ldr	r3, [r1, #0]
 8010d42:	6826      	ldr	r6, [r4, #0]
 8010d44:	6960      	ldr	r0, [r4, #20]
 8010d46:	1d1d      	adds	r5, r3, #4
 8010d48:	600d      	str	r5, [r1, #0]
 8010d4a:	0635      	lsls	r5, r6, #24
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	d501      	bpl.n	8010d54 <_printf_i+0x1cc>
 8010d50:	6018      	str	r0, [r3, #0]
 8010d52:	e002      	b.n	8010d5a <_printf_i+0x1d2>
 8010d54:	0671      	lsls	r1, r6, #25
 8010d56:	d5fb      	bpl.n	8010d50 <_printf_i+0x1c8>
 8010d58:	8018      	strh	r0, [r3, #0]
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	6123      	str	r3, [r4, #16]
 8010d5e:	4616      	mov	r6, r2
 8010d60:	e7ba      	b.n	8010cd8 <_printf_i+0x150>
 8010d62:	680b      	ldr	r3, [r1, #0]
 8010d64:	1d1a      	adds	r2, r3, #4
 8010d66:	600a      	str	r2, [r1, #0]
 8010d68:	681e      	ldr	r6, [r3, #0]
 8010d6a:	6862      	ldr	r2, [r4, #4]
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7ef fa56 	bl	8000220 <memchr>
 8010d74:	b108      	cbz	r0, 8010d7a <_printf_i+0x1f2>
 8010d76:	1b80      	subs	r0, r0, r6
 8010d78:	6060      	str	r0, [r4, #4]
 8010d7a:	6863      	ldr	r3, [r4, #4]
 8010d7c:	6123      	str	r3, [r4, #16]
 8010d7e:	2300      	movs	r3, #0
 8010d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d84:	e7a8      	b.n	8010cd8 <_printf_i+0x150>
 8010d86:	6923      	ldr	r3, [r4, #16]
 8010d88:	4632      	mov	r2, r6
 8010d8a:	4649      	mov	r1, r9
 8010d8c:	4640      	mov	r0, r8
 8010d8e:	47d0      	blx	sl
 8010d90:	3001      	adds	r0, #1
 8010d92:	d0ab      	beq.n	8010cec <_printf_i+0x164>
 8010d94:	6823      	ldr	r3, [r4, #0]
 8010d96:	079b      	lsls	r3, r3, #30
 8010d98:	d413      	bmi.n	8010dc2 <_printf_i+0x23a>
 8010d9a:	68e0      	ldr	r0, [r4, #12]
 8010d9c:	9b03      	ldr	r3, [sp, #12]
 8010d9e:	4298      	cmp	r0, r3
 8010da0:	bfb8      	it	lt
 8010da2:	4618      	movlt	r0, r3
 8010da4:	e7a4      	b.n	8010cf0 <_printf_i+0x168>
 8010da6:	2301      	movs	r3, #1
 8010da8:	4632      	mov	r2, r6
 8010daa:	4649      	mov	r1, r9
 8010dac:	4640      	mov	r0, r8
 8010dae:	47d0      	blx	sl
 8010db0:	3001      	adds	r0, #1
 8010db2:	d09b      	beq.n	8010cec <_printf_i+0x164>
 8010db4:	3501      	adds	r5, #1
 8010db6:	68e3      	ldr	r3, [r4, #12]
 8010db8:	9903      	ldr	r1, [sp, #12]
 8010dba:	1a5b      	subs	r3, r3, r1
 8010dbc:	42ab      	cmp	r3, r5
 8010dbe:	dcf2      	bgt.n	8010da6 <_printf_i+0x21e>
 8010dc0:	e7eb      	b.n	8010d9a <_printf_i+0x212>
 8010dc2:	2500      	movs	r5, #0
 8010dc4:	f104 0619 	add.w	r6, r4, #25
 8010dc8:	e7f5      	b.n	8010db6 <_printf_i+0x22e>
 8010dca:	bf00      	nop
 8010dcc:	08018466 	.word	0x08018466
 8010dd0:	08018477 	.word	0x08018477

08010dd4 <iprintf>:
 8010dd4:	b40f      	push	{r0, r1, r2, r3}
 8010dd6:	4b0a      	ldr	r3, [pc, #40]	; (8010e00 <iprintf+0x2c>)
 8010dd8:	b513      	push	{r0, r1, r4, lr}
 8010dda:	681c      	ldr	r4, [r3, #0]
 8010ddc:	b124      	cbz	r4, 8010de8 <iprintf+0x14>
 8010dde:	69a3      	ldr	r3, [r4, #24]
 8010de0:	b913      	cbnz	r3, 8010de8 <iprintf+0x14>
 8010de2:	4620      	mov	r0, r4
 8010de4:	f001 f8c6 	bl	8011f74 <__sinit>
 8010de8:	ab05      	add	r3, sp, #20
 8010dea:	9a04      	ldr	r2, [sp, #16]
 8010dec:	68a1      	ldr	r1, [r4, #8]
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	4620      	mov	r0, r4
 8010df2:	f001 ff1f 	bl	8012c34 <_vfiprintf_r>
 8010df6:	b002      	add	sp, #8
 8010df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dfc:	b004      	add	sp, #16
 8010dfe:	4770      	bx	lr
 8010e00:	2000076c 	.word	0x2000076c

08010e04 <putchar>:
 8010e04:	4b09      	ldr	r3, [pc, #36]	; (8010e2c <putchar+0x28>)
 8010e06:	b513      	push	{r0, r1, r4, lr}
 8010e08:	681c      	ldr	r4, [r3, #0]
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	b134      	cbz	r4, 8010e1c <putchar+0x18>
 8010e0e:	69a3      	ldr	r3, [r4, #24]
 8010e10:	b923      	cbnz	r3, 8010e1c <putchar+0x18>
 8010e12:	9001      	str	r0, [sp, #4]
 8010e14:	4620      	mov	r0, r4
 8010e16:	f001 f8ad 	bl	8011f74 <__sinit>
 8010e1a:	9901      	ldr	r1, [sp, #4]
 8010e1c:	68a2      	ldr	r2, [r4, #8]
 8010e1e:	4620      	mov	r0, r4
 8010e20:	b002      	add	sp, #8
 8010e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e26:	f002 b835 	b.w	8012e94 <_putc_r>
 8010e2a:	bf00      	nop
 8010e2c:	2000076c 	.word	0x2000076c

08010e30 <_sbrk_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d06      	ldr	r5, [pc, #24]	; (8010e4c <_sbrk_r+0x1c>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	602b      	str	r3, [r5, #0]
 8010e3c:	f7f2 fd88 	bl	8003950 <_sbrk>
 8010e40:	1c43      	adds	r3, r0, #1
 8010e42:	d102      	bne.n	8010e4a <_sbrk_r+0x1a>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	b103      	cbz	r3, 8010e4a <_sbrk_r+0x1a>
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	20041328 	.word	0x20041328

08010e50 <siprintf>:
 8010e50:	b40e      	push	{r1, r2, r3}
 8010e52:	b500      	push	{lr}
 8010e54:	b09c      	sub	sp, #112	; 0x70
 8010e56:	ab1d      	add	r3, sp, #116	; 0x74
 8010e58:	9002      	str	r0, [sp, #8]
 8010e5a:	9006      	str	r0, [sp, #24]
 8010e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e60:	4809      	ldr	r0, [pc, #36]	; (8010e88 <siprintf+0x38>)
 8010e62:	9107      	str	r1, [sp, #28]
 8010e64:	9104      	str	r1, [sp, #16]
 8010e66:	4909      	ldr	r1, [pc, #36]	; (8010e8c <siprintf+0x3c>)
 8010e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e6c:	9105      	str	r1, [sp, #20]
 8010e6e:	6800      	ldr	r0, [r0, #0]
 8010e70:	9301      	str	r3, [sp, #4]
 8010e72:	a902      	add	r1, sp, #8
 8010e74:	f001 fdb4 	bl	80129e0 <_svfiprintf_r>
 8010e78:	9b02      	ldr	r3, [sp, #8]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	b01c      	add	sp, #112	; 0x70
 8010e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e84:	b003      	add	sp, #12
 8010e86:	4770      	bx	lr
 8010e88:	2000076c 	.word	0x2000076c
 8010e8c:	ffff0208 	.word	0xffff0208

08010e90 <__swbuf_r>:
 8010e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e92:	460e      	mov	r6, r1
 8010e94:	4614      	mov	r4, r2
 8010e96:	4605      	mov	r5, r0
 8010e98:	b118      	cbz	r0, 8010ea2 <__swbuf_r+0x12>
 8010e9a:	6983      	ldr	r3, [r0, #24]
 8010e9c:	b90b      	cbnz	r3, 8010ea2 <__swbuf_r+0x12>
 8010e9e:	f001 f869 	bl	8011f74 <__sinit>
 8010ea2:	4b21      	ldr	r3, [pc, #132]	; (8010f28 <__swbuf_r+0x98>)
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	d12b      	bne.n	8010f00 <__swbuf_r+0x70>
 8010ea8:	686c      	ldr	r4, [r5, #4]
 8010eaa:	69a3      	ldr	r3, [r4, #24]
 8010eac:	60a3      	str	r3, [r4, #8]
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	071a      	lsls	r2, r3, #28
 8010eb2:	d52f      	bpl.n	8010f14 <__swbuf_r+0x84>
 8010eb4:	6923      	ldr	r3, [r4, #16]
 8010eb6:	b36b      	cbz	r3, 8010f14 <__swbuf_r+0x84>
 8010eb8:	6923      	ldr	r3, [r4, #16]
 8010eba:	6820      	ldr	r0, [r4, #0]
 8010ebc:	1ac0      	subs	r0, r0, r3
 8010ebe:	6963      	ldr	r3, [r4, #20]
 8010ec0:	b2f6      	uxtb	r6, r6
 8010ec2:	4283      	cmp	r3, r0
 8010ec4:	4637      	mov	r7, r6
 8010ec6:	dc04      	bgt.n	8010ed2 <__swbuf_r+0x42>
 8010ec8:	4621      	mov	r1, r4
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f000 ffbe 	bl	8011e4c <_fflush_r>
 8010ed0:	bb30      	cbnz	r0, 8010f20 <__swbuf_r+0x90>
 8010ed2:	68a3      	ldr	r3, [r4, #8]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	60a3      	str	r3, [r4, #8]
 8010ed8:	6823      	ldr	r3, [r4, #0]
 8010eda:	1c5a      	adds	r2, r3, #1
 8010edc:	6022      	str	r2, [r4, #0]
 8010ede:	701e      	strb	r6, [r3, #0]
 8010ee0:	6963      	ldr	r3, [r4, #20]
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	4283      	cmp	r3, r0
 8010ee6:	d004      	beq.n	8010ef2 <__swbuf_r+0x62>
 8010ee8:	89a3      	ldrh	r3, [r4, #12]
 8010eea:	07db      	lsls	r3, r3, #31
 8010eec:	d506      	bpl.n	8010efc <__swbuf_r+0x6c>
 8010eee:	2e0a      	cmp	r6, #10
 8010ef0:	d104      	bne.n	8010efc <__swbuf_r+0x6c>
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f000 ffa9 	bl	8011e4c <_fflush_r>
 8010efa:	b988      	cbnz	r0, 8010f20 <__swbuf_r+0x90>
 8010efc:	4638      	mov	r0, r7
 8010efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f00:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <__swbuf_r+0x9c>)
 8010f02:	429c      	cmp	r4, r3
 8010f04:	d101      	bne.n	8010f0a <__swbuf_r+0x7a>
 8010f06:	68ac      	ldr	r4, [r5, #8]
 8010f08:	e7cf      	b.n	8010eaa <__swbuf_r+0x1a>
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <__swbuf_r+0xa0>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	bf08      	it	eq
 8010f10:	68ec      	ldreq	r4, [r5, #12]
 8010f12:	e7ca      	b.n	8010eaa <__swbuf_r+0x1a>
 8010f14:	4621      	mov	r1, r4
 8010f16:	4628      	mov	r0, r5
 8010f18:	f000 f80c 	bl	8010f34 <__swsetup_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d0cb      	beq.n	8010eb8 <__swbuf_r+0x28>
 8010f20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f24:	e7ea      	b.n	8010efc <__swbuf_r+0x6c>
 8010f26:	bf00      	nop
 8010f28:	08018578 	.word	0x08018578
 8010f2c:	08018598 	.word	0x08018598
 8010f30:	08018558 	.word	0x08018558

08010f34 <__swsetup_r>:
 8010f34:	4b32      	ldr	r3, [pc, #200]	; (8011000 <__swsetup_r+0xcc>)
 8010f36:	b570      	push	{r4, r5, r6, lr}
 8010f38:	681d      	ldr	r5, [r3, #0]
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	b125      	cbz	r5, 8010f4a <__swsetup_r+0x16>
 8010f40:	69ab      	ldr	r3, [r5, #24]
 8010f42:	b913      	cbnz	r3, 8010f4a <__swsetup_r+0x16>
 8010f44:	4628      	mov	r0, r5
 8010f46:	f001 f815 	bl	8011f74 <__sinit>
 8010f4a:	4b2e      	ldr	r3, [pc, #184]	; (8011004 <__swsetup_r+0xd0>)
 8010f4c:	429c      	cmp	r4, r3
 8010f4e:	d10f      	bne.n	8010f70 <__swsetup_r+0x3c>
 8010f50:	686c      	ldr	r4, [r5, #4]
 8010f52:	89a3      	ldrh	r3, [r4, #12]
 8010f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f58:	0719      	lsls	r1, r3, #28
 8010f5a:	d42c      	bmi.n	8010fb6 <__swsetup_r+0x82>
 8010f5c:	06dd      	lsls	r5, r3, #27
 8010f5e:	d411      	bmi.n	8010f84 <__swsetup_r+0x50>
 8010f60:	2309      	movs	r3, #9
 8010f62:	6033      	str	r3, [r6, #0]
 8010f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f68:	81a3      	strh	r3, [r4, #12]
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f6e:	e03e      	b.n	8010fee <__swsetup_r+0xba>
 8010f70:	4b25      	ldr	r3, [pc, #148]	; (8011008 <__swsetup_r+0xd4>)
 8010f72:	429c      	cmp	r4, r3
 8010f74:	d101      	bne.n	8010f7a <__swsetup_r+0x46>
 8010f76:	68ac      	ldr	r4, [r5, #8]
 8010f78:	e7eb      	b.n	8010f52 <__swsetup_r+0x1e>
 8010f7a:	4b24      	ldr	r3, [pc, #144]	; (801100c <__swsetup_r+0xd8>)
 8010f7c:	429c      	cmp	r4, r3
 8010f7e:	bf08      	it	eq
 8010f80:	68ec      	ldreq	r4, [r5, #12]
 8010f82:	e7e6      	b.n	8010f52 <__swsetup_r+0x1e>
 8010f84:	0758      	lsls	r0, r3, #29
 8010f86:	d512      	bpl.n	8010fae <__swsetup_r+0x7a>
 8010f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8a:	b141      	cbz	r1, 8010f9e <__swsetup_r+0x6a>
 8010f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f90:	4299      	cmp	r1, r3
 8010f92:	d002      	beq.n	8010f9a <__swsetup_r+0x66>
 8010f94:	4630      	mov	r0, r6
 8010f96:	f7ff fa09 	bl	80103ac <_free_r>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f9e:	89a3      	ldrh	r3, [r4, #12]
 8010fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fa4:	81a3      	strh	r3, [r4, #12]
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	6063      	str	r3, [r4, #4]
 8010faa:	6923      	ldr	r3, [r4, #16]
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	89a3      	ldrh	r3, [r4, #12]
 8010fb0:	f043 0308 	orr.w	r3, r3, #8
 8010fb4:	81a3      	strh	r3, [r4, #12]
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	b94b      	cbnz	r3, 8010fce <__swsetup_r+0x9a>
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fc4:	d003      	beq.n	8010fce <__swsetup_r+0x9a>
 8010fc6:	4621      	mov	r1, r4
 8010fc8:	4630      	mov	r0, r6
 8010fca:	f001 f8af 	bl	801212c <__smakebuf_r>
 8010fce:	89a0      	ldrh	r0, [r4, #12]
 8010fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fd4:	f010 0301 	ands.w	r3, r0, #1
 8010fd8:	d00a      	beq.n	8010ff0 <__swsetup_r+0xbc>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	60a3      	str	r3, [r4, #8]
 8010fde:	6963      	ldr	r3, [r4, #20]
 8010fe0:	425b      	negs	r3, r3
 8010fe2:	61a3      	str	r3, [r4, #24]
 8010fe4:	6923      	ldr	r3, [r4, #16]
 8010fe6:	b943      	cbnz	r3, 8010ffa <__swsetup_r+0xc6>
 8010fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010fec:	d1ba      	bne.n	8010f64 <__swsetup_r+0x30>
 8010fee:	bd70      	pop	{r4, r5, r6, pc}
 8010ff0:	0781      	lsls	r1, r0, #30
 8010ff2:	bf58      	it	pl
 8010ff4:	6963      	ldrpl	r3, [r4, #20]
 8010ff6:	60a3      	str	r3, [r4, #8]
 8010ff8:	e7f4      	b.n	8010fe4 <__swsetup_r+0xb0>
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	e7f7      	b.n	8010fee <__swsetup_r+0xba>
 8010ffe:	bf00      	nop
 8011000:	2000076c 	.word	0x2000076c
 8011004:	08018578 	.word	0x08018578
 8011008:	08018598 	.word	0x08018598
 801100c:	08018558 	.word	0x08018558

08011010 <__assert_func>:
 8011010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011012:	4614      	mov	r4, r2
 8011014:	461a      	mov	r2, r3
 8011016:	4b09      	ldr	r3, [pc, #36]	; (801103c <__assert_func+0x2c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4605      	mov	r5, r0
 801101c:	68d8      	ldr	r0, [r3, #12]
 801101e:	b14c      	cbz	r4, 8011034 <__assert_func+0x24>
 8011020:	4b07      	ldr	r3, [pc, #28]	; (8011040 <__assert_func+0x30>)
 8011022:	9100      	str	r1, [sp, #0]
 8011024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011028:	4906      	ldr	r1, [pc, #24]	; (8011044 <__assert_func+0x34>)
 801102a:	462b      	mov	r3, r5
 801102c:	f001 f820 	bl	8012070 <fiprintf>
 8011030:	f001 ffce 	bl	8012fd0 <abort>
 8011034:	4b04      	ldr	r3, [pc, #16]	; (8011048 <__assert_func+0x38>)
 8011036:	461c      	mov	r4, r3
 8011038:	e7f3      	b.n	8011022 <__assert_func+0x12>
 801103a:	bf00      	nop
 801103c:	2000076c 	.word	0x2000076c
 8011040:	08018488 	.word	0x08018488
 8011044:	08018495 	.word	0x08018495
 8011048:	080184c3 	.word	0x080184c3

0801104c <quorem>:
 801104c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	6903      	ldr	r3, [r0, #16]
 8011052:	690c      	ldr	r4, [r1, #16]
 8011054:	42a3      	cmp	r3, r4
 8011056:	4607      	mov	r7, r0
 8011058:	f2c0 8081 	blt.w	801115e <quorem+0x112>
 801105c:	3c01      	subs	r4, #1
 801105e:	f101 0814 	add.w	r8, r1, #20
 8011062:	f100 0514 	add.w	r5, r0, #20
 8011066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801106a:	9301      	str	r3, [sp, #4]
 801106c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011074:	3301      	adds	r3, #1
 8011076:	429a      	cmp	r2, r3
 8011078:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801107c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011080:	fbb2 f6f3 	udiv	r6, r2, r3
 8011084:	d331      	bcc.n	80110ea <quorem+0x9e>
 8011086:	f04f 0e00 	mov.w	lr, #0
 801108a:	4640      	mov	r0, r8
 801108c:	46ac      	mov	ip, r5
 801108e:	46f2      	mov	sl, lr
 8011090:	f850 2b04 	ldr.w	r2, [r0], #4
 8011094:	b293      	uxth	r3, r2
 8011096:	fb06 e303 	mla	r3, r6, r3, lr
 801109a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801109e:	b29b      	uxth	r3, r3
 80110a0:	ebaa 0303 	sub.w	r3, sl, r3
 80110a4:	0c12      	lsrs	r2, r2, #16
 80110a6:	f8dc a000 	ldr.w	sl, [ip]
 80110aa:	fb06 e202 	mla	r2, r6, r2, lr
 80110ae:	fa13 f38a 	uxtah	r3, r3, sl
 80110b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80110b6:	fa1f fa82 	uxth.w	sl, r2
 80110ba:	f8dc 2000 	ldr.w	r2, [ip]
 80110be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80110c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110cc:	4581      	cmp	r9, r0
 80110ce:	f84c 3b04 	str.w	r3, [ip], #4
 80110d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80110d6:	d2db      	bcs.n	8011090 <quorem+0x44>
 80110d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80110dc:	b92b      	cbnz	r3, 80110ea <quorem+0x9e>
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	3b04      	subs	r3, #4
 80110e2:	429d      	cmp	r5, r3
 80110e4:	461a      	mov	r2, r3
 80110e6:	d32e      	bcc.n	8011146 <quorem+0xfa>
 80110e8:	613c      	str	r4, [r7, #16]
 80110ea:	4638      	mov	r0, r7
 80110ec:	f001 fae8 	bl	80126c0 <__mcmp>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	db24      	blt.n	801113e <quorem+0xf2>
 80110f4:	3601      	adds	r6, #1
 80110f6:	4628      	mov	r0, r5
 80110f8:	f04f 0c00 	mov.w	ip, #0
 80110fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8011100:	f8d0 e000 	ldr.w	lr, [r0]
 8011104:	b293      	uxth	r3, r2
 8011106:	ebac 0303 	sub.w	r3, ip, r3
 801110a:	0c12      	lsrs	r2, r2, #16
 801110c:	fa13 f38e 	uxtah	r3, r3, lr
 8011110:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011118:	b29b      	uxth	r3, r3
 801111a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801111e:	45c1      	cmp	r9, r8
 8011120:	f840 3b04 	str.w	r3, [r0], #4
 8011124:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011128:	d2e8      	bcs.n	80110fc <quorem+0xb0>
 801112a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801112e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011132:	b922      	cbnz	r2, 801113e <quorem+0xf2>
 8011134:	3b04      	subs	r3, #4
 8011136:	429d      	cmp	r5, r3
 8011138:	461a      	mov	r2, r3
 801113a:	d30a      	bcc.n	8011152 <quorem+0x106>
 801113c:	613c      	str	r4, [r7, #16]
 801113e:	4630      	mov	r0, r6
 8011140:	b003      	add	sp, #12
 8011142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011146:	6812      	ldr	r2, [r2, #0]
 8011148:	3b04      	subs	r3, #4
 801114a:	2a00      	cmp	r2, #0
 801114c:	d1cc      	bne.n	80110e8 <quorem+0x9c>
 801114e:	3c01      	subs	r4, #1
 8011150:	e7c7      	b.n	80110e2 <quorem+0x96>
 8011152:	6812      	ldr	r2, [r2, #0]
 8011154:	3b04      	subs	r3, #4
 8011156:	2a00      	cmp	r2, #0
 8011158:	d1f0      	bne.n	801113c <quorem+0xf0>
 801115a:	3c01      	subs	r4, #1
 801115c:	e7eb      	b.n	8011136 <quorem+0xea>
 801115e:	2000      	movs	r0, #0
 8011160:	e7ee      	b.n	8011140 <quorem+0xf4>
 8011162:	0000      	movs	r0, r0
 8011164:	0000      	movs	r0, r0
	...

08011168 <_dtoa_r>:
 8011168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801116c:	ed2d 8b02 	vpush	{d8}
 8011170:	ec57 6b10 	vmov	r6, r7, d0
 8011174:	b095      	sub	sp, #84	; 0x54
 8011176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801117c:	9105      	str	r1, [sp, #20]
 801117e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011182:	4604      	mov	r4, r0
 8011184:	9209      	str	r2, [sp, #36]	; 0x24
 8011186:	930f      	str	r3, [sp, #60]	; 0x3c
 8011188:	b975      	cbnz	r5, 80111a8 <_dtoa_r+0x40>
 801118a:	2010      	movs	r0, #16
 801118c:	f7ff f8f0 	bl	8010370 <malloc>
 8011190:	4602      	mov	r2, r0
 8011192:	6260      	str	r0, [r4, #36]	; 0x24
 8011194:	b920      	cbnz	r0, 80111a0 <_dtoa_r+0x38>
 8011196:	4bb2      	ldr	r3, [pc, #712]	; (8011460 <_dtoa_r+0x2f8>)
 8011198:	21ea      	movs	r1, #234	; 0xea
 801119a:	48b2      	ldr	r0, [pc, #712]	; (8011464 <_dtoa_r+0x2fc>)
 801119c:	f7ff ff38 	bl	8011010 <__assert_func>
 80111a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80111a4:	6005      	str	r5, [r0, #0]
 80111a6:	60c5      	str	r5, [r0, #12]
 80111a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111aa:	6819      	ldr	r1, [r3, #0]
 80111ac:	b151      	cbz	r1, 80111c4 <_dtoa_r+0x5c>
 80111ae:	685a      	ldr	r2, [r3, #4]
 80111b0:	604a      	str	r2, [r1, #4]
 80111b2:	2301      	movs	r3, #1
 80111b4:	4093      	lsls	r3, r2
 80111b6:	608b      	str	r3, [r1, #8]
 80111b8:	4620      	mov	r0, r4
 80111ba:	f001 f843 	bl	8012244 <_Bfree>
 80111be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111c0:	2200      	movs	r2, #0
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	1e3b      	subs	r3, r7, #0
 80111c6:	bfb9      	ittee	lt
 80111c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80111cc:	9303      	strlt	r3, [sp, #12]
 80111ce:	2300      	movge	r3, #0
 80111d0:	f8c8 3000 	strge.w	r3, [r8]
 80111d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80111d8:	4ba3      	ldr	r3, [pc, #652]	; (8011468 <_dtoa_r+0x300>)
 80111da:	bfbc      	itt	lt
 80111dc:	2201      	movlt	r2, #1
 80111de:	f8c8 2000 	strlt.w	r2, [r8]
 80111e2:	ea33 0309 	bics.w	r3, r3, r9
 80111e6:	d11b      	bne.n	8011220 <_dtoa_r+0xb8>
 80111e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80111ee:	6013      	str	r3, [r2, #0]
 80111f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111f4:	4333      	orrs	r3, r6
 80111f6:	f000 857a 	beq.w	8011cee <_dtoa_r+0xb86>
 80111fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111fc:	b963      	cbnz	r3, 8011218 <_dtoa_r+0xb0>
 80111fe:	4b9b      	ldr	r3, [pc, #620]	; (801146c <_dtoa_r+0x304>)
 8011200:	e024      	b.n	801124c <_dtoa_r+0xe4>
 8011202:	4b9b      	ldr	r3, [pc, #620]	; (8011470 <_dtoa_r+0x308>)
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	3308      	adds	r3, #8
 8011208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801120a:	6013      	str	r3, [r2, #0]
 801120c:	9800      	ldr	r0, [sp, #0]
 801120e:	b015      	add	sp, #84	; 0x54
 8011210:	ecbd 8b02 	vpop	{d8}
 8011214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011218:	4b94      	ldr	r3, [pc, #592]	; (801146c <_dtoa_r+0x304>)
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	3303      	adds	r3, #3
 801121e:	e7f3      	b.n	8011208 <_dtoa_r+0xa0>
 8011220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011224:	2200      	movs	r2, #0
 8011226:	ec51 0b17 	vmov	r0, r1, d7
 801122a:	2300      	movs	r3, #0
 801122c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011230:	f7ef fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8011234:	4680      	mov	r8, r0
 8011236:	b158      	cbz	r0, 8011250 <_dtoa_r+0xe8>
 8011238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801123a:	2301      	movs	r3, #1
 801123c:	6013      	str	r3, [r2, #0]
 801123e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 8551 	beq.w	8011ce8 <_dtoa_r+0xb80>
 8011246:	488b      	ldr	r0, [pc, #556]	; (8011474 <_dtoa_r+0x30c>)
 8011248:	6018      	str	r0, [r3, #0]
 801124a:	1e43      	subs	r3, r0, #1
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	e7dd      	b.n	801120c <_dtoa_r+0xa4>
 8011250:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011254:	aa12      	add	r2, sp, #72	; 0x48
 8011256:	a913      	add	r1, sp, #76	; 0x4c
 8011258:	4620      	mov	r0, r4
 801125a:	f001 fad5 	bl	8012808 <__d2b>
 801125e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011262:	4683      	mov	fp, r0
 8011264:	2d00      	cmp	r5, #0
 8011266:	d07c      	beq.n	8011362 <_dtoa_r+0x1fa>
 8011268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801126a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801126e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011272:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011276:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801127a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801127e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011282:	4b7d      	ldr	r3, [pc, #500]	; (8011478 <_dtoa_r+0x310>)
 8011284:	2200      	movs	r2, #0
 8011286:	4630      	mov	r0, r6
 8011288:	4639      	mov	r1, r7
 801128a:	f7ef f81d 	bl	80002c8 <__aeabi_dsub>
 801128e:	a36e      	add	r3, pc, #440	; (adr r3, 8011448 <_dtoa_r+0x2e0>)
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f7ef f9d0 	bl	8000638 <__aeabi_dmul>
 8011298:	a36d      	add	r3, pc, #436	; (adr r3, 8011450 <_dtoa_r+0x2e8>)
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	f7ef f815 	bl	80002cc <__adddf3>
 80112a2:	4606      	mov	r6, r0
 80112a4:	4628      	mov	r0, r5
 80112a6:	460f      	mov	r7, r1
 80112a8:	f7ef f95c 	bl	8000564 <__aeabi_i2d>
 80112ac:	a36a      	add	r3, pc, #424	; (adr r3, 8011458 <_dtoa_r+0x2f0>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ef f9c1 	bl	8000638 <__aeabi_dmul>
 80112b6:	4602      	mov	r2, r0
 80112b8:	460b      	mov	r3, r1
 80112ba:	4630      	mov	r0, r6
 80112bc:	4639      	mov	r1, r7
 80112be:	f7ef f805 	bl	80002cc <__adddf3>
 80112c2:	4606      	mov	r6, r0
 80112c4:	460f      	mov	r7, r1
 80112c6:	f7ef fc67 	bl	8000b98 <__aeabi_d2iz>
 80112ca:	2200      	movs	r2, #0
 80112cc:	4682      	mov	sl, r0
 80112ce:	2300      	movs	r3, #0
 80112d0:	4630      	mov	r0, r6
 80112d2:	4639      	mov	r1, r7
 80112d4:	f7ef fc22 	bl	8000b1c <__aeabi_dcmplt>
 80112d8:	b148      	cbz	r0, 80112ee <_dtoa_r+0x186>
 80112da:	4650      	mov	r0, sl
 80112dc:	f7ef f942 	bl	8000564 <__aeabi_i2d>
 80112e0:	4632      	mov	r2, r6
 80112e2:	463b      	mov	r3, r7
 80112e4:	f7ef fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80112e8:	b908      	cbnz	r0, 80112ee <_dtoa_r+0x186>
 80112ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80112ee:	f1ba 0f16 	cmp.w	sl, #22
 80112f2:	d854      	bhi.n	801139e <_dtoa_r+0x236>
 80112f4:	4b61      	ldr	r3, [pc, #388]	; (801147c <_dtoa_r+0x314>)
 80112f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011302:	f7ef fc0b 	bl	8000b1c <__aeabi_dcmplt>
 8011306:	2800      	cmp	r0, #0
 8011308:	d04b      	beq.n	80113a2 <_dtoa_r+0x23a>
 801130a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801130e:	2300      	movs	r3, #0
 8011310:	930e      	str	r3, [sp, #56]	; 0x38
 8011312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011314:	1b5d      	subs	r5, r3, r5
 8011316:	1e6b      	subs	r3, r5, #1
 8011318:	9304      	str	r3, [sp, #16]
 801131a:	bf43      	ittte	mi
 801131c:	2300      	movmi	r3, #0
 801131e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011322:	9304      	strmi	r3, [sp, #16]
 8011324:	f04f 0800 	movpl.w	r8, #0
 8011328:	f1ba 0f00 	cmp.w	sl, #0
 801132c:	db3b      	blt.n	80113a6 <_dtoa_r+0x23e>
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011334:	4453      	add	r3, sl
 8011336:	9304      	str	r3, [sp, #16]
 8011338:	2300      	movs	r3, #0
 801133a:	9306      	str	r3, [sp, #24]
 801133c:	9b05      	ldr	r3, [sp, #20]
 801133e:	2b09      	cmp	r3, #9
 8011340:	d869      	bhi.n	8011416 <_dtoa_r+0x2ae>
 8011342:	2b05      	cmp	r3, #5
 8011344:	bfc4      	itt	gt
 8011346:	3b04      	subgt	r3, #4
 8011348:	9305      	strgt	r3, [sp, #20]
 801134a:	9b05      	ldr	r3, [sp, #20]
 801134c:	f1a3 0302 	sub.w	r3, r3, #2
 8011350:	bfcc      	ite	gt
 8011352:	2500      	movgt	r5, #0
 8011354:	2501      	movle	r5, #1
 8011356:	2b03      	cmp	r3, #3
 8011358:	d869      	bhi.n	801142e <_dtoa_r+0x2c6>
 801135a:	e8df f003 	tbb	[pc, r3]
 801135e:	4e2c      	.short	0x4e2c
 8011360:	5a4c      	.short	0x5a4c
 8011362:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011366:	441d      	add	r5, r3
 8011368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801136c:	2b20      	cmp	r3, #32
 801136e:	bfc1      	itttt	gt
 8011370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011374:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011378:	fa09 f303 	lslgt.w	r3, r9, r3
 801137c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011380:	bfda      	itte	le
 8011382:	f1c3 0320 	rsble	r3, r3, #32
 8011386:	fa06 f003 	lslle.w	r0, r6, r3
 801138a:	4318      	orrgt	r0, r3
 801138c:	f7ef f8da 	bl	8000544 <__aeabi_ui2d>
 8011390:	2301      	movs	r3, #1
 8011392:	4606      	mov	r6, r0
 8011394:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011398:	3d01      	subs	r5, #1
 801139a:	9310      	str	r3, [sp, #64]	; 0x40
 801139c:	e771      	b.n	8011282 <_dtoa_r+0x11a>
 801139e:	2301      	movs	r3, #1
 80113a0:	e7b6      	b.n	8011310 <_dtoa_r+0x1a8>
 80113a2:	900e      	str	r0, [sp, #56]	; 0x38
 80113a4:	e7b5      	b.n	8011312 <_dtoa_r+0x1aa>
 80113a6:	f1ca 0300 	rsb	r3, sl, #0
 80113aa:	9306      	str	r3, [sp, #24]
 80113ac:	2300      	movs	r3, #0
 80113ae:	eba8 080a 	sub.w	r8, r8, sl
 80113b2:	930d      	str	r3, [sp, #52]	; 0x34
 80113b4:	e7c2      	b.n	801133c <_dtoa_r+0x1d4>
 80113b6:	2300      	movs	r3, #0
 80113b8:	9308      	str	r3, [sp, #32]
 80113ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113bc:	2b00      	cmp	r3, #0
 80113be:	dc39      	bgt.n	8011434 <_dtoa_r+0x2cc>
 80113c0:	f04f 0901 	mov.w	r9, #1
 80113c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80113c8:	464b      	mov	r3, r9
 80113ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80113ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80113d0:	2200      	movs	r2, #0
 80113d2:	6042      	str	r2, [r0, #4]
 80113d4:	2204      	movs	r2, #4
 80113d6:	f102 0614 	add.w	r6, r2, #20
 80113da:	429e      	cmp	r6, r3
 80113dc:	6841      	ldr	r1, [r0, #4]
 80113de:	d92f      	bls.n	8011440 <_dtoa_r+0x2d8>
 80113e0:	4620      	mov	r0, r4
 80113e2:	f000 feef 	bl	80121c4 <_Balloc>
 80113e6:	9000      	str	r0, [sp, #0]
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d14b      	bne.n	8011484 <_dtoa_r+0x31c>
 80113ec:	4b24      	ldr	r3, [pc, #144]	; (8011480 <_dtoa_r+0x318>)
 80113ee:	4602      	mov	r2, r0
 80113f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80113f4:	e6d1      	b.n	801119a <_dtoa_r+0x32>
 80113f6:	2301      	movs	r3, #1
 80113f8:	e7de      	b.n	80113b8 <_dtoa_r+0x250>
 80113fa:	2300      	movs	r3, #0
 80113fc:	9308      	str	r3, [sp, #32]
 80113fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011400:	eb0a 0903 	add.w	r9, sl, r3
 8011404:	f109 0301 	add.w	r3, r9, #1
 8011408:	2b01      	cmp	r3, #1
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	bfb8      	it	lt
 801140e:	2301      	movlt	r3, #1
 8011410:	e7dd      	b.n	80113ce <_dtoa_r+0x266>
 8011412:	2301      	movs	r3, #1
 8011414:	e7f2      	b.n	80113fc <_dtoa_r+0x294>
 8011416:	2501      	movs	r5, #1
 8011418:	2300      	movs	r3, #0
 801141a:	9305      	str	r3, [sp, #20]
 801141c:	9508      	str	r5, [sp, #32]
 801141e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011422:	2200      	movs	r2, #0
 8011424:	f8cd 9004 	str.w	r9, [sp, #4]
 8011428:	2312      	movs	r3, #18
 801142a:	9209      	str	r2, [sp, #36]	; 0x24
 801142c:	e7cf      	b.n	80113ce <_dtoa_r+0x266>
 801142e:	2301      	movs	r3, #1
 8011430:	9308      	str	r3, [sp, #32]
 8011432:	e7f4      	b.n	801141e <_dtoa_r+0x2b6>
 8011434:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011438:	f8cd 9004 	str.w	r9, [sp, #4]
 801143c:	464b      	mov	r3, r9
 801143e:	e7c6      	b.n	80113ce <_dtoa_r+0x266>
 8011440:	3101      	adds	r1, #1
 8011442:	6041      	str	r1, [r0, #4]
 8011444:	0052      	lsls	r2, r2, #1
 8011446:	e7c6      	b.n	80113d6 <_dtoa_r+0x26e>
 8011448:	636f4361 	.word	0x636f4361
 801144c:	3fd287a7 	.word	0x3fd287a7
 8011450:	8b60c8b3 	.word	0x8b60c8b3
 8011454:	3fc68a28 	.word	0x3fc68a28
 8011458:	509f79fb 	.word	0x509f79fb
 801145c:	3fd34413 	.word	0x3fd34413
 8011460:	080184d1 	.word	0x080184d1
 8011464:	080184e8 	.word	0x080184e8
 8011468:	7ff00000 	.word	0x7ff00000
 801146c:	080184cd 	.word	0x080184cd
 8011470:	080184c4 	.word	0x080184c4
 8011474:	08018465 	.word	0x08018465
 8011478:	3ff80000 	.word	0x3ff80000
 801147c:	08018640 	.word	0x08018640
 8011480:	08018547 	.word	0x08018547
 8011484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011486:	9a00      	ldr	r2, [sp, #0]
 8011488:	601a      	str	r2, [r3, #0]
 801148a:	9b01      	ldr	r3, [sp, #4]
 801148c:	2b0e      	cmp	r3, #14
 801148e:	f200 80ad 	bhi.w	80115ec <_dtoa_r+0x484>
 8011492:	2d00      	cmp	r5, #0
 8011494:	f000 80aa 	beq.w	80115ec <_dtoa_r+0x484>
 8011498:	f1ba 0f00 	cmp.w	sl, #0
 801149c:	dd36      	ble.n	801150c <_dtoa_r+0x3a4>
 801149e:	4ac3      	ldr	r2, [pc, #780]	; (80117ac <_dtoa_r+0x644>)
 80114a0:	f00a 030f 	and.w	r3, sl, #15
 80114a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80114a8:	ed93 7b00 	vldr	d7, [r3]
 80114ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80114b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80114b4:	eeb0 8a47 	vmov.f32	s16, s14
 80114b8:	eef0 8a67 	vmov.f32	s17, s15
 80114bc:	d016      	beq.n	80114ec <_dtoa_r+0x384>
 80114be:	4bbc      	ldr	r3, [pc, #752]	; (80117b0 <_dtoa_r+0x648>)
 80114c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114c8:	f7ef f9e0 	bl	800088c <__aeabi_ddiv>
 80114cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114d0:	f007 070f 	and.w	r7, r7, #15
 80114d4:	2503      	movs	r5, #3
 80114d6:	4eb6      	ldr	r6, [pc, #728]	; (80117b0 <_dtoa_r+0x648>)
 80114d8:	b957      	cbnz	r7, 80114f0 <_dtoa_r+0x388>
 80114da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114de:	ec53 2b18 	vmov	r2, r3, d8
 80114e2:	f7ef f9d3 	bl	800088c <__aeabi_ddiv>
 80114e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114ea:	e029      	b.n	8011540 <_dtoa_r+0x3d8>
 80114ec:	2502      	movs	r5, #2
 80114ee:	e7f2      	b.n	80114d6 <_dtoa_r+0x36e>
 80114f0:	07f9      	lsls	r1, r7, #31
 80114f2:	d508      	bpl.n	8011506 <_dtoa_r+0x39e>
 80114f4:	ec51 0b18 	vmov	r0, r1, d8
 80114f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114fc:	f7ef f89c 	bl	8000638 <__aeabi_dmul>
 8011500:	ec41 0b18 	vmov	d8, r0, r1
 8011504:	3501      	adds	r5, #1
 8011506:	107f      	asrs	r7, r7, #1
 8011508:	3608      	adds	r6, #8
 801150a:	e7e5      	b.n	80114d8 <_dtoa_r+0x370>
 801150c:	f000 80a6 	beq.w	801165c <_dtoa_r+0x4f4>
 8011510:	f1ca 0600 	rsb	r6, sl, #0
 8011514:	4ba5      	ldr	r3, [pc, #660]	; (80117ac <_dtoa_r+0x644>)
 8011516:	4fa6      	ldr	r7, [pc, #664]	; (80117b0 <_dtoa_r+0x648>)
 8011518:	f006 020f 	and.w	r2, r6, #15
 801151c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011528:	f7ef f886 	bl	8000638 <__aeabi_dmul>
 801152c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011530:	1136      	asrs	r6, r6, #4
 8011532:	2300      	movs	r3, #0
 8011534:	2502      	movs	r5, #2
 8011536:	2e00      	cmp	r6, #0
 8011538:	f040 8085 	bne.w	8011646 <_dtoa_r+0x4de>
 801153c:	2b00      	cmp	r3, #0
 801153e:	d1d2      	bne.n	80114e6 <_dtoa_r+0x37e>
 8011540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 808c 	beq.w	8011660 <_dtoa_r+0x4f8>
 8011548:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801154c:	4b99      	ldr	r3, [pc, #612]	; (80117b4 <_dtoa_r+0x64c>)
 801154e:	2200      	movs	r2, #0
 8011550:	4630      	mov	r0, r6
 8011552:	4639      	mov	r1, r7
 8011554:	f7ef fae2 	bl	8000b1c <__aeabi_dcmplt>
 8011558:	2800      	cmp	r0, #0
 801155a:	f000 8081 	beq.w	8011660 <_dtoa_r+0x4f8>
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d07d      	beq.n	8011660 <_dtoa_r+0x4f8>
 8011564:	f1b9 0f00 	cmp.w	r9, #0
 8011568:	dd3c      	ble.n	80115e4 <_dtoa_r+0x47c>
 801156a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801156e:	9307      	str	r3, [sp, #28]
 8011570:	2200      	movs	r2, #0
 8011572:	4b91      	ldr	r3, [pc, #580]	; (80117b8 <_dtoa_r+0x650>)
 8011574:	4630      	mov	r0, r6
 8011576:	4639      	mov	r1, r7
 8011578:	f7ef f85e 	bl	8000638 <__aeabi_dmul>
 801157c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011580:	3501      	adds	r5, #1
 8011582:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011586:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801158a:	4628      	mov	r0, r5
 801158c:	f7ee ffea 	bl	8000564 <__aeabi_i2d>
 8011590:	4632      	mov	r2, r6
 8011592:	463b      	mov	r3, r7
 8011594:	f7ef f850 	bl	8000638 <__aeabi_dmul>
 8011598:	4b88      	ldr	r3, [pc, #544]	; (80117bc <_dtoa_r+0x654>)
 801159a:	2200      	movs	r2, #0
 801159c:	f7ee fe96 	bl	80002cc <__adddf3>
 80115a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80115a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115a8:	9303      	str	r3, [sp, #12]
 80115aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d15c      	bne.n	801166a <_dtoa_r+0x502>
 80115b0:	4b83      	ldr	r3, [pc, #524]	; (80117c0 <_dtoa_r+0x658>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	4630      	mov	r0, r6
 80115b6:	4639      	mov	r1, r7
 80115b8:	f7ee fe86 	bl	80002c8 <__aeabi_dsub>
 80115bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115c0:	4606      	mov	r6, r0
 80115c2:	460f      	mov	r7, r1
 80115c4:	f7ef fac8 	bl	8000b58 <__aeabi_dcmpgt>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	f040 8296 	bne.w	8011afa <_dtoa_r+0x992>
 80115ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80115d2:	4630      	mov	r0, r6
 80115d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115d8:	4639      	mov	r1, r7
 80115da:	f7ef fa9f 	bl	8000b1c <__aeabi_dcmplt>
 80115de:	2800      	cmp	r0, #0
 80115e0:	f040 8288 	bne.w	8011af4 <_dtoa_r+0x98c>
 80115e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80115e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80115ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f2c0 8158 	blt.w	80118a4 <_dtoa_r+0x73c>
 80115f4:	f1ba 0f0e 	cmp.w	sl, #14
 80115f8:	f300 8154 	bgt.w	80118a4 <_dtoa_r+0x73c>
 80115fc:	4b6b      	ldr	r3, [pc, #428]	; (80117ac <_dtoa_r+0x644>)
 80115fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011602:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011608:	2b00      	cmp	r3, #0
 801160a:	f280 80e3 	bge.w	80117d4 <_dtoa_r+0x66c>
 801160e:	9b01      	ldr	r3, [sp, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	f300 80df 	bgt.w	80117d4 <_dtoa_r+0x66c>
 8011616:	f040 826d 	bne.w	8011af4 <_dtoa_r+0x98c>
 801161a:	4b69      	ldr	r3, [pc, #420]	; (80117c0 <_dtoa_r+0x658>)
 801161c:	2200      	movs	r2, #0
 801161e:	4640      	mov	r0, r8
 8011620:	4649      	mov	r1, r9
 8011622:	f7ef f809 	bl	8000638 <__aeabi_dmul>
 8011626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801162a:	f7ef fa8b 	bl	8000b44 <__aeabi_dcmpge>
 801162e:	9e01      	ldr	r6, [sp, #4]
 8011630:	4637      	mov	r7, r6
 8011632:	2800      	cmp	r0, #0
 8011634:	f040 8243 	bne.w	8011abe <_dtoa_r+0x956>
 8011638:	9d00      	ldr	r5, [sp, #0]
 801163a:	2331      	movs	r3, #49	; 0x31
 801163c:	f805 3b01 	strb.w	r3, [r5], #1
 8011640:	f10a 0a01 	add.w	sl, sl, #1
 8011644:	e23f      	b.n	8011ac6 <_dtoa_r+0x95e>
 8011646:	07f2      	lsls	r2, r6, #31
 8011648:	d505      	bpl.n	8011656 <_dtoa_r+0x4ee>
 801164a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801164e:	f7ee fff3 	bl	8000638 <__aeabi_dmul>
 8011652:	3501      	adds	r5, #1
 8011654:	2301      	movs	r3, #1
 8011656:	1076      	asrs	r6, r6, #1
 8011658:	3708      	adds	r7, #8
 801165a:	e76c      	b.n	8011536 <_dtoa_r+0x3ce>
 801165c:	2502      	movs	r5, #2
 801165e:	e76f      	b.n	8011540 <_dtoa_r+0x3d8>
 8011660:	9b01      	ldr	r3, [sp, #4]
 8011662:	f8cd a01c 	str.w	sl, [sp, #28]
 8011666:	930c      	str	r3, [sp, #48]	; 0x30
 8011668:	e78d      	b.n	8011586 <_dtoa_r+0x41e>
 801166a:	9900      	ldr	r1, [sp, #0]
 801166c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801166e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011670:	4b4e      	ldr	r3, [pc, #312]	; (80117ac <_dtoa_r+0x644>)
 8011672:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011676:	4401      	add	r1, r0
 8011678:	9102      	str	r1, [sp, #8]
 801167a:	9908      	ldr	r1, [sp, #32]
 801167c:	eeb0 8a47 	vmov.f32	s16, s14
 8011680:	eef0 8a67 	vmov.f32	s17, s15
 8011684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011688:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801168c:	2900      	cmp	r1, #0
 801168e:	d045      	beq.n	801171c <_dtoa_r+0x5b4>
 8011690:	494c      	ldr	r1, [pc, #304]	; (80117c4 <_dtoa_r+0x65c>)
 8011692:	2000      	movs	r0, #0
 8011694:	f7ef f8fa 	bl	800088c <__aeabi_ddiv>
 8011698:	ec53 2b18 	vmov	r2, r3, d8
 801169c:	f7ee fe14 	bl	80002c8 <__aeabi_dsub>
 80116a0:	9d00      	ldr	r5, [sp, #0]
 80116a2:	ec41 0b18 	vmov	d8, r0, r1
 80116a6:	4639      	mov	r1, r7
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7ef fa75 	bl	8000b98 <__aeabi_d2iz>
 80116ae:	900c      	str	r0, [sp, #48]	; 0x30
 80116b0:	f7ee ff58 	bl	8000564 <__aeabi_i2d>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	4630      	mov	r0, r6
 80116ba:	4639      	mov	r1, r7
 80116bc:	f7ee fe04 	bl	80002c8 <__aeabi_dsub>
 80116c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116c2:	3330      	adds	r3, #48	; 0x30
 80116c4:	f805 3b01 	strb.w	r3, [r5], #1
 80116c8:	ec53 2b18 	vmov	r2, r3, d8
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	f7ef fa24 	bl	8000b1c <__aeabi_dcmplt>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d165      	bne.n	80117a4 <_dtoa_r+0x63c>
 80116d8:	4632      	mov	r2, r6
 80116da:	463b      	mov	r3, r7
 80116dc:	4935      	ldr	r1, [pc, #212]	; (80117b4 <_dtoa_r+0x64c>)
 80116de:	2000      	movs	r0, #0
 80116e0:	f7ee fdf2 	bl	80002c8 <__aeabi_dsub>
 80116e4:	ec53 2b18 	vmov	r2, r3, d8
 80116e8:	f7ef fa18 	bl	8000b1c <__aeabi_dcmplt>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	f040 80b9 	bne.w	8011864 <_dtoa_r+0x6fc>
 80116f2:	9b02      	ldr	r3, [sp, #8]
 80116f4:	429d      	cmp	r5, r3
 80116f6:	f43f af75 	beq.w	80115e4 <_dtoa_r+0x47c>
 80116fa:	4b2f      	ldr	r3, [pc, #188]	; (80117b8 <_dtoa_r+0x650>)
 80116fc:	ec51 0b18 	vmov	r0, r1, d8
 8011700:	2200      	movs	r2, #0
 8011702:	f7ee ff99 	bl	8000638 <__aeabi_dmul>
 8011706:	4b2c      	ldr	r3, [pc, #176]	; (80117b8 <_dtoa_r+0x650>)
 8011708:	ec41 0b18 	vmov	d8, r0, r1
 801170c:	2200      	movs	r2, #0
 801170e:	4630      	mov	r0, r6
 8011710:	4639      	mov	r1, r7
 8011712:	f7ee ff91 	bl	8000638 <__aeabi_dmul>
 8011716:	4606      	mov	r6, r0
 8011718:	460f      	mov	r7, r1
 801171a:	e7c4      	b.n	80116a6 <_dtoa_r+0x53e>
 801171c:	ec51 0b17 	vmov	r0, r1, d7
 8011720:	f7ee ff8a 	bl	8000638 <__aeabi_dmul>
 8011724:	9b02      	ldr	r3, [sp, #8]
 8011726:	9d00      	ldr	r5, [sp, #0]
 8011728:	930c      	str	r3, [sp, #48]	; 0x30
 801172a:	ec41 0b18 	vmov	d8, r0, r1
 801172e:	4639      	mov	r1, r7
 8011730:	4630      	mov	r0, r6
 8011732:	f7ef fa31 	bl	8000b98 <__aeabi_d2iz>
 8011736:	9011      	str	r0, [sp, #68]	; 0x44
 8011738:	f7ee ff14 	bl	8000564 <__aeabi_i2d>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4630      	mov	r0, r6
 8011742:	4639      	mov	r1, r7
 8011744:	f7ee fdc0 	bl	80002c8 <__aeabi_dsub>
 8011748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801174a:	3330      	adds	r3, #48	; 0x30
 801174c:	f805 3b01 	strb.w	r3, [r5], #1
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	429d      	cmp	r5, r3
 8011754:	4606      	mov	r6, r0
 8011756:	460f      	mov	r7, r1
 8011758:	f04f 0200 	mov.w	r2, #0
 801175c:	d134      	bne.n	80117c8 <_dtoa_r+0x660>
 801175e:	4b19      	ldr	r3, [pc, #100]	; (80117c4 <_dtoa_r+0x65c>)
 8011760:	ec51 0b18 	vmov	r0, r1, d8
 8011764:	f7ee fdb2 	bl	80002cc <__adddf3>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	4630      	mov	r0, r6
 801176e:	4639      	mov	r1, r7
 8011770:	f7ef f9f2 	bl	8000b58 <__aeabi_dcmpgt>
 8011774:	2800      	cmp	r0, #0
 8011776:	d175      	bne.n	8011864 <_dtoa_r+0x6fc>
 8011778:	ec53 2b18 	vmov	r2, r3, d8
 801177c:	4911      	ldr	r1, [pc, #68]	; (80117c4 <_dtoa_r+0x65c>)
 801177e:	2000      	movs	r0, #0
 8011780:	f7ee fda2 	bl	80002c8 <__aeabi_dsub>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4630      	mov	r0, r6
 801178a:	4639      	mov	r1, r7
 801178c:	f7ef f9c6 	bl	8000b1c <__aeabi_dcmplt>
 8011790:	2800      	cmp	r0, #0
 8011792:	f43f af27 	beq.w	80115e4 <_dtoa_r+0x47c>
 8011796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011798:	1e6b      	subs	r3, r5, #1
 801179a:	930c      	str	r3, [sp, #48]	; 0x30
 801179c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80117a0:	2b30      	cmp	r3, #48	; 0x30
 80117a2:	d0f8      	beq.n	8011796 <_dtoa_r+0x62e>
 80117a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80117a8:	e04a      	b.n	8011840 <_dtoa_r+0x6d8>
 80117aa:	bf00      	nop
 80117ac:	08018640 	.word	0x08018640
 80117b0:	08018618 	.word	0x08018618
 80117b4:	3ff00000 	.word	0x3ff00000
 80117b8:	40240000 	.word	0x40240000
 80117bc:	401c0000 	.word	0x401c0000
 80117c0:	40140000 	.word	0x40140000
 80117c4:	3fe00000 	.word	0x3fe00000
 80117c8:	4baf      	ldr	r3, [pc, #700]	; (8011a88 <_dtoa_r+0x920>)
 80117ca:	f7ee ff35 	bl	8000638 <__aeabi_dmul>
 80117ce:	4606      	mov	r6, r0
 80117d0:	460f      	mov	r7, r1
 80117d2:	e7ac      	b.n	801172e <_dtoa_r+0x5c6>
 80117d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80117d8:	9d00      	ldr	r5, [sp, #0]
 80117da:	4642      	mov	r2, r8
 80117dc:	464b      	mov	r3, r9
 80117de:	4630      	mov	r0, r6
 80117e0:	4639      	mov	r1, r7
 80117e2:	f7ef f853 	bl	800088c <__aeabi_ddiv>
 80117e6:	f7ef f9d7 	bl	8000b98 <__aeabi_d2iz>
 80117ea:	9002      	str	r0, [sp, #8]
 80117ec:	f7ee feba 	bl	8000564 <__aeabi_i2d>
 80117f0:	4642      	mov	r2, r8
 80117f2:	464b      	mov	r3, r9
 80117f4:	f7ee ff20 	bl	8000638 <__aeabi_dmul>
 80117f8:	4602      	mov	r2, r0
 80117fa:	460b      	mov	r3, r1
 80117fc:	4630      	mov	r0, r6
 80117fe:	4639      	mov	r1, r7
 8011800:	f7ee fd62 	bl	80002c8 <__aeabi_dsub>
 8011804:	9e02      	ldr	r6, [sp, #8]
 8011806:	9f01      	ldr	r7, [sp, #4]
 8011808:	3630      	adds	r6, #48	; 0x30
 801180a:	f805 6b01 	strb.w	r6, [r5], #1
 801180e:	9e00      	ldr	r6, [sp, #0]
 8011810:	1bae      	subs	r6, r5, r6
 8011812:	42b7      	cmp	r7, r6
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	d137      	bne.n	801188a <_dtoa_r+0x722>
 801181a:	f7ee fd57 	bl	80002cc <__adddf3>
 801181e:	4642      	mov	r2, r8
 8011820:	464b      	mov	r3, r9
 8011822:	4606      	mov	r6, r0
 8011824:	460f      	mov	r7, r1
 8011826:	f7ef f997 	bl	8000b58 <__aeabi_dcmpgt>
 801182a:	b9c8      	cbnz	r0, 8011860 <_dtoa_r+0x6f8>
 801182c:	4642      	mov	r2, r8
 801182e:	464b      	mov	r3, r9
 8011830:	4630      	mov	r0, r6
 8011832:	4639      	mov	r1, r7
 8011834:	f7ef f968 	bl	8000b08 <__aeabi_dcmpeq>
 8011838:	b110      	cbz	r0, 8011840 <_dtoa_r+0x6d8>
 801183a:	9b02      	ldr	r3, [sp, #8]
 801183c:	07d9      	lsls	r1, r3, #31
 801183e:	d40f      	bmi.n	8011860 <_dtoa_r+0x6f8>
 8011840:	4620      	mov	r0, r4
 8011842:	4659      	mov	r1, fp
 8011844:	f000 fcfe 	bl	8012244 <_Bfree>
 8011848:	2300      	movs	r3, #0
 801184a:	702b      	strb	r3, [r5, #0]
 801184c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801184e:	f10a 0001 	add.w	r0, sl, #1
 8011852:	6018      	str	r0, [r3, #0]
 8011854:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011856:	2b00      	cmp	r3, #0
 8011858:	f43f acd8 	beq.w	801120c <_dtoa_r+0xa4>
 801185c:	601d      	str	r5, [r3, #0]
 801185e:	e4d5      	b.n	801120c <_dtoa_r+0xa4>
 8011860:	f8cd a01c 	str.w	sl, [sp, #28]
 8011864:	462b      	mov	r3, r5
 8011866:	461d      	mov	r5, r3
 8011868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801186c:	2a39      	cmp	r2, #57	; 0x39
 801186e:	d108      	bne.n	8011882 <_dtoa_r+0x71a>
 8011870:	9a00      	ldr	r2, [sp, #0]
 8011872:	429a      	cmp	r2, r3
 8011874:	d1f7      	bne.n	8011866 <_dtoa_r+0x6fe>
 8011876:	9a07      	ldr	r2, [sp, #28]
 8011878:	9900      	ldr	r1, [sp, #0]
 801187a:	3201      	adds	r2, #1
 801187c:	9207      	str	r2, [sp, #28]
 801187e:	2230      	movs	r2, #48	; 0x30
 8011880:	700a      	strb	r2, [r1, #0]
 8011882:	781a      	ldrb	r2, [r3, #0]
 8011884:	3201      	adds	r2, #1
 8011886:	701a      	strb	r2, [r3, #0]
 8011888:	e78c      	b.n	80117a4 <_dtoa_r+0x63c>
 801188a:	4b7f      	ldr	r3, [pc, #508]	; (8011a88 <_dtoa_r+0x920>)
 801188c:	2200      	movs	r2, #0
 801188e:	f7ee fed3 	bl	8000638 <__aeabi_dmul>
 8011892:	2200      	movs	r2, #0
 8011894:	2300      	movs	r3, #0
 8011896:	4606      	mov	r6, r0
 8011898:	460f      	mov	r7, r1
 801189a:	f7ef f935 	bl	8000b08 <__aeabi_dcmpeq>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d09b      	beq.n	80117da <_dtoa_r+0x672>
 80118a2:	e7cd      	b.n	8011840 <_dtoa_r+0x6d8>
 80118a4:	9a08      	ldr	r2, [sp, #32]
 80118a6:	2a00      	cmp	r2, #0
 80118a8:	f000 80c4 	beq.w	8011a34 <_dtoa_r+0x8cc>
 80118ac:	9a05      	ldr	r2, [sp, #20]
 80118ae:	2a01      	cmp	r2, #1
 80118b0:	f300 80a8 	bgt.w	8011a04 <_dtoa_r+0x89c>
 80118b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80118b6:	2a00      	cmp	r2, #0
 80118b8:	f000 80a0 	beq.w	80119fc <_dtoa_r+0x894>
 80118bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80118c0:	9e06      	ldr	r6, [sp, #24]
 80118c2:	4645      	mov	r5, r8
 80118c4:	9a04      	ldr	r2, [sp, #16]
 80118c6:	2101      	movs	r1, #1
 80118c8:	441a      	add	r2, r3
 80118ca:	4620      	mov	r0, r4
 80118cc:	4498      	add	r8, r3
 80118ce:	9204      	str	r2, [sp, #16]
 80118d0:	f000 fd74 	bl	80123bc <__i2b>
 80118d4:	4607      	mov	r7, r0
 80118d6:	2d00      	cmp	r5, #0
 80118d8:	dd0b      	ble.n	80118f2 <_dtoa_r+0x78a>
 80118da:	9b04      	ldr	r3, [sp, #16]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dd08      	ble.n	80118f2 <_dtoa_r+0x78a>
 80118e0:	42ab      	cmp	r3, r5
 80118e2:	9a04      	ldr	r2, [sp, #16]
 80118e4:	bfa8      	it	ge
 80118e6:	462b      	movge	r3, r5
 80118e8:	eba8 0803 	sub.w	r8, r8, r3
 80118ec:	1aed      	subs	r5, r5, r3
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	9304      	str	r3, [sp, #16]
 80118f2:	9b06      	ldr	r3, [sp, #24]
 80118f4:	b1fb      	cbz	r3, 8011936 <_dtoa_r+0x7ce>
 80118f6:	9b08      	ldr	r3, [sp, #32]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 809f 	beq.w	8011a3c <_dtoa_r+0x8d4>
 80118fe:	2e00      	cmp	r6, #0
 8011900:	dd11      	ble.n	8011926 <_dtoa_r+0x7be>
 8011902:	4639      	mov	r1, r7
 8011904:	4632      	mov	r2, r6
 8011906:	4620      	mov	r0, r4
 8011908:	f000 fe14 	bl	8012534 <__pow5mult>
 801190c:	465a      	mov	r2, fp
 801190e:	4601      	mov	r1, r0
 8011910:	4607      	mov	r7, r0
 8011912:	4620      	mov	r0, r4
 8011914:	f000 fd68 	bl	80123e8 <__multiply>
 8011918:	4659      	mov	r1, fp
 801191a:	9007      	str	r0, [sp, #28]
 801191c:	4620      	mov	r0, r4
 801191e:	f000 fc91 	bl	8012244 <_Bfree>
 8011922:	9b07      	ldr	r3, [sp, #28]
 8011924:	469b      	mov	fp, r3
 8011926:	9b06      	ldr	r3, [sp, #24]
 8011928:	1b9a      	subs	r2, r3, r6
 801192a:	d004      	beq.n	8011936 <_dtoa_r+0x7ce>
 801192c:	4659      	mov	r1, fp
 801192e:	4620      	mov	r0, r4
 8011930:	f000 fe00 	bl	8012534 <__pow5mult>
 8011934:	4683      	mov	fp, r0
 8011936:	2101      	movs	r1, #1
 8011938:	4620      	mov	r0, r4
 801193a:	f000 fd3f 	bl	80123bc <__i2b>
 801193e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011940:	2b00      	cmp	r3, #0
 8011942:	4606      	mov	r6, r0
 8011944:	dd7c      	ble.n	8011a40 <_dtoa_r+0x8d8>
 8011946:	461a      	mov	r2, r3
 8011948:	4601      	mov	r1, r0
 801194a:	4620      	mov	r0, r4
 801194c:	f000 fdf2 	bl	8012534 <__pow5mult>
 8011950:	9b05      	ldr	r3, [sp, #20]
 8011952:	2b01      	cmp	r3, #1
 8011954:	4606      	mov	r6, r0
 8011956:	dd76      	ble.n	8011a46 <_dtoa_r+0x8de>
 8011958:	2300      	movs	r3, #0
 801195a:	9306      	str	r3, [sp, #24]
 801195c:	6933      	ldr	r3, [r6, #16]
 801195e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011962:	6918      	ldr	r0, [r3, #16]
 8011964:	f000 fcda 	bl	801231c <__hi0bits>
 8011968:	f1c0 0020 	rsb	r0, r0, #32
 801196c:	9b04      	ldr	r3, [sp, #16]
 801196e:	4418      	add	r0, r3
 8011970:	f010 001f 	ands.w	r0, r0, #31
 8011974:	f000 8086 	beq.w	8011a84 <_dtoa_r+0x91c>
 8011978:	f1c0 0320 	rsb	r3, r0, #32
 801197c:	2b04      	cmp	r3, #4
 801197e:	dd7f      	ble.n	8011a80 <_dtoa_r+0x918>
 8011980:	f1c0 001c 	rsb	r0, r0, #28
 8011984:	9b04      	ldr	r3, [sp, #16]
 8011986:	4403      	add	r3, r0
 8011988:	4480      	add	r8, r0
 801198a:	4405      	add	r5, r0
 801198c:	9304      	str	r3, [sp, #16]
 801198e:	f1b8 0f00 	cmp.w	r8, #0
 8011992:	dd05      	ble.n	80119a0 <_dtoa_r+0x838>
 8011994:	4659      	mov	r1, fp
 8011996:	4642      	mov	r2, r8
 8011998:	4620      	mov	r0, r4
 801199a:	f000 fe25 	bl	80125e8 <__lshift>
 801199e:	4683      	mov	fp, r0
 80119a0:	9b04      	ldr	r3, [sp, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	dd05      	ble.n	80119b2 <_dtoa_r+0x84a>
 80119a6:	4631      	mov	r1, r6
 80119a8:	461a      	mov	r2, r3
 80119aa:	4620      	mov	r0, r4
 80119ac:	f000 fe1c 	bl	80125e8 <__lshift>
 80119b0:	4606      	mov	r6, r0
 80119b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d069      	beq.n	8011a8c <_dtoa_r+0x924>
 80119b8:	4631      	mov	r1, r6
 80119ba:	4658      	mov	r0, fp
 80119bc:	f000 fe80 	bl	80126c0 <__mcmp>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	da63      	bge.n	8011a8c <_dtoa_r+0x924>
 80119c4:	2300      	movs	r3, #0
 80119c6:	4659      	mov	r1, fp
 80119c8:	220a      	movs	r2, #10
 80119ca:	4620      	mov	r0, r4
 80119cc:	f000 fc5c 	bl	8012288 <__multadd>
 80119d0:	9b08      	ldr	r3, [sp, #32]
 80119d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80119d6:	4683      	mov	fp, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 818f 	beq.w	8011cfc <_dtoa_r+0xb94>
 80119de:	4639      	mov	r1, r7
 80119e0:	2300      	movs	r3, #0
 80119e2:	220a      	movs	r2, #10
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 fc4f 	bl	8012288 <__multadd>
 80119ea:	f1b9 0f00 	cmp.w	r9, #0
 80119ee:	4607      	mov	r7, r0
 80119f0:	f300 808e 	bgt.w	8011b10 <_dtoa_r+0x9a8>
 80119f4:	9b05      	ldr	r3, [sp, #20]
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	dc50      	bgt.n	8011a9c <_dtoa_r+0x934>
 80119fa:	e089      	b.n	8011b10 <_dtoa_r+0x9a8>
 80119fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80119fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a02:	e75d      	b.n	80118c0 <_dtoa_r+0x758>
 8011a04:	9b01      	ldr	r3, [sp, #4]
 8011a06:	1e5e      	subs	r6, r3, #1
 8011a08:	9b06      	ldr	r3, [sp, #24]
 8011a0a:	42b3      	cmp	r3, r6
 8011a0c:	bfbf      	itttt	lt
 8011a0e:	9b06      	ldrlt	r3, [sp, #24]
 8011a10:	9606      	strlt	r6, [sp, #24]
 8011a12:	1af2      	sublt	r2, r6, r3
 8011a14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011a16:	bfb6      	itet	lt
 8011a18:	189b      	addlt	r3, r3, r2
 8011a1a:	1b9e      	subge	r6, r3, r6
 8011a1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011a1e:	9b01      	ldr	r3, [sp, #4]
 8011a20:	bfb8      	it	lt
 8011a22:	2600      	movlt	r6, #0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	bfb5      	itete	lt
 8011a28:	eba8 0503 	sublt.w	r5, r8, r3
 8011a2c:	9b01      	ldrge	r3, [sp, #4]
 8011a2e:	2300      	movlt	r3, #0
 8011a30:	4645      	movge	r5, r8
 8011a32:	e747      	b.n	80118c4 <_dtoa_r+0x75c>
 8011a34:	9e06      	ldr	r6, [sp, #24]
 8011a36:	9f08      	ldr	r7, [sp, #32]
 8011a38:	4645      	mov	r5, r8
 8011a3a:	e74c      	b.n	80118d6 <_dtoa_r+0x76e>
 8011a3c:	9a06      	ldr	r2, [sp, #24]
 8011a3e:	e775      	b.n	801192c <_dtoa_r+0x7c4>
 8011a40:	9b05      	ldr	r3, [sp, #20]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	dc18      	bgt.n	8011a78 <_dtoa_r+0x910>
 8011a46:	9b02      	ldr	r3, [sp, #8]
 8011a48:	b9b3      	cbnz	r3, 8011a78 <_dtoa_r+0x910>
 8011a4a:	9b03      	ldr	r3, [sp, #12]
 8011a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a50:	b9a3      	cbnz	r3, 8011a7c <_dtoa_r+0x914>
 8011a52:	9b03      	ldr	r3, [sp, #12]
 8011a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a58:	0d1b      	lsrs	r3, r3, #20
 8011a5a:	051b      	lsls	r3, r3, #20
 8011a5c:	b12b      	cbz	r3, 8011a6a <_dtoa_r+0x902>
 8011a5e:	9b04      	ldr	r3, [sp, #16]
 8011a60:	3301      	adds	r3, #1
 8011a62:	9304      	str	r3, [sp, #16]
 8011a64:	f108 0801 	add.w	r8, r8, #1
 8011a68:	2301      	movs	r3, #1
 8011a6a:	9306      	str	r3, [sp, #24]
 8011a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f47f af74 	bne.w	801195c <_dtoa_r+0x7f4>
 8011a74:	2001      	movs	r0, #1
 8011a76:	e779      	b.n	801196c <_dtoa_r+0x804>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	e7f6      	b.n	8011a6a <_dtoa_r+0x902>
 8011a7c:	9b02      	ldr	r3, [sp, #8]
 8011a7e:	e7f4      	b.n	8011a6a <_dtoa_r+0x902>
 8011a80:	d085      	beq.n	801198e <_dtoa_r+0x826>
 8011a82:	4618      	mov	r0, r3
 8011a84:	301c      	adds	r0, #28
 8011a86:	e77d      	b.n	8011984 <_dtoa_r+0x81c>
 8011a88:	40240000 	.word	0x40240000
 8011a8c:	9b01      	ldr	r3, [sp, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	dc38      	bgt.n	8011b04 <_dtoa_r+0x99c>
 8011a92:	9b05      	ldr	r3, [sp, #20]
 8011a94:	2b02      	cmp	r3, #2
 8011a96:	dd35      	ble.n	8011b04 <_dtoa_r+0x99c>
 8011a98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011a9c:	f1b9 0f00 	cmp.w	r9, #0
 8011aa0:	d10d      	bne.n	8011abe <_dtoa_r+0x956>
 8011aa2:	4631      	mov	r1, r6
 8011aa4:	464b      	mov	r3, r9
 8011aa6:	2205      	movs	r2, #5
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f000 fbed 	bl	8012288 <__multadd>
 8011aae:	4601      	mov	r1, r0
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	4658      	mov	r0, fp
 8011ab4:	f000 fe04 	bl	80126c0 <__mcmp>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	f73f adbd 	bgt.w	8011638 <_dtoa_r+0x4d0>
 8011abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ac0:	9d00      	ldr	r5, [sp, #0]
 8011ac2:	ea6f 0a03 	mvn.w	sl, r3
 8011ac6:	f04f 0800 	mov.w	r8, #0
 8011aca:	4631      	mov	r1, r6
 8011acc:	4620      	mov	r0, r4
 8011ace:	f000 fbb9 	bl	8012244 <_Bfree>
 8011ad2:	2f00      	cmp	r7, #0
 8011ad4:	f43f aeb4 	beq.w	8011840 <_dtoa_r+0x6d8>
 8011ad8:	f1b8 0f00 	cmp.w	r8, #0
 8011adc:	d005      	beq.n	8011aea <_dtoa_r+0x982>
 8011ade:	45b8      	cmp	r8, r7
 8011ae0:	d003      	beq.n	8011aea <_dtoa_r+0x982>
 8011ae2:	4641      	mov	r1, r8
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f000 fbad 	bl	8012244 <_Bfree>
 8011aea:	4639      	mov	r1, r7
 8011aec:	4620      	mov	r0, r4
 8011aee:	f000 fba9 	bl	8012244 <_Bfree>
 8011af2:	e6a5      	b.n	8011840 <_dtoa_r+0x6d8>
 8011af4:	2600      	movs	r6, #0
 8011af6:	4637      	mov	r7, r6
 8011af8:	e7e1      	b.n	8011abe <_dtoa_r+0x956>
 8011afa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011afc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011b00:	4637      	mov	r7, r6
 8011b02:	e599      	b.n	8011638 <_dtoa_r+0x4d0>
 8011b04:	9b08      	ldr	r3, [sp, #32]
 8011b06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 80fd 	beq.w	8011d0a <_dtoa_r+0xba2>
 8011b10:	2d00      	cmp	r5, #0
 8011b12:	dd05      	ble.n	8011b20 <_dtoa_r+0x9b8>
 8011b14:	4639      	mov	r1, r7
 8011b16:	462a      	mov	r2, r5
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 fd65 	bl	80125e8 <__lshift>
 8011b1e:	4607      	mov	r7, r0
 8011b20:	9b06      	ldr	r3, [sp, #24]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d05c      	beq.n	8011be0 <_dtoa_r+0xa78>
 8011b26:	6879      	ldr	r1, [r7, #4]
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f000 fb4b 	bl	80121c4 <_Balloc>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	b928      	cbnz	r0, 8011b3e <_dtoa_r+0x9d6>
 8011b32:	4b80      	ldr	r3, [pc, #512]	; (8011d34 <_dtoa_r+0xbcc>)
 8011b34:	4602      	mov	r2, r0
 8011b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011b3a:	f7ff bb2e 	b.w	801119a <_dtoa_r+0x32>
 8011b3e:	693a      	ldr	r2, [r7, #16]
 8011b40:	3202      	adds	r2, #2
 8011b42:	0092      	lsls	r2, r2, #2
 8011b44:	f107 010c 	add.w	r1, r7, #12
 8011b48:	300c      	adds	r0, #12
 8011b4a:	f7fe fc19 	bl	8010380 <memcpy>
 8011b4e:	2201      	movs	r2, #1
 8011b50:	4629      	mov	r1, r5
 8011b52:	4620      	mov	r0, r4
 8011b54:	f000 fd48 	bl	80125e8 <__lshift>
 8011b58:	9b00      	ldr	r3, [sp, #0]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	9301      	str	r3, [sp, #4]
 8011b5e:	9b00      	ldr	r3, [sp, #0]
 8011b60:	444b      	add	r3, r9
 8011b62:	9307      	str	r3, [sp, #28]
 8011b64:	9b02      	ldr	r3, [sp, #8]
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	46b8      	mov	r8, r7
 8011b6c:	9306      	str	r3, [sp, #24]
 8011b6e:	4607      	mov	r7, r0
 8011b70:	9b01      	ldr	r3, [sp, #4]
 8011b72:	4631      	mov	r1, r6
 8011b74:	3b01      	subs	r3, #1
 8011b76:	4658      	mov	r0, fp
 8011b78:	9302      	str	r3, [sp, #8]
 8011b7a:	f7ff fa67 	bl	801104c <quorem>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	3330      	adds	r3, #48	; 0x30
 8011b82:	9004      	str	r0, [sp, #16]
 8011b84:	4641      	mov	r1, r8
 8011b86:	4658      	mov	r0, fp
 8011b88:	9308      	str	r3, [sp, #32]
 8011b8a:	f000 fd99 	bl	80126c0 <__mcmp>
 8011b8e:	463a      	mov	r2, r7
 8011b90:	4681      	mov	r9, r0
 8011b92:	4631      	mov	r1, r6
 8011b94:	4620      	mov	r0, r4
 8011b96:	f000 fdaf 	bl	80126f8 <__mdiff>
 8011b9a:	68c2      	ldr	r2, [r0, #12]
 8011b9c:	9b08      	ldr	r3, [sp, #32]
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	bb02      	cbnz	r2, 8011be4 <_dtoa_r+0xa7c>
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4658      	mov	r0, fp
 8011ba6:	f000 fd8b 	bl	80126c0 <__mcmp>
 8011baa:	9b08      	ldr	r3, [sp, #32]
 8011bac:	4602      	mov	r2, r0
 8011bae:	4629      	mov	r1, r5
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011bb6:	f000 fb45 	bl	8012244 <_Bfree>
 8011bba:	9b05      	ldr	r3, [sp, #20]
 8011bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bbe:	9d01      	ldr	r5, [sp, #4]
 8011bc0:	ea43 0102 	orr.w	r1, r3, r2
 8011bc4:	9b06      	ldr	r3, [sp, #24]
 8011bc6:	430b      	orrs	r3, r1
 8011bc8:	9b08      	ldr	r3, [sp, #32]
 8011bca:	d10d      	bne.n	8011be8 <_dtoa_r+0xa80>
 8011bcc:	2b39      	cmp	r3, #57	; 0x39
 8011bce:	d029      	beq.n	8011c24 <_dtoa_r+0xabc>
 8011bd0:	f1b9 0f00 	cmp.w	r9, #0
 8011bd4:	dd01      	ble.n	8011bda <_dtoa_r+0xa72>
 8011bd6:	9b04      	ldr	r3, [sp, #16]
 8011bd8:	3331      	adds	r3, #49	; 0x31
 8011bda:	9a02      	ldr	r2, [sp, #8]
 8011bdc:	7013      	strb	r3, [r2, #0]
 8011bde:	e774      	b.n	8011aca <_dtoa_r+0x962>
 8011be0:	4638      	mov	r0, r7
 8011be2:	e7b9      	b.n	8011b58 <_dtoa_r+0x9f0>
 8011be4:	2201      	movs	r2, #1
 8011be6:	e7e2      	b.n	8011bae <_dtoa_r+0xa46>
 8011be8:	f1b9 0f00 	cmp.w	r9, #0
 8011bec:	db06      	blt.n	8011bfc <_dtoa_r+0xa94>
 8011bee:	9905      	ldr	r1, [sp, #20]
 8011bf0:	ea41 0909 	orr.w	r9, r1, r9
 8011bf4:	9906      	ldr	r1, [sp, #24]
 8011bf6:	ea59 0101 	orrs.w	r1, r9, r1
 8011bfa:	d120      	bne.n	8011c3e <_dtoa_r+0xad6>
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	ddec      	ble.n	8011bda <_dtoa_r+0xa72>
 8011c00:	4659      	mov	r1, fp
 8011c02:	2201      	movs	r2, #1
 8011c04:	4620      	mov	r0, r4
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	f000 fcee 	bl	80125e8 <__lshift>
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	4683      	mov	fp, r0
 8011c10:	f000 fd56 	bl	80126c0 <__mcmp>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	dc02      	bgt.n	8011c20 <_dtoa_r+0xab8>
 8011c1a:	d1de      	bne.n	8011bda <_dtoa_r+0xa72>
 8011c1c:	07da      	lsls	r2, r3, #31
 8011c1e:	d5dc      	bpl.n	8011bda <_dtoa_r+0xa72>
 8011c20:	2b39      	cmp	r3, #57	; 0x39
 8011c22:	d1d8      	bne.n	8011bd6 <_dtoa_r+0xa6e>
 8011c24:	9a02      	ldr	r2, [sp, #8]
 8011c26:	2339      	movs	r3, #57	; 0x39
 8011c28:	7013      	strb	r3, [r2, #0]
 8011c2a:	462b      	mov	r3, r5
 8011c2c:	461d      	mov	r5, r3
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011c34:	2a39      	cmp	r2, #57	; 0x39
 8011c36:	d050      	beq.n	8011cda <_dtoa_r+0xb72>
 8011c38:	3201      	adds	r2, #1
 8011c3a:	701a      	strb	r2, [r3, #0]
 8011c3c:	e745      	b.n	8011aca <_dtoa_r+0x962>
 8011c3e:	2a00      	cmp	r2, #0
 8011c40:	dd03      	ble.n	8011c4a <_dtoa_r+0xae2>
 8011c42:	2b39      	cmp	r3, #57	; 0x39
 8011c44:	d0ee      	beq.n	8011c24 <_dtoa_r+0xabc>
 8011c46:	3301      	adds	r3, #1
 8011c48:	e7c7      	b.n	8011bda <_dtoa_r+0xa72>
 8011c4a:	9a01      	ldr	r2, [sp, #4]
 8011c4c:	9907      	ldr	r1, [sp, #28]
 8011c4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011c52:	428a      	cmp	r2, r1
 8011c54:	d02a      	beq.n	8011cac <_dtoa_r+0xb44>
 8011c56:	4659      	mov	r1, fp
 8011c58:	2300      	movs	r3, #0
 8011c5a:	220a      	movs	r2, #10
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	f000 fb13 	bl	8012288 <__multadd>
 8011c62:	45b8      	cmp	r8, r7
 8011c64:	4683      	mov	fp, r0
 8011c66:	f04f 0300 	mov.w	r3, #0
 8011c6a:	f04f 020a 	mov.w	r2, #10
 8011c6e:	4641      	mov	r1, r8
 8011c70:	4620      	mov	r0, r4
 8011c72:	d107      	bne.n	8011c84 <_dtoa_r+0xb1c>
 8011c74:	f000 fb08 	bl	8012288 <__multadd>
 8011c78:	4680      	mov	r8, r0
 8011c7a:	4607      	mov	r7, r0
 8011c7c:	9b01      	ldr	r3, [sp, #4]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	9301      	str	r3, [sp, #4]
 8011c82:	e775      	b.n	8011b70 <_dtoa_r+0xa08>
 8011c84:	f000 fb00 	bl	8012288 <__multadd>
 8011c88:	4639      	mov	r1, r7
 8011c8a:	4680      	mov	r8, r0
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	220a      	movs	r2, #10
 8011c90:	4620      	mov	r0, r4
 8011c92:	f000 faf9 	bl	8012288 <__multadd>
 8011c96:	4607      	mov	r7, r0
 8011c98:	e7f0      	b.n	8011c7c <_dtoa_r+0xb14>
 8011c9a:	f1b9 0f00 	cmp.w	r9, #0
 8011c9e:	9a00      	ldr	r2, [sp, #0]
 8011ca0:	bfcc      	ite	gt
 8011ca2:	464d      	movgt	r5, r9
 8011ca4:	2501      	movle	r5, #1
 8011ca6:	4415      	add	r5, r2
 8011ca8:	f04f 0800 	mov.w	r8, #0
 8011cac:	4659      	mov	r1, fp
 8011cae:	2201      	movs	r2, #1
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	9301      	str	r3, [sp, #4]
 8011cb4:	f000 fc98 	bl	80125e8 <__lshift>
 8011cb8:	4631      	mov	r1, r6
 8011cba:	4683      	mov	fp, r0
 8011cbc:	f000 fd00 	bl	80126c0 <__mcmp>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	dcb2      	bgt.n	8011c2a <_dtoa_r+0xac2>
 8011cc4:	d102      	bne.n	8011ccc <_dtoa_r+0xb64>
 8011cc6:	9b01      	ldr	r3, [sp, #4]
 8011cc8:	07db      	lsls	r3, r3, #31
 8011cca:	d4ae      	bmi.n	8011c2a <_dtoa_r+0xac2>
 8011ccc:	462b      	mov	r3, r5
 8011cce:	461d      	mov	r5, r3
 8011cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cd4:	2a30      	cmp	r2, #48	; 0x30
 8011cd6:	d0fa      	beq.n	8011cce <_dtoa_r+0xb66>
 8011cd8:	e6f7      	b.n	8011aca <_dtoa_r+0x962>
 8011cda:	9a00      	ldr	r2, [sp, #0]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d1a5      	bne.n	8011c2c <_dtoa_r+0xac4>
 8011ce0:	f10a 0a01 	add.w	sl, sl, #1
 8011ce4:	2331      	movs	r3, #49	; 0x31
 8011ce6:	e779      	b.n	8011bdc <_dtoa_r+0xa74>
 8011ce8:	4b13      	ldr	r3, [pc, #76]	; (8011d38 <_dtoa_r+0xbd0>)
 8011cea:	f7ff baaf 	b.w	801124c <_dtoa_r+0xe4>
 8011cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	f47f aa86 	bne.w	8011202 <_dtoa_r+0x9a>
 8011cf6:	4b11      	ldr	r3, [pc, #68]	; (8011d3c <_dtoa_r+0xbd4>)
 8011cf8:	f7ff baa8 	b.w	801124c <_dtoa_r+0xe4>
 8011cfc:	f1b9 0f00 	cmp.w	r9, #0
 8011d00:	dc03      	bgt.n	8011d0a <_dtoa_r+0xba2>
 8011d02:	9b05      	ldr	r3, [sp, #20]
 8011d04:	2b02      	cmp	r3, #2
 8011d06:	f73f aec9 	bgt.w	8011a9c <_dtoa_r+0x934>
 8011d0a:	9d00      	ldr	r5, [sp, #0]
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4658      	mov	r0, fp
 8011d10:	f7ff f99c 	bl	801104c <quorem>
 8011d14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011d18:	f805 3b01 	strb.w	r3, [r5], #1
 8011d1c:	9a00      	ldr	r2, [sp, #0]
 8011d1e:	1aaa      	subs	r2, r5, r2
 8011d20:	4591      	cmp	r9, r2
 8011d22:	ddba      	ble.n	8011c9a <_dtoa_r+0xb32>
 8011d24:	4659      	mov	r1, fp
 8011d26:	2300      	movs	r3, #0
 8011d28:	220a      	movs	r2, #10
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f000 faac 	bl	8012288 <__multadd>
 8011d30:	4683      	mov	fp, r0
 8011d32:	e7eb      	b.n	8011d0c <_dtoa_r+0xba4>
 8011d34:	08018547 	.word	0x08018547
 8011d38:	08018464 	.word	0x08018464
 8011d3c:	080184c4 	.word	0x080184c4

08011d40 <__sflush_r>:
 8011d40:	898a      	ldrh	r2, [r1, #12]
 8011d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d46:	4605      	mov	r5, r0
 8011d48:	0710      	lsls	r0, r2, #28
 8011d4a:	460c      	mov	r4, r1
 8011d4c:	d458      	bmi.n	8011e00 <__sflush_r+0xc0>
 8011d4e:	684b      	ldr	r3, [r1, #4]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dc05      	bgt.n	8011d60 <__sflush_r+0x20>
 8011d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	dc02      	bgt.n	8011d60 <__sflush_r+0x20>
 8011d5a:	2000      	movs	r0, #0
 8011d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d62:	2e00      	cmp	r6, #0
 8011d64:	d0f9      	beq.n	8011d5a <__sflush_r+0x1a>
 8011d66:	2300      	movs	r3, #0
 8011d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d6c:	682f      	ldr	r7, [r5, #0]
 8011d6e:	602b      	str	r3, [r5, #0]
 8011d70:	d032      	beq.n	8011dd8 <__sflush_r+0x98>
 8011d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d74:	89a3      	ldrh	r3, [r4, #12]
 8011d76:	075a      	lsls	r2, r3, #29
 8011d78:	d505      	bpl.n	8011d86 <__sflush_r+0x46>
 8011d7a:	6863      	ldr	r3, [r4, #4]
 8011d7c:	1ac0      	subs	r0, r0, r3
 8011d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d80:	b10b      	cbz	r3, 8011d86 <__sflush_r+0x46>
 8011d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d84:	1ac0      	subs	r0, r0, r3
 8011d86:	2300      	movs	r3, #0
 8011d88:	4602      	mov	r2, r0
 8011d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d8c:	6a21      	ldr	r1, [r4, #32]
 8011d8e:	4628      	mov	r0, r5
 8011d90:	47b0      	blx	r6
 8011d92:	1c43      	adds	r3, r0, #1
 8011d94:	89a3      	ldrh	r3, [r4, #12]
 8011d96:	d106      	bne.n	8011da6 <__sflush_r+0x66>
 8011d98:	6829      	ldr	r1, [r5, #0]
 8011d9a:	291d      	cmp	r1, #29
 8011d9c:	d82c      	bhi.n	8011df8 <__sflush_r+0xb8>
 8011d9e:	4a2a      	ldr	r2, [pc, #168]	; (8011e48 <__sflush_r+0x108>)
 8011da0:	40ca      	lsrs	r2, r1
 8011da2:	07d6      	lsls	r6, r2, #31
 8011da4:	d528      	bpl.n	8011df8 <__sflush_r+0xb8>
 8011da6:	2200      	movs	r2, #0
 8011da8:	6062      	str	r2, [r4, #4]
 8011daa:	04d9      	lsls	r1, r3, #19
 8011dac:	6922      	ldr	r2, [r4, #16]
 8011dae:	6022      	str	r2, [r4, #0]
 8011db0:	d504      	bpl.n	8011dbc <__sflush_r+0x7c>
 8011db2:	1c42      	adds	r2, r0, #1
 8011db4:	d101      	bne.n	8011dba <__sflush_r+0x7a>
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	b903      	cbnz	r3, 8011dbc <__sflush_r+0x7c>
 8011dba:	6560      	str	r0, [r4, #84]	; 0x54
 8011dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dbe:	602f      	str	r7, [r5, #0]
 8011dc0:	2900      	cmp	r1, #0
 8011dc2:	d0ca      	beq.n	8011d5a <__sflush_r+0x1a>
 8011dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dc8:	4299      	cmp	r1, r3
 8011dca:	d002      	beq.n	8011dd2 <__sflush_r+0x92>
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f7fe faed 	bl	80103ac <_free_r>
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8011dd6:	e7c1      	b.n	8011d5c <__sflush_r+0x1c>
 8011dd8:	6a21      	ldr	r1, [r4, #32]
 8011dda:	2301      	movs	r3, #1
 8011ddc:	4628      	mov	r0, r5
 8011dde:	47b0      	blx	r6
 8011de0:	1c41      	adds	r1, r0, #1
 8011de2:	d1c7      	bne.n	8011d74 <__sflush_r+0x34>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d0c4      	beq.n	8011d74 <__sflush_r+0x34>
 8011dea:	2b1d      	cmp	r3, #29
 8011dec:	d001      	beq.n	8011df2 <__sflush_r+0xb2>
 8011dee:	2b16      	cmp	r3, #22
 8011df0:	d101      	bne.n	8011df6 <__sflush_r+0xb6>
 8011df2:	602f      	str	r7, [r5, #0]
 8011df4:	e7b1      	b.n	8011d5a <__sflush_r+0x1a>
 8011df6:	89a3      	ldrh	r3, [r4, #12]
 8011df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dfc:	81a3      	strh	r3, [r4, #12]
 8011dfe:	e7ad      	b.n	8011d5c <__sflush_r+0x1c>
 8011e00:	690f      	ldr	r7, [r1, #16]
 8011e02:	2f00      	cmp	r7, #0
 8011e04:	d0a9      	beq.n	8011d5a <__sflush_r+0x1a>
 8011e06:	0793      	lsls	r3, r2, #30
 8011e08:	680e      	ldr	r6, [r1, #0]
 8011e0a:	bf08      	it	eq
 8011e0c:	694b      	ldreq	r3, [r1, #20]
 8011e0e:	600f      	str	r7, [r1, #0]
 8011e10:	bf18      	it	ne
 8011e12:	2300      	movne	r3, #0
 8011e14:	eba6 0807 	sub.w	r8, r6, r7
 8011e18:	608b      	str	r3, [r1, #8]
 8011e1a:	f1b8 0f00 	cmp.w	r8, #0
 8011e1e:	dd9c      	ble.n	8011d5a <__sflush_r+0x1a>
 8011e20:	6a21      	ldr	r1, [r4, #32]
 8011e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e24:	4643      	mov	r3, r8
 8011e26:	463a      	mov	r2, r7
 8011e28:	4628      	mov	r0, r5
 8011e2a:	47b0      	blx	r6
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	dc06      	bgt.n	8011e3e <__sflush_r+0xfe>
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e3c:	e78e      	b.n	8011d5c <__sflush_r+0x1c>
 8011e3e:	4407      	add	r7, r0
 8011e40:	eba8 0800 	sub.w	r8, r8, r0
 8011e44:	e7e9      	b.n	8011e1a <__sflush_r+0xda>
 8011e46:	bf00      	nop
 8011e48:	20400001 	.word	0x20400001

08011e4c <_fflush_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	690b      	ldr	r3, [r1, #16]
 8011e50:	4605      	mov	r5, r0
 8011e52:	460c      	mov	r4, r1
 8011e54:	b913      	cbnz	r3, 8011e5c <_fflush_r+0x10>
 8011e56:	2500      	movs	r5, #0
 8011e58:	4628      	mov	r0, r5
 8011e5a:	bd38      	pop	{r3, r4, r5, pc}
 8011e5c:	b118      	cbz	r0, 8011e66 <_fflush_r+0x1a>
 8011e5e:	6983      	ldr	r3, [r0, #24]
 8011e60:	b90b      	cbnz	r3, 8011e66 <_fflush_r+0x1a>
 8011e62:	f000 f887 	bl	8011f74 <__sinit>
 8011e66:	4b14      	ldr	r3, [pc, #80]	; (8011eb8 <_fflush_r+0x6c>)
 8011e68:	429c      	cmp	r4, r3
 8011e6a:	d11b      	bne.n	8011ea4 <_fflush_r+0x58>
 8011e6c:	686c      	ldr	r4, [r5, #4]
 8011e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0ef      	beq.n	8011e56 <_fflush_r+0xa>
 8011e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e78:	07d0      	lsls	r0, r2, #31
 8011e7a:	d404      	bmi.n	8011e86 <_fflush_r+0x3a>
 8011e7c:	0599      	lsls	r1, r3, #22
 8011e7e:	d402      	bmi.n	8011e86 <_fflush_r+0x3a>
 8011e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e82:	f000 f92c 	bl	80120de <__retarget_lock_acquire_recursive>
 8011e86:	4628      	mov	r0, r5
 8011e88:	4621      	mov	r1, r4
 8011e8a:	f7ff ff59 	bl	8011d40 <__sflush_r>
 8011e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e90:	07da      	lsls	r2, r3, #31
 8011e92:	4605      	mov	r5, r0
 8011e94:	d4e0      	bmi.n	8011e58 <_fflush_r+0xc>
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	059b      	lsls	r3, r3, #22
 8011e9a:	d4dd      	bmi.n	8011e58 <_fflush_r+0xc>
 8011e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e9e:	f000 f91f 	bl	80120e0 <__retarget_lock_release_recursive>
 8011ea2:	e7d9      	b.n	8011e58 <_fflush_r+0xc>
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <_fflush_r+0x70>)
 8011ea6:	429c      	cmp	r4, r3
 8011ea8:	d101      	bne.n	8011eae <_fflush_r+0x62>
 8011eaa:	68ac      	ldr	r4, [r5, #8]
 8011eac:	e7df      	b.n	8011e6e <_fflush_r+0x22>
 8011eae:	4b04      	ldr	r3, [pc, #16]	; (8011ec0 <_fflush_r+0x74>)
 8011eb0:	429c      	cmp	r4, r3
 8011eb2:	bf08      	it	eq
 8011eb4:	68ec      	ldreq	r4, [r5, #12]
 8011eb6:	e7da      	b.n	8011e6e <_fflush_r+0x22>
 8011eb8:	08018578 	.word	0x08018578
 8011ebc:	08018598 	.word	0x08018598
 8011ec0:	08018558 	.word	0x08018558

08011ec4 <std>:
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	b510      	push	{r4, lr}
 8011ec8:	4604      	mov	r4, r0
 8011eca:	e9c0 3300 	strd	r3, r3, [r0]
 8011ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ed2:	6083      	str	r3, [r0, #8]
 8011ed4:	8181      	strh	r1, [r0, #12]
 8011ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8011ed8:	81c2      	strh	r2, [r0, #14]
 8011eda:	6183      	str	r3, [r0, #24]
 8011edc:	4619      	mov	r1, r3
 8011ede:	2208      	movs	r2, #8
 8011ee0:	305c      	adds	r0, #92	; 0x5c
 8011ee2:	f7fe fa5b 	bl	801039c <memset>
 8011ee6:	4b05      	ldr	r3, [pc, #20]	; (8011efc <std+0x38>)
 8011ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8011eea:	4b05      	ldr	r3, [pc, #20]	; (8011f00 <std+0x3c>)
 8011eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <std+0x40>)
 8011ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x44>)
 8011ef4:	6224      	str	r4, [r4, #32]
 8011ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8011ef8:	bd10      	pop	{r4, pc}
 8011efa:	bf00      	nop
 8011efc:	08012f25 	.word	0x08012f25
 8011f00:	08012f47 	.word	0x08012f47
 8011f04:	08012f7f 	.word	0x08012f7f
 8011f08:	08012fa3 	.word	0x08012fa3

08011f0c <_cleanup_r>:
 8011f0c:	4901      	ldr	r1, [pc, #4]	; (8011f14 <_cleanup_r+0x8>)
 8011f0e:	f000 b8c1 	b.w	8012094 <_fwalk_reent>
 8011f12:	bf00      	nop
 8011f14:	08011e4d 	.word	0x08011e4d

08011f18 <__sfmoreglue>:
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	1e4a      	subs	r2, r1, #1
 8011f1c:	2568      	movs	r5, #104	; 0x68
 8011f1e:	4355      	muls	r5, r2
 8011f20:	460e      	mov	r6, r1
 8011f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f26:	f7fe fa91 	bl	801044c <_malloc_r>
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	b140      	cbz	r0, 8011f40 <__sfmoreglue+0x28>
 8011f2e:	2100      	movs	r1, #0
 8011f30:	e9c0 1600 	strd	r1, r6, [r0]
 8011f34:	300c      	adds	r0, #12
 8011f36:	60a0      	str	r0, [r4, #8]
 8011f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f3c:	f7fe fa2e 	bl	801039c <memset>
 8011f40:	4620      	mov	r0, r4
 8011f42:	bd70      	pop	{r4, r5, r6, pc}

08011f44 <__sfp_lock_acquire>:
 8011f44:	4801      	ldr	r0, [pc, #4]	; (8011f4c <__sfp_lock_acquire+0x8>)
 8011f46:	f000 b8ca 	b.w	80120de <__retarget_lock_acquire_recursive>
 8011f4a:	bf00      	nop
 8011f4c:	20041324 	.word	0x20041324

08011f50 <__sfp_lock_release>:
 8011f50:	4801      	ldr	r0, [pc, #4]	; (8011f58 <__sfp_lock_release+0x8>)
 8011f52:	f000 b8c5 	b.w	80120e0 <__retarget_lock_release_recursive>
 8011f56:	bf00      	nop
 8011f58:	20041324 	.word	0x20041324

08011f5c <__sinit_lock_acquire>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	; (8011f64 <__sinit_lock_acquire+0x8>)
 8011f5e:	f000 b8be 	b.w	80120de <__retarget_lock_acquire_recursive>
 8011f62:	bf00      	nop
 8011f64:	2004131f 	.word	0x2004131f

08011f68 <__sinit_lock_release>:
 8011f68:	4801      	ldr	r0, [pc, #4]	; (8011f70 <__sinit_lock_release+0x8>)
 8011f6a:	f000 b8b9 	b.w	80120e0 <__retarget_lock_release_recursive>
 8011f6e:	bf00      	nop
 8011f70:	2004131f 	.word	0x2004131f

08011f74 <__sinit>:
 8011f74:	b510      	push	{r4, lr}
 8011f76:	4604      	mov	r4, r0
 8011f78:	f7ff fff0 	bl	8011f5c <__sinit_lock_acquire>
 8011f7c:	69a3      	ldr	r3, [r4, #24]
 8011f7e:	b11b      	cbz	r3, 8011f88 <__sinit+0x14>
 8011f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f84:	f7ff bff0 	b.w	8011f68 <__sinit_lock_release>
 8011f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8011f8e:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <__sinit+0x68>)
 8011f90:	4a13      	ldr	r2, [pc, #76]	; (8011fe0 <__sinit+0x6c>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f96:	42a3      	cmp	r3, r4
 8011f98:	bf04      	itt	eq
 8011f9a:	2301      	moveq	r3, #1
 8011f9c:	61a3      	streq	r3, [r4, #24]
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 f820 	bl	8011fe4 <__sfp>
 8011fa4:	6060      	str	r0, [r4, #4]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 f81c 	bl	8011fe4 <__sfp>
 8011fac:	60a0      	str	r0, [r4, #8]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 f818 	bl	8011fe4 <__sfp>
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	60e0      	str	r0, [r4, #12]
 8011fb8:	2104      	movs	r1, #4
 8011fba:	6860      	ldr	r0, [r4, #4]
 8011fbc:	f7ff ff82 	bl	8011ec4 <std>
 8011fc0:	68a0      	ldr	r0, [r4, #8]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	2109      	movs	r1, #9
 8011fc6:	f7ff ff7d 	bl	8011ec4 <std>
 8011fca:	68e0      	ldr	r0, [r4, #12]
 8011fcc:	2202      	movs	r2, #2
 8011fce:	2112      	movs	r1, #18
 8011fd0:	f7ff ff78 	bl	8011ec4 <std>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	61a3      	str	r3, [r4, #24]
 8011fd8:	e7d2      	b.n	8011f80 <__sinit+0xc>
 8011fda:	bf00      	nop
 8011fdc:	08018450 	.word	0x08018450
 8011fe0:	08011f0d 	.word	0x08011f0d

08011fe4 <__sfp>:
 8011fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fe6:	4607      	mov	r7, r0
 8011fe8:	f7ff ffac 	bl	8011f44 <__sfp_lock_acquire>
 8011fec:	4b1e      	ldr	r3, [pc, #120]	; (8012068 <__sfp+0x84>)
 8011fee:	681e      	ldr	r6, [r3, #0]
 8011ff0:	69b3      	ldr	r3, [r6, #24]
 8011ff2:	b913      	cbnz	r3, 8011ffa <__sfp+0x16>
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f7ff ffbd 	bl	8011f74 <__sinit>
 8011ffa:	3648      	adds	r6, #72	; 0x48
 8011ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012000:	3b01      	subs	r3, #1
 8012002:	d503      	bpl.n	801200c <__sfp+0x28>
 8012004:	6833      	ldr	r3, [r6, #0]
 8012006:	b30b      	cbz	r3, 801204c <__sfp+0x68>
 8012008:	6836      	ldr	r6, [r6, #0]
 801200a:	e7f7      	b.n	8011ffc <__sfp+0x18>
 801200c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012010:	b9d5      	cbnz	r5, 8012048 <__sfp+0x64>
 8012012:	4b16      	ldr	r3, [pc, #88]	; (801206c <__sfp+0x88>)
 8012014:	60e3      	str	r3, [r4, #12]
 8012016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801201a:	6665      	str	r5, [r4, #100]	; 0x64
 801201c:	f000 f85e 	bl	80120dc <__retarget_lock_init_recursive>
 8012020:	f7ff ff96 	bl	8011f50 <__sfp_lock_release>
 8012024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801202c:	6025      	str	r5, [r4, #0]
 801202e:	61a5      	str	r5, [r4, #24]
 8012030:	2208      	movs	r2, #8
 8012032:	4629      	mov	r1, r5
 8012034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012038:	f7fe f9b0 	bl	801039c <memset>
 801203c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012044:	4620      	mov	r0, r4
 8012046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012048:	3468      	adds	r4, #104	; 0x68
 801204a:	e7d9      	b.n	8012000 <__sfp+0x1c>
 801204c:	2104      	movs	r1, #4
 801204e:	4638      	mov	r0, r7
 8012050:	f7ff ff62 	bl	8011f18 <__sfmoreglue>
 8012054:	4604      	mov	r4, r0
 8012056:	6030      	str	r0, [r6, #0]
 8012058:	2800      	cmp	r0, #0
 801205a:	d1d5      	bne.n	8012008 <__sfp+0x24>
 801205c:	f7ff ff78 	bl	8011f50 <__sfp_lock_release>
 8012060:	230c      	movs	r3, #12
 8012062:	603b      	str	r3, [r7, #0]
 8012064:	e7ee      	b.n	8012044 <__sfp+0x60>
 8012066:	bf00      	nop
 8012068:	08018450 	.word	0x08018450
 801206c:	ffff0001 	.word	0xffff0001

08012070 <fiprintf>:
 8012070:	b40e      	push	{r1, r2, r3}
 8012072:	b503      	push	{r0, r1, lr}
 8012074:	4601      	mov	r1, r0
 8012076:	ab03      	add	r3, sp, #12
 8012078:	4805      	ldr	r0, [pc, #20]	; (8012090 <fiprintf+0x20>)
 801207a:	f853 2b04 	ldr.w	r2, [r3], #4
 801207e:	6800      	ldr	r0, [r0, #0]
 8012080:	9301      	str	r3, [sp, #4]
 8012082:	f000 fdd7 	bl	8012c34 <_vfiprintf_r>
 8012086:	b002      	add	sp, #8
 8012088:	f85d eb04 	ldr.w	lr, [sp], #4
 801208c:	b003      	add	sp, #12
 801208e:	4770      	bx	lr
 8012090:	2000076c 	.word	0x2000076c

08012094 <_fwalk_reent>:
 8012094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012098:	4606      	mov	r6, r0
 801209a:	4688      	mov	r8, r1
 801209c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120a0:	2700      	movs	r7, #0
 80120a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120a6:	f1b9 0901 	subs.w	r9, r9, #1
 80120aa:	d505      	bpl.n	80120b8 <_fwalk_reent+0x24>
 80120ac:	6824      	ldr	r4, [r4, #0]
 80120ae:	2c00      	cmp	r4, #0
 80120b0:	d1f7      	bne.n	80120a2 <_fwalk_reent+0xe>
 80120b2:	4638      	mov	r0, r7
 80120b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b8:	89ab      	ldrh	r3, [r5, #12]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d907      	bls.n	80120ce <_fwalk_reent+0x3a>
 80120be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120c2:	3301      	adds	r3, #1
 80120c4:	d003      	beq.n	80120ce <_fwalk_reent+0x3a>
 80120c6:	4629      	mov	r1, r5
 80120c8:	4630      	mov	r0, r6
 80120ca:	47c0      	blx	r8
 80120cc:	4307      	orrs	r7, r0
 80120ce:	3568      	adds	r5, #104	; 0x68
 80120d0:	e7e9      	b.n	80120a6 <_fwalk_reent+0x12>
	...

080120d4 <_localeconv_r>:
 80120d4:	4800      	ldr	r0, [pc, #0]	; (80120d8 <_localeconv_r+0x4>)
 80120d6:	4770      	bx	lr
 80120d8:	200008c0 	.word	0x200008c0

080120dc <__retarget_lock_init_recursive>:
 80120dc:	4770      	bx	lr

080120de <__retarget_lock_acquire_recursive>:
 80120de:	4770      	bx	lr

080120e0 <__retarget_lock_release_recursive>:
 80120e0:	4770      	bx	lr

080120e2 <__swhatbuf_r>:
 80120e2:	b570      	push	{r4, r5, r6, lr}
 80120e4:	460e      	mov	r6, r1
 80120e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ea:	2900      	cmp	r1, #0
 80120ec:	b096      	sub	sp, #88	; 0x58
 80120ee:	4614      	mov	r4, r2
 80120f0:	461d      	mov	r5, r3
 80120f2:	da07      	bge.n	8012104 <__swhatbuf_r+0x22>
 80120f4:	2300      	movs	r3, #0
 80120f6:	602b      	str	r3, [r5, #0]
 80120f8:	89b3      	ldrh	r3, [r6, #12]
 80120fa:	061a      	lsls	r2, r3, #24
 80120fc:	d410      	bmi.n	8012120 <__swhatbuf_r+0x3e>
 80120fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012102:	e00e      	b.n	8012122 <__swhatbuf_r+0x40>
 8012104:	466a      	mov	r2, sp
 8012106:	f000 ff7b 	bl	8013000 <_fstat_r>
 801210a:	2800      	cmp	r0, #0
 801210c:	dbf2      	blt.n	80120f4 <__swhatbuf_r+0x12>
 801210e:	9a01      	ldr	r2, [sp, #4]
 8012110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012118:	425a      	negs	r2, r3
 801211a:	415a      	adcs	r2, r3
 801211c:	602a      	str	r2, [r5, #0]
 801211e:	e7ee      	b.n	80120fe <__swhatbuf_r+0x1c>
 8012120:	2340      	movs	r3, #64	; 0x40
 8012122:	2000      	movs	r0, #0
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	b016      	add	sp, #88	; 0x58
 8012128:	bd70      	pop	{r4, r5, r6, pc}
	...

0801212c <__smakebuf_r>:
 801212c:	898b      	ldrh	r3, [r1, #12]
 801212e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012130:	079d      	lsls	r5, r3, #30
 8012132:	4606      	mov	r6, r0
 8012134:	460c      	mov	r4, r1
 8012136:	d507      	bpl.n	8012148 <__smakebuf_r+0x1c>
 8012138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	6123      	str	r3, [r4, #16]
 8012140:	2301      	movs	r3, #1
 8012142:	6163      	str	r3, [r4, #20]
 8012144:	b002      	add	sp, #8
 8012146:	bd70      	pop	{r4, r5, r6, pc}
 8012148:	ab01      	add	r3, sp, #4
 801214a:	466a      	mov	r2, sp
 801214c:	f7ff ffc9 	bl	80120e2 <__swhatbuf_r>
 8012150:	9900      	ldr	r1, [sp, #0]
 8012152:	4605      	mov	r5, r0
 8012154:	4630      	mov	r0, r6
 8012156:	f7fe f979 	bl	801044c <_malloc_r>
 801215a:	b948      	cbnz	r0, 8012170 <__smakebuf_r+0x44>
 801215c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012160:	059a      	lsls	r2, r3, #22
 8012162:	d4ef      	bmi.n	8012144 <__smakebuf_r+0x18>
 8012164:	f023 0303 	bic.w	r3, r3, #3
 8012168:	f043 0302 	orr.w	r3, r3, #2
 801216c:	81a3      	strh	r3, [r4, #12]
 801216e:	e7e3      	b.n	8012138 <__smakebuf_r+0xc>
 8012170:	4b0d      	ldr	r3, [pc, #52]	; (80121a8 <__smakebuf_r+0x7c>)
 8012172:	62b3      	str	r3, [r6, #40]	; 0x28
 8012174:	89a3      	ldrh	r3, [r4, #12]
 8012176:	6020      	str	r0, [r4, #0]
 8012178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801217c:	81a3      	strh	r3, [r4, #12]
 801217e:	9b00      	ldr	r3, [sp, #0]
 8012180:	6163      	str	r3, [r4, #20]
 8012182:	9b01      	ldr	r3, [sp, #4]
 8012184:	6120      	str	r0, [r4, #16]
 8012186:	b15b      	cbz	r3, 80121a0 <__smakebuf_r+0x74>
 8012188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801218c:	4630      	mov	r0, r6
 801218e:	f000 ff49 	bl	8013024 <_isatty_r>
 8012192:	b128      	cbz	r0, 80121a0 <__smakebuf_r+0x74>
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	f023 0303 	bic.w	r3, r3, #3
 801219a:	f043 0301 	orr.w	r3, r3, #1
 801219e:	81a3      	strh	r3, [r4, #12]
 80121a0:	89a0      	ldrh	r0, [r4, #12]
 80121a2:	4305      	orrs	r5, r0
 80121a4:	81a5      	strh	r5, [r4, #12]
 80121a6:	e7cd      	b.n	8012144 <__smakebuf_r+0x18>
 80121a8:	08011f0d 	.word	0x08011f0d

080121ac <__malloc_lock>:
 80121ac:	4801      	ldr	r0, [pc, #4]	; (80121b4 <__malloc_lock+0x8>)
 80121ae:	f7ff bf96 	b.w	80120de <__retarget_lock_acquire_recursive>
 80121b2:	bf00      	nop
 80121b4:	20041320 	.word	0x20041320

080121b8 <__malloc_unlock>:
 80121b8:	4801      	ldr	r0, [pc, #4]	; (80121c0 <__malloc_unlock+0x8>)
 80121ba:	f7ff bf91 	b.w	80120e0 <__retarget_lock_release_recursive>
 80121be:	bf00      	nop
 80121c0:	20041320 	.word	0x20041320

080121c4 <_Balloc>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121c8:	4604      	mov	r4, r0
 80121ca:	460d      	mov	r5, r1
 80121cc:	b976      	cbnz	r6, 80121ec <_Balloc+0x28>
 80121ce:	2010      	movs	r0, #16
 80121d0:	f7fe f8ce 	bl	8010370 <malloc>
 80121d4:	4602      	mov	r2, r0
 80121d6:	6260      	str	r0, [r4, #36]	; 0x24
 80121d8:	b920      	cbnz	r0, 80121e4 <_Balloc+0x20>
 80121da:	4b18      	ldr	r3, [pc, #96]	; (801223c <_Balloc+0x78>)
 80121dc:	4818      	ldr	r0, [pc, #96]	; (8012240 <_Balloc+0x7c>)
 80121de:	2166      	movs	r1, #102	; 0x66
 80121e0:	f7fe ff16 	bl	8011010 <__assert_func>
 80121e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121e8:	6006      	str	r6, [r0, #0]
 80121ea:	60c6      	str	r6, [r0, #12]
 80121ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80121ee:	68f3      	ldr	r3, [r6, #12]
 80121f0:	b183      	cbz	r3, 8012214 <_Balloc+0x50>
 80121f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121fa:	b9b8      	cbnz	r0, 801222c <_Balloc+0x68>
 80121fc:	2101      	movs	r1, #1
 80121fe:	fa01 f605 	lsl.w	r6, r1, r5
 8012202:	1d72      	adds	r2, r6, #5
 8012204:	0092      	lsls	r2, r2, #2
 8012206:	4620      	mov	r0, r4
 8012208:	f000 fb5a 	bl	80128c0 <_calloc_r>
 801220c:	b160      	cbz	r0, 8012228 <_Balloc+0x64>
 801220e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012212:	e00e      	b.n	8012232 <_Balloc+0x6e>
 8012214:	2221      	movs	r2, #33	; 0x21
 8012216:	2104      	movs	r1, #4
 8012218:	4620      	mov	r0, r4
 801221a:	f000 fb51 	bl	80128c0 <_calloc_r>
 801221e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012220:	60f0      	str	r0, [r6, #12]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d1e4      	bne.n	80121f2 <_Balloc+0x2e>
 8012228:	2000      	movs	r0, #0
 801222a:	bd70      	pop	{r4, r5, r6, pc}
 801222c:	6802      	ldr	r2, [r0, #0]
 801222e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012232:	2300      	movs	r3, #0
 8012234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012238:	e7f7      	b.n	801222a <_Balloc+0x66>
 801223a:	bf00      	nop
 801223c:	080184d1 	.word	0x080184d1
 8012240:	080185b8 	.word	0x080185b8

08012244 <_Bfree>:
 8012244:	b570      	push	{r4, r5, r6, lr}
 8012246:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012248:	4605      	mov	r5, r0
 801224a:	460c      	mov	r4, r1
 801224c:	b976      	cbnz	r6, 801226c <_Bfree+0x28>
 801224e:	2010      	movs	r0, #16
 8012250:	f7fe f88e 	bl	8010370 <malloc>
 8012254:	4602      	mov	r2, r0
 8012256:	6268      	str	r0, [r5, #36]	; 0x24
 8012258:	b920      	cbnz	r0, 8012264 <_Bfree+0x20>
 801225a:	4b09      	ldr	r3, [pc, #36]	; (8012280 <_Bfree+0x3c>)
 801225c:	4809      	ldr	r0, [pc, #36]	; (8012284 <_Bfree+0x40>)
 801225e:	218a      	movs	r1, #138	; 0x8a
 8012260:	f7fe fed6 	bl	8011010 <__assert_func>
 8012264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012268:	6006      	str	r6, [r0, #0]
 801226a:	60c6      	str	r6, [r0, #12]
 801226c:	b13c      	cbz	r4, 801227e <_Bfree+0x3a>
 801226e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012270:	6862      	ldr	r2, [r4, #4]
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012278:	6021      	str	r1, [r4, #0]
 801227a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	080184d1 	.word	0x080184d1
 8012284:	080185b8 	.word	0x080185b8

08012288 <__multadd>:
 8012288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801228c:	690e      	ldr	r6, [r1, #16]
 801228e:	4607      	mov	r7, r0
 8012290:	4698      	mov	r8, r3
 8012292:	460c      	mov	r4, r1
 8012294:	f101 0014 	add.w	r0, r1, #20
 8012298:	2300      	movs	r3, #0
 801229a:	6805      	ldr	r5, [r0, #0]
 801229c:	b2a9      	uxth	r1, r5
 801229e:	fb02 8101 	mla	r1, r2, r1, r8
 80122a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80122a6:	0c2d      	lsrs	r5, r5, #16
 80122a8:	fb02 c505 	mla	r5, r2, r5, ip
 80122ac:	b289      	uxth	r1, r1
 80122ae:	3301      	adds	r3, #1
 80122b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80122b4:	429e      	cmp	r6, r3
 80122b6:	f840 1b04 	str.w	r1, [r0], #4
 80122ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80122be:	dcec      	bgt.n	801229a <__multadd+0x12>
 80122c0:	f1b8 0f00 	cmp.w	r8, #0
 80122c4:	d022      	beq.n	801230c <__multadd+0x84>
 80122c6:	68a3      	ldr	r3, [r4, #8]
 80122c8:	42b3      	cmp	r3, r6
 80122ca:	dc19      	bgt.n	8012300 <__multadd+0x78>
 80122cc:	6861      	ldr	r1, [r4, #4]
 80122ce:	4638      	mov	r0, r7
 80122d0:	3101      	adds	r1, #1
 80122d2:	f7ff ff77 	bl	80121c4 <_Balloc>
 80122d6:	4605      	mov	r5, r0
 80122d8:	b928      	cbnz	r0, 80122e6 <__multadd+0x5e>
 80122da:	4602      	mov	r2, r0
 80122dc:	4b0d      	ldr	r3, [pc, #52]	; (8012314 <__multadd+0x8c>)
 80122de:	480e      	ldr	r0, [pc, #56]	; (8012318 <__multadd+0x90>)
 80122e0:	21b5      	movs	r1, #181	; 0xb5
 80122e2:	f7fe fe95 	bl	8011010 <__assert_func>
 80122e6:	6922      	ldr	r2, [r4, #16]
 80122e8:	3202      	adds	r2, #2
 80122ea:	f104 010c 	add.w	r1, r4, #12
 80122ee:	0092      	lsls	r2, r2, #2
 80122f0:	300c      	adds	r0, #12
 80122f2:	f7fe f845 	bl	8010380 <memcpy>
 80122f6:	4621      	mov	r1, r4
 80122f8:	4638      	mov	r0, r7
 80122fa:	f7ff ffa3 	bl	8012244 <_Bfree>
 80122fe:	462c      	mov	r4, r5
 8012300:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012304:	3601      	adds	r6, #1
 8012306:	f8c3 8014 	str.w	r8, [r3, #20]
 801230a:	6126      	str	r6, [r4, #16]
 801230c:	4620      	mov	r0, r4
 801230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012312:	bf00      	nop
 8012314:	08018547 	.word	0x08018547
 8012318:	080185b8 	.word	0x080185b8

0801231c <__hi0bits>:
 801231c:	0c03      	lsrs	r3, r0, #16
 801231e:	041b      	lsls	r3, r3, #16
 8012320:	b9d3      	cbnz	r3, 8012358 <__hi0bits+0x3c>
 8012322:	0400      	lsls	r0, r0, #16
 8012324:	2310      	movs	r3, #16
 8012326:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801232a:	bf04      	itt	eq
 801232c:	0200      	lsleq	r0, r0, #8
 801232e:	3308      	addeq	r3, #8
 8012330:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012334:	bf04      	itt	eq
 8012336:	0100      	lsleq	r0, r0, #4
 8012338:	3304      	addeq	r3, #4
 801233a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801233e:	bf04      	itt	eq
 8012340:	0080      	lsleq	r0, r0, #2
 8012342:	3302      	addeq	r3, #2
 8012344:	2800      	cmp	r0, #0
 8012346:	db05      	blt.n	8012354 <__hi0bits+0x38>
 8012348:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801234c:	f103 0301 	add.w	r3, r3, #1
 8012350:	bf08      	it	eq
 8012352:	2320      	moveq	r3, #32
 8012354:	4618      	mov	r0, r3
 8012356:	4770      	bx	lr
 8012358:	2300      	movs	r3, #0
 801235a:	e7e4      	b.n	8012326 <__hi0bits+0xa>

0801235c <__lo0bits>:
 801235c:	6803      	ldr	r3, [r0, #0]
 801235e:	f013 0207 	ands.w	r2, r3, #7
 8012362:	4601      	mov	r1, r0
 8012364:	d00b      	beq.n	801237e <__lo0bits+0x22>
 8012366:	07da      	lsls	r2, r3, #31
 8012368:	d424      	bmi.n	80123b4 <__lo0bits+0x58>
 801236a:	0798      	lsls	r0, r3, #30
 801236c:	bf49      	itett	mi
 801236e:	085b      	lsrmi	r3, r3, #1
 8012370:	089b      	lsrpl	r3, r3, #2
 8012372:	2001      	movmi	r0, #1
 8012374:	600b      	strmi	r3, [r1, #0]
 8012376:	bf5c      	itt	pl
 8012378:	600b      	strpl	r3, [r1, #0]
 801237a:	2002      	movpl	r0, #2
 801237c:	4770      	bx	lr
 801237e:	b298      	uxth	r0, r3
 8012380:	b9b0      	cbnz	r0, 80123b0 <__lo0bits+0x54>
 8012382:	0c1b      	lsrs	r3, r3, #16
 8012384:	2010      	movs	r0, #16
 8012386:	f013 0fff 	tst.w	r3, #255	; 0xff
 801238a:	bf04      	itt	eq
 801238c:	0a1b      	lsreq	r3, r3, #8
 801238e:	3008      	addeq	r0, #8
 8012390:	071a      	lsls	r2, r3, #28
 8012392:	bf04      	itt	eq
 8012394:	091b      	lsreq	r3, r3, #4
 8012396:	3004      	addeq	r0, #4
 8012398:	079a      	lsls	r2, r3, #30
 801239a:	bf04      	itt	eq
 801239c:	089b      	lsreq	r3, r3, #2
 801239e:	3002      	addeq	r0, #2
 80123a0:	07da      	lsls	r2, r3, #31
 80123a2:	d403      	bmi.n	80123ac <__lo0bits+0x50>
 80123a4:	085b      	lsrs	r3, r3, #1
 80123a6:	f100 0001 	add.w	r0, r0, #1
 80123aa:	d005      	beq.n	80123b8 <__lo0bits+0x5c>
 80123ac:	600b      	str	r3, [r1, #0]
 80123ae:	4770      	bx	lr
 80123b0:	4610      	mov	r0, r2
 80123b2:	e7e8      	b.n	8012386 <__lo0bits+0x2a>
 80123b4:	2000      	movs	r0, #0
 80123b6:	4770      	bx	lr
 80123b8:	2020      	movs	r0, #32
 80123ba:	4770      	bx	lr

080123bc <__i2b>:
 80123bc:	b510      	push	{r4, lr}
 80123be:	460c      	mov	r4, r1
 80123c0:	2101      	movs	r1, #1
 80123c2:	f7ff feff 	bl	80121c4 <_Balloc>
 80123c6:	4602      	mov	r2, r0
 80123c8:	b928      	cbnz	r0, 80123d6 <__i2b+0x1a>
 80123ca:	4b05      	ldr	r3, [pc, #20]	; (80123e0 <__i2b+0x24>)
 80123cc:	4805      	ldr	r0, [pc, #20]	; (80123e4 <__i2b+0x28>)
 80123ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80123d2:	f7fe fe1d 	bl	8011010 <__assert_func>
 80123d6:	2301      	movs	r3, #1
 80123d8:	6144      	str	r4, [r0, #20]
 80123da:	6103      	str	r3, [r0, #16]
 80123dc:	bd10      	pop	{r4, pc}
 80123de:	bf00      	nop
 80123e0:	08018547 	.word	0x08018547
 80123e4:	080185b8 	.word	0x080185b8

080123e8 <__multiply>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	4614      	mov	r4, r2
 80123ee:	690a      	ldr	r2, [r1, #16]
 80123f0:	6923      	ldr	r3, [r4, #16]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	bfb8      	it	lt
 80123f6:	460b      	movlt	r3, r1
 80123f8:	460d      	mov	r5, r1
 80123fa:	bfbc      	itt	lt
 80123fc:	4625      	movlt	r5, r4
 80123fe:	461c      	movlt	r4, r3
 8012400:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012404:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012408:	68ab      	ldr	r3, [r5, #8]
 801240a:	6869      	ldr	r1, [r5, #4]
 801240c:	eb0a 0709 	add.w	r7, sl, r9
 8012410:	42bb      	cmp	r3, r7
 8012412:	b085      	sub	sp, #20
 8012414:	bfb8      	it	lt
 8012416:	3101      	addlt	r1, #1
 8012418:	f7ff fed4 	bl	80121c4 <_Balloc>
 801241c:	b930      	cbnz	r0, 801242c <__multiply+0x44>
 801241e:	4602      	mov	r2, r0
 8012420:	4b42      	ldr	r3, [pc, #264]	; (801252c <__multiply+0x144>)
 8012422:	4843      	ldr	r0, [pc, #268]	; (8012530 <__multiply+0x148>)
 8012424:	f240 115d 	movw	r1, #349	; 0x15d
 8012428:	f7fe fdf2 	bl	8011010 <__assert_func>
 801242c:	f100 0614 	add.w	r6, r0, #20
 8012430:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012434:	4633      	mov	r3, r6
 8012436:	2200      	movs	r2, #0
 8012438:	4543      	cmp	r3, r8
 801243a:	d31e      	bcc.n	801247a <__multiply+0x92>
 801243c:	f105 0c14 	add.w	ip, r5, #20
 8012440:	f104 0314 	add.w	r3, r4, #20
 8012444:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012448:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801244c:	9202      	str	r2, [sp, #8]
 801244e:	ebac 0205 	sub.w	r2, ip, r5
 8012452:	3a15      	subs	r2, #21
 8012454:	f022 0203 	bic.w	r2, r2, #3
 8012458:	3204      	adds	r2, #4
 801245a:	f105 0115 	add.w	r1, r5, #21
 801245e:	458c      	cmp	ip, r1
 8012460:	bf38      	it	cc
 8012462:	2204      	movcc	r2, #4
 8012464:	9201      	str	r2, [sp, #4]
 8012466:	9a02      	ldr	r2, [sp, #8]
 8012468:	9303      	str	r3, [sp, #12]
 801246a:	429a      	cmp	r2, r3
 801246c:	d808      	bhi.n	8012480 <__multiply+0x98>
 801246e:	2f00      	cmp	r7, #0
 8012470:	dc55      	bgt.n	801251e <__multiply+0x136>
 8012472:	6107      	str	r7, [r0, #16]
 8012474:	b005      	add	sp, #20
 8012476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247a:	f843 2b04 	str.w	r2, [r3], #4
 801247e:	e7db      	b.n	8012438 <__multiply+0x50>
 8012480:	f8b3 a000 	ldrh.w	sl, [r3]
 8012484:	f1ba 0f00 	cmp.w	sl, #0
 8012488:	d020      	beq.n	80124cc <__multiply+0xe4>
 801248a:	f105 0e14 	add.w	lr, r5, #20
 801248e:	46b1      	mov	r9, r6
 8012490:	2200      	movs	r2, #0
 8012492:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012496:	f8d9 b000 	ldr.w	fp, [r9]
 801249a:	b2a1      	uxth	r1, r4
 801249c:	fa1f fb8b 	uxth.w	fp, fp
 80124a0:	fb0a b101 	mla	r1, sl, r1, fp
 80124a4:	4411      	add	r1, r2
 80124a6:	f8d9 2000 	ldr.w	r2, [r9]
 80124aa:	0c24      	lsrs	r4, r4, #16
 80124ac:	0c12      	lsrs	r2, r2, #16
 80124ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80124b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80124b6:	b289      	uxth	r1, r1
 80124b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80124bc:	45f4      	cmp	ip, lr
 80124be:	f849 1b04 	str.w	r1, [r9], #4
 80124c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80124c6:	d8e4      	bhi.n	8012492 <__multiply+0xaa>
 80124c8:	9901      	ldr	r1, [sp, #4]
 80124ca:	5072      	str	r2, [r6, r1]
 80124cc:	9a03      	ldr	r2, [sp, #12]
 80124ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80124d2:	3304      	adds	r3, #4
 80124d4:	f1b9 0f00 	cmp.w	r9, #0
 80124d8:	d01f      	beq.n	801251a <__multiply+0x132>
 80124da:	6834      	ldr	r4, [r6, #0]
 80124dc:	f105 0114 	add.w	r1, r5, #20
 80124e0:	46b6      	mov	lr, r6
 80124e2:	f04f 0a00 	mov.w	sl, #0
 80124e6:	880a      	ldrh	r2, [r1, #0]
 80124e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80124ec:	fb09 b202 	mla	r2, r9, r2, fp
 80124f0:	4492      	add	sl, r2
 80124f2:	b2a4      	uxth	r4, r4
 80124f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80124f8:	f84e 4b04 	str.w	r4, [lr], #4
 80124fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8012500:	f8be 2000 	ldrh.w	r2, [lr]
 8012504:	0c24      	lsrs	r4, r4, #16
 8012506:	fb09 2404 	mla	r4, r9, r4, r2
 801250a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801250e:	458c      	cmp	ip, r1
 8012510:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012514:	d8e7      	bhi.n	80124e6 <__multiply+0xfe>
 8012516:	9a01      	ldr	r2, [sp, #4]
 8012518:	50b4      	str	r4, [r6, r2]
 801251a:	3604      	adds	r6, #4
 801251c:	e7a3      	b.n	8012466 <__multiply+0x7e>
 801251e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012522:	2b00      	cmp	r3, #0
 8012524:	d1a5      	bne.n	8012472 <__multiply+0x8a>
 8012526:	3f01      	subs	r7, #1
 8012528:	e7a1      	b.n	801246e <__multiply+0x86>
 801252a:	bf00      	nop
 801252c:	08018547 	.word	0x08018547
 8012530:	080185b8 	.word	0x080185b8

08012534 <__pow5mult>:
 8012534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012538:	4615      	mov	r5, r2
 801253a:	f012 0203 	ands.w	r2, r2, #3
 801253e:	4606      	mov	r6, r0
 8012540:	460f      	mov	r7, r1
 8012542:	d007      	beq.n	8012554 <__pow5mult+0x20>
 8012544:	4c25      	ldr	r4, [pc, #148]	; (80125dc <__pow5mult+0xa8>)
 8012546:	3a01      	subs	r2, #1
 8012548:	2300      	movs	r3, #0
 801254a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801254e:	f7ff fe9b 	bl	8012288 <__multadd>
 8012552:	4607      	mov	r7, r0
 8012554:	10ad      	asrs	r5, r5, #2
 8012556:	d03d      	beq.n	80125d4 <__pow5mult+0xa0>
 8012558:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801255a:	b97c      	cbnz	r4, 801257c <__pow5mult+0x48>
 801255c:	2010      	movs	r0, #16
 801255e:	f7fd ff07 	bl	8010370 <malloc>
 8012562:	4602      	mov	r2, r0
 8012564:	6270      	str	r0, [r6, #36]	; 0x24
 8012566:	b928      	cbnz	r0, 8012574 <__pow5mult+0x40>
 8012568:	4b1d      	ldr	r3, [pc, #116]	; (80125e0 <__pow5mult+0xac>)
 801256a:	481e      	ldr	r0, [pc, #120]	; (80125e4 <__pow5mult+0xb0>)
 801256c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012570:	f7fe fd4e 	bl	8011010 <__assert_func>
 8012574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012578:	6004      	str	r4, [r0, #0]
 801257a:	60c4      	str	r4, [r0, #12]
 801257c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012584:	b94c      	cbnz	r4, 801259a <__pow5mult+0x66>
 8012586:	f240 2171 	movw	r1, #625	; 0x271
 801258a:	4630      	mov	r0, r6
 801258c:	f7ff ff16 	bl	80123bc <__i2b>
 8012590:	2300      	movs	r3, #0
 8012592:	f8c8 0008 	str.w	r0, [r8, #8]
 8012596:	4604      	mov	r4, r0
 8012598:	6003      	str	r3, [r0, #0]
 801259a:	f04f 0900 	mov.w	r9, #0
 801259e:	07eb      	lsls	r3, r5, #31
 80125a0:	d50a      	bpl.n	80125b8 <__pow5mult+0x84>
 80125a2:	4639      	mov	r1, r7
 80125a4:	4622      	mov	r2, r4
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7ff ff1e 	bl	80123e8 <__multiply>
 80125ac:	4639      	mov	r1, r7
 80125ae:	4680      	mov	r8, r0
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ff fe47 	bl	8012244 <_Bfree>
 80125b6:	4647      	mov	r7, r8
 80125b8:	106d      	asrs	r5, r5, #1
 80125ba:	d00b      	beq.n	80125d4 <__pow5mult+0xa0>
 80125bc:	6820      	ldr	r0, [r4, #0]
 80125be:	b938      	cbnz	r0, 80125d0 <__pow5mult+0x9c>
 80125c0:	4622      	mov	r2, r4
 80125c2:	4621      	mov	r1, r4
 80125c4:	4630      	mov	r0, r6
 80125c6:	f7ff ff0f 	bl	80123e8 <__multiply>
 80125ca:	6020      	str	r0, [r4, #0]
 80125cc:	f8c0 9000 	str.w	r9, [r0]
 80125d0:	4604      	mov	r4, r0
 80125d2:	e7e4      	b.n	801259e <__pow5mult+0x6a>
 80125d4:	4638      	mov	r0, r7
 80125d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125da:	bf00      	nop
 80125dc:	08018708 	.word	0x08018708
 80125e0:	080184d1 	.word	0x080184d1
 80125e4:	080185b8 	.word	0x080185b8

080125e8 <__lshift>:
 80125e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ec:	460c      	mov	r4, r1
 80125ee:	6849      	ldr	r1, [r1, #4]
 80125f0:	6923      	ldr	r3, [r4, #16]
 80125f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125f6:	68a3      	ldr	r3, [r4, #8]
 80125f8:	4607      	mov	r7, r0
 80125fa:	4691      	mov	r9, r2
 80125fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012600:	f108 0601 	add.w	r6, r8, #1
 8012604:	42b3      	cmp	r3, r6
 8012606:	db0b      	blt.n	8012620 <__lshift+0x38>
 8012608:	4638      	mov	r0, r7
 801260a:	f7ff fddb 	bl	80121c4 <_Balloc>
 801260e:	4605      	mov	r5, r0
 8012610:	b948      	cbnz	r0, 8012626 <__lshift+0x3e>
 8012612:	4602      	mov	r2, r0
 8012614:	4b28      	ldr	r3, [pc, #160]	; (80126b8 <__lshift+0xd0>)
 8012616:	4829      	ldr	r0, [pc, #164]	; (80126bc <__lshift+0xd4>)
 8012618:	f240 11d9 	movw	r1, #473	; 0x1d9
 801261c:	f7fe fcf8 	bl	8011010 <__assert_func>
 8012620:	3101      	adds	r1, #1
 8012622:	005b      	lsls	r3, r3, #1
 8012624:	e7ee      	b.n	8012604 <__lshift+0x1c>
 8012626:	2300      	movs	r3, #0
 8012628:	f100 0114 	add.w	r1, r0, #20
 801262c:	f100 0210 	add.w	r2, r0, #16
 8012630:	4618      	mov	r0, r3
 8012632:	4553      	cmp	r3, sl
 8012634:	db33      	blt.n	801269e <__lshift+0xb6>
 8012636:	6920      	ldr	r0, [r4, #16]
 8012638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801263c:	f104 0314 	add.w	r3, r4, #20
 8012640:	f019 091f 	ands.w	r9, r9, #31
 8012644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801264c:	d02b      	beq.n	80126a6 <__lshift+0xbe>
 801264e:	f1c9 0e20 	rsb	lr, r9, #32
 8012652:	468a      	mov	sl, r1
 8012654:	2200      	movs	r2, #0
 8012656:	6818      	ldr	r0, [r3, #0]
 8012658:	fa00 f009 	lsl.w	r0, r0, r9
 801265c:	4302      	orrs	r2, r0
 801265e:	f84a 2b04 	str.w	r2, [sl], #4
 8012662:	f853 2b04 	ldr.w	r2, [r3], #4
 8012666:	459c      	cmp	ip, r3
 8012668:	fa22 f20e 	lsr.w	r2, r2, lr
 801266c:	d8f3      	bhi.n	8012656 <__lshift+0x6e>
 801266e:	ebac 0304 	sub.w	r3, ip, r4
 8012672:	3b15      	subs	r3, #21
 8012674:	f023 0303 	bic.w	r3, r3, #3
 8012678:	3304      	adds	r3, #4
 801267a:	f104 0015 	add.w	r0, r4, #21
 801267e:	4584      	cmp	ip, r0
 8012680:	bf38      	it	cc
 8012682:	2304      	movcc	r3, #4
 8012684:	50ca      	str	r2, [r1, r3]
 8012686:	b10a      	cbz	r2, 801268c <__lshift+0xa4>
 8012688:	f108 0602 	add.w	r6, r8, #2
 801268c:	3e01      	subs	r6, #1
 801268e:	4638      	mov	r0, r7
 8012690:	612e      	str	r6, [r5, #16]
 8012692:	4621      	mov	r1, r4
 8012694:	f7ff fdd6 	bl	8012244 <_Bfree>
 8012698:	4628      	mov	r0, r5
 801269a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801269e:	f842 0f04 	str.w	r0, [r2, #4]!
 80126a2:	3301      	adds	r3, #1
 80126a4:	e7c5      	b.n	8012632 <__lshift+0x4a>
 80126a6:	3904      	subs	r1, #4
 80126a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80126b0:	459c      	cmp	ip, r3
 80126b2:	d8f9      	bhi.n	80126a8 <__lshift+0xc0>
 80126b4:	e7ea      	b.n	801268c <__lshift+0xa4>
 80126b6:	bf00      	nop
 80126b8:	08018547 	.word	0x08018547
 80126bc:	080185b8 	.word	0x080185b8

080126c0 <__mcmp>:
 80126c0:	b530      	push	{r4, r5, lr}
 80126c2:	6902      	ldr	r2, [r0, #16]
 80126c4:	690c      	ldr	r4, [r1, #16]
 80126c6:	1b12      	subs	r2, r2, r4
 80126c8:	d10e      	bne.n	80126e8 <__mcmp+0x28>
 80126ca:	f100 0314 	add.w	r3, r0, #20
 80126ce:	3114      	adds	r1, #20
 80126d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80126d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80126d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80126dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80126e0:	42a5      	cmp	r5, r4
 80126e2:	d003      	beq.n	80126ec <__mcmp+0x2c>
 80126e4:	d305      	bcc.n	80126f2 <__mcmp+0x32>
 80126e6:	2201      	movs	r2, #1
 80126e8:	4610      	mov	r0, r2
 80126ea:	bd30      	pop	{r4, r5, pc}
 80126ec:	4283      	cmp	r3, r0
 80126ee:	d3f3      	bcc.n	80126d8 <__mcmp+0x18>
 80126f0:	e7fa      	b.n	80126e8 <__mcmp+0x28>
 80126f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126f6:	e7f7      	b.n	80126e8 <__mcmp+0x28>

080126f8 <__mdiff>:
 80126f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	460c      	mov	r4, r1
 80126fe:	4606      	mov	r6, r0
 8012700:	4611      	mov	r1, r2
 8012702:	4620      	mov	r0, r4
 8012704:	4617      	mov	r7, r2
 8012706:	f7ff ffdb 	bl	80126c0 <__mcmp>
 801270a:	1e05      	subs	r5, r0, #0
 801270c:	d110      	bne.n	8012730 <__mdiff+0x38>
 801270e:	4629      	mov	r1, r5
 8012710:	4630      	mov	r0, r6
 8012712:	f7ff fd57 	bl	80121c4 <_Balloc>
 8012716:	b930      	cbnz	r0, 8012726 <__mdiff+0x2e>
 8012718:	4b39      	ldr	r3, [pc, #228]	; (8012800 <__mdiff+0x108>)
 801271a:	4602      	mov	r2, r0
 801271c:	f240 2132 	movw	r1, #562	; 0x232
 8012720:	4838      	ldr	r0, [pc, #224]	; (8012804 <__mdiff+0x10c>)
 8012722:	f7fe fc75 	bl	8011010 <__assert_func>
 8012726:	2301      	movs	r3, #1
 8012728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801272c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012730:	bfa4      	itt	ge
 8012732:	463b      	movge	r3, r7
 8012734:	4627      	movge	r7, r4
 8012736:	4630      	mov	r0, r6
 8012738:	6879      	ldr	r1, [r7, #4]
 801273a:	bfa6      	itte	ge
 801273c:	461c      	movge	r4, r3
 801273e:	2500      	movge	r5, #0
 8012740:	2501      	movlt	r5, #1
 8012742:	f7ff fd3f 	bl	80121c4 <_Balloc>
 8012746:	b920      	cbnz	r0, 8012752 <__mdiff+0x5a>
 8012748:	4b2d      	ldr	r3, [pc, #180]	; (8012800 <__mdiff+0x108>)
 801274a:	4602      	mov	r2, r0
 801274c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012750:	e7e6      	b.n	8012720 <__mdiff+0x28>
 8012752:	693e      	ldr	r6, [r7, #16]
 8012754:	60c5      	str	r5, [r0, #12]
 8012756:	6925      	ldr	r5, [r4, #16]
 8012758:	f107 0114 	add.w	r1, r7, #20
 801275c:	f104 0914 	add.w	r9, r4, #20
 8012760:	f100 0e14 	add.w	lr, r0, #20
 8012764:	f107 0210 	add.w	r2, r7, #16
 8012768:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801276c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012770:	46f2      	mov	sl, lr
 8012772:	2700      	movs	r7, #0
 8012774:	f859 3b04 	ldr.w	r3, [r9], #4
 8012778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801277c:	fa1f f883 	uxth.w	r8, r3
 8012780:	fa17 f78b 	uxtah	r7, r7, fp
 8012784:	0c1b      	lsrs	r3, r3, #16
 8012786:	eba7 0808 	sub.w	r8, r7, r8
 801278a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801278e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012792:	fa1f f888 	uxth.w	r8, r8
 8012796:	141f      	asrs	r7, r3, #16
 8012798:	454d      	cmp	r5, r9
 801279a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801279e:	f84a 3b04 	str.w	r3, [sl], #4
 80127a2:	d8e7      	bhi.n	8012774 <__mdiff+0x7c>
 80127a4:	1b2b      	subs	r3, r5, r4
 80127a6:	3b15      	subs	r3, #21
 80127a8:	f023 0303 	bic.w	r3, r3, #3
 80127ac:	3304      	adds	r3, #4
 80127ae:	3415      	adds	r4, #21
 80127b0:	42a5      	cmp	r5, r4
 80127b2:	bf38      	it	cc
 80127b4:	2304      	movcc	r3, #4
 80127b6:	4419      	add	r1, r3
 80127b8:	4473      	add	r3, lr
 80127ba:	469e      	mov	lr, r3
 80127bc:	460d      	mov	r5, r1
 80127be:	4565      	cmp	r5, ip
 80127c0:	d30e      	bcc.n	80127e0 <__mdiff+0xe8>
 80127c2:	f10c 0203 	add.w	r2, ip, #3
 80127c6:	1a52      	subs	r2, r2, r1
 80127c8:	f022 0203 	bic.w	r2, r2, #3
 80127cc:	3903      	subs	r1, #3
 80127ce:	458c      	cmp	ip, r1
 80127d0:	bf38      	it	cc
 80127d2:	2200      	movcc	r2, #0
 80127d4:	441a      	add	r2, r3
 80127d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80127da:	b17b      	cbz	r3, 80127fc <__mdiff+0x104>
 80127dc:	6106      	str	r6, [r0, #16]
 80127de:	e7a5      	b.n	801272c <__mdiff+0x34>
 80127e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80127e4:	fa17 f488 	uxtah	r4, r7, r8
 80127e8:	1422      	asrs	r2, r4, #16
 80127ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80127ee:	b2a4      	uxth	r4, r4
 80127f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80127f4:	f84e 4b04 	str.w	r4, [lr], #4
 80127f8:	1417      	asrs	r7, r2, #16
 80127fa:	e7e0      	b.n	80127be <__mdiff+0xc6>
 80127fc:	3e01      	subs	r6, #1
 80127fe:	e7ea      	b.n	80127d6 <__mdiff+0xde>
 8012800:	08018547 	.word	0x08018547
 8012804:	080185b8 	.word	0x080185b8

08012808 <__d2b>:
 8012808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801280c:	4689      	mov	r9, r1
 801280e:	2101      	movs	r1, #1
 8012810:	ec57 6b10 	vmov	r6, r7, d0
 8012814:	4690      	mov	r8, r2
 8012816:	f7ff fcd5 	bl	80121c4 <_Balloc>
 801281a:	4604      	mov	r4, r0
 801281c:	b930      	cbnz	r0, 801282c <__d2b+0x24>
 801281e:	4602      	mov	r2, r0
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <__d2b+0xb0>)
 8012822:	4826      	ldr	r0, [pc, #152]	; (80128bc <__d2b+0xb4>)
 8012824:	f240 310a 	movw	r1, #778	; 0x30a
 8012828:	f7fe fbf2 	bl	8011010 <__assert_func>
 801282c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012834:	bb35      	cbnz	r5, 8012884 <__d2b+0x7c>
 8012836:	2e00      	cmp	r6, #0
 8012838:	9301      	str	r3, [sp, #4]
 801283a:	d028      	beq.n	801288e <__d2b+0x86>
 801283c:	4668      	mov	r0, sp
 801283e:	9600      	str	r6, [sp, #0]
 8012840:	f7ff fd8c 	bl	801235c <__lo0bits>
 8012844:	9900      	ldr	r1, [sp, #0]
 8012846:	b300      	cbz	r0, 801288a <__d2b+0x82>
 8012848:	9a01      	ldr	r2, [sp, #4]
 801284a:	f1c0 0320 	rsb	r3, r0, #32
 801284e:	fa02 f303 	lsl.w	r3, r2, r3
 8012852:	430b      	orrs	r3, r1
 8012854:	40c2      	lsrs	r2, r0
 8012856:	6163      	str	r3, [r4, #20]
 8012858:	9201      	str	r2, [sp, #4]
 801285a:	9b01      	ldr	r3, [sp, #4]
 801285c:	61a3      	str	r3, [r4, #24]
 801285e:	2b00      	cmp	r3, #0
 8012860:	bf14      	ite	ne
 8012862:	2202      	movne	r2, #2
 8012864:	2201      	moveq	r2, #1
 8012866:	6122      	str	r2, [r4, #16]
 8012868:	b1d5      	cbz	r5, 80128a0 <__d2b+0x98>
 801286a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801286e:	4405      	add	r5, r0
 8012870:	f8c9 5000 	str.w	r5, [r9]
 8012874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012878:	f8c8 0000 	str.w	r0, [r8]
 801287c:	4620      	mov	r0, r4
 801287e:	b003      	add	sp, #12
 8012880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012888:	e7d5      	b.n	8012836 <__d2b+0x2e>
 801288a:	6161      	str	r1, [r4, #20]
 801288c:	e7e5      	b.n	801285a <__d2b+0x52>
 801288e:	a801      	add	r0, sp, #4
 8012890:	f7ff fd64 	bl	801235c <__lo0bits>
 8012894:	9b01      	ldr	r3, [sp, #4]
 8012896:	6163      	str	r3, [r4, #20]
 8012898:	2201      	movs	r2, #1
 801289a:	6122      	str	r2, [r4, #16]
 801289c:	3020      	adds	r0, #32
 801289e:	e7e3      	b.n	8012868 <__d2b+0x60>
 80128a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128a8:	f8c9 0000 	str.w	r0, [r9]
 80128ac:	6918      	ldr	r0, [r3, #16]
 80128ae:	f7ff fd35 	bl	801231c <__hi0bits>
 80128b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128b6:	e7df      	b.n	8012878 <__d2b+0x70>
 80128b8:	08018547 	.word	0x08018547
 80128bc:	080185b8 	.word	0x080185b8

080128c0 <_calloc_r>:
 80128c0:	b513      	push	{r0, r1, r4, lr}
 80128c2:	434a      	muls	r2, r1
 80128c4:	4611      	mov	r1, r2
 80128c6:	9201      	str	r2, [sp, #4]
 80128c8:	f7fd fdc0 	bl	801044c <_malloc_r>
 80128cc:	4604      	mov	r4, r0
 80128ce:	b118      	cbz	r0, 80128d8 <_calloc_r+0x18>
 80128d0:	9a01      	ldr	r2, [sp, #4]
 80128d2:	2100      	movs	r1, #0
 80128d4:	f7fd fd62 	bl	801039c <memset>
 80128d8:	4620      	mov	r0, r4
 80128da:	b002      	add	sp, #8
 80128dc:	bd10      	pop	{r4, pc}

080128de <_realloc_r>:
 80128de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e0:	4607      	mov	r7, r0
 80128e2:	4614      	mov	r4, r2
 80128e4:	460e      	mov	r6, r1
 80128e6:	b921      	cbnz	r1, 80128f2 <_realloc_r+0x14>
 80128e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80128ec:	4611      	mov	r1, r2
 80128ee:	f7fd bdad 	b.w	801044c <_malloc_r>
 80128f2:	b922      	cbnz	r2, 80128fe <_realloc_r+0x20>
 80128f4:	f7fd fd5a 	bl	80103ac <_free_r>
 80128f8:	4625      	mov	r5, r4
 80128fa:	4628      	mov	r0, r5
 80128fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128fe:	f000 fbdf 	bl	80130c0 <_malloc_usable_size_r>
 8012902:	42a0      	cmp	r0, r4
 8012904:	d20f      	bcs.n	8012926 <_realloc_r+0x48>
 8012906:	4621      	mov	r1, r4
 8012908:	4638      	mov	r0, r7
 801290a:	f7fd fd9f 	bl	801044c <_malloc_r>
 801290e:	4605      	mov	r5, r0
 8012910:	2800      	cmp	r0, #0
 8012912:	d0f2      	beq.n	80128fa <_realloc_r+0x1c>
 8012914:	4631      	mov	r1, r6
 8012916:	4622      	mov	r2, r4
 8012918:	f7fd fd32 	bl	8010380 <memcpy>
 801291c:	4631      	mov	r1, r6
 801291e:	4638      	mov	r0, r7
 8012920:	f7fd fd44 	bl	80103ac <_free_r>
 8012924:	e7e9      	b.n	80128fa <_realloc_r+0x1c>
 8012926:	4635      	mov	r5, r6
 8012928:	e7e7      	b.n	80128fa <_realloc_r+0x1c>

0801292a <__ssputs_r>:
 801292a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801292e:	688e      	ldr	r6, [r1, #8]
 8012930:	429e      	cmp	r6, r3
 8012932:	4682      	mov	sl, r0
 8012934:	460c      	mov	r4, r1
 8012936:	4690      	mov	r8, r2
 8012938:	461f      	mov	r7, r3
 801293a:	d838      	bhi.n	80129ae <__ssputs_r+0x84>
 801293c:	898a      	ldrh	r2, [r1, #12]
 801293e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012942:	d032      	beq.n	80129aa <__ssputs_r+0x80>
 8012944:	6825      	ldr	r5, [r4, #0]
 8012946:	6909      	ldr	r1, [r1, #16]
 8012948:	eba5 0901 	sub.w	r9, r5, r1
 801294c:	6965      	ldr	r5, [r4, #20]
 801294e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012952:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012956:	3301      	adds	r3, #1
 8012958:	444b      	add	r3, r9
 801295a:	106d      	asrs	r5, r5, #1
 801295c:	429d      	cmp	r5, r3
 801295e:	bf38      	it	cc
 8012960:	461d      	movcc	r5, r3
 8012962:	0553      	lsls	r3, r2, #21
 8012964:	d531      	bpl.n	80129ca <__ssputs_r+0xa0>
 8012966:	4629      	mov	r1, r5
 8012968:	f7fd fd70 	bl	801044c <_malloc_r>
 801296c:	4606      	mov	r6, r0
 801296e:	b950      	cbnz	r0, 8012986 <__ssputs_r+0x5c>
 8012970:	230c      	movs	r3, #12
 8012972:	f8ca 3000 	str.w	r3, [sl]
 8012976:	89a3      	ldrh	r3, [r4, #12]
 8012978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801297c:	81a3      	strh	r3, [r4, #12]
 801297e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	6921      	ldr	r1, [r4, #16]
 8012988:	464a      	mov	r2, r9
 801298a:	f7fd fcf9 	bl	8010380 <memcpy>
 801298e:	89a3      	ldrh	r3, [r4, #12]
 8012990:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012998:	81a3      	strh	r3, [r4, #12]
 801299a:	6126      	str	r6, [r4, #16]
 801299c:	6165      	str	r5, [r4, #20]
 801299e:	444e      	add	r6, r9
 80129a0:	eba5 0509 	sub.w	r5, r5, r9
 80129a4:	6026      	str	r6, [r4, #0]
 80129a6:	60a5      	str	r5, [r4, #8]
 80129a8:	463e      	mov	r6, r7
 80129aa:	42be      	cmp	r6, r7
 80129ac:	d900      	bls.n	80129b0 <__ssputs_r+0x86>
 80129ae:	463e      	mov	r6, r7
 80129b0:	4632      	mov	r2, r6
 80129b2:	6820      	ldr	r0, [r4, #0]
 80129b4:	4641      	mov	r1, r8
 80129b6:	f000 fb69 	bl	801308c <memmove>
 80129ba:	68a3      	ldr	r3, [r4, #8]
 80129bc:	6822      	ldr	r2, [r4, #0]
 80129be:	1b9b      	subs	r3, r3, r6
 80129c0:	4432      	add	r2, r6
 80129c2:	60a3      	str	r3, [r4, #8]
 80129c4:	6022      	str	r2, [r4, #0]
 80129c6:	2000      	movs	r0, #0
 80129c8:	e7db      	b.n	8012982 <__ssputs_r+0x58>
 80129ca:	462a      	mov	r2, r5
 80129cc:	f7ff ff87 	bl	80128de <_realloc_r>
 80129d0:	4606      	mov	r6, r0
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d1e1      	bne.n	801299a <__ssputs_r+0x70>
 80129d6:	6921      	ldr	r1, [r4, #16]
 80129d8:	4650      	mov	r0, sl
 80129da:	f7fd fce7 	bl	80103ac <_free_r>
 80129de:	e7c7      	b.n	8012970 <__ssputs_r+0x46>

080129e0 <_svfiprintf_r>:
 80129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	4698      	mov	r8, r3
 80129e6:	898b      	ldrh	r3, [r1, #12]
 80129e8:	061b      	lsls	r3, r3, #24
 80129ea:	b09d      	sub	sp, #116	; 0x74
 80129ec:	4607      	mov	r7, r0
 80129ee:	460d      	mov	r5, r1
 80129f0:	4614      	mov	r4, r2
 80129f2:	d50e      	bpl.n	8012a12 <_svfiprintf_r+0x32>
 80129f4:	690b      	ldr	r3, [r1, #16]
 80129f6:	b963      	cbnz	r3, 8012a12 <_svfiprintf_r+0x32>
 80129f8:	2140      	movs	r1, #64	; 0x40
 80129fa:	f7fd fd27 	bl	801044c <_malloc_r>
 80129fe:	6028      	str	r0, [r5, #0]
 8012a00:	6128      	str	r0, [r5, #16]
 8012a02:	b920      	cbnz	r0, 8012a0e <_svfiprintf_r+0x2e>
 8012a04:	230c      	movs	r3, #12
 8012a06:	603b      	str	r3, [r7, #0]
 8012a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a0c:	e0d1      	b.n	8012bb2 <_svfiprintf_r+0x1d2>
 8012a0e:	2340      	movs	r3, #64	; 0x40
 8012a10:	616b      	str	r3, [r5, #20]
 8012a12:	2300      	movs	r3, #0
 8012a14:	9309      	str	r3, [sp, #36]	; 0x24
 8012a16:	2320      	movs	r3, #32
 8012a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a20:	2330      	movs	r3, #48	; 0x30
 8012a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012bcc <_svfiprintf_r+0x1ec>
 8012a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a2a:	f04f 0901 	mov.w	r9, #1
 8012a2e:	4623      	mov	r3, r4
 8012a30:	469a      	mov	sl, r3
 8012a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a36:	b10a      	cbz	r2, 8012a3c <_svfiprintf_r+0x5c>
 8012a38:	2a25      	cmp	r2, #37	; 0x25
 8012a3a:	d1f9      	bne.n	8012a30 <_svfiprintf_r+0x50>
 8012a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8012a40:	d00b      	beq.n	8012a5a <_svfiprintf_r+0x7a>
 8012a42:	465b      	mov	r3, fp
 8012a44:	4622      	mov	r2, r4
 8012a46:	4629      	mov	r1, r5
 8012a48:	4638      	mov	r0, r7
 8012a4a:	f7ff ff6e 	bl	801292a <__ssputs_r>
 8012a4e:	3001      	adds	r0, #1
 8012a50:	f000 80aa 	beq.w	8012ba8 <_svfiprintf_r+0x1c8>
 8012a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a56:	445a      	add	r2, fp
 8012a58:	9209      	str	r2, [sp, #36]	; 0x24
 8012a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 80a2 	beq.w	8012ba8 <_svfiprintf_r+0x1c8>
 8012a64:	2300      	movs	r3, #0
 8012a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a6e:	f10a 0a01 	add.w	sl, sl, #1
 8012a72:	9304      	str	r3, [sp, #16]
 8012a74:	9307      	str	r3, [sp, #28]
 8012a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8012a7c:	4654      	mov	r4, sl
 8012a7e:	2205      	movs	r2, #5
 8012a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a84:	4851      	ldr	r0, [pc, #324]	; (8012bcc <_svfiprintf_r+0x1ec>)
 8012a86:	f7ed fbcb 	bl	8000220 <memchr>
 8012a8a:	9a04      	ldr	r2, [sp, #16]
 8012a8c:	b9d8      	cbnz	r0, 8012ac6 <_svfiprintf_r+0xe6>
 8012a8e:	06d0      	lsls	r0, r2, #27
 8012a90:	bf44      	itt	mi
 8012a92:	2320      	movmi	r3, #32
 8012a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a98:	0711      	lsls	r1, r2, #28
 8012a9a:	bf44      	itt	mi
 8012a9c:	232b      	movmi	r3, #43	; 0x2b
 8012a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8012aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8012aa8:	d015      	beq.n	8012ad6 <_svfiprintf_r+0xf6>
 8012aaa:	9a07      	ldr	r2, [sp, #28]
 8012aac:	4654      	mov	r4, sl
 8012aae:	2000      	movs	r0, #0
 8012ab0:	f04f 0c0a 	mov.w	ip, #10
 8012ab4:	4621      	mov	r1, r4
 8012ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aba:	3b30      	subs	r3, #48	; 0x30
 8012abc:	2b09      	cmp	r3, #9
 8012abe:	d94e      	bls.n	8012b5e <_svfiprintf_r+0x17e>
 8012ac0:	b1b0      	cbz	r0, 8012af0 <_svfiprintf_r+0x110>
 8012ac2:	9207      	str	r2, [sp, #28]
 8012ac4:	e014      	b.n	8012af0 <_svfiprintf_r+0x110>
 8012ac6:	eba0 0308 	sub.w	r3, r0, r8
 8012aca:	fa09 f303 	lsl.w	r3, r9, r3
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	9304      	str	r3, [sp, #16]
 8012ad2:	46a2      	mov	sl, r4
 8012ad4:	e7d2      	b.n	8012a7c <_svfiprintf_r+0x9c>
 8012ad6:	9b03      	ldr	r3, [sp, #12]
 8012ad8:	1d19      	adds	r1, r3, #4
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	9103      	str	r1, [sp, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	bfbb      	ittet	lt
 8012ae2:	425b      	neglt	r3, r3
 8012ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8012ae8:	9307      	strge	r3, [sp, #28]
 8012aea:	9307      	strlt	r3, [sp, #28]
 8012aec:	bfb8      	it	lt
 8012aee:	9204      	strlt	r2, [sp, #16]
 8012af0:	7823      	ldrb	r3, [r4, #0]
 8012af2:	2b2e      	cmp	r3, #46	; 0x2e
 8012af4:	d10c      	bne.n	8012b10 <_svfiprintf_r+0x130>
 8012af6:	7863      	ldrb	r3, [r4, #1]
 8012af8:	2b2a      	cmp	r3, #42	; 0x2a
 8012afa:	d135      	bne.n	8012b68 <_svfiprintf_r+0x188>
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	1d1a      	adds	r2, r3, #4
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	9203      	str	r2, [sp, #12]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	bfb8      	it	lt
 8012b08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012b0c:	3402      	adds	r4, #2
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012bdc <_svfiprintf_r+0x1fc>
 8012b14:	7821      	ldrb	r1, [r4, #0]
 8012b16:	2203      	movs	r2, #3
 8012b18:	4650      	mov	r0, sl
 8012b1a:	f7ed fb81 	bl	8000220 <memchr>
 8012b1e:	b140      	cbz	r0, 8012b32 <_svfiprintf_r+0x152>
 8012b20:	2340      	movs	r3, #64	; 0x40
 8012b22:	eba0 000a 	sub.w	r0, r0, sl
 8012b26:	fa03 f000 	lsl.w	r0, r3, r0
 8012b2a:	9b04      	ldr	r3, [sp, #16]
 8012b2c:	4303      	orrs	r3, r0
 8012b2e:	3401      	adds	r4, #1
 8012b30:	9304      	str	r3, [sp, #16]
 8012b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b36:	4826      	ldr	r0, [pc, #152]	; (8012bd0 <_svfiprintf_r+0x1f0>)
 8012b38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b3c:	2206      	movs	r2, #6
 8012b3e:	f7ed fb6f 	bl	8000220 <memchr>
 8012b42:	2800      	cmp	r0, #0
 8012b44:	d038      	beq.n	8012bb8 <_svfiprintf_r+0x1d8>
 8012b46:	4b23      	ldr	r3, [pc, #140]	; (8012bd4 <_svfiprintf_r+0x1f4>)
 8012b48:	bb1b      	cbnz	r3, 8012b92 <_svfiprintf_r+0x1b2>
 8012b4a:	9b03      	ldr	r3, [sp, #12]
 8012b4c:	3307      	adds	r3, #7
 8012b4e:	f023 0307 	bic.w	r3, r3, #7
 8012b52:	3308      	adds	r3, #8
 8012b54:	9303      	str	r3, [sp, #12]
 8012b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b58:	4433      	add	r3, r6
 8012b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b5c:	e767      	b.n	8012a2e <_svfiprintf_r+0x4e>
 8012b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b62:	460c      	mov	r4, r1
 8012b64:	2001      	movs	r0, #1
 8012b66:	e7a5      	b.n	8012ab4 <_svfiprintf_r+0xd4>
 8012b68:	2300      	movs	r3, #0
 8012b6a:	3401      	adds	r4, #1
 8012b6c:	9305      	str	r3, [sp, #20]
 8012b6e:	4619      	mov	r1, r3
 8012b70:	f04f 0c0a 	mov.w	ip, #10
 8012b74:	4620      	mov	r0, r4
 8012b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b7a:	3a30      	subs	r2, #48	; 0x30
 8012b7c:	2a09      	cmp	r2, #9
 8012b7e:	d903      	bls.n	8012b88 <_svfiprintf_r+0x1a8>
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d0c5      	beq.n	8012b10 <_svfiprintf_r+0x130>
 8012b84:	9105      	str	r1, [sp, #20]
 8012b86:	e7c3      	b.n	8012b10 <_svfiprintf_r+0x130>
 8012b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e7f0      	b.n	8012b74 <_svfiprintf_r+0x194>
 8012b92:	ab03      	add	r3, sp, #12
 8012b94:	9300      	str	r3, [sp, #0]
 8012b96:	462a      	mov	r2, r5
 8012b98:	4b0f      	ldr	r3, [pc, #60]	; (8012bd8 <_svfiprintf_r+0x1f8>)
 8012b9a:	a904      	add	r1, sp, #16
 8012b9c:	4638      	mov	r0, r7
 8012b9e:	f7fd fd4f 	bl	8010640 <_printf_float>
 8012ba2:	1c42      	adds	r2, r0, #1
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	d1d6      	bne.n	8012b56 <_svfiprintf_r+0x176>
 8012ba8:	89ab      	ldrh	r3, [r5, #12]
 8012baa:	065b      	lsls	r3, r3, #25
 8012bac:	f53f af2c 	bmi.w	8012a08 <_svfiprintf_r+0x28>
 8012bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bb2:	b01d      	add	sp, #116	; 0x74
 8012bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb8:	ab03      	add	r3, sp, #12
 8012bba:	9300      	str	r3, [sp, #0]
 8012bbc:	462a      	mov	r2, r5
 8012bbe:	4b06      	ldr	r3, [pc, #24]	; (8012bd8 <_svfiprintf_r+0x1f8>)
 8012bc0:	a904      	add	r1, sp, #16
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	f7fd ffe0 	bl	8010b88 <_printf_i>
 8012bc8:	e7eb      	b.n	8012ba2 <_svfiprintf_r+0x1c2>
 8012bca:	bf00      	nop
 8012bcc:	08018714 	.word	0x08018714
 8012bd0:	0801871e 	.word	0x0801871e
 8012bd4:	08010641 	.word	0x08010641
 8012bd8:	0801292b 	.word	0x0801292b
 8012bdc:	0801871a 	.word	0x0801871a

08012be0 <__sfputc_r>:
 8012be0:	6893      	ldr	r3, [r2, #8]
 8012be2:	3b01      	subs	r3, #1
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	b410      	push	{r4}
 8012be8:	6093      	str	r3, [r2, #8]
 8012bea:	da08      	bge.n	8012bfe <__sfputc_r+0x1e>
 8012bec:	6994      	ldr	r4, [r2, #24]
 8012bee:	42a3      	cmp	r3, r4
 8012bf0:	db01      	blt.n	8012bf6 <__sfputc_r+0x16>
 8012bf2:	290a      	cmp	r1, #10
 8012bf4:	d103      	bne.n	8012bfe <__sfputc_r+0x1e>
 8012bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bfa:	f7fe b949 	b.w	8010e90 <__swbuf_r>
 8012bfe:	6813      	ldr	r3, [r2, #0]
 8012c00:	1c58      	adds	r0, r3, #1
 8012c02:	6010      	str	r0, [r2, #0]
 8012c04:	7019      	strb	r1, [r3, #0]
 8012c06:	4608      	mov	r0, r1
 8012c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <__sfputs_r>:
 8012c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c10:	4606      	mov	r6, r0
 8012c12:	460f      	mov	r7, r1
 8012c14:	4614      	mov	r4, r2
 8012c16:	18d5      	adds	r5, r2, r3
 8012c18:	42ac      	cmp	r4, r5
 8012c1a:	d101      	bne.n	8012c20 <__sfputs_r+0x12>
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	e007      	b.n	8012c30 <__sfputs_r+0x22>
 8012c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c24:	463a      	mov	r2, r7
 8012c26:	4630      	mov	r0, r6
 8012c28:	f7ff ffda 	bl	8012be0 <__sfputc_r>
 8012c2c:	1c43      	adds	r3, r0, #1
 8012c2e:	d1f3      	bne.n	8012c18 <__sfputs_r+0xa>
 8012c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c34 <_vfiprintf_r>:
 8012c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c38:	460d      	mov	r5, r1
 8012c3a:	b09d      	sub	sp, #116	; 0x74
 8012c3c:	4614      	mov	r4, r2
 8012c3e:	4698      	mov	r8, r3
 8012c40:	4606      	mov	r6, r0
 8012c42:	b118      	cbz	r0, 8012c4c <_vfiprintf_r+0x18>
 8012c44:	6983      	ldr	r3, [r0, #24]
 8012c46:	b90b      	cbnz	r3, 8012c4c <_vfiprintf_r+0x18>
 8012c48:	f7ff f994 	bl	8011f74 <__sinit>
 8012c4c:	4b89      	ldr	r3, [pc, #548]	; (8012e74 <_vfiprintf_r+0x240>)
 8012c4e:	429d      	cmp	r5, r3
 8012c50:	d11b      	bne.n	8012c8a <_vfiprintf_r+0x56>
 8012c52:	6875      	ldr	r5, [r6, #4]
 8012c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c56:	07d9      	lsls	r1, r3, #31
 8012c58:	d405      	bmi.n	8012c66 <_vfiprintf_r+0x32>
 8012c5a:	89ab      	ldrh	r3, [r5, #12]
 8012c5c:	059a      	lsls	r2, r3, #22
 8012c5e:	d402      	bmi.n	8012c66 <_vfiprintf_r+0x32>
 8012c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c62:	f7ff fa3c 	bl	80120de <__retarget_lock_acquire_recursive>
 8012c66:	89ab      	ldrh	r3, [r5, #12]
 8012c68:	071b      	lsls	r3, r3, #28
 8012c6a:	d501      	bpl.n	8012c70 <_vfiprintf_r+0x3c>
 8012c6c:	692b      	ldr	r3, [r5, #16]
 8012c6e:	b9eb      	cbnz	r3, 8012cac <_vfiprintf_r+0x78>
 8012c70:	4629      	mov	r1, r5
 8012c72:	4630      	mov	r0, r6
 8012c74:	f7fe f95e 	bl	8010f34 <__swsetup_r>
 8012c78:	b1c0      	cbz	r0, 8012cac <_vfiprintf_r+0x78>
 8012c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c7c:	07dc      	lsls	r4, r3, #31
 8012c7e:	d50e      	bpl.n	8012c9e <_vfiprintf_r+0x6a>
 8012c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c84:	b01d      	add	sp, #116	; 0x74
 8012c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8a:	4b7b      	ldr	r3, [pc, #492]	; (8012e78 <_vfiprintf_r+0x244>)
 8012c8c:	429d      	cmp	r5, r3
 8012c8e:	d101      	bne.n	8012c94 <_vfiprintf_r+0x60>
 8012c90:	68b5      	ldr	r5, [r6, #8]
 8012c92:	e7df      	b.n	8012c54 <_vfiprintf_r+0x20>
 8012c94:	4b79      	ldr	r3, [pc, #484]	; (8012e7c <_vfiprintf_r+0x248>)
 8012c96:	429d      	cmp	r5, r3
 8012c98:	bf08      	it	eq
 8012c9a:	68f5      	ldreq	r5, [r6, #12]
 8012c9c:	e7da      	b.n	8012c54 <_vfiprintf_r+0x20>
 8012c9e:	89ab      	ldrh	r3, [r5, #12]
 8012ca0:	0598      	lsls	r0, r3, #22
 8012ca2:	d4ed      	bmi.n	8012c80 <_vfiprintf_r+0x4c>
 8012ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ca6:	f7ff fa1b 	bl	80120e0 <__retarget_lock_release_recursive>
 8012caa:	e7e9      	b.n	8012c80 <_vfiprintf_r+0x4c>
 8012cac:	2300      	movs	r3, #0
 8012cae:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb0:	2320      	movs	r3, #32
 8012cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cba:	2330      	movs	r3, #48	; 0x30
 8012cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e80 <_vfiprintf_r+0x24c>
 8012cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cc4:	f04f 0901 	mov.w	r9, #1
 8012cc8:	4623      	mov	r3, r4
 8012cca:	469a      	mov	sl, r3
 8012ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd0:	b10a      	cbz	r2, 8012cd6 <_vfiprintf_r+0xa2>
 8012cd2:	2a25      	cmp	r2, #37	; 0x25
 8012cd4:	d1f9      	bne.n	8012cca <_vfiprintf_r+0x96>
 8012cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8012cda:	d00b      	beq.n	8012cf4 <_vfiprintf_r+0xc0>
 8012cdc:	465b      	mov	r3, fp
 8012cde:	4622      	mov	r2, r4
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7ff ff93 	bl	8012c0e <__sfputs_r>
 8012ce8:	3001      	adds	r0, #1
 8012cea:	f000 80aa 	beq.w	8012e42 <_vfiprintf_r+0x20e>
 8012cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cf0:	445a      	add	r2, fp
 8012cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8012cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 80a2 	beq.w	8012e42 <_vfiprintf_r+0x20e>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d08:	f10a 0a01 	add.w	sl, sl, #1
 8012d0c:	9304      	str	r3, [sp, #16]
 8012d0e:	9307      	str	r3, [sp, #28]
 8012d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d14:	931a      	str	r3, [sp, #104]	; 0x68
 8012d16:	4654      	mov	r4, sl
 8012d18:	2205      	movs	r2, #5
 8012d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d1e:	4858      	ldr	r0, [pc, #352]	; (8012e80 <_vfiprintf_r+0x24c>)
 8012d20:	f7ed fa7e 	bl	8000220 <memchr>
 8012d24:	9a04      	ldr	r2, [sp, #16]
 8012d26:	b9d8      	cbnz	r0, 8012d60 <_vfiprintf_r+0x12c>
 8012d28:	06d1      	lsls	r1, r2, #27
 8012d2a:	bf44      	itt	mi
 8012d2c:	2320      	movmi	r3, #32
 8012d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d32:	0713      	lsls	r3, r2, #28
 8012d34:	bf44      	itt	mi
 8012d36:	232b      	movmi	r3, #43	; 0x2b
 8012d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d40:	2b2a      	cmp	r3, #42	; 0x2a
 8012d42:	d015      	beq.n	8012d70 <_vfiprintf_r+0x13c>
 8012d44:	9a07      	ldr	r2, [sp, #28]
 8012d46:	4654      	mov	r4, sl
 8012d48:	2000      	movs	r0, #0
 8012d4a:	f04f 0c0a 	mov.w	ip, #10
 8012d4e:	4621      	mov	r1, r4
 8012d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d54:	3b30      	subs	r3, #48	; 0x30
 8012d56:	2b09      	cmp	r3, #9
 8012d58:	d94e      	bls.n	8012df8 <_vfiprintf_r+0x1c4>
 8012d5a:	b1b0      	cbz	r0, 8012d8a <_vfiprintf_r+0x156>
 8012d5c:	9207      	str	r2, [sp, #28]
 8012d5e:	e014      	b.n	8012d8a <_vfiprintf_r+0x156>
 8012d60:	eba0 0308 	sub.w	r3, r0, r8
 8012d64:	fa09 f303 	lsl.w	r3, r9, r3
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	9304      	str	r3, [sp, #16]
 8012d6c:	46a2      	mov	sl, r4
 8012d6e:	e7d2      	b.n	8012d16 <_vfiprintf_r+0xe2>
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	1d19      	adds	r1, r3, #4
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	9103      	str	r1, [sp, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	bfbb      	ittet	lt
 8012d7c:	425b      	neglt	r3, r3
 8012d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8012d82:	9307      	strge	r3, [sp, #28]
 8012d84:	9307      	strlt	r3, [sp, #28]
 8012d86:	bfb8      	it	lt
 8012d88:	9204      	strlt	r2, [sp, #16]
 8012d8a:	7823      	ldrb	r3, [r4, #0]
 8012d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d8e:	d10c      	bne.n	8012daa <_vfiprintf_r+0x176>
 8012d90:	7863      	ldrb	r3, [r4, #1]
 8012d92:	2b2a      	cmp	r3, #42	; 0x2a
 8012d94:	d135      	bne.n	8012e02 <_vfiprintf_r+0x1ce>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	1d1a      	adds	r2, r3, #4
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	9203      	str	r2, [sp, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	bfb8      	it	lt
 8012da2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012da6:	3402      	adds	r4, #2
 8012da8:	9305      	str	r3, [sp, #20]
 8012daa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e90 <_vfiprintf_r+0x25c>
 8012dae:	7821      	ldrb	r1, [r4, #0]
 8012db0:	2203      	movs	r2, #3
 8012db2:	4650      	mov	r0, sl
 8012db4:	f7ed fa34 	bl	8000220 <memchr>
 8012db8:	b140      	cbz	r0, 8012dcc <_vfiprintf_r+0x198>
 8012dba:	2340      	movs	r3, #64	; 0x40
 8012dbc:	eba0 000a 	sub.w	r0, r0, sl
 8012dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8012dc4:	9b04      	ldr	r3, [sp, #16]
 8012dc6:	4303      	orrs	r3, r0
 8012dc8:	3401      	adds	r4, #1
 8012dca:	9304      	str	r3, [sp, #16]
 8012dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd0:	482c      	ldr	r0, [pc, #176]	; (8012e84 <_vfiprintf_r+0x250>)
 8012dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dd6:	2206      	movs	r2, #6
 8012dd8:	f7ed fa22 	bl	8000220 <memchr>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d03f      	beq.n	8012e60 <_vfiprintf_r+0x22c>
 8012de0:	4b29      	ldr	r3, [pc, #164]	; (8012e88 <_vfiprintf_r+0x254>)
 8012de2:	bb1b      	cbnz	r3, 8012e2c <_vfiprintf_r+0x1f8>
 8012de4:	9b03      	ldr	r3, [sp, #12]
 8012de6:	3307      	adds	r3, #7
 8012de8:	f023 0307 	bic.w	r3, r3, #7
 8012dec:	3308      	adds	r3, #8
 8012dee:	9303      	str	r3, [sp, #12]
 8012df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df2:	443b      	add	r3, r7
 8012df4:	9309      	str	r3, [sp, #36]	; 0x24
 8012df6:	e767      	b.n	8012cc8 <_vfiprintf_r+0x94>
 8012df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	2001      	movs	r0, #1
 8012e00:	e7a5      	b.n	8012d4e <_vfiprintf_r+0x11a>
 8012e02:	2300      	movs	r3, #0
 8012e04:	3401      	adds	r4, #1
 8012e06:	9305      	str	r3, [sp, #20]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	f04f 0c0a 	mov.w	ip, #10
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e14:	3a30      	subs	r2, #48	; 0x30
 8012e16:	2a09      	cmp	r2, #9
 8012e18:	d903      	bls.n	8012e22 <_vfiprintf_r+0x1ee>
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d0c5      	beq.n	8012daa <_vfiprintf_r+0x176>
 8012e1e:	9105      	str	r1, [sp, #20]
 8012e20:	e7c3      	b.n	8012daa <_vfiprintf_r+0x176>
 8012e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e26:	4604      	mov	r4, r0
 8012e28:	2301      	movs	r3, #1
 8012e2a:	e7f0      	b.n	8012e0e <_vfiprintf_r+0x1da>
 8012e2c:	ab03      	add	r3, sp, #12
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	462a      	mov	r2, r5
 8012e32:	4b16      	ldr	r3, [pc, #88]	; (8012e8c <_vfiprintf_r+0x258>)
 8012e34:	a904      	add	r1, sp, #16
 8012e36:	4630      	mov	r0, r6
 8012e38:	f7fd fc02 	bl	8010640 <_printf_float>
 8012e3c:	4607      	mov	r7, r0
 8012e3e:	1c78      	adds	r0, r7, #1
 8012e40:	d1d6      	bne.n	8012df0 <_vfiprintf_r+0x1bc>
 8012e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e44:	07d9      	lsls	r1, r3, #31
 8012e46:	d405      	bmi.n	8012e54 <_vfiprintf_r+0x220>
 8012e48:	89ab      	ldrh	r3, [r5, #12]
 8012e4a:	059a      	lsls	r2, r3, #22
 8012e4c:	d402      	bmi.n	8012e54 <_vfiprintf_r+0x220>
 8012e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e50:	f7ff f946 	bl	80120e0 <__retarget_lock_release_recursive>
 8012e54:	89ab      	ldrh	r3, [r5, #12]
 8012e56:	065b      	lsls	r3, r3, #25
 8012e58:	f53f af12 	bmi.w	8012c80 <_vfiprintf_r+0x4c>
 8012e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e5e:	e711      	b.n	8012c84 <_vfiprintf_r+0x50>
 8012e60:	ab03      	add	r3, sp, #12
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	462a      	mov	r2, r5
 8012e66:	4b09      	ldr	r3, [pc, #36]	; (8012e8c <_vfiprintf_r+0x258>)
 8012e68:	a904      	add	r1, sp, #16
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	f7fd fe8c 	bl	8010b88 <_printf_i>
 8012e70:	e7e4      	b.n	8012e3c <_vfiprintf_r+0x208>
 8012e72:	bf00      	nop
 8012e74:	08018578 	.word	0x08018578
 8012e78:	08018598 	.word	0x08018598
 8012e7c:	08018558 	.word	0x08018558
 8012e80:	08018714 	.word	0x08018714
 8012e84:	0801871e 	.word	0x0801871e
 8012e88:	08010641 	.word	0x08010641
 8012e8c:	08012c0f 	.word	0x08012c0f
 8012e90:	0801871a 	.word	0x0801871a

08012e94 <_putc_r>:
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	460d      	mov	r5, r1
 8012e98:	4614      	mov	r4, r2
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	b118      	cbz	r0, 8012ea6 <_putc_r+0x12>
 8012e9e:	6983      	ldr	r3, [r0, #24]
 8012ea0:	b90b      	cbnz	r3, 8012ea6 <_putc_r+0x12>
 8012ea2:	f7ff f867 	bl	8011f74 <__sinit>
 8012ea6:	4b1c      	ldr	r3, [pc, #112]	; (8012f18 <_putc_r+0x84>)
 8012ea8:	429c      	cmp	r4, r3
 8012eaa:	d124      	bne.n	8012ef6 <_putc_r+0x62>
 8012eac:	6874      	ldr	r4, [r6, #4]
 8012eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eb0:	07d8      	lsls	r0, r3, #31
 8012eb2:	d405      	bmi.n	8012ec0 <_putc_r+0x2c>
 8012eb4:	89a3      	ldrh	r3, [r4, #12]
 8012eb6:	0599      	lsls	r1, r3, #22
 8012eb8:	d402      	bmi.n	8012ec0 <_putc_r+0x2c>
 8012eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ebc:	f7ff f90f 	bl	80120de <__retarget_lock_acquire_recursive>
 8012ec0:	68a3      	ldr	r3, [r4, #8]
 8012ec2:	3b01      	subs	r3, #1
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	60a3      	str	r3, [r4, #8]
 8012ec8:	da05      	bge.n	8012ed6 <_putc_r+0x42>
 8012eca:	69a2      	ldr	r2, [r4, #24]
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	db1c      	blt.n	8012f0a <_putc_r+0x76>
 8012ed0:	b2eb      	uxtb	r3, r5
 8012ed2:	2b0a      	cmp	r3, #10
 8012ed4:	d019      	beq.n	8012f0a <_putc_r+0x76>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	6022      	str	r2, [r4, #0]
 8012edc:	701d      	strb	r5, [r3, #0]
 8012ede:	b2ed      	uxtb	r5, r5
 8012ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ee2:	07da      	lsls	r2, r3, #31
 8012ee4:	d405      	bmi.n	8012ef2 <_putc_r+0x5e>
 8012ee6:	89a3      	ldrh	r3, [r4, #12]
 8012ee8:	059b      	lsls	r3, r3, #22
 8012eea:	d402      	bmi.n	8012ef2 <_putc_r+0x5e>
 8012eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012eee:	f7ff f8f7 	bl	80120e0 <__retarget_lock_release_recursive>
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	bd70      	pop	{r4, r5, r6, pc}
 8012ef6:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <_putc_r+0x88>)
 8012ef8:	429c      	cmp	r4, r3
 8012efa:	d101      	bne.n	8012f00 <_putc_r+0x6c>
 8012efc:	68b4      	ldr	r4, [r6, #8]
 8012efe:	e7d6      	b.n	8012eae <_putc_r+0x1a>
 8012f00:	4b07      	ldr	r3, [pc, #28]	; (8012f20 <_putc_r+0x8c>)
 8012f02:	429c      	cmp	r4, r3
 8012f04:	bf08      	it	eq
 8012f06:	68f4      	ldreq	r4, [r6, #12]
 8012f08:	e7d1      	b.n	8012eae <_putc_r+0x1a>
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	4622      	mov	r2, r4
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f7fd ffbe 	bl	8010e90 <__swbuf_r>
 8012f14:	4605      	mov	r5, r0
 8012f16:	e7e3      	b.n	8012ee0 <_putc_r+0x4c>
 8012f18:	08018578 	.word	0x08018578
 8012f1c:	08018598 	.word	0x08018598
 8012f20:	08018558 	.word	0x08018558

08012f24 <__sread>:
 8012f24:	b510      	push	{r4, lr}
 8012f26:	460c      	mov	r4, r1
 8012f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f2c:	f000 f8d0 	bl	80130d0 <_read_r>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	bfab      	itete	ge
 8012f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f36:	89a3      	ldrhlt	r3, [r4, #12]
 8012f38:	181b      	addge	r3, r3, r0
 8012f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f3e:	bfac      	ite	ge
 8012f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f42:	81a3      	strhlt	r3, [r4, #12]
 8012f44:	bd10      	pop	{r4, pc}

08012f46 <__swrite>:
 8012f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4a:	461f      	mov	r7, r3
 8012f4c:	898b      	ldrh	r3, [r1, #12]
 8012f4e:	05db      	lsls	r3, r3, #23
 8012f50:	4605      	mov	r5, r0
 8012f52:	460c      	mov	r4, r1
 8012f54:	4616      	mov	r6, r2
 8012f56:	d505      	bpl.n	8012f64 <__swrite+0x1e>
 8012f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f5c:	2302      	movs	r3, #2
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f000 f870 	bl	8013044 <_lseek_r>
 8012f64:	89a3      	ldrh	r3, [r4, #12]
 8012f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f6e:	81a3      	strh	r3, [r4, #12]
 8012f70:	4632      	mov	r2, r6
 8012f72:	463b      	mov	r3, r7
 8012f74:	4628      	mov	r0, r5
 8012f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7a:	f000 b817 	b.w	8012fac <_write_r>

08012f7e <__sseek>:
 8012f7e:	b510      	push	{r4, lr}
 8012f80:	460c      	mov	r4, r1
 8012f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f86:	f000 f85d 	bl	8013044 <_lseek_r>
 8012f8a:	1c43      	adds	r3, r0, #1
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	bf15      	itete	ne
 8012f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f9a:	81a3      	strheq	r3, [r4, #12]
 8012f9c:	bf18      	it	ne
 8012f9e:	81a3      	strhne	r3, [r4, #12]
 8012fa0:	bd10      	pop	{r4, pc}

08012fa2 <__sclose>:
 8012fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa6:	f000 b81b 	b.w	8012fe0 <_close_r>
	...

08012fac <_write_r>:
 8012fac:	b538      	push	{r3, r4, r5, lr}
 8012fae:	4d07      	ldr	r5, [pc, #28]	; (8012fcc <_write_r+0x20>)
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	4608      	mov	r0, r1
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	602a      	str	r2, [r5, #0]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	f7f0 fc77 	bl	80038ae <_write>
 8012fc0:	1c43      	adds	r3, r0, #1
 8012fc2:	d102      	bne.n	8012fca <_write_r+0x1e>
 8012fc4:	682b      	ldr	r3, [r5, #0]
 8012fc6:	b103      	cbz	r3, 8012fca <_write_r+0x1e>
 8012fc8:	6023      	str	r3, [r4, #0]
 8012fca:	bd38      	pop	{r3, r4, r5, pc}
 8012fcc:	20041328 	.word	0x20041328

08012fd0 <abort>:
 8012fd0:	b508      	push	{r3, lr}
 8012fd2:	2006      	movs	r0, #6
 8012fd4:	f000 f8b6 	bl	8013144 <raise>
 8012fd8:	2001      	movs	r0, #1
 8012fda:	f7f0 fc41 	bl	8003860 <_exit>
	...

08012fe0 <_close_r>:
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4d06      	ldr	r5, [pc, #24]	; (8012ffc <_close_r+0x1c>)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	4608      	mov	r0, r1
 8012fea:	602b      	str	r3, [r5, #0]
 8012fec:	f7f0 fc7b 	bl	80038e6 <_close>
 8012ff0:	1c43      	adds	r3, r0, #1
 8012ff2:	d102      	bne.n	8012ffa <_close_r+0x1a>
 8012ff4:	682b      	ldr	r3, [r5, #0]
 8012ff6:	b103      	cbz	r3, 8012ffa <_close_r+0x1a>
 8012ff8:	6023      	str	r3, [r4, #0]
 8012ffa:	bd38      	pop	{r3, r4, r5, pc}
 8012ffc:	20041328 	.word	0x20041328

08013000 <_fstat_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4d07      	ldr	r5, [pc, #28]	; (8013020 <_fstat_r+0x20>)
 8013004:	2300      	movs	r3, #0
 8013006:	4604      	mov	r4, r0
 8013008:	4608      	mov	r0, r1
 801300a:	4611      	mov	r1, r2
 801300c:	602b      	str	r3, [r5, #0]
 801300e:	f7f0 fc76 	bl	80038fe <_fstat>
 8013012:	1c43      	adds	r3, r0, #1
 8013014:	d102      	bne.n	801301c <_fstat_r+0x1c>
 8013016:	682b      	ldr	r3, [r5, #0]
 8013018:	b103      	cbz	r3, 801301c <_fstat_r+0x1c>
 801301a:	6023      	str	r3, [r4, #0]
 801301c:	bd38      	pop	{r3, r4, r5, pc}
 801301e:	bf00      	nop
 8013020:	20041328 	.word	0x20041328

08013024 <_isatty_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d06      	ldr	r5, [pc, #24]	; (8013040 <_isatty_r+0x1c>)
 8013028:	2300      	movs	r3, #0
 801302a:	4604      	mov	r4, r0
 801302c:	4608      	mov	r0, r1
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	f7f0 fc75 	bl	800391e <_isatty>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_isatty_r+0x1a>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	b103      	cbz	r3, 801303e <_isatty_r+0x1a>
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	20041328 	.word	0x20041328

08013044 <_lseek_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4d07      	ldr	r5, [pc, #28]	; (8013064 <_lseek_r+0x20>)
 8013048:	4604      	mov	r4, r0
 801304a:	4608      	mov	r0, r1
 801304c:	4611      	mov	r1, r2
 801304e:	2200      	movs	r2, #0
 8013050:	602a      	str	r2, [r5, #0]
 8013052:	461a      	mov	r2, r3
 8013054:	f7f0 fc6e 	bl	8003934 <_lseek>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_lseek_r+0x1e>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_lseek_r+0x1e>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	20041328 	.word	0x20041328

08013068 <__ascii_mbtowc>:
 8013068:	b082      	sub	sp, #8
 801306a:	b901      	cbnz	r1, 801306e <__ascii_mbtowc+0x6>
 801306c:	a901      	add	r1, sp, #4
 801306e:	b142      	cbz	r2, 8013082 <__ascii_mbtowc+0x1a>
 8013070:	b14b      	cbz	r3, 8013086 <__ascii_mbtowc+0x1e>
 8013072:	7813      	ldrb	r3, [r2, #0]
 8013074:	600b      	str	r3, [r1, #0]
 8013076:	7812      	ldrb	r2, [r2, #0]
 8013078:	1e10      	subs	r0, r2, #0
 801307a:	bf18      	it	ne
 801307c:	2001      	movne	r0, #1
 801307e:	b002      	add	sp, #8
 8013080:	4770      	bx	lr
 8013082:	4610      	mov	r0, r2
 8013084:	e7fb      	b.n	801307e <__ascii_mbtowc+0x16>
 8013086:	f06f 0001 	mvn.w	r0, #1
 801308a:	e7f8      	b.n	801307e <__ascii_mbtowc+0x16>

0801308c <memmove>:
 801308c:	4288      	cmp	r0, r1
 801308e:	b510      	push	{r4, lr}
 8013090:	eb01 0402 	add.w	r4, r1, r2
 8013094:	d902      	bls.n	801309c <memmove+0x10>
 8013096:	4284      	cmp	r4, r0
 8013098:	4623      	mov	r3, r4
 801309a:	d807      	bhi.n	80130ac <memmove+0x20>
 801309c:	1e43      	subs	r3, r0, #1
 801309e:	42a1      	cmp	r1, r4
 80130a0:	d008      	beq.n	80130b4 <memmove+0x28>
 80130a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130aa:	e7f8      	b.n	801309e <memmove+0x12>
 80130ac:	4402      	add	r2, r0
 80130ae:	4601      	mov	r1, r0
 80130b0:	428a      	cmp	r2, r1
 80130b2:	d100      	bne.n	80130b6 <memmove+0x2a>
 80130b4:	bd10      	pop	{r4, pc}
 80130b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130be:	e7f7      	b.n	80130b0 <memmove+0x24>

080130c0 <_malloc_usable_size_r>:
 80130c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130c4:	1f18      	subs	r0, r3, #4
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	bfbc      	itt	lt
 80130ca:	580b      	ldrlt	r3, [r1, r0]
 80130cc:	18c0      	addlt	r0, r0, r3
 80130ce:	4770      	bx	lr

080130d0 <_read_r>:
 80130d0:	b538      	push	{r3, r4, r5, lr}
 80130d2:	4d07      	ldr	r5, [pc, #28]	; (80130f0 <_read_r+0x20>)
 80130d4:	4604      	mov	r4, r0
 80130d6:	4608      	mov	r0, r1
 80130d8:	4611      	mov	r1, r2
 80130da:	2200      	movs	r2, #0
 80130dc:	602a      	str	r2, [r5, #0]
 80130de:	461a      	mov	r2, r3
 80130e0:	f7f0 fbc8 	bl	8003874 <_read>
 80130e4:	1c43      	adds	r3, r0, #1
 80130e6:	d102      	bne.n	80130ee <_read_r+0x1e>
 80130e8:	682b      	ldr	r3, [r5, #0]
 80130ea:	b103      	cbz	r3, 80130ee <_read_r+0x1e>
 80130ec:	6023      	str	r3, [r4, #0]
 80130ee:	bd38      	pop	{r3, r4, r5, pc}
 80130f0:	20041328 	.word	0x20041328

080130f4 <_raise_r>:
 80130f4:	291f      	cmp	r1, #31
 80130f6:	b538      	push	{r3, r4, r5, lr}
 80130f8:	4604      	mov	r4, r0
 80130fa:	460d      	mov	r5, r1
 80130fc:	d904      	bls.n	8013108 <_raise_r+0x14>
 80130fe:	2316      	movs	r3, #22
 8013100:	6003      	str	r3, [r0, #0]
 8013102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013106:	bd38      	pop	{r3, r4, r5, pc}
 8013108:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801310a:	b112      	cbz	r2, 8013112 <_raise_r+0x1e>
 801310c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013110:	b94b      	cbnz	r3, 8013126 <_raise_r+0x32>
 8013112:	4620      	mov	r0, r4
 8013114:	f000 f830 	bl	8013178 <_getpid_r>
 8013118:	462a      	mov	r2, r5
 801311a:	4601      	mov	r1, r0
 801311c:	4620      	mov	r0, r4
 801311e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013122:	f000 b817 	b.w	8013154 <_kill_r>
 8013126:	2b01      	cmp	r3, #1
 8013128:	d00a      	beq.n	8013140 <_raise_r+0x4c>
 801312a:	1c59      	adds	r1, r3, #1
 801312c:	d103      	bne.n	8013136 <_raise_r+0x42>
 801312e:	2316      	movs	r3, #22
 8013130:	6003      	str	r3, [r0, #0]
 8013132:	2001      	movs	r0, #1
 8013134:	e7e7      	b.n	8013106 <_raise_r+0x12>
 8013136:	2400      	movs	r4, #0
 8013138:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801313c:	4628      	mov	r0, r5
 801313e:	4798      	blx	r3
 8013140:	2000      	movs	r0, #0
 8013142:	e7e0      	b.n	8013106 <_raise_r+0x12>

08013144 <raise>:
 8013144:	4b02      	ldr	r3, [pc, #8]	; (8013150 <raise+0xc>)
 8013146:	4601      	mov	r1, r0
 8013148:	6818      	ldr	r0, [r3, #0]
 801314a:	f7ff bfd3 	b.w	80130f4 <_raise_r>
 801314e:	bf00      	nop
 8013150:	2000076c 	.word	0x2000076c

08013154 <_kill_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4d07      	ldr	r5, [pc, #28]	; (8013174 <_kill_r+0x20>)
 8013158:	2300      	movs	r3, #0
 801315a:	4604      	mov	r4, r0
 801315c:	4608      	mov	r0, r1
 801315e:	4611      	mov	r1, r2
 8013160:	602b      	str	r3, [r5, #0]
 8013162:	f7f0 fb6d 	bl	8003840 <_kill>
 8013166:	1c43      	adds	r3, r0, #1
 8013168:	d102      	bne.n	8013170 <_kill_r+0x1c>
 801316a:	682b      	ldr	r3, [r5, #0]
 801316c:	b103      	cbz	r3, 8013170 <_kill_r+0x1c>
 801316e:	6023      	str	r3, [r4, #0]
 8013170:	bd38      	pop	{r3, r4, r5, pc}
 8013172:	bf00      	nop
 8013174:	20041328 	.word	0x20041328

08013178 <_getpid_r>:
 8013178:	f7f0 bb5a 	b.w	8003830 <_getpid>

0801317c <__ascii_wctomb>:
 801317c:	b149      	cbz	r1, 8013192 <__ascii_wctomb+0x16>
 801317e:	2aff      	cmp	r2, #255	; 0xff
 8013180:	bf85      	ittet	hi
 8013182:	238a      	movhi	r3, #138	; 0x8a
 8013184:	6003      	strhi	r3, [r0, #0]
 8013186:	700a      	strbls	r2, [r1, #0]
 8013188:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801318c:	bf98      	it	ls
 801318e:	2001      	movls	r0, #1
 8013190:	4770      	bx	lr
 8013192:	4608      	mov	r0, r1
 8013194:	4770      	bx	lr

08013196 <fabsf>:
 8013196:	ee10 3a10 	vmov	r3, s0
 801319a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801319e:	ee00 3a10 	vmov	s0, r3
 80131a2:	4770      	bx	lr

080131a4 <tanhf>:
 80131a4:	b510      	push	{r4, lr}
 80131a6:	ee10 4a10 	vmov	r4, s0
 80131aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80131ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80131b2:	ed2d 8b02 	vpush	{d8}
 80131b6:	eeb0 7a40 	vmov.f32	s14, s0
 80131ba:	db0c      	blt.n	80131d6 <tanhf+0x32>
 80131bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131c0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80131c4:	2c00      	cmp	r4, #0
 80131c6:	bfac      	ite	ge
 80131c8:	ee37 0a80 	vaddge.f32	s0, s15, s0
 80131cc:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80131d0:	ecbd 8b02 	vpop	{d8}
 80131d4:	bd10      	pop	{r4, pc}
 80131d6:	4a1b      	ldr	r2, [pc, #108]	; (8013244 <tanhf+0xa0>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	dc30      	bgt.n	801323e <tanhf+0x9a>
 80131dc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80131e0:	da06      	bge.n	80131f0 <tanhf+0x4c>
 80131e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80131e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80131ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 80131ee:	e7ef      	b.n	80131d0 <tanhf+0x2c>
 80131f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80131f4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80131f8:	db12      	blt.n	8013220 <tanhf+0x7c>
 80131fa:	f7ff ffcc 	bl	8013196 <fabsf>
 80131fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013202:	f000 f953 	bl	80134ac <expm1f>
 8013206:	ee30 0a08 	vadd.f32	s0, s0, s16
 801320a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801320e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013212:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013216:	2c00      	cmp	r4, #0
 8013218:	bfb8      	it	lt
 801321a:	eeb1 0a40 	vneglt.f32	s0, s0
 801321e:	e7d7      	b.n	80131d0 <tanhf+0x2c>
 8013220:	f7ff ffb9 	bl	8013196 <fabsf>
 8013224:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8013228:	ee20 0a27 	vmul.f32	s0, s0, s15
 801322c:	f000 f93e 	bl	80134ac <expm1f>
 8013230:	ee70 7a08 	vadd.f32	s15, s0, s16
 8013234:	eeb1 7a40 	vneg.f32	s14, s0
 8013238:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801323c:	e7eb      	b.n	8013216 <tanhf+0x72>
 801323e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013242:	e7e8      	b.n	8013216 <tanhf+0x72>
 8013244:	41afffff 	.word	0x41afffff

08013248 <expf>:
 8013248:	b508      	push	{r3, lr}
 801324a:	ed2d 8b02 	vpush	{d8}
 801324e:	eef0 8a40 	vmov.f32	s17, s0
 8013252:	f000 f837 	bl	80132c4 <__ieee754_expf>
 8013256:	4b16      	ldr	r3, [pc, #88]	; (80132b0 <expf+0x68>)
 8013258:	f993 3000 	ldrsb.w	r3, [r3]
 801325c:	3301      	adds	r3, #1
 801325e:	eeb0 8a40 	vmov.f32	s16, s0
 8013262:	d011      	beq.n	8013288 <expf+0x40>
 8013264:	eeb0 0a68 	vmov.f32	s0, s17
 8013268:	f000 fa40 	bl	80136ec <finitef>
 801326c:	b160      	cbz	r0, 8013288 <expf+0x40>
 801326e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80132b4 <expf+0x6c>
 8013272:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327a:	dd0a      	ble.n	8013292 <expf+0x4a>
 801327c:	f7fd f84e 	bl	801031c <__errno>
 8013280:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80132b8 <expf+0x70>
 8013284:	2322      	movs	r3, #34	; 0x22
 8013286:	6003      	str	r3, [r0, #0]
 8013288:	eeb0 0a48 	vmov.f32	s0, s16
 801328c:	ecbd 8b02 	vpop	{d8}
 8013290:	bd08      	pop	{r3, pc}
 8013292:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80132bc <expf+0x74>
 8013296:	eef4 8ae7 	vcmpe.f32	s17, s15
 801329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329e:	d5f3      	bpl.n	8013288 <expf+0x40>
 80132a0:	f7fd f83c 	bl	801031c <__errno>
 80132a4:	2322      	movs	r3, #34	; 0x22
 80132a6:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80132c0 <expf+0x78>
 80132aa:	6003      	str	r3, [r0, #0]
 80132ac:	e7ec      	b.n	8013288 <expf+0x40>
 80132ae:	bf00      	nop
 80132b0:	2000093c 	.word	0x2000093c
 80132b4:	42b17180 	.word	0x42b17180
 80132b8:	7f800000 	.word	0x7f800000
 80132bc:	c2cff1b5 	.word	0xc2cff1b5
 80132c0:	00000000 	.word	0x00000000

080132c4 <__ieee754_expf>:
 80132c4:	ee10 2a10 	vmov	r2, s0
 80132c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80132cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80132d0:	d902      	bls.n	80132d8 <__ieee754_expf+0x14>
 80132d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80132d6:	4770      	bx	lr
 80132d8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80132dc:	d106      	bne.n	80132ec <__ieee754_expf+0x28>
 80132de:	eddf 7a51 	vldr	s15, [pc, #324]	; 8013424 <__ieee754_expf+0x160>
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	bf18      	it	ne
 80132e6:	eeb0 0a67 	vmovne.f32	s0, s15
 80132ea:	4770      	bx	lr
 80132ec:	484e      	ldr	r0, [pc, #312]	; (8013428 <__ieee754_expf+0x164>)
 80132ee:	4282      	cmp	r2, r0
 80132f0:	dd04      	ble.n	80132fc <__ieee754_expf+0x38>
 80132f2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801342c <__ieee754_expf+0x168>
 80132f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80132fa:	4770      	bx	lr
 80132fc:	2a00      	cmp	r2, #0
 80132fe:	da03      	bge.n	8013308 <__ieee754_expf+0x44>
 8013300:	4a4b      	ldr	r2, [pc, #300]	; (8013430 <__ieee754_expf+0x16c>)
 8013302:	4291      	cmp	r1, r2
 8013304:	f200 808a 	bhi.w	801341c <__ieee754_expf+0x158>
 8013308:	4a4a      	ldr	r2, [pc, #296]	; (8013434 <__ieee754_expf+0x170>)
 801330a:	4291      	cmp	r1, r2
 801330c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013310:	d954      	bls.n	80133bc <__ieee754_expf+0xf8>
 8013312:	4a49      	ldr	r2, [pc, #292]	; (8013438 <__ieee754_expf+0x174>)
 8013314:	4291      	cmp	r1, r2
 8013316:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801331a:	d836      	bhi.n	801338a <__ieee754_expf+0xc6>
 801331c:	4947      	ldr	r1, [pc, #284]	; (801343c <__ieee754_expf+0x178>)
 801331e:	4411      	add	r1, r2
 8013320:	ed91 7a00 	vldr	s14, [r1]
 8013324:	4946      	ldr	r1, [pc, #280]	; (8013440 <__ieee754_expf+0x17c>)
 8013326:	440a      	add	r2, r1
 8013328:	edd2 7a00 	vldr	s15, [r2]
 801332c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013330:	f1c3 0201 	rsb	r2, r3, #1
 8013334:	1ad2      	subs	r2, r2, r3
 8013336:	ee37 0a67 	vsub.f32	s0, s14, s15
 801333a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801333e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013444 <__ieee754_expf+0x180>
 8013342:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013448 <__ieee754_expf+0x184>
 8013346:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801334a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801344c <__ieee754_expf+0x188>
 801334e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8013352:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013450 <__ieee754_expf+0x18c>
 8013356:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801335a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013454 <__ieee754_expf+0x190>
 801335e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8013362:	eeb0 5a40 	vmov.f32	s10, s0
 8013366:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801336a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801336e:	eef0 6a45 	vmov.f32	s13, s10
 8013372:	ee20 5a05 	vmul.f32	s10, s0, s10
 8013376:	bb92      	cbnz	r2, 80133de <__ieee754_expf+0x11a>
 8013378:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801337c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013380:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013384:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013388:	4770      	bx	lr
 801338a:	4b33      	ldr	r3, [pc, #204]	; (8013458 <__ieee754_expf+0x194>)
 801338c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801345c <__ieee754_expf+0x198>
 8013390:	4413      	add	r3, r2
 8013392:	edd3 7a00 	vldr	s15, [r3]
 8013396:	eee0 7a07 	vfma.f32	s15, s0, s14
 801339a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013460 <__ieee754_expf+0x19c>
 801339e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133a2:	ee17 2a90 	vmov	r2, s15
 80133a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133aa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80133ae:	eeb0 7a40 	vmov.f32	s14, s0
 80133b2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013464 <__ieee754_expf+0x1a0>
 80133b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80133ba:	e7bc      	b.n	8013336 <__ieee754_expf+0x72>
 80133bc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80133c0:	d20b      	bcs.n	80133da <__ieee754_expf+0x116>
 80133c2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801342c <__ieee754_expf+0x168>
 80133c6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80133ca:	eef4 6ac6 	vcmpe.f32	s13, s12
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	dd02      	ble.n	80133da <__ieee754_expf+0x116>
 80133d4:	ee30 0a06 	vadd.f32	s0, s0, s12
 80133d8:	4770      	bx	lr
 80133da:	2200      	movs	r2, #0
 80133dc:	e7ad      	b.n	801333a <__ieee754_expf+0x76>
 80133de:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80133e2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80133e6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80133ea:	bfb8      	it	lt
 80133ec:	3264      	addlt	r2, #100	; 0x64
 80133ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80133f2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80133f6:	ee76 7a40 	vsub.f32	s15, s12, s0
 80133fa:	ee17 3a90 	vmov	r3, s15
 80133fe:	bfab      	itete	ge
 8013400:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013404:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013408:	ee00 3a10 	vmovge	s0, r3
 801340c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013468 <__ieee754_expf+0x1a4>
 8013410:	bfbc      	itt	lt
 8013412:	ee00 3a10 	vmovlt	s0, r3
 8013416:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801341a:	4770      	bx	lr
 801341c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013424 <__ieee754_expf+0x160>
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop
 8013424:	00000000 	.word	0x00000000
 8013428:	42b17217 	.word	0x42b17217
 801342c:	7149f2ca 	.word	0x7149f2ca
 8013430:	42cff1b5 	.word	0x42cff1b5
 8013434:	3eb17218 	.word	0x3eb17218
 8013438:	3f851591 	.word	0x3f851591
 801343c:	08018838 	.word	0x08018838
 8013440:	08018840 	.word	0x08018840
 8013444:	3331bb4c 	.word	0x3331bb4c
 8013448:	b5ddea0e 	.word	0xb5ddea0e
 801344c:	388ab355 	.word	0x388ab355
 8013450:	bb360b61 	.word	0xbb360b61
 8013454:	3e2aaaab 	.word	0x3e2aaaab
 8013458:	08018830 	.word	0x08018830
 801345c:	3fb8aa3b 	.word	0x3fb8aa3b
 8013460:	3f317180 	.word	0x3f317180
 8013464:	3717f7d1 	.word	0x3717f7d1
 8013468:	0d800000 	.word	0x0d800000

0801346c <with_errnof>:
 801346c:	b513      	push	{r0, r1, r4, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013474:	f7fc ff52 	bl	801031c <__errno>
 8013478:	ed9d 0a01 	vldr	s0, [sp, #4]
 801347c:	6004      	str	r4, [r0, #0]
 801347e:	b002      	add	sp, #8
 8013480:	bd10      	pop	{r4, pc}
	...

08013484 <xflowf.constprop.0>:
 8013484:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80134a0 <xflowf.constprop.0+0x1c>
 8013488:	eddf 7a06 	vldr	s15, [pc, #24]	; 80134a4 <xflowf.constprop.0+0x20>
 801348c:	2800      	cmp	r0, #0
 801348e:	bf08      	it	eq
 8013490:	eef0 7a40 	vmoveq.f32	s15, s0
 8013494:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013498:	2022      	movs	r0, #34	; 0x22
 801349a:	f7ff bfe7 	b.w	801346c <with_errnof>
 801349e:	bf00      	nop
 80134a0:	70000000 	.word	0x70000000
 80134a4:	f0000000 	.word	0xf0000000

080134a8 <__math_oflowf>:
 80134a8:	f7ff bfec 	b.w	8013484 <xflowf.constprop.0>

080134ac <expm1f>:
 80134ac:	ee10 2a10 	vmov	r2, s0
 80134b0:	497f      	ldr	r1, [pc, #508]	; (80136b0 <expm1f+0x204>)
 80134b2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80134b6:	428b      	cmp	r3, r1
 80134b8:	d921      	bls.n	80134fe <expm1f+0x52>
 80134ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80134be:	d902      	bls.n	80134c6 <expm1f+0x1a>
 80134c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80134c4:	4770      	bx	lr
 80134c6:	d106      	bne.n	80134d6 <expm1f+0x2a>
 80134c8:	2a00      	cmp	r2, #0
 80134ca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80134ce:	bfb8      	it	lt
 80134d0:	eeb0 0a67 	vmovlt.f32	s0, s15
 80134d4:	4770      	bx	lr
 80134d6:	2a00      	cmp	r2, #0
 80134d8:	db05      	blt.n	80134e6 <expm1f+0x3a>
 80134da:	4976      	ldr	r1, [pc, #472]	; (80136b4 <expm1f+0x208>)
 80134dc:	428b      	cmp	r3, r1
 80134de:	d960      	bls.n	80135a2 <expm1f+0xf6>
 80134e0:	2000      	movs	r0, #0
 80134e2:	f7ff bfe1 	b.w	80134a8 <__math_oflowf>
 80134e6:	eddf 7a74 	vldr	s15, [pc, #464]	; 80136b8 <expm1f+0x20c>
 80134ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 80134ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80134f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f6:	d554      	bpl.n	80135a2 <expm1f+0xf6>
 80134f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80134fc:	4770      	bx	lr
 80134fe:	496f      	ldr	r1, [pc, #444]	; (80136bc <expm1f+0x210>)
 8013500:	428b      	cmp	r3, r1
 8013502:	d96b      	bls.n	80135dc <expm1f+0x130>
 8013504:	496e      	ldr	r1, [pc, #440]	; (80136c0 <expm1f+0x214>)
 8013506:	428b      	cmp	r3, r1
 8013508:	d84b      	bhi.n	80135a2 <expm1f+0xf6>
 801350a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80136c4 <expm1f+0x218>
 801350e:	2a00      	cmp	r2, #0
 8013510:	bfa7      	ittee	ge
 8013512:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8013516:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 80136c8 <expm1f+0x21c>
 801351a:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 80136cc <expm1f+0x220>
 801351e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8013522:	bfac      	ite	ge
 8013524:	2301      	movge	r3, #1
 8013526:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801352a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801352e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013536:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801353a:	ee20 5a25 	vmul.f32	s10, s0, s11
 801353e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80136d0 <expm1f+0x224>
 8013542:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80136d4 <expm1f+0x228>
 8013546:	ee20 7a05 	vmul.f32	s14, s0, s10
 801354a:	eea7 6a26 	vfma.f32	s12, s14, s13
 801354e:	eddf 6a62 	vldr	s13, [pc, #392]	; 80136d8 <expm1f+0x22c>
 8013552:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013556:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80136dc <expm1f+0x230>
 801355a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801355e:	eddf 6a60 	vldr	s13, [pc, #384]	; 80136e0 <expm1f+0x234>
 8013562:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013566:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801356a:	eef0 4a46 	vmov.f32	s9, s12
 801356e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013572:	eef0 6a64 	vmov.f32	s13, s9
 8013576:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801357a:	eee5 4a66 	vfms.f32	s9, s10, s13
 801357e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8013582:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8013586:	eee0 6a64 	vfms.f32	s13, s0, s9
 801358a:	eef0 4a66 	vmov.f32	s9, s13
 801358e:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8013592:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013596:	bb7b      	cbnz	r3, 80135f8 <expm1f+0x14c>
 8013598:	eef0 7a47 	vmov.f32	s15, s14
 801359c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80135a0:	e025      	b.n	80135ee <expm1f+0x142>
 80135a2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80135ac:	bfb8      	it	lt
 80135ae:	eef0 7a47 	vmovlt.f32	s15, s14
 80135b2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80136e4 <expm1f+0x238>
 80135b6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80136c8 <expm1f+0x21c>
 80135ba:	ee40 7a07 	vmla.f32	s15, s0, s14
 80135be:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80136c4 <expm1f+0x218>
 80135c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135c6:	ee17 3a90 	vmov	r3, s15
 80135ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135ce:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80135d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135d6:	eeb0 7a40 	vmov.f32	s14, s0
 80135da:	e7a6      	b.n	801352a <expm1f+0x7e>
 80135dc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80135e0:	d208      	bcs.n	80135f4 <expm1f+0x148>
 80135e2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80136e8 <expm1f+0x23c>
 80135e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80135ea:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80135ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80135f2:	4770      	bx	lr
 80135f4:	2300      	movs	r3, #0
 80135f6:	e79e      	b.n	8013536 <expm1f+0x8a>
 80135f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80135fc:	1c5a      	adds	r2, r3, #1
 80135fe:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8013602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013606:	d106      	bne.n	8013616 <expm1f+0x16a>
 8013608:	ee70 7a67 	vsub.f32	s15, s0, s15
 801360c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8013610:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8013614:	4770      	bx	lr
 8013616:	2b01      	cmp	r3, #1
 8013618:	d118      	bne.n	801364c <expm1f+0x1a0>
 801361a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801361e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013626:	bf41      	itttt	mi
 8013628:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801362c:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8013630:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8013634:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8013638:	bf5f      	itttt	pl
 801363a:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 801363e:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8013642:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8013646:	eeb0 0a46 	vmovpl.f32	s0, s12
 801364a:	4770      	bx	lr
 801364c:	1c5a      	adds	r2, r3, #1
 801364e:	2a39      	cmp	r2, #57	; 0x39
 8013650:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8013654:	d90b      	bls.n	801366e <expm1f+0x1c2>
 8013656:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801365a:	ee36 0a40 	vsub.f32	s0, s12, s0
 801365e:	ee10 3a10 	vmov	r3, s0
 8013662:	440b      	add	r3, r1
 8013664:	ee00 3a10 	vmov	s0, r3
 8013668:	ee30 0a46 	vsub.f32	s0, s0, s12
 801366c:	4770      	bx	lr
 801366e:	2b16      	cmp	r3, #22
 8013670:	dc11      	bgt.n	8013696 <expm1f+0x1ea>
 8013672:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013676:	fa42 f303 	asr.w	r3, r2, r3
 801367a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801367e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013682:	ee07 3a90 	vmov	s15, r3
 8013686:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801368a:	ee10 3a10 	vmov	r3, s0
 801368e:	440b      	add	r3, r1
 8013690:	ee00 3a10 	vmov	s0, r3
 8013694:	4770      	bx	lr
 8013696:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801369a:	05db      	lsls	r3, r3, #23
 801369c:	ee07 3a10 	vmov	s14, r3
 80136a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136a8:	ee30 0a06 	vadd.f32	s0, s0, s12
 80136ac:	e7ed      	b.n	801368a <expm1f+0x1de>
 80136ae:	bf00      	nop
 80136b0:	4195b843 	.word	0x4195b843
 80136b4:	42b17217 	.word	0x42b17217
 80136b8:	0da24260 	.word	0x0da24260
 80136bc:	3eb17218 	.word	0x3eb17218
 80136c0:	3f851591 	.word	0x3f851591
 80136c4:	3f317180 	.word	0x3f317180
 80136c8:	3717f7d1 	.word	0x3717f7d1
 80136cc:	b717f7d1 	.word	0xb717f7d1
 80136d0:	b457edbb 	.word	0xb457edbb
 80136d4:	36867e54 	.word	0x36867e54
 80136d8:	b8a670cd 	.word	0xb8a670cd
 80136dc:	3ad00d01 	.word	0x3ad00d01
 80136e0:	bd088889 	.word	0xbd088889
 80136e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80136e8:	7149f2ca 	.word	0x7149f2ca

080136ec <finitef>:
 80136ec:	b082      	sub	sp, #8
 80136ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 80136f2:	9801      	ldr	r0, [sp, #4]
 80136f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80136f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80136fc:	bfac      	ite	ge
 80136fe:	2000      	movge	r0, #0
 8013700:	2001      	movlt	r0, #1
 8013702:	b002      	add	sp, #8
 8013704:	4770      	bx	lr
	...

08013708 <_init>:
 8013708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370a:	bf00      	nop
 801370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801370e:	bc08      	pop	{r3}
 8013710:	469e      	mov	lr, r3
 8013712:	4770      	bx	lr

08013714 <_fini>:
 8013714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013716:	bf00      	nop
 8013718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801371a:	bc08      	pop	{r3}
 801371c:	469e      	mov	lr, r3
 801371e:	4770      	bx	lr
