
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055e0  08016ff0  08016ff0  00026ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5d0  0801c5d0  00030954  2**0
                  CONTENTS
  4 .ARM          00000008  0801c5d0  0801c5d0  0002c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c5d8  0801c5d8  00030954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c5d8  0801c5d8  0002c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c5dc  0801c5dc  0002c5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000954  20000000  0801c5e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041364  20000958  0801cf34  00030958  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20041cbc  0801cf34  00031cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030954  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d832  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ab6  00000000  00000000  0006e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c10  00000000  00000000  00075c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028c0  00000000  00000000  00078880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000364ea  00000000  00000000  0007b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039426  00000000  00000000  000b162a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130420  00000000  00000000  000eaa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0021ae70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce1c  00000000  00000000  0021af40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000958 	.word	0x20000958
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016fd4 	.word	0x08016fd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000095c 	.word	0x2000095c
 800020c:	08016fd4 	.word	0x08016fd4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8
 8000ee6:	af02      	add	r7, sp, #8

	uiDisplayBasic();
 8000ee8:	f002 fffe 	bl	8003ee8 <uiDisplayBasic>

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000eec:	4ab2      	ldr	r2, [pc, #712]	; (80011b8 <audioLoop+0x2d8>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	48b2      	ldr	r0, [pc, #712]	; (80011bc <audioLoop+0x2dc>)
 8000ef2:	f012 fbab 	bl	801364c <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000ef6:	4bb2      	ldr	r3, [pc, #712]	; (80011c0 <audioLoop+0x2e0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000efc:	4bb1      	ldr	r3, [pc, #708]	; (80011c4 <audioLoop+0x2e4>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f06:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000f0a:	49af      	ldr	r1, [pc, #700]	; (80011c8 <audioLoop+0x2e8>)
 8000f0c:	48af      	ldr	r0, [pc, #700]	; (80011cc <audioLoop+0x2ec>)
 8000f0e:	f003 fdd9 	bl	8004ac4 <start_Audio_Processing>

	/* Initialisation variable projet */
	char buf[50];
	int buf_len = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
	ai_error ai_err;
	ai_i32 nbatch;
	float y_val;
	float test = 0.0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 8000f20:	6013      	str	r3, [r2, #0]
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_TONECRAFTER_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_TONECRAFTER_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle tonecrafter = AI_HANDLE_NULL;
 8000f22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_TONECRAFTER_IN_NUM] = AI_TONECRAFTER_IN;
 8000f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f2e:	4aa8      	ldr	r2, [pc, #672]	; (80011d0 <audioLoop+0x2f0>)
 8000f30:	461c      	mov	r4, r3
 8000f32:	4615      	mov	r5, r2
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3c:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_TONECRAFTER_OUT_NUM] = AI_TONECRAFTER_OUT;
 8000f40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f44:	4aa3      	ldr	r2, [pc, #652]	; (80011d4 <audioLoop+0x2f4>)
 8000f46:	461c      	mov	r4, r3
 8000f48:	4615      	mov	r5, r2
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f52:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
 8000f56:	463b      	mov	r3, r7
 8000f58:	4a9f      	ldr	r2, [pc, #636]	; (80011d8 <audioLoop+0x2f8>)
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2201      	movs	r2, #1
 8000f60:	809a      	strh	r2, [r3, #4]
 8000f62:	463b      	mov	r3, r7
 8000f64:	2201      	movs	r2, #1
 8000f66:	80da      	strh	r2, [r3, #6]
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	811a      	strh	r2, [r3, #8]
 8000f6e:	463b      	mov	r3, r7
 8000f70:	f243 02e4 	movw	r2, #12516	; 0x30e4
 8000f74:	60da      	str	r2, [r3, #12]
		AI_TONECRAFTER_DATA_WEIGHTS(ai_tonecrafter_data_weights_get()),
 8000f76:	f00f fbeb 	bl	8010750 <ai_tonecrafter_data_weights_get>
 8000f7a:	4602      	mov	r2, r0
	ai_network_params ai_params = {
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	463b      	mov	r3, r7
 8000f88:	4a94      	ldr	r2, [pc, #592]	; (80011dc <audioLoop+0x2fc>)
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2201      	movs	r2, #1
 8000f90:	839a      	strh	r2, [r3, #28]
 8000f92:	463b      	mov	r3, r7
 8000f94:	2201      	movs	r2, #1
 8000f96:	83da      	strh	r2, [r3, #30]
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	841a      	strh	r2, [r3, #32]
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
		AI_TONECRAFTER_DATA_ACTIVATIONS(activations)
	};


	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8000fb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb8:	2201      	movs	r2, #1
 8000fba:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fc4:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 8000fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fca:	2201      	movs	r2, #1
 8000fcc:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fd6:	611a      	str	r2, [r3, #16]

	// Create instance of neural network
	ai_err = ai_tonecrafter_create(&tonecrafter, AI_TONECRAFTER_DATA_CONFIG);
 8000fd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00f fb50 	bl	8010684 <ai_tonecrafter_create>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	if (ai_err.type != AI_ERROR_NONE)
 8000fea:	f897 3558 	ldrb.w	r3, [r7, #1368]	; 0x558
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <audioLoop+0x124>
	{
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000ff2:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8000ff6:	497a      	ldr	r1, [pc, #488]	; (80011e0 <audioLoop+0x300>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f013 f8f7 	bl	80141ec <siprintf>
 8000ffe:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
	  while(1);
 8001002:	e7fe      	b.n	8001002 <audioLoop+0x122>
	}

	// Initialize neural network
	if (!ai_tonecrafter_init(tonecrafter, &ai_params))
 8001004:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	463a      	mov	r2, r7
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f00f fb4e 	bl	80106b0 <ai_tonecrafter_init>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <audioLoop+0x152>
	{
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001020:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 8001024:	496f      	ldr	r1, [pc, #444]	; (80011e4 <audioLoop+0x304>)
 8001026:	4618      	mov	r0, r3
 8001028:	f013 f8e0 	bl	80141ec <siprintf>
 800102c:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
	  while(1);
 8001030:	e7fe      	b.n	8001030 <audioLoop+0x150>
	}

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 8001032:	f000 f949 	bl	80012c8 <accumulateInputLevels>
		count++;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <audioLoop+0x308>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a6a      	ldr	r2, [pc, #424]	; (80011e8 <audioLoop+0x308>)
 800103e:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8001040:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <audioLoop+0x308>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b13      	cmp	r3, #19
 8001046:	dd3c      	ble.n	80010c2 <audioLoop+0x1e2>
			count = 0;
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <audioLoop+0x308>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 800104e:	4b67      	ldr	r3, [pc, #412]	; (80011ec <audioLoop+0x30c>)
 8001050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001054:	a356      	add	r3, pc, #344	; (adr r3, 80011b0 <audioLoop+0x2d0>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff faed 	bl	8000638 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4962      	ldr	r1, [pc, #392]	; (80011ec <audioLoop+0x30c>)
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 8001068:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <audioLoop+0x310>)
 800106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106e:	a350      	add	r3, pc, #320	; (adr r3, 80011b0 <audioLoop+0x2d0>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fae0 	bl	8000638 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	495c      	ldr	r1, [pc, #368]	; (80011f0 <audioLoop+0x310>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]

			uiDisplayInputLevel(inputLevelL, inputLevelR);
 8001082:	4b5a      	ldr	r3, [pc, #360]	; (80011ec <audioLoop+0x30c>)
 8001084:	ed93 7b00 	vldr	d7, [r3]
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <audioLoop+0x310>)
 800108a:	ed93 6b00 	vldr	d6, [r3]
 800108e:	eeb0 1a46 	vmov.f32	s2, s12
 8001092:	eef0 1a66 	vmov.f32	s3, s13
 8001096:	eeb0 0a47 	vmov.f32	s0, s14
 800109a:	eef0 0a67 	vmov.f32	s1, s15
 800109e:	f002 ff5d 	bl	8003f5c <uiDisplayInputLevel>

			inputLevelL = 0.;
 80010a2:	4952      	ldr	r1, [pc, #328]	; (80011ec <audioLoop+0x30c>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 80010b0:	494f      	ldr	r1, [pc, #316]	; (80011f0 <audioLoop+0x310>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	e9c1 2300 	strd	r2, r3, [r1]
		}

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 80010be:	e000      	b.n	80010c2 <audioLoop+0x1e2>
			asm("NOP");
 80010c0:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <audioLoop+0x2e0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d1fa      	bne.n	80010c0 <audioLoop+0x1e0>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <audioLoop+0x2e0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80010d6:	e051      	b.n	800117c <audioLoop+0x29c>

			// Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80010de:	e018      	b.n	8001112 <audioLoop+0x232>
			{
			  ((ai_float *)in_data)[i] = (ai_float)buf_input[k + i];
 80010e0:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 80010e4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80010e8:	4413      	add	r3, r2
 80010ea:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <audioLoop+0x2e8>)
 80010ec:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80010f0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010fa:	4413      	add	r3, r2
 80010fc:	ee07 1a90 	vmov	s15, r1
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001108:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800110c:	3301      	adds	r3, #1
 800110e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8001112:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8001116:	2b77      	cmp	r3, #119	; 0x77
 8001118:	d9e2      	bls.n	80010e0 <audioLoop+0x200>
			}

			// Perform inference
			nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 800111a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001124:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001128:	4618      	mov	r0, r3
 800112a:	f00f fb00 	bl	801072e <ai_tonecrafter_run>
 800112e:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
			if (nbatch != 1) {
 8001132:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001136:	2b01      	cmp	r3, #1
 8001138:	d007      	beq.n	800114a <audioLoop+0x26a>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800113a:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800113e:	492d      	ldr	r1, [pc, #180]	; (80011f4 <audioLoop+0x314>)
 8001140:	4618      	mov	r0, r3
 8001142:	f013 f853 	bl	80141ec <siprintf>
 8001146:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 800114a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001154:	6013      	str	r3, [r2, #0]
			buf_input[k] = y_val;
 8001156:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	b219      	sxth	r1, r3
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <audioLoop+0x2e8>)
 800116a:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800116e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 8001172:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8001176:	3301      	adds	r3, #1
 8001178:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800117c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8001180:	2bb3      	cmp	r3, #179	; 0xb3
 8001182:	d9a9      	bls.n	80010d8 <audioLoop+0x1f8>
		}

		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 8001184:	4910      	ldr	r1, [pc, #64]	; (80011c8 <audioLoop+0x2e8>)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <audioLoop+0x2ec>)
 8001188:	f000 f97f 	bl	800148a <processAudio>

		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 800118c:	e000      	b.n	8001190 <audioLoop+0x2b0>
			asm("NOP");
 800118e:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <audioLoop+0x2e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d1fa      	bne.n	800118e <audioLoop+0x2ae>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <audioLoop+0x2e0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80011a4:	e07b      	b.n	800129e <audioLoop+0x3be>

			// Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80011ac:	e040      	b.n	8001230 <audioLoop+0x350>
 80011ae:	bf00      	nop
 80011b0:	9999999a 	.word	0x9999999a
 80011b4:	3fa99999 	.word	0x3fa99999
 80011b8:	0076a000 	.word	0x0076a000
 80011bc:	c0096000 	.word	0xc0096000
 80011c0:	20001450 	.word	0x20001450
 80011c4:	2000167c 	.word	0x2000167c
 80011c8:	20000af0 	.word	0x20000af0
 80011cc:	20000fa0 	.word	0x20000fa0
 80011d0:	08017060 	.word	0x08017060
 80011d4:	08017078 	.word	0x08017078
 80011d8:	40040440 	.word	0x40040440
 80011dc:	00040440 	.word	0x00040440
 80011e0:	08016ff0 	.word	0x08016ff0
 80011e4:	08017018 	.word	0x08017018
 80011e8:	20000974 	.word	0x20000974
 80011ec:	20000978 	.word	0x20000978
 80011f0:	20000980 	.word	0x20000980
 80011f4:	0801703c 	.word	0x0801703c
			{
			  ((ai_float *)in_data)[i] = (ai_float)buf_input_half[k + i];
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <audioLoop+0x3dc>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8001200:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001204:	440b      	add	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800120e:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001218:	4413      	add	r3, r2
 800121a:	ee07 1a90 	vmov	s15, r1
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t i = 0; i < AI_TONECRAFTER_IN_1_SIZE; i++)
 8001226:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8001230:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8001234:	2b77      	cmp	r3, #119	; 0x77
 8001236:	d9df      	bls.n	80011f8 <audioLoop+0x318>
			}

			// Perform inference
			nbatch = ai_tonecrafter_run(tonecrafter, &ai_input[0], &ai_output[0]);
 8001238:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001242:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001246:	4618      	mov	r0, r3
 8001248:	f00f fa71 	bl	801072e <ai_tonecrafter_run>
 800124c:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
			if (nbatch != 1) {
 8001250:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <audioLoop+0x388>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001258:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800125c:	4918      	ldr	r1, [pc, #96]	; (80012c0 <audioLoop+0x3e0>)
 800125e:	4618      	mov	r0, r3
 8001260:	f012 ffc4 	bl	80141ec <siprintf>
 8001264:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 8001268:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001272:	6013      	str	r3, [r2, #0]
			buf_input_half[k] = y_val;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <audioLoop+0x3dc>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001284:	edd2 7a00 	vldr	s15, [r2]
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 2a90 	vmov	r2, s15
 8001290:	b212      	sxth	r2, r2
 8001292:	801a      	strh	r2, [r3, #0]
		for (int k = 0; k < AUDIO_BUF_SIZE - 120; k++){
 8001294:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001298:	3301      	adds	r3, #1
 800129a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800129e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80012a2:	2bb3      	cmp	r3, #179	; 0xb3
 80012a4:	f67f af7f 	bls.w	80011a6 <audioLoop+0x2c6>
		}

		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <audioLoop+0x3e4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <audioLoop+0x3dc>)
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f8e9 	bl	800148a <processAudio>
		accumulateInputLevels();
 80012b8:	e6bb      	b.n	8001032 <audioLoop+0x152>
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	0801703c 	.word	0x0801703c
 80012c4:	20000004 	.word	0x20000004

080012c8 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	e016      	b.n	8001306 <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 80012d8:	4a3e      	ldr	r2, [pc, #248]	; (80013d4 <accumulateInputLevels+0x10c>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 80012e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dd05      	ble.n	80012f6 <accumulateInputLevels+0x2e>
			lvl += v;
 80012ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e004      	b.n	8001300 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 80012f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3302      	adds	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800130c:	d3e4      	bcc.n	80012d8 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff f918 	bl	8000544 <__aeabi_ui2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <accumulateInputLevels+0x110>)
 800131a:	f7ff fab7 	bl	800088c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <accumulateInputLevels+0x114>)
 800132c:	f7ff faae 	bl	800088c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <accumulateInputLevels+0x118>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7fe ffc5 	bl	80002cc <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4926      	ldr	r1, [pc, #152]	; (80013e0 <accumulateInputLevels+0x118>)
 8001348:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001350:	2301      	movs	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	e016      	b.n	8001384 <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <accumulateInputLevels+0x10c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800135e:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd05      	ble.n	8001374 <accumulateInputLevels+0xac>
			lvl += v;
 8001368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e004      	b.n	800137e <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 8001374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800138a:	d3e4      	bcc.n	8001356 <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff f8d9 	bl	8000544 <__aeabi_ui2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <accumulateInputLevels+0x110>)
 8001398:	f7ff fa78 	bl	800088c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <accumulateInputLevels+0x114>)
 80013aa:	f7ff fa6f 	bl	800088c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <accumulateInputLevels+0x11c>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7fe ff86 	bl	80002cc <__adddf3>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <accumulateInputLevels+0x11c>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000af0 	.word	0x20000af0
 80013d8:	4082c000 	.word	0x4082c000
 80013dc:	40e00000 	.word	0x40e00000
 80013e0:	20000978 	.word	0x20000978
 80013e4:	20000980 	.word	0x20000980

080013e8 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_SAI_RxCpltCallback+0x1c>)
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
	return;
 80013f6:	bf00      	nop
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20001450 	.word	0x20001450

08001408 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
	return;
 8001416:	bf00      	nop
}
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20001450 	.word	0x20001450

08001428 <no_effect>:
// --------------------------- AUDIO ALGORITHMS ---------------------------

/**
 * No effect function which simply reproduces the input on the output
 */
static void no_effect(int16_t *out, int16_t *in) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]

	float A = 1.0;
 8001432:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001436:	60bb      	str	r3, [r7, #8]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e01a      	b.n	8001474 <no_effect+0x4c>
		out[n] = A * in[n];
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	edd7 7a02 	vldr	s15, [r7, #8]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 2a90 	vmov	r2, s15
 800146a:	b212      	sxth	r2, r2
 800146c:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800147a:	d3e0      	bcc.n	800143e <no_effect+0x16>
	}

}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 8001494:	f002 fdee 	bl	8004074 <LED_On>

	no_effect(out, in); // If you want no effect on the audio output
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffc4 	bl	8001428 <no_effect>
	// echo_effect(out, in); // If you want a echo effect on the audio output
	// noise_gate(out, in);

	LED_Off();
 80014a0:	f002 fdf4 	bl	800408c <LED_Off>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014c8:	f3bf 8f4f 	dsb	sy
}
 80014cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ce:	f3bf 8f6f 	isb	sy
}
 80014d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <SCB_EnableICache+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy
}
 80014e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e2:	f3bf 8f6f 	isb	sy
}
 80014e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <SCB_EnableICache+0x48>)
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <SCB_EnableICache+0x48>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f4:	f3bf 8f4f 	dsb	sy
}
 80014f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fa:	f3bf 8f6f 	isb	sy
}
 80014fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800151a:	f3bf 8f6f 	isb	sy
}
 800151e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <SCB_InvalidateICache+0x30>)
 8001522:	2200      	movs	r2, #0
 8001524:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001528:	f3bf 8f4f 	dsb	sy
}
 800152c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800152e:	f3bf 8f6f 	isb	sy
}
 8001532:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <SCB_EnableDCache+0x84>)
 800154c:	2200      	movs	r2, #0
 800154e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001552:	f3bf 8f4f 	dsb	sy
}
 8001556:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <SCB_EnableDCache+0x84>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0b5b      	lsrs	r3, r3, #13
 8001564:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001568:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001572:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800157c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001582:	4911      	ldr	r1, [pc, #68]	; (80015c8 <SCB_EnableDCache+0x84>)
 8001584:	4313      	orrs	r3, r2
 8001586:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ef      	bne.n	8001574 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	60fa      	str	r2, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1e5      	bne.n	800156a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800159e:	f3bf 8f4f 	dsb	sy
}
 80015a2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SCB_EnableDCache+0x84>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <SCB_EnableDCache+0x84>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015b0:	f3bf 8f4f 	dsb	sy
}
 80015b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b6:	f3bf 8f6f 	isb	sy
}
 80015ba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <SCB_InvalidateDCache+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
}
 80015de:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <SCB_InvalidateDCache+0x74>)
 80015e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0b5b      	lsrs	r3, r3, #13
 80015ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015f0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001604:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800160a:	490d      	ldr	r1, [pc, #52]	; (8001640 <SCB_InvalidateDCache+0x74>)
 800160c:	4313      	orrs	r3, r2
 800160e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ef      	bne.n	80015fc <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	60fa      	str	r2, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1e5      	bne.n	80015f2 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800162c:	f3bf 8f6f 	isb	sy
}
 8001630:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001648:	f7ff ffc0 	bl	80015cc <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 800164c:	f7ff ff60 	bl	8001510 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001650:	f004 fbe3 	bl	8005e1a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001654:	f000 f842 	bl	80016dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001658:	f001 f8a0 	bl	800279c <MX_GPIO_Init>
	MX_DMA_Init();
 800165c:	f000 ffdc 	bl	8002618 <MX_DMA_Init>
	MX_ADC3_Init();
 8001660:	f000 f8fc 	bl	800185c <MX_ADC3_Init>
	MX_CRC_Init();
 8001664:	f000 f94c 	bl	8001900 <MX_CRC_Init>
	MX_DCMI_Init();
 8001668:	f000 f96c 	bl	8001944 <MX_DCMI_Init>
	MX_DMA2D_Init();
 800166c:	f000 f99e 	bl	80019ac <MX_DMA2D_Init>
	MX_FMC_Init();
 8001670:	f001 f840 	bl	80026f4 <MX_FMC_Init>
	MX_I2C1_Init();
 8001674:	f000 f9cc 	bl	8001a10 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001678:	f000 fa0a 	bl	8001a90 <MX_I2C3_Init>
	MX_LTDC_Init();
 800167c:	f000 fa48 	bl	8001b10 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001680:	f000 faca 	bl	8001c18 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8001684:	f000 fb0a 	bl	8001c9c <MX_RTC_Init>
	MX_SAI2_Init();
 8001688:	f000 fbae 	bl	8001de8 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 800168c:	f000 fc68 	bl	8001f60 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8001690:	f000 fc86 	bl	8001fa0 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8001694:	f000 fcb4 	bl	8002000 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001698:	f000 fd5e 	bl	8002158 <MX_TIM2_Init>
	MX_TIM3_Init();
 800169c:	f000 fdd2 	bl	8002244 <MX_TIM3_Init>
	MX_TIM5_Init();
 80016a0:	f000 fe48 	bl	8002334 <MX_TIM5_Init>
	MX_TIM8_Init();
 80016a4:	f000 febe 	bl	8002424 <MX_TIM8_Init>
	MX_TIM12_Init();
 80016a8:	f000 ff10 	bl	80024cc <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80016ac:	f000 ff54 	bl	8002558 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80016b0:	f000 ff82 	bl	80025b8 <MX_USART6_UART_Init>

//	MPU_Init();

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 80016b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016bc:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 80016be:	f003 faf5 	bl	8004cac <TS_Init>
	printf("Touchscreen Init: OK\n");
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <main+0x94>)
 80016c4:	f012 fd7a 	bl	80141bc <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 80016c8:	f7ff fefc 	bl	80014c4 <SCB_EnableICache>
	SCB_EnableDCache();
 80016cc:	f7ff ff3a 	bl	8001544 <SCB_EnableDCache>

	//test();
	audioLoop(); // comment to use RTOS (see below)
 80016d0:	f7ff fc06 	bl	8000ee0 <audioLoop>
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
      while(1);
    }*/

	while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x90>
 80016d6:	bf00      	nop
 80016d8:	08017090 	.word	0x08017090

080016dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0b4      	sub	sp, #208	; 0xd0
 80016e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016e6:	2230      	movs	r2, #48	; 0x30
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f011 ffae 	bl	801364c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	2284      	movs	r2, #132	; 0x84
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f011 ff9f 	bl	801364c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800170e:	f008 ff5f 	bl	800a5d0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <SystemClock_Config+0x174>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a4e      	ldr	r2, [pc, #312]	; (8001850 <SystemClock_Config+0x174>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <SystemClock_Config+0x174>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <SystemClock_Config+0x178>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <SystemClock_Config+0x178>)
 8001730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <SystemClock_Config+0x178>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001742:	2309      	movs	r3, #9
 8001744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001764:	2319      	movs	r3, #25
 8001766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800176a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800176e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001778:	2309      	movs	r3, #9
 800177a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001782:	4618      	mov	r0, r3
 8001784:	f009 ff48 	bl	800b618 <HAL_RCC_OscConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800178e:	f001 fa43 	bl	8002c18 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001792:	f008 ff2d 	bl	800a5f0 <HAL_PWREx_EnableOverDrive>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800179c:	f001 fa3c 	bl	8002c18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a0:	230f      	movs	r3, #15
 80017a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017c6:	2106      	movs	r1, #6
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a f9c9 	bl	800bb60 <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 80017d4:	f001 fa20 	bl	8002c18 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <SystemClock_Config+0x17c>)
 80017da:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80017dc:	2364      	movs	r3, #100	; 0x64
 80017de:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017f0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 80017f6:	2308      	movs	r3, #8
 80017f8:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017fa:	2303      	movs	r3, #3
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001802:	2301      	movs	r3, #1
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001816:	2300      	movs	r3, #0
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800181a:	2300      	movs	r3, #0
 800181c:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001822:	2300      	movs	r3, #0
 8001824:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800182a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f00a fb99 	bl	800bf70 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8001844:	f001 f9e8 	bl	8002c18 <Error_Handler>
	}
}
 8001848:	bf00      	nop
 800184a:	37d0      	adds	r7, #208	; 0xd0
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000
 8001858:	01b14868 	.word	0x01b14868

0800185c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_ADC3_Init+0x98>)
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <MX_ADC3_Init+0x9c>)
 8001872:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_ADC3_Init+0x98>)
 8001876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800187a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_ADC3_Init+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_ADC3_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_ADC3_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_ADC3_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_ADC3_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_ADC3_Init+0x98>)
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <MX_ADC3_Init+0xa0>)
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018be:	f004 fafd 	bl	8005ebc <HAL_ADC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80018c8:	f001 f9a6 	bl	8002c18 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_ADC3_Init+0x98>)
 80018de:	f004 fb31 	bl	8005f44 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80018e8:	f001 f996 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20001994 	.word	0x20001994
 80018f8:	40012200 	.word	0x40012200
 80018fc:	0f000001 	.word	0x0f000001

08001900 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_CRC_Init+0x3c>)
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <MX_CRC_Init+0x40>)
 8001908:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_CRC_Init+0x3c>)
 800190c:	2200      	movs	r2, #0
 800190e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_CRC_Init+0x3c>)
 8001912:	2200      	movs	r2, #0
 8001914:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_CRC_Init+0x3c>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_CRC_Init+0x3c>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_CRC_Init+0x3c>)
 8001924:	2201      	movs	r2, #1
 8001926:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_CRC_Init+0x3c>)
 800192a:	f004 fe63 	bl	80065f4 <HAL_CRC_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001934:	f001 f970 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000174c 	.word	0x2000174c
 8001940:	40023000 	.word	0x40023000

08001944 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_DCMI_Init+0x60>)
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <MX_DCMI_Init+0x64>)
 800194c:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_DCMI_Init+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <MX_DCMI_Init+0x60>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_DCMI_Init+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_DCMI_Init+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_DCMI_Init+0x60>)
 8001992:	f004 ff19 	bl	80067c8 <HAL_DCMI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 800199c:	f001 f93c 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200019dc 	.word	0x200019dc
 80019a8:	50050000 	.word	0x50050000

080019ac <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <MX_DMA2D_Init+0x60>)
 80019b4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019e2:	f005 fc45 	bl	8007270 <HAL_DMA2D_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 80019ec:	f001 f914 	bl	8002c18 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019f0:	2101      	movs	r1, #1
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_DMA2D_Init+0x5c>)
 80019f4:	f005 feaa 	bl	800774c <HAL_DMA2D_ConfigLayer>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 80019fe:	f001 f90b 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20001c00 	.word	0x20001c00
 8001a0c:	4002b000 	.word	0x4002b000

08001a10 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_I2C1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_I2C1_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a4c:	f007 fd40 	bl	80094d0 <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001a56:	f001 f8df 	bl	8002c18 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a5e:	f008 fa41 	bl	8009ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001a68:	f001 f8d6 	bl	8002c18 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_I2C1_Init+0x74>)
 8001a70:	f008 fa83 	bl	8009f7a <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001a7a:	f001 f8cd 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001700 	.word	0x20001700
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	00c0eaff 	.word	0x00c0eaff

08001a90 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C3_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C3_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001acc:	f007 fd00 	bl	80094d0 <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001ad6:	f001 f89f 	bl	8002c18 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001ade:	f008 fa01 	bl	8009ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001ae8:	f001 f896 	bl	8002c18 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C3_Init+0x74>)
 8001af0:	f008 fa43 	bl	8009f7a <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001afa:	f001 f88d 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200014d8 	.word	0x200014d8
 8001b08:	40005c00 	.word	0x40005c00
 8001b0c:	00c0eaff 	.word	0x00c0eaff

08001b10 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	; 0x38
 8001b14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2234      	movs	r2, #52	; 0x34
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f011 fd95 	bl	801364c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b24:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <MX_LTDC_Init+0x104>)
 8001b26:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b42:	2228      	movs	r2, #40	; 0x28
 8001b44:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b48:	2209      	movs	r2, #9
 8001b4a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b4e:	2235      	movs	r2, #53	; 0x35
 8001b50:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b54:	220b      	movs	r2, #11
 8001b56:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b5a:	f240 2215 	movw	r2, #533	; 0x215
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b62:	f240 121b 	movw	r2, #283	; 0x11b
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b6a:	f240 2235 	movw	r2, #565	; 0x235
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b72:	f240 121d 	movw	r2, #285	; 0x11d
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001b92:	f008 fa3f 	bl	800a014 <HAL_LTDC_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001b9c:	f001 f83c 	bl	8002c18 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001ba4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ba8:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001bae:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bb2:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001bb8:	23ff      	movs	r3, #255	; 0xff
 8001bba:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bc4:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001bca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001bd0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001bd6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_LTDC_Init+0x100>)
 8001bf6:	f008 fadd 	bl	800a1b4 <HAL_LTDC_ConfigLayer>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001c00:	f001 f80a 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001c04:	f002 fb44 	bl	8004290 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	3738      	adds	r7, #56	; 0x38
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200018ec 	.word	0x200018ec
 8001c14:	40016800 	.word	0x40016800

08001c18 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <MX_QUADSPI_Init+0x80>)
 8001c20:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c36:	2218      	movs	r2, #24
 8001c38:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c3c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001c40:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c54:	480f      	ldr	r0, [pc, #60]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c56:	f008 fd1b 	bl	800a690 <HAL_QSPI_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001c60:	f000 ffda 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c66:	f002 fdf5 	bl	8004854 <DISCO_QSPI_ResetMemory>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_QUADSPI_Init+0x5c>
 8001c70:	f000 ffd2 	bl	8002c18 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <MX_QUADSPI_Init+0x7c>)
 8001c76:	f002 fe2f 	bl	80048d8 <DISCO_QSPI_DummyCyclesCfg>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_QUADSPI_Init+0x6c>
 8001c80:	f000 ffca 	bl	8002c18 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001c84:	f002 fdb4 	bl	80047f0 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001c88:	205c      	movs	r0, #92	; 0x5c
 8001c8a:	f004 fca5 	bl	80065d8 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20001d0c 	.word	0x20001d0c
 8001c98:	a0001000 	.word	0xa0001000

08001c9c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b092      	sub	sp, #72	; 0x48
 8001ca0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001cb8:	463b      	mov	r3, r7
 8001cba:	222c      	movs	r2, #44	; 0x2c
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f011 fcc4 	bl	801364c <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <MX_RTC_Init+0x148>)
 8001cc8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <MX_RTC_Init+0x144>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cd2:	227f      	movs	r2, #127	; 0x7f
 8001cd4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <MX_RTC_Init+0x144>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cee:	483c      	ldr	r0, [pc, #240]	; (8001de0 <MX_RTC_Init+0x144>)
 8001cf0:	f00a fe72 	bl	800c9d8 <HAL_RTC_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001cfa:	f000 ff8d 	bl	8002c18 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4619      	mov	r1, r3
 8001d20:	482f      	ldr	r0, [pc, #188]	; (8001de0 <MX_RTC_Init+0x144>)
 8001d22:	f00a feeb 	bl	800cafc <HAL_RTC_SetTime>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001d2c:	f000 ff74 	bl	8002c18 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4823      	ldr	r0, [pc, #140]	; (8001de0 <MX_RTC_Init+0x144>)
 8001d52:	f00a ff91 	bl	800cc78 <HAL_RTC_SetDate>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001d5c:	f000 ff5c 	bl	8002c18 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	2201      	movs	r2, #1
 8001d94:	4619      	mov	r1, r3
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <MX_RTC_Init+0x144>)
 8001d98:	f00b f816 	bl	800cdc8 <HAL_RTC_SetAlarm>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001da2:	f000 ff39 	bl	8002c18 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <MX_RTC_Init+0x144>)
 8001db4:	f00b f808 	bl	800cdc8 <HAL_RTC_SetAlarm>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001dbe:	f000 ff2b 	bl	8002c18 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_RTC_Init+0x144>)
 8001dc8:	f00b f988 	bl	800d0dc <HAL_RTCEx_SetTimeStamp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001dd2:	f000 ff21 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	3748      	adds	r7, #72	; 0x48
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20001ab0 	.word	0x20001ab0
 8001de4:	40002800 	.word	0x40002800

08001de8 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001dee:	4a59      	ldr	r2, [pc, #356]	; (8001f54 <MX_SAI2_Init+0x16c>)
 8001df0:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001df8:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e04:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1c:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e24:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e2c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e30:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e44:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e52:	2220      	movs	r2, #32
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e5c:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e66:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e80:	2205      	movs	r2, #5
 8001e82:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e84:	4832      	ldr	r0, [pc, #200]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001e86:	f00b f97f 	bl	800d188 <HAL_SAI_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001e90:	f000 fec2 	bl	8002c18 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <MX_SAI2_Init+0x174>)
 8001e98:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001eea:	2220      	movs	r2, #32
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ef0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ef4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001efe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f18:	220a      	movs	r2, #10
 8001f1a:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001f1c:	480e      	ldr	r0, [pc, #56]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f1e:	f00b f933 	bl	800d188 <HAL_SAI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001f28:	f000 fe76 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_SAI2_Init+0x168>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f3a:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <MX_SAI2_Init+0x170>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f4a:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000167c 	.word	0x2000167c
 8001f54:	40015c04 	.word	0x40015c04
 8001f58:	20001454 	.word	0x20001454
 8001f5c:	40015c24 	.word	0x40015c24

08001f60 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <MX_SDMMC1_SD_Init+0x3c>)
 8001f68:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <MX_SDMMC1_SD_Init+0x38>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200017d0 	.word	0x200017d0
 8001f9c:	40012c00 	.word	0x40012c00

08001fa0 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fa6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001faa:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <MX_SPDIFRX_Init+0x5c>)
 8001fea:	f00b fd25 	bl	800da38 <HAL_SPDIFRX_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001ff4:	f000 fe10 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20001630 	.word	0x20001630

08002000 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b09a      	sub	sp, #104	; 0x68
 8002004:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	222c      	movs	r2, #44	; 0x2c
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f011 fb06 	bl	801364c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <MX_TIM1_Init+0x150>)
 8002042:	4a44      	ldr	r2, [pc, #272]	; (8002154 <MX_TIM1_Init+0x154>)
 8002044:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <MX_TIM1_Init+0x150>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <MX_TIM1_Init+0x150>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002052:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <MX_TIM1_Init+0x150>)
 8002054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002058:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <MX_TIM1_Init+0x150>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002060:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <MX_TIM1_Init+0x150>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <MX_TIM1_Init+0x150>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800206c:	4838      	ldr	r0, [pc, #224]	; (8002150 <MX_TIM1_Init+0x150>)
 800206e:	f00b fd3f 	bl	800daf0 <HAL_TIM_Base_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8002078:	f000 fdce 	bl	8002c18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002080:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002082:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002086:	4619      	mov	r1, r3
 8002088:	4831      	ldr	r0, [pc, #196]	; (8002150 <MX_TIM1_Init+0x150>)
 800208a:	f00c f887 	bl	800e19c <HAL_TIM_ConfigClockSource>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8002094:	f000 fdc0 	bl	8002c18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002098:	482d      	ldr	r0, [pc, #180]	; (8002150 <MX_TIM1_Init+0x150>)
 800209a:	f00b fdf9 	bl	800dc90 <HAL_TIM_PWM_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80020a4:	f000 fdb8 	bl	8002c18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b8:	4619      	mov	r1, r3
 80020ba:	4825      	ldr	r0, [pc, #148]	; (8002150 <MX_TIM1_Init+0x150>)
 80020bc:	f00c fcf4 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80020c6:	f000 fda7 	bl	8002c18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ca:	2360      	movs	r3, #96	; 0x60
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	4818      	ldr	r0, [pc, #96]	; (8002150 <MX_TIM1_Init+0x150>)
 80020f0:	f00b ff44 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 80020fa:	f000 fd8d 	bl	8002c18 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <MX_TIM1_Init+0x150>)
 8002134:	f00c fd46 	bl	800ebc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800213e:	f000 fd6b 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <MX_TIM1_Init+0x150>)
 8002144:	f001 fa28 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8002148:	bf00      	nop
 800214a:	3768      	adds	r7, #104	; 0x68
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20001ad0 	.word	0x20001ad0
 8002154:	40010000 	.word	0x40010000

08002158 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <MX_TIM2_Init+0xe8>)
 800218c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002190:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_TIM2_Init+0xe8>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <MX_TIM2_Init+0xe8>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b2:	4823      	ldr	r0, [pc, #140]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021b4:	f00b fc9c 	bl	800daf0 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80021be:	f000 fd2b 	bl	8002c18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021cc:	4619      	mov	r1, r3
 80021ce:	481c      	ldr	r0, [pc, #112]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021d0:	f00b ffe4 	bl	800e19c <HAL_TIM_ConfigClockSource>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80021da:	f000 fd1d 	bl	8002c18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021e0:	f00b fd56 	bl	800dc90 <HAL_TIM_PWM_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80021ea:	f000 fd15 	bl	8002c18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <MX_TIM2_Init+0xe8>)
 80021fe:	f00c fc53 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8002208:	f000 fd06 	bl	8002c18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220c:	2360      	movs	r3, #96	; 0x60
 800220e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221c:	463b      	mov	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM2_Init+0xe8>)
 8002224:	f00b feaa 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 800222e:	f000 fcf3 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM2_Init+0xe8>)
 8002234:	f001 f9b0 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	; 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20001c40 	.word	0x20001c40

08002244 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002264:	463b      	mov	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	615a      	str	r2, [r3, #20]
 8002274:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <MX_TIM3_Init+0xe8>)
 8002278:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <MX_TIM3_Init+0xec>)
 800227a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <MX_TIM3_Init+0xe8>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <MX_TIM3_Init+0xe8>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <MX_TIM3_Init+0xe8>)
 800228a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <MX_TIM3_Init+0xe8>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <MX_TIM3_Init+0xe8>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800229c:	4823      	ldr	r0, [pc, #140]	; (800232c <MX_TIM3_Init+0xe8>)
 800229e:	f00b fc27 	bl	800daf0 <HAL_TIM_Base_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80022a8:	f000 fcb6 	bl	8002c18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b6:	4619      	mov	r1, r3
 80022b8:	481c      	ldr	r0, [pc, #112]	; (800232c <MX_TIM3_Init+0xe8>)
 80022ba:	f00b ff6f 	bl	800e19c <HAL_TIM_ConfigClockSource>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80022c4:	f000 fca8 	bl	8002c18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022c8:	4818      	ldr	r0, [pc, #96]	; (800232c <MX_TIM3_Init+0xe8>)
 80022ca:	f00b fce1 	bl	800dc90 <HAL_TIM_PWM_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80022d4:	f000 fca0 	bl	8002c18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4811      	ldr	r0, [pc, #68]	; (800232c <MX_TIM3_Init+0xe8>)
 80022e8:	f00c fbde 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80022f2:	f000 fc91 	bl	8002c18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f6:	2360      	movs	r3, #96	; 0x60
 80022f8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002306:	463b      	mov	r3, r7
 8002308:	2200      	movs	r2, #0
 800230a:	4619      	mov	r1, r3
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <MX_TIM3_Init+0xe8>)
 800230e:	f00b fe35 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002318:	f000 fc7e 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <MX_TIM3_Init+0xe8>)
 800231e:	f001 f93b 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8002322:	bf00      	nop
 8002324:	3738      	adds	r7, #56	; 0x38
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200018a0 	.word	0x200018a0
 8002330:	40000400 	.word	0x40000400

08002334 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002354:	463b      	mov	r3, r7
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <MX_TIM5_Init+0xe8>)
 8002368:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <MX_TIM5_Init+0xec>)
 800236a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <MX_TIM5_Init+0xe8>)
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <MX_TIM5_Init+0xe8>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <MX_TIM5_Init+0xe8>)
 800237a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800237e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <MX_TIM5_Init+0xe8>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <MX_TIM5_Init+0xe8>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800238c:	4823      	ldr	r0, [pc, #140]	; (800241c <MX_TIM5_Init+0xe8>)
 800238e:	f00b fbaf 	bl	800daf0 <HAL_TIM_Base_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8002398:	f000 fc3e 	bl	8002c18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80023a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a6:	4619      	mov	r1, r3
 80023a8:	481c      	ldr	r0, [pc, #112]	; (800241c <MX_TIM5_Init+0xe8>)
 80023aa:	f00b fef7 	bl	800e19c <HAL_TIM_ConfigClockSource>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80023b4:	f000 fc30 	bl	8002c18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023b8:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_TIM5_Init+0xe8>)
 80023ba:	f00b fc69 	bl	800dc90 <HAL_TIM_PWM_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80023c4:	f000 fc28 	bl	8002c18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4811      	ldr	r0, [pc, #68]	; (800241c <MX_TIM5_Init+0xe8>)
 80023d8:	f00c fb66 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 80023e2:	f000 fc19 	bl	8002c18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e6:	2360      	movs	r3, #96	; 0x60
 80023e8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023f6:	463b      	mov	r3, r7
 80023f8:	220c      	movs	r2, #12
 80023fa:	4619      	mov	r1, r3
 80023fc:	4807      	ldr	r0, [pc, #28]	; (800241c <MX_TIM5_Init+0xe8>)
 80023fe:	f00b fdbd 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002408:	f000 fc06 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <MX_TIM5_Init+0xe8>)
 800240e:	f001 f8c3 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8002412:	bf00      	nop
 8002414:	3738      	adds	r7, #56	; 0x38
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20001854 	.word	0x20001854
 8002420:	40000c00 	.word	0x40000c00

08002424 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_TIM8_Init+0xa0>)
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <MX_TIM8_Init+0xa4>)
 8002446:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MX_TIM8_Init+0xa0>)
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_TIM8_Init+0xa0>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_TIM8_Init+0xa0>)
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <MX_TIM8_Init+0xa0>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_TIM8_Init+0xa0>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_TIM8_Init+0xa0>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800246e:	4815      	ldr	r0, [pc, #84]	; (80024c4 <MX_TIM8_Init+0xa0>)
 8002470:	f00b fb3e 	bl	800daf0 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 800247a:	f000 fbcd 	bl	8002c18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <MX_TIM8_Init+0xa0>)
 800248c:	f00b fe86 	bl	800e19c <HAL_TIM_ConfigClockSource>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 8002496:	f000 fbbf 	bl	8002c18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_TIM8_Init+0xa0>)
 80024ac:	f00c fafc 	bl	800eaa8 <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80024b6:	f000 fbaf 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20001584 	.word	0x20001584
 80024c8:	40010400 	.word	0x40010400

080024cc <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
 80024e0:	615a      	str	r2, [r3, #20]
 80024e2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_TIM12_Init+0x84>)
 80024e6:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <MX_TIM12_Init+0x88>)
 80024e8:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <MX_TIM12_Init+0x84>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_TIM12_Init+0x84>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_TIM12_Init+0x84>)
 80024f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fc:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_TIM12_Init+0x84>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_TIM12_Init+0x84>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800250a:	4811      	ldr	r0, [pc, #68]	; (8002550 <MX_TIM12_Init+0x84>)
 800250c:	f00b fbc0 	bl	800dc90 <HAL_TIM_PWM_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8002516:	f000 fb7f 	bl	8002c18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	4807      	ldr	r0, [pc, #28]	; (8002550 <MX_TIM12_Init+0x84>)
 8002532:	f00b fd23 	bl	800df7c <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 800253c:	f000 fb6c 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002540:	4803      	ldr	r0, [pc, #12]	; (8002550 <MX_TIM12_Init+0x84>)
 8002542:	f001 f829 	bl	8003598 <HAL_TIM_MspPostInit>

}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20001c8c 	.word	0x20001c8c
 8002554:	40001800 	.word	0x40001800

08002558 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <MX_USART1_UART_Init+0x5c>)
 8002560:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_USART1_UART_Init+0x58>)
 800259c:	f00c fbae 	bl	800ecfc <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80025a6:	f000 fb37 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20001a2c 	.word	0x20001a2c
 80025b4:	40011000 	.word	0x40011000

080025b8 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <MX_USART6_UART_Init+0x5c>)
 80025c0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_USART6_UART_Init+0x58>)
 80025fc:	f00c fb7e 	bl	800ecfc <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8002606:	f000 fb07 	bl	8002c18 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20001b7c 	.word	0x20001b7c
 8002614:	40011400 	.word	0x40011400

08002618 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800261e:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <MX_DMA_Init+0xd0>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <MX_DMA_Init+0xd0>)
 8002624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <MX_DMA_Init+0xd0>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <MX_DMA_Init+0xd4>)
 8002638:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <MX_DMA_Init+0xd8>)
 800263a:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <MX_DMA_Init+0xd4>)
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <MX_DMA_Init+0xd4>)
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <MX_DMA_Init+0xd4>)
 800264a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <MX_DMA_Init+0xd4>)
 8002652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002656:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <MX_DMA_Init+0xd4>)
 800265a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800265e:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <MX_DMA_Init+0xd4>)
 8002662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002666:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <MX_DMA_Init+0xd4>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <MX_DMA_Init+0xd4>)
 8002670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002674:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_DMA_Init+0xd4>)
 8002678:	2204      	movs	r2, #4
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_DMA_Init+0xd4>)
 800267e:	2203      	movs	r2, #3
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_DMA_Init+0xd4>)
 8002684:	2200      	movs	r2, #0
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_DMA_Init+0xd4>)
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800268e:	4817      	ldr	r0, [pc, #92]	; (80026ec <MX_DMA_Init+0xd4>)
 8002690:	f004 f9e4 	bl	8006a5c <HAL_DMA_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 800269a:	f000 fabd 	bl	8002c18 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2105      	movs	r1, #5
 80026a2:	2038      	movs	r0, #56	; 0x38
 80026a4:	f003 ff6e 	bl	8006584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026a8:	2038      	movs	r0, #56	; 0x38
 80026aa:	f003 ff87 	bl	80065bc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2105      	movs	r1, #5
 80026b2:	2039      	movs	r0, #57	; 0x39
 80026b4:	f003 ff66 	bl	8006584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80026b8:	2039      	movs	r0, #57	; 0x39
 80026ba:	f003 ff7f 	bl	80065bc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2105      	movs	r1, #5
 80026c2:	203c      	movs	r0, #60	; 0x3c
 80026c4:	f003 ff5e 	bl	8006584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80026c8:	203c      	movs	r0, #60	; 0x3c
 80026ca:	f003 ff77 	bl	80065bc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2105      	movs	r1, #5
 80026d2:	2046      	movs	r0, #70	; 0x46
 80026d4:	f003 ff56 	bl	8006584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80026d8:	2046      	movs	r0, #70	; 0x46
 80026da:	f003 ff6f 	bl	80065bc <HAL_NVIC_EnableIRQ>

}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	20001524 	.word	0x20001524
 80026f0:	40026410 	.word	0x40026410

080026f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
 8002708:	615a      	str	r2, [r3, #20]
 800270a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <MX_FMC_Init+0xa0>)
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <MX_FMC_Init+0xa4>)
 8002710:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <MX_FMC_Init+0xa0>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <MX_FMC_Init+0xa0>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <MX_FMC_Init+0xa0>)
 8002720:	2204      	movs	r2, #4
 8002722:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <MX_FMC_Init+0xa0>)
 8002726:	2210      	movs	r2, #16
 8002728:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_FMC_Init+0xa0>)
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_FMC_Init+0xa0>)
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <MX_FMC_Init+0xa0>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_FMC_Init+0xa0>)
 8002740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002744:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <MX_FMC_Init+0xa0>)
 8002748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_FMC_Init+0xa0>)
 8002750:	2200      	movs	r2, #0
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8002754:	2302      	movs	r3, #2
 8002756:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8002758:	2307      	movs	r3, #7
 800275a:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800275c:	2304      	movs	r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8002760:	2307      	movs	r3, #7
 8002762:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8002764:	2303      	movs	r3, #3
 8002766:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800276c:	2302      	movs	r3, #2
 800276e:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <MX_FMC_Init+0xa0>)
 8002776:	f00b f8e0 	bl	800d93a <HAL_SDRAM_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8002780:	f000 fa4a 	bl	8002c18 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002784:	f240 6003 	movw	r0, #1539	; 0x603
 8002788:	f002 fa30 	bl	8004bec <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20001cd8 	.word	0x20001cd8
 8002798:	a0000140 	.word	0xa0000140

0800279c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b090      	sub	sp, #64	; 0x40
 80027a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80027b2:	4baf      	ldr	r3, [pc, #700]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4aae      	ldr	r2, [pc, #696]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027b8:	f043 0310 	orr.w	r3, r3, #16
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4bac      	ldr	r3, [pc, #688]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80027ca:	4ba9      	ldr	r3, [pc, #676]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4aa8      	ldr	r2, [pc, #672]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4ba6      	ldr	r3, [pc, #664]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4ba3      	ldr	r3, [pc, #652]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4aa2      	ldr	r2, [pc, #648]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4ba0      	ldr	r3, [pc, #640]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80027fa:	4b9d      	ldr	r3, [pc, #628]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a9c      	ldr	r2, [pc, #624]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b9a      	ldr	r3, [pc, #616]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b97      	ldr	r3, [pc, #604]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a96      	ldr	r2, [pc, #600]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b91      	ldr	r3, [pc, #580]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a90      	ldr	r2, [pc, #576]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8002842:	4b8b      	ldr	r3, [pc, #556]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a8a      	ldr	r2, [pc, #552]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a84      	ldr	r2, [pc, #528]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800288a:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a78      	ldr	r2, [pc, #480]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002890:	f043 0320 	orr.w	r3, r3, #32
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b76      	ldr	r3, [pc, #472]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80028a2:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a72      	ldr	r2, [pc, #456]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80028a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b70      	ldr	r3, [pc, #448]	; (8002a70 <MX_GPIO_Init+0x2d4>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80028ba:	2201      	movs	r2, #1
 80028bc:	2120      	movs	r1, #32
 80028be:	486d      	ldr	r0, [pc, #436]	; (8002a74 <MX_GPIO_Init+0x2d8>)
 80028c0:	f005 fb2a 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	210e      	movs	r1, #14
 80028c8:	486b      	ldr	r0, [pc, #428]	; (8002a78 <MX_GPIO_Init+0x2dc>)
 80028ca:	f005 fb25 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	2108      	movs	r1, #8
 80028d2:	486a      	ldr	r0, [pc, #424]	; (8002a7c <MX_GPIO_Init+0x2e0>)
 80028d4:	f005 fb20 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80028d8:	2201      	movs	r2, #1
 80028da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028de:	4866      	ldr	r0, [pc, #408]	; (8002a78 <MX_GPIO_Init+0x2dc>)
 80028e0:	f005 fb1a 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ea:	4865      	ldr	r0, [pc, #404]	; (8002a80 <MX_GPIO_Init+0x2e4>)
 80028ec:	f005 fb14 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	21c8      	movs	r1, #200	; 0xc8
 80028f4:	4863      	ldr	r0, [pc, #396]	; (8002a84 <MX_GPIO_Init+0x2e8>)
 80028f6:	f005 fb0f 	bl	8007f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80028fa:	2308      	movs	r3, #8
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800290a:	4619      	mov	r1, r3
 800290c:	485e      	ldr	r0, [pc, #376]	; (8002a88 <MX_GPIO_Init+0x2ec>)
 800290e:	f005 f84b 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002912:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002924:	230b      	movs	r3, #11
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292c:	4619      	mov	r1, r3
 800292e:	4855      	ldr	r0, [pc, #340]	; (8002a84 <MX_GPIO_Init+0x2e8>)
 8002930:	f005 f83a 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002934:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002946:	230a      	movs	r3, #10
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	484e      	ldr	r0, [pc, #312]	; (8002a8c <MX_GPIO_Init+0x2f0>)
 8002952:	f005 f829 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002968:	4619      	mov	r1, r3
 800296a:	4849      	ldr	r0, [pc, #292]	; (8002a90 <MX_GPIO_Init+0x2f4>)
 800296c:	f005 f81c 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002970:	2340      	movs	r3, #64	; 0x40
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002974:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <MX_GPIO_Init+0x2f8>)
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002980:	4619      	mov	r1, r3
 8002982:	483c      	ldr	r0, [pc, #240]	; (8002a74 <MX_GPIO_Init+0x2d8>)
 8002984:	f005 f810 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002988:	2320      	movs	r3, #32
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	4835      	ldr	r0, [pc, #212]	; (8002a74 <MX_GPIO_Init+0x2d8>)
 80029a0:	f005 f802 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80029a4:	f241 030e 	movw	r3, #4110	; 0x100e
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ba:	4619      	mov	r1, r3
 80029bc:	482e      	ldr	r0, [pc, #184]	; (8002a78 <MX_GPIO_Init+0x2dc>)
 80029be:	f004 fff3 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80029c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80029d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d4:	4619      	mov	r1, r3
 80029d6:	4830      	ldr	r0, [pc, #192]	; (8002a98 <MX_GPIO_Init+0x2fc>)
 80029d8:	f004 ffe6 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80029dc:	2308      	movs	r3, #8
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80029ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	4822      	ldr	r0, [pc, #136]	; (8002a7c <MX_GPIO_Init+0x2e0>)
 80029f4:	f004 ffd8 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80029f8:	2310      	movs	r3, #16
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	481a      	ldr	r0, [pc, #104]	; (8002a74 <MX_GPIO_Init+0x2d8>)
 8002a0c:	f004 ffcc 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a10:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a16:	2300      	movs	r3, #0
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	4816      	ldr	r0, [pc, #88]	; (8002a80 <MX_GPIO_Init+0x2e4>)
 8002a26:	f004 ffbf 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a40:	4619      	mov	r1, r3
 8002a42:	480f      	ldr	r0, [pc, #60]	; (8002a80 <MX_GPIO_Init+0x2e4>)
 8002a44:	f004 ffb0 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4806      	ldr	r0, [pc, #24]	; (8002a78 <MX_GPIO_Init+0x2dc>)
 8002a5e:	f004 ffa3 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_GPIO_Init+0x300>)
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e017      	b.n	8002aa0 <MX_GPIO_Init+0x304>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40022800 	.word	0x40022800
 8002a80:	40021c00 	.word	0x40021c00
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40022400 	.word	0x40022400
 8002a94:	10120000 	.word	0x10120000
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	10110000 	.word	0x10110000
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4844      	ldr	r0, [pc, #272]	; (8002bbc <MX_GPIO_Init+0x420>)
 8002aaa:	f004 ff7d 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002aae:	2310      	movs	r3, #16
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002abe:	230a      	movs	r3, #10
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	483d      	ldr	r0, [pc, #244]	; (8002bc0 <MX_GPIO_Init+0x424>)
 8002aca:	f004 ff6d 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002ace:	23c8      	movs	r3, #200	; 0xc8
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4837      	ldr	r0, [pc, #220]	; (8002bc4 <MX_GPIO_Init+0x428>)
 8002ae6:	f004 ff5f 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002aea:	2305      	movs	r3, #5
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002afa:	230a      	movs	r3, #10
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	4830      	ldr	r0, [pc, #192]	; (8002bc8 <MX_GPIO_Init+0x42c>)
 8002b06:	f004 ff4f 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b0a:	2332      	movs	r3, #50	; 0x32
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b1a:	230b      	movs	r3, #11
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <MX_GPIO_Init+0x42c>)
 8002b26:	f004 ff3f 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <MX_GPIO_Init+0x428>)
 8002b3e:	f004 ff33 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b42:	2386      	movs	r3, #134	; 0x86
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b52:	230b      	movs	r3, #11
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	481b      	ldr	r0, [pc, #108]	; (8002bcc <MX_GPIO_Init+0x430>)
 8002b5e:	f004 ff23 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b62:	2328      	movs	r3, #40	; 0x28
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b72:	230a      	movs	r3, #10
 8002b74:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <MX_GPIO_Init+0x430>)
 8002b7e:	f004 ff13 	bl	80079a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002b82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b94:	2305      	movs	r3, #5
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <MX_GPIO_Init+0x434>)
 8002ba0:	f004 ff02 	bl	80079a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	2028      	movs	r0, #40	; 0x28
 8002baa:	f003 fceb 	bl	8006584 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bae:	2028      	movs	r0, #40	; 0x28
 8002bb0:	f003 fd04 	bl	80065bc <HAL_NVIC_EnableIRQ>

}
 8002bb4:	bf00      	nop
 8002bb6:	3740      	adds	r7, #64	; 0x40
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021c00 	.word	0x40021c00
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f011 fa51 	bl	8014084 <iprintf>
	printf("\n");
 8002be2:	200a      	movs	r0, #10
 8002be4:	f011 fa66 	bl	80140b4 <putchar>
	Error_Handler();
 8002be8:	f000 f816 	bl	8002c18 <Error_Handler>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002c06:	f003 f915 	bl	8005e34 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40001000 	.word	0x40001000

08002c18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002c1c:	f001 fa42 	bl	80040a4 <LED_Toggle>
		HAL_Delay(100);
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	f003 f927 	bl	8005e74 <HAL_Delay>
		LED_Toggle();
 8002c26:	e7f9      	b.n	8002c1c <Error_Handler+0x4>

08002c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	210f      	movs	r1, #15
 8002c62:	f06f 0001 	mvn.w	r0, #1
 8002c66:	f003 fc8d 	bl	8006584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <HAL_ADC_MspInit+0xa4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d13c      	bne.n	8002d14 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c9a:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002cb8:	f043 0320 	orr.w	r3, r3, #32
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_ADC_MspInit+0xa8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002ce2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002ce6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	480b      	ldr	r0, [pc, #44]	; (8002d24 <HAL_ADC_MspInit+0xac>)
 8002cf8:	f004 fe56 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d00:	2303      	movs	r3, #3
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <HAL_ADC_MspInit+0xb0>)
 8002d10:	f004 fe4a 	bl	80079a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40012200 	.word	0x40012200
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40020000 	.word	0x40020000

08002d2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_CRC_MspInit+0x38>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10b      	bne.n	8002d56 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_CRC_MspInit+0x3c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_CRC_MspInit+0x3c>)
 8002d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_CRC_MspInit+0x3c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023000 	.word	0x40023000
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	; 0x38
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_DCMI_MspInit+0x1d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f040 80d2 	bne.w	8002f34 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da8:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	4a64      	ldr	r2, [pc, #400]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6313      	str	r3, [r2, #48]	; 0x30
 8002db4:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc0:	4b5f      	ldr	r3, [pc, #380]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a5e      	ldr	r2, [pc, #376]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dc6:	f043 0308 	orr.w	r3, r3, #8
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de2:	6313      	str	r3, [r2, #48]	; 0x30
 8002de4:	4b56      	ldr	r3, [pc, #344]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6313      	str	r3, [r2, #48]	; 0x30
 8002e14:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_DCMI_MspInit+0x1d4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002e20:	2360      	movs	r3, #96	; 0x60
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e30:	230d      	movs	r3, #13
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4842      	ldr	r0, [pc, #264]	; (8002f44 <HAL_DCMI_MspInit+0x1d8>)
 8002e3c:	f004 fdb4 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002e40:	2308      	movs	r3, #8
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e50:	230d      	movs	r3, #13
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	483b      	ldr	r0, [pc, #236]	; (8002f48 <HAL_DCMI_MspInit+0x1dc>)
 8002e5c:	f004 fda4 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e72:	230d      	movs	r3, #13
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4833      	ldr	r0, [pc, #204]	; (8002f4c <HAL_DCMI_MspInit+0x1e0>)
 8002e7e:	f004 fd93 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002e82:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e94:	230d      	movs	r3, #13
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	482c      	ldr	r0, [pc, #176]	; (8002f50 <HAL_DCMI_MspInit+0x1e4>)
 8002ea0:	f004 fd82 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002ea4:	2350      	movs	r3, #80	; 0x50
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002eb4:	230d      	movs	r3, #13
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4825      	ldr	r0, [pc, #148]	; (8002f54 <HAL_DCMI_MspInit+0x1e8>)
 8002ec0:	f004 fd72 	bl	80079a8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ec6:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <HAL_DCMI_MspInit+0x1f0>)
 8002ec8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002f0a:	f003 fda7 	bl	8006a5c <HAL_DMA_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002f14:	f7ff fe80 	bl	8002c18 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002f1c:	649a      	str	r2, [r3, #72]	; 0x48
 8002f1e:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <HAL_DCMI_MspInit+0x1ec>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2105      	movs	r1, #5
 8002f28:	204e      	movs	r0, #78	; 0x4e
 8002f2a:	f003 fb2b 	bl	8006584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002f2e:	204e      	movs	r0, #78	; 0x4e
 8002f30:	f003 fb44 	bl	80065bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002f34:	bf00      	nop
 8002f36:	3738      	adds	r7, #56	; 0x38
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	50050000 	.word	0x50050000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40020000 	.word	0x40020000
 8002f58:	20001770 	.word	0x20001770
 8002f5c:	40026428 	.word	0x40026428

08002f60 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_DMA2D_MspInit+0x44>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d113      	bne.n	8002f9a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_DMA2D_MspInit+0x48>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <HAL_DMA2D_MspInit+0x48>)
 8002f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_DMA2D_MspInit+0x48>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	205a      	movs	r0, #90	; 0x5a
 8002f90:	f003 faf8 	bl	8006584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002f94:	205a      	movs	r0, #90	; 0x5a
 8002f96:	f003 fb11 	bl	80065bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	4002b000 	.word	0x4002b000
 8002fa8:	40023800 	.word	0x40023800

08002fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <HAL_I2C_MspInit+0xdc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d129      	bne.n	8003022 <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fec:	2312      	movs	r3, #18
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4823      	ldr	r0, [pc, #140]	; (8003090 <HAL_I2C_MspInit+0xe4>)
 8003004:	f004 fcd0 	bl	80079a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_I2C_MspInit+0xe0>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <HAL_I2C_MspInit+0xe0>)
 800300e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003020:	e02d      	b.n	800307e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_I2C_MspInit+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d128      	bne.n	800307e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_I2C_MspInit+0xe0>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	6313      	str	r3, [r2, #48]	; 0x30
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_I2C_MspInit+0xe0>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003044:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304a:	2312      	movs	r3, #18
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800304e:	2301      	movs	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003056:	2304      	movs	r3, #4
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4619      	mov	r1, r3
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <HAL_I2C_MspInit+0xec>)
 8003062:	f004 fca1 	bl	80079a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_I2C_MspInit+0xe0>)
 800306c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_I2C_MspInit+0xe0>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	bf00      	nop
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40005400 	.word	0x40005400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020400 	.word	0x40020400
 8003094:	40005c00 	.word	0x40005c00
 8003098:	40021c00 	.word	0x40021c00

0800309c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_I2C_MspDeInit+0x64>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d110      	bne.n	80030d0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_I2C_MspDeInit+0x68>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_I2C_MspDeInit+0x68>)
 80030b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030be:	4812      	ldr	r0, [pc, #72]	; (8003108 <HAL_I2C_MspDeInit+0x6c>)
 80030c0:	f004 fe1e 	bl	8007d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80030c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030c8:	480f      	ldr	r0, [pc, #60]	; (8003108 <HAL_I2C_MspDeInit+0x6c>)
 80030ca:	f004 fe19 	bl	8007d00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80030ce:	e013      	b.n	80030f8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <HAL_I2C_MspDeInit+0x70>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10e      	bne.n	80030f8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_I2C_MspDeInit+0x68>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_I2C_MspDeInit+0x68>)
 80030e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	4809      	ldr	r0, [pc, #36]	; (8003110 <HAL_I2C_MspDeInit+0x74>)
 80030ea:	f004 fe09 	bl	8007d00 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80030ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <HAL_I2C_MspDeInit+0x74>)
 80030f4:	f004 fe04 	bl	8007d00 <HAL_GPIO_DeInit>
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40005400 	.word	0x40005400
 8003104:	40023800 	.word	0x40023800
 8003108:	40020400 	.word	0x40020400
 800310c:	40005c00 	.word	0x40005c00
 8003110:	40021c00 	.word	0x40021c00

08003114 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a51      	ldr	r2, [pc, #324]	; (8003278 <HAL_LTDC_MspInit+0x164>)
 8003132:	4293      	cmp	r3, r2
 8003134:	f040 809b 	bne.w	800326e <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800313e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003142:	6453      	str	r3, [r2, #68]	; 0x44
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003150:	4b4a      	ldr	r3, [pc, #296]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4a49      	ldr	r2, [pc, #292]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003156:	f043 0310 	orr.w	r3, r3, #16
 800315a:	6313      	str	r3, [r2, #48]	; 0x30
 800315c:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003168:	4b44      	ldr	r3, [pc, #272]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a43      	ldr	r2, [pc, #268]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800316e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003180:	4b3e      	ldr	r3, [pc, #248]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4a3d      	ldr	r2, [pc, #244]	; (800327c <HAL_LTDC_MspInit+0x168>)
 8003186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800318a:	6313      	str	r3, [r2, #48]	; 0x30
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003198:	4b38      	ldr	r3, [pc, #224]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_LTDC_MspInit+0x168>)
 800319e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	4b35      	ldr	r3, [pc, #212]	; (800327c <HAL_LTDC_MspInit+0x168>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_LTDC_MspInit+0x168>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a31      	ldr	r2, [pc, #196]	; (800327c <HAL_LTDC_MspInit+0x168>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_LTDC_MspInit+0x168>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80031c8:	2310      	movs	r3, #16
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031cc:	2302      	movs	r3, #2
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031d8:	230e      	movs	r3, #14
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80031dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e0:	4619      	mov	r1, r3
 80031e2:	4827      	ldr	r0, [pc, #156]	; (8003280 <HAL_LTDC_MspInit+0x16c>)
 80031e4:	f004 fbe0 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80031e8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031fa:	230e      	movs	r3, #14
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80031fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003202:	4619      	mov	r1, r3
 8003204:	481f      	ldr	r0, [pc, #124]	; (8003284 <HAL_LTDC_MspInit+0x170>)
 8003206:	f004 fbcf 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800320a:	23f7      	movs	r3, #247	; 0xf7
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800321a:	230e      	movs	r3, #14
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800321e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003222:	4619      	mov	r1, r3
 8003224:	4818      	ldr	r0, [pc, #96]	; (8003288 <HAL_LTDC_MspInit+0x174>)
 8003226:	f004 fbbf 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800323c:	2309      	movs	r3, #9
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	4619      	mov	r1, r3
 8003246:	4811      	ldr	r0, [pc, #68]	; (800328c <HAL_LTDC_MspInit+0x178>)
 8003248:	f004 fbae 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800324c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800325e:	230e      	movs	r3, #14
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003266:	4619      	mov	r1, r3
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <HAL_LTDC_MspInit+0x17c>)
 800326a:	f004 fb9d 	bl	80079a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800326e:	bf00      	nop
 8003270:	3738      	adds	r7, #56	; 0x38
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40016800 	.word	0x40016800
 800327c:	40023800 	.word	0x40023800
 8003280:	40021000 	.word	0x40021000
 8003284:	40022400 	.word	0x40022400
 8003288:	40022800 	.word	0x40022800
 800328c:	40021800 	.word	0x40021800
 8003290:	40022000 	.word	0x40022000

08003294 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3f      	ldr	r2, [pc, #252]	; (80033b0 <HAL_QSPI_MspInit+0x11c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d178      	bne.n	80033a8 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6393      	str	r3, [r2, #56]	; 0x38
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032d4:	f043 0310 	orr.w	r3, r3, #16
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032fe:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_QSPI_MspInit+0x120>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003316:	2304      	movs	r3, #4
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003326:	2309      	movs	r3, #9
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	4821      	ldr	r0, [pc, #132]	; (80033b8 <HAL_QSPI_MspInit+0x124>)
 8003332:	f004 fb39 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003346:	230a      	movs	r3, #10
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	4619      	mov	r1, r3
 8003350:	481a      	ldr	r0, [pc, #104]	; (80033bc <HAL_QSPI_MspInit+0x128>)
 8003352:	f004 fb29 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003356:	2304      	movs	r3, #4
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003366:	2309      	movs	r3, #9
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4812      	ldr	r0, [pc, #72]	; (80033bc <HAL_QSPI_MspInit+0x128>)
 8003372:	f004 fb19 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003376:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003388:	2309      	movs	r3, #9
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	480b      	ldr	r0, [pc, #44]	; (80033c0 <HAL_QSPI_MspInit+0x12c>)
 8003394:	f004 fb08 	bl	80079a8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003398:	2200      	movs	r2, #0
 800339a:	2105      	movs	r1, #5
 800339c:	205c      	movs	r0, #92	; 0x5c
 800339e:	f003 f8f1 	bl	8006584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80033a2:	205c      	movs	r0, #92	; 0x5c
 80033a4:	f003 f90a 	bl	80065bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80033a8:	bf00      	nop
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	a0001000 	.word	0xa0001000
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020c00 	.word	0x40020c00

080033c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <HAL_RTC_MspInit+0x2c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d105      	bne.n	80033e2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RTC_MspInit+0x30>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <HAL_RTC_MspInit+0x30>)
 80033dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40002800 	.word	0x40002800
 80033f4:	40023800 	.word	0x40023800

080033f8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003418:	d127      	bne.n	800346a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_SPDIFRX_MspInit+0x7c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800345a:	2308      	movs	r3, #8
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <HAL_SPDIFRX_MspInit+0x80>)
 8003466:	f004 fa9f 	bl	80079a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40020c00 	.word	0x40020c00

0800347c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2e      	ldr	r2, [pc, #184]	; (8003544 <HAL_TIM_Base_MspInit+0xc8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10c      	bne.n	80034a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80034a6:	e046      	b.n	8003536 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d10c      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a24      	ldr	r2, [pc, #144]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	69bb      	ldr	r3, [r7, #24]
}
 80034ca:	e034      	b.n	8003536 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_TIM_Base_MspInit+0xd0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10c      	bne.n	80034f0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
}
 80034ee:	e022      	b.n	8003536 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_TIM_Base_MspInit+0xd4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10c      	bne.n	8003514 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
}
 8003512:	e010      	b.n	8003536 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <HAL_TIM_Base_MspInit+0xd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10b      	bne.n	8003536 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_TIM_Base_MspInit+0xcc>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
}
 8003536:	bf00      	nop
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40023800 	.word	0x40023800
 800354c:	40000400 	.word	0x40000400
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_TIM_PWM_MspInit+0x38>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10b      	bne.n	8003582 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_TIM_PWM_MspInit+0x3c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_TIM_PWM_MspInit+0x3c>)
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <HAL_TIM_PWM_MspInit+0x3c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40001800 	.word	0x40001800
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a56      	ldr	r2, [pc, #344]	; (8003710 <HAL_TIM_MspPostInit+0x178>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d11d      	bne.n	80035f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a55      	ldr	r2, [pc, #340]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	484a      	ldr	r0, [pc, #296]	; (8003718 <HAL_TIM_MspPostInit+0x180>)
 80035f0:	f004 f9da 	bl	80079a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80035f4:	e087      	b.n	8003706 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d11d      	bne.n	800363c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003600:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	4a43      	ldr	r2, [pc, #268]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6313      	str	r3, [r2, #48]	; 0x30
 800360c:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800362a:	2301      	movs	r3, #1
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	4838      	ldr	r0, [pc, #224]	; (8003718 <HAL_TIM_MspPostInit+0x180>)
 8003636:	f004 f9b7 	bl	80079a8 <HAL_GPIO_Init>
}
 800363a:	e064      	b.n	8003706 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_TIM_MspPostInit+0x184>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d11c      	bne.n	8003680 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800365e:	2310      	movs	r3, #16
 8003660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800366e:	2302      	movs	r3, #2
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003672:	f107 031c 	add.w	r3, r7, #28
 8003676:	4619      	mov	r1, r3
 8003678:	4829      	ldr	r0, [pc, #164]	; (8003720 <HAL_TIM_MspPostInit+0x188>)
 800367a:	f004 f995 	bl	80079a8 <HAL_GPIO_Init>
}
 800367e:	e042      	b.n	8003706 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <HAL_TIM_MspPostInit+0x18c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d11c      	bne.n	80036c4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036b2:	2302      	movs	r3, #2
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	481a      	ldr	r0, [pc, #104]	; (8003728 <HAL_TIM_MspPostInit+0x190>)
 80036be:	f004 f973 	bl	80079a8 <HAL_GPIO_Init>
}
 80036c2:	e020      	b.n	8003706 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_TIM_MspPostInit+0x194>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d11b      	bne.n	8003706 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80036d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_TIM_MspPostInit+0x17c>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80036e6:	2340      	movs	r3, #64	; 0x40
 80036e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80036f6:	2309      	movs	r3, #9
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	4619      	mov	r1, r3
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <HAL_TIM_MspPostInit+0x198>)
 8003702:	f004 f951 	bl	80079a8 <HAL_GPIO_Init>
}
 8003706:	bf00      	nop
 8003708:	3730      	adds	r7, #48	; 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000
 800371c:	40000400 	.word	0x40000400
 8003720:	40020400 	.word	0x40020400
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40022000 	.word	0x40022000
 800372c:	40001800 	.word	0x40001800
 8003730:	40021c00 	.word	0x40021c00

08003734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_UART_MspInit+0x110>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d145      	bne.n	80037e2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003756:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <HAL_UART_MspInit+0x114>)
 800375c:	f043 0310 	orr.w	r3, r3, #16
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a35      	ldr	r2, [pc, #212]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_UART_MspInit+0x114>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <HAL_UART_MspInit+0x114>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ae:	2307      	movs	r3, #7
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	4824      	ldr	r0, [pc, #144]	; (800384c <HAL_UART_MspInit+0x118>)
 80037ba:	f004 f8f5 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80037be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037d0:	2307      	movs	r3, #7
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80037d4:	f107 031c 	add.w	r3, r7, #28
 80037d8:	4619      	mov	r1, r3
 80037da:	481d      	ldr	r0, [pc, #116]	; (8003850 <HAL_UART_MspInit+0x11c>)
 80037dc:	f004 f8e4 	bl	80079a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80037e0:	e02c      	b.n	800383c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_UART_MspInit+0x120>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d127      	bne.n	800383c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_UART_MspInit+0x114>)
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_UART_MspInit+0x114>)
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	6453      	str	r3, [r2, #68]	; 0x44
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_UART_MspInit+0x114>)
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <HAL_UART_MspInit+0x114>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6313      	str	r3, [r2, #48]	; 0x30
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_UART_MspInit+0x114>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800381c:	23c0      	movs	r3, #192	; 0xc0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800382c:	2308      	movs	r3, #8
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003830:	f107 031c 	add.w	r3, r7, #28
 8003834:	4619      	mov	r1, r3
 8003836:	4808      	ldr	r0, [pc, #32]	; (8003858 <HAL_UART_MspInit+0x124>)
 8003838:	f004 f8b6 	bl	80079a8 <HAL_GPIO_Init>
}
 800383c:	bf00      	nop
 800383e:	3730      	adds	r7, #48	; 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40011000 	.word	0x40011000
 8003848:	40023800 	.word	0x40023800
 800384c:	40020400 	.word	0x40020400
 8003850:	40020000 	.word	0x40020000
 8003854:	40011400 	.word	0x40011400
 8003858:	40020800 	.word	0x40020800

0800385c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003870:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <HAL_FMC_MspInit+0x10c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d173      	bne.n	8003960 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003878:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_FMC_MspInit+0x10c>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_FMC_MspInit+0x110>)
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_FMC_MspInit+0x110>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6393      	str	r3, [r2, #56]	; 0x38
 800388a:	4b38      	ldr	r3, [pc, #224]	; (800396c <HAL_FMC_MspInit+0x110>)
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003896:	f64f 7383 	movw	r3, #65411	; 0xff83
 800389a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038a8:	230c      	movs	r3, #12
 80038aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	482f      	ldr	r0, [pc, #188]	; (8003970 <HAL_FMC_MspInit+0x114>)
 80038b2:	f004 f879 	bl	80079a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80038b6:	f248 1333 	movw	r3, #33075	; 0x8133
 80038ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2303      	movs	r3, #3
 80038c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038c8:	230c      	movs	r3, #12
 80038ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <HAL_FMC_MspInit+0x118>)
 80038d2:	f004 f869 	bl	80079a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80038d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038e8:	230c      	movs	r3, #12
 80038ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	4821      	ldr	r0, [pc, #132]	; (8003978 <HAL_FMC_MspInit+0x11c>)
 80038f2:	f004 f859 	bl	80079a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80038f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003908:	230c      	movs	r3, #12
 800390a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4619      	mov	r1, r3
 8003910:	481a      	ldr	r0, [pc, #104]	; (800397c <HAL_FMC_MspInit+0x120>)
 8003912:	f004 f849 	bl	80079a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003916:	2328      	movs	r3, #40	; 0x28
 8003918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	2302      	movs	r3, #2
 800391c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003922:	2303      	movs	r3, #3
 8003924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003926:	230c      	movs	r3, #12
 8003928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4814      	ldr	r0, [pc, #80]	; (8003980 <HAL_FMC_MspInit+0x124>)
 8003930:	f004 f83a 	bl	80079a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003934:	2308      	movs	r3, #8
 8003936:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003938:	2302      	movs	r3, #2
 800393a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003940:	2303      	movs	r3, #3
 8003942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003944:	230c      	movs	r3, #12
 8003946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	4619      	mov	r1, r3
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <HAL_FMC_MspInit+0x128>)
 800394e:	f004 f82b 	bl	80079a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HAL_FMC_MspInit+0x12c>)
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_FMC_MspInit+0x130>)
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_FMC_MspInit+0x130>)
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <HAL_FMC_MspInit+0x12c>)
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
 800395e:	e000      	b.n	8003962 <HAL_FMC_MspInit+0x106>
    return;
 8003960:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000988 	.word	0x20000988
 800396c:	40023800 	.word	0x40023800
 8003970:	40021000 	.word	0x40021000
 8003974:	40021800 	.word	0x40021800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021400 	.word	0x40021400
 8003980:	40021c00 	.word	0x40021c00
 8003984:	40020800 	.word	0x40020800
 8003988:	20001cd8 	.word	0x20001cd8
 800398c:	20001524 	.word	0x20001524

08003990 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003998:	f7ff ff60 	bl	800385c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6f      	ldr	r2, [pc, #444]	; (8003b70 <HAL_SAI_MspInit+0x1cc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d175      	bne.n	8003aa2 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80039b6:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80039be:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a6d      	ldr	r2, [pc, #436]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 80039c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b6b      	ldr	r3, [pc, #428]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 80039de:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 80039e0:	2310      	movs	r3, #16
 80039e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80039f0:	230a      	movs	r3, #10
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	4860      	ldr	r0, [pc, #384]	; (8003b7c <HAL_SAI_MspInit+0x1d8>)
 80039fc:	f003 ffd4 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003a00:	23e0      	movs	r3, #224	; 0xe0
 8003a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a10:	230a      	movs	r3, #10
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4858      	ldr	r0, [pc, #352]	; (8003b7c <HAL_SAI_MspInit+0x1d8>)
 8003a1c:	f003 ffc4 	bl	80079a8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003a20:	4b57      	ldr	r3, [pc, #348]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a22:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_SAI_MspInit+0x1e0>)
 8003a24:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a28:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003a2c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a30:	2240      	movs	r2, #64	; 0x40
 8003a32:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003a3a:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a40:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a42:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a48:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a50:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003a52:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a58:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003a5a:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a60:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a64:	2204      	movs	r2, #4
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a68:	4b45      	ldr	r3, [pc, #276]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003a6e:	4b44      	ldr	r3, [pc, #272]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003a74:	4b42      	ldr	r3, [pc, #264]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003a7a:	4841      	ldr	r0, [pc, #260]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a7c:	f002 ffee 	bl	8006a5c <HAL_DMA_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003a86:	f7ff f8c7 	bl	8002c18 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a8e:	671a      	str	r2, [r3, #112]	; 0x70
 8003a90:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a39      	ldr	r2, [pc, #228]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a9c:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <HAL_SAI_MspInit+0x1dc>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <HAL_SAI_MspInit+0x1e4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d15c      	bne.n	8003b66 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 8003aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003abe:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_SAI_MspInit+0x1d4>)
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a28      	ldr	r2, [pc, #160]	; (8003b74 <HAL_SAI_MspInit+0x1d0>)
 8003ad4:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003ae8:	230a      	movs	r3, #10
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	4826      	ldr	r0, [pc, #152]	; (8003b8c <HAL_SAI_MspInit+0x1e8>)
 8003af4:	f003 ff58 	bl	80079a8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003afa:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_SAI_MspInit+0x1f0>)
 8003afc:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b04:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b16:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b26:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003b30:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b36:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003b3e:	4814      	ldr	r0, [pc, #80]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b40:	f002 ff8c 	bl	8006a5c <HAL_DMA_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003b4a:	f7ff f865 	bl	8002c18 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b52:	671a      	str	r2, [r3, #112]	; 0x70
 8003b54:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_SAI_MspInit+0x1ec>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40015c04 	.word	0x40015c04
 8003b74:	2000098c 	.word	0x2000098c
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	20001b1c 	.word	0x20001b1c
 8003b84:	40026470 	.word	0x40026470
 8003b88:	40015c24 	.word	0x40015c24
 8003b8c:	40021800 	.word	0x40021800
 8003b90:	200015d0 	.word	0x200015d0
 8003b94:	400264b8 	.word	0x400264b8

08003b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	2036      	movs	r0, #54	; 0x36
 8003bae:	f002 fce9 	bl	8006584 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bb2:	2036      	movs	r0, #54	; 0x36
 8003bb4:	f002 fd02 	bl	80065bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_InitTick+0xa0>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_InitTick+0xa0>)
 8003bbe:	f043 0310 	orr.w	r3, r3, #16
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_InitTick+0xa0>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bd0:	f107 0210 	add.w	r2, r7, #16
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f008 f996 	bl	800bf0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003be0:	f008 f96c 	bl	800bebc <HAL_RCC_GetPCLK1Freq>
 8003be4:	4603      	mov	r3, r0
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_InitTick+0xa4>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_InitTick+0xa8>)
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_InitTick+0xac>)
 8003bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003c18:	4809      	ldr	r0, [pc, #36]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c1a:	f009 ff69 	bl	800daf0 <HAL_TIM_Base_Init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003c24:	4806      	ldr	r0, [pc, #24]	; (8003c40 <HAL_InitTick+0xa8>)
 8003c26:	f009 ffbb 	bl	800dba0 <HAL_TIM_Base_Start_IT>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	e000      	b.n	8003c30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3730      	adds	r7, #48	; 0x30
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	20001d58 	.word	0x20001d58
 8003c44:	40001000 	.word	0x40001000

08003c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c4c:	e7fe      	b.n	8003c4c <NMI_Handler+0x4>

08003c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c52:	e7fe      	b.n	8003c52 <HardFault_Handler+0x4>

08003c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c58:	e7fe      	b.n	8003c58 <MemManage_Handler+0x4>

08003c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c5e:	e7fe      	b.n	8003c5e <BusFault_Handler+0x4>

08003c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c64:	e7fe      	b.n	8003c64 <UsageFault_Handler+0x4>

08003c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c7c:	f004 f980 	bl	8007f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c80:	bf00      	nop
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM6_DAC_IRQHandler+0x10>)
 8003c8a:	f00a f858 	bl	800dd3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001d58 	.word	0x20001d58

08003c98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA2_Stream0_IRQHandler+0x10>)
 8003c9e:	f003 f87d 	bl	8006d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20001524 	.word	0x20001524

08003cac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <DMA2_Stream1_IRQHandler+0x10>)
 8003cb2:	f003 f873 	bl	8006d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20001770 	.word	0x20001770

08003cc0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <DMA2_Stream4_IRQHandler+0x10>)
 8003cc6:	f003 f869 	bl	8006d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001b1c 	.word	0x20001b1c

08003cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <OTG_FS_IRQHandler+0x10>)
 8003cda:	f004 f974 	bl	8007fc6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200419a8 	.word	0x200419a8

08003ce8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <DMA2_Stream7_IRQHandler+0x10>)
 8003cee:	f003 f855 	bl	8006d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200015d0 	.word	0x200015d0

08003cfc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <DCMI_IRQHandler+0x10>)
 8003d02:	f002 fddb 	bl	80068bc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200019dc 	.word	0x200019dc

08003d10 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <DMA2D_IRQHandler+0x10>)
 8003d16:	f003 fc09 	bl	800752c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20001c00 	.word	0x20001c00

08003d24 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <QUADSPI_IRQHandler+0x10>)
 8003d2a:	f006 fd2d 	bl	800a788 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20001d0c 	.word	0x20001d0c

08003d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_kill>:

int _kill(int pid, int sig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d52:	f00f fc3b 	bl	80135cc <__errno>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2216      	movs	r2, #22
 8003d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_exit>:

void _exit (int status)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d7a:	e7fe      	b.n	8003d7a <_exit+0x12>

08003d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e00a      	b.n	8003da4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d8e:	f3af 8000 	nop.w
 8003d92:	4601      	mov	r1, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	60ba      	str	r2, [r7, #8]
 8003d9a:	b2ca      	uxtb	r2, r1
 8003d9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbf0      	blt.n	8003d8e <_read+0x12>
	}

return len;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e009      	b.n	8003ddc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f971 	bl	80040b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbf1      	blt.n	8003dc8 <_write+0x12>
	}
	return len;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_close>:

int _close(int file)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e16:	605a      	str	r2, [r3, #4]
	return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_isatty>:

int _isatty(int file)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
	return 0;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <_sbrk+0x5c>)
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <_sbrk+0x60>)
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <_sbrk+0x64>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <_sbrk+0x68>)
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <_sbrk+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e88:	f00f fba0 	bl	80135cc <__errno>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	220c      	movs	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e96:	e009      	b.n	8003eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <_sbrk+0x64>)
 8003ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20050000 	.word	0x20050000
 8003eb8:	00000800 	.word	0x00000800
 8003ebc:	20000990 	.word	0x20000990
 8003ec0:	20041cc0 	.word	0x20041cc0

08003ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <SystemInit+0x20>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <SystemInit+0x20>)
 8003ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef2:	f000 fa91 	bl	8004418 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003ef6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003efa:	f000 fa13 	bl	8004324 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f02:	f000 fa3f 	bl	8004384 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003f06:	4810      	ldr	r0, [pc, #64]	; (8003f48 <uiDisplayBasic+0x60>)
 8003f08:	f000 fa54 	bl	80043b4 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2301      	movs	r3, #1
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <uiDisplayBasic+0x64>)
 8003f14:	2100      	movs	r1, #0
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 fac6 	bl	80044a8 <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <uiDisplayBasic+0x68>)
 8003f1e:	f000 fa49 	bl	80043b4 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003f22:	2301      	movs	r3, #1
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2303      	movs	r3, #3
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <uiDisplayBasic+0x6c>)
 8003f2a:	211e      	movs	r1, #30
 8003f2c:	200a      	movs	r0, #10
 8003f2e:	f000 fabb 	bl	80044a8 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8003f32:	2301      	movs	r3, #1
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2303      	movs	r3, #3
 8003f38:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <uiDisplayBasic+0x70>)
 8003f3a:	2132      	movs	r1, #50	; 0x32
 8003f3c:	200a      	movs	r0, #10
 8003f3e:	f000 fab3 	bl	80044a8 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	2000001c 	.word	0x2000001c
 8003f4c:	080170cc 	.word	0x080170cc
 8003f50:	20000014 	.word	0x20000014
 8003f54:	080170e4 	.word	0x080170e4
 8003f58:	080170f0 	.word	0x080170f0

08003f5c <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b096      	sub	sp, #88	; 0x58
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f66:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003f6a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003f6e:	f000 f9d9 	bl	8004324 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f76:	f000 fa05 	bl	8004384 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 8003f7a:	483a      	ldr	r0, [pc, #232]	; (8004064 <uiDisplayInputLevel+0x108>)
 8003f7c:	f000 fa1a 	bl	80043b4 <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f8c:	f7fc fde4 	bl	8000b58 <__aeabi_dcmpgt>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d023      	beq.n	8003fde <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 8003f96:	ed97 0b02 	vldr	d0, [r7, #8]
 8003f9a:	f012 fb21 	bl	80165e0 <log10>
 8003f9e:	ec51 0b10 	vmov	r0, r1, d0
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <uiDisplayInputLevel+0x10c>)
 8003fa8:	f7fc fb46 	bl	8000638 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fdf0 	bl	8000b98 <__aeabi_d2iz>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc2:	492a      	ldr	r1, [pc, #168]	; (800406c <uiDisplayInputLevel+0x110>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f010 f911 	bl	80141ec <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 8003fca:	f107 0214 	add.w	r2, r7, #20
 8003fce:	2301      	movs	r3, #1
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	211e      	movs	r1, #30
 8003fd6:	205a      	movs	r0, #90	; 0x5a
 8003fd8:	f000 fa66 	bl	80044a8 <LCD_DrawString>
 8003fdc:	e007      	b.n	8003fee <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <uiDisplayInputLevel+0x114>)
 8003fe6:	211e      	movs	r1, #30
 8003fe8:	205a      	movs	r0, #90	; 0x5a
 8003fea:	f000 fa5d 	bl	80044a8 <LCD_DrawString>

	if (inputLevelR > 0) {
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ffa:	f7fc fdad 	bl	8000b58 <__aeabi_dcmpgt>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d023      	beq.n	800404c <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8004004:	ed97 0b00 	vldr	d0, [r7]
 8004008:	f012 faea 	bl	80165e0 <log10>
 800400c:	ec51 0b10 	vmov	r0, r1, d0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <uiDisplayInputLevel+0x10c>)
 8004016:	f7fc fb0f 	bl	8000638 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fdb9 	bl	8000b98 <__aeabi_d2iz>
 8004026:	4603      	mov	r3, r0
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <uiDisplayInputLevel+0x110>)
 8004032:	4618      	mov	r0, r3
 8004034:	f010 f8da 	bl	80141ec <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 8004038:	f107 0214 	add.w	r2, r7, #20
 800403c:	2301      	movs	r3, #1
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2303      	movs	r3, #3
 8004042:	2132      	movs	r1, #50	; 0x32
 8004044:	205a      	movs	r0, #90	; 0x5a
 8004046:	f000 fa2f 	bl	80044a8 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 800404a:	e007      	b.n	800405c <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 800404c:	2301      	movs	r3, #1
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2303      	movs	r3, #3
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <uiDisplayInputLevel+0x114>)
 8004054:	2132      	movs	r1, #50	; 0x32
 8004056:	205a      	movs	r0, #90	; 0x5a
 8004058:	f000 fa26 	bl	80044a8 <LCD_DrawString>
}
 800405c:	bf00      	nop
 800405e:	3750      	adds	r7, #80	; 0x50
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000014 	.word	0x20000014
 8004068:	40340000 	.word	0x40340000
 800406c:	080170fc 	.word	0x080170fc
 8004070:	08017108 	.word	0x08017108

08004074 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8004078:	2201      	movs	r2, #1
 800407a:	2102      	movs	r1, #2
 800407c:	4802      	ldr	r0, [pc, #8]	; (8004088 <LED_On+0x14>)
 800407e:	f003 ff4b 	bl	8007f18 <HAL_GPIO_WritePin>
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40022000 	.word	0x40022000

0800408c <LED_Off>:

void LED_Off(){
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8004090:	2200      	movs	r2, #0
 8004092:	2102      	movs	r1, #2
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <LED_Off+0x14>)
 8004096:	f003 ff3f 	bl	8007f18 <HAL_GPIO_WritePin>
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40022000 	.word	0x40022000

080040a4 <LED_Toggle>:

void LED_Toggle(){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80040a8:	2102      	movs	r1, #2
 80040aa:	4802      	ldr	r0, [pc, #8]	; (80040b4 <LED_Toggle+0x10>)
 80040ac:	f003 ff4d 	bl	8007f4a <HAL_GPIO_TogglePin>

}
 80040b0:	bf00      	nop
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40022000 	.word	0x40022000

080040b8 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80040c0:	1d39      	adds	r1, r7, #4
 80040c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c6:	2201      	movs	r2, #1
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <__io_putchar+0x20>)
 80040ca:	f00a fe65 	bl	800ed98 <HAL_UART_Transmit>
	return ch;
 80040ce:	687b      	ldr	r3, [r7, #4]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20001a2c 	.word	0x20001a2c

080040dc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af04      	add	r7, sp, #16
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	72fb      	strb	r3, [r7, #11]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	b299      	uxth	r1, r3
 80040fe:	88f8      	ldrh	r0, [r7, #6]
 8004100:	893a      	ldrh	r2, [r7, #8]
 8004102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4603      	mov	r3, r0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f005 fbb0 	bl	8009878 <HAL_I2C_Mem_Read>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	4619      	mov	r1, r3
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f832 	bl	8004190 <I2Cx_Error>
  }
  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08a      	sub	sp, #40	; 0x28
 800413a:	af04      	add	r7, sp, #16
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	4608      	mov	r0, r1
 8004140:	4611      	mov	r1, r2
 8004142:	461a      	mov	r2, r3
 8004144:	4603      	mov	r3, r0
 8004146:	72fb      	strb	r3, [r7, #11]
 8004148:	460b      	mov	r3, r1
 800414a:	813b      	strh	r3, [r7, #8]
 800414c:	4613      	mov	r3, r2
 800414e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	b299      	uxth	r1, r3
 8004158:	88f8      	ldrh	r0, [r7, #6]
 800415a:	893a      	ldrh	r2, [r7, #8]
 800415c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4603      	mov	r3, r0
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f005 fa6f 	bl	8009650 <HAL_I2C_Mem_Write>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	4619      	mov	r1, r3
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f805 	bl	8004190 <I2Cx_Error>
  }
  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f005 fa27 	bl	80095f0 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f005 f994 	bl	80094d0 <HAL_I2C_Init>
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
 80041ba:	460b      	mov	r3, r1
 80041bc:	80bb      	strh	r3, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80041ce:	89fb      	ldrh	r3, [r7, #14]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b21a      	sxth	r2, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	b21b      	sxth	r3, r3
 80041da:	4313      	orrs	r3, r2
 80041dc:	b21b      	sxth	r3, r3
 80041de:	b29b      	uxth	r3, r3
 80041e0:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80041e2:	88ba      	ldrh	r2, [r7, #4]
 80041e4:	79f9      	ldrb	r1, [r7, #7]
 80041e6:	2302      	movs	r3, #2
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	1cbb      	adds	r3, r7, #2
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2302      	movs	r3, #2
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <AUDIO_I2C_Write+0x50>)
 80041f2:	f7ff ffa0 	bl	8004136 <I2Cx_WriteMultiple>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200014d8 	.word	0x200014d8

08004204 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	81bb      	strh	r3, [r7, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800421c:	88ba      	ldrh	r2, [r7, #4]
 800421e:	79f9      	ldrb	r1, [r7, #7]
 8004220:	2302      	movs	r3, #2
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2302      	movs	r3, #2
 800422c:	480a      	ldr	r0, [pc, #40]	; (8004258 <AUDIO_I2C_Read+0x54>)
 800422e:	f7ff ff55 	bl	80040dc <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004232:	89bb      	ldrh	r3, [r7, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004238:	89bb      	ldrh	r3, [r7, #12]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	b29b      	uxth	r3, r3
 800423e:	b21a      	sxth	r2, r3
 8004240:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004244:	4313      	orrs	r3, r2
 8004246:	b21b      	sxth	r3, r3
 8004248:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	81bb      	strh	r3, [r7, #12]

  return read_value;
 800424e:	89bb      	ldrh	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200014d8 	.word	0x200014d8

0800425c <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af02      	add	r7, sp, #8
 8004262:	4603      	mov	r3, r0
 8004264:	460a      	mov	r2, r1
 8004266:	71fb      	strb	r3, [r7, #7]
 8004268:	4613      	mov	r3, r2
 800426a:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	b29a      	uxth	r2, r3
 8004270:	2301      	movs	r3, #1
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	1dbb      	adds	r3, r7, #6
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2301      	movs	r3, #1
 800427a:	2170      	movs	r1, #112	; 0x70
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <TS_I2C_Write+0x30>)
 800427e:	f7ff ff5a 	bl	8004136 <I2Cx_WriteMultiple>

}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200014d8 	.word	0x200014d8

08004290 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <LCD_Init+0x44>)
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	2b02      	cmp	r3, #2
 800429a:	d002      	beq.n	80042a2 <LCD_Init+0x12>
 800429c:	480e      	ldr	r0, [pc, #56]	; (80042d8 <LCD_Init+0x48>)
 800429e:	f7fe fc99 	bl	8002bd4 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <LCD_Init+0x4c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	4619      	mov	r1, r3
 80042aa:	480a      	ldr	r0, [pc, #40]	; (80042d4 <LCD_Init+0x44>)
 80042ac:	f005 ffc0 	bl	800a230 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 80042b0:	f000 f81a 	bl	80042e8 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 80042b4:	480a      	ldr	r0, [pc, #40]	; (80042e0 <LCD_Init+0x50>)
 80042b6:	f000 f87d 	bl	80043b4 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042be:	f000 f861 	bl	8004384 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80042c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80042c6:	f000 f82d 	bl	8004324 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 80042ca:	4806      	ldr	r0, [pc, #24]	; (80042e4 <LCD_Init+0x54>)
 80042cc:	f000 f842 	bl	8004354 <LCD_SetFillColor>


}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200018ec 	.word	0x200018ec
 80042d8:	08017110 	.word	0x08017110
 80042dc:	2000000c 	.word	0x2000000c
 80042e0:	2000001c 	.word	0x2000001c
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <LCD_DisplayOn+0x30>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <LCD_DisplayOn+0x30>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80042fc:	2201      	movs	r2, #1
 80042fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <LCD_DisplayOn+0x34>)
 8004304:	f003 fe08 	bl	8007f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004308:	2201      	movs	r2, #1
 800430a:	2108      	movs	r1, #8
 800430c:	4804      	ldr	r0, [pc, #16]	; (8004320 <LCD_DisplayOn+0x38>)
 800430e:	f003 fe03 	bl	8007f18 <HAL_GPIO_WritePin>
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200018ec 	.word	0x200018ec
 800431c:	40022000 	.word	0x40022000
 8004320:	40022800 	.word	0x40022800

08004324 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <LCD_SetStrokeColor+0x28>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <LCD_SetStrokeColor+0x28>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa2c 	bl	8004794 <ARGB888ToRGB565>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <LCD_SetStrokeColor+0x2c>)
 8004342:	601a      	str	r2, [r3, #0]
#endif
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000994 	.word	0x20000994
 8004350:	200009a0 	.word	0x200009a0

08004354 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 800435c:	4a07      	ldr	r2, [pc, #28]	; (800437c <LCD_SetFillColor+0x28>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <LCD_SetFillColor+0x28>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fa14 	bl	8004794 <ARGB888ToRGB565>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <LCD_SetFillColor+0x2c>)
 8004372:	601a      	str	r2, [r3, #0]
#endif
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000998 	.word	0x20000998
 8004380:	200009a4 	.word	0x200009a4

08004384 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 800438c:	4a07      	ldr	r2, [pc, #28]	; (80043ac <LCD_SetBackColor+0x28>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <LCD_SetBackColor+0x28>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f9fc 	bl	8004794 <ARGB888ToRGB565>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <LCD_SetBackColor+0x2c>)
 80043a2:	601a      	str	r2, [r3, #0]
#endif
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2000099c 	.word	0x2000099c
 80043b0:	200009a8 	.word	0x200009a8

080043b4 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <LCD_SetFont+0x1c>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	200009ac 	.word	0x200009ac

080043d4 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	460a      	mov	r2, r1
 80043de:	80fb      	strh	r3, [r7, #6]
 80043e0:	4613      	mov	r3, r2
 80043e2:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <LCD_ErasePixel+0x3c>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <LCD_ErasePixel+0x40>)
 80043ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043ec:	88ba      	ldrh	r2, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	015b      	lsls	r3, r3, #5
 80043f6:	461a      	mov	r2, r3
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	440b      	add	r3, r1
 8004400:	b282      	uxth	r2, r0
 8004402:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	200009a8 	.word	0x200009a8
 8004414:	200018ec 	.word	0x200018ec

08004418 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <LCD_Clear+0x28>)
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	4618      	mov	r0, r3
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <LCD_Clear+0x2c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2300      	movs	r3, #0
 800442c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004430:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004434:	f000 f976 	bl	8004724 <LL_FillBuffer>
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200018ec 	.word	0x200018ec
 8004444:	2000099c 	.word	0x2000099c

08004448 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	461a      	mov	r2, r3
 8004456:	4623      	mov	r3, r4
 8004458:	80fb      	strh	r3, [r7, #6]
 800445a:	4603      	mov	r3, r0
 800445c:	80bb      	strh	r3, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
 8004462:	4613      	mov	r3, r2
 8004464:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <LCD_DrawChar+0x5c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	3b20      	subs	r3, #32
 8004470:	490c      	ldr	r1, [pc, #48]	; (80044a4 <LCD_DrawChar+0x5c>)
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	88c9      	ldrh	r1, [r1, #6]
 8004476:	fb01 f103 	mul.w	r1, r1, r3
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <LCD_DrawChar+0x5c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	889b      	ldrh	r3, [r3, #4]
 8004480:	3307      	adds	r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	da00      	bge.n	8004488 <LCD_DrawChar+0x40>
 8004486:	3307      	adds	r3, #7
 8004488:	10db      	asrs	r3, r3, #3
 800448a:	fb03 f301 	mul.w	r3, r3, r1
 800448e:	441a      	add	r2, r3
 8004490:	78bb      	ldrb	r3, [r7, #2]
 8004492:	88b9      	ldrh	r1, [r7, #4]
 8004494:	88f8      	ldrh	r0, [r7, #6]
 8004496:	f000 f89d 	bl	80045d4 <DrawChar>

}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200009ac 	.word	0x200009ac

080044a8 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60ba      	str	r2, [r7, #8]
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	81fb      	strh	r3, [r7, #14]
 80044b6:	460b      	mov	r3, r1
 80044b8:	81bb      	strh	r3, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 80044be:	2301      	movs	r3, #1
 80044c0:	83fb      	strh	r3, [r7, #30]
 80044c2:	2300      	movs	r3, #0
 80044c4:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 80044d2:	e002      	b.n	80044da <LCD_DrawString+0x32>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	617a      	str	r2, [r7, #20]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f6      	bne.n	80044d4 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 80044e6:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <LCD_DrawString+0x128>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	889b      	ldrh	r3, [r3, #4]
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80044f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d014      	beq.n	8004528 <LCD_DrawString+0x80>
 80044fe:	2b03      	cmp	r3, #3
 8004500:	dc23      	bgt.n	800454a <LCD_DrawString+0xa2>
 8004502:	2b01      	cmp	r3, #1
 8004504:	d002      	beq.n	800450c <LCD_DrawString+0x64>
 8004506:	2b02      	cmp	r3, #2
 8004508:	d011      	beq.n	800452e <LCD_DrawString+0x86>
 800450a:	e01e      	b.n	800454a <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <LCD_DrawString+0x128>)
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	8892      	ldrh	r2, [r2, #4]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	4413      	add	r3, r2
 8004524:	83fb      	strh	r3, [r7, #30]
		break;
 8004526:	e013      	b.n	8004550 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	83fb      	strh	r3, [r7, #30]
		break;
 800452c:	e010      	b.n	8004550 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	b29a      	uxth	r2, r3
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <LCD_DrawString+0x128>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	889b      	ldrh	r3, [r3, #4]
 800453c:	fb12 f303 	smulbb	r3, r2, r3
 8004540:	b29a      	uxth	r2, r3
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	83fb      	strh	r3, [r7, #30]
		break;
 8004548:	e002      	b.n	8004550 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 800454a:	89fb      	ldrh	r3, [r7, #14]
 800454c:	83fb      	strh	r3, [r7, #30]
		break;
 800454e:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004550:	8bfb      	ldrh	r3, [r7, #30]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <LCD_DrawString+0xb6>
 8004556:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da16      	bge.n	800458c <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004562:	e013      	b.n	800458c <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456c:	89b9      	ldrh	r1, [r7, #12]
 800456e:	8bf8      	ldrh	r0, [r7, #30]
 8004570:	f7ff ff6a 	bl	8004448 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <LCD_DrawString+0x128>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	889a      	ldrh	r2, [r3, #4]
 800457a:	8bfb      	ldrh	r3, [r7, #30]
 800457c:	4413      	add	r3, r2
 800457e:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3301      	adds	r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
		i++;
 8004586:	8bbb      	ldrh	r3, [r7, #28]
 8004588:	3301      	adds	r3, #1
 800458a:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8bbb      	ldrh	r3, [r7, #28]
 800459c:	490c      	ldr	r1, [pc, #48]	; (80045d0 <LCD_DrawString+0x128>)
 800459e:	6809      	ldr	r1, [r1, #0]
 80045a0:	8889      	ldrh	r1, [r1, #4]
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4908      	ldr	r1, [pc, #32]	; (80045d0 <LCD_DrawString+0x128>)
 80045ae:	6809      	ldr	r1, [r1, #0]
 80045b0:	8889      	ldrh	r1, [r1, #4]
 80045b2:	428b      	cmp	r3, r1
 80045b4:	bfac      	ite	ge
 80045b6:	2301      	movge	r3, #1
 80045b8:	2300      	movlt	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cf      	bne.n	8004564 <LCD_DrawString+0xbc>
	}
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200009ac 	.word	0x200009ac

080045d4 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b08b      	sub	sp, #44	; 0x2c
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60ba      	str	r2, [r7, #8]
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	81fb      	strh	r3, [r7, #14]
 80045e2:	460b      	mov	r3, r1
 80045e4:	81bb      	strh	r3, [r7, #12]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80045f2:	4b49      	ldr	r3, [pc, #292]	; (8004718 <DrawChar+0x144>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	88db      	ldrh	r3, [r3, #6]
 80045f8:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <DrawChar+0x144>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8004602:	8b3b      	ldrh	r3, [r7, #24]
 8004604:	3307      	adds	r3, #7
 8004606:	2b00      	cmp	r3, #0
 8004608:	da00      	bge.n	800460c <DrawChar+0x38>
 800460a:	3307      	adds	r3, #7
 800460c:	10db      	asrs	r3, r3, #3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	8b3b      	ldrh	r3, [r7, #24]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
 8004620:	e070      	b.n	8004704 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004622:	8b3b      	ldrh	r3, [r7, #24]
 8004624:	3307      	adds	r3, #7
 8004626:	2b00      	cmp	r3, #0
 8004628:	da00      	bge.n	800462c <DrawChar+0x58>
 800462a:	3307      	adds	r3, #7
 800462c:	10db      	asrs	r3, r3, #3
 800462e:	461a      	mov	r2, r3
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	fb03 f302 	mul.w	r3, r3, r2
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4413      	add	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 800463c:	8b3b      	ldrh	r3, [r7, #24]
 800463e:	3307      	adds	r3, #7
 8004640:	2b00      	cmp	r3, #0
 8004642:	da00      	bge.n	8004646 <DrawChar+0x72>
 8004644:	3307      	adds	r3, #7
 8004646:	10db      	asrs	r3, r3, #3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d002      	beq.n	8004652 <DrawChar+0x7e>
 800464c:	2b02      	cmp	r3, #2
 800464e:	d004      	beq.n	800465a <DrawChar+0x86>
 8004650:	e00c      	b.n	800466c <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	61fb      	str	r3, [r7, #28]
			break;
 8004658:	e016      	b.n	8004688 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	3201      	adds	r2, #1
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	61fb      	str	r3, [r7, #28]
			break;
 800466a:	e00d      	b.n	8004688 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	4313      	orrs	r3, r2
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	3202      	adds	r2, #2
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	61fb      	str	r3, [r7, #28]
			break;
 8004686:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004688:	2300      	movs	r3, #0
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	e030      	b.n	80046f0 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 800468e:	8b3a      	ldrh	r2, [r7, #24]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	4413      	add	r3, r2
 8004698:	3b01      	subs	r3, #1
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <DrawChar+0x148>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <DrawChar+0x14c>)
 80046b0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046b2:	89ba      	ldrh	r2, [r7, #12]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	461c      	mov	r4, r3
 80046be:	89fa      	ldrh	r2, [r7, #14]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	4413      	add	r3, r2
 80046c4:	4423      	add	r3, r4
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	440b      	add	r3, r1
 80046ca:	b282      	uxth	r2, r0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e00c      	b.n	80046ea <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d109      	bne.n	80046ea <DrawChar+0x116>
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	4413      	add	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	89ba      	ldrh	r2, [r7, #12]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fe75 	bl	80043d4 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	3301      	adds	r3, #1
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	8b3b      	ldrh	r3, [r7, #24]
 80046f2:	6a3a      	ldr	r2, [r7, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3ca      	bcc.n	800468e <DrawChar+0xba>
			}
		}
		Ypos++;
 80046f8:	89bb      	ldrh	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	3301      	adds	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
 8004704:	8b7b      	ldrh	r3, [r7, #26]
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	429a      	cmp	r2, r3
 800470a:	d38a      	bcc.n	8004622 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	372c      	adds	r7, #44	; 0x2c
 8004712:	46bd      	mov	sp, r7
 8004714:	bd90      	pop	{r4, r7, pc}
 8004716:	bf00      	nop
 8004718:	200009ac 	.word	0x200009ac
 800471c:	200009a0 	.word	0x200009a0
 8004720:	200018ec 	.word	0x200018ec

08004724 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <LL_FillBuffer+0x68>)
 8004734:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004738:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <LL_FillBuffer+0x68>)
 800473c:	2202      	movs	r2, #2
 800473e:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <LL_FillBuffer+0x68>)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <LL_FillBuffer+0x68>)
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <LL_FillBuffer+0x6c>)
 800474a:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 800474c:	480f      	ldr	r0, [pc, #60]	; (800478c <LL_FillBuffer+0x68>)
 800474e:	f002 fd8f 	bl	8007270 <HAL_DMA2D_Init>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d115      	bne.n	8004784 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004758:	2100      	movs	r1, #0
 800475a:	480c      	ldr	r0, [pc, #48]	; (800478c <LL_FillBuffer+0x68>)
 800475c:	f002 fff6 	bl	800774c <HAL_DMA2D_ConfigLayer>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	4806      	ldr	r0, [pc, #24]	; (800478c <LL_FillBuffer+0x68>)
 8004772:	f002 fdc7 	bl	8007304 <HAL_DMA2D_Start>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 800477c:	210a      	movs	r1, #10
 800477e:	4803      	ldr	r0, [pc, #12]	; (800478c <LL_FillBuffer+0x68>)
 8004780:	f002 fdeb 	bl	800735a <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20001c00 	.word	0x20001c00
 8004790:	4002b000 	.word	0x4002b000

08004794 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0c1b      	lsrs	r3, r3, #16
 80047a0:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 80047ac:	7d7b      	ldrb	r3, [r7, #21]
 80047ae:	08db      	lsrs	r3, r3, #3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 80047ba:	7dbb      	ldrb	r3, [r7, #22]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	015b      	lsls	r3, r3, #5
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80047c8:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	02db      	lsls	r3, r3, #11
 80047d2:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80047d4:	89fa      	ldrh	r2, [r7, #14]
 80047d6:	8a3b      	ldrh	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	8a7b      	ldrh	r3, [r7, #18]
 80047de:	4313      	orrs	r3, r2
 80047e0:	b29b      	uxth	r3, r3
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b090      	sub	sp, #64	; 0x40
 80047f4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fa:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80047fc:	23eb      	movs	r3, #235	; 0xeb
 80047fe:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004800:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800480a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800480c:	2300      	movs	r3, #0
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004810:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004816:	230a      	movs	r3, #10
 8004818:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800481e:	2300      	movs	r3, #0
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004822:	2300      	movs	r3, #0
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800482e:	463a      	mov	r2, r7
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	4619      	mov	r1, r3
 8004836:	4806      	ldr	r0, [pc, #24]	; (8004850 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004838:	f006 fb74 	bl	800af24 <HAL_QSPI_MemoryMapped>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3740      	adds	r7, #64	; 0x40
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20001d0c 	.word	0x20001d0c

08004854 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b090      	sub	sp, #64	; 0x40
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800485c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004860:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004862:	2366      	movs	r3, #102	; 0x66
 8004864:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800486a:	2300      	movs	r3, #0
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800486e:	2300      	movs	r3, #0
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800487a:	2300      	movs	r3, #0
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800487e:	2300      	movs	r3, #0
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f006 f93b 	bl	800ab08 <HAL_QSPI_Command>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e019      	b.n	80048d0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 800489c:	2399      	movs	r3, #153	; 0x99
 800489e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 f92c 	bl	800ab08 <HAL_QSPI_Command>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00a      	b.n	80048d0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8c7 	bl	8004a52 <QSPI_AutoPollingMemReady>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3740      	adds	r7, #64	; 0x40
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	; 0x50
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80048e6:	2385      	movs	r3, #133	; 0x85
 80048e8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80048f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80048fc:	2301      	movs	r3, #1
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004904:	2300      	movs	r3, #0
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004908:	2300      	movs	r3, #0
 800490a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800490c:	f107 0310 	add.w	r3, r7, #16
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f006 f8f6 	bl	800ab08 <HAL_QSPI_Command>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e048      	b.n	80049b8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004926:	f107 030f 	add.w	r3, r7, #15
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f006 f9de 	bl	800acf2 <HAL_QSPI_Receive>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e03b      	b.n	80049b8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f83d 	bl	80049c0 <QSPI_WriteEnable>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e033      	b.n	80049b8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004950:	2381      	movs	r3, #129	; 0x81
 8004952:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	b25a      	sxtb	r2, r3
 800495e:	23f0      	movs	r3, #240	; 0xf0
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496c:	fab3 f383 	clz	r3, r3
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	230a      	movs	r3, #10
 8004976:	408b      	lsls	r3, r1
 8004978:	b25b      	sxtb	r3, r3
 800497a:	4313      	orrs	r3, r2
 800497c:	b25b      	sxtb	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f006 f8bb 	bl	800ab08 <HAL_QSPI_Command>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e00d      	b.n	80049b8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800499c:	f107 030f 	add.w	r3, r7, #15
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f006 f90c 	bl	800abc4 <HAL_QSPI_Transmit>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3750      	adds	r7, #80	; 0x50
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b096      	sub	sp, #88	; 0x58
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80049ce:	2306      	movs	r3, #6
 80049d0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80049da:	2300      	movs	r3, #0
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049e6:	2300      	movs	r3, #0
 80049e8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049ea:	2300      	movs	r3, #0
 80049ec:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049ee:	f107 0320 	add.w	r3, r7, #32
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4619      	mov	r1, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f006 f885 	bl	800ab08 <HAL_QSPI_Command>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e020      	b.n	8004a4a <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004a14:	2301      	movs	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004a18:	2310      	movs	r3, #16
 8004a1a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004a1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a20:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004a22:	2305      	movs	r3, #5
 8004a24:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a2c:	f107 0208 	add.w	r2, r7, #8
 8004a30:	f107 0120 	add.w	r1, r7, #32
 8004a34:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f006 f9fc 	bl	800ae36 <HAL_QSPI_AutoPolling>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3758      	adds	r7, #88	; 0x58
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b096      	sub	sp, #88	; 0x58
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004a62:	2305      	movs	r3, #5
 8004a64:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a80:	2300      	movs	r3, #0
 8004a82:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004a94:	2310      	movs	r3, #16
 8004a96:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004a98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004a9e:	f107 0208 	add.w	r2, r7, #8
 8004aa2:	f107 0120 	add.w	r1, r7, #32
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f006 f9c4 	bl	800ae36 <HAL_QSPI_AutoPolling>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3758      	adds	r7, #88	; 0x58
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad8:	d005      	beq.n	8004ae6 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae0:	d001      	beq.n	8004ae6 <start_Audio_Processing+0x22>
		Error_Handler();
 8004ae2:	f7fe f899 	bl	8002c18 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <start_Audio_Processing+0xb4>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <start_Audio_Processing+0xb4>)
 8004aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <start_Audio_Processing+0xb4>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004afe:	2034      	movs	r0, #52	; 0x34
 8004b00:	f000 ffa8 	bl	8005a54 <wm8994_ReadID>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f648 1294 	movw	r2, #35220	; 0x8994
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d001      	beq.n	8004b12 <start_Audio_Processing+0x4e>
 8004b0e:	f7fe f883 	bl	8002c18 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004b12:	2034      	movs	r0, #52	; 0x34
 8004b14:	f001 f920 	bl	8005d58 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004b18:	887b      	ldrh	r3, [r7, #2]
 8004b1a:	f043 0302 	orr.w	r3, r3, #2
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2264      	movs	r2, #100	; 0x64
 8004b24:	2034      	movs	r0, #52	; 0x34
 8004b26:	f000 f8db 	bl	8004ce0 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d104      	bne.n	8004b3c <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8004b32:	214b      	movs	r1, #75	; 0x4b
 8004b34:	2034      	movs	r0, #52	; 0x34
 8004b36:	f000 ff9d 	bl	8005a74 <wm8994_SetVolume>
 8004b3a:	e007      	b.n	8004b4c <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b42:	d103      	bne.n	8004b4c <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004b44:	21c8      	movs	r1, #200	; 0xc8
 8004b46:	2034      	movs	r0, #52	; 0x34
 8004b48:	f000 ff94 	bl	8005a74 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2034      	movs	r0, #52	; 0x34
 8004b50:	f001 f8b4 	bl	8005cbc <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <start_Audio_Processing+0xb8>)
 8004b5e:	f008 fd41 	bl	800d5e4 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4805      	ldr	r0, [pc, #20]	; (8004b80 <start_Audio_Processing+0xbc>)
 8004b6c:	f008 fc8a 	bl	800d484 <HAL_SAI_Transmit_DMA>

}
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	20001454 	.word	0x20001454
 8004b80:	2000167c 	.word	0x2000167c

08004b84 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_SAI_ErrorCallback+0x30>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d103      	bne.n	8004bc4 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004bbc:	4808      	ldr	r0, [pc, #32]	; (8004be0 <HAL_SAI_ErrorCallback+0x34>)
 8004bbe:	f00f fafd 	bl	80141bc <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004bc2:	e006      	b.n	8004bd2 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <HAL_SAI_ErrorCallback+0x38>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d102      	bne.n	8004bd2 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004bcc:	4806      	ldr	r0, [pc, #24]	; (8004be8 <HAL_SAI_ErrorCallback+0x3c>)
 8004bce:	f00f faf5 	bl	80141bc <puts>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2000167c 	.word	0x2000167c
 8004be0:	08017160 	.word	0x08017160
 8004be4:	20001454 	.word	0x20001454
 8004be8:	08017170 	.word	0x08017170

08004bec <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c00:	2210      	movs	r2, #16
 8004c02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c04:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c14:	4923      	ldr	r1, [pc, #140]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c16:	4824      	ldr	r0, [pc, #144]	; (8004ca8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c18:	f008 fec3 	bl	800d9a2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f001 f929 	bl	8005e74 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c24:	2202      	movs	r2, #2
 8004c26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c3e:	4919      	ldr	r1, [pc, #100]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c40:	4819      	ldr	r0, [pc, #100]	; (8004ca8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c42:	f008 feae 	bl	800d9a2 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c48:	2203      	movs	r2, #3
 8004c4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c4e:	2210      	movs	r2, #16
 8004c50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c54:	2208      	movs	r2, #8
 8004c56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c62:	4910      	ldr	r1, [pc, #64]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c64:	4810      	ldr	r0, [pc, #64]	; (8004ca8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c66:	f008 fe9c 	bl	800d9a2 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004c6a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004c6e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c72:	2204      	movs	r2, #4
 8004c74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c78:	2210      	movs	r2, #16
 8004c7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c86:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c8c:	4905      	ldr	r1, [pc, #20]	; (8004ca4 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c8e:	4806      	ldr	r0, [pc, #24]	; (8004ca8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c90:	f008 fe87 	bl	800d9a2 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4804      	ldr	r0, [pc, #16]	; (8004ca8 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c98:	f008 feae 	bl	800d9f8 <HAL_SDRAM_ProgramRefreshRate>
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200009b0 	.word	0x200009b0
 8004ca8:	20001cd8 	.word	0x20001cd8

08004cac <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004cb0:	20c8      	movs	r0, #200	; 0xc8
 8004cb2:	f001 f8df 	bl	8005e74 <HAL_Delay>

	TS_DisableIT();
 8004cb6:	f000 f802 	bl	8004cbe <TS_DisableIT>

}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	20a4      	movs	r0, #164	; 0xa4
 8004cd2:	f7ff fac3 	bl	800425c <TS_I2C_Write>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	607b      	str	r3, [r7, #4]
 8004ce8:	4603      	mov	r3, r0
 8004cea:	81fb      	strh	r3, [r7, #14]
 8004cec:	460b      	mov	r3, r1
 8004cee:	81bb      	strh	r3, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004cf8:	89bb      	ldrh	r3, [r7, #12]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004cfe:	89bb      	ldrh	r3, [r7, #12]
 8004d00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d04:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004d0a:	89fb      	ldrh	r3, [r7, #14]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2203      	movs	r2, #3
 8004d10:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f83f 	bl	8005d98 <CODEC_IO_Write>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004d24:	89fb      	ldrh	r3, [r7, #14]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f640 0117 	movw	r1, #2071	; 0x817
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f832 	bl	8005d98 <CODEC_IO_Write>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004d3e:	89fb      	ldrh	r3, [r7, #14]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2200      	movs	r2, #0
 8004d44:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f825 	bl	8005d98 <CODEC_IO_Write>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004d58:	89fb      	ldrh	r3, [r7, #14]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	226c      	movs	r2, #108	; 0x6c
 8004d5e:	2139      	movs	r1, #57	; 0x39
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 f819 	bl	8005d98 <CODEC_IO_Write>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004d70:	8afb      	ldrh	r3, [r7, #22]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004d76:	89fb      	ldrh	r3, [r7, #14]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2213      	movs	r2, #19
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f80a 	bl	8005d98 <CODEC_IO_Write>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e00b      	b.n	8004da8 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2203      	movs	r2, #3
 8004d96:	2101      	movs	r1, #1
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fffd 	bl	8005d98 <CODEC_IO_Write>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004da8:	2032      	movs	r0, #50	; 0x32
 8004daa:	f001 f863 	bl	8005e74 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004dae:	8b3b      	ldrh	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 815f 	beq.w	8005074 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8004db6:	4bae      	ldr	r3, [pc, #696]	; (8005070 <wm8994_Init+0x390>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004dbc:	8b3b      	ldrh	r3, [r7, #24]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	f000 808c 	beq.w	8004edc <wm8994_Init+0x1fc>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	f300 8111 	bgt.w	8004fec <wm8994_Init+0x30c>
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d002      	beq.n	8004dd4 <wm8994_Init+0xf4>
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d042      	beq.n	8004e58 <wm8994_Init+0x178>
 8004dd2:	e10b      	b.n	8004fec <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004ddc:	2105      	movs	r1, #5
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ffda 	bl	8005d98 <CODEC_IO_Write>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2200      	movs	r2, #0
 8004df4:	f240 6101 	movw	r1, #1537	; 0x601
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ffcd 	bl	8005d98 <CODEC_IO_Write>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f240 6102 	movw	r1, #1538	; 0x602
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ffc0 	bl	8005d98 <CODEC_IO_Write>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004e22:	89fb      	ldrh	r3, [r7, #14]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2202      	movs	r2, #2
 8004e28:	f240 6104 	movw	r1, #1540	; 0x604
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 ffb3 	bl	8005d98 <CODEC_IO_Write>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2202      	movs	r2, #2
 8004e42:	f240 6105 	movw	r1, #1541	; 0x605
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ffa6 	bl	8005d98 <CODEC_IO_Write>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	61fb      	str	r3, [r7, #28]
      break;
 8004e56:	e110      	b.n	800507a <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004e58:	89fb      	ldrh	r3, [r7, #14]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f240 3203 	movw	r2, #771	; 0x303
 8004e60:	2105      	movs	r1, #5
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ff98 	bl	8005d98 <CODEC_IO_Write>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2201      	movs	r2, #1
 8004e78:	f240 6101 	movw	r1, #1537	; 0x601
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 ff8b 	bl	8005d98 <CODEC_IO_Write>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2201      	movs	r2, #1
 8004e92:	f240 6102 	movw	r1, #1538	; 0x602
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 ff7e 	bl	8005d98 <CODEC_IO_Write>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f240 6104 	movw	r1, #1540	; 0x604
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 ff71 	bl	8005d98 <CODEC_IO_Write>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f240 6105 	movw	r1, #1541	; 0x605
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 ff64 	bl	8005d98 <CODEC_IO_Write>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	61fb      	str	r3, [r7, #28]
      break;
 8004eda:	e0ce      	b.n	800507a <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004edc:	8afb      	ldrh	r3, [r7, #22]
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d141      	bne.n	8004f68 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004eec:	2105      	movs	r1, #5
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 ff52 	bl	8005d98 <CODEC_IO_Write>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8004efe:	89fb      	ldrh	r3, [r7, #14]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2203      	movs	r2, #3
 8004f04:	f240 6101 	movw	r1, #1537	; 0x601
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ff45 	bl	8005d98 <CODEC_IO_Write>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004f18:	89fb      	ldrh	r3, [r7, #14]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	f240 6102 	movw	r1, #1538	; 0x602
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ff38 	bl	8005d98 <CODEC_IO_Write>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8004f32:	89fb      	ldrh	r3, [r7, #14]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2203      	movs	r2, #3
 8004f38:	f240 6104 	movw	r1, #1540	; 0x604
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 ff2b 	bl	8005d98 <CODEC_IO_Write>
 8004f42:	4603      	mov	r3, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004f4c:	89fb      	ldrh	r3, [r7, #14]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2203      	movs	r2, #3
 8004f52:	f240 6105 	movw	r1, #1541	; 0x605
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 ff1e 	bl	8005d98 <CODEC_IO_Write>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8004f66:	e088      	b.n	800507a <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004f68:	89fb      	ldrh	r3, [r7, #14]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004f70:	2105      	movs	r1, #5
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 ff10 	bl	8005d98 <CODEC_IO_Write>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004f82:	89fb      	ldrh	r3, [r7, #14]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2201      	movs	r2, #1
 8004f88:	f240 6101 	movw	r1, #1537	; 0x601
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 ff03 	bl	8005d98 <CODEC_IO_Write>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f240 6102 	movw	r1, #1538	; 0x602
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fef6 	bl	8005d98 <CODEC_IO_Write>
 8004fac:	4603      	mov	r3, r0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004fb6:	89fb      	ldrh	r3, [r7, #14]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f240 6104 	movw	r1, #1540	; 0x604
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fee9 	bl	8005d98 <CODEC_IO_Write>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f240 6105 	movw	r1, #1541	; 0x605
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fedc 	bl	8005d98 <CODEC_IO_Write>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61fb      	str	r3, [r7, #28]
      break;
 8004fea:	e046      	b.n	800507a <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004fec:	89fb      	ldrh	r3, [r7, #14]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f240 3203 	movw	r2, #771	; 0x303
 8004ff4:	2105      	movs	r1, #5
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fece 	bl	8005d98 <CODEC_IO_Write>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2201      	movs	r2, #1
 800500c:	f240 6101 	movw	r1, #1537	; 0x601
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fec1 	bl	8005d98 <CODEC_IO_Write>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005020:	89fb      	ldrh	r3, [r7, #14]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2201      	movs	r2, #1
 8005026:	f240 6102 	movw	r1, #1538	; 0x602
 800502a:	4618      	mov	r0, r3
 800502c:	f000 feb4 	bl	8005d98 <CODEC_IO_Write>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800503a:	89fb      	ldrh	r3, [r7, #14]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2200      	movs	r2, #0
 8005040:	f240 6104 	movw	r1, #1540	; 0x604
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fea7 	bl	8005d98 <CODEC_IO_Write>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2200      	movs	r2, #0
 800505a:	f240 6105 	movw	r1, #1541	; 0x605
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fe9a 	bl	8005d98 <CODEC_IO_Write>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	61fb      	str	r3, [r7, #28]
      break;
 800506e:	e004      	b.n	800507a <wm8994_Init+0x39a>
 8005070:	200009c0 	.word	0x200009c0
    }
  }
  else
  {
    outputEnabled = 0;
 8005074:	4b99      	ldr	r3, [pc, #612]	; (80052dc <wm8994_Init+0x5fc>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800507a:	8afb      	ldrh	r3, [r7, #22]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 81ab 	beq.w	80053d8 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8005082:	4b97      	ldr	r3, [pc, #604]	; (80052e0 <wm8994_Init+0x600>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508e:	f000 8129 	beq.w	80052e4 <wm8994_Init+0x604>
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005096:	f300 819b 	bgt.w	80053d0 <wm8994_Init+0x6f0>
 800509a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509e:	d05a      	beq.n	8005156 <wm8994_Init+0x476>
 80050a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050a4:	f300 8194 	bgt.w	80053d0 <wm8994_Init+0x6f0>
 80050a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ac:	f000 80c6 	beq.w	800523c <wm8994_Init+0x55c>
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b4:	f040 818c 	bne.w	80053d0 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80050b8:	89fb      	ldrh	r3, [r7, #14]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80050c0:	2104      	movs	r1, #4
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fe68 	bl	8005d98 <CODEC_IO_Write>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	22db      	movs	r2, #219	; 0xdb
 80050d8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fe5b 	bl	8005d98 <CODEC_IO_Write>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80050ec:	89fb      	ldrh	r3, [r7, #14]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80050f4:	2102      	movs	r1, #2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fe4e 	bl	8005d98 <CODEC_IO_Write>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2202      	movs	r2, #2
 800510c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe41 	bl	8005d98 <CODEC_IO_Write>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005120:	89fb      	ldrh	r3, [r7, #14]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2202      	movs	r2, #2
 8005126:	f240 6109 	movw	r1, #1545	; 0x609
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fe34 	bl	8005d98 <CODEC_IO_Write>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	220e      	movs	r2, #14
 8005140:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fe27 	bl	8005d98 <CODEC_IO_Write>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
      break;
 8005154:	e143      	b.n	80053de <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2211      	movs	r2, #17
 800515c:	2128      	movs	r1, #40	; 0x28
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fe1a 	bl	8005d98 <CODEC_IO_Write>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2220      	movs	r2, #32
 8005174:	2129      	movs	r1, #41	; 0x29
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fe0e 	bl	8005d98 <CODEC_IO_Write>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8005186:	89fb      	ldrh	r3, [r7, #14]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2220      	movs	r2, #32
 800518c:	212a      	movs	r1, #42	; 0x2a
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fe02 	bl	8005d98 <CODEC_IO_Write>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800519e:	89fb      	ldrh	r3, [r7, #14]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f240 3203 	movw	r2, #771	; 0x303
 80051a6:	2104      	movs	r1, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fdf5 	bl	8005d98 <CODEC_IO_Write>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80051b8:	89fb      	ldrh	r3, [r7, #14]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	22db      	movs	r2, #219	; 0xdb
 80051be:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fde8 	bl	8005d98 <CODEC_IO_Write>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f246 3250 	movw	r2, #25424	; 0x6350
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fddb 	bl	8005d98 <CODEC_IO_Write>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2202      	movs	r2, #2
 80051f2:	f240 6106 	movw	r1, #1542	; 0x606
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fdce 	bl	8005d98 <CODEC_IO_Write>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2202      	movs	r2, #2
 800520c:	f240 6107 	movw	r1, #1543	; 0x607
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fdc1 	bl	8005d98 <CODEC_IO_Write>
 8005216:	4603      	mov	r3, r0
 8005218:	461a      	mov	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	220d      	movs	r2, #13
 8005226:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fdb4 	bl	8005d98 <CODEC_IO_Write>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	61fb      	str	r3, [r7, #28]
      break;
 800523a:	e0d0      	b.n	80053de <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800523c:	89fb      	ldrh	r3, [r7, #14]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005244:	2104      	movs	r1, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fda6 	bl	8005d98 <CODEC_IO_Write>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	22db      	movs	r2, #219	; 0xdb
 800525c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fd99 	bl	8005d98 <CODEC_IO_Write>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f246 3250 	movw	r2, #25424	; 0x6350
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fd8c 	bl	8005d98 <CODEC_IO_Write>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2202      	movs	r2, #2
 8005290:	f240 6106 	movw	r1, #1542	; 0x606
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fd7f 	bl	8005d98 <CODEC_IO_Write>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2202      	movs	r2, #2
 80052aa:	f240 6107 	movw	r1, #1543	; 0x607
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fd72 	bl	8005d98 <CODEC_IO_Write>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80052be:	89fb      	ldrh	r3, [r7, #14]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	220d      	movs	r2, #13
 80052c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd65 	bl	8005d98 <CODEC_IO_Write>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]
      break;
 80052d8:	e081      	b.n	80053de <wm8994_Init+0x6fe>
 80052da:	bf00      	nop
 80052dc:	200009c0 	.word	0x200009c0
 80052e0:	200009c4 	.word	0x200009c4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80052ec:	2104      	movs	r1, #4
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd52 	bl	8005d98 <CODEC_IO_Write>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	22db      	movs	r2, #219	; 0xdb
 8005304:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fd45 	bl	8005d98 <CODEC_IO_Write>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	22db      	movs	r2, #219	; 0xdb
 800531e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fd38 	bl	8005d98 <CODEC_IO_Write>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800533a:	2102      	movs	r1, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fd2b 	bl	8005d98 <CODEC_IO_Write>
 8005342:	4603      	mov	r3, r0
 8005344:	461a      	mov	r2, r3
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800534c:	89fb      	ldrh	r3, [r7, #14]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2202      	movs	r2, #2
 8005352:	f240 6106 	movw	r1, #1542	; 0x606
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fd1e 	bl	8005d98 <CODEC_IO_Write>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005366:	89fb      	ldrh	r3, [r7, #14]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2202      	movs	r2, #2
 800536c:	f240 6107 	movw	r1, #1543	; 0x607
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fd11 	bl	8005d98 <CODEC_IO_Write>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2202      	movs	r2, #2
 8005386:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fd04 	bl	8005d98 <CODEC_IO_Write>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2202      	movs	r2, #2
 80053a0:	f240 6109 	movw	r1, #1545	; 0x609
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fcf7 	bl	8005d98 <CODEC_IO_Write>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80053b4:	89fb      	ldrh	r3, [r7, #14]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	220d      	movs	r2, #13
 80053ba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fcea 	bl	8005d98 <CODEC_IO_Write>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	61fb      	str	r3, [r7, #28]
      break;
 80053ce:	e006      	b.n	80053de <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
      break;
 80053d6:	e002      	b.n	80053de <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 80053d8:	4ba4      	ldr	r3, [pc, #656]	; (800566c <wm8994_Init+0x98c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4aa3      	ldr	r2, [pc, #652]	; (8005670 <wm8994_Init+0x990>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d079      	beq.n	80054da <wm8994_Init+0x7fa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4aa1      	ldr	r2, [pc, #644]	; (8005670 <wm8994_Init+0x990>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	f200 80ad 	bhi.w	800554a <wm8994_Init+0x86a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d061      	beq.n	80054be <wm8994_Init+0x7de>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005400:	4293      	cmp	r3, r2
 8005402:	f200 80a2 	bhi.w	800554a <wm8994_Init+0x86a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f64a 4244 	movw	r2, #44100	; 0xac44
 800540c:	4293      	cmp	r3, r2
 800540e:	f000 808e 	beq.w	800552e <wm8994_Init+0x84e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005418:	4293      	cmp	r3, r2
 800541a:	f200 8096 	bhi.w	800554a <wm8994_Init+0x86a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005424:	d03d      	beq.n	80054a2 <wm8994_Init+0x7c2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800542c:	f200 808d 	bhi.w	800554a <wm8994_Init+0x86a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f245 6222 	movw	r2, #22050	; 0x5622
 8005436:	4293      	cmp	r3, r2
 8005438:	d06b      	beq.n	8005512 <wm8994_Init+0x832>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f245 6222 	movw	r2, #22050	; 0x5622
 8005440:	4293      	cmp	r3, r2
 8005442:	f200 8082 	bhi.w	800554a <wm8994_Init+0x86a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800544c:	d01b      	beq.n	8005486 <wm8994_Init+0x7a6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005454:	d879      	bhi.n	800554a <wm8994_Init+0x86a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800545c:	d005      	beq.n	800546a <wm8994_Init+0x78a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005464:	4293      	cmp	r3, r2
 8005466:	d046      	beq.n	80054f6 <wm8994_Init+0x816>
 8005468:	e06f      	b.n	800554a <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800546a:	89fb      	ldrh	r3, [r7, #14]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2203      	movs	r2, #3
 8005470:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fc8f 	bl	8005d98 <CODEC_IO_Write>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	61fb      	str	r3, [r7, #28]
    break;
 8005484:	e06f      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005486:	89fb      	ldrh	r3, [r7, #14]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2233      	movs	r2, #51	; 0x33
 800548c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fc81 	bl	8005d98 <CODEC_IO_Write>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
    break;
 80054a0:	e061      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2263      	movs	r2, #99	; 0x63
 80054a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fc73 	bl	8005d98 <CODEC_IO_Write>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	61fb      	str	r3, [r7, #28]
    break;
 80054bc:	e053      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2283      	movs	r2, #131	; 0x83
 80054c4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fc65 	bl	8005d98 <CODEC_IO_Write>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	61fb      	str	r3, [r7, #28]
    break;
 80054d8:	e045      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80054da:	89fb      	ldrh	r3, [r7, #14]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	22a3      	movs	r2, #163	; 0xa3
 80054e0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fc57 	bl	8005d98 <CODEC_IO_Write>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
    break;
 80054f4:	e037      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2213      	movs	r2, #19
 80054fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fc49 	bl	8005d98 <CODEC_IO_Write>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]
    break;
 8005510:	e029      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8005512:	89fb      	ldrh	r3, [r7, #14]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2243      	movs	r2, #67	; 0x43
 8005518:	f44f 7104 	mov.w	r1, #528	; 0x210
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fc3b 	bl	8005d98 <CODEC_IO_Write>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	61fb      	str	r3, [r7, #28]
    break;
 800552c:	e01b      	b.n	8005566 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800552e:	89fb      	ldrh	r3, [r7, #14]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2273      	movs	r2, #115	; 0x73
 8005534:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fc2d 	bl	8005d98 <CODEC_IO_Write>
 800553e:	4603      	mov	r3, r0
 8005540:	461a      	mov	r2, r3
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]
    break;
 8005548:	e00d      	b.n	8005566 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800554a:	89fb      	ldrh	r3, [r7, #14]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2283      	movs	r2, #131	; 0x83
 8005550:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fc1f 	bl	8005d98 <CODEC_IO_Write>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	61fb      	str	r3, [r7, #28]
    break;
 8005564:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005566:	8afb      	ldrh	r3, [r7, #22]
 8005568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556c:	d10e      	bne.n	800558c <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f244 0218 	movw	r2, #16408	; 0x4018
 8005576:	f44f 7140 	mov.w	r1, #768	; 0x300
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fc0c 	bl	8005d98 <CODEC_IO_Write>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e00d      	b.n	80055a8 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800558c:	89fb      	ldrh	r3, [r7, #14]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f244 0210 	movw	r2, #16400	; 0x4010
 8005594:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fbfd 	bl	8005d98 <CODEC_IO_Write>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	f240 3102 	movw	r1, #770	; 0x302
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fbf0 	bl	8005d98 <CODEC_IO_Write>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80055c2:	89fb      	ldrh	r3, [r7, #14]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	220a      	movs	r2, #10
 80055c8:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fbe3 	bl	8005d98 <CODEC_IO_Write>
 80055d2:	4603      	mov	r3, r0
 80055d4:	461a      	mov	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80055dc:	89fb      	ldrh	r3, [r7, #14]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2201      	movs	r2, #1
 80055e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fbd6 	bl	8005d98 <CODEC_IO_Write>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80055f6:	8b3b      	ldrh	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 817b 	beq.w	80058f4 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80055fe:	8b3b      	ldrh	r3, [r7, #24]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d157      	bne.n	80056b4 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8005604:	89fb      	ldrh	r3, [r7, #14]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800560c:	212d      	movs	r1, #45	; 0x2d
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fbc2 	bl	8005d98 <CODEC_IO_Write>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005626:	212e      	movs	r1, #46	; 0x2e
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fbb5 	bl	8005d98 <CODEC_IO_Write>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8005638:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <wm8994_Init+0x994>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8005648:	f44f 7188 	mov.w	r1, #272	; 0x110
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fba3 	bl	8005d98 <CODEC_IO_Write>
 8005652:	4603      	mov	r3, r0
 8005654:	461a      	mov	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <wm8994_Init+0x994>)
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8005662:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005666:	f000 fc05 	bl	8005e74 <HAL_Delay>
 800566a:	e016      	b.n	800569a <wm8994_Init+0x9ba>
 800566c:	200009c4 	.word	0x200009c4
 8005670:	00017700 	.word	0x00017700
 8005674:	20000010 	.word	0x20000010
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8005678:	89fb      	ldrh	r3, [r7, #14]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f248 1208 	movw	r2, #33032	; 0x8108
 8005680:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fb87 	bl	8005d98 <CODEC_IO_Write>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8005694:	2032      	movs	r0, #50	; 0x32
 8005696:	f000 fbed 	bl	8005e74 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800569a:	89fb      	ldrh	r3, [r7, #14]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2200      	movs	r2, #0
 80056a0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fb77 	bl	8005d98 <CODEC_IO_Write>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80056bc:	2103      	movs	r1, #3
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb6a 	bl	8005d98 <CODEC_IO_Write>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	2122      	movs	r1, #34	; 0x22
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb5e 	bl	8005d98 <CODEC_IO_Write>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4413      	add	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80056e6:	89fb      	ldrh	r3, [r7, #14]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2200      	movs	r2, #0
 80056ec:	2123      	movs	r1, #35	; 0x23
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fb52 	bl	8005d98 <CODEC_IO_Write>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005706:	2136      	movs	r1, #54	; 0x36
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fb45 	bl	8005d98 <CODEC_IO_Write>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f243 0203 	movw	r2, #12291	; 0x3003
 8005720:	2101      	movs	r1, #1
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb38 	bl	8005d98 <CODEC_IO_Write>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005732:	8afb      	ldrh	r3, [r7, #22]
 8005734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005738:	d10d      	bne.n	8005756 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f240 2205 	movw	r2, #517	; 0x205
 8005742:	2151      	movs	r1, #81	; 0x51
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fb27 	bl	8005d98 <CODEC_IO_Write>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e00b      	b.n	800576e <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 8005756:	89fb      	ldrh	r3, [r7, #14]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2205      	movs	r2, #5
 800575c:	2151      	movs	r1, #81	; 0x51
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fb1a 	bl	8005d98 <CODEC_IO_Write>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800576e:	8b7b      	ldrh	r3, [r7, #26]
 8005770:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005774:	f043 0303 	orr.w	r3, r3, #3
 8005778:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	8b7a      	ldrh	r2, [r7, #26]
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fb08 	bl	8005d98 <CODEC_IO_Write>
 8005788:	4603      	mov	r3, r0
 800578a:	461a      	mov	r2, r3
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8005792:	89fb      	ldrh	r3, [r7, #14]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2222      	movs	r2, #34	; 0x22
 8005798:	2160      	movs	r1, #96	; 0x60
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fafc 	bl	8005d98 <CODEC_IO_Write>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80057aa:	89fb      	ldrh	r3, [r7, #14]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f649 7225 	movw	r2, #40741	; 0x9f25
 80057b2:	214c      	movs	r1, #76	; 0x4c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 faef 	bl	8005d98 <CODEC_IO_Write>
 80057ba:	4603      	mov	r3, r0
 80057bc:	461a      	mov	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 80057c4:	200f      	movs	r0, #15
 80057c6:	f000 fb55 	bl	8005e74 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80057ca:	89fb      	ldrh	r3, [r7, #14]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2201      	movs	r2, #1
 80057d0:	212d      	movs	r1, #45	; 0x2d
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fae0 	bl	8005d98 <CODEC_IO_Write>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2201      	movs	r2, #1
 80057e8:	212e      	movs	r1, #46	; 0x2e
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fad4 	bl	8005d98 <CODEC_IO_Write>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80057fa:	89fb      	ldrh	r3, [r7, #14]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f44f 724c 	mov.w	r2, #816	; 0x330
 8005802:	2103      	movs	r1, #3
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fac7 	bl	8005d98 <CODEC_IO_Write>
 800580a:	4603      	mov	r3, r0
 800580c:	461a      	mov	r2, r3
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2233      	movs	r2, #51	; 0x33
 800581a:	2154      	movs	r1, #84	; 0x54
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fabb 	bl	8005d98 <CODEC_IO_Write>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 800582c:	f240 1001 	movw	r0, #257	; 0x101
 8005830:	f000 fb20 	bl	8005e74 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8005834:	89fb      	ldrh	r3, [r7, #14]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	22ee      	movs	r2, #238	; 0xee
 800583a:	2160      	movs	r1, #96	; 0x60
 800583c:	4618      	mov	r0, r3
 800583e:	f000 faab 	bl	8005d98 <CODEC_IO_Write>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 800584c:	89fb      	ldrh	r3, [r7, #14]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	22c0      	movs	r2, #192	; 0xc0
 8005852:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fa9e 	bl	8005d98 <CODEC_IO_Write>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8005866:	89fb      	ldrh	r3, [r7, #14]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	22c0      	movs	r2, #192	; 0xc0
 800586c:	f240 6111 	movw	r1, #1553	; 0x611
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fa91 	bl	8005d98 <CODEC_IO_Write>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005880:	89fb      	ldrh	r3, [r7, #14]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2210      	movs	r2, #16
 8005886:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fa84 	bl	8005d98 <CODEC_IO_Write>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800589a:	89fb      	ldrh	r3, [r7, #14]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	22c0      	movs	r2, #192	; 0xc0
 80058a0:	f240 6112 	movw	r1, #1554	; 0x612
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fa77 	bl	8005d98 <CODEC_IO_Write>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80058b4:	89fb      	ldrh	r3, [r7, #14]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	22c0      	movs	r2, #192	; 0xc0
 80058ba:	f240 6113 	movw	r1, #1555	; 0x613
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa6a 	bl	8005d98 <CODEC_IO_Write>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2210      	movs	r2, #16
 80058d4:	f240 4122 	movw	r1, #1058	; 0x422
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa5d 	bl	8005d98 <CODEC_IO_Write>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80058e8:	7afa      	ldrb	r2, [r7, #11]
 80058ea:	89fb      	ldrh	r3, [r7, #14]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f8c0 	bl	8005a74 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80058f4:	8afb      	ldrh	r3, [r7, #22]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a6 	beq.w	8005a48 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80058fc:	8afb      	ldrh	r3, [r7, #22]
 80058fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005902:	d003      	beq.n	800590c <wm8994_Init+0xc2c>
 8005904:	8afb      	ldrh	r3, [r7, #22]
 8005906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590a:	d12b      	bne.n	8005964 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800590c:	8b7b      	ldrh	r3, [r7, #26]
 800590e:	f043 0313 	orr.w	r3, r3, #19
 8005912:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005914:	89fb      	ldrh	r3, [r7, #14]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	8b7a      	ldrh	r2, [r7, #26]
 800591a:	2101      	movs	r1, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fa3b 	bl	8005d98 <CODEC_IO_Write>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800592c:	89fb      	ldrh	r3, [r7, #14]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2202      	movs	r2, #2
 8005932:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fa2e 	bl	8005d98 <CODEC_IO_Write>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800594e:	f240 4111 	movw	r1, #1041	; 0x411
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fa20 	bl	8005d98 <CODEC_IO_Write>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e06b      	b.n	8005a3c <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005964:	8afb      	ldrh	r3, [r7, #22]
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596a:	d139      	bne.n	80059e0 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800596c:	8b7b      	ldrh	r3, [r7, #26]
 800596e:	f043 0313 	orr.w	r3, r3, #19
 8005972:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005974:	89fb      	ldrh	r3, [r7, #14]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	8b7a      	ldrh	r2, [r7, #26]
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fa0b 	bl	8005d98 <CODEC_IO_Write>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800598c:	89fb      	ldrh	r3, [r7, #14]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2202      	movs	r2, #2
 8005992:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f9fe 	bl	8005d98 <CODEC_IO_Write>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80059ae:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f9f0 	bl	8005d98 <CODEC_IO_Write>
 80059b8:	4603      	mov	r3, r0
 80059ba:	461a      	mov	r2, r3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	4413      	add	r3, r2
 80059c0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 80059c2:	89fb      	ldrh	r3, [r7, #14]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80059ca:	f240 4111 	movw	r1, #1041	; 0x411
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f9e2 	bl	8005d98 <CODEC_IO_Write>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	e02d      	b.n	8005a3c <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80059e0:	8afb      	ldrh	r3, [r7, #22]
 80059e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e6:	d003      	beq.n	80059f0 <wm8994_Init+0xd10>
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d125      	bne.n	8005a3c <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80059f0:	89fb      	ldrh	r3, [r7, #14]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	220b      	movs	r2, #11
 80059f6:	2118      	movs	r1, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f9cd 	bl	8005d98 <CODEC_IO_Write>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	220b      	movs	r2, #11
 8005a0e:	211a      	movs	r1, #26
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f9c1 	bl	8005d98 <CODEC_IO_Write>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005a20:	89fb      	ldrh	r3, [r7, #14]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005a28:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f9b3 	bl	8005d98 <CODEC_IO_Write>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005a3c:	7afa      	ldrb	r2, [r7, #11]
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f816 	bl	8005a74 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005a48:	69fb      	ldr	r3, [r7, #28]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop

08005a54 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fbcd 	bl	8004204 <AUDIO_I2C_Read>
 8005a6a:	4603      	mov	r3, r0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	80fb      	strh	r3, [r7, #6]
 8005a80:	4613      	mov	r3, r2
 8005a82:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005a88:	797b      	ldrb	r3, [r7, #5]
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d80b      	bhi.n	8005aa6 <wm8994_SetVolume+0x32>
 8005a8e:	797a      	ldrb	r2, [r7, #5]
 8005a90:	4613      	mov	r3, r2
 8005a92:	019b      	lsls	r3, r3, #6
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	4a86      	ldr	r2, [pc, #536]	; (8005cb0 <wm8994_SetVolume+0x23c>)
 8005a98:	fb82 1203 	smull	r1, r2, r2, r3
 8005a9c:	1152      	asrs	r2, r2, #5
 8005a9e:	17db      	asrs	r3, r3, #31
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e000      	b.n	8005aa8 <wm8994_SetVolume+0x34>
 8005aa6:	2364      	movs	r3, #100	; 0x64
 8005aa8:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005aaa:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <wm8994_SetVolume+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 809b 	beq.w	8005bea <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab8:	d93d      	bls.n	8005b36 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f8fc 	bl	8005cbc <wm8994_SetMute>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f240 127f 	movw	r2, #383	; 0x17f
 8005ad4:	211c      	movs	r1, #28
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f95e 	bl	8005d98 <CODEC_IO_Write>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f240 127f 	movw	r2, #383	; 0x17f
 8005aee:	211d      	movs	r1, #29
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f951 	bl	8005d98 <CODEC_IO_Write>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f240 127f 	movw	r2, #383	; 0x17f
 8005b08:	2126      	movs	r1, #38	; 0x26
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f944 	bl	8005d98 <CODEC_IO_Write>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f240 127f 	movw	r2, #383	; 0x17f
 8005b22:	2127      	movs	r1, #39	; 0x27
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f937 	bl	8005d98 <CODEC_IO_Write>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e059      	b.n	8005bea <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005b36:	797b      	ldrb	r3, [r7, #5]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f8bb 	bl	8005cbc <wm8994_SetMute>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e04c      	b.n	8005bea <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f8b1 	bl	8005cbc <wm8994_SetMute>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	b2d8      	uxtb	r0, r3
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	b21b      	sxth	r3, r3
 8005b6a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	211c      	movs	r1, #28
 8005b76:	f000 f90f 	bl	8005d98 <CODEC_IO_Write>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	b2d8      	uxtb	r0, r3
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	211d      	movs	r1, #29
 8005b98:	f000 f8fe 	bl	8005d98 <CODEC_IO_Write>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	b2d8      	uxtb	r0, r3
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	b21b      	sxth	r3, r3
 8005bae:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005bb2:	b21b      	sxth	r3, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2126      	movs	r1, #38	; 0x26
 8005bba:	f000 f8ed 	bl	8005d98 <CODEC_IO_Write>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	b2d8      	uxtb	r0, r3
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	b21b      	sxth	r3, r3
 8005bd0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2127      	movs	r1, #39	; 0x27
 8005bdc:	f000 f8dc 	bl	8005d98 <CODEC_IO_Write>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005bea:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <wm8994_SetVolume+0x244>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d059      	beq.n	8005ca6 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005bf2:	797b      	ldrb	r3, [r7, #5]
 8005bf4:	2b63      	cmp	r3, #99	; 0x63
 8005bf6:	d80c      	bhi.n	8005c12 <wm8994_SetVolume+0x19e>
 8005bf8:	797a      	ldrb	r2, [r7, #5]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <wm8994_SetVolume+0x23c>)
 8005c04:	fb82 1203 	smull	r1, r2, r2, r3
 8005c08:	1152      	asrs	r2, r2, #5
 8005c0a:	17db      	asrs	r3, r3, #31
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e000      	b.n	8005c14 <wm8994_SetVolume+0x1a0>
 8005c12:	23ef      	movs	r3, #239	; 0xef
 8005c14:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	b2d8      	uxtb	r0, r3
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	b21b      	sxth	r3, r3
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c2c:	f000 f8b4 	bl	8005d98 <CODEC_IO_Write>
 8005c30:	4603      	mov	r3, r0
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	b2d8      	uxtb	r0, r3
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	b21b      	sxth	r3, r3
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	b21b      	sxth	r3, r3
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f240 4101 	movw	r1, #1025	; 0x401
 8005c50:	f000 f8a2 	bl	8005d98 <CODEC_IO_Write>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	b2d8      	uxtb	r0, r3
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	b21b      	sxth	r3, r3
 8005c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f240 4104 	movw	r1, #1028	; 0x404
 8005c74:	f000 f890 	bl	8005d98 <CODEC_IO_Write>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	b2d8      	uxtb	r0, r3
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8e:	b21b      	sxth	r3, r3
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	f240 4105 	movw	r1, #1029	; 0x405
 8005c98:	f000 f87e 	bl	8005d98 <CODEC_IO_Write>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	51eb851f 	.word	0x51eb851f
 8005cb4:	200009c0 	.word	0x200009c0
 8005cb8:	200009c4 	.word	0x200009c4

08005cbc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	6039      	str	r1, [r7, #0]
 8005cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005ccc:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <wm8994_SetMute+0x98>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d039      	beq.n	8005d48 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11c      	bne.n	8005d14 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f856 	bl	8005d98 <CODEC_IO_Write>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	f240 4122 	movw	r1, #1058	; 0x422
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f848 	bl	8005d98 <CODEC_IO_Write>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e019      	b.n	8005d48 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2210      	movs	r2, #16
 8005d1a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f83a 	bl	8005d98 <CODEC_IO_Write>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2210      	movs	r2, #16
 8005d34:	f240 4122 	movw	r1, #1058	; 0x422
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f82d 	bl	8005d98 <CODEC_IO_Write>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005d48:	68fb      	ldr	r3, [r7, #12]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200009c0 	.word	0x200009c0

08005d58 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f812 	bl	8005d98 <CODEC_IO_Write>
 8005d74:	4603      	mov	r3, r0
 8005d76:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <wm8994_Reset+0x38>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <wm8994_Reset+0x3c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

  return counter;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200009c0 	.word	0x200009c0
 8005d94:	200009c4 	.word	0x200009c4

08005d98 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
 8005da2:	460b      	mov	r3, r1
 8005da4:	80bb      	strh	r3, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	88b9      	ldrh	r1, [r7, #4]
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe f9fb 	bl	80041b0 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	b2db      	uxtb	r3, r3
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dce:	490e      	ldr	r1, [pc, #56]	; (8005e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dd0:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd4:	e002      	b.n	8005ddc <LoopCopyDataInit>

08005dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dda:	3304      	adds	r3, #4

08005ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de0:	d3f9      	bcc.n	8005dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de2:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005de4:	4c0b      	ldr	r4, [pc, #44]	; (8005e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005de8:	e001      	b.n	8005dee <LoopFillZerobss>

08005dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dec:	3204      	adds	r2, #4

08005dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df0:	d3fb      	bcc.n	8005dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005df2:	f7fe f867 	bl	8003ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005df6:	f00d fbef 	bl	80135d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfa:	f7fb fc23 	bl	8001644 <main>
  bx  lr    
 8005dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e08:	20000954 	.word	0x20000954
  ldr r2, =_sidata
 8005e0c:	0801c5e0 	.word	0x0801c5e0
  ldr r2, =_sbss
 8005e10:	20000958 	.word	0x20000958
  ldr r4, =_ebss
 8005e14:	20041cbc 	.word	0x20041cbc

08005e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e18:	e7fe      	b.n	8005e18 <ADC_IRQHandler>

08005e1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e1e:	2003      	movs	r0, #3
 8005e20:	f000 fba5 	bl	800656e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fd feb7 	bl	8003b98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005e2a:	f7fc fefd 	bl	8002c28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <HAL_IncTick+0x20>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <HAL_IncTick+0x24>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <HAL_IncTick+0x24>)
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000028 	.word	0x20000028
 8005e58:	200419a4 	.word	0x200419a4

08005e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <HAL_GetTick+0x14>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200419a4 	.word	0x200419a4

08005e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7ff ffee 	bl	8005e5c <HAL_GetTick>
 8005e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8c:	d005      	beq.n	8005e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <HAL_Delay+0x44>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e9a:	bf00      	nop
 8005e9c:	f7ff ffde 	bl	8005e5c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d8f7      	bhi.n	8005e9c <HAL_Delay+0x28>
  {
  }
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000028 	.word	0x20000028

08005ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e031      	b.n	8005f36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc fecc 	bl	8002c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d116      	bne.n	8005f28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_ADC_Init+0x84>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	f043 0202 	orr.w	r2, r3, #2
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f964 	bl	80061d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
 8005f26:	e001      	b.n	8005f2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	ffffeefd 	.word	0xffffeefd

08005f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x1c>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e12a      	b.n	80061b6 <HAL_ADC_ConfigChannel+0x272>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b09      	cmp	r3, #9
 8005f6e:	d93a      	bls.n	8005fe6 <HAL_ADC_ConfigChannel+0xa2>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f78:	d035      	beq.n	8005fe6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68d9      	ldr	r1, [r3, #12]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3b1e      	subs	r3, #30
 8005f90:	2207      	movs	r2, #7
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	43da      	mvns	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	400a      	ands	r2, r1
 8005f9e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a87      	ldr	r2, [pc, #540]	; (80061c4 <HAL_ADC_ConfigChannel+0x280>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68d9      	ldr	r1, [r3, #12]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	061a      	lsls	r2, r3, #24
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fbe:	e035      	b.n	800602c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4403      	add	r3, r0
 8005fd8:	3b1e      	subs	r3, #30
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fe4:	e022      	b.n	800602c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6919      	ldr	r1, [r3, #16]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2207      	movs	r2, #7
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	43da      	mvns	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	400a      	ands	r2, r1
 8006008:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6919      	ldr	r1, [r3, #16]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	4618      	mov	r0, r3
 800601c:	4603      	mov	r3, r0
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4403      	add	r3, r0
 8006022:	409a      	lsls	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b06      	cmp	r3, #6
 8006032:	d824      	bhi.n	800607e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	3b05      	subs	r3, #5
 8006046:	221f      	movs	r2, #31
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	43da      	mvns	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	400a      	ands	r2, r1
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	4618      	mov	r0, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	3b05      	subs	r3, #5
 8006070:	fa00 f203 	lsl.w	r2, r0, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	635a      	str	r2, [r3, #52]	; 0x34
 800607c:	e04c      	b.n	8006118 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d824      	bhi.n	80060d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	3b23      	subs	r3, #35	; 0x23
 8006098:	221f      	movs	r2, #31
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	400a      	ands	r2, r1
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4618      	mov	r0, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	3b23      	subs	r3, #35	; 0x23
 80060c2:	fa00 f203 	lsl.w	r2, r0, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
 80060ce:	e023      	b.n	8006118 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	3b41      	subs	r3, #65	; 0x41
 80060e2:	221f      	movs	r2, #31
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43da      	mvns	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	400a      	ands	r2, r1
 80060f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	3b41      	subs	r3, #65	; 0x41
 800610c:	fa00 f203 	lsl.w	r2, r0, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2a      	ldr	r2, [pc, #168]	; (80061c8 <HAL_ADC_ConfigChannel+0x284>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10a      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x1f4>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612a:	d105      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800612c:	4b27      	ldr	r3, [pc, #156]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a26      	ldr	r2, [pc, #152]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 8006132:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006136:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <HAL_ADC_ConfigChannel+0x284>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d109      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x212>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b12      	cmp	r3, #18
 8006148:	d105      	bne.n	8006156 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 8006150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006154:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <HAL_ADC_ConfigChannel+0x284>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d125      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x268>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a17      	ldr	r2, [pc, #92]	; (80061c4 <HAL_ADC_ConfigChannel+0x280>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <HAL_ADC_ConfigChannel+0x22e>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b11      	cmp	r3, #17
 8006170:	d11c      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006172:	4b16      	ldr	r3, [pc, #88]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_ADC_ConfigChannel+0x288>)
 8006178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800617c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <HAL_ADC_ConfigChannel+0x280>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d111      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_ADC_ConfigChannel+0x28c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <HAL_ADC_ConfigChannel+0x290>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	0c9a      	lsrs	r2, r3, #18
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800619e:	e002      	b.n	80061a6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f9      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	10000012 	.word	0x10000012
 80061c8:	40012000 	.word	0x40012000
 80061cc:	40012300 	.word	0x40012300
 80061d0:	20000008 	.word	0x20000008
 80061d4:	431bde83 	.word	0x431bde83

080061d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80061e0:	4b78      	ldr	r3, [pc, #480]	; (80063c4 <ADC_Init+0x1ec>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a77      	ldr	r2, [pc, #476]	; (80063c4 <ADC_Init+0x1ec>)
 80061e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80061ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80061ec:	4b75      	ldr	r3, [pc, #468]	; (80063c4 <ADC_Init+0x1ec>)
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4973      	ldr	r1, [pc, #460]	; (80063c4 <ADC_Init+0x1ec>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	021a      	lsls	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800622c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6899      	ldr	r1, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	4a58      	ldr	r2, [pc, #352]	; (80063c8 <ADC_Init+0x1f0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800627a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800629c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6899      	ldr	r1, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	e00f      	b.n	80062d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0202 	bic.w	r2, r2, #2
 80062e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6899      	ldr	r1, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	005a      	lsls	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800631e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	3b01      	subs	r3, #1
 800632c:	035a      	lsls	r2, r3, #13
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	e007      	b.n	8006348 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	3b01      	subs	r3, #1
 8006364:	051a      	lsls	r2, r3, #20
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800637c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6899      	ldr	r1, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800638a:	025a      	lsls	r2, r3, #9
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6899      	ldr	r1, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	029a      	lsls	r2, r3, #10
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	40012300 	.word	0x40012300
 80063c8:	0f000001 	.word	0x0f000001

080063cc <__NVIC_SetPriorityGrouping>:
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <__NVIC_SetPriorityGrouping+0x40>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063fa:	4a04      	ldr	r2, [pc, #16]	; (800640c <__NVIC_SetPriorityGrouping+0x40>)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	60d3      	str	r3, [r2, #12]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	e000ed00 	.word	0xe000ed00
 8006410:	05fa0000 	.word	0x05fa0000

08006414 <__NVIC_GetPriorityGrouping>:
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__NVIC_GetPriorityGrouping+0x18>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
}
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_EnableIRQ>:
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	db0b      	blt.n	800645a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	4907      	ldr	r1, [pc, #28]	; (8006468 <__NVIC_EnableIRQ+0x38>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2001      	movs	r0, #1
 8006452:	fa00 f202 	lsl.w	r2, r0, r2
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000e100 	.word	0xe000e100

0800646c <__NVIC_DisableIRQ>:
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647a:	2b00      	cmp	r3, #0
 800647c:	db12      	blt.n	80064a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	f003 021f 	and.w	r2, r3, #31
 8006484:	490a      	ldr	r1, [pc, #40]	; (80064b0 <__NVIC_DisableIRQ+0x44>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2001      	movs	r0, #1
 800648e:	fa00 f202 	lsl.w	r2, r0, r2
 8006492:	3320      	adds	r3, #32
 8006494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006498:	f3bf 8f4f 	dsb	sy
}
 800649c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800649e:	f3bf 8f6f 	isb	sy
}
 80064a2:	bf00      	nop
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	e000e100 	.word	0xe000e100

080064b4 <__NVIC_SetPriority>:
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db0a      	blt.n	80064de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	490c      	ldr	r1, [pc, #48]	; (8006500 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	0112      	lsls	r2, r2, #4
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	440b      	add	r3, r1
 80064d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064dc:	e00a      	b.n	80064f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4908      	ldr	r1, [pc, #32]	; (8006504 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	0112      	lsls	r2, r2, #4
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	440b      	add	r3, r1
 80064f2:	761a      	strb	r2, [r3, #24]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	e000e100 	.word	0xe000e100
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <NVIC_EncodePriority>:
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f1c3 0307 	rsb	r3, r3, #7
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf28      	it	cs
 8006526:	2304      	movcs	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3304      	adds	r3, #4
 800652e:	2b06      	cmp	r3, #6
 8006530:	d902      	bls.n	8006538 <NVIC_EncodePriority+0x30>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3b03      	subs	r3, #3
 8006536:	e000      	b.n	800653a <NVIC_EncodePriority+0x32>
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800653c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	401a      	ands	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	43d9      	mvns	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006560:	4313      	orrs	r3, r2
}
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	; 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff28 	bl	80063cc <__NVIC_SetPriorityGrouping>
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006596:	f7ff ff3d 	bl	8006414 <__NVIC_GetPriorityGrouping>
 800659a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7ff ffb1 	bl	8006508 <NVIC_EncodePriority>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ac:	4611      	mov	r1, r2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff ff80 	bl	80064b4 <__NVIC_SetPriority>
}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff30 	bl	8006430 <__NVIC_EnableIRQ>
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ff40 	bl	800646c <__NVIC_DisableIRQ>
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e054      	b.n	80066b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7f5b      	ldrb	r3, [r3, #29]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fb88 	bl	8002d2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	791b      	ldrb	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10c      	bne.n	8006644 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <HAL_CRC_Init+0xc4>)
 8006630:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0218 	bic.w	r2, r2, #24
 8006640:	609a      	str	r2, [r3, #8]
 8006642:	e00c      	b.n	800665e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6899      	ldr	r1, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	461a      	mov	r2, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f834 	bl	80066bc <HAL_CRCEx_Polynomial_Set>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e028      	b.n	80066b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	795b      	ldrb	r3, [r3, #5]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d105      	bne.n	8006672 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800666e:	611a      	str	r2, [r3, #16]
 8006670:	e004      	b.n	800667c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6912      	ldr	r2, [r2, #16]
 800667a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	04c11db7 	.word	0x04c11db7

080066bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80066cc:	231f      	movs	r3, #31
 80066ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80066d0:	bf00      	nop
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	613a      	str	r2, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_CRCEx_Polynomial_Set+0x16>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b18      	cmp	r3, #24
 80066f4:	d846      	bhi.n	8006784 <HAL_CRCEx_Polynomial_Set+0xc8>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	0800678b 	.word	0x0800678b
 8006700:	08006785 	.word	0x08006785
 8006704:	08006785 	.word	0x08006785
 8006708:	08006785 	.word	0x08006785
 800670c:	08006785 	.word	0x08006785
 8006710:	08006785 	.word	0x08006785
 8006714:	08006785 	.word	0x08006785
 8006718:	08006785 	.word	0x08006785
 800671c:	08006779 	.word	0x08006779
 8006720:	08006785 	.word	0x08006785
 8006724:	08006785 	.word	0x08006785
 8006728:	08006785 	.word	0x08006785
 800672c:	08006785 	.word	0x08006785
 8006730:	08006785 	.word	0x08006785
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	0800676d 	.word	0x0800676d
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006785 	.word	0x08006785
 800674c:	08006785 	.word	0x08006785
 8006750:	08006785 	.word	0x08006785
 8006754:	08006785 	.word	0x08006785
 8006758:	08006785 	.word	0x08006785
 800675c:	08006761 	.word	0x08006761
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d913      	bls.n	800678e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800676a:	e010      	b.n	800678e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b07      	cmp	r3, #7
 8006770:	d90f      	bls.n	8006792 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006776:	e00c      	b.n	8006792 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	d90b      	bls.n	8006796 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006782:	e008      	b.n	8006796 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
      break;
 8006788:	e006      	b.n	8006798 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800678a:	bf00      	nop
 800678c:	e004      	b.n	8006798 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006796:	bf00      	nop
  }
  if (status == HAL_OK)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f023 0118 	bic.w	r1, r3, #24
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e069      	b.n	80068ae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fc fac0 	bl	8002d6c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b2a      	ldr	r3, [pc, #168]	; (80068b8 <HAL_DCMI_Init+0xf0>)
 800680e:	400b      	ands	r3, r1
 8006810:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6819      	ldr	r1, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006826:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006832:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800683e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800684a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006856:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b10      	cmp	r3, #16
 8006866:	d112      	bne.n	800688e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7f1b      	ldrb	r3, [r3, #28]
 800686c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7f5b      	ldrb	r3, [r3, #29]
 8006872:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006874:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7f9b      	ldrb	r3, [r3, #30]
 800687a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800687c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7fdb      	ldrb	r3, [r3, #31]
 8006884:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800688a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800688c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 021e 	orr.w	r2, r2, #30
 800689c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	ffe0f007 	.word	0xffe0f007

080068bc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2204      	movs	r2, #4
 80068dc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	f043 0202 	orr.w	r2, r3, #2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	4a35      	ldr	r2, [pc, #212]	; (80069cc <HAL_DCMI_IRQHandler+0x110>)
 80068f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa2a 	bl	8006d58 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01e      	beq.n	800694c <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2202      	movs	r2, #2
 8006914:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2204      	movs	r2, #4
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692e:	4a27      	ldr	r2, [pc, #156]	; (80069cc <HAL_DCMI_IRQHandler+0x110>)
 8006930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fa0e 	bl	8006d58 <HAL_DMA_Abort_IT>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f86a 	bl	8006a20 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d006      	beq.n	8006964 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2210      	movs	r2, #16
 800695c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f840 	bl	80069e4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2208      	movs	r2, #8
 8006974:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f83e 	bl	80069f8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01d      	beq.n	80069c2 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d107      	bne.n	80069a4 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 021e 	bic.w	r2, r2, #30
 80069a2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f825 	bl	8006a0c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	08006a21 	.word	0x08006a21

080069d0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d009      	beq.n	8006a4c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ffbf 	bl	80069d0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a68:	f7ff f9f8 	bl	8005e5c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e099      	b.n	8006bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a98:	e00f      	b.n	8006aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9a:	f7ff f9df 	bl	8005e5c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d908      	bls.n	8006aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e078      	b.n	8006bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e8      	bne.n	8006a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <HAL_DMA_Init+0x158>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d117      	bne.n	8006b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb09 	bl	8007178 <DMA_CheckFifoParam>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e016      	b.n	8006bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fac0 	bl	800710c <DMA_CalcBaseAndBitshift>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	223f      	movs	r2, #63	; 0x3f
 8006b96:	409a      	lsls	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	f010803f 	.word	0xf010803f

08006bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_DMA_Start_IT+0x26>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e048      	b.n	8006c70 <HAL_DMA_Start_IT+0xb8>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d137      	bne.n	8006c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fa52 	bl	80070b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	223f      	movs	r2, #63	; 0x3f
 8006c12:	409a      	lsls	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0216 	orr.w	r2, r2, #22
 8006c26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0208 	orr.w	r2, r2, #8
 8006c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e005      	b.n	8006c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c86:	f7ff f8e9 	bl	8005e5c <HAL_GetTick>
 8006c8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d008      	beq.n	8006caa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e052      	b.n	8006d50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0216 	bic.w	r2, r2, #22
 8006cb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695a      	ldr	r2, [r3, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <HAL_DMA_Abort+0x62>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0208 	bic.w	r2, r2, #8
 8006ce8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cfa:	e013      	b.n	8006d24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cfc:	f7ff f8ae 	bl	8005e5c <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d90c      	bls.n	8006d24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e015      	b.n	8006d50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e4      	bne.n	8006cfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	223f      	movs	r2, #63	; 0x3f
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d004      	beq.n	8006d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e00c      	b.n	8006d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2205      	movs	r2, #5
 8006d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006da8:	4b92      	ldr	r3, [pc, #584]	; (8006ff4 <HAL_DMA_IRQHandler+0x258>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a92      	ldr	r2, [pc, #584]	; (8006ff8 <HAL_DMA_IRQHandler+0x25c>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	0a9b      	lsrs	r3, r3, #10
 8006db4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	409a      	lsls	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01a      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d013      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0204 	bic.w	r2, r2, #4
 8006dee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df4:	2208      	movs	r2, #8
 8006df6:	409a      	lsls	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e00:	f043 0201 	orr.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d012      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f043 0202 	orr.w	r2, r3, #2
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e42:	2204      	movs	r2, #4
 8006e44:	409a      	lsls	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d012      	beq.n	8006e74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e60:	2204      	movs	r2, #4
 8006e62:	409a      	lsls	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	f043 0204 	orr.w	r2, r3, #4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	2210      	movs	r2, #16
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d043      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d03c      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e96:	2210      	movs	r2, #16
 8006e98:	409a      	lsls	r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d018      	beq.n	8006ede <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d108      	bne.n	8006ecc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d024      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4798      	blx	r3
 8006eca:	e01f      	b.n	8006f0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01b      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	e016      	b.n	8006f0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d107      	bne.n	8006efc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0208 	bic.w	r2, r2, #8
 8006efa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f10:	2220      	movs	r2, #32
 8006f12:	409a      	lsls	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 808e 	beq.w	800703a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8086 	beq.w	800703a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	2220      	movs	r2, #32
 8006f34:	409a      	lsls	r2, r3
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d136      	bne.n	8006fb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0216 	bic.w	r2, r2, #22
 8006f54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <HAL_DMA_IRQHandler+0x1da>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0208 	bic.w	r2, r2, #8
 8006f84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8a:	223f      	movs	r2, #63	; 0x3f
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d07d      	beq.n	80070a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
        }
        return;
 8006fb2:	e078      	b.n	80070a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01c      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d108      	bne.n	8006fe2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d030      	beq.n	800703a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	e02b      	b.n	800703a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d027      	beq.n	800703a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
 8006ff2:	e022      	b.n	800703a <HAL_DMA_IRQHandler+0x29e>
 8006ff4:	20000008 	.word	0x20000008
 8006ff8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0210 	bic.w	r2, r2, #16
 8007018:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	2b00      	cmp	r3, #0
 8007040:	d032      	beq.n	80070a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d022      	beq.n	8007094 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2205      	movs	r2, #5
 8007052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3301      	adds	r3, #1
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	429a      	cmp	r2, r3
 8007070:	d307      	bcc.n	8007082 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f2      	bne.n	8007066 <HAL_DMA_IRQHandler+0x2ca>
 8007080:	e000      	b.n	8007084 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007082:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	e000      	b.n	80070a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80070a6:	bf00      	nop
    }
  }
}
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d108      	bne.n	80070f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070ee:	e007      	b.n	8007100 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	3b10      	subs	r3, #16
 800711c:	4a13      	ldr	r2, [pc, #76]	; (800716c <DMA_CalcBaseAndBitshift+0x60>)
 800711e:	fba2 2303 	umull	r2, r3, r2, r3
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <DMA_CalcBaseAndBitshift+0x64>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b03      	cmp	r3, #3
 8007138:	d908      	bls.n	800714c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <DMA_CalcBaseAndBitshift+0x68>)
 8007142:	4013      	ands	r3, r2
 8007144:	1d1a      	adds	r2, r3, #4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	659a      	str	r2, [r3, #88]	; 0x58
 800714a:	e006      	b.n	800715a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	4b08      	ldr	r3, [pc, #32]	; (8007174 <DMA_CalcBaseAndBitshift+0x68>)
 8007154:	4013      	ands	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	aaaaaaab 	.word	0xaaaaaaab
 8007170:	080190c8 	.word	0x080190c8
 8007174:	fffffc00 	.word	0xfffffc00

08007178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d11f      	bne.n	80071d2 <DMA_CheckFifoParam+0x5a>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d856      	bhi.n	8007246 <DMA_CheckFifoParam+0xce>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <DMA_CheckFifoParam+0x28>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071c3 	.word	0x080071c3
 80071a8:	080071b1 	.word	0x080071b1
 80071ac:	08007247 	.word	0x08007247
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d046      	beq.n	800724a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c0:	e043      	b.n	800724a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071ca:	d140      	bne.n	800724e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071d0:	e03d      	b.n	800724e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071da:	d121      	bne.n	8007220 <DMA_CheckFifoParam+0xa8>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d837      	bhi.n	8007252 <DMA_CheckFifoParam+0xda>
 80071e2:	a201      	add	r2, pc, #4	; (adr r2, 80071e8 <DMA_CheckFifoParam+0x70>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	080071ff 	.word	0x080071ff
 80071f0:	080071f9 	.word	0x080071f9
 80071f4:	08007211 	.word	0x08007211
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e030      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d025      	beq.n	8007256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800720e:	e022      	b.n	8007256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007218:	d11f      	bne.n	800725a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800721e:	e01c      	b.n	800725a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d903      	bls.n	800722e <DMA_CheckFifoParam+0xb6>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b03      	cmp	r3, #3
 800722a:	d003      	beq.n	8007234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800722c:	e018      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
      break;
 8007232:	e015      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00e      	beq.n	800725e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	e00b      	b.n	800725e <DMA_CheckFifoParam+0xe6>
      break;
 8007246:	bf00      	nop
 8007248:	e00a      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;
 800724a:	bf00      	nop
 800724c:	e008      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;
 800724e:	bf00      	nop
 8007250:	e006      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;
 8007252:	bf00      	nop
 8007254:	e004      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;
 8007256:	bf00      	nop
 8007258:	e002      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;   
 800725a:	bf00      	nop
 800725c:	e000      	b.n	8007260 <DMA_CheckFifoParam+0xe8>
      break;
 800725e:	bf00      	nop
    }
  } 
  
  return status; 
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop

08007270 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e039      	b.n	80072f6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fb fe62 	bl	8002f60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	f023 0107 	bic.w	r1, r3, #7
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <HAL_DMA2D_Init+0x90>)
 80072d8:	4013      	ands	r3, r2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68d1      	ldr	r1, [r2, #12]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	430b      	orrs	r3, r1
 80072e4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	ffffc000 	.word	0xffffc000

08007304 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_DMA2D_Start+0x1c>
 800731c:	2302      	movs	r3, #2
 800731e:	e018      	b.n	8007352 <HAL_DMA2D_Start+0x4e>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fa98 	bl	8007870 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b086      	sub	sp, #24
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d056      	beq.n	8007424 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007376:	f7fe fd71 	bl	8005e5c <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800737c:	e04b      	b.n	8007416 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800738c:	2b00      	cmp	r3, #0
 800738e:	d023      	beq.n	80073d8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	f043 0202 	orr.w	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	f043 0201 	orr.w	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2221      	movs	r2, #33	; 0x21
 80073c2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2204      	movs	r2, #4
 80073c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a5      	b.n	8007524 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073de:	d01a      	beq.n	8007416 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073e0:	f7fe fd3c 	bl	8005e5c <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d302      	bcc.n	80073f6 <HAL_DMA2D_PollForTransfer+0x9c>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	f043 0220 	orr.w	r2, r3, #32
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e086      	b.n	8007524 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ac      	beq.n	800737e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d061      	beq.n	800750a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007446:	f7fe fd09 	bl	8005e5c <HAL_GetTick>
 800744a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800744c:	e056      	b.n	80074fc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02e      	beq.n	80074be <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	f043 0204 	orr.w	r2, r3, #4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	f043 0202 	orr.w	r2, r3, #2
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	f043 0201 	orr.w	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2229      	movs	r2, #41	; 0x29
 80074a8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e032      	b.n	8007524 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c4:	d01a      	beq.n	80074fc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fe fcc9 	bl	8005e5c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <HAL_DMA2D_PollForTransfer+0x182>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10f      	bne.n	80074fc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e0:	f043 0220 	orr.w	r2, r3, #32
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2203      	movs	r2, #3
 80074ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e013      	b.n	8007524 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0a1      	beq.n	800744e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2212      	movs	r2, #18
 8007510:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d026      	beq.n	800759c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d021      	beq.n	800759c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007566:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756c:	f043 0201 	orr.w	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2201      	movs	r2, #1
 800757a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d026      	beq.n	80075f4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d021      	beq.n	80075f4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075be:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2220      	movs	r2, #32
 80075c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	f043 0202 	orr.w	r2, r3, #2
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2204      	movs	r2, #4
 80075d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d026      	beq.n	800764c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007604:	2b00      	cmp	r3, #0
 8007606:	d021      	beq.n	800764c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007616:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2208      	movs	r2, #8
 800761e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	f043 0204 	orr.w	r2, r3, #4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d013      	beq.n	800767e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2204      	movs	r2, #4
 8007676:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f853 	bl	8007724 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d024      	beq.n	80076d2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01f      	beq.n	80076d2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2202      	movs	r2, #2
 80076a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01f      	beq.n	800771c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01a      	beq.n	800771c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2210      	movs	r2, #16
 80076fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f80e 	bl	8007738 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_DMA2D_ConfigLayer+0x20>
 8007768:	2302      	movs	r3, #2
 800776a:	e079      	b.n	8007860 <HAL_DMA2D_ConfigLayer+0x114>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	3318      	adds	r3, #24
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4413      	add	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007796:	4b35      	ldr	r3, [pc, #212]	; (800786c <HAL_DMA2D_ConfigLayer+0x120>)
 8007798:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	d003      	beq.n	80077aa <HAL_DMA2D_ConfigLayer+0x5e>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d107      	bne.n	80077ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e005      	b.n	80077c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d120      	bne.n	800780e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	43db      	mvns	r3, r3
 80077d6:	ea02 0103 	and.w	r1, r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b0a      	cmp	r3, #10
 80077f4:	d003      	beq.n	80077fe <HAL_DMA2D_ConfigLayer+0xb2>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d127      	bne.n	800784e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800780a:	629a      	str	r2, [r3, #40]	; 0x28
 800780c:	e01f      	b.n	800784e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	43db      	mvns	r3, r3
 8007818:	ea02 0103 	and.w	r1, r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	430a      	orrs	r2, r1
 8007824:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b0a      	cmp	r3, #10
 8007836:	d003      	beq.n	8007840 <HAL_DMA2D_ConfigLayer+0xf4>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b09      	cmp	r3, #9
 800783e:	d106      	bne.n	800784e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800784c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	ff03000f 	.word	0xff03000f

08007870 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007870:	b480      	push	{r7}
 8007872:	b08b      	sub	sp, #44	; 0x2c
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007884:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	041a      	lsls	r2, r3, #16
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	431a      	orrs	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078a8:	d174      	bne.n	8007994 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	4313      	orrs	r3, r2
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
 80078e0:	e053      	b.n	800798a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d106      	bne.n	80078f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e048      	b.n	800798a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d111      	bne.n	8007924 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	0cdb      	lsrs	r3, r3, #19
 8007904:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	0a9b      	lsrs	r3, r3, #10
 800790a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	08db      	lsrs	r3, r3, #3
 8007910:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	02db      	lsls	r3, r3, #11
 800791a:	4313      	orrs	r3, r2
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
 8007922:	e032      	b.n	800798a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d117      	bne.n	800795c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	0fdb      	lsrs	r3, r3, #31
 8007930:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	0cdb      	lsrs	r3, r3, #19
 8007936:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	0adb      	lsrs	r3, r3, #11
 800793c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	08db      	lsrs	r3, r3, #3
 8007942:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	029b      	lsls	r3, r3, #10
 800794c:	431a      	orrs	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	03db      	lsls	r3, r3, #15
 8007952:	4313      	orrs	r3, r2
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
 800795a:	e016      	b.n	800798a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	0f1b      	lsrs	r3, r3, #28
 8007960:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	0d1b      	lsrs	r3, r3, #20
 8007966:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	0b1b      	lsrs	r3, r3, #12
 800796c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	091b      	lsrs	r3, r3, #4
 8007972:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	011a      	lsls	r2, r3, #4
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	431a      	orrs	r2, r3
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	031b      	lsls	r3, r3, #12
 8007982:	4313      	orrs	r3, r2
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007992:	e003      	b.n	800799c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	60da      	str	r2, [r3, #12]
}
 800799c:	bf00      	nop
 800799e:	372c      	adds	r7, #44	; 0x2c
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80079ba:	2300      	movs	r3, #0
 80079bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e175      	b.n	8007cb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80079c8:	2201      	movs	r2, #1
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4013      	ands	r3, r2
 80079da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	f040 8164 	bne.w	8007cae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d00b      	beq.n	8007a06 <HAL_GPIO_Init+0x5e>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d007      	beq.n	8007a06 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079fa:	2b11      	cmp	r3, #17
 80079fc:	d003      	beq.n	8007a06 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b12      	cmp	r3, #18
 8007a04:	d130      	bne.n	8007a68 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	2203      	movs	r2, #3
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43db      	mvns	r3, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	f003 0201 	and.w	r2, r3, #1
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	2203      	movs	r2, #3
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d003      	beq.n	8007aa8 <HAL_GPIO_Init+0x100>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b12      	cmp	r3, #18
 8007aa6:	d123      	bne.n	8007af0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	08da      	lsrs	r2, r3, #3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3208      	adds	r2, #8
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	220f      	movs	r2, #15
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	08da      	lsrs	r2, r3, #3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3208      	adds	r2, #8
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	2203      	movs	r2, #3
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43db      	mvns	r3, r3
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4013      	ands	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0203 	and.w	r2, r3, #3
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80be 	beq.w	8007cae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b32:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	4a65      	ldr	r2, [pc, #404]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b3e:	4b63      	ldr	r3, [pc, #396]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007b4a:	4a61      	ldr	r2, [pc, #388]	; (8007cd0 <HAL_GPIO_Init+0x328>)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	089b      	lsrs	r3, r3, #2
 8007b50:	3302      	adds	r3, #2
 8007b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	220f      	movs	r2, #15
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43db      	mvns	r3, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a58      	ldr	r2, [pc, #352]	; (8007cd4 <HAL_GPIO_Init+0x32c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d037      	beq.n	8007be6 <HAL_GPIO_Init+0x23e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a57      	ldr	r2, [pc, #348]	; (8007cd8 <HAL_GPIO_Init+0x330>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d031      	beq.n	8007be2 <HAL_GPIO_Init+0x23a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a56      	ldr	r2, [pc, #344]	; (8007cdc <HAL_GPIO_Init+0x334>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02b      	beq.n	8007bde <HAL_GPIO_Init+0x236>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a55      	ldr	r2, [pc, #340]	; (8007ce0 <HAL_GPIO_Init+0x338>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d025      	beq.n	8007bda <HAL_GPIO_Init+0x232>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a54      	ldr	r2, [pc, #336]	; (8007ce4 <HAL_GPIO_Init+0x33c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01f      	beq.n	8007bd6 <HAL_GPIO_Init+0x22e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a53      	ldr	r2, [pc, #332]	; (8007ce8 <HAL_GPIO_Init+0x340>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d019      	beq.n	8007bd2 <HAL_GPIO_Init+0x22a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a52      	ldr	r2, [pc, #328]	; (8007cec <HAL_GPIO_Init+0x344>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_GPIO_Init+0x226>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a51      	ldr	r2, [pc, #324]	; (8007cf0 <HAL_GPIO_Init+0x348>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00d      	beq.n	8007bca <HAL_GPIO_Init+0x222>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a50      	ldr	r2, [pc, #320]	; (8007cf4 <HAL_GPIO_Init+0x34c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d007      	beq.n	8007bc6 <HAL_GPIO_Init+0x21e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a4f      	ldr	r2, [pc, #316]	; (8007cf8 <HAL_GPIO_Init+0x350>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d101      	bne.n	8007bc2 <HAL_GPIO_Init+0x21a>
 8007bbe:	2309      	movs	r3, #9
 8007bc0:	e012      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e010      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	e00e      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bca:	2307      	movs	r3, #7
 8007bcc:	e00c      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bce:	2306      	movs	r3, #6
 8007bd0:	e00a      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bd2:	2305      	movs	r3, #5
 8007bd4:	e008      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	e006      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e004      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e002      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007be6:	2300      	movs	r3, #0
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	f002 0203 	and.w	r2, r2, #3
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	4093      	lsls	r3, r2
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007bf8:	4935      	ldr	r1, [pc, #212]	; (8007cd0 <HAL_GPIO_Init+0x328>)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	3302      	adds	r3, #2
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c06:	4b3d      	ldr	r3, [pc, #244]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c2a:	4a34      	ldr	r2, [pc, #208]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007c30:	4b32      	ldr	r3, [pc, #200]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c54:	4a29      	ldr	r2, [pc, #164]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c5a:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c84:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ca8:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	f67f ae86 	bls.w	80079c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40013800 	.word	0x40013800
 8007cd4:	40020000 	.word	0x40020000
 8007cd8:	40020400 	.word	0x40020400
 8007cdc:	40020800 	.word	0x40020800
 8007ce0:	40020c00 	.word	0x40020c00
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40021400 	.word	0x40021400
 8007cec:	40021800 	.word	0x40021800
 8007cf0:	40021c00 	.word	0x40021c00
 8007cf4:	40022000 	.word	0x40022000
 8007cf8:	40022400 	.word	0x40022400
 8007cfc:	40013c00 	.word	0x40013c00

08007d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e0d9      	b.n	8007ed0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	f040 80c9 	bne.w	8007eca <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007d38:	4a6b      	ldr	r2, [pc, #428]	; (8007ee8 <HAL_GPIO_DeInit+0x1e8>)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	089b      	lsrs	r3, r3, #2
 8007d3e:	3302      	adds	r3, #2
 8007d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d44:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	220f      	movs	r2, #15
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	4013      	ands	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a63      	ldr	r2, [pc, #396]	; (8007eec <HAL_GPIO_DeInit+0x1ec>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d037      	beq.n	8007dd2 <HAL_GPIO_DeInit+0xd2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a62      	ldr	r2, [pc, #392]	; (8007ef0 <HAL_GPIO_DeInit+0x1f0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_GPIO_DeInit+0xce>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a61      	ldr	r2, [pc, #388]	; (8007ef4 <HAL_GPIO_DeInit+0x1f4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02b      	beq.n	8007dca <HAL_GPIO_DeInit+0xca>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a60      	ldr	r2, [pc, #384]	; (8007ef8 <HAL_GPIO_DeInit+0x1f8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d025      	beq.n	8007dc6 <HAL_GPIO_DeInit+0xc6>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a5f      	ldr	r2, [pc, #380]	; (8007efc <HAL_GPIO_DeInit+0x1fc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01f      	beq.n	8007dc2 <HAL_GPIO_DeInit+0xc2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a5e      	ldr	r2, [pc, #376]	; (8007f00 <HAL_GPIO_DeInit+0x200>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d019      	beq.n	8007dbe <HAL_GPIO_DeInit+0xbe>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a5d      	ldr	r2, [pc, #372]	; (8007f04 <HAL_GPIO_DeInit+0x204>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_GPIO_DeInit+0xba>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a5c      	ldr	r2, [pc, #368]	; (8007f08 <HAL_GPIO_DeInit+0x208>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00d      	beq.n	8007db6 <HAL_GPIO_DeInit+0xb6>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a5b      	ldr	r2, [pc, #364]	; (8007f0c <HAL_GPIO_DeInit+0x20c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <HAL_GPIO_DeInit+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a5a      	ldr	r2, [pc, #360]	; (8007f10 <HAL_GPIO_DeInit+0x210>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d101      	bne.n	8007dae <HAL_GPIO_DeInit+0xae>
 8007daa:	2309      	movs	r3, #9
 8007dac:	e012      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dae:	230a      	movs	r3, #10
 8007db0:	e010      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007db2:	2308      	movs	r3, #8
 8007db4:	e00e      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007db6:	2307      	movs	r3, #7
 8007db8:	e00c      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dba:	2306      	movs	r3, #6
 8007dbc:	e00a      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dbe:	2305      	movs	r3, #5
 8007dc0:	e008      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	e006      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e004      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e002      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_GPIO_DeInit+0xd4>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	f002 0203 	and.w	r2, r2, #3
 8007dda:	0092      	lsls	r2, r2, #2
 8007ddc:	4093      	lsls	r3, r2
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d132      	bne.n	8007e4a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007de4:	4b4b      	ldr	r3, [pc, #300]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	43db      	mvns	r3, r3
 8007dec:	4949      	ldr	r1, [pc, #292]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007df2:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	43db      	mvns	r3, r3
 8007dfa:	4946      	ldr	r1, [pc, #280]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007e00:	4b44      	ldr	r3, [pc, #272]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	43db      	mvns	r3, r3
 8007e08:	4942      	ldr	r1, [pc, #264]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007e0e:	4b41      	ldr	r3, [pc, #260]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	43db      	mvns	r3, r3
 8007e16:	493f      	ldr	r1, [pc, #252]	; (8007f14 <HAL_GPIO_DeInit+0x214>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	220f      	movs	r2, #15
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007e2c:	4a2e      	ldr	r2, [pc, #184]	; (8007ee8 <HAL_GPIO_DeInit+0x1e8>)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	089b      	lsrs	r3, r3, #2
 8007e32:	3302      	adds	r3, #2
 8007e34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	43da      	mvns	r2, r3
 8007e3c:	482a      	ldr	r0, [pc, #168]	; (8007ee8 <HAL_GPIO_DeInit+0x1e8>)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	089b      	lsrs	r3, r3, #2
 8007e42:	400a      	ands	r2, r1
 8007e44:	3302      	adds	r3, #2
 8007e46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	2103      	movs	r1, #3
 8007e54:	fa01 f303 	lsl.w	r3, r1, r3
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	08da      	lsrs	r2, r3, #3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3208      	adds	r2, #8
 8007e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	220f      	movs	r2, #15
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	08d2      	lsrs	r2, r2, #3
 8007e80:	4019      	ands	r1, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3208      	adds	r2, #8
 8007e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	2103      	movs	r1, #3
 8007e94:	fa01 f303 	lsl.w	r3, r1, r3
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eac:	43db      	mvns	r3, r3
 8007eae:	401a      	ands	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2103      	movs	r1, #3
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	401a      	ands	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	f67f af22 	bls.w	8007d1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40013800 	.word	0x40013800
 8007eec:	40020000 	.word	0x40020000
 8007ef0:	40020400 	.word	0x40020400
 8007ef4:	40020800 	.word	0x40020800
 8007ef8:	40020c00 	.word	0x40020c00
 8007efc:	40021000 	.word	0x40021000
 8007f00:	40021400 	.word	0x40021400
 8007f04:	40021800 	.word	0x40021800
 8007f08:	40021c00 	.word	0x40021c00
 8007f0c:	40022000 	.word	0x40022000
 8007f10:	40022400 	.word	0x40022400
 8007f14:	40013c00 	.word	0x40013c00

08007f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	807b      	strh	r3, [r7, #2]
 8007f24:	4613      	mov	r3, r2
 8007f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f28:	787b      	ldrb	r3, [r7, #1]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f2e:	887a      	ldrh	r2, [r7, #2]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007f34:	e003      	b.n	8007f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007f36:	887b      	ldrh	r3, [r7, #2]
 8007f38:	041a      	lsls	r2, r3, #16
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	619a      	str	r2, [r3, #24]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f5c:	887a      	ldrh	r2, [r7, #2]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4013      	ands	r3, r2
 8007f62:	041a      	lsls	r2, r3, #16
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	43d9      	mvns	r1, r3
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	400b      	ands	r3, r1
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	619a      	str	r2, [r3, #24]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f96:	4a05      	ldr	r2, [pc, #20]	; (8007fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f806 	bl	8007fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	40013c00 	.word	0x40013c00

08007fb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f007 fcf3 	bl	800f9c8 <USB_GetMode>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 80ef 	bne.w	80081c8 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f007 fcd7 	bl	800f9a2 <USB_ReadInterrupts>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80e5 	beq.w	80081c6 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f007 fcce 	bl	800f9a2 <USB_ReadInterrupts>
 8008006:	4603      	mov	r3, r0
 8008008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008010:	d104      	bne.n	800801c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800801a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f007 fcbe 	bl	800f9a2 <USB_ReadInterrupts>
 8008026:	4603      	mov	r3, r0
 8008028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008030:	d104      	bne.n	800803c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800803a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f007 fcae 	bl	800f9a2 <USB_ReadInterrupts>
 8008046:	4603      	mov	r3, r0
 8008048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800804c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008050:	d104      	bne.n	800805c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800805a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f007 fc9e 	bl	800f9a2 <USB_ReadInterrupts>
 8008066:	4603      	mov	r3, r0
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b02      	cmp	r3, #2
 800806e:	d103      	bne.n	8008078 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2202      	movs	r2, #2
 8008076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f007 fc90 	bl	800f9a2 <USB_ReadInterrupts>
 8008082:	4603      	mov	r3, r0
 8008084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808c:	d115      	bne.n	80080ba <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008096:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d108      	bne.n	80080ba <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f008 f95d 	bl	8010368 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2101      	movs	r1, #1
 80080b4:	4618      	mov	r0, r3
 80080b6:	f007 fc95 	bl	800f9e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f007 fc6f 	bl	800f9a2 <USB_ReadInterrupts>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080ce:	d102      	bne.n	80080d6 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 f98a 	bl	80093ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f007 fc61 	bl	800f9a2 <USB_ReadInterrupts>
 80080e0:	4603      	mov	r3, r0
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d106      	bne.n	80080f8 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f008 f920 	bl	8010330 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2208      	movs	r2, #8
 80080f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f007 fc50 	bl	800f9a2 <USB_ReadInterrupts>
 8008102:	4603      	mov	r3, r0
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b10      	cmp	r3, #16
 800810a:	d101      	bne.n	8008110 <HAL_HCD_IRQHandler+0x14a>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <HAL_HCD_IRQHandler+0x14c>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d012      	beq.n	800813c <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0210 	bic.w	r2, r2, #16
 8008124:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f88d 	bl	8009246 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0210 	orr.w	r2, r2, #16
 800813a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f007 fc2e 	bl	800f9a2 <USB_ReadInterrupts>
 8008146:	4603      	mov	r3, r0
 8008148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008150:	d13a      	bne.n	80081c8 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f007 fc7e 	bl	800fa58 <USB_HC_ReadInterrupt>
 800815c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e025      	b.n	80081b0 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	fa22 f303 	lsr.w	r3, r2, r3
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d018      	beq.n	80081aa <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	d106      	bne.n	800819e <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f836 	bl	8008208 <HCD_HC_IN_IRQHandler>
 800819c:	e005      	b.n	80081aa <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fc51 	bl	8008a4c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3301      	adds	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d3d4      	bcc.n	8008164 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081c2:	615a      	str	r2, [r3, #20]
 80081c4:	e000      	b.n	80081c8 <HAL_HCD_IRQHandler+0x202>
      return;
 80081c6:	bf00      	nop
    }
  }
}
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_HCD_Stop+0x16>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e00d      	b.n	8008200 <HAL_HCD_Stop+0x32>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f007 fd5e 	bl	800fcb2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d119      	bne.n	800826c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008244:	461a      	mov	r2, r3
 8008246:	2304      	movs	r3, #4
 8008248:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	4413      	add	r3, r2
 8008252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	440a      	add	r2, r1
 8008260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008264:	f043 0302 	orr.w	r3, r3, #2
 8008268:	60d3      	str	r3, [r2, #12]
 800826a:	e101      	b.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008282:	d12b      	bne.n	80082dc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	4413      	add	r3, r2
 800828c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008290:	461a      	mov	r2, r3
 8008292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008296:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	212c      	movs	r1, #44	; 0x2c
 800829e:	fb01 f303 	mul.w	r3, r1, r3
 80082a2:	4413      	add	r3, r2
 80082a4:	3361      	adds	r3, #97	; 0x61
 80082a6:	2207      	movs	r2, #7
 80082a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f007 fbd0 	bl	800fa7a <USB_HC_Halt>
 80082da:	e0c9      	b.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d109      	bne.n	8008306 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fe:	461a      	mov	r2, r3
 8008300:	2320      	movs	r3, #32
 8008302:	6093      	str	r3, [r2, #8]
 8008304:	e0b4      	b.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b08      	cmp	r3, #8
 800831a:	d133      	bne.n	8008384 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	440a      	add	r2, r1
 8008332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	212c      	movs	r1, #44	; 0x2c
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	4413      	add	r3, r2
 8008348:	3361      	adds	r3, #97	; 0x61
 800834a:	2205      	movs	r2, #5
 800834c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835a:	461a      	mov	r2, r3
 800835c:	2310      	movs	r3, #16
 800835e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836c:	461a      	mov	r2, r3
 800836e:	2308      	movs	r3, #8
 8008370:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f007 fb7c 	bl	800fa7a <USB_HC_Halt>
 8008382:	e075      	b.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839a:	d134      	bne.n	8008406 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083b6:	f043 0302 	orr.w	r3, r3, #2
 80083ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	212c      	movs	r1, #44	; 0x2c
 80083c2:	fb01 f303 	mul.w	r3, r1, r3
 80083c6:	4413      	add	r3, r2
 80083c8:	3361      	adds	r3, #97	; 0x61
 80083ca:	2208      	movs	r2, #8
 80083cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	461a      	mov	r2, r3
 80083dc:	2310      	movs	r3, #16
 80083de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ec:	461a      	mov	r2, r3
 80083ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	4611      	mov	r1, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f007 fb3b 	bl	800fa7a <USB_HC_Halt>
 8008404:	e034      	b.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d129      	bne.n	8008470 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	440a      	add	r2, r1
 8008432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008436:	f043 0302 	orr.w	r3, r3, #2
 800843a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	212c      	movs	r1, #44	; 0x2c
 8008442:	fb01 f303 	mul.w	r3, r1, r3
 8008446:	4413      	add	r3, r2
 8008448:	3361      	adds	r3, #97	; 0x61
 800844a:	2206      	movs	r2, #6
 800844c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f007 fb0e 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4413      	add	r3, r2
 8008466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846a:	461a      	mov	r2, r3
 800846c:	2380      	movs	r3, #128	; 0x80
 800846e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008486:	d122      	bne.n	80084ce <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	440a      	add	r2, r1
 800849e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a2:	f043 0302 	orr.w	r3, r3, #2
 80084a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f007 fae1 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80084cc:	e2ba      	b.n	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	f040 811b 	bne.w	800871c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d019      	beq.n	8008522 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	212c      	movs	r1, #44	; 0x2c
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	4413      	add	r3, r2
 80084fa:	3348      	adds	r3, #72	; 0x48
 80084fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	0159      	lsls	r1, r3, #5
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	440b      	add	r3, r1
 8008506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008510:	1ad2      	subs	r2, r2, r3
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	202c      	movs	r0, #44	; 0x2c
 8008518:	fb00 f303 	mul.w	r3, r0, r3
 800851c:	440b      	add	r3, r1
 800851e:	3350      	adds	r3, #80	; 0x50
 8008520:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	212c      	movs	r1, #44	; 0x2c
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	4413      	add	r3, r2
 800852e:	3361      	adds	r3, #97	; 0x61
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	212c      	movs	r1, #44	; 0x2c
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	4413      	add	r3, r2
 8008540:	335c      	adds	r3, #92	; 0x5c
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	4413      	add	r3, r2
 800854e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008552:	461a      	mov	r2, r3
 8008554:	2301      	movs	r3, #1
 8008556:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	212c      	movs	r1, #44	; 0x2c
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	4413      	add	r3, r2
 8008564:	333f      	adds	r3, #63	; 0x3f
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	212c      	movs	r1, #44	; 0x2c
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	333f      	adds	r3, #63	; 0x3f
 800857a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800857c:	2b02      	cmp	r3, #2
 800857e:	d121      	bne.n	80085c4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	440a      	add	r2, r1
 8008596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800859a:	f043 0302 	orr.w	r3, r3, #2
 800859e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f007 fa65 	bl	800fa7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085bc:	461a      	mov	r2, r3
 80085be:	2310      	movs	r3, #16
 80085c0:	6093      	str	r3, [r2, #8]
 80085c2:	e066      	b.n	8008692 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	212c      	movs	r1, #44	; 0x2c
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	333f      	adds	r3, #63	; 0x3f
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d127      	bne.n	8008628 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	212c      	movs	r1, #44	; 0x2c
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	4413      	add	r3, r2
 8008604:	3360      	adds	r3, #96	; 0x60
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	b2d9      	uxtb	r1, r3
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	202c      	movs	r0, #44	; 0x2c
 8008614:	fb00 f303 	mul.w	r3, r0, r3
 8008618:	4413      	add	r3, r2
 800861a:	3360      	adds	r3, #96	; 0x60
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f007 feaf 	bl	8010384 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008626:	e034      	b.n	8008692 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	212c      	movs	r1, #44	; 0x2c
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	333f      	adds	r3, #63	; 0x3f
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d12a      	bne.n	8008692 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	212c      	movs	r1, #44	; 0x2c
 8008642:	fb01 f303 	mul.w	r3, r1, r3
 8008646:	4413      	add	r3, r2
 8008648:	3360      	adds	r3, #96	; 0x60
 800864a:	2201      	movs	r2, #1
 800864c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	212c      	movs	r1, #44	; 0x2c
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	3354      	adds	r3, #84	; 0x54
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f083 0301 	eor.w	r3, r3, #1
 8008662:	b2d8      	uxtb	r0, r3
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	212c      	movs	r1, #44	; 0x2c
 800866a:	fb01 f303 	mul.w	r3, r1, r3
 800866e:	4413      	add	r3, r2
 8008670:	3354      	adds	r3, #84	; 0x54
 8008672:	4602      	mov	r2, r0
 8008674:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	b2d9      	uxtb	r1, r3
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	202c      	movs	r0, #44	; 0x2c
 8008680:	fb00 f303 	mul.w	r3, r0, r3
 8008684:	4413      	add	r3, r2
 8008686:	3360      	adds	r3, #96	; 0x60
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f007 fe79 	bl	8010384 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d12b      	bne.n	80086f2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	212c      	movs	r1, #44	; 0x2c
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	4413      	add	r3, r2
 80086a6:	3348      	adds	r3, #72	; 0x48
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	202c      	movs	r0, #44	; 0x2c
 80086b0:	fb00 f202 	mul.w	r2, r0, r2
 80086b4:	440a      	add	r2, r1
 80086b6:	3240      	adds	r2, #64	; 0x40
 80086b8:	8812      	ldrh	r2, [r2, #0]
 80086ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 81be 	beq.w	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	212c      	movs	r1, #44	; 0x2c
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	3354      	adds	r3, #84	; 0x54
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f083 0301 	eor.w	r3, r3, #1
 80086dc:	b2d8      	uxtb	r0, r3
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	212c      	movs	r1, #44	; 0x2c
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	3354      	adds	r3, #84	; 0x54
 80086ec:	4602      	mov	r2, r0
 80086ee:	701a      	strb	r2, [r3, #0]
}
 80086f0:	e1a8      	b.n	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	212c      	movs	r1, #44	; 0x2c
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	4413      	add	r3, r2
 80086fe:	3354      	adds	r3, #84	; 0x54
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	f083 0301 	eor.w	r3, r3, #1
 8008706:	b2d8      	uxtb	r0, r3
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	212c      	movs	r1, #44	; 0x2c
 800870e:	fb01 f303 	mul.w	r3, r1, r3
 8008712:	4413      	add	r3, r2
 8008714:	3354      	adds	r3, #84	; 0x54
 8008716:	4602      	mov	r2, r0
 8008718:	701a      	strb	r2, [r3, #0]
}
 800871a:	e193      	b.n	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4413      	add	r3, r2
 8008724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	f040 8106 	bne.w	8008940 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	440a      	add	r2, r1
 800874a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800874e:	f023 0302 	bic.w	r3, r3, #2
 8008752:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	212c      	movs	r1, #44	; 0x2c
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	3361      	adds	r3, #97	; 0x61
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d109      	bne.n	800877c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	212c      	movs	r1, #44	; 0x2c
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	4413      	add	r3, r2
 8008774:	3360      	adds	r3, #96	; 0x60
 8008776:	2201      	movs	r2, #1
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	e0c9      	b.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3361      	adds	r3, #97	; 0x61
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b05      	cmp	r3, #5
 800878e:	d109      	bne.n	80087a4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	212c      	movs	r1, #44	; 0x2c
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	4413      	add	r3, r2
 800879c:	3360      	adds	r3, #96	; 0x60
 800879e:	2205      	movs	r2, #5
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	e0b5      	b.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	212c      	movs	r1, #44	; 0x2c
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	3361      	adds	r3, #97	; 0x61
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d009      	beq.n	80087cc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	212c      	movs	r1, #44	; 0x2c
 80087be:	fb01 f303 	mul.w	r3, r1, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	3361      	adds	r3, #97	; 0x61
 80087c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d150      	bne.n	800886e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	212c      	movs	r1, #44	; 0x2c
 80087d2:	fb01 f303 	mul.w	r3, r1, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	335c      	adds	r3, #92	; 0x5c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	202c      	movs	r0, #44	; 0x2c
 80087e4:	fb00 f303 	mul.w	r3, r0, r3
 80087e8:	440b      	add	r3, r1
 80087ea:	335c      	adds	r3, #92	; 0x5c
 80087ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	212c      	movs	r1, #44	; 0x2c
 80087f4:	fb01 f303 	mul.w	r3, r1, r3
 80087f8:	4413      	add	r3, r2
 80087fa:	335c      	adds	r3, #92	; 0x5c
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d912      	bls.n	8008828 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	212c      	movs	r1, #44	; 0x2c
 8008808:	fb01 f303 	mul.w	r3, r1, r3
 800880c:	4413      	add	r3, r2
 800880e:	335c      	adds	r3, #92	; 0x5c
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	212c      	movs	r1, #44	; 0x2c
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	3360      	adds	r3, #96	; 0x60
 8008822:	2204      	movs	r2, #4
 8008824:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008826:	e073      	b.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	212c      	movs	r1, #44	; 0x2c
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	4413      	add	r3, r2
 8008834:	3360      	adds	r3, #96	; 0x60
 8008836:	2202      	movs	r2, #2
 8008838:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008850:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008858:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	461a      	mov	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800886c:	e050      	b.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	212c      	movs	r1, #44	; 0x2c
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	4413      	add	r3, r2
 800887a:	3361      	adds	r3, #97	; 0x61
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d122      	bne.n	80088c8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	212c      	movs	r1, #44	; 0x2c
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	3360      	adds	r3, #96	; 0x60
 8008890:	2202      	movs	r2, #2
 8008892:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c0:	461a      	mov	r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e023      	b.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	212c      	movs	r1, #44	; 0x2c
 80088ce:	fb01 f303 	mul.w	r3, r1, r3
 80088d2:	4413      	add	r3, r2
 80088d4:	3361      	adds	r3, #97	; 0x61
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b07      	cmp	r3, #7
 80088da:	d119      	bne.n	8008910 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	212c      	movs	r1, #44	; 0x2c
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	4413      	add	r3, r2
 80088e8:	335c      	adds	r3, #92	; 0x5c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	202c      	movs	r0, #44	; 0x2c
 80088f4:	fb00 f303 	mul.w	r3, r0, r3
 80088f8:	440b      	add	r3, r1
 80088fa:	335c      	adds	r3, #92	; 0x5c
 80088fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	212c      	movs	r1, #44	; 0x2c
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	4413      	add	r3, r2
 800890a:	3360      	adds	r3, #96	; 0x60
 800890c:	2204      	movs	r2, #4
 800890e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891c:	461a      	mov	r2, r3
 800891e:	2302      	movs	r3, #2
 8008920:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	b2d9      	uxtb	r1, r3
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	202c      	movs	r0, #44	; 0x2c
 800892c:	fb00 f303 	mul.w	r3, r0, r3
 8008930:	4413      	add	r3, r2
 8008932:	3360      	adds	r3, #96	; 0x60
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f007 fd23 	bl	8010384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800893e:	e081      	b.n	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b10      	cmp	r3, #16
 8008954:	d176      	bne.n	8008a44 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	212c      	movs	r1, #44	; 0x2c
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	4413      	add	r3, r2
 8008962:	333f      	adds	r3, #63	; 0x3f
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d121      	bne.n	80089ae <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	212c      	movs	r1, #44	; 0x2c
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	4413      	add	r3, r2
 8008976:	335c      	adds	r3, #92	; 0x5c
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	440a      	add	r2, r1
 8008992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008996:	f043 0302 	orr.w	r3, r3, #2
 800899a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f007 f867 	bl	800fa7a <USB_HC_Halt>
 80089ac:	e041      	b.n	8008a32 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	212c      	movs	r1, #44	; 0x2c
 80089b4:	fb01 f303 	mul.w	r3, r1, r3
 80089b8:	4413      	add	r3, r2
 80089ba:	333f      	adds	r3, #63	; 0x3f
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	212c      	movs	r1, #44	; 0x2c
 80089c8:	fb01 f303 	mul.w	r3, r1, r3
 80089cc:	4413      	add	r3, r2
 80089ce:	333f      	adds	r3, #63	; 0x3f
 80089d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d12d      	bne.n	8008a32 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	212c      	movs	r1, #44	; 0x2c
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	4413      	add	r3, r2
 80089e2:	335c      	adds	r3, #92	; 0x5c
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d120      	bne.n	8008a32 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	3361      	adds	r3, #97	; 0x61
 80089fe:	2203      	movs	r2, #3
 8008a00:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f007 f824 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3e:	461a      	mov	r2, r3
 8008a40:	2310      	movs	r3, #16
 8008a42:	6093      	str	r3, [r2, #8]
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d119      	bne.n	8008ab0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2304      	movs	r3, #4
 8008a8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa8:	f043 0302 	orr.w	r3, r3, #2
 8008aac:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008aae:	e3c6      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d13e      	bne.n	8008b44 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	212c      	movs	r1, #44	; 0x2c
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	333d      	adds	r3, #61	; 0x3d
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f040 83a8 	bne.w	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	212c      	movs	r1, #44	; 0x2c
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	4413      	add	r3, r2
 8008afa:	333d      	adds	r3, #61	; 0x3d
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	212c      	movs	r1, #44	; 0x2c
 8008b06:	fb01 f303 	mul.w	r3, r1, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	3360      	adds	r3, #96	; 0x60
 8008b0e:	2202      	movs	r2, #2
 8008b10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	b2d2      	uxtb	r2, r2
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f006 ff9c 	bl	800fa7a <USB_HC_Halt>
}
 8008b42:	e37c      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5a:	d122      	bne.n	8008ba2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	0151      	lsls	r1, r2, #5
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	440a      	add	r2, r1
 8008b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b76:	f043 0302 	orr.w	r3, r3, #2
 8008b7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f006 ff77 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9e:	6093      	str	r3, [r2, #8]
}
 8008ba0:	e34d      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d150      	bne.n	8008c5a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	212c      	movs	r1, #44	; 0x2c
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	335c      	adds	r3, #92	; 0x5c
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d111      	bne.n	8008c04 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	212c      	movs	r1, #44	; 0x2c
 8008be6:	fb01 f303 	mul.w	r3, r1, r3
 8008bea:	4413      	add	r3, r2
 8008bec:	333d      	adds	r3, #61	; 0x3d
 8008bee:	2201      	movs	r2, #1
 8008bf0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c1e:	f043 0302 	orr.w	r3, r3, #2
 8008c22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f006 ff23 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c40:	461a      	mov	r2, r3
 8008c42:	2301      	movs	r3, #1
 8008c44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	212c      	movs	r1, #44	; 0x2c
 8008c4c:	fb01 f303 	mul.w	r3, r1, r3
 8008c50:	4413      	add	r3, r2
 8008c52:	3361      	adds	r3, #97	; 0x61
 8008c54:	2201      	movs	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
}
 8008c58:	e2f1      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6c:	2b40      	cmp	r3, #64	; 0x40
 8008c6e:	d13c      	bne.n	8008cea <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	212c      	movs	r1, #44	; 0x2c
 8008c76:	fb01 f303 	mul.w	r3, r1, r3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3361      	adds	r3, #97	; 0x61
 8008c7e:	2204      	movs	r2, #4
 8008c80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	212c      	movs	r1, #44	; 0x2c
 8008c88:	fb01 f303 	mul.w	r3, r1, r3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	333d      	adds	r3, #61	; 0x3d
 8008c90:	2201      	movs	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	335c      	adds	r3, #92	; 0x5c
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f043 0302 	orr.w	r3, r3, #2
 8008cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f006 fed2 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	6093      	str	r3, [r2, #8]
}
 8008ce8:	e2a9      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d12a      	bne.n	8008d56 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2308      	movs	r3, #8
 8008d10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	b2d2      	uxtb	r2, r2
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f006 fe9c 	bl	800fa7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	212c      	movs	r1, #44	; 0x2c
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	3361      	adds	r3, #97	; 0x61
 8008d50:	2205      	movs	r2, #5
 8008d52:	701a      	strb	r2, [r3, #0]
}
 8008d54:	e273      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d150      	bne.n	8008e0e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	212c      	movs	r1, #44	; 0x2c
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	335c      	adds	r3, #92	; 0x5c
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	212c      	movs	r1, #44	; 0x2c
 8008d84:	fb01 f303 	mul.w	r3, r1, r3
 8008d88:	4413      	add	r3, r2
 8008d8a:	3361      	adds	r3, #97	; 0x61
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	212c      	movs	r1, #44	; 0x2c
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	333d      	adds	r3, #61	; 0x3d
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d112      	bne.n	8008dca <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	212c      	movs	r1, #44	; 0x2c
 8008daa:	fb01 f303 	mul.w	r3, r1, r3
 8008dae:	4413      	add	r3, r2
 8008db0:	333c      	adds	r3, #60	; 0x3c
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d108      	bne.n	8008dca <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	212c      	movs	r1, #44	; 0x2c
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	333d      	adds	r3, #61	; 0x3d
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	0151      	lsls	r1, r2, #5
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	440a      	add	r2, r1
 8008de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008de4:	f043 0302 	orr.w	r3, r3, #2
 8008de8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f006 fe40 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e06:	461a      	mov	r2, r3
 8008e08:	2310      	movs	r3, #16
 8008e0a:	6093      	str	r3, [r2, #8]
}
 8008e0c:	e217      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d174      	bne.n	8008f0e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d121      	bne.n	8008e70 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	212c      	movs	r1, #44	; 0x2c
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	3361      	adds	r3, #97	; 0x61
 8008e3a:	2206      	movs	r2, #6
 8008e3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f006 fe06 	bl	800fa7a <USB_HC_Halt>
 8008e6e:	e044      	b.n	8008efa <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	212c      	movs	r1, #44	; 0x2c
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	335c      	adds	r3, #92	; 0x5c
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	202c      	movs	r0, #44	; 0x2c
 8008e88:	fb00 f303 	mul.w	r3, r0, r3
 8008e8c:	440b      	add	r3, r1
 8008e8e:	335c      	adds	r3, #92	; 0x5c
 8008e90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	212c      	movs	r1, #44	; 0x2c
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	335c      	adds	r3, #92	; 0x5c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d920      	bls.n	8008ee8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	212c      	movs	r1, #44	; 0x2c
 8008eac:	fb01 f303 	mul.w	r3, r1, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	335c      	adds	r3, #92	; 0x5c
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	212c      	movs	r1, #44	; 0x2c
 8008ebe:	fb01 f303 	mul.w	r3, r1, r3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	3360      	adds	r3, #96	; 0x60
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	b2d9      	uxtb	r1, r3
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	202c      	movs	r0, #44	; 0x2c
 8008ed4:	fb00 f303 	mul.w	r3, r0, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	3360      	adds	r3, #96	; 0x60
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f007 fa4f 	bl	8010384 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008ee6:	e008      	b.n	8008efa <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	212c      	movs	r1, #44	; 0x2c
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3360      	adds	r3, #96	; 0x60
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f06:	461a      	mov	r2, r3
 8008f08:	2380      	movs	r3, #128	; 0x80
 8008f0a:	6093      	str	r3, [r2, #8]
}
 8008f0c:	e197      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f24:	d134      	bne.n	8008f90 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f40:	f043 0302 	orr.w	r3, r3, #2
 8008f44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f006 fd92 	bl	800fa7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f62:	461a      	mov	r2, r3
 8008f64:	2310      	movs	r3, #16
 8008f66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f74:	461a      	mov	r2, r3
 8008f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	212c      	movs	r1, #44	; 0x2c
 8008f82:	fb01 f303 	mul.w	r3, r1, r3
 8008f86:	4413      	add	r3, r2
 8008f88:	3361      	adds	r3, #97	; 0x61
 8008f8a:	2208      	movs	r2, #8
 8008f8c:	701a      	strb	r2, [r3, #0]
}
 8008f8e:	e156      	b.n	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	f040 814b 	bne.w	800923e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc2:	f023 0302 	bic.w	r3, r3, #2
 8008fc6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	212c      	movs	r1, #44	; 0x2c
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3361      	adds	r3, #97	; 0x61
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d179      	bne.n	80090d0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	212c      	movs	r1, #44	; 0x2c
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	3360      	adds	r3, #96	; 0x60
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	212c      	movs	r1, #44	; 0x2c
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	333f      	adds	r3, #63	; 0x3f
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d00a      	beq.n	8009018 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	212c      	movs	r1, #44	; 0x2c
 8009008:	fb01 f303 	mul.w	r3, r1, r3
 800900c:	4413      	add	r3, r2
 800900e:	333f      	adds	r3, #63	; 0x3f
 8009010:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009012:	2b03      	cmp	r3, #3
 8009014:	f040 80fc 	bne.w	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d142      	bne.n	80090a6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	212c      	movs	r1, #44	; 0x2c
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	4413      	add	r3, r2
 800902c:	334c      	adds	r3, #76	; 0x4c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80ed 	beq.w	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	212c      	movs	r1, #44	; 0x2c
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	4413      	add	r3, r2
 8009042:	334c      	adds	r3, #76	; 0x4c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	202c      	movs	r0, #44	; 0x2c
 800904c:	fb00 f202 	mul.w	r2, r0, r2
 8009050:	440a      	add	r2, r1
 8009052:	3240      	adds	r2, #64	; 0x40
 8009054:	8812      	ldrh	r2, [r2, #0]
 8009056:	4413      	add	r3, r2
 8009058:	3b01      	subs	r3, #1
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	202c      	movs	r0, #44	; 0x2c
 8009060:	fb00 f202 	mul.w	r2, r0, r2
 8009064:	440a      	add	r2, r1
 8009066:	3240      	adds	r2, #64	; 0x40
 8009068:	8812      	ldrh	r2, [r2, #0]
 800906a:	fbb3 f3f2 	udiv	r3, r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80ca 	beq.w	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	212c      	movs	r1, #44	; 0x2c
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	4413      	add	r3, r2
 8009088:	3355      	adds	r3, #85	; 0x55
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	f083 0301 	eor.w	r3, r3, #1
 8009090:	b2d8      	uxtb	r0, r3
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	212c      	movs	r1, #44	; 0x2c
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	4413      	add	r3, r2
 800909e:	3355      	adds	r3, #85	; 0x55
 80090a0:	4602      	mov	r2, r0
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e0b4      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	212c      	movs	r1, #44	; 0x2c
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	3355      	adds	r3, #85	; 0x55
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	f083 0301 	eor.w	r3, r3, #1
 80090ba:	b2d8      	uxtb	r0, r3
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	212c      	movs	r1, #44	; 0x2c
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	3355      	adds	r3, #85	; 0x55
 80090ca:	4602      	mov	r2, r0
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e09f      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	212c      	movs	r1, #44	; 0x2c
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	4413      	add	r3, r2
 80090dc:	3361      	adds	r3, #97	; 0x61
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d109      	bne.n	80090f8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	212c      	movs	r1, #44	; 0x2c
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	3360      	adds	r3, #96	; 0x60
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e08b      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	212c      	movs	r1, #44	; 0x2c
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	4413      	add	r3, r2
 8009104:	3361      	adds	r3, #97	; 0x61
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b04      	cmp	r3, #4
 800910a:	d109      	bne.n	8009120 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	212c      	movs	r1, #44	; 0x2c
 8009112:	fb01 f303 	mul.w	r3, r1, r3
 8009116:	4413      	add	r3, r2
 8009118:	3360      	adds	r3, #96	; 0x60
 800911a:	2202      	movs	r2, #2
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e077      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	212c      	movs	r1, #44	; 0x2c
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	4413      	add	r3, r2
 800912c:	3361      	adds	r3, #97	; 0x61
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b05      	cmp	r3, #5
 8009132:	d109      	bne.n	8009148 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	212c      	movs	r1, #44	; 0x2c
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	3360      	adds	r3, #96	; 0x60
 8009142:	2205      	movs	r2, #5
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e063      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	212c      	movs	r1, #44	; 0x2c
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	4413      	add	r3, r2
 8009154:	3361      	adds	r3, #97	; 0x61
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b06      	cmp	r3, #6
 800915a:	d009      	beq.n	8009170 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	212c      	movs	r1, #44	; 0x2c
 8009162:	fb01 f303 	mul.w	r3, r1, r3
 8009166:	4413      	add	r3, r2
 8009168:	3361      	adds	r3, #97	; 0x61
 800916a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800916c:	2b08      	cmp	r3, #8
 800916e:	d14f      	bne.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	212c      	movs	r1, #44	; 0x2c
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	4413      	add	r3, r2
 800917c:	335c      	adds	r3, #92	; 0x5c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	202c      	movs	r0, #44	; 0x2c
 8009188:	fb00 f303 	mul.w	r3, r0, r3
 800918c:	440b      	add	r3, r1
 800918e:	335c      	adds	r3, #92	; 0x5c
 8009190:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	212c      	movs	r1, #44	; 0x2c
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	4413      	add	r3, r2
 800919e:	335c      	adds	r3, #92	; 0x5c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d912      	bls.n	80091cc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	212c      	movs	r1, #44	; 0x2c
 80091ac:	fb01 f303 	mul.w	r3, r1, r3
 80091b0:	4413      	add	r3, r2
 80091b2:	335c      	adds	r3, #92	; 0x5c
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	212c      	movs	r1, #44	; 0x2c
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	4413      	add	r3, r2
 80091c4:	3360      	adds	r3, #96	; 0x60
 80091c6:	2204      	movs	r2, #4
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e021      	b.n	8009210 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	212c      	movs	r1, #44	; 0x2c
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	3360      	adds	r3, #96	; 0x60
 80091da:	2202      	movs	r2, #2
 80091dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091f4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4413      	add	r3, r2
 8009206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800920a:	461a      	mov	r2, r3
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	4413      	add	r3, r2
 8009218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921c:	461a      	mov	r2, r3
 800921e:	2302      	movs	r3, #2
 8009220:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	b2d9      	uxtb	r1, r3
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	202c      	movs	r0, #44	; 0x2c
 800922c:	fb00 f303 	mul.w	r3, r0, r3
 8009230:	4413      	add	r3, r2
 8009232:	3360      	adds	r3, #96	; 0x60
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f007 f8a3 	bl	8010384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800923e:	bf00      	nop
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b08a      	sub	sp, #40	; 0x28
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	0c5b      	lsrs	r3, r3, #17
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	091b      	lsrs	r3, r3, #4
 8009276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800927a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d004      	beq.n	800928c <HCD_RXQLVL_IRQHandler+0x46>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b05      	cmp	r3, #5
 8009286:	f000 80a9 	beq.w	80093dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800928a:	e0aa      	b.n	80093e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80a6 	beq.w	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	212c      	movs	r1, #44	; 0x2c
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	4413      	add	r3, r2
 80092a0:	3344      	adds	r3, #68	; 0x44
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 809b 	beq.w	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	212c      	movs	r1, #44	; 0x2c
 80092b0:	fb01 f303 	mul.w	r3, r1, r3
 80092b4:	4413      	add	r3, r2
 80092b6:	3350      	adds	r3, #80	; 0x50
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	441a      	add	r2, r3
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	202c      	movs	r0, #44	; 0x2c
 80092c4:	fb00 f303 	mul.w	r3, r0, r3
 80092c8:	440b      	add	r3, r1
 80092ca:	334c      	adds	r3, #76	; 0x4c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d87a      	bhi.n	80093c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	212c      	movs	r1, #44	; 0x2c
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	3344      	adds	r3, #68	; 0x44
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	b292      	uxth	r2, r2
 80092ea:	4619      	mov	r1, r3
 80092ec:	f006 fb30 	bl	800f950 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	212c      	movs	r1, #44	; 0x2c
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	3344      	adds	r3, #68	; 0x44
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	441a      	add	r2, r3
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	202c      	movs	r0, #44	; 0x2c
 800930a:	fb00 f303 	mul.w	r3, r0, r3
 800930e:	440b      	add	r3, r1
 8009310:	3344      	adds	r3, #68	; 0x44
 8009312:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	212c      	movs	r1, #44	; 0x2c
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	3350      	adds	r3, #80	; 0x50
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	441a      	add	r2, r3
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	202c      	movs	r0, #44	; 0x2c
 800932e:	fb00 f303 	mul.w	r3, r0, r3
 8009332:	440b      	add	r3, r1
 8009334:	3350      	adds	r3, #80	; 0x50
 8009336:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	0cdb      	lsrs	r3, r3, #19
 8009348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800934c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	212c      	movs	r1, #44	; 0x2c
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	3340      	adds	r3, #64	; 0x40
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	4293      	cmp	r3, r2
 8009364:	d13c      	bne.n	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d039      	beq.n	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009382:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800938a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	4413      	add	r3, r2
 8009394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	212c      	movs	r1, #44	; 0x2c
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	3354      	adds	r3, #84	; 0x54
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f083 0301 	eor.w	r3, r3, #1
 80093b2:	b2d8      	uxtb	r0, r3
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	212c      	movs	r1, #44	; 0x2c
 80093ba:	fb01 f303 	mul.w	r3, r1, r3
 80093be:	4413      	add	r3, r2
 80093c0:	3354      	adds	r3, #84	; 0x54
 80093c2:	4602      	mov	r2, r0
 80093c4:	701a      	strb	r2, [r3, #0]
      break;
 80093c6:	e00b      	b.n	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	212c      	movs	r1, #44	; 0x2c
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	3360      	adds	r3, #96	; 0x60
 80093d6:	2204      	movs	r2, #4
 80093d8:	701a      	strb	r2, [r3, #0]
      break;
 80093da:	e001      	b.n	80093e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80093dc:	bf00      	nop
 80093de:	e000      	b.n	80093e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80093e0:	bf00      	nop
  }
}
 80093e2:	bf00      	nop
 80093e4:	3728      	adds	r7, #40	; 0x28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009416:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b02      	cmp	r3, #2
 8009420:	d10b      	bne.n	800943a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b01      	cmp	r3, #1
 800942a:	d102      	bne.n	8009432 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f006 ff8d 	bl	801034c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f043 0302 	orr.w	r3, r3, #2
 8009438:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b08      	cmp	r3, #8
 8009442:	d132      	bne.n	80094aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f043 0308 	orr.w	r3, r3, #8
 800944a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b04      	cmp	r3, #4
 8009454:	d126      	bne.n	80094a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d113      	bne.n	8009486 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009468:	d106      	bne.n	8009478 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2102      	movs	r1, #2
 8009470:	4618      	mov	r0, r3
 8009472:	f006 fab7 	bl	800f9e4 <USB_InitFSLSPClkSel>
 8009476:	e011      	b.n	800949c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2101      	movs	r1, #1
 800947e:	4618      	mov	r0, r3
 8009480:	f006 fab0 	bl	800f9e4 <USB_InitFSLSPClkSel>
 8009484:	e00a      	b.n	800949c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d106      	bne.n	800949c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009494:	461a      	mov	r2, r3
 8009496:	f64e 2360 	movw	r3, #60000	; 0xea60
 800949a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f006 ff7f 	bl	80103a0 <HAL_HCD_PortEnabled_Callback>
 80094a2:	e002      	b.n	80094aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f006 ff89 	bl	80103bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d103      	bne.n	80094bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f043 0320 	orr.w	r3, r3, #32
 80094ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6013      	str	r3, [r2, #0]
}
 80094c8:	bf00      	nop
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e07f      	b.n	80095e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7f9 fd58 	bl	8002fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2224      	movs	r2, #36	; 0x24
 8009500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0201 	bic.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d107      	bne.n	800954a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009546:	609a      	str	r2, [r3, #8]
 8009548:	e006      	b.n	8009558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d104      	bne.n	800956a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <HAL_I2C_Init+0x11c>)
 8009576:	430b      	orrs	r3, r1
 8009578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	ea42 0103 	orr.w	r1, r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	021a      	lsls	r2, r3, #8
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69d9      	ldr	r1, [r3, #28]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1a      	ldr	r2, [r3, #32]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	02008000 	.word	0x02008000

080095f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e021      	b.n	8009646 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2224      	movs	r2, #36	; 0x24
 8009606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7f9 fd3e 	bl	800309c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af02      	add	r7, sp, #8
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	461a      	mov	r2, r3
 800965e:	4603      	mov	r3, r0
 8009660:	817b      	strh	r3, [r7, #10]
 8009662:	460b      	mov	r3, r1
 8009664:	813b      	strh	r3, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b20      	cmp	r3, #32
 8009674:	f040 80f9 	bne.w	800986a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_I2C_Mem_Write+0x34>
 800967e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d105      	bne.n	8009690 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800968a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e0ed      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_I2C_Mem_Write+0x4e>
 800969a:	2302      	movs	r3, #2
 800969c:	e0e6      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096a6:	f7fc fbd9 	bl	8005e5c <HAL_GetTick>
 80096aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2319      	movs	r3, #25
 80096b2:	2201      	movs	r2, #1
 80096b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fac3 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0d1      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2221      	movs	r2, #33	; 0x21
 80096cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096f0:	88f8      	ldrh	r0, [r7, #6]
 80096f2:	893a      	ldrh	r2, [r7, #8]
 80096f4:	8979      	ldrh	r1, [r7, #10]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	4603      	mov	r3, r0
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f9d3 	bl	8009aac <I2C_RequestMemoryWrite>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e0a9      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971c:	b29b      	uxth	r3, r3
 800971e:	2bff      	cmp	r3, #255	; 0xff
 8009720:	d90e      	bls.n	8009740 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972c:	b2da      	uxtb	r2, r3
 800972e:	8979      	ldrh	r1, [r7, #10]
 8009730:	2300      	movs	r3, #0
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 fba5 	bl	8009e88 <I2C_TransferConfig>
 800973e:	e00f      	b.n	8009760 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009744:	b29a      	uxth	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974e:	b2da      	uxtb	r2, r3
 8009750:	8979      	ldrh	r1, [r7, #10]
 8009752:	2300      	movs	r3, #0
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fb94 	bl	8009e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 faad 	bl	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e07b      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800978e:	b29b      	uxth	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d034      	beq.n	8009818 <HAL_I2C_Mem_Write+0x1c8>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d130      	bne.n	8009818 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fa3f 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e04d      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	2bff      	cmp	r3, #255	; 0xff
 80097d8:	d90e      	bls.n	80097f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	8979      	ldrh	r1, [r7, #10]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fb49 	bl	8009e88 <I2C_TransferConfig>
 80097f6:	e00f      	b.n	8009818 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009806:	b2da      	uxtb	r2, r3
 8009808:	8979      	ldrh	r1, [r7, #10]
 800980a:	2300      	movs	r3, #0
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fb38 	bl	8009e88 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d19e      	bne.n	8009760 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fa8c 	bl	8009d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e01a      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2220      	movs	r2, #32
 800983c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6859      	ldr	r1, [r3, #4]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <HAL_I2C_Mem_Write+0x224>)
 800984a:	400b      	ands	r3, r1
 800984c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	e000      	b.n	800986c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800986a:	2302      	movs	r3, #2
  }
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	fe00e800 	.word	0xfe00e800

08009878 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	4603      	mov	r3, r0
 8009888:	817b      	strh	r3, [r7, #10]
 800988a:	460b      	mov	r3, r1
 800988c:	813b      	strh	r3, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b20      	cmp	r3, #32
 800989c:	f040 80fd 	bne.w	8009a9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_I2C_Mem_Read+0x34>
 80098a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e0f1      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d101      	bne.n	80098c6 <HAL_I2C_Mem_Read+0x4e>
 80098c2:	2302      	movs	r3, #2
 80098c4:	e0ea      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098ce:	f7fc fac5 	bl	8005e5c <HAL_GetTick>
 80098d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	2319      	movs	r3, #25
 80098da:	2201      	movs	r2, #1
 80098dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f9af 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e0d5      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2222      	movs	r2, #34	; 0x22
 80098f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2240      	movs	r2, #64	; 0x40
 80098fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a3a      	ldr	r2, [r7, #32]
 800990a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009918:	88f8      	ldrh	r0, [r7, #6]
 800991a:	893a      	ldrh	r2, [r7, #8]
 800991c:	8979      	ldrh	r1, [r7, #10]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	4603      	mov	r3, r0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f913 	bl	8009b54 <I2C_RequestMemoryRead>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e0ad      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009944:	b29b      	uxth	r3, r3
 8009946:	2bff      	cmp	r3, #255	; 0xff
 8009948:	d90e      	bls.n	8009968 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	22ff      	movs	r2, #255	; 0xff
 800994e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009954:	b2da      	uxtb	r2, r3
 8009956:	8979      	ldrh	r1, [r7, #10]
 8009958:	4b52      	ldr	r3, [pc, #328]	; (8009aa4 <HAL_I2C_Mem_Read+0x22c>)
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fa91 	bl	8009e88 <I2C_TransferConfig>
 8009966:	e00f      	b.n	8009988 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996c:	b29a      	uxth	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009976:	b2da      	uxtb	r2, r3
 8009978:	8979      	ldrh	r1, [r7, #10]
 800997a:	4b4a      	ldr	r3, [pc, #296]	; (8009aa4 <HAL_I2C_Mem_Read+0x22c>)
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fa80 	bl	8009e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	2200      	movs	r2, #0
 8009990:	2104      	movs	r1, #4
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f956 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e07c      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d034      	beq.n	8009a48 <HAL_I2C_Mem_Read+0x1d0>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d130      	bne.n	8009a48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	2200      	movs	r2, #0
 80099ee:	2180      	movs	r1, #128	; 0x80
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f927 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e04d      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2bff      	cmp	r3, #255	; 0xff
 8009a08:	d90e      	bls.n	8009a28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	22ff      	movs	r2, #255	; 0xff
 8009a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	8979      	ldrh	r1, [r7, #10]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 fa31 	bl	8009e88 <I2C_TransferConfig>
 8009a26:	e00f      	b.n	8009a48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	8979      	ldrh	r1, [r7, #10]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 fa20 	bl	8009e88 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d19a      	bne.n	8009988 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f974 	bl	8009d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e01a      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6859      	ldr	r1, [r3, #4]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <HAL_I2C_Mem_Read+0x230>)
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009a9a:	2302      	movs	r3, #2
  }
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	80002400 	.word	0x80002400
 8009aa8:	fe00e800 	.word	0xfe00e800

08009aac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4603      	mov	r3, r0
 8009abc:	817b      	strh	r3, [r7, #10]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	813b      	strh	r3, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ac6:	88fb      	ldrh	r3, [r7, #6]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	8979      	ldrh	r1, [r7, #10]
 8009acc:	4b20      	ldr	r3, [pc, #128]	; (8009b50 <I2C_RequestMemoryWrite+0xa4>)
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f9d7 	bl	8009e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f8f0 	bl	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e02c      	b.n	8009b48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d105      	bne.n	8009b00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009af4:	893b      	ldrh	r3, [r7, #8]
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	629a      	str	r2, [r3, #40]	; 0x28
 8009afe:	e015      	b.n	8009b2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	69b9      	ldr	r1, [r7, #24]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f8d6 	bl	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e012      	b.n	8009b48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b22:	893b      	ldrh	r3, [r7, #8]
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2200      	movs	r2, #0
 8009b34:	2180      	movs	r1, #128	; 0x80
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 f884 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	80002000 	.word	0x80002000

08009b54 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	4611      	mov	r1, r2
 8009b60:	461a      	mov	r2, r3
 8009b62:	4603      	mov	r3, r0
 8009b64:	817b      	strh	r3, [r7, #10]
 8009b66:	460b      	mov	r3, r1
 8009b68:	813b      	strh	r3, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	8979      	ldrh	r1, [r7, #10]
 8009b74:	4b20      	ldr	r3, [pc, #128]	; (8009bf8 <I2C_RequestMemoryRead+0xa4>)
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f984 	bl	8009e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	69b9      	ldr	r1, [r7, #24]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f89d 	bl	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e02c      	b.n	8009bee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d105      	bne.n	8009ba6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b9a:	893b      	ldrh	r3, [r7, #8]
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8009ba4:	e015      	b.n	8009bd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ba6:	893b      	ldrh	r3, [r7, #8]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	69b9      	ldr	r1, [r7, #24]
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 f883 	bl	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e012      	b.n	8009bee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bc8:	893b      	ldrh	r3, [r7, #8]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2140      	movs	r1, #64	; 0x40
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f831 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e000      	b.n	8009bee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	80002000 	.word	0x80002000

08009bfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d103      	bne.n	8009c1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2200      	movs	r2, #0
 8009c18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d007      	beq.n	8009c38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	619a      	str	r2, [r3, #24]
  }
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c54:	e022      	b.n	8009c9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5c:	d01e      	beq.n	8009c9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7fc f8fd 	bl	8005e5c <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d113      	bne.n	8009c9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c78:	f043 0220 	orr.w	r2, r3, #32
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e00f      	b.n	8009cbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	bf0c      	ite	eq
 8009cac:	2301      	moveq	r3, #1
 8009cae:	2300      	movne	r3, #0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d0cd      	beq.n	8009c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cd0:	e02c      	b.n	8009d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	68b9      	ldr	r1, [r7, #8]
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f870 	bl	8009dbc <I2C_IsAcknowledgeFailed>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e02a      	b.n	8009d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cec:	d01e      	beq.n	8009d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cee:	f7fc f8b5 	bl	8005e5c <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d113      	bne.n	8009d2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d08:	f043 0220 	orr.w	r2, r3, #32
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e007      	b.n	8009d3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d1cb      	bne.n	8009cd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d50:	e028      	b.n	8009da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f830 	bl	8009dbc <I2C_IsAcknowledgeFailed>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e026      	b.n	8009db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d66:	f7fc f879 	bl	8005e5c <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d302      	bcc.n	8009d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d113      	bne.n	8009da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d80:	f043 0220 	orr.w	r2, r3, #32
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e007      	b.n	8009db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d1cf      	bne.n	8009d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f003 0310 	and.w	r3, r3, #16
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d151      	bne.n	8009e7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dd6:	e022      	b.n	8009e1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dde:	d01e      	beq.n	8009e1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009de0:	f7fc f83c 	bl	8005e5c <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d302      	bcc.n	8009df6 <I2C_IsAcknowledgeFailed+0x3a>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d113      	bne.n	8009e1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	f043 0220 	orr.w	r2, r3, #32
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e02e      	b.n	8009e7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d1d5      	bne.n	8009dd8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2210      	movs	r2, #16
 8009e32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7ff fedd 	bl	8009bfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6859      	ldr	r1, [r3, #4]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <I2C_IsAcknowledgeFailed+0xc8>)
 8009e4e:	400b      	ands	r3, r1
 8009e50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e56:	f043 0204 	orr.w	r2, r3, #4
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e000      	b.n	8009e7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	fe00e800 	.word	0xfe00e800

08009e88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	817b      	strh	r3, [r7, #10]
 8009e96:	4613      	mov	r3, r2
 8009e98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	0d5b      	lsrs	r3, r3, #21
 8009ea4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <I2C_TransferConfig+0x58>)
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	43db      	mvns	r3, r3
 8009eae:	ea02 0103 	and.w	r1, r2, r3
 8009eb2:	897b      	ldrh	r3, [r7, #10]
 8009eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009eb8:	7a7b      	ldrb	r3, [r7, #9]
 8009eba:	041b      	lsls	r3, r3, #16
 8009ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	03ff63ff 	.word	0x03ff63ff

08009ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	d138      	bne.n	8009f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e032      	b.n	8009f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2224      	movs	r2, #36	; 0x24
 8009f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e000      	b.n	8009f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f6c:	2302      	movs	r3, #2
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d139      	bne.n	800a004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d101      	bne.n	8009f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e033      	b.n	800a006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2224      	movs	r2, #36	; 0x24
 8009faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0201 	bic.w	r2, r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	021b      	lsls	r3, r3, #8
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	e000      	b.n	800a006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a004:	2302      	movs	r3, #2
  }
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
	...

0800a014 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e0bf      	b.n	800a1a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7f9 f86a 	bl	8003114 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	699a      	ldr	r2, [r3, #24]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a056:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6999      	ldr	r1, [r3, #24]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a06c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6899      	ldr	r1, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4b4a      	ldr	r3, [pc, #296]	; (800a1b0 <HAL_LTDC_Init+0x19c>)
 800a088:	400b      	ands	r3, r1
 800a08a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	041b      	lsls	r3, r3, #16
 800a092:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6899      	ldr	r1, [r3, #8]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699a      	ldr	r2, [r3, #24]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68d9      	ldr	r1, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	4b3e      	ldr	r3, [pc, #248]	; (800a1b0 <HAL_LTDC_Init+0x19c>)
 800a0b6:	400b      	ands	r3, r1
 800a0b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	041b      	lsls	r3, r3, #16
 800a0c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68d9      	ldr	r1, [r3, #12]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1a      	ldr	r2, [r3, #32]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	431a      	orrs	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6919      	ldr	r1, [r3, #16]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b33      	ldr	r3, [pc, #204]	; (800a1b0 <HAL_LTDC_Init+0x19c>)
 800a0e4:	400b      	ands	r3, r1
 800a0e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6919      	ldr	r1, [r3, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6959      	ldr	r1, [r3, #20]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	4b27      	ldr	r3, [pc, #156]	; (800a1b0 <HAL_LTDC_Init+0x19c>)
 800a112:	400b      	ands	r3, r1
 800a114:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	041b      	lsls	r3, r3, #16
 800a11c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6959      	ldr	r1, [r3, #20]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	431a      	orrs	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a144:	041b      	lsls	r3, r3, #16
 800a146:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a16a:	431a      	orrs	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0206 	orr.w	r2, r2, #6
 800a182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	699a      	ldr	r2, [r3, #24]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	f000f800 	.word	0xf000f800

0800a1b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <HAL_LTDC_ConfigLayer+0x1a>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e02c      	b.n	800a228 <HAL_LTDC_ConfigLayer+0x74>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2134      	movs	r1, #52	; 0x34
 800a1e4:	fb01 f303 	mul.w	r3, r1, r3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	461d      	mov	r5, r3
 800a1f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f847 	bl	800a29c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2201      	movs	r2, #1
 800a214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bdb0      	pop	{r4, r5, r7, pc}

0800a230 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_LTDC_SetAddress+0x1a>
 800a246:	2302      	movs	r3, #2
 800a248:	e024      	b.n	800a294 <HAL_LTDC_SetAddress+0x64>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2234      	movs	r2, #52	; 0x34
 800a25e:	fb02 f303 	mul.w	r3, r2, r3
 800a262:	3338      	adds	r3, #56	; 0x38
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	4413      	add	r3, r2
 800a268:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	6979      	ldr	r1, [r7, #20]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f811 	bl	800a29c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2201      	movs	r2, #1
 800a280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b089      	sub	sp, #36	; 0x24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	0c1b      	lsrs	r3, r3, #16
 800a2b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2b8:	4413      	add	r3, r2
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	01db      	lsls	r3, r3, #7
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3384      	adds	r3, #132	; 0x84
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	01d2      	lsls	r2, r2, #7
 800a2d8:	440a      	add	r2, r1
 800a2da:	3284      	adds	r2, #132	; 0x84
 800a2dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a2e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2f2:	4413      	add	r3, r2
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	01db      	lsls	r3, r3, #7
 800a300:	440b      	add	r3, r1
 800a302:	3384      	adds	r3, #132	; 0x84
 800a304:	4619      	mov	r1, r3
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4313      	orrs	r3, r2
 800a30a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	68da      	ldr	r2, [r3, #12]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a31a:	4413      	add	r3, r2
 800a31c:	041b      	lsls	r3, r3, #16
 800a31e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	01db      	lsls	r3, r3, #7
 800a32a:	4413      	add	r3, r2
 800a32c:	3384      	adds	r3, #132	; 0x84
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	6812      	ldr	r2, [r2, #0]
 800a334:	4611      	mov	r1, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	01d2      	lsls	r2, r2, #7
 800a33a:	440a      	add	r2, r1
 800a33c:	3284      	adds	r2, #132	; 0x84
 800a33e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a342:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a352:	4413      	add	r3, r2
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4619      	mov	r1, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	01db      	lsls	r3, r3, #7
 800a360:	440b      	add	r3, r1
 800a362:	3384      	adds	r3, #132	; 0x84
 800a364:	4619      	mov	r1, r3
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4313      	orrs	r3, r2
 800a36a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	461a      	mov	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	01db      	lsls	r3, r3, #7
 800a376:	4413      	add	r3, r2
 800a378:	3384      	adds	r3, #132	; 0x84
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	4611      	mov	r1, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	01d2      	lsls	r2, r2, #7
 800a386:	440a      	add	r2, r1
 800a388:	3284      	adds	r2, #132	; 0x84
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	01db      	lsls	r3, r3, #7
 800a39a:	4413      	add	r3, r2
 800a39c:	3384      	adds	r3, #132	; 0x84
 800a39e:	461a      	mov	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	061b      	lsls	r3, r3, #24
 800a3c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	01db      	lsls	r3, r3, #7
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3384      	adds	r3, #132	; 0x84
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	01db      	lsls	r3, r3, #7
 800a3dc:	4413      	add	r3, r2
 800a3de:	3384      	adds	r3, #132	; 0x84
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	01db      	lsls	r3, r3, #7
 800a400:	440b      	add	r3, r1
 800a402:	3384      	adds	r3, #132	; 0x84
 800a404:	4619      	mov	r1, r3
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	4313      	orrs	r3, r2
 800a40a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	461a      	mov	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	01db      	lsls	r3, r3, #7
 800a416:	4413      	add	r3, r2
 800a418:	3384      	adds	r3, #132	; 0x84
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	4611      	mov	r1, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	01d2      	lsls	r2, r2, #7
 800a426:	440a      	add	r2, r1
 800a428:	3284      	adds	r2, #132	; 0x84
 800a42a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a42e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	01db      	lsls	r3, r3, #7
 800a43a:	4413      	add	r3, r2
 800a43c:	3384      	adds	r3, #132	; 0x84
 800a43e:	461a      	mov	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	01db      	lsls	r3, r3, #7
 800a450:	4413      	add	r3, r2
 800a452:	3384      	adds	r3, #132	; 0x84
 800a454:	69da      	ldr	r2, [r3, #28]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	01db      	lsls	r3, r3, #7
 800a460:	440b      	add	r3, r1
 800a462:	3384      	adds	r3, #132	; 0x84
 800a464:	4619      	mov	r1, r3
 800a466:	4b58      	ldr	r3, [pc, #352]	; (800a5c8 <LTDC_SetConfig+0x32c>)
 800a468:	4013      	ands	r3, r2
 800a46a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	69da      	ldr	r2, [r3, #28]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	68f9      	ldr	r1, [r7, #12]
 800a476:	6809      	ldr	r1, [r1, #0]
 800a478:	4608      	mov	r0, r1
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	01c9      	lsls	r1, r1, #7
 800a47e:	4401      	add	r1, r0
 800a480:	3184      	adds	r1, #132	; 0x84
 800a482:	4313      	orrs	r3, r2
 800a484:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	01db      	lsls	r3, r3, #7
 800a490:	4413      	add	r3, r2
 800a492:	3384      	adds	r3, #132	; 0x84
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	01db      	lsls	r3, r3, #7
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3384      	adds	r3, #132	; 0x84
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	01db      	lsls	r3, r3, #7
 800a4b4:	4413      	add	r3, r2
 800a4b6:	3384      	adds	r3, #132	; 0x84
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	e01b      	b.n	800a506 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d102      	bne.n	800a4dc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	61fb      	str	r3, [r7, #28]
 800a4da:	e014      	b.n	800a506 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d00b      	beq.n	800a4fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d007      	beq.n	800a4fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d003      	beq.n	800a4fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a4f8:	2b07      	cmp	r3, #7
 800a4fa:	d102      	bne.n	800a502 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	e001      	b.n	800a506 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a502:	2301      	movs	r3, #1
 800a504:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	01db      	lsls	r3, r3, #7
 800a510:	4413      	add	r3, r2
 800a512:	3384      	adds	r3, #132	; 0x84
 800a514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	4611      	mov	r1, r2
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	01d2      	lsls	r2, r2, #7
 800a520:	440a      	add	r2, r1
 800a522:	3284      	adds	r2, #132	; 0x84
 800a524:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	fb02 f303 	mul.w	r3, r2, r3
 800a534:	041a      	lsls	r2, r3, #16
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	6859      	ldr	r1, [r3, #4]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	1acb      	subs	r3, r1, r3
 800a540:	69f9      	ldr	r1, [r7, #28]
 800a542:	fb01 f303 	mul.w	r3, r1, r3
 800a546:	3303      	adds	r3, #3
 800a548:	68f9      	ldr	r1, [r7, #12]
 800a54a:	6809      	ldr	r1, [r1, #0]
 800a54c:	4608      	mov	r0, r1
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	01c9      	lsls	r1, r1, #7
 800a552:	4401      	add	r1, r0
 800a554:	3184      	adds	r1, #132	; 0x84
 800a556:	4313      	orrs	r3, r2
 800a558:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	01db      	lsls	r3, r3, #7
 800a564:	4413      	add	r3, r2
 800a566:	3384      	adds	r3, #132	; 0x84
 800a568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4619      	mov	r1, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	01db      	lsls	r3, r3, #7
 800a574:	440b      	add	r3, r1
 800a576:	3384      	adds	r3, #132	; 0x84
 800a578:	4619      	mov	r1, r3
 800a57a:	4b14      	ldr	r3, [pc, #80]	; (800a5cc <LTDC_SetConfig+0x330>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	01db      	lsls	r3, r3, #7
 800a58a:	4413      	add	r3, r2
 800a58c:	3384      	adds	r3, #132	; 0x84
 800a58e:	461a      	mov	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	01db      	lsls	r3, r3, #7
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3384      	adds	r3, #132	; 0x84
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	01d2      	lsls	r2, r2, #7
 800a5b0:	440a      	add	r2, r1
 800a5b2:	3284      	adds	r2, #132	; 0x84
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
 800a5b8:	6013      	str	r3, [r2, #0]
}
 800a5ba:	bf00      	nop
 800a5bc:	3724      	adds	r7, #36	; 0x24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	fffff8f8 	.word	0xfffff8f8
 800a5cc:	fffff800 	.word	0xfffff800

0800a5d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a04      	ldr	r2, [pc, #16]	; (800a5ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5de:	6013      	str	r3, [r2, #0]
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40007000 	.word	0x40007000

0800a5f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a5fa:	4b23      	ldr	r3, [pc, #140]	; (800a688 <HAL_PWREx_EnableOverDrive+0x98>)
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	4a22      	ldr	r2, [pc, #136]	; (800a688 <HAL_PWREx_EnableOverDrive+0x98>)
 800a600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a604:	6413      	str	r3, [r2, #64]	; 0x40
 800a606:	4b20      	ldr	r3, [pc, #128]	; (800a688 <HAL_PWREx_EnableOverDrive+0x98>)
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a61e:	f7fb fc1d 	bl	8005e5c <HAL_GetTick>
 800a622:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a624:	e009      	b.n	800a63a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a626:	f7fb fc19 	bl	8005e5c <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a634:	d901      	bls.n	800a63a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e022      	b.n	800a680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a63a:	4b14      	ldr	r3, [pc, #80]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a646:	d1ee      	bne.n	800a626 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a648:	4b10      	ldr	r3, [pc, #64]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a0f      	ldr	r2, [pc, #60]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a654:	f7fb fc02 	bl	8005e5c <HAL_GetTick>
 800a658:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a65a:	e009      	b.n	800a670 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a65c:	f7fb fbfe 	bl	8005e5c <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a66a:	d901      	bls.n	800a670 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e007      	b.n	800a680 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a67c:	d1ee      	bne.n	800a65c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	40023800 	.word	0x40023800
 800a68c:	40007000 	.word	0x40007000

0800a690 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af02      	add	r7, sp, #8
 800a696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a698:	f7fb fbe0 	bl	8005e5c <HAL_GetTick>
 800a69c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e067      	b.n	800a778 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10b      	bne.n	800a6cc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7f8 fde9 	bl	8003294 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a6c2:	f241 3188 	movw	r1, #5000	; 0x1388
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fda8 	bl	800b21c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	021a      	lsls	r2, r3, #8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2120      	movs	r1, #32
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fdd3 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d135      	bne.n	800a76e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <HAL_QSPI_Init+0xf0>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6852      	ldr	r2, [r2, #4]
 800a710:	0611      	lsls	r1, r2, #24
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	68d2      	ldr	r2, [r2, #12]
 800a716:	4311      	orrs	r1, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	69d2      	ldr	r2, [r2, #28]
 800a71c:	4311      	orrs	r1, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6a12      	ldr	r2, [r2, #32]
 800a722:	4311      	orrs	r1, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	430b      	orrs	r3, r1
 800a72a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	4b14      	ldr	r3, [pc, #80]	; (800a784 <HAL_QSPI_Init+0xf4>)
 800a734:	4013      	ands	r3, r2
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6912      	ldr	r2, [r2, #16]
 800a73a:	0411      	lsls	r1, r2, #16
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6952      	ldr	r2, [r2, #20]
 800a740:	4311      	orrs	r1, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6992      	ldr	r2, [r2, #24]
 800a746:	4311      	orrs	r1, r2
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	430b      	orrs	r3, r1
 800a74e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0201 	orr.w	r2, r2, #1
 800a75e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a776:	7afb      	ldrb	r3, [r7, #11]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	00ffff2f 	.word	0x00ffff2f
 800a784:	ffe0f8fe 	.word	0xffe0f8fe

0800a788 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d064      	beq.n	800a874 <HAL_QSPI_IRQHandler+0xec>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d05f      	beq.n	800a874 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3320      	adds	r3, #32
 800a7ba:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b12      	cmp	r3, #18
 800a7c6:	d125      	bne.n	800a814 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a7c8:	e01c      	b.n	800a804 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00f      	beq.n	800a7f2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	781a      	ldrb	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	1e5a      	subs	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7f0:	e008      	b.n	800a804 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a800:	601a      	str	r2, [r3, #0]
          break;
 800a802:	e033      	b.n	800a86c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f003 0304 	and.w	r3, r3, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1db      	bne.n	800a7ca <HAL_QSPI_IRQHandler+0x42>
 800a812:	e02b      	b.n	800a86c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b22      	cmp	r3, #34	; 0x22
 800a81e:	d125      	bne.n	800a86c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a820:	e01d      	b.n	800a85e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	2b00      	cmp	r3, #0
 800a828:	d010      	beq.n	800a84c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	639a      	str	r2, [r3, #56]	; 0x38
 800a84a:	e008      	b.n	800a85e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a85a:	601a      	str	r2, [r3, #0]
          break;
 800a85c:	e006      	b.n	800a86c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1da      	bne.n	800a822 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbed 	bl	800b04c <HAL_QSPI_FifoThresholdCallback>
 800a872:	e142      	b.n	800aafa <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80b6 	beq.w	800a9ec <HAL_QSPI_IRQHandler+0x264>
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80b0 	beq.w	800a9ec <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2202      	movs	r2, #2
 800a892:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a8a2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b12      	cmp	r3, #18
 800a8ae:	d123      	bne.n	800a8f8 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d011      	beq.n	800a8e2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 0204 	bic.w	r2, r2, #4
 800a8cc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fc3e 	bl	800b164 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fba1 	bl	800b038 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a8f6:	e0fd      	b.n	800aaf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b22      	cmp	r3, #34	; 0x22
 800a902:	d146      	bne.n	800a992 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d012      	beq.n	800a938 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0204 	bic.w	r2, r2, #4
 800a920:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0201 	bic.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	e021      	b.n	800a97c <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3320      	adds	r3, #32
 800a93e:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a940:	e013      	b.n	800a96a <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	2b00      	cmp	r3, #0
 800a948:	d017      	beq.n	800a97a <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	7812      	ldrb	r2, [r2, #0]
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	1e5a      	subs	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e4      	bne.n	800a942 <HAL_QSPI_IRQHandler+0x1ba>
 800a978:	e000      	b.n	800a97c <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800a97a:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fbf1 	bl	800b164 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fb4a 	bl	800b024 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a990:	e0b0      	b.n	800aaf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d107      	bne.n	800a9ae <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fb32 	bl	800b010 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9ac:	e0a2      	b.n	800aaf4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	f040 809c 	bne.w	800aaf4 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	695a      	ldr	r2, [r3, #20]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a9ca:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d103      	bne.n	800a9e4 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fb0d 	bl	800affc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9e2:	e087      	b.n	800aaf4 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 faff 	bl	800afe8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9ea:	e083      	b.n	800aaf4 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d01f      	beq.n	800aa36 <HAL_QSPI_IRQHandler+0x2ae>
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01a      	beq.n	800aa36 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2208      	movs	r2, #8
 800aa06:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00b      	beq.n	800aa2e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800aa24:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fb16 	bl	800b060 <HAL_QSPI_StatusMatchCallback>
 800aa34:	e061      	b.n	800aafa <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d047      	beq.n	800aad0 <HAL_QSPI_IRQHandler+0x348>
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d042      	beq.n	800aad0 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800aa60:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa66:	f043 0202 	orr.w	r2, r3, #2
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d021      	beq.n	800aac0 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0204 	bic.w	r2, r2, #4
 800aa8a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa90:	4a1c      	ldr	r2, [pc, #112]	; (800ab04 <HAL_QSPI_IRQHandler+0x37c>)
 800aa92:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fc f95d 	bl	8006d58 <HAL_DMA_Abort_IT>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d029      	beq.n	800aaf8 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa8:	f043 0204 	orr.w	r2, r3, #4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa95 	bl	800afe8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aabe:	e01b      	b.n	800aaf8 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fa8d 	bl	800afe8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aace:	e013      	b.n	800aaf8 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00f      	beq.n	800aafa <HAL_QSPI_IRQHandler+0x372>
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00a      	beq.n	800aafa <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2210      	movs	r2, #16
 800aaea:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fac1 	bl	800b074 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800aaf2:	e002      	b.n	800aafa <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aaf4:	bf00      	nop
 800aaf6:	e000      	b.n	800aafa <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aaf8:	bf00      	nop
}
 800aafa:	bf00      	nop
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	0800b239 	.word	0x0800b239

0800ab08 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ab14:	f7fb f9a2 	bl	8005e5c <HAL_GetTick>
 800ab18:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_QSPI_Command+0x22>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e048      	b.n	800abbc <HAL_QSPI_Command+0xb4>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d137      	bne.n	800abae <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2200      	movs	r2, #0
 800ab54:	2120      	movs	r1, #32
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 fba1 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d125      	bne.n	800abb2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ab66:	2200      	movs	r2, #0
 800ab68:	68b9      	ldr	r1, [r7, #8]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fbce 	bl	800b30c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d115      	bne.n	800aba4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	2102      	movs	r1, #2
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f000 fb8b 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10f      	bne.n	800abb2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2202      	movs	r2, #2
 800ab98:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aba2:	e006      	b.n	800abb2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abac:	e001      	b.n	800abb2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800abae:	2302      	movs	r3, #2
 800abb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800abba:	7dfb      	ldrb	r3, [r7, #23]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	; 0x28
 800abc8:	af02      	add	r7, sp, #8
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800abd4:	f7fb f942 	bl	8005e5c <HAL_GetTick>
 800abd8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3320      	adds	r3, #32
 800abe0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b01      	cmp	r3, #1
 800abec:	d101      	bne.n	800abf2 <HAL_QSPI_Transmit+0x2e>
 800abee:	2302      	movs	r3, #2
 800abf0:	e07b      	b.n	800acea <HAL_QSPI_Transmit+0x126>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d16a      	bne.n	800acdc <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d05b      	beq.n	800acca <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2212      	movs	r2, #18
 800ac16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695a      	ldr	r2, [r3, #20]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ac46:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800ac48:	e01b      	b.n	800ac82 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	2201      	movs	r2, #1
 800ac52:	2104      	movs	r1, #4
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fb22 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800ac5e:	7ffb      	ldrb	r3, [r7, #31]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d113      	bne.n	800ac8c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1df      	bne.n	800ac4a <HAL_QSPI_Transmit+0x86>
 800ac8a:	e000      	b.n	800ac8e <HAL_QSPI_Transmit+0xca>
          break;
 800ac8c:	bf00      	nop
      }

      if (status == HAL_OK)
 800ac8e:	7ffb      	ldrb	r3, [r7, #31]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d115      	bne.n	800acc0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	2102      	movs	r1, #2
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 fafd 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aca8:	7ffb      	ldrb	r3, [r7, #31]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d108      	bne.n	800acc0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2202      	movs	r2, #2
 800acb4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 f9e6 	bl	800b088 <HAL_QSPI_Abort>
 800acbc:	4603      	mov	r3, r0
 800acbe:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acc8:	e00a      	b.n	800ace0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acce:	f043 0208 	orr.w	r2, r3, #8
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	77fb      	strb	r3, [r7, #31]
 800acda:	e001      	b.n	800ace0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800acdc:	2302      	movs	r3, #2
 800acde:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ace8:	7ffb      	ldrb	r3, [r7, #31]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3720      	adds	r7, #32
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b08a      	sub	sp, #40	; 0x28
 800acf6:	af02      	add	r7, sp, #8
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ad02:	f7fb f8ab 	bl	8005e5c <HAL_GetTick>
 800ad06:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3320      	adds	r3, #32
 800ad16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d101      	bne.n	800ad28 <HAL_QSPI_Receive+0x36>
 800ad24:	2302      	movs	r3, #2
 800ad26:	e082      	b.n	800ae2e <HAL_QSPI_Receive+0x13c>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d171      	bne.n	800ae20 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d062      	beq.n	800ae0e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2222      	movs	r2, #34	; 0x22
 800ad4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ad80:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800ad8a:	e01c      	b.n	800adc6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	2201      	movs	r2, #1
 800ad94:	2106      	movs	r1, #6
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fa81 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800ada0:	7ffb      	ldrb	r3, [r7, #31]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d114      	bne.n	800add0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adaa:	693a      	ldr	r2, [r7, #16]
 800adac:	7812      	ldrb	r2, [r2, #0]
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc0:	1e5a      	subs	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1de      	bne.n	800ad8c <HAL_QSPI_Receive+0x9a>
 800adce:	e000      	b.n	800add2 <HAL_QSPI_Receive+0xe0>
          break;
 800add0:	bf00      	nop
      }

      if (status == HAL_OK)
 800add2:	7ffb      	ldrb	r3, [r7, #31]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d115      	bne.n	800ae04 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	2201      	movs	r2, #1
 800ade0:	2102      	movs	r1, #2
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fa5b 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800adec:	7ffb      	ldrb	r3, [r7, #31]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d108      	bne.n	800ae04 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2202      	movs	r2, #2
 800adf8:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 f944 	bl	800b088 <HAL_QSPI_Abort>
 800ae00:	4603      	mov	r3, r0
 800ae02:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae0c:	e00a      	b.n	800ae24 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	f043 0208 	orr.w	r2, r3, #8
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	77fb      	strb	r3, [r7, #31]
 800ae1e:	e001      	b.n	800ae24 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ae20:	2302      	movs	r3, #2
 800ae22:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ae2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b088      	sub	sp, #32
 800ae3a:	af02      	add	r7, sp, #8
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ae44:	f7fb f80a 	bl	8005e5c <HAL_GetTick>
 800ae48:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d101      	bne.n	800ae5a <HAL_QSPI_AutoPolling+0x24>
 800ae56:	2302      	movs	r3, #2
 800ae58:	e060      	b.n	800af1c <HAL_QSPI_AutoPolling+0xe6>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d14f      	bne.n	800af0e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2242      	movs	r2, #66	; 0x42
 800ae78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2200      	movs	r2, #0
 800ae84:	2120      	movs	r1, #32
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fa09 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d13d      	bne.n	800af12 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6852      	ldr	r2, [r2, #4]
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6892      	ldr	r2, [r2, #8]
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800aecc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aed6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 fa15 	bl	800b30c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2201      	movs	r2, #1
 800aeea:	2108      	movs	r1, #8
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 f9d6 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2208      	movs	r2, #8
 800af02:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af0c:	e001      	b.n	800af12 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800af0e:	2302      	movs	r3, #2
 800af10:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800af30:	f7fa ff94 	bl	8005e5c <HAL_GetTick>
 800af34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d101      	bne.n	800af46 <HAL_QSPI_MemoryMapped+0x22>
 800af42:	2302      	movs	r3, #2
 800af44:	e04c      	b.n	800afe0 <HAL_QSPI_MemoryMapped+0xbc>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d13b      	bne.n	800afd2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2282      	movs	r2, #130	; 0x82
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	2200      	movs	r2, #0
 800af72:	2120      	movs	r1, #32
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 f992 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d128      	bne.n	800afd6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f023 0108 	bic.w	r1, r3, #8
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b08      	cmp	r3, #8
 800afa0:	d110      	bne.n	800afc4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6812      	ldr	r2, [r2, #0]
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2210      	movs	r2, #16
 800afb2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800afc2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800afc4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 f99e 	bl	800b30c <QSPI_Config>
 800afd0:	e001      	b.n	800afd6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800afd2:	2302      	movs	r3, #2
 800afd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800afde:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b094:	f7fa fee2 	bl	8005e5c <HAL_GetTick>
 800b098:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d056      	beq.n	800b158 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d017      	beq.n	800b0f0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0204 	bic.w	r2, r2, #4
 800b0ce:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fb fdcf 	bl	8006c78 <HAL_DMA_Abort>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e8:	f043 0204 	orr.w	r2, r3, #4
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0202 	orr.w	r2, r2, #2
 800b0fe:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2201      	movs	r2, #1
 800b10a:	2102      	movs	r1, #2
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f8c6 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10e      	bne.n	800b13a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2202      	movs	r2, #2
 800b122:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2200      	movs	r2, #0
 800b12e:	2120      	movs	r1, #32
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8b4 	bl	800b29e <QSPI_WaitFlagStateUntilTimeout>
 800b136:	4603      	mov	r3, r0
 800b138:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695a      	ldr	r2, [r3, #20]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b14e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d046      	beq.n	800b20e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2208      	movs	r2, #8
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b19e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01b      	beq.n	800b1e6 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0204 	bic.w	r2, r2, #4
 800b1bc:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	4a15      	ldr	r2, [pc, #84]	; (800b218 <HAL_QSPI_Abort_IT+0xb4>)
 800b1c4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fb fdc4 	bl	8006d58 <HAL_DMA_Abort_IT>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01b      	beq.n	800b20e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff ff0c 	bl	800affc <HAL_QSPI_AbortCpltCallback>
 800b1e4:	e013      	b.n	800b20e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b1fc:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f042 0202 	orr.w	r2, r2, #2
 800b20c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	0800b239 	.word	0x0800b239

0800b21c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d114      	bne.n	800b288 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2202      	movs	r2, #2
 800b264:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b274:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f042 0202 	orr.w	r2, r2, #2
 800b284:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800b286:	e006      	b.n	800b296 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fea9 	bl	800afe8 <HAL_QSPI_ErrorCallback>
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	603b      	str	r3, [r7, #0]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2ae:	e01a      	b.n	800b2e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2b6:	d016      	beq.n	800b2e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b8:	f7fa fdd0 	bl	8005e5c <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	69ba      	ldr	r2, [r7, #24]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d302      	bcc.n	800b2ce <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2204      	movs	r2, #4
 800b2d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2da:	f043 0201 	orr.w	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e00e      	b.n	800b304 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bf14      	ite	ne
 800b2f4:	2301      	movne	r3, #1
 800b2f6:	2300      	moveq	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d1d6      	bne.n	800b2b0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <QSPI_Config+0x28>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b326:	d005      	beq.n	800b334 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3a01      	subs	r2, #1
 800b332:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 80b9 	beq.w	800b4b0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d05f      	beq.n	800b406 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	6892      	ldr	r2, [r2, #8]
 800b34e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d031      	beq.n	800b3bc <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b360:	431a      	orrs	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b366:	431a      	orrs	r2, r3
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	431a      	orrs	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	049b      	lsls	r3, r3, #18
 800b374:	431a      	orrs	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	431a      	orrs	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	431a      	orrs	r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	431a      	orrs	r2, r3
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	431a      	orrs	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	ea42 0103 	orr.w	r1, r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b3ac:	f000 812e 	beq.w	800b60c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	6852      	ldr	r2, [r2, #4]
 800b3b8:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b3ba:	e127      	b.n	800b60c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	049b      	lsls	r3, r3, #18
 800b3d8:	431a      	orrs	r2, r3
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	ea42 0103 	orr.w	r1, r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	430a      	orrs	r2, r1
 800b402:	615a      	str	r2, [r3, #20]
}
 800b404:	e102      	b.n	800b60c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d02e      	beq.n	800b46c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	431a      	orrs	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41c:	431a      	orrs	r2, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	431a      	orrs	r2, r3
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	049b      	lsls	r3, r3, #18
 800b42a:	431a      	orrs	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	431a      	orrs	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	431a      	orrs	r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	431a      	orrs	r2, r3
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	431a      	orrs	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	ea42 0103 	orr.w	r1, r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	430a      	orrs	r2, r1
 800b454:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b45c:	f000 80d6 	beq.w	800b60c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	6852      	ldr	r2, [r2, #4]
 800b468:	619a      	str	r2, [r3, #24]
}
 800b46a:	e0cf      	b.n	800b60c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b474:	431a      	orrs	r2, r3
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	431a      	orrs	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	431a      	orrs	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	049b      	lsls	r3, r3, #18
 800b488:	431a      	orrs	r2, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	431a      	orrs	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	431a      	orrs	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	431a      	orrs	r2, r3
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	ea42 0103 	orr.w	r1, r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	430a      	orrs	r2, r1
 800b4ac:	615a      	str	r2, [r3, #20]
}
 800b4ae:	e0ad      	b.n	800b60c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d058      	beq.n	800b56a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	6892      	ldr	r2, [r2, #8]
 800b4c0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d02d      	beq.n	800b526 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	049b      	lsls	r3, r3, #18
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	ea42 0103 	orr.w	r1, r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	430a      	orrs	r2, r1
 800b510:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b518:	d078      	beq.n	800b60c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	6852      	ldr	r2, [r2, #4]
 800b522:	619a      	str	r2, [r3, #24]
}
 800b524:	e072      	b.n	800b60c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52e:	431a      	orrs	r2, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b534:	431a      	orrs	r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	431a      	orrs	r2, r3
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	049b      	lsls	r3, r3, #18
 800b542:	431a      	orrs	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	431a      	orrs	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	431a      	orrs	r2, r3
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	431a      	orrs	r2, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	ea42 0103 	orr.w	r1, r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	430a      	orrs	r2, r1
 800b566:	615a      	str	r2, [r3, #20]
}
 800b568:	e050      	b.n	800b60c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d02a      	beq.n	800b5c8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	431a      	orrs	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b580:	431a      	orrs	r2, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	431a      	orrs	r2, r3
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	049b      	lsls	r3, r3, #18
 800b58e:	431a      	orrs	r2, r3
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	431a      	orrs	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	431a      	orrs	r2, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	ea42 0103 	orr.w	r1, r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b5ba:	d027      	beq.n	800b60c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	6852      	ldr	r2, [r2, #4]
 800b5c4:	619a      	str	r2, [r3, #24]
}
 800b5c6:	e021      	b.n	800b60c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01d      	beq.n	800b60c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	431a      	orrs	r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	049b      	lsls	r3, r3, #18
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	ea42 0103 	orr.w	r1, r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	430a      	orrs	r2, r1
 800b60a:	615a      	str	r2, [r3, #20]
}
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b620:	2300      	movs	r3, #0
 800b622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e291      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 8087 	beq.w	800b74a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b63c:	4b96      	ldr	r3, [pc, #600]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f003 030c 	and.w	r3, r3, #12
 800b644:	2b04      	cmp	r3, #4
 800b646:	d00c      	beq.n	800b662 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b648:	4b93      	ldr	r3, [pc, #588]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 030c 	and.w	r3, r3, #12
 800b650:	2b08      	cmp	r3, #8
 800b652:	d112      	bne.n	800b67a <HAL_RCC_OscConfig+0x62>
 800b654:	4b90      	ldr	r3, [pc, #576]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b65c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b660:	d10b      	bne.n	800b67a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b662:	4b8d      	ldr	r3, [pc, #564]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d06c      	beq.n	800b748 <HAL_RCC_OscConfig+0x130>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d168      	bne.n	800b748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e26b      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b682:	d106      	bne.n	800b692 <HAL_RCC_OscConfig+0x7a>
 800b684:	4b84      	ldr	r3, [pc, #528]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a83      	ldr	r2, [pc, #524]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b68a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e02e      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10c      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x9c>
 800b69a:	4b7f      	ldr	r3, [pc, #508]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a7e      	ldr	r2, [pc, #504]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	4b7c      	ldr	r3, [pc, #496]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a7b      	ldr	r2, [pc, #492]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e01d      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_RCC_OscConfig+0xc0>
 800b6be:	4b76      	ldr	r3, [pc, #472]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a75      	ldr	r2, [pc, #468]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	4b73      	ldr	r3, [pc, #460]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a72      	ldr	r2, [pc, #456]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	e00b      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b6d8:	4b6f      	ldr	r3, [pc, #444]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a6e      	ldr	r2, [pc, #440]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	4b6c      	ldr	r3, [pc, #432]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a6b      	ldr	r2, [pc, #428]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d013      	beq.n	800b720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f8:	f7fa fbb0 	bl	8005e5c <HAL_GetTick>
 800b6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6fe:	e008      	b.n	800b712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b700:	f7fa fbac 	bl	8005e5c <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b64      	cmp	r3, #100	; 0x64
 800b70c:	d901      	bls.n	800b712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e21f      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b712:	4b61      	ldr	r3, [pc, #388]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d0f0      	beq.n	800b700 <HAL_RCC_OscConfig+0xe8>
 800b71e:	e014      	b.n	800b74a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b720:	f7fa fb9c 	bl	8005e5c <HAL_GetTick>
 800b724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b726:	e008      	b.n	800b73a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b728:	f7fa fb98 	bl	8005e5c <HAL_GetTick>
 800b72c:	4602      	mov	r2, r0
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	2b64      	cmp	r3, #100	; 0x64
 800b734:	d901      	bls.n	800b73a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e20b      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b73a:	4b57      	ldr	r3, [pc, #348]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1f0      	bne.n	800b728 <HAL_RCC_OscConfig+0x110>
 800b746:	e000      	b.n	800b74a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d069      	beq.n	800b82a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b756:	4b50      	ldr	r3, [pc, #320]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f003 030c 	and.w	r3, r3, #12
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b762:	4b4d      	ldr	r3, [pc, #308]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f003 030c 	and.w	r3, r3, #12
 800b76a:	2b08      	cmp	r3, #8
 800b76c:	d11c      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x190>
 800b76e:	4b4a      	ldr	r3, [pc, #296]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d116      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b77a:	4b47      	ldr	r3, [pc, #284]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <HAL_RCC_OscConfig+0x17a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d001      	beq.n	800b792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e1df      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b792:	4b41      	ldr	r3, [pc, #260]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	493d      	ldr	r1, [pc, #244]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7a6:	e040      	b.n	800b82a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d023      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7b0:	4b39      	ldr	r3, [pc, #228]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a38      	ldr	r2, [pc, #224]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7bc:	f7fa fb4e 	bl	8005e5c <HAL_GetTick>
 800b7c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7c2:	e008      	b.n	800b7d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7c4:	f7fa fb4a 	bl	8005e5c <HAL_GetTick>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d901      	bls.n	800b7d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e1bd      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d6:	4b30      	ldr	r3, [pc, #192]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0f0      	beq.n	800b7c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7e2:	4b2d      	ldr	r3, [pc, #180]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4929      	ldr	r1, [pc, #164]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	600b      	str	r3, [r1, #0]
 800b7f6:	e018      	b.n	800b82a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7f8:	4b27      	ldr	r3, [pc, #156]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a26      	ldr	r2, [pc, #152]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b804:	f7fa fb2a 	bl	8005e5c <HAL_GetTick>
 800b808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b80a:	e008      	b.n	800b81e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b80c:	f7fa fb26 	bl	8005e5c <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	2b02      	cmp	r3, #2
 800b818:	d901      	bls.n	800b81e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e199      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b81e:	4b1e      	ldr	r3, [pc, #120]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1f0      	bne.n	800b80c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0308 	and.w	r3, r3, #8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d038      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d019      	beq.n	800b872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b83e:	4b16      	ldr	r3, [pc, #88]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b842:	4a15      	ldr	r2, [pc, #84]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b84a:	f7fa fb07 	bl	8005e5c <HAL_GetTick>
 800b84e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b850:	e008      	b.n	800b864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b852:	f7fa fb03 	bl	8005e5c <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e176      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0f0      	beq.n	800b852 <HAL_RCC_OscConfig+0x23a>
 800b870:	e01a      	b.n	800b8a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b876:	4a08      	ldr	r2, [pc, #32]	; (800b898 <HAL_RCC_OscConfig+0x280>)
 800b878:	f023 0301 	bic.w	r3, r3, #1
 800b87c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87e:	f7fa faed 	bl	8005e5c <HAL_GetTick>
 800b882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b884:	e00a      	b.n	800b89c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b886:	f7fa fae9 	bl	8005e5c <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d903      	bls.n	800b89c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e15c      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
 800b898:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b89c:	4b91      	ldr	r3, [pc, #580]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a0:	f003 0302 	and.w	r3, r3, #2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1ee      	bne.n	800b886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80a4 	beq.w	800b9fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8b6:	4b8b      	ldr	r3, [pc, #556]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8c2:	4b88      	ldr	r3, [pc, #544]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c6:	4a87      	ldr	r2, [pc, #540]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b8c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b8ce:	4b85      	ldr	r3, [pc, #532]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8d6:	60bb      	str	r3, [r7, #8]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8de:	4b82      	ldr	r3, [pc, #520]	; (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d118      	bne.n	800b91c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b8ea:	4b7f      	ldr	r3, [pc, #508]	; (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a7e      	ldr	r2, [pc, #504]	; (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8f6:	f7fa fab1 	bl	8005e5c <HAL_GetTick>
 800b8fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8fc:	e008      	b.n	800b910 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8fe:	f7fa faad 	bl	8005e5c <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b64      	cmp	r3, #100	; 0x64
 800b90a:	d901      	bls.n	800b910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e120      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b910:	4b75      	ldr	r3, [pc, #468]	; (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0f0      	beq.n	800b8fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d106      	bne.n	800b932 <HAL_RCC_OscConfig+0x31a>
 800b924:	4b6f      	ldr	r3, [pc, #444]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b928:	4a6e      	ldr	r2, [pc, #440]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	6713      	str	r3, [r2, #112]	; 0x70
 800b930:	e02d      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10c      	bne.n	800b954 <HAL_RCC_OscConfig+0x33c>
 800b93a:	4b6a      	ldr	r3, [pc, #424]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b93e:	4a69      	ldr	r2, [pc, #420]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	6713      	str	r3, [r2, #112]	; 0x70
 800b946:	4b67      	ldr	r3, [pc, #412]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94a:	4a66      	ldr	r2, [pc, #408]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b94c:	f023 0304 	bic.w	r3, r3, #4
 800b950:	6713      	str	r3, [r2, #112]	; 0x70
 800b952:	e01c      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	2b05      	cmp	r3, #5
 800b95a:	d10c      	bne.n	800b976 <HAL_RCC_OscConfig+0x35e>
 800b95c:	4b61      	ldr	r3, [pc, #388]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b960:	4a60      	ldr	r2, [pc, #384]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b962:	f043 0304 	orr.w	r3, r3, #4
 800b966:	6713      	str	r3, [r2, #112]	; 0x70
 800b968:	4b5e      	ldr	r3, [pc, #376]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96c:	4a5d      	ldr	r2, [pc, #372]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b96e:	f043 0301 	orr.w	r3, r3, #1
 800b972:	6713      	str	r3, [r2, #112]	; 0x70
 800b974:	e00b      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b976:	4b5b      	ldr	r3, [pc, #364]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97a:	4a5a      	ldr	r2, [pc, #360]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b97c:	f023 0301 	bic.w	r3, r3, #1
 800b980:	6713      	str	r3, [r2, #112]	; 0x70
 800b982:	4b58      	ldr	r3, [pc, #352]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b986:	4a57      	ldr	r2, [pc, #348]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b988:	f023 0304 	bic.w	r3, r3, #4
 800b98c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d015      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b996:	f7fa fa61 	bl	8005e5c <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b99c:	e00a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99e:	f7fa fa5d 	bl	8005e5c <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d901      	bls.n	800b9b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e0ce      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9b4:	4b4b      	ldr	r3, [pc, #300]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d0ee      	beq.n	800b99e <HAL_RCC_OscConfig+0x386>
 800b9c0:	e014      	b.n	800b9ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c2:	f7fa fa4b 	bl	8005e5c <HAL_GetTick>
 800b9c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9c8:	e00a      	b.n	800b9e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ca:	f7fa fa47 	bl	8005e5c <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d901      	bls.n	800b9e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e0b8      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9e0:	4b40      	ldr	r3, [pc, #256]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b9e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1ee      	bne.n	800b9ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d105      	bne.n	800b9fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9f2:	4b3c      	ldr	r3, [pc, #240]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	4a3b      	ldr	r2, [pc, #236]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800b9f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 80a4 	beq.w	800bb50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba08:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f003 030c 	and.w	r3, r3, #12
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d06b      	beq.n	800baec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d149      	bne.n	800bab0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba1c:	4b31      	ldr	r3, [pc, #196]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a30      	ldr	r2, [pc, #192]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba28:	f7fa fa18 	bl	8005e5c <HAL_GetTick>
 800ba2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba2e:	e008      	b.n	800ba42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba30:	f7fa fa14 	bl	8005e5c <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d901      	bls.n	800ba42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e087      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba42:	4b28      	ldr	r3, [pc, #160]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f0      	bne.n	800ba30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69da      	ldr	r2, [r3, #28]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5c:	019b      	lsls	r3, r3, #6
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	3b01      	subs	r3, #1
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba70:	061b      	lsls	r3, r3, #24
 800ba72:	4313      	orrs	r3, r2
 800ba74:	4a1b      	ldr	r2, [pc, #108]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba7c:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a18      	ldr	r2, [pc, #96]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800ba82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba88:	f7fa f9e8 	bl	8005e5c <HAL_GetTick>
 800ba8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba8e:	e008      	b.n	800baa2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba90:	f7fa f9e4 	bl	8005e5c <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e057      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baa2:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0f0      	beq.n	800ba90 <HAL_RCC_OscConfig+0x478>
 800baae:	e04f      	b.n	800bb50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bab0:	4b0c      	ldr	r3, [pc, #48]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a0b      	ldr	r2, [pc, #44]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800bab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800baba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800babc:	f7fa f9ce 	bl	8005e5c <HAL_GetTick>
 800bac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bac2:	e008      	b.n	800bad6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bac4:	f7fa f9ca 	bl	8005e5c <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d901      	bls.n	800bad6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e03d      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bad6:	4b03      	ldr	r3, [pc, #12]	; (800bae4 <HAL_RCC_OscConfig+0x4cc>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f0      	bne.n	800bac4 <HAL_RCC_OscConfig+0x4ac>
 800bae2:	e035      	b.n	800bb50 <HAL_RCC_OscConfig+0x538>
 800bae4:	40023800 	.word	0x40023800
 800bae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800baec:	4b1b      	ldr	r3, [pc, #108]	; (800bb5c <HAL_RCC_OscConfig+0x544>)
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d028      	beq.n	800bb4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d121      	bne.n	800bb4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d11a      	bne.n	800bb4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bb22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d111      	bne.n	800bb4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	085b      	lsrs	r3, r3, #1
 800bb34:	3b01      	subs	r3, #1
 800bb36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d107      	bne.n	800bb4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d001      	beq.n	800bb50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	40023800 	.word	0x40023800

0800bb60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0d0      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb78:	4b6a      	ldr	r3, [pc, #424]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d910      	bls.n	800bba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb86:	4b67      	ldr	r3, [pc, #412]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f023 020f 	bic.w	r2, r3, #15
 800bb8e:	4965      	ldr	r1, [pc, #404]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb96:	4b63      	ldr	r3, [pc, #396]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 030f 	and.w	r3, r3, #15
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d001      	beq.n	800bba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e0b8      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0302 	and.w	r3, r3, #2
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d020      	beq.n	800bbf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbc0:	4b59      	ldr	r3, [pc, #356]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	4a58      	ldr	r2, [pc, #352]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bbca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d005      	beq.n	800bbe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bbd8:	4b53      	ldr	r3, [pc, #332]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	4a52      	ldr	r2, [pc, #328]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bbe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbe4:	4b50      	ldr	r3, [pc, #320]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	494d      	ldr	r1, [pc, #308]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d040      	beq.n	800bc84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d107      	bne.n	800bc1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc0a:	4b47      	ldr	r3, [pc, #284]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d115      	bne.n	800bc42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e07f      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d107      	bne.n	800bc32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc22:	4b41      	ldr	r3, [pc, #260]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e073      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc32:	4b3d      	ldr	r3, [pc, #244]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e06b      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc42:	4b39      	ldr	r3, [pc, #228]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f023 0203 	bic.w	r2, r3, #3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	4936      	ldr	r1, [pc, #216]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc54:	f7fa f902 	bl	8005e5c <HAL_GetTick>
 800bc58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc5a:	e00a      	b.n	800bc72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc5c:	f7fa f8fe 	bl	8005e5c <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d901      	bls.n	800bc72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e053      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc72:	4b2d      	ldr	r3, [pc, #180]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	f003 020c 	and.w	r2, r3, #12
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d1eb      	bne.n	800bc5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc84:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 030f 	and.w	r3, r3, #15
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d210      	bcs.n	800bcb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc92:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f023 020f 	bic.w	r2, r3, #15
 800bc9a:	4922      	ldr	r1, [pc, #136]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bca2:	4b20      	ldr	r3, [pc, #128]	; (800bd24 <HAL_RCC_ClockConfig+0x1c4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d001      	beq.n	800bcb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e032      	b.n	800bd1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d008      	beq.n	800bcd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcc0:	4b19      	ldr	r3, [pc, #100]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	4916      	ldr	r1, [pc, #88]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0308 	and.w	r3, r3, #8
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d009      	beq.n	800bcf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bcde:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	490e      	ldr	r1, [pc, #56]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bcf2:	f000 f821 	bl	800bd38 <HAL_RCC_GetSysClockFreq>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <HAL_RCC_ClockConfig+0x1c8>)
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	091b      	lsrs	r3, r3, #4
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	490a      	ldr	r1, [pc, #40]	; (800bd2c <HAL_RCC_ClockConfig+0x1cc>)
 800bd04:	5ccb      	ldrb	r3, [r1, r3]
 800bd06:	fa22 f303 	lsr.w	r3, r2, r3
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <HAL_RCC_ClockConfig+0x1d0>)
 800bd0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bd0e:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <HAL_RCC_ClockConfig+0x1d4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f7 ff40 	bl	8003b98 <HAL_InitTick>

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	40023c00 	.word	0x40023c00
 800bd28:	40023800 	.word	0x40023800
 800bd2c:	08017184 	.word	0x08017184
 800bd30:	20000008 	.word	0x20000008
 800bd34:	20000024 	.word	0x20000024

0800bd38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd38:	b5b0      	push	{r4, r5, r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bd3e:	2100      	movs	r1, #0
 800bd40:	6079      	str	r1, [r7, #4]
 800bd42:	2100      	movs	r1, #0
 800bd44:	60f9      	str	r1, [r7, #12]
 800bd46:	2100      	movs	r1, #0
 800bd48:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd4e:	4952      	ldr	r1, [pc, #328]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd50:	6889      	ldr	r1, [r1, #8]
 800bd52:	f001 010c 	and.w	r1, r1, #12
 800bd56:	2908      	cmp	r1, #8
 800bd58:	d00d      	beq.n	800bd76 <HAL_RCC_GetSysClockFreq+0x3e>
 800bd5a:	2908      	cmp	r1, #8
 800bd5c:	f200 8094 	bhi.w	800be88 <HAL_RCC_GetSysClockFreq+0x150>
 800bd60:	2900      	cmp	r1, #0
 800bd62:	d002      	beq.n	800bd6a <HAL_RCC_GetSysClockFreq+0x32>
 800bd64:	2904      	cmp	r1, #4
 800bd66:	d003      	beq.n	800bd70 <HAL_RCC_GetSysClockFreq+0x38>
 800bd68:	e08e      	b.n	800be88 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd6a:	4b4c      	ldr	r3, [pc, #304]	; (800be9c <HAL_RCC_GetSysClockFreq+0x164>)
 800bd6c:	60bb      	str	r3, [r7, #8]
      break;
 800bd6e:	e08e      	b.n	800be8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd70:	4b4b      	ldr	r3, [pc, #300]	; (800bea0 <HAL_RCC_GetSysClockFreq+0x168>)
 800bd72:	60bb      	str	r3, [r7, #8]
      break;
 800bd74:	e08b      	b.n	800be8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd76:	4948      	ldr	r1, [pc, #288]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd78:	6849      	ldr	r1, [r1, #4]
 800bd7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800bd7e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bd80:	4945      	ldr	r1, [pc, #276]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd82:	6849      	ldr	r1, [r1, #4]
 800bd84:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	d024      	beq.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd8c:	4942      	ldr	r1, [pc, #264]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd8e:	6849      	ldr	r1, [r1, #4]
 800bd90:	0989      	lsrs	r1, r1, #6
 800bd92:	4608      	mov	r0, r1
 800bd94:	f04f 0100 	mov.w	r1, #0
 800bd98:	f240 14ff 	movw	r4, #511	; 0x1ff
 800bd9c:	f04f 0500 	mov.w	r5, #0
 800bda0:	ea00 0204 	and.w	r2, r0, r4
 800bda4:	ea01 0305 	and.w	r3, r1, r5
 800bda8:	493d      	ldr	r1, [pc, #244]	; (800bea0 <HAL_RCC_GetSysClockFreq+0x168>)
 800bdaa:	fb01 f003 	mul.w	r0, r1, r3
 800bdae:	2100      	movs	r1, #0
 800bdb0:	fb01 f102 	mul.w	r1, r1, r2
 800bdb4:	1844      	adds	r4, r0, r1
 800bdb6:	493a      	ldr	r1, [pc, #232]	; (800bea0 <HAL_RCC_GetSysClockFreq+0x168>)
 800bdb8:	fba2 0101 	umull	r0, r1, r2, r1
 800bdbc:	1863      	adds	r3, r4, r1
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f04f 0300 	mov.w	r3, #0
 800bdc8:	f7f4 ff0e 	bl	8000be8 <__aeabi_uldivmod>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e04a      	b.n	800be6c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bdd6:	4b30      	ldr	r3, [pc, #192]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	099b      	lsrs	r3, r3, #6
 800bddc:	461a      	mov	r2, r3
 800bdde:	f04f 0300 	mov.w	r3, #0
 800bde2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bde6:	f04f 0100 	mov.w	r1, #0
 800bdea:	ea02 0400 	and.w	r4, r2, r0
 800bdee:	ea03 0501 	and.w	r5, r3, r1
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f04f 0200 	mov.w	r2, #0
 800bdfa:	f04f 0300 	mov.w	r3, #0
 800bdfe:	014b      	lsls	r3, r1, #5
 800be00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800be04:	0142      	lsls	r2, r0, #5
 800be06:	4610      	mov	r0, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	1b00      	subs	r0, r0, r4
 800be0c:	eb61 0105 	sbc.w	r1, r1, r5
 800be10:	f04f 0200 	mov.w	r2, #0
 800be14:	f04f 0300 	mov.w	r3, #0
 800be18:	018b      	lsls	r3, r1, #6
 800be1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800be1e:	0182      	lsls	r2, r0, #6
 800be20:	1a12      	subs	r2, r2, r0
 800be22:	eb63 0301 	sbc.w	r3, r3, r1
 800be26:	f04f 0000 	mov.w	r0, #0
 800be2a:	f04f 0100 	mov.w	r1, #0
 800be2e:	00d9      	lsls	r1, r3, #3
 800be30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be34:	00d0      	lsls	r0, r2, #3
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	1912      	adds	r2, r2, r4
 800be3c:	eb45 0303 	adc.w	r3, r5, r3
 800be40:	f04f 0000 	mov.w	r0, #0
 800be44:	f04f 0100 	mov.w	r1, #0
 800be48:	0299      	lsls	r1, r3, #10
 800be4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800be4e:	0290      	lsls	r0, r2, #10
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4610      	mov	r0, r2
 800be56:	4619      	mov	r1, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f04f 0300 	mov.w	r3, #0
 800be60:	f7f4 fec2 	bl	8000be8 <__aeabi_uldivmod>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4613      	mov	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <HAL_RCC_GetSysClockFreq+0x160>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	0c1b      	lsrs	r3, r3, #16
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	3301      	adds	r3, #1
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	fbb2 f3f3 	udiv	r3, r2, r3
 800be84:	60bb      	str	r3, [r7, #8]
      break;
 800be86:	e002      	b.n	800be8e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800be88:	4b04      	ldr	r3, [pc, #16]	; (800be9c <HAL_RCC_GetSysClockFreq+0x164>)
 800be8a:	60bb      	str	r3, [r7, #8]
      break;
 800be8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800be8e:	68bb      	ldr	r3, [r7, #8]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bdb0      	pop	{r4, r5, r7, pc}
 800be98:	40023800 	.word	0x40023800
 800be9c:	00f42400 	.word	0x00f42400
 800bea0:	017d7840 	.word	0x017d7840

0800bea4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bea4:	b480      	push	{r7}
 800bea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bea8:	4b03      	ldr	r3, [pc, #12]	; (800beb8 <HAL_RCC_GetHCLKFreq+0x14>)
 800beaa:	681b      	ldr	r3, [r3, #0]
}
 800beac:	4618      	mov	r0, r3
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	20000008 	.word	0x20000008

0800bebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bec0:	f7ff fff0 	bl	800bea4 <HAL_RCC_GetHCLKFreq>
 800bec4:	4602      	mov	r2, r0
 800bec6:	4b05      	ldr	r3, [pc, #20]	; (800bedc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	0a9b      	lsrs	r3, r3, #10
 800becc:	f003 0307 	and.w	r3, r3, #7
 800bed0:	4903      	ldr	r1, [pc, #12]	; (800bee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bed2:	5ccb      	ldrb	r3, [r1, r3]
 800bed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bed8:	4618      	mov	r0, r3
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	40023800 	.word	0x40023800
 800bee0:	08017194 	.word	0x08017194

0800bee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bee8:	f7ff ffdc 	bl	800bea4 <HAL_RCC_GetHCLKFreq>
 800beec:	4602      	mov	r2, r0
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	0b5b      	lsrs	r3, r3, #13
 800bef4:	f003 0307 	and.w	r3, r3, #7
 800bef8:	4903      	ldr	r1, [pc, #12]	; (800bf08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800befa:	5ccb      	ldrb	r3, [r1, r3]
 800befc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	40023800 	.word	0x40023800
 800bf08:	08017194 	.word	0x08017194

0800bf0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	220f      	movs	r2, #15
 800bf1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bf1c:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <HAL_RCC_GetClockConfig+0x5c>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f003 0203 	and.w	r2, r3, #3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bf28:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <HAL_RCC_GetClockConfig+0x5c>)
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bf34:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <HAL_RCC_GetClockConfig+0x5c>)
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <HAL_RCC_GetClockConfig+0x5c>)
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	08db      	lsrs	r3, r3, #3
 800bf46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bf4e:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <HAL_RCC_GetClockConfig+0x60>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 020f 	and.w	r2, r3, #15
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	601a      	str	r2, [r3, #0]
}
 800bf5a:	bf00      	nop
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	40023800 	.word	0x40023800
 800bf6c:	40023c00 	.word	0x40023c00

0800bf70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d012      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bf98:	4b69      	ldr	r3, [pc, #420]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	4a68      	ldr	r2, [pc, #416]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bfa2:	6093      	str	r3, [r2, #8]
 800bfa4:	4b66      	ldr	r3, [pc, #408]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfac:	4964      	ldr	r1, [pc, #400]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d017      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bfca:	4b5d      	ldr	r3, [pc, #372]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd8:	4959      	ldr	r1, [pc, #356]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfe8:	d101      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bfea:	2301      	movs	r3, #1
 800bfec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bff6:	2301      	movs	r3, #1
 800bff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d017      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c006:	4b4e      	ldr	r3, [pc, #312]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c014:	494a      	ldr	r1, [pc, #296]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c016:	4313      	orrs	r3, r2
 800c018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c024:	d101      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c026:	2301      	movs	r3, #1
 800c028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d101      	bne.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c032:	2301      	movs	r3, #1
 800c034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c042:	2301      	movs	r3, #1
 800c044:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0320 	and.w	r3, r3, #32
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 808b 	beq.w	800c16a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c054:	4b3a      	ldr	r3, [pc, #232]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c058:	4a39      	ldr	r2, [pc, #228]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c05a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c05e:	6413      	str	r3, [r2, #64]	; 0x40
 800c060:	4b37      	ldr	r3, [pc, #220]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c068:	60bb      	str	r3, [r7, #8]
 800c06a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c06c:	4b35      	ldr	r3, [pc, #212]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a34      	ldr	r2, [pc, #208]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c078:	f7f9 fef0 	bl	8005e5c <HAL_GetTick>
 800c07c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c07e:	e008      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c080:	f7f9 feec 	bl	8005e5c <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	2b64      	cmp	r3, #100	; 0x64
 800c08c:	d901      	bls.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e357      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c092:	4b2c      	ldr	r3, [pc, #176]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0f0      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c09e:	4b28      	ldr	r3, [pc, #160]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d035      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d02e      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0bc:	4b20      	ldr	r3, [pc, #128]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c0c6:	4b1e      	ldr	r3, [pc, #120]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ca:	4a1d      	ldr	r2, [pc, #116]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c0d2:	4b1b      	ldr	r3, [pc, #108]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d6:	4a1a      	ldr	r2, [pc, #104]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c0de:	4a18      	ldr	r2, [pc, #96]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c0e4:	4b16      	ldr	r3, [pc, #88]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d114      	bne.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0f0:	f7f9 feb4 	bl	8005e5c <HAL_GetTick>
 800c0f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0f6:	e00a      	b.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0f8:	f7f9 feb0 	bl	8005e5c <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	f241 3288 	movw	r2, #5000	; 0x1388
 800c106:	4293      	cmp	r3, r2
 800c108:	d901      	bls.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e319      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c10e:	4b0c      	ldr	r3, [pc, #48]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0ee      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c126:	d111      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c128:	4b05      	ldr	r3, [pc, #20]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c134:	4b04      	ldr	r3, [pc, #16]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c136:	400b      	ands	r3, r1
 800c138:	4901      	ldr	r1, [pc, #4]	; (800c140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	608b      	str	r3, [r1, #8]
 800c13e:	e00b      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c140:	40023800 	.word	0x40023800
 800c144:	40007000 	.word	0x40007000
 800c148:	0ffffcff 	.word	0x0ffffcff
 800c14c:	4bb1      	ldr	r3, [pc, #708]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	4ab0      	ldr	r2, [pc, #704]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c152:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c156:	6093      	str	r3, [r2, #8]
 800c158:	4bae      	ldr	r3, [pc, #696]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c15a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c164:	49ab      	ldr	r1, [pc, #684]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c166:	4313      	orrs	r3, r2
 800c168:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0310 	and.w	r3, r3, #16
 800c172:	2b00      	cmp	r3, #0
 800c174:	d010      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c176:	4ba7      	ldr	r3, [pc, #668]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c17c:	4aa5      	ldr	r2, [pc, #660]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c17e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c186:	4ba3      	ldr	r3, [pc, #652]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c188:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c190:	49a0      	ldr	r1, [pc, #640]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c192:	4313      	orrs	r3, r2
 800c194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00a      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c1a4:	4b9b      	ldr	r3, [pc, #620]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b2:	4998      	ldr	r1, [pc, #608]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00a      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c1c6:	4b93      	ldr	r3, [pc, #588]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1d4:	498f      	ldr	r1, [pc, #572]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00a      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c1e8:	4b8a      	ldr	r3, [pc, #552]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f6:	4987      	ldr	r1, [pc, #540]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c20a:	4b82      	ldr	r3, [pc, #520]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c218:	497e      	ldr	r1, [pc, #504]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c21a:	4313      	orrs	r3, r2
 800c21c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c22c:	4b79      	ldr	r3, [pc, #484]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c232:	f023 0203 	bic.w	r2, r3, #3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23a:	4976      	ldr	r1, [pc, #472]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c23c:	4313      	orrs	r3, r2
 800c23e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c24e:	4b71      	ldr	r3, [pc, #452]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c254:	f023 020c 	bic.w	r2, r3, #12
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c25c:	496d      	ldr	r1, [pc, #436]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00a      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c270:	4b68      	ldr	r3, [pc, #416]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c276:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27e:	4965      	ldr	r1, [pc, #404]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c280:	4313      	orrs	r3, r2
 800c282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00a      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c292:	4b60      	ldr	r3, [pc, #384]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c298:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a0:	495c      	ldr	r1, [pc, #368]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c2b4:	4b57      	ldr	r3, [pc, #348]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c2:	4954      	ldr	r1, [pc, #336]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c2d6:	4b4f      	ldr	r3, [pc, #316]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e4:	494b      	ldr	r1, [pc, #300]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c2f8:	4b46      	ldr	r3, [pc, #280]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c306:	4943      	ldr	r1, [pc, #268]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c31a:	4b3e      	ldr	r3, [pc, #248]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c320:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c328:	493a      	ldr	r1, [pc, #232]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c32a:	4313      	orrs	r3, r2
 800c32c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c33c:	4b35      	ldr	r3, [pc, #212]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c342:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c34a:	4932      	ldr	r1, [pc, #200]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d011      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c35e:	4b2d      	ldr	r3, [pc, #180]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c364:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c36c:	4929      	ldr	r1, [pc, #164]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c37c:	d101      	bne.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c37e:	2301      	movs	r3, #1
 800c380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0308 	and.w	r3, r3, #8
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c38e:	2301      	movs	r3, #1
 800c390:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00a      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c39e:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ac:	4919      	ldr	r1, [pc, #100]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00b      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c3c0:	4b14      	ldr	r3, [pc, #80]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3d0:	4910      	ldr	r1, [pc, #64]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d006      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 80d9 	beq.w	800c59e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a08      	ldr	r2, [pc, #32]	; (800c414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c3f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3f8:	f7f9 fd30 	bl	8005e5c <HAL_GetTick>
 800c3fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3fe:	e00b      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c400:	f7f9 fd2c 	bl	8005e5c <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	2b64      	cmp	r3, #100	; 0x64
 800c40c:	d904      	bls.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e197      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c412:	bf00      	nop
 800c414:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c418:	4b6c      	ldr	r3, [pc, #432]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1ed      	bne.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d021      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c434:	2b00      	cmp	r3, #0
 800c436:	d11d      	bne.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c438:	4b64      	ldr	r3, [pc, #400]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c43a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c43e:	0c1b      	lsrs	r3, r3, #16
 800c440:	f003 0303 	and.w	r3, r3, #3
 800c444:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c446:	4b61      	ldr	r3, [pc, #388]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44c:	0e1b      	lsrs	r3, r3, #24
 800c44e:	f003 030f 	and.w	r3, r3, #15
 800c452:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	019a      	lsls	r2, r3, #6
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	041b      	lsls	r3, r3, #16
 800c45e:	431a      	orrs	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	061b      	lsls	r3, r3, #24
 800c464:	431a      	orrs	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	071b      	lsls	r3, r3, #28
 800c46c:	4957      	ldr	r1, [pc, #348]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d004      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c488:	d00a      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c492:	2b00      	cmp	r3, #0
 800c494:	d02e      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49e:	d129      	bne.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c4a0:	4b4a      	ldr	r3, [pc, #296]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4a6:	0c1b      	lsrs	r3, r3, #16
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c4ae:	4b47      	ldr	r3, [pc, #284]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4b4:	0f1b      	lsrs	r3, r3, #28
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	019a      	lsls	r2, r3, #6
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	041b      	lsls	r3, r3, #16
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	061b      	lsls	r3, r3, #24
 800c4ce:	431a      	orrs	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	071b      	lsls	r3, r3, #28
 800c4d4:	493d      	ldr	r1, [pc, #244]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c4dc:	4b3b      	ldr	r3, [pc, #236]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4e2:	f023 021f 	bic.w	r2, r3, #31
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4937      	ldr	r1, [pc, #220]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01d      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c500:	4b32      	ldr	r3, [pc, #200]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c506:	0e1b      	lsrs	r3, r3, #24
 800c508:	f003 030f 	and.w	r3, r3, #15
 800c50c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c50e:	4b2f      	ldr	r3, [pc, #188]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c514:	0f1b      	lsrs	r3, r3, #28
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	019a      	lsls	r2, r3, #6
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	431a      	orrs	r2, r3
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	061b      	lsls	r3, r3, #24
 800c52e:	431a      	orrs	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	071b      	lsls	r3, r3, #28
 800c534:	4925      	ldr	r1, [pc, #148]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c536:	4313      	orrs	r3, r2
 800c538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d011      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	019a      	lsls	r2, r3, #6
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	041b      	lsls	r3, r3, #16
 800c554:	431a      	orrs	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	061b      	lsls	r3, r3, #24
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	071b      	lsls	r3, r3, #28
 800c564:	4919      	ldr	r1, [pc, #100]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c566:	4313      	orrs	r3, r2
 800c568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c56c:	4b17      	ldr	r3, [pc, #92]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a16      	ldr	r2, [pc, #88]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c578:	f7f9 fc70 	bl	8005e5c <HAL_GetTick>
 800c57c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c57e:	e008      	b.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c580:	f7f9 fc6c 	bl	8005e5c <HAL_GetTick>
 800c584:	4602      	mov	r2, r0
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	2b64      	cmp	r3, #100	; 0x64
 800c58c:	d901      	bls.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c58e:	2303      	movs	r3, #3
 800c590:	e0d7      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c592:	4b0e      	ldr	r3, [pc, #56]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d0f0      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	f040 80cd 	bne.w	800c740 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c5a6:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a08      	ldr	r2, [pc, #32]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c5ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5b2:	f7f9 fc53 	bl	8005e5c <HAL_GetTick>
 800c5b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c5b8:	e00a      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c5ba:	f7f9 fc4f 	bl	8005e5c <HAL_GetTick>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	2b64      	cmp	r3, #100	; 0x64
 800c5c6:	d903      	bls.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e0ba      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c5cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c5d0:	4b5e      	ldr	r3, [pc, #376]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5dc:	d0ed      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d009      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d02e      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	d12a      	bne.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c606:	4b51      	ldr	r3, [pc, #324]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60c:	0c1b      	lsrs	r3, r3, #16
 800c60e:	f003 0303 	and.w	r3, r3, #3
 800c612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c614:	4b4d      	ldr	r3, [pc, #308]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c61a:	0f1b      	lsrs	r3, r3, #28
 800c61c:	f003 0307 	and.w	r3, r3, #7
 800c620:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	019a      	lsls	r2, r3, #6
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	041b      	lsls	r3, r3, #16
 800c62c:	431a      	orrs	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	061b      	lsls	r3, r3, #24
 800c634:	431a      	orrs	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	071b      	lsls	r3, r3, #28
 800c63a:	4944      	ldr	r1, [pc, #272]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c642:	4b42      	ldr	r3, [pc, #264]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c648:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c650:	3b01      	subs	r3, #1
 800c652:	021b      	lsls	r3, r3, #8
 800c654:	493d      	ldr	r1, [pc, #244]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c656:	4313      	orrs	r3, r2
 800c658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d022      	beq.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c66c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c670:	d11d      	bne.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c672:	4b36      	ldr	r3, [pc, #216]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c678:	0e1b      	lsrs	r3, r3, #24
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c680:	4b32      	ldr	r3, [pc, #200]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c686:	0f1b      	lsrs	r3, r3, #28
 800c688:	f003 0307 	and.w	r3, r3, #7
 800c68c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	019a      	lsls	r2, r3, #6
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a1b      	ldr	r3, [r3, #32]
 800c698:	041b      	lsls	r3, r3, #16
 800c69a:	431a      	orrs	r2, r3
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	061b      	lsls	r3, r3, #24
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	071b      	lsls	r3, r3, #28
 800c6a6:	4929      	ldr	r1, [pc, #164]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 0308 	and.w	r3, r3, #8
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d028      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6c0:	0e1b      	lsrs	r3, r3, #24
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c6c8:	4b20      	ldr	r3, [pc, #128]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ce:	0c1b      	lsrs	r3, r3, #16
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	019a      	lsls	r2, r3, #6
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	041b      	lsls	r3, r3, #16
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	061b      	lsls	r3, r3, #24
 800c6e6:	431a      	orrs	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	071b      	lsls	r3, r3, #28
 800c6ee:	4917      	ldr	r1, [pc, #92]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	4911      	ldr	r1, [pc, #68]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c706:	4313      	orrs	r3, r2
 800c708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c70c:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a0e      	ldr	r2, [pc, #56]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c718:	f7f9 fba0 	bl	8005e5c <HAL_GetTick>
 800c71c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c71e:	e008      	b.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c720:	f7f9 fb9c 	bl	8005e5c <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	2b64      	cmp	r3, #100	; 0x64
 800c72c:	d901      	bls.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e007      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c732:	4b06      	ldr	r3, [pc, #24]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c73a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73e:	d1ef      	bne.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3720      	adds	r7, #32
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40023800 	.word	0x40023800

0800c750 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c76e:	f040 808c 	bne.w	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c772:	4b95      	ldr	r3, [pc, #596]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c778:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c780:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c788:	d07c      	beq.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c790:	d87d      	bhi.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79e:	d039      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c7a0:	e075      	b.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c7a2:	4b89      	ldr	r3, [pc, #548]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d108      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7ae:	4b86      	ldr	r3, [pc, #536]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7b6:	4a85      	ldr	r2, [pc, #532]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7bc:	613b      	str	r3, [r7, #16]
 800c7be:	e007      	b.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c7c0:	4b81      	ldr	r3, [pc, #516]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7c8:	4a81      	ldr	r2, [pc, #516]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c7d0:	4b7d      	ldr	r3, [pc, #500]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d6:	0e1b      	lsrs	r3, r3, #24
 800c7d8:	f003 030f 	and.w	r3, r3, #15
 800c7dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c7de:	4b7a      	ldr	r3, [pc, #488]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e4:	099b      	lsrs	r3, r3, #6
 800c7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	fb02 f203 	mul.w	r2, r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c7f8:	4b73      	ldr	r3, [pc, #460]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	f003 031f 	and.w	r3, r3, #31
 800c804:	3301      	adds	r3, #1
 800c806:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c810:	617b      	str	r3, [r7, #20]
        break;
 800c812:	e03d      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c814:	4b6c      	ldr	r3, [pc, #432]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d108      	bne.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c820:	4b69      	ldr	r3, [pc, #420]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c828:	4a68      	ldr	r2, [pc, #416]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82e:	613b      	str	r3, [r7, #16]
 800c830:	e007      	b.n	800c842 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c832:	4b65      	ldr	r3, [pc, #404]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c83a:	4a65      	ldr	r2, [pc, #404]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c840:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c842:	4b61      	ldr	r3, [pc, #388]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c848:	0e1b      	lsrs	r3, r3, #24
 800c84a:	f003 030f 	and.w	r3, r3, #15
 800c84e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c850:	4b5d      	ldr	r3, [pc, #372]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c856:	099b      	lsrs	r3, r3, #6
 800c858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	fb02 f203 	mul.w	r2, r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	fbb2 f3f3 	udiv	r3, r2, r3
 800c868:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c86a:	4b57      	ldr	r3, [pc, #348]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c870:	f003 031f 	and.w	r3, r3, #31
 800c874:	3301      	adds	r3, #1
 800c876:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c880:	617b      	str	r3, [r7, #20]
        break;
 800c882:	e005      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c884:	4b53      	ldr	r3, [pc, #332]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c886:	617b      	str	r3, [r7, #20]
        break;
 800c888:	e002      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800c88a:	bf00      	nop
 800c88c:	e000      	b.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800c88e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c896:	f040 808c 	bne.w	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c89a:	4b4b      	ldr	r3, [pc, #300]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8a0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c8a8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8b0:	d07c      	beq.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c8b8:	d87d      	bhi.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8c6:	d039      	beq.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c8c8:	e075      	b.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c8ca:	4b3f      	ldr	r3, [pc, #252]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d108      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c8d6:	4b3c      	ldr	r3, [pc, #240]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8de:	4a3b      	ldr	r2, [pc, #236]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8e4:	613b      	str	r3, [r7, #16]
 800c8e6:	e007      	b.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c8e8:	4b37      	ldr	r3, [pc, #220]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f0:	4a37      	ldr	r2, [pc, #220]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c8f8:	4b33      	ldr	r3, [pc, #204]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fe:	0e1b      	lsrs	r3, r3, #24
 800c900:	f003 030f 	and.w	r3, r3, #15
 800c904:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c906:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c90c:	099b      	lsrs	r3, r3, #6
 800c90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	fb02 f203 	mul.w	r2, r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c91e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c920:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	f003 031f 	and.w	r3, r3, #31
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	fbb2 f3f3 	udiv	r3, r2, r3
 800c938:	617b      	str	r3, [r7, #20]
        break;
 800c93a:	e03d      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c93c:	4b22      	ldr	r3, [pc, #136]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d108      	bne.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c948:	4b1f      	ldr	r3, [pc, #124]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c950:	4a1e      	ldr	r2, [pc, #120]	; (800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c952:	fbb2 f3f3 	udiv	r3, r2, r3
 800c956:	613b      	str	r3, [r7, #16]
 800c958:	e007      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c962:	4a1b      	ldr	r2, [pc, #108]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c964:	fbb2 f3f3 	udiv	r3, r2, r3
 800c968:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c96a:	4b17      	ldr	r3, [pc, #92]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c970:	0e1b      	lsrs	r3, r3, #24
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c97e:	099b      	lsrs	r3, r3, #6
 800c980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	fb02 f203 	mul.w	r2, r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c990:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a8:	617b      	str	r3, [r7, #20]
        break;
 800c9aa:	e005      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c9ae:	617b      	str	r3, [r7, #20]
        break;
 800c9b0:	e002      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c9b2:	bf00      	nop
 800c9b4:	e000      	b.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c9b6:	bf00      	nop

  return frequency;
 800c9b8:	697b      	ldr	r3, [r7, #20]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	371c      	adds	r7, #28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	40023800 	.word	0x40023800
 800c9cc:	00f42400 	.word	0x00f42400
 800c9d0:	017d7840 	.word	0x017d7840
 800c9d4:	00bb8000 	.word	0x00bb8000

0800c9d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e081      	b.n	800caee <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7f5b      	ldrb	r3, [r3, #29]
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d105      	bne.n	800ca00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7f6 fce2 	bl	80033c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2202      	movs	r2, #2
 800ca04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	22ca      	movs	r2, #202	; 0xca
 800ca0c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2253      	movs	r2, #83	; 0x53
 800ca14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fb16 	bl	800d048 <RTC_EnterInitMode>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d008      	beq.n	800ca34 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	22ff      	movs	r2, #255	; 0xff
 800ca28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2204      	movs	r2, #4
 800ca2e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e05c      	b.n	800caee <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6899      	ldr	r1, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	4b2e      	ldr	r3, [pc, #184]	; (800caf8 <HAL_RTC_Init+0x120>)
 800ca40:	400b      	ands	r3, r1
 800ca42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6899      	ldr	r1, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	431a      	orrs	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	695b      	ldr	r3, [r3, #20]
 800ca58:	431a      	orrs	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	68d2      	ldr	r2, [r2, #12]
 800ca6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6919      	ldr	r1, [r3, #16]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	041a      	lsls	r2, r3, #16
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68da      	ldr	r2, [r3, #12]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca8e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10e      	bne.n	800cabc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 faaa 	bl	800cff8 <HAL_RTC_WaitForSynchro>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d008      	beq.n	800cabc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	22ff      	movs	r2, #255	; 0xff
 800cab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2204      	movs	r2, #4
 800cab6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e018      	b.n	800caee <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0208 	bic.w	r2, r2, #8
 800caca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	699a      	ldr	r2, [r3, #24]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	22ff      	movs	r2, #255	; 0xff
 800cae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800caec:	2300      	movs	r3, #0
  }
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	ff8fffbf 	.word	0xff8fffbf

0800cafc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cafc:	b590      	push	{r4, r7, lr}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	7f1b      	ldrb	r3, [r3, #28]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d101      	bne.n	800cb18 <HAL_RTC_SetTime+0x1c>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e0a8      	b.n	800cc6a <HAL_RTC_SetTime+0x16e>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2202      	movs	r2, #2
 800cb22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d126      	bne.n	800cb78 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 faac 	bl	800d0a0 <RTC_ByteToBcd2>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	785b      	ldrb	r3, [r3, #1]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 faa5 	bl	800d0a0 <RTC_ByteToBcd2>
 800cb56:	4603      	mov	r3, r0
 800cb58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cb5a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	789b      	ldrb	r3, [r3, #2]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 fa9d 	bl	800d0a0 <RTC_ByteToBcd2>
 800cb66:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cb68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	7b1b      	ldrb	r3, [r3, #12]
 800cb70:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cb72:	4313      	orrs	r3, r2
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	e018      	b.n	800cbaa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	785b      	ldrb	r3, [r3, #1]
 800cb96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cb98:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cb9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	7b1b      	ldrb	r3, [r3, #12]
 800cba4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cba6:	4313      	orrs	r3, r2
 800cba8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	22ca      	movs	r2, #202	; 0xca
 800cbb0:	625a      	str	r2, [r3, #36]	; 0x24
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2253      	movs	r2, #83	; 0x53
 800cbb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f000 fa44 	bl	800d048 <RTC_EnterInitMode>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00b      	beq.n	800cbde <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	22ff      	movs	r2, #255	; 0xff
 800cbcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2204      	movs	r2, #4
 800cbd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e045      	b.n	800cc6a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	6979      	ldr	r1, [r7, #20]
 800cbe4:	4b23      	ldr	r3, [pc, #140]	; (800cc74 <HAL_RTC_SetTime+0x178>)
 800cbe6:	400b      	ands	r3, r1
 800cbe8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cbf8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6899      	ldr	r1, [r3, #8]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	691a      	ldr	r2, [r3, #16]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	431a      	orrs	r2, r3
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68da      	ldr	r2, [r3, #12]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d111      	bne.n	800cc54 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f000 f9e1 	bl	800cff8 <HAL_RTC_WaitForSynchro>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	22ff      	movs	r2, #255	; 0xff
 800cc42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2204      	movs	r2, #4
 800cc48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e00a      	b.n	800cc6a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	22ff      	movs	r2, #255	; 0xff
 800cc5a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cc68:	2300      	movs	r3, #0
  }
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd90      	pop	{r4, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	007f7f7f 	.word	0x007f7f7f

0800cc78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	7f1b      	ldrb	r3, [r3, #28]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d101      	bne.n	800cc94 <HAL_RTC_SetDate+0x1c>
 800cc90:	2302      	movs	r3, #2
 800cc92:	e092      	b.n	800cdba <HAL_RTC_SetDate+0x142>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10e      	bne.n	800ccc4 <HAL_RTC_SetDate+0x4c>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	f003 0310 	and.w	r3, r3, #16
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d008      	beq.n	800ccc4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	785b      	ldrb	r3, [r3, #1]
 800ccb6:	f023 0310 	bic.w	r3, r3, #16
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	330a      	adds	r3, #10
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d11c      	bne.n	800cd04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	78db      	ldrb	r3, [r3, #3]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 f9e6 	bl	800d0a0 <RTC_ByteToBcd2>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	785b      	ldrb	r3, [r3, #1]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 f9df 	bl	800d0a0 <RTC_ByteToBcd2>
 800cce2:	4603      	mov	r3, r0
 800cce4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cce6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	789b      	ldrb	r3, [r3, #2]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 f9d7 	bl	800d0a0 <RTC_ByteToBcd2>
 800ccf2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ccf4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	617b      	str	r3, [r7, #20]
 800cd02:	e00e      	b.n	800cd22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	78db      	ldrb	r3, [r3, #3]
 800cd08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	785b      	ldrb	r3, [r3, #1]
 800cd0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd10:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800cd16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	22ca      	movs	r2, #202	; 0xca
 800cd28:	625a      	str	r2, [r3, #36]	; 0x24
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2253      	movs	r2, #83	; 0x53
 800cd30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f988 	bl	800d048 <RTC_EnterInitMode>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00b      	beq.n	800cd56 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	22ff      	movs	r2, #255	; 0xff
 800cd44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2204      	movs	r2, #4
 800cd4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	e031      	b.n	800cdba <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	6979      	ldr	r1, [r7, #20]
 800cd5c:	4b19      	ldr	r3, [pc, #100]	; (800cdc4 <HAL_RTC_SetDate+0x14c>)
 800cd5e:	400b      	ands	r3, r1
 800cd60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd70:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	f003 0320 	and.w	r3, r3, #32
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d111      	bne.n	800cda4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f000 f939 	bl	800cff8 <HAL_RTC_WaitForSynchro>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00b      	beq.n	800cda4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	22ff      	movs	r2, #255	; 0xff
 800cd92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2204      	movs	r2, #4
 800cd98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e00a      	b.n	800cdba <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	22ff      	movs	r2, #255	; 0xff
 800cdaa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
  }
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd90      	pop	{r4, r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	00ffff3f 	.word	0x00ffff3f

0800cdc8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b089      	sub	sp, #36	; 0x24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	2300      	movs	r3, #0
 800cdde:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	7f1b      	ldrb	r3, [r3, #28]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_RTC_SetAlarm+0x24>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e101      	b.n	800cff0 <HAL_RTC_SetAlarm+0x228>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d137      	bne.n	800ce6e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d102      	bne.n	800ce12 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 f942 	bl	800d0a0 <RTC_ByteToBcd2>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 f93b 	bl	800d0a0 <RTC_ByteToBcd2>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ce2e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	789b      	ldrb	r3, [r3, #2]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f933 	bl	800d0a0 <RTC_ByteToBcd2>
 800ce3a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ce3c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	7b1b      	ldrb	r3, [r3, #12]
 800ce44:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ce46:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f925 	bl	800d0a0 <RTC_ByteToBcd2>
 800ce56:	4603      	mov	r3, r0
 800ce58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ce5a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ce62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	61fb      	str	r3, [r7, #28]
 800ce6c:	e023      	b.n	800ceb6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	785b      	ldrb	r3, [r3, #1]
 800ce8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ce8e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ce94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	7b1b      	ldrb	r3, [r3, #12]
 800ce9a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ce9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cea4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cea6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ceac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	69db      	ldr	r3, [r3, #28]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	22ca      	movs	r2, #202	; 0xca
 800cec8:	625a      	str	r2, [r3, #36]	; 0x24
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2253      	movs	r2, #83	; 0x53
 800ced0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceda:	d13f      	bne.n	800cf5c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689a      	ldr	r2, [r3, #8]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ceea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689a      	ldr	r2, [r3, #8]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cefa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cefc:	f7f8 ffae 	bl	8005e5c <HAL_GetTick>
 800cf00:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cf02:	e013      	b.n	800cf2c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf04:	f7f8 ffaa 	bl	8005e5c <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf12:	d90b      	bls.n	800cf2c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	22ff      	movs	r2, #255	; 0xff
 800cf1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2203      	movs	r2, #3
 800cf20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e061      	b.n	800cff0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0e4      	beq.n	800cf04 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69fa      	ldr	r2, [r7, #28]
 800cf40:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689a      	ldr	r2, [r3, #8]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf58:	609a      	str	r2, [r3, #8]
 800cf5a:	e03e      	b.n	800cfda <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cf6a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689a      	ldr	r2, [r3, #8]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf7a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf7c:	f7f8 ff6e 	bl	8005e5c <HAL_GetTick>
 800cf80:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800cf82:	e013      	b.n	800cfac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf84:	f7f8 ff6a 	bl	8005e5c <HAL_GetTick>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf92:	d90b      	bls.n	800cfac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	22ff      	movs	r2, #255	; 0xff
 800cf9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	e021      	b.n	800cff0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0e4      	beq.n	800cf84 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69fa      	ldr	r2, [r7, #28]
 800cfc0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	689a      	ldr	r2, [r3, #8]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	22ff      	movs	r2, #255	; 0xff
 800cfe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3724      	adds	r7, #36	; 0x24
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd90      	pop	{r4, r7, pc}

0800cff8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d012:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d014:	f7f8 ff22 	bl	8005e5c <HAL_GetTick>
 800d018:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d01a:	e009      	b.n	800d030 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d01c:	f7f8 ff1e 	bl	8005e5c <HAL_GetTick>
 800d020:	4602      	mov	r2, r0
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d02a:	d901      	bls.n	800d030 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e007      	b.n	800d040 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0ee      	beq.n	800d01c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d119      	bne.n	800d096 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d06a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d06c:	f7f8 fef6 	bl	8005e5c <HAL_GetTick>
 800d070:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d072:	e009      	b.n	800d088 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d074:	f7f8 fef2 	bl	8005e5c <HAL_GetTick>
 800d078:	4602      	mov	r2, r0
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d082:	d901      	bls.n	800d088 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d084:	2303      	movs	r3, #3
 800d086:	e007      	b.n	800d098 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d092:	2b00      	cmp	r3, #0
 800d094:	d0ee      	beq.n	800d074 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d0ae:	e005      	b.n	800d0bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	3b0a      	subs	r3, #10
 800d0ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	2b09      	cmp	r3, #9
 800d0c0:	d8f6      	bhi.n	800d0b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	011b      	lsls	r3, r3, #4
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b2db      	uxtb	r3, r3
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	7f1b      	ldrb	r3, [r3, #28]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d101      	bne.n	800d0f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e03e      	b.n	800d176 <HAL_RTCEx_SetTimeStamp+0x9a>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2202      	movs	r2, #2
 800d102:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	4313      	orrs	r3, r2
 800d116:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	22ca      	movs	r2, #202	; 0xca
 800d11e:	625a      	str	r2, [r3, #36]	; 0x24
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2253      	movs	r2, #83	; 0x53
 800d126:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 0206 	bic.w	r2, r2, #6
 800d136:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	430a      	orrs	r2, r1
 800d146:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d15e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	22ff      	movs	r2, #255	; 0xff
 800d166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2201      	movs	r2, #1
 800d16c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	371c      	adds	r7, #28
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	fffff7f7 	.word	0xfffff7f7

0800d188 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b088      	sub	sp, #32
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e156      	b.n	800d454 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7f6 fbf2 	bl	80039a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 facf 	bl	800d76c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d00c      	beq.n	800d1f0 <HAL_SAI_Init+0x68>
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d80d      	bhi.n	800d1f6 <HAL_SAI_Init+0x6e>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <HAL_SAI_Init+0x5c>
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d003      	beq.n	800d1ea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d1e2:	e008      	b.n	800d1f6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61fb      	str	r3, [r7, #28]
      break;
 800d1e8:	e006      	b.n	800d1f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d1ea:	2310      	movs	r3, #16
 800d1ec:	61fb      	str	r3, [r7, #28]
      break;
 800d1ee:	e003      	b.n	800d1f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	61fb      	str	r3, [r7, #28]
      break;
 800d1f4:	e000      	b.n	800d1f8 <HAL_SAI_Init+0x70>
      break;
 800d1f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d81e      	bhi.n	800d23e <HAL_SAI_Init+0xb6>
 800d200:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <HAL_SAI_Init+0x80>)
 800d202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d206:	bf00      	nop
 800d208:	0800d219 	.word	0x0800d219
 800d20c:	0800d21f 	.word	0x0800d21f
 800d210:	0800d227 	.word	0x0800d227
 800d214:	0800d22f 	.word	0x0800d22f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d21c:	e010      	b.n	800d240 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d222:	617b      	str	r3, [r7, #20]
    }
    break;
 800d224:	e00c      	b.n	800d240 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d22a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d22c:	e008      	b.n	800d240 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d22e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d232:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d23c:	e000      	b.n	800d240 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d23e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a85      	ldr	r2, [pc, #532]	; (800d45c <HAL_SAI_Init+0x2d4>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d004      	beq.n	800d254 <HAL_SAI_Init+0xcc>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a84      	ldr	r2, [pc, #528]	; (800d460 <HAL_SAI_Init+0x2d8>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d103      	bne.n	800d25c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d254:	4a83      	ldr	r2, [pc, #524]	; (800d464 <HAL_SAI_Init+0x2dc>)
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e002      	b.n	800d262 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d25c:	4a82      	ldr	r2, [pc, #520]	; (800d468 <HAL_SAI_Init+0x2e0>)
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d04c      	beq.n	800d304 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a7a      	ldr	r2, [pc, #488]	; (800d45c <HAL_SAI_Init+0x2d4>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d004      	beq.n	800d282 <HAL_SAI_Init+0xfa>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a78      	ldr	r2, [pc, #480]	; (800d460 <HAL_SAI_Init+0x2d8>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d104      	bne.n	800d28c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d282:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d286:	f7ff fa63 	bl	800c750 <HAL_RCCEx_GetPeriphCLKFreq>
 800d28a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a76      	ldr	r2, [pc, #472]	; (800d46c <HAL_SAI_Init+0x2e4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d004      	beq.n	800d2a0 <HAL_SAI_Init+0x118>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a75      	ldr	r2, [pc, #468]	; (800d470 <HAL_SAI_Init+0x2e8>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d104      	bne.n	800d2aa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d2a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d2a4:	f7ff fa54 	bl	800c750 <HAL_RCCEx_GetPeriphCLKFreq>
 800d2a8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	025b      	lsls	r3, r3, #9
 800d2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2c0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	4a6b      	ldr	r2, [pc, #428]	; (800d474 <HAL_SAI_Init+0x2ec>)
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	08da      	lsrs	r2, r3, #3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d2d0:	68f9      	ldr	r1, [r7, #12]
 800d2d2:	4b68      	ldr	r3, [pc, #416]	; (800d474 <HAL_SAI_Init+0x2ec>)
 800d2d4:	fba3 2301 	umull	r2, r3, r3, r1
 800d2d8:	08da      	lsrs	r2, r3, #3
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	1aca      	subs	r2, r1, r3
 800d2e4:	2a08      	cmp	r2, #8
 800d2e6:	d904      	bls.n	800d2f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a1b      	ldr	r3, [r3, #32]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f6:	2b04      	cmp	r3, #4
 800d2f8:	d104      	bne.n	800d304 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a1b      	ldr	r3, [r3, #32]
 800d2fe:	085a      	lsrs	r2, r3, #1
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <HAL_SAI_Init+0x18c>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d109      	bne.n	800d328 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d101      	bne.n	800d320 <HAL_SAI_Init+0x198>
 800d31c:	2300      	movs	r3, #0
 800d31e:	e001      	b.n	800d324 <HAL_SAI_Init+0x19c>
 800d320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d324:	61bb      	str	r3, [r7, #24]
 800d326:	e008      	b.n	800d33a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d102      	bne.n	800d336 <HAL_SAI_Init+0x1ae>
 800d330:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d334:	e000      	b.n	800d338 <HAL_SAI_Init+0x1b0>
 800d336:	2300      	movs	r3, #0
 800d338:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b4c      	ldr	r3, [pc, #304]	; (800d478 <HAL_SAI_Init+0x2f0>)
 800d346:	400b      	ands	r3, r1
 800d348:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6819      	ldr	r1, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d358:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d35e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d364:	431a      	orrs	r2, r3
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d372:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d37e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a1b      	ldr	r3, [r3, #32]
 800d384:	051b      	lsls	r3, r3, #20
 800d386:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6859      	ldr	r1, [r3, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	4b38      	ldr	r3, [pc, #224]	; (800d47c <HAL_SAI_Init+0x2f4>)
 800d39c:	400b      	ands	r3, r1
 800d39e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6859      	ldr	r1, [r3, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699a      	ldr	r2, [r3, #24]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	431a      	orrs	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6899      	ldr	r1, [r3, #8]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	4b2d      	ldr	r3, [pc, #180]	; (800d480 <HAL_SAI_Init+0x2f8>)
 800d3ca:	400b      	ands	r3, r1
 800d3cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6899      	ldr	r1, [r3, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d3de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d3e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d3ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d3f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68d9      	ldr	r1, [r3, #12]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d40c:	400b      	ands	r3, r1
 800d40e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68d9      	ldr	r1, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d41e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d424:	041b      	lsls	r3, r3, #16
 800d426:	431a      	orrs	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d42c:	3b01      	subs	r3, #1
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	40015804 	.word	0x40015804
 800d460:	40015824 	.word	0x40015824
 800d464:	40015800 	.word	0x40015800
 800d468:	40015c00 	.word	0x40015c00
 800d46c:	40015c04 	.word	0x40015c04
 800d470:	40015c24 	.word	0x40015c24
 800d474:	cccccccd 	.word	0xcccccccd
 800d478:	ff05c010 	.word	0xff05c010
 800d47c:	ffff1ff0 	.word	0xffff1ff0
 800d480:	fff88000 	.word	0xfff88000

0800d484 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800d492:	f7f8 fce3 	bl	8005e5c <HAL_GetTick>
 800d496:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <HAL_SAI_Transmit_DMA+0x20>
 800d49e:	88fb      	ldrh	r3, [r7, #6]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e093      	b.n	800d5d0 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	f040 808c 	bne.w	800d5ce <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d101      	bne.n	800d4c4 <HAL_SAI_Transmit_DMA+0x40>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	e085      	b.n	800d5d0 <HAL_SAI_Transmit_DMA+0x14c>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	88fa      	ldrh	r2, [r7, #6]
 800d4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	88fa      	ldrh	r2, [r7, #6]
 800d4de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2212      	movs	r2, #18
 800d4ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f6:	4a38      	ldr	r2, [pc, #224]	; (800d5d8 <HAL_SAI_Transmit_DMA+0x154>)
 800d4f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fe:	4a37      	ldr	r2, [pc, #220]	; (800d5dc <HAL_SAI_Transmit_DMA+0x158>)
 800d500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d506:	4a36      	ldr	r2, [pc, #216]	; (800d5e0 <HAL_SAI_Transmit_DMA+0x15c>)
 800d508:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50e:	2200      	movs	r2, #0
 800d510:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d51a:	4619      	mov	r1, r3
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	331c      	adds	r3, #28
 800d522:	461a      	mov	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d52a:	f7f9 fb45 	bl	8006bb8 <HAL_DMA_Start_IT>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d005      	beq.n	800d540 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d53c:	2301      	movs	r3, #1
 800d53e:	e047      	b.n	800d5d0 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d540:	2100      	movs	r1, #0
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f000 f8dc 	bl	800d700 <SAI_InterruptFlag>
 800d548:	4601      	mov	r1, r0
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	691a      	ldr	r2, [r3, #16]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	430a      	orrs	r2, r1
 800d556:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d566:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d568:	e015      	b.n	800d596 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d56a:	f7f8 fc77 	bl	8005e5c <HAL_GetTick>
 800d56e:	4602      	mov	r2, r0
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d578:	d90d      	bls.n	800d596 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d580:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e01c      	b.n	800d5d0 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d0e2      	beq.n	800d56a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d107      	bne.n	800d5c2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d5c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	e000      	b.n	800d5d0 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800d5ce:	2302      	movs	r3, #2
  }
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	0800d83d 	.word	0x0800d83d
 800d5dc:	0800d7dd 	.word	0x0800d7dd
 800d5e0:	0800d8d5 	.word	0x0800d8d5

0800d5e4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <HAL_SAI_Receive_DMA+0x1a>
 800d5f8:	88fb      	ldrh	r3, [r7, #6]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d101      	bne.n	800d602 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e074      	b.n	800d6ec <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d16d      	bne.n	800d6ea <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d614:	2b01      	cmp	r3, #1
 800d616:	d101      	bne.n	800d61c <HAL_SAI_Receive_DMA+0x38>
 800d618:	2302      	movs	r3, #2
 800d61a:	e067      	b.n	800d6ec <HAL_SAI_Receive_DMA+0x108>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	88fa      	ldrh	r2, [r7, #6]
 800d62e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	88fa      	ldrh	r2, [r7, #6]
 800d636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2222      	movs	r2, #34	; 0x22
 800d646:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64e:	4a29      	ldr	r2, [pc, #164]	; (800d6f4 <HAL_SAI_Receive_DMA+0x110>)
 800d650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d656:	4a28      	ldr	r2, [pc, #160]	; (800d6f8 <HAL_SAI_Receive_DMA+0x114>)
 800d658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65e:	4a27      	ldr	r2, [pc, #156]	; (800d6fc <HAL_SAI_Receive_DMA+0x118>)
 800d660:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d666:	2200      	movs	r2, #0
 800d668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	331c      	adds	r3, #28
 800d674:	4619      	mov	r1, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d67a:	461a      	mov	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d682:	f7f9 fa99 	bl	8006bb8 <HAL_DMA_Start_IT>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e029      	b.n	800d6ec <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d698:	2100      	movs	r1, #0
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f000 f830 	bl	800d700 <SAI_InterruptFlag>
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	691a      	ldr	r2, [r3, #16]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	430a      	orrs	r2, r1
 800d6ae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d6be:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d107      	bne.n	800d6de <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d6dc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e000      	b.n	800d6ec <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d6ea:	2302      	movs	r3, #2
  }
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	0800d8b9 	.word	0x0800d8b9
 800d6f8:	0800d859 	.word	0x0800d859
 800d6fc:	0800d8d5 	.word	0x0800d8d5

0800d700 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d103      	bne.n	800d71c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f043 0308 	orr.w	r3, r3, #8
 800d71a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d720:	2b08      	cmp	r3, #8
 800d722:	d10b      	bne.n	800d73c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d003      	beq.n	800d734 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d103      	bne.n	800d73c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f043 0310 	orr.w	r3, r3, #16
 800d73a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	2b03      	cmp	r3, #3
 800d742:	d003      	beq.n	800d74c <SAI_InterruptFlag+0x4c>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d104      	bne.n	800d756 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	e003      	b.n	800d75e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f043 0304 	orr.w	r3, r3, #4
 800d75c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d75e:	68fb      	ldr	r3, [r7, #12]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d774:	4b17      	ldr	r3, [pc, #92]	; (800d7d4 <SAI_Disable+0x68>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <SAI_Disable+0x6c>)
 800d77a:	fba2 2303 	umull	r2, r3, r2, r3
 800d77e:	0b1b      	lsrs	r3, r3, #12
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d796:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	1e5a      	subs	r2, r3, #1
 800d79c:	60fa      	str	r2, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10a      	bne.n	800d7b8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	72fb      	strb	r3, [r7, #11]
      break;
 800d7b6:	e006      	b.n	800d7c6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e8      	bne.n	800d798 <SAI_Disable+0x2c>

  return status;
 800d7c6:	7afb      	ldrb	r3, [r7, #11]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	20000008 	.word	0x20000008
 800d7d8:	95cbec1b 	.word	0x95cbec1b

0800d7dc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f2:	d01c      	beq.n	800d82e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d80a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d80c:	2100      	movs	r1, #0
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f7ff ff76 	bl	800d700 <SAI_InterruptFlag>
 800d814:	4603      	mov	r3, r0
 800d816:	43d9      	mvns	r1, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	691a      	ldr	r2, [r3, #16]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	400a      	ands	r2, r1
 800d824:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7f7 f9a8 	bl	8004b84 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d834:	bf00      	nop
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d848:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7f7 f9a4 	bl	8004b98 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d86e:	d01c      	beq.n	800d8aa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d87e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d888:	2100      	movs	r1, #0
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f7ff ff38 	bl	800d700 <SAI_InterruptFlag>
 800d890:	4603      	mov	r3, r0
 800d892:	43d9      	mvns	r1, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	691a      	ldr	r2, [r3, #16]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	400a      	ands	r2, r1
 800d8a0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f7f3 fd9c 	bl	80013e8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f7f3 fd9e 	bl	8001408 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d8cc:	bf00      	nop
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d004      	beq.n	800d906 <SAI_DMAError+0x32>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d902:	2b01      	cmp	r3, #1
 800d904:	d112      	bne.n	800d92c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d914:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff ff28 	bl	800d76c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f7f7 f93d 	bl	8004bac <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d932:	bf00      	nop
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e025      	b.n	800d99a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7f6 f814 	bl	8003990 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2202      	movs	r2, #2
 800d96c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3304      	adds	r3, #4
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f001 fe54 	bl	800f628 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	461a      	mov	r2, r3
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	f001 febe 	bl	800f70c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	60b9      	str	r1, [r7, #8]
 800d9ac:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d101      	bne.n	800d9be <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	e018      	b.n	800d9f0 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2202      	movs	r2, #2
 800d9c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f001 ff1c 	bl	800f80c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d104      	bne.n	800d9e6 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2205      	movs	r2, #5
 800d9e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d9e4:	e003      	b.n	800d9ee <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d101      	bne.n	800da12 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800da0e:	2302      	movs	r3, #2
 800da10:	e00e      	b.n	800da30 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2202      	movs	r2, #2
 800da16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f001 ff17 	bl	800f854 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d101      	bne.n	800da4a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800da46:	2301      	movs	r3, #1
 800da48:	e04c      	b.n	800dae4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7f5 fcca 	bl	80033f8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2202      	movs	r2, #2
 800da68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f022 0203 	bic.w	r2, r2, #3
 800da7a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4b19      	ldr	r3, [pc, #100]	; (800daec <HAL_SPDIFRX_Init+0xb4>)
 800da88:	4013      	ands	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800da94:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800da9a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800daa0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800daa6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800daac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800dab2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800dab8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800dabe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800dac4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	fff88407 	.word	0xfff88407

0800daf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d101      	bne.n	800db02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e049      	b.n	800db96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f7f5 fcb0 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2202      	movs	r2, #2
 800db20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f000 fc22 	bl	800e378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d001      	beq.n	800dbb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e054      	b.n	800dc62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0201 	orr.w	r2, r2, #1
 800dbce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a26      	ldr	r2, [pc, #152]	; (800dc70 <HAL_TIM_Base_Start_IT+0xd0>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d022      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbe2:	d01d      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a22      	ldr	r2, [pc, #136]	; (800dc74 <HAL_TIM_Base_Start_IT+0xd4>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d018      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a21      	ldr	r2, [pc, #132]	; (800dc78 <HAL_TIM_Base_Start_IT+0xd8>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d013      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a1f      	ldr	r2, [pc, #124]	; (800dc7c <HAL_TIM_Base_Start_IT+0xdc>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d00e      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a1e      	ldr	r2, [pc, #120]	; (800dc80 <HAL_TIM_Base_Start_IT+0xe0>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d009      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a1c      	ldr	r2, [pc, #112]	; (800dc84 <HAL_TIM_Base_Start_IT+0xe4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d004      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x80>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a1b      	ldr	r2, [pc, #108]	; (800dc88 <HAL_TIM_Base_Start_IT+0xe8>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d115      	bne.n	800dc4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	689a      	ldr	r2, [r3, #8]
 800dc26:	4b19      	ldr	r3, [pc, #100]	; (800dc8c <HAL_TIM_Base_Start_IT+0xec>)
 800dc28:	4013      	ands	r3, r2
 800dc2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b06      	cmp	r3, #6
 800dc30:	d015      	beq.n	800dc5e <HAL_TIM_Base_Start_IT+0xbe>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc38:	d011      	beq.n	800dc5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f042 0201 	orr.w	r2, r2, #1
 800dc48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc4a:	e008      	b.n	800dc5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f042 0201 	orr.w	r2, r2, #1
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	e000      	b.n	800dc60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3714      	adds	r7, #20
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	40010000 	.word	0x40010000
 800dc74:	40000400 	.word	0x40000400
 800dc78:	40000800 	.word	0x40000800
 800dc7c:	40000c00 	.word	0x40000c00
 800dc80:	40010400 	.word	0x40010400
 800dc84:	40014000 	.word	0x40014000
 800dc88:	40001800 	.word	0x40001800
 800dc8c:	00010007 	.word	0x00010007

0800dc90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e049      	b.n	800dd36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7f5 fc4e 	bl	8003558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3304      	adds	r3, #4
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f000 fb52 	bl	800e378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	f003 0302 	and.w	r3, r3, #2
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d122      	bne.n	800dd9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d11b      	bne.n	800dd9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f06f 0202 	mvn.w	r2, #2
 800dd6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	f003 0303 	and.w	r3, r3, #3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fadb 	bl	800e33c <HAL_TIM_IC_CaptureCallback>
 800dd86:	e005      	b.n	800dd94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 facd 	bl	800e328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fade 	bl	800e350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d122      	bne.n	800ddee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d11b      	bne.n	800ddee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f06f 0204 	mvn.w	r2, #4
 800ddbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d003      	beq.n	800dddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fab1 	bl	800e33c <HAL_TIM_IC_CaptureCallback>
 800ddda:	e005      	b.n	800dde8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 faa3 	bl	800e328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fab4 	bl	800e350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	f003 0308 	and.w	r3, r3, #8
 800ddf8:	2b08      	cmp	r3, #8
 800ddfa:	d122      	bne.n	800de42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	f003 0308 	and.w	r3, r3, #8
 800de06:	2b08      	cmp	r3, #8
 800de08:	d11b      	bne.n	800de42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f06f 0208 	mvn.w	r2, #8
 800de12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2204      	movs	r2, #4
 800de18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	f003 0303 	and.w	r3, r3, #3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 fa87 	bl	800e33c <HAL_TIM_IC_CaptureCallback>
 800de2e:	e005      	b.n	800de3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fa79 	bl	800e328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fa8a 	bl	800e350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	f003 0310 	and.w	r3, r3, #16
 800de4c:	2b10      	cmp	r3, #16
 800de4e:	d122      	bne.n	800de96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	f003 0310 	and.w	r3, r3, #16
 800de5a:	2b10      	cmp	r3, #16
 800de5c:	d11b      	bne.n	800de96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f06f 0210 	mvn.w	r2, #16
 800de66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2208      	movs	r2, #8
 800de6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fa5d 	bl	800e33c <HAL_TIM_IC_CaptureCallback>
 800de82:	e005      	b.n	800de90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fa4f 	bl	800e328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 fa60 	bl	800e350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	691b      	ldr	r3, [r3, #16]
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d10e      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d107      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f06f 0201 	mvn.w	r2, #1
 800deba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7f4 fe99 	bl	8002bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800decc:	2b80      	cmp	r3, #128	; 0x80
 800dece:	d10e      	bne.n	800deee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deda:	2b80      	cmp	r3, #128	; 0x80
 800dedc:	d107      	bne.n	800deee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fef3 	bl	800ecd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800defc:	d10e      	bne.n	800df1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df08:	2b80      	cmp	r3, #128	; 0x80
 800df0a:	d107      	bne.n	800df1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fee6 	bl	800ece8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df26:	2b40      	cmp	r3, #64	; 0x40
 800df28:	d10e      	bne.n	800df48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df34:	2b40      	cmp	r3, #64	; 0x40
 800df36:	d107      	bne.n	800df48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fa0e 	bl	800e364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	f003 0320 	and.w	r3, r3, #32
 800df52:	2b20      	cmp	r3, #32
 800df54:	d10e      	bne.n	800df74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	f003 0320 	and.w	r3, r3, #32
 800df60:	2b20      	cmp	r3, #32
 800df62:	d107      	bne.n	800df74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f06f 0220 	mvn.w	r2, #32
 800df6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fea6 	bl	800ecc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d101      	bne.n	800df96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800df92:	2302      	movs	r3, #2
 800df94:	e0fd      	b.n	800e192 <HAL_TIM_PWM_ConfigChannel+0x216>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b14      	cmp	r3, #20
 800dfa2:	f200 80f0 	bhi.w	800e186 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dfa6:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfac:	0800e001 	.word	0x0800e001
 800dfb0:	0800e187 	.word	0x0800e187
 800dfb4:	0800e187 	.word	0x0800e187
 800dfb8:	0800e187 	.word	0x0800e187
 800dfbc:	0800e041 	.word	0x0800e041
 800dfc0:	0800e187 	.word	0x0800e187
 800dfc4:	0800e187 	.word	0x0800e187
 800dfc8:	0800e187 	.word	0x0800e187
 800dfcc:	0800e083 	.word	0x0800e083
 800dfd0:	0800e187 	.word	0x0800e187
 800dfd4:	0800e187 	.word	0x0800e187
 800dfd8:	0800e187 	.word	0x0800e187
 800dfdc:	0800e0c3 	.word	0x0800e0c3
 800dfe0:	0800e187 	.word	0x0800e187
 800dfe4:	0800e187 	.word	0x0800e187
 800dfe8:	0800e187 	.word	0x0800e187
 800dfec:	0800e105 	.word	0x0800e105
 800dff0:	0800e187 	.word	0x0800e187
 800dff4:	0800e187 	.word	0x0800e187
 800dff8:	0800e187 	.word	0x0800e187
 800dffc:	0800e145 	.word	0x0800e145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fa56 	bl	800e4b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	699a      	ldr	r2, [r3, #24]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f042 0208 	orr.w	r2, r2, #8
 800e01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 0204 	bic.w	r2, r2, #4
 800e02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6999      	ldr	r1, [r3, #24]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	691a      	ldr	r2, [r3, #16]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	430a      	orrs	r2, r1
 800e03c:	619a      	str	r2, [r3, #24]
      break;
 800e03e:	e0a3      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f000 faa8 	bl	800e59c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699a      	ldr	r2, [r3, #24]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e05a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	699a      	ldr	r2, [r3, #24]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e06a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6999      	ldr	r1, [r3, #24]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	021a      	lsls	r2, r3, #8
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	619a      	str	r2, [r3, #24]
      break;
 800e080:	e082      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 faff 	bl	800e68c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69da      	ldr	r2, [r3, #28]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f042 0208 	orr.w	r2, r2, #8
 800e09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	69da      	ldr	r2, [r3, #28]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 0204 	bic.w	r2, r2, #4
 800e0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	69d9      	ldr	r1, [r3, #28]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	61da      	str	r2, [r3, #28]
      break;
 800e0c0:	e062      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 fb55 	bl	800e778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69da      	ldr	r2, [r3, #28]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	69da      	ldr	r2, [r3, #28]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	69d9      	ldr	r1, [r3, #28]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	021a      	lsls	r2, r3, #8
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	61da      	str	r2, [r3, #28]
      break;
 800e102:	e041      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68b9      	ldr	r1, [r7, #8]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fb8c 	bl	800e828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f042 0208 	orr.w	r2, r2, #8
 800e11e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f022 0204 	bic.w	r2, r2, #4
 800e12e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	691a      	ldr	r2, [r3, #16]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e142:	e021      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68b9      	ldr	r1, [r7, #8]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f000 fbbe 	bl	800e8cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e15e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e16e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	021a      	lsls	r2, r3, #8
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	430a      	orrs	r2, r1
 800e182:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e184:	e000      	b.n	800e188 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e186:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop

0800e19c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d101      	bne.n	800e1b4 <HAL_TIM_ConfigClockSource+0x18>
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	e0b3      	b.n	800e31c <HAL_TIM_ConfigClockSource+0x180>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	4b55      	ldr	r3, [pc, #340]	; (800e324 <HAL_TIM_ConfigClockSource+0x188>)
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1ec:	d03e      	beq.n	800e26c <HAL_TIM_ConfigClockSource+0xd0>
 800e1ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1f2:	f200 8087 	bhi.w	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1fa:	f000 8085 	beq.w	800e308 <HAL_TIM_ConfigClockSource+0x16c>
 800e1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e202:	d87f      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e204:	2b70      	cmp	r3, #112	; 0x70
 800e206:	d01a      	beq.n	800e23e <HAL_TIM_ConfigClockSource+0xa2>
 800e208:	2b70      	cmp	r3, #112	; 0x70
 800e20a:	d87b      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e20c:	2b60      	cmp	r3, #96	; 0x60
 800e20e:	d050      	beq.n	800e2b2 <HAL_TIM_ConfigClockSource+0x116>
 800e210:	2b60      	cmp	r3, #96	; 0x60
 800e212:	d877      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e214:	2b50      	cmp	r3, #80	; 0x50
 800e216:	d03c      	beq.n	800e292 <HAL_TIM_ConfigClockSource+0xf6>
 800e218:	2b50      	cmp	r3, #80	; 0x50
 800e21a:	d873      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e21c:	2b40      	cmp	r3, #64	; 0x40
 800e21e:	d058      	beq.n	800e2d2 <HAL_TIM_ConfigClockSource+0x136>
 800e220:	2b40      	cmp	r3, #64	; 0x40
 800e222:	d86f      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e224:	2b30      	cmp	r3, #48	; 0x30
 800e226:	d064      	beq.n	800e2f2 <HAL_TIM_ConfigClockSource+0x156>
 800e228:	2b30      	cmp	r3, #48	; 0x30
 800e22a:	d86b      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e22c:	2b20      	cmp	r3, #32
 800e22e:	d060      	beq.n	800e2f2 <HAL_TIM_ConfigClockSource+0x156>
 800e230:	2b20      	cmp	r3, #32
 800e232:	d867      	bhi.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
 800e234:	2b00      	cmp	r3, #0
 800e236:	d05c      	beq.n	800e2f2 <HAL_TIM_ConfigClockSource+0x156>
 800e238:	2b10      	cmp	r3, #16
 800e23a:	d05a      	beq.n	800e2f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800e23c:	e062      	b.n	800e304 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6818      	ldr	r0, [r3, #0]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	6899      	ldr	r1, [r3, #8]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	685a      	ldr	r2, [r3, #4]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	f000 fc0b 	bl	800ea68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	609a      	str	r2, [r3, #8]
      break;
 800e26a:	e04e      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	6899      	ldr	r1, [r3, #8]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	f000 fbf4 	bl	800ea68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	689a      	ldr	r2, [r3, #8]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e28e:	609a      	str	r2, [r3, #8]
      break;
 800e290:	e03b      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	6859      	ldr	r1, [r3, #4]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f000 fb68 	bl	800e974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2150      	movs	r1, #80	; 0x50
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 fbc1 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e2b0:	e02b      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	6859      	ldr	r1, [r3, #4]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	f000 fb87 	bl	800e9d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2160      	movs	r1, #96	; 0x60
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 fbb1 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e2d0:	e01b      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	6859      	ldr	r1, [r3, #4]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f000 fb48 	bl	800e974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2140      	movs	r1, #64	; 0x40
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 fba1 	bl	800ea32 <TIM_ITRx_SetConfig>
      break;
 800e2f0:	e00b      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	f000 fb98 	bl	800ea32 <TIM_ITRx_SetConfig>
        break;
 800e302:	e002      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e304:	bf00      	nop
 800e306:	e000      	b.n	800e30a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800e308:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	fffeff88 	.word	0xfffeff88

0800e328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a40      	ldr	r2, [pc, #256]	; (800e48c <TIM_Base_SetConfig+0x114>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d013      	beq.n	800e3b8 <TIM_Base_SetConfig+0x40>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e396:	d00f      	beq.n	800e3b8 <TIM_Base_SetConfig+0x40>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a3d      	ldr	r2, [pc, #244]	; (800e490 <TIM_Base_SetConfig+0x118>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d00b      	beq.n	800e3b8 <TIM_Base_SetConfig+0x40>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a3c      	ldr	r2, [pc, #240]	; (800e494 <TIM_Base_SetConfig+0x11c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d007      	beq.n	800e3b8 <TIM_Base_SetConfig+0x40>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4a3b      	ldr	r2, [pc, #236]	; (800e498 <TIM_Base_SetConfig+0x120>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d003      	beq.n	800e3b8 <TIM_Base_SetConfig+0x40>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4a3a      	ldr	r2, [pc, #232]	; (800e49c <TIM_Base_SetConfig+0x124>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d108      	bne.n	800e3ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a2f      	ldr	r2, [pc, #188]	; (800e48c <TIM_Base_SetConfig+0x114>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d02b      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3d8:	d027      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a2c      	ldr	r2, [pc, #176]	; (800e490 <TIM_Base_SetConfig+0x118>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d023      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a2b      	ldr	r2, [pc, #172]	; (800e494 <TIM_Base_SetConfig+0x11c>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d01f      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4a2a      	ldr	r2, [pc, #168]	; (800e498 <TIM_Base_SetConfig+0x120>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d01b      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4a29      	ldr	r2, [pc, #164]	; (800e49c <TIM_Base_SetConfig+0x124>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d017      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4a28      	ldr	r2, [pc, #160]	; (800e4a0 <TIM_Base_SetConfig+0x128>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d013      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4a27      	ldr	r2, [pc, #156]	; (800e4a4 <TIM_Base_SetConfig+0x12c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d00f      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4a26      	ldr	r2, [pc, #152]	; (800e4a8 <TIM_Base_SetConfig+0x130>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d00b      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a25      	ldr	r2, [pc, #148]	; (800e4ac <TIM_Base_SetConfig+0x134>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d007      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a24      	ldr	r2, [pc, #144]	; (800e4b0 <TIM_Base_SetConfig+0x138>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d003      	beq.n	800e42a <TIM_Base_SetConfig+0xb2>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a23      	ldr	r2, [pc, #140]	; (800e4b4 <TIM_Base_SetConfig+0x13c>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d108      	bne.n	800e43c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	4313      	orrs	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	4313      	orrs	r3, r2
 800e448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	689a      	ldr	r2, [r3, #8]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <TIM_Base_SetConfig+0x114>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d003      	beq.n	800e470 <TIM_Base_SetConfig+0xf8>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a0c      	ldr	r2, [pc, #48]	; (800e49c <TIM_Base_SetConfig+0x124>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d103      	bne.n	800e478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	691a      	ldr	r2, [r3, #16]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	615a      	str	r2, [r3, #20]
}
 800e47e:	bf00      	nop
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	40010000 	.word	0x40010000
 800e490:	40000400 	.word	0x40000400
 800e494:	40000800 	.word	0x40000800
 800e498:	40000c00 	.word	0x40000c00
 800e49c:	40010400 	.word	0x40010400
 800e4a0:	40014000 	.word	0x40014000
 800e4a4:	40014400 	.word	0x40014400
 800e4a8:	40014800 	.word	0x40014800
 800e4ac:	40001800 	.word	0x40001800
 800e4b0:	40001c00 	.word	0x40001c00
 800e4b4:	40002000 	.word	0x40002000

0800e4b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b087      	sub	sp, #28
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	f023 0201 	bic.w	r2, r3, #1
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a1b      	ldr	r3, [r3, #32]
 800e4d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	4b2b      	ldr	r3, [pc, #172]	; (800e590 <TIM_OC1_SetConfig+0xd8>)
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f023 0303 	bic.w	r3, r3, #3
 800e4ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f023 0302 	bic.w	r3, r3, #2
 800e500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	4313      	orrs	r3, r2
 800e50a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a21      	ldr	r2, [pc, #132]	; (800e594 <TIM_OC1_SetConfig+0xdc>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d003      	beq.n	800e51c <TIM_OC1_SetConfig+0x64>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a20      	ldr	r2, [pc, #128]	; (800e598 <TIM_OC1_SetConfig+0xe0>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d10c      	bne.n	800e536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	f023 0308 	bic.w	r3, r3, #8
 800e522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f023 0304 	bic.w	r3, r3, #4
 800e534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a16      	ldr	r2, [pc, #88]	; (800e594 <TIM_OC1_SetConfig+0xdc>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d003      	beq.n	800e546 <TIM_OC1_SetConfig+0x8e>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a15      	ldr	r2, [pc, #84]	; (800e598 <TIM_OC1_SetConfig+0xe0>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d111      	bne.n	800e56a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e54c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	4313      	orrs	r3, r2
 800e55e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	4313      	orrs	r3, r2
 800e568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	621a      	str	r2, [r3, #32]
}
 800e584:	bf00      	nop
 800e586:	371c      	adds	r7, #28
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	fffeff8f 	.word	0xfffeff8f
 800e594:	40010000 	.word	0x40010000
 800e598:	40010400 	.word	0x40010400

0800e59c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b087      	sub	sp, #28
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	f023 0210 	bic.w	r2, r3, #16
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a1b      	ldr	r3, [r3, #32]
 800e5b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	4b2e      	ldr	r3, [pc, #184]	; (800e680 <TIM_OC2_SetConfig+0xe4>)
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	f023 0320 	bic.w	r3, r3, #32
 800e5e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	011b      	lsls	r3, r3, #4
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a23      	ldr	r2, [pc, #140]	; (800e684 <TIM_OC2_SetConfig+0xe8>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d003      	beq.n	800e604 <TIM_OC2_SetConfig+0x68>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a22      	ldr	r2, [pc, #136]	; (800e688 <TIM_OC2_SetConfig+0xec>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d10d      	bne.n	800e620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	011b      	lsls	r3, r3, #4
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	4313      	orrs	r3, r2
 800e616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e61e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a18      	ldr	r2, [pc, #96]	; (800e684 <TIM_OC2_SetConfig+0xe8>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d003      	beq.n	800e630 <TIM_OC2_SetConfig+0x94>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a17      	ldr	r2, [pc, #92]	; (800e688 <TIM_OC2_SetConfig+0xec>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d113      	bne.n	800e658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e63e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	695b      	ldr	r3, [r3, #20]
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	4313      	orrs	r3, r2
 800e64a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	4313      	orrs	r3, r2
 800e656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	621a      	str	r2, [r3, #32]
}
 800e672:	bf00      	nop
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	feff8fff 	.word	0xfeff8fff
 800e684:	40010000 	.word	0x40010000
 800e688:	40010400 	.word	0x40010400

0800e68c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <TIM_OC3_SetConfig+0xe0>)
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f023 0303 	bic.w	r3, r3, #3
 800e6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e6d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	021b      	lsls	r3, r3, #8
 800e6dc:	697a      	ldr	r2, [r7, #20]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4a22      	ldr	r2, [pc, #136]	; (800e770 <TIM_OC3_SetConfig+0xe4>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d003      	beq.n	800e6f2 <TIM_OC3_SetConfig+0x66>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4a21      	ldr	r2, [pc, #132]	; (800e774 <TIM_OC3_SetConfig+0xe8>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d10d      	bne.n	800e70e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	021b      	lsls	r3, r3, #8
 800e700:	697a      	ldr	r2, [r7, #20]
 800e702:	4313      	orrs	r3, r2
 800e704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e70c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a17      	ldr	r2, [pc, #92]	; (800e770 <TIM_OC3_SetConfig+0xe4>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d003      	beq.n	800e71e <TIM_OC3_SetConfig+0x92>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4a16      	ldr	r2, [pc, #88]	; (800e774 <TIM_OC3_SetConfig+0xe8>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d113      	bne.n	800e746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	011b      	lsls	r3, r3, #4
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	4313      	orrs	r3, r2
 800e738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	699b      	ldr	r3, [r3, #24]
 800e73e:	011b      	lsls	r3, r3, #4
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	4313      	orrs	r3, r2
 800e744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	697a      	ldr	r2, [r7, #20]
 800e75e:	621a      	str	r2, [r3, #32]
}
 800e760:	bf00      	nop
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	fffeff8f 	.word	0xfffeff8f
 800e770:	40010000 	.word	0x40010000
 800e774:	40010400 	.word	0x40010400

0800e778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	69db      	ldr	r3, [r3, #28]
 800e79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	4b1e      	ldr	r3, [pc, #120]	; (800e81c <TIM_OC4_SetConfig+0xa4>)
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	031b      	lsls	r3, r3, #12
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a13      	ldr	r2, [pc, #76]	; (800e820 <TIM_OC4_SetConfig+0xa8>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d003      	beq.n	800e7e0 <TIM_OC4_SetConfig+0x68>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a12      	ldr	r2, [pc, #72]	; (800e824 <TIM_OC4_SetConfig+0xac>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d109      	bne.n	800e7f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	695b      	ldr	r3, [r3, #20]
 800e7ec:	019b      	lsls	r3, r3, #6
 800e7ee:	697a      	ldr	r2, [r7, #20]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	693a      	ldr	r2, [r7, #16]
 800e80c:	621a      	str	r2, [r3, #32]
}
 800e80e:	bf00      	nop
 800e810:	371c      	adds	r7, #28
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	feff8fff 	.word	0xfeff8fff
 800e820:	40010000 	.word	0x40010000
 800e824:	40010400 	.word	0x40010400

0800e828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e828:	b480      	push	{r7}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4b1b      	ldr	r3, [pc, #108]	; (800e8c0 <TIM_OC5_SetConfig+0x98>)
 800e854:	4013      	ands	r3, r2
 800e856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	4313      	orrs	r3, r2
 800e860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e868:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	041b      	lsls	r3, r3, #16
 800e870:	693a      	ldr	r2, [r7, #16]
 800e872:	4313      	orrs	r3, r2
 800e874:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4a12      	ldr	r2, [pc, #72]	; (800e8c4 <TIM_OC5_SetConfig+0x9c>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d003      	beq.n	800e886 <TIM_OC5_SetConfig+0x5e>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4a11      	ldr	r2, [pc, #68]	; (800e8c8 <TIM_OC5_SetConfig+0xa0>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d109      	bne.n	800e89a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e88c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	021b      	lsls	r3, r3, #8
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	4313      	orrs	r3, r2
 800e898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	621a      	str	r2, [r3, #32]
}
 800e8b4:	bf00      	nop
 800e8b6:	371c      	adds	r7, #28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr
 800e8c0:	fffeff8f 	.word	0xfffeff8f
 800e8c4:	40010000 	.word	0x40010000
 800e8c8:	40010400 	.word	0x40010400

0800e8cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b087      	sub	sp, #28
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a1b      	ldr	r3, [r3, #32]
 800e8da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	4b1c      	ldr	r3, [pc, #112]	; (800e968 <TIM_OC6_SetConfig+0x9c>)
 800e8f8:	4013      	ands	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	021b      	lsls	r3, r3, #8
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	4313      	orrs	r3, r2
 800e906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e90e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	051b      	lsls	r3, r3, #20
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	4313      	orrs	r3, r2
 800e91a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a13      	ldr	r2, [pc, #76]	; (800e96c <TIM_OC6_SetConfig+0xa0>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d003      	beq.n	800e92c <TIM_OC6_SetConfig+0x60>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a12      	ldr	r2, [pc, #72]	; (800e970 <TIM_OC6_SetConfig+0xa4>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d109      	bne.n	800e940 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e932:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	695b      	ldr	r3, [r3, #20]
 800e938:	029b      	lsls	r3, r3, #10
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	685a      	ldr	r2, [r3, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	621a      	str	r2, [r3, #32]
}
 800e95a:	bf00      	nop
 800e95c:	371c      	adds	r7, #28
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	feff8fff 	.word	0xfeff8fff
 800e96c:	40010000 	.word	0x40010000
 800e970:	40010400 	.word	0x40010400

0800e974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e974:	b480      	push	{r7}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6a1b      	ldr	r3, [r3, #32]
 800e984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	f023 0201 	bic.w	r2, r3, #1
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e99e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	693a      	ldr	r2, [r7, #16]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	f023 030a 	bic.w	r3, r3, #10
 800e9b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e9b2:	697a      	ldr	r2, [r7, #20]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	693a      	ldr	r2, [r7, #16]
 800e9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	621a      	str	r2, [r3, #32]
}
 800e9c6:	bf00      	nop
 800e9c8:	371c      	adds	r7, #28
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b087      	sub	sp, #28
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	60b9      	str	r1, [r7, #8]
 800e9dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	f023 0210 	bic.w	r2, r3, #16
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e9fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	031b      	lsls	r3, r3, #12
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	621a      	str	r2, [r3, #32]
}
 800ea26:	bf00      	nop
 800ea28:	371c      	adds	r7, #28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b085      	sub	sp, #20
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	f043 0307 	orr.w	r3, r3, #7
 800ea54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	609a      	str	r2, [r3, #8]
}
 800ea5c:	bf00      	nop
 800ea5e:	3714      	adds	r7, #20
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	021a      	lsls	r2, r3, #8
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	609a      	str	r2, [r3, #8]
}
 800ea9c:	bf00      	nop
 800ea9e:	371c      	adds	r7, #28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d101      	bne.n	800eac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eabc:	2302      	movs	r3, #2
 800eabe:	e06d      	b.n	800eb9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2202      	movs	r2, #2
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a30      	ldr	r2, [pc, #192]	; (800eba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d004      	beq.n	800eaf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a2f      	ldr	r2, [pc, #188]	; (800ebac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d108      	bne.n	800eb06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eafa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68fa      	ldr	r2, [r7, #12]
 800eb1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a20      	ldr	r2, [pc, #128]	; (800eba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d022      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb32:	d01d      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a1d      	ldr	r2, [pc, #116]	; (800ebb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d018      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a1c      	ldr	r2, [pc, #112]	; (800ebb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d013      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a1a      	ldr	r2, [pc, #104]	; (800ebb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d00e      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a15      	ldr	r2, [pc, #84]	; (800ebac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d009      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a16      	ldr	r2, [pc, #88]	; (800ebbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d004      	beq.n	800eb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a15      	ldr	r2, [pc, #84]	; (800ebc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d10c      	bne.n	800eb8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	40010000 	.word	0x40010000
 800ebac:	40010400 	.word	0x40010400
 800ebb0:	40000400 	.word	0x40000400
 800ebb4:	40000800 	.word	0x40000800
 800ebb8:	40000c00 	.word	0x40000c00
 800ebbc:	40014000 	.word	0x40014000
 800ebc0:	40001800 	.word	0x40001800

0800ebc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d101      	bne.n	800ebe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	e065      	b.n	800ecac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	695b      	ldr	r3, [r3, #20]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec46:	4313      	orrs	r3, r2
 800ec48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	041b      	lsls	r3, r3, #16
 800ec56:	4313      	orrs	r3, r2
 800ec58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a16      	ldr	r2, [pc, #88]	; (800ecb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d004      	beq.n	800ec6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a14      	ldr	r2, [pc, #80]	; (800ecbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d115      	bne.n	800ec9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec78:	051b      	lsls	r3, r3, #20
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	69db      	ldr	r3, [r3, #28]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	40010000 	.word	0x40010000
 800ecbc:	40010400 	.word	0x40010400

0800ecc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e040      	b.n	800ed90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d106      	bne.n	800ed24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7f4 fd08 	bl	8003734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2224      	movs	r2, #36	; 0x24
 800ed28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f022 0201 	bic.w	r2, r2, #1
 800ed38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f8c0 	bl	800eec0 <UART_SetConfig>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d101      	bne.n	800ed4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e022      	b.n	800ed90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fb16 	bl	800f384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	689a      	ldr	r2, [r3, #8]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f042 0201 	orr.w	r2, r2, #1
 800ed86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 fb9d 	bl	800f4c8 <UART_CheckIdleState>
 800ed8e:	4603      	mov	r3, r0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08a      	sub	sp, #40	; 0x28
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	4613      	mov	r3, r2
 800eda6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edac:	2b20      	cmp	r3, #32
 800edae:	f040 8081 	bne.w	800eeb4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <HAL_UART_Transmit+0x26>
 800edb8:	88fb      	ldrh	r3, [r7, #6]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e079      	b.n	800eeb6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d101      	bne.n	800edd0 <HAL_UART_Transmit+0x38>
 800edcc:	2302      	movs	r3, #2
 800edce:	e072      	b.n	800eeb6 <HAL_UART_Transmit+0x11e>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2221      	movs	r2, #33	; 0x21
 800ede4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ede6:	f7f7 f839 	bl	8005e5c <HAL_GetTick>
 800edea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	88fa      	ldrh	r2, [r7, #6]
 800edf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	88fa      	ldrh	r2, [r7, #6]
 800edf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee04:	d108      	bne.n	800ee18 <HAL_UART_Transmit+0x80>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d104      	bne.n	800ee18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	61bb      	str	r3, [r7, #24]
 800ee16:	e003      	b.n	800ee20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ee28:	e02c      	b.n	800ee84 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2200      	movs	r2, #0
 800ee32:	2180      	movs	r1, #128	; 0x80
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 fb7a 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ee40:	2303      	movs	r3, #3
 800ee42:	e038      	b.n	800eeb6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10b      	bne.n	800ee62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	3302      	adds	r3, #2
 800ee5e:	61bb      	str	r3, [r7, #24]
 800ee60:	e007      	b.n	800ee72 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1cc      	bne.n	800ee2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	2200      	movs	r2, #0
 800ee98:	2140      	movs	r1, #64	; 0x40
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f000 fb47 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e005      	b.n	800eeb6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2220      	movs	r2, #32
 800eeae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	e000      	b.n	800eeb6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800eeb4:	2302      	movs	r3, #2
  }
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3720      	adds	r7, #32
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b088      	sub	sp, #32
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eec8:	2300      	movs	r3, #0
 800eeca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	431a      	orrs	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	4313      	orrs	r3, r2
 800eee2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	4ba7      	ldr	r3, [pc, #668]	; (800f188 <UART_SetConfig+0x2c8>)
 800eeec:	4013      	ands	r3, r2
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6812      	ldr	r2, [r2, #0]
 800eef2:	6979      	ldr	r1, [r7, #20]
 800eef4:	430b      	orrs	r3, r1
 800eef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68da      	ldr	r2, [r3, #12]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6a1b      	ldr	r3, [r3, #32]
 800ef18:	697a      	ldr	r2, [r7, #20]
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	430a      	orrs	r2, r1
 800ef30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a95      	ldr	r2, [pc, #596]	; (800f18c <UART_SetConfig+0x2cc>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d120      	bne.n	800ef7e <UART_SetConfig+0xbe>
 800ef3c:	4b94      	ldr	r3, [pc, #592]	; (800f190 <UART_SetConfig+0x2d0>)
 800ef3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef42:	f003 0303 	and.w	r3, r3, #3
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d816      	bhi.n	800ef78 <UART_SetConfig+0xb8>
 800ef4a:	a201      	add	r2, pc, #4	; (adr r2, 800ef50 <UART_SetConfig+0x90>)
 800ef4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef50:	0800ef61 	.word	0x0800ef61
 800ef54:	0800ef6d 	.word	0x0800ef6d
 800ef58:	0800ef67 	.word	0x0800ef67
 800ef5c:	0800ef73 	.word	0x0800ef73
 800ef60:	2301      	movs	r3, #1
 800ef62:	77fb      	strb	r3, [r7, #31]
 800ef64:	e14f      	b.n	800f206 <UART_SetConfig+0x346>
 800ef66:	2302      	movs	r3, #2
 800ef68:	77fb      	strb	r3, [r7, #31]
 800ef6a:	e14c      	b.n	800f206 <UART_SetConfig+0x346>
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	77fb      	strb	r3, [r7, #31]
 800ef70:	e149      	b.n	800f206 <UART_SetConfig+0x346>
 800ef72:	2308      	movs	r3, #8
 800ef74:	77fb      	strb	r3, [r7, #31]
 800ef76:	e146      	b.n	800f206 <UART_SetConfig+0x346>
 800ef78:	2310      	movs	r3, #16
 800ef7a:	77fb      	strb	r3, [r7, #31]
 800ef7c:	e143      	b.n	800f206 <UART_SetConfig+0x346>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a84      	ldr	r2, [pc, #528]	; (800f194 <UART_SetConfig+0x2d4>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d132      	bne.n	800efee <UART_SetConfig+0x12e>
 800ef88:	4b81      	ldr	r3, [pc, #516]	; (800f190 <UART_SetConfig+0x2d0>)
 800ef8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef8e:	f003 030c 	and.w	r3, r3, #12
 800ef92:	2b0c      	cmp	r3, #12
 800ef94:	d828      	bhi.n	800efe8 <UART_SetConfig+0x128>
 800ef96:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <UART_SetConfig+0xdc>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800efd1 	.word	0x0800efd1
 800efa0:	0800efe9 	.word	0x0800efe9
 800efa4:	0800efe9 	.word	0x0800efe9
 800efa8:	0800efe9 	.word	0x0800efe9
 800efac:	0800efdd 	.word	0x0800efdd
 800efb0:	0800efe9 	.word	0x0800efe9
 800efb4:	0800efe9 	.word	0x0800efe9
 800efb8:	0800efe9 	.word	0x0800efe9
 800efbc:	0800efd7 	.word	0x0800efd7
 800efc0:	0800efe9 	.word	0x0800efe9
 800efc4:	0800efe9 	.word	0x0800efe9
 800efc8:	0800efe9 	.word	0x0800efe9
 800efcc:	0800efe3 	.word	0x0800efe3
 800efd0:	2300      	movs	r3, #0
 800efd2:	77fb      	strb	r3, [r7, #31]
 800efd4:	e117      	b.n	800f206 <UART_SetConfig+0x346>
 800efd6:	2302      	movs	r3, #2
 800efd8:	77fb      	strb	r3, [r7, #31]
 800efda:	e114      	b.n	800f206 <UART_SetConfig+0x346>
 800efdc:	2304      	movs	r3, #4
 800efde:	77fb      	strb	r3, [r7, #31]
 800efe0:	e111      	b.n	800f206 <UART_SetConfig+0x346>
 800efe2:	2308      	movs	r3, #8
 800efe4:	77fb      	strb	r3, [r7, #31]
 800efe6:	e10e      	b.n	800f206 <UART_SetConfig+0x346>
 800efe8:	2310      	movs	r3, #16
 800efea:	77fb      	strb	r3, [r7, #31]
 800efec:	e10b      	b.n	800f206 <UART_SetConfig+0x346>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a69      	ldr	r2, [pc, #420]	; (800f198 <UART_SetConfig+0x2d8>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d120      	bne.n	800f03a <UART_SetConfig+0x17a>
 800eff8:	4b65      	ldr	r3, [pc, #404]	; (800f190 <UART_SetConfig+0x2d0>)
 800effa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800effe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f002:	2b30      	cmp	r3, #48	; 0x30
 800f004:	d013      	beq.n	800f02e <UART_SetConfig+0x16e>
 800f006:	2b30      	cmp	r3, #48	; 0x30
 800f008:	d814      	bhi.n	800f034 <UART_SetConfig+0x174>
 800f00a:	2b20      	cmp	r3, #32
 800f00c:	d009      	beq.n	800f022 <UART_SetConfig+0x162>
 800f00e:	2b20      	cmp	r3, #32
 800f010:	d810      	bhi.n	800f034 <UART_SetConfig+0x174>
 800f012:	2b00      	cmp	r3, #0
 800f014:	d002      	beq.n	800f01c <UART_SetConfig+0x15c>
 800f016:	2b10      	cmp	r3, #16
 800f018:	d006      	beq.n	800f028 <UART_SetConfig+0x168>
 800f01a:	e00b      	b.n	800f034 <UART_SetConfig+0x174>
 800f01c:	2300      	movs	r3, #0
 800f01e:	77fb      	strb	r3, [r7, #31]
 800f020:	e0f1      	b.n	800f206 <UART_SetConfig+0x346>
 800f022:	2302      	movs	r3, #2
 800f024:	77fb      	strb	r3, [r7, #31]
 800f026:	e0ee      	b.n	800f206 <UART_SetConfig+0x346>
 800f028:	2304      	movs	r3, #4
 800f02a:	77fb      	strb	r3, [r7, #31]
 800f02c:	e0eb      	b.n	800f206 <UART_SetConfig+0x346>
 800f02e:	2308      	movs	r3, #8
 800f030:	77fb      	strb	r3, [r7, #31]
 800f032:	e0e8      	b.n	800f206 <UART_SetConfig+0x346>
 800f034:	2310      	movs	r3, #16
 800f036:	77fb      	strb	r3, [r7, #31]
 800f038:	e0e5      	b.n	800f206 <UART_SetConfig+0x346>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a57      	ldr	r2, [pc, #348]	; (800f19c <UART_SetConfig+0x2dc>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d120      	bne.n	800f086 <UART_SetConfig+0x1c6>
 800f044:	4b52      	ldr	r3, [pc, #328]	; (800f190 <UART_SetConfig+0x2d0>)
 800f046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f04a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f04e:	2bc0      	cmp	r3, #192	; 0xc0
 800f050:	d013      	beq.n	800f07a <UART_SetConfig+0x1ba>
 800f052:	2bc0      	cmp	r3, #192	; 0xc0
 800f054:	d814      	bhi.n	800f080 <UART_SetConfig+0x1c0>
 800f056:	2b80      	cmp	r3, #128	; 0x80
 800f058:	d009      	beq.n	800f06e <UART_SetConfig+0x1ae>
 800f05a:	2b80      	cmp	r3, #128	; 0x80
 800f05c:	d810      	bhi.n	800f080 <UART_SetConfig+0x1c0>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <UART_SetConfig+0x1a8>
 800f062:	2b40      	cmp	r3, #64	; 0x40
 800f064:	d006      	beq.n	800f074 <UART_SetConfig+0x1b4>
 800f066:	e00b      	b.n	800f080 <UART_SetConfig+0x1c0>
 800f068:	2300      	movs	r3, #0
 800f06a:	77fb      	strb	r3, [r7, #31]
 800f06c:	e0cb      	b.n	800f206 <UART_SetConfig+0x346>
 800f06e:	2302      	movs	r3, #2
 800f070:	77fb      	strb	r3, [r7, #31]
 800f072:	e0c8      	b.n	800f206 <UART_SetConfig+0x346>
 800f074:	2304      	movs	r3, #4
 800f076:	77fb      	strb	r3, [r7, #31]
 800f078:	e0c5      	b.n	800f206 <UART_SetConfig+0x346>
 800f07a:	2308      	movs	r3, #8
 800f07c:	77fb      	strb	r3, [r7, #31]
 800f07e:	e0c2      	b.n	800f206 <UART_SetConfig+0x346>
 800f080:	2310      	movs	r3, #16
 800f082:	77fb      	strb	r3, [r7, #31]
 800f084:	e0bf      	b.n	800f206 <UART_SetConfig+0x346>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a45      	ldr	r2, [pc, #276]	; (800f1a0 <UART_SetConfig+0x2e0>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d125      	bne.n	800f0dc <UART_SetConfig+0x21c>
 800f090:	4b3f      	ldr	r3, [pc, #252]	; (800f190 <UART_SetConfig+0x2d0>)
 800f092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f09a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f09e:	d017      	beq.n	800f0d0 <UART_SetConfig+0x210>
 800f0a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f0a4:	d817      	bhi.n	800f0d6 <UART_SetConfig+0x216>
 800f0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0aa:	d00b      	beq.n	800f0c4 <UART_SetConfig+0x204>
 800f0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0b0:	d811      	bhi.n	800f0d6 <UART_SetConfig+0x216>
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <UART_SetConfig+0x1fe>
 800f0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0ba:	d006      	beq.n	800f0ca <UART_SetConfig+0x20a>
 800f0bc:	e00b      	b.n	800f0d6 <UART_SetConfig+0x216>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	77fb      	strb	r3, [r7, #31]
 800f0c2:	e0a0      	b.n	800f206 <UART_SetConfig+0x346>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	77fb      	strb	r3, [r7, #31]
 800f0c8:	e09d      	b.n	800f206 <UART_SetConfig+0x346>
 800f0ca:	2304      	movs	r3, #4
 800f0cc:	77fb      	strb	r3, [r7, #31]
 800f0ce:	e09a      	b.n	800f206 <UART_SetConfig+0x346>
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	77fb      	strb	r3, [r7, #31]
 800f0d4:	e097      	b.n	800f206 <UART_SetConfig+0x346>
 800f0d6:	2310      	movs	r3, #16
 800f0d8:	77fb      	strb	r3, [r7, #31]
 800f0da:	e094      	b.n	800f206 <UART_SetConfig+0x346>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a30      	ldr	r2, [pc, #192]	; (800f1a4 <UART_SetConfig+0x2e4>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d125      	bne.n	800f132 <UART_SetConfig+0x272>
 800f0e6:	4b2a      	ldr	r3, [pc, #168]	; (800f190 <UART_SetConfig+0x2d0>)
 800f0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f0f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f0f4:	d017      	beq.n	800f126 <UART_SetConfig+0x266>
 800f0f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f0fa:	d817      	bhi.n	800f12c <UART_SetConfig+0x26c>
 800f0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f100:	d00b      	beq.n	800f11a <UART_SetConfig+0x25a>
 800f102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f106:	d811      	bhi.n	800f12c <UART_SetConfig+0x26c>
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <UART_SetConfig+0x254>
 800f10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f110:	d006      	beq.n	800f120 <UART_SetConfig+0x260>
 800f112:	e00b      	b.n	800f12c <UART_SetConfig+0x26c>
 800f114:	2301      	movs	r3, #1
 800f116:	77fb      	strb	r3, [r7, #31]
 800f118:	e075      	b.n	800f206 <UART_SetConfig+0x346>
 800f11a:	2302      	movs	r3, #2
 800f11c:	77fb      	strb	r3, [r7, #31]
 800f11e:	e072      	b.n	800f206 <UART_SetConfig+0x346>
 800f120:	2304      	movs	r3, #4
 800f122:	77fb      	strb	r3, [r7, #31]
 800f124:	e06f      	b.n	800f206 <UART_SetConfig+0x346>
 800f126:	2308      	movs	r3, #8
 800f128:	77fb      	strb	r3, [r7, #31]
 800f12a:	e06c      	b.n	800f206 <UART_SetConfig+0x346>
 800f12c:	2310      	movs	r3, #16
 800f12e:	77fb      	strb	r3, [r7, #31]
 800f130:	e069      	b.n	800f206 <UART_SetConfig+0x346>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a1c      	ldr	r2, [pc, #112]	; (800f1a8 <UART_SetConfig+0x2e8>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d137      	bne.n	800f1ac <UART_SetConfig+0x2ec>
 800f13c:	4b14      	ldr	r3, [pc, #80]	; (800f190 <UART_SetConfig+0x2d0>)
 800f13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f142:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f146:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f14a:	d017      	beq.n	800f17c <UART_SetConfig+0x2bc>
 800f14c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f150:	d817      	bhi.n	800f182 <UART_SetConfig+0x2c2>
 800f152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f156:	d00b      	beq.n	800f170 <UART_SetConfig+0x2b0>
 800f158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f15c:	d811      	bhi.n	800f182 <UART_SetConfig+0x2c2>
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d003      	beq.n	800f16a <UART_SetConfig+0x2aa>
 800f162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f166:	d006      	beq.n	800f176 <UART_SetConfig+0x2b6>
 800f168:	e00b      	b.n	800f182 <UART_SetConfig+0x2c2>
 800f16a:	2300      	movs	r3, #0
 800f16c:	77fb      	strb	r3, [r7, #31]
 800f16e:	e04a      	b.n	800f206 <UART_SetConfig+0x346>
 800f170:	2302      	movs	r3, #2
 800f172:	77fb      	strb	r3, [r7, #31]
 800f174:	e047      	b.n	800f206 <UART_SetConfig+0x346>
 800f176:	2304      	movs	r3, #4
 800f178:	77fb      	strb	r3, [r7, #31]
 800f17a:	e044      	b.n	800f206 <UART_SetConfig+0x346>
 800f17c:	2308      	movs	r3, #8
 800f17e:	77fb      	strb	r3, [r7, #31]
 800f180:	e041      	b.n	800f206 <UART_SetConfig+0x346>
 800f182:	2310      	movs	r3, #16
 800f184:	77fb      	strb	r3, [r7, #31]
 800f186:	e03e      	b.n	800f206 <UART_SetConfig+0x346>
 800f188:	efff69f3 	.word	0xefff69f3
 800f18c:	40011000 	.word	0x40011000
 800f190:	40023800 	.word	0x40023800
 800f194:	40004400 	.word	0x40004400
 800f198:	40004800 	.word	0x40004800
 800f19c:	40004c00 	.word	0x40004c00
 800f1a0:	40005000 	.word	0x40005000
 800f1a4:	40011400 	.word	0x40011400
 800f1a8:	40007800 	.word	0x40007800
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a71      	ldr	r2, [pc, #452]	; (800f378 <UART_SetConfig+0x4b8>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d125      	bne.n	800f202 <UART_SetConfig+0x342>
 800f1b6:	4b71      	ldr	r3, [pc, #452]	; (800f37c <UART_SetConfig+0x4bc>)
 800f1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f1c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f1c4:	d017      	beq.n	800f1f6 <UART_SetConfig+0x336>
 800f1c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f1ca:	d817      	bhi.n	800f1fc <UART_SetConfig+0x33c>
 800f1cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1d0:	d00b      	beq.n	800f1ea <UART_SetConfig+0x32a>
 800f1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1d6:	d811      	bhi.n	800f1fc <UART_SetConfig+0x33c>
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <UART_SetConfig+0x324>
 800f1dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1e0:	d006      	beq.n	800f1f0 <UART_SetConfig+0x330>
 800f1e2:	e00b      	b.n	800f1fc <UART_SetConfig+0x33c>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	77fb      	strb	r3, [r7, #31]
 800f1e8:	e00d      	b.n	800f206 <UART_SetConfig+0x346>
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	77fb      	strb	r3, [r7, #31]
 800f1ee:	e00a      	b.n	800f206 <UART_SetConfig+0x346>
 800f1f0:	2304      	movs	r3, #4
 800f1f2:	77fb      	strb	r3, [r7, #31]
 800f1f4:	e007      	b.n	800f206 <UART_SetConfig+0x346>
 800f1f6:	2308      	movs	r3, #8
 800f1f8:	77fb      	strb	r3, [r7, #31]
 800f1fa:	e004      	b.n	800f206 <UART_SetConfig+0x346>
 800f1fc:	2310      	movs	r3, #16
 800f1fe:	77fb      	strb	r3, [r7, #31]
 800f200:	e001      	b.n	800f206 <UART_SetConfig+0x346>
 800f202:	2310      	movs	r3, #16
 800f204:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	69db      	ldr	r3, [r3, #28]
 800f20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f20e:	d15b      	bne.n	800f2c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800f210:	7ffb      	ldrb	r3, [r7, #31]
 800f212:	2b08      	cmp	r3, #8
 800f214:	d827      	bhi.n	800f266 <UART_SetConfig+0x3a6>
 800f216:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <UART_SetConfig+0x35c>)
 800f218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21c:	0800f241 	.word	0x0800f241
 800f220:	0800f249 	.word	0x0800f249
 800f224:	0800f251 	.word	0x0800f251
 800f228:	0800f267 	.word	0x0800f267
 800f22c:	0800f257 	.word	0x0800f257
 800f230:	0800f267 	.word	0x0800f267
 800f234:	0800f267 	.word	0x0800f267
 800f238:	0800f267 	.word	0x0800f267
 800f23c:	0800f25f 	.word	0x0800f25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f240:	f7fc fe3c 	bl	800bebc <HAL_RCC_GetPCLK1Freq>
 800f244:	61b8      	str	r0, [r7, #24]
        break;
 800f246:	e013      	b.n	800f270 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f248:	f7fc fe4c 	bl	800bee4 <HAL_RCC_GetPCLK2Freq>
 800f24c:	61b8      	str	r0, [r7, #24]
        break;
 800f24e:	e00f      	b.n	800f270 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f250:	4b4b      	ldr	r3, [pc, #300]	; (800f380 <UART_SetConfig+0x4c0>)
 800f252:	61bb      	str	r3, [r7, #24]
        break;
 800f254:	e00c      	b.n	800f270 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f256:	f7fc fd6f 	bl	800bd38 <HAL_RCC_GetSysClockFreq>
 800f25a:	61b8      	str	r0, [r7, #24]
        break;
 800f25c:	e008      	b.n	800f270 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f25e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f262:	61bb      	str	r3, [r7, #24]
        break;
 800f264:	e004      	b.n	800f270 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800f266:	2300      	movs	r3, #0
 800f268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	77bb      	strb	r3, [r7, #30]
        break;
 800f26e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d074      	beq.n	800f360 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	005a      	lsls	r2, r3, #1
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	085b      	lsrs	r3, r3, #1
 800f280:	441a      	add	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	fbb2 f3f3 	udiv	r3, r2, r3
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	2b0f      	cmp	r3, #15
 800f292:	d916      	bls.n	800f2c2 <UART_SetConfig+0x402>
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f29a:	d212      	bcs.n	800f2c2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	f023 030f 	bic.w	r3, r3, #15
 800f2a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	085b      	lsrs	r3, r3, #1
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	f003 0307 	and.w	r3, r3, #7
 800f2b0:	b29a      	uxth	r2, r3
 800f2b2:	89fb      	ldrh	r3, [r7, #14]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	89fa      	ldrh	r2, [r7, #14]
 800f2be:	60da      	str	r2, [r3, #12]
 800f2c0:	e04e      	b.n	800f360 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	77bb      	strb	r3, [r7, #30]
 800f2c6:	e04b      	b.n	800f360 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2c8:	7ffb      	ldrb	r3, [r7, #31]
 800f2ca:	2b08      	cmp	r3, #8
 800f2cc:	d827      	bhi.n	800f31e <UART_SetConfig+0x45e>
 800f2ce:	a201      	add	r2, pc, #4	; (adr r2, 800f2d4 <UART_SetConfig+0x414>)
 800f2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d4:	0800f2f9 	.word	0x0800f2f9
 800f2d8:	0800f301 	.word	0x0800f301
 800f2dc:	0800f309 	.word	0x0800f309
 800f2e0:	0800f31f 	.word	0x0800f31f
 800f2e4:	0800f30f 	.word	0x0800f30f
 800f2e8:	0800f31f 	.word	0x0800f31f
 800f2ec:	0800f31f 	.word	0x0800f31f
 800f2f0:	0800f31f 	.word	0x0800f31f
 800f2f4:	0800f317 	.word	0x0800f317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2f8:	f7fc fde0 	bl	800bebc <HAL_RCC_GetPCLK1Freq>
 800f2fc:	61b8      	str	r0, [r7, #24]
        break;
 800f2fe:	e013      	b.n	800f328 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f300:	f7fc fdf0 	bl	800bee4 <HAL_RCC_GetPCLK2Freq>
 800f304:	61b8      	str	r0, [r7, #24]
        break;
 800f306:	e00f      	b.n	800f328 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f308:	4b1d      	ldr	r3, [pc, #116]	; (800f380 <UART_SetConfig+0x4c0>)
 800f30a:	61bb      	str	r3, [r7, #24]
        break;
 800f30c:	e00c      	b.n	800f328 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f30e:	f7fc fd13 	bl	800bd38 <HAL_RCC_GetSysClockFreq>
 800f312:	61b8      	str	r0, [r7, #24]
        break;
 800f314:	e008      	b.n	800f328 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f31a:	61bb      	str	r3, [r7, #24]
        break;
 800f31c:	e004      	b.n	800f328 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800f31e:	2300      	movs	r3, #0
 800f320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	77bb      	strb	r3, [r7, #30]
        break;
 800f326:	bf00      	nop
    }

    if (pclk != 0U)
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d018      	beq.n	800f360 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	085a      	lsrs	r2, r3, #1
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	441a      	add	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f340:	b29b      	uxth	r3, r3
 800f342:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	2b0f      	cmp	r3, #15
 800f348:	d908      	bls.n	800f35c <UART_SetConfig+0x49c>
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f350:	d204      	bcs.n	800f35c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	693a      	ldr	r2, [r7, #16]
 800f358:	60da      	str	r2, [r3, #12]
 800f35a:	e001      	b.n	800f360 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800f35c:	2301      	movs	r3, #1
 800f35e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f36c:	7fbb      	ldrb	r3, [r7, #30]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3720      	adds	r7, #32
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	40007c00 	.word	0x40007c00
 800f37c:	40023800 	.word	0x40023800
 800f380:	00f42400 	.word	0x00f42400

0800f384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f390:	f003 0301 	and.w	r3, r3, #1
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00a      	beq.n	800f3ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	430a      	orrs	r2, r1
 800f3ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	f003 0302 	and.w	r3, r3, #2
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00a      	beq.n	800f3d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	430a      	orrs	r2, r1
 800f3ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d4:	f003 0304 	and.w	r3, r3, #4
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00a      	beq.n	800f3f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f6:	f003 0308 	and.w	r3, r3, #8
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00a      	beq.n	800f414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	430a      	orrs	r2, r1
 800f412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f418:	f003 0310 	and.w	r3, r3, #16
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d00a      	beq.n	800f436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	430a      	orrs	r2, r1
 800f434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43a:	f003 0320 	and.w	r3, r3, #32
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00a      	beq.n	800f458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	430a      	orrs	r2, r1
 800f456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f460:	2b00      	cmp	r3, #0
 800f462:	d01a      	beq.n	800f49a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	430a      	orrs	r2, r1
 800f478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f482:	d10a      	bne.n	800f49a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00a      	beq.n	800f4bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	430a      	orrs	r2, r1
 800f4ba:	605a      	str	r2, [r3, #4]
  }
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4d8:	f7f6 fcc0 	bl	8005e5c <HAL_GetTick>
 800f4dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f003 0308 	and.w	r3, r3, #8
 800f4e8:	2b08      	cmp	r3, #8
 800f4ea:	d10e      	bne.n	800f50a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f817 	bl	800f52e <UART_WaitOnFlagUntilTimeout>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f506:	2303      	movs	r3, #3
 800f508:	e00d      	b.n	800f526 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2220      	movs	r2, #32
 800f50e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2220      	movs	r2, #32
 800f514:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	60b9      	str	r1, [r7, #8]
 800f538:	603b      	str	r3, [r7, #0]
 800f53a:	4613      	mov	r3, r2
 800f53c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f53e:	e05e      	b.n	800f5fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f546:	d05a      	beq.n	800f5fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f548:	f7f6 fc88 	bl	8005e5c <HAL_GetTick>
 800f54c:	4602      	mov	r2, r0
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	69ba      	ldr	r2, [r7, #24]
 800f554:	429a      	cmp	r2, r3
 800f556:	d302      	bcc.n	800f55e <UART_WaitOnFlagUntilTimeout+0x30>
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d11b      	bne.n	800f596 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f56c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	689a      	ldr	r2, [r3, #8]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f022 0201 	bic.w	r2, r2, #1
 800f57c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2220      	movs	r2, #32
 800f582:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2220      	movs	r2, #32
 800f588:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e043      	b.n	800f61e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f003 0304 	and.w	r3, r3, #4
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d02c      	beq.n	800f5fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5b2:	d124      	bne.n	800f5fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f5cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	689a      	ldr	r2, [r3, #8]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f022 0201 	bic.w	r2, r2, #1
 800f5dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2220      	movs	r2, #32
 800f5e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e00f      	b.n	800f61e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	69da      	ldr	r2, [r3, #28]
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	4013      	ands	r3, r2
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	bf0c      	ite	eq
 800f60e:	2301      	moveq	r3, #1
 800f610:	2300      	movne	r3, #0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	461a      	mov	r2, r3
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d091      	beq.n	800f540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3710      	adds	r7, #16
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d027      	beq.n	800f692 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	4b2f      	ldr	r3, [pc, #188]	; (800f708 <FMC_SDRAM_Init+0xe0>)
 800f64c:	4013      	ands	r3, r2
 800f64e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f658:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800f65e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800f664:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800f66a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800f670:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800f676:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800f67c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f682:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	4313      	orrs	r3, r2
 800f688:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	e032      	b.n	800f6f8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f69e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f6a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f6ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	4b12      	ldr	r3, [pc, #72]	; (800f708 <FMC_SDRAM_Init+0xe0>)
 800f6c0:	4013      	ands	r3, r2
 800f6c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f6cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800f6d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800f6d8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800f6de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800f6e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	ffff8000 	.word	0xffff8000

0800f70c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b087      	sub	sp, #28
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d02e      	beq.n	800f784 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f732:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	3b01      	subs	r3, #1
 800f740:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f742:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	3b01      	subs	r3, #1
 800f74a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f74c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	3b01      	subs	r3, #1
 800f754:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f756:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	3b01      	subs	r3, #1
 800f75e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f760:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	695b      	ldr	r3, [r3, #20]
 800f766:	3b01      	subs	r3, #1
 800f768:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f76a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	3b01      	subs	r3, #1
 800f772:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f774:	4313      	orrs	r3, r2
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	4313      	orrs	r3, r2
 800f77a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	609a      	str	r2, [r3, #8]
 800f782:	e039      	b.n	800f7f8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	4b1e      	ldr	r3, [pc, #120]	; (800f808 <FMC_SDRAM_Timing_Init+0xfc>)
 800f78e:	4013      	ands	r3, r2
 800f790:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	3b01      	subs	r3, #1
 800f798:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	695b      	ldr	r3, [r3, #20]
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f7b6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f7c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f7d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f7da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	ff0f0fff 	.word	0xff0f0fff

0800f80c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	691a      	ldr	r2, [r3, #16]
 800f81c:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <FMC_SDRAM_SendCommand+0x44>)
 800f81e:	4013      	ands	r3, r2
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	6811      	ldr	r1, [r2, #0]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	6852      	ldr	r2, [r2, #4]
 800f828:	4311      	orrs	r1, r2
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	6892      	ldr	r2, [r2, #8]
 800f82e:	3a01      	subs	r2, #1
 800f830:	0152      	lsls	r2, r2, #5
 800f832:	4311      	orrs	r1, r2
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	68d2      	ldr	r2, [r2, #12]
 800f838:	0252      	lsls	r2, r2, #9
 800f83a:	430a      	orrs	r2, r1
 800f83c:	431a      	orrs	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	ffc00000 	.word	0xffc00000

0800f854 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	695a      	ldr	r2, [r3, #20]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	431a      	orrs	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	f043 0201 	orr.w	r2, r3, #1
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f023 0201 	bic.w	r2, r3, #1
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	019b      	lsls	r3, r3, #6
 800f8d2:	f043 0220 	orr.w	r2, r3, #32
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4a09      	ldr	r2, [pc, #36]	; (800f908 <USB_FlushTxFifo+0x48>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d901      	bls.n	800f8ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f8e8:	2303      	movs	r3, #3
 800f8ea:	e006      	b.n	800f8fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	f003 0320 	and.w	r3, r3, #32
 800f8f4:	2b20      	cmp	r3, #32
 800f8f6:	d0f0      	beq.n	800f8da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3714      	adds	r7, #20
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	00030d40 	.word	0x00030d40

0800f90c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2210      	movs	r2, #16
 800f91c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3301      	adds	r3, #1
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	4a09      	ldr	r2, [pc, #36]	; (800f94c <USB_FlushRxFifo+0x40>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d901      	bls.n	800f930 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f92c:	2303      	movs	r3, #3
 800f92e:	e006      	b.n	800f93e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	f003 0310 	and.w	r3, r3, #16
 800f938:	2b10      	cmp	r3, #16
 800f93a:	d0f0      	beq.n	800f91e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	00030d40 	.word	0x00030d40

0800f950 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f950:	b480      	push	{r7}
 800f952:	b089      	sub	sp, #36	; 0x24
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	4613      	mov	r3, r2
 800f95c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f966:	88fb      	ldrh	r3, [r7, #6]
 800f968:	3303      	adds	r3, #3
 800f96a:	089b      	lsrs	r3, r3, #2
 800f96c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f96e:	2300      	movs	r3, #0
 800f970:	61bb      	str	r3, [r7, #24]
 800f972:	e00b      	b.n	800f98c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	3304      	adds	r3, #4
 800f984:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	3301      	adds	r3, #1
 800f98a:	61bb      	str	r3, [r7, #24]
 800f98c:	69ba      	ldr	r2, [r7, #24]
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	429a      	cmp	r2, r3
 800f992:	d3ef      	bcc.n	800f974 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f994:	69fb      	ldr	r3, [r7, #28]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3724      	adds	r7, #36	; 0x24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr

0800f9a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f9a2:	b480      	push	{r7}
 800f9a4:	b085      	sub	sp, #20
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	695b      	ldr	r3, [r3, #20]
 800f9ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	4013      	ands	r3, r2
 800f9b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	f003 0301 	and.w	r3, r3, #1
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa02:	f023 0303 	bic.w	r3, r3, #3
 800fa06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	78fb      	ldrb	r3, [r7, #3]
 800fa12:	f003 0303 	and.w	r3, r3, #3
 800fa16:	68f9      	ldr	r1, [r7, #12]
 800fa18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800fa20:	78fb      	ldrb	r3, [r7, #3]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d107      	bne.n	800fa36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fa32:	6053      	str	r3, [r2, #4]
 800fa34:	e009      	b.n	800fa4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800fa36:	78fb      	ldrb	r3, [r7, #3]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d106      	bne.n	800fa4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa42:	461a      	mov	r2, r3
 800fa44:	f241 7370 	movw	r3, #6000	; 0x1770
 800fa48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3714      	adds	r7, #20
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa6a:	695b      	ldr	r3, [r3, #20]
 800fa6c:	b29b      	uxth	r3, r3
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fa7a:	b480      	push	{r7}
 800fa7c:	b089      	sub	sp, #36	; 0x24
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
 800fa82:	460b      	mov	r3, r1
 800fa84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800fa8a:	78fb      	ldrb	r3, [r7, #3]
 800fa8c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	015a      	lsls	r2, r3, #5
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	4413      	add	r3, r2
 800fa9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	0c9b      	lsrs	r3, r3, #18
 800faa2:	f003 0303 	and.w	r3, r3, #3
 800faa6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	015a      	lsls	r2, r3, #5
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	4413      	add	r3, r2
 800fab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	0fdb      	lsrs	r3, r3, #31
 800fab8:	f003 0301 	and.w	r3, r3, #1
 800fabc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	f003 0320 	and.w	r3, r3, #32
 800fac6:	2b20      	cmp	r3, #32
 800fac8:	d104      	bne.n	800fad4 <USB_HC_Halt+0x5a>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e0e8      	b.n	800fca6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d002      	beq.n	800fae0 <USB_HC_Halt+0x66>
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d173      	bne.n	800fbc8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	4413      	add	r3, r2
 800fae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	0151      	lsls	r1, r2, #5
 800faf2:	69ba      	ldr	r2, [r7, #24]
 800faf4:	440a      	add	r2, r1
 800faf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fafa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fafe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	f003 0320 	and.w	r3, r3, #32
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f040 80cb 	bne.w	800fca4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d143      	bne.n	800fba2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	015a      	lsls	r2, r3, #5
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	4413      	add	r3, r2
 800fb22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	697a      	ldr	r2, [r7, #20]
 800fb2a:	0151      	lsls	r1, r2, #5
 800fb2c:	69ba      	ldr	r2, [r7, #24]
 800fb2e:	440a      	add	r2, r1
 800fb30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	0151      	lsls	r1, r2, #5
 800fb4c:	69ba      	ldr	r2, [r7, #24]
 800fb4e:	440a      	add	r2, r1
 800fb50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	015a      	lsls	r2, r3, #5
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	4413      	add	r3, r2
 800fb62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	697a      	ldr	r2, [r7, #20]
 800fb6a:	0151      	lsls	r1, r2, #5
 800fb6c:	69ba      	ldr	r2, [r7, #24]
 800fb6e:	440a      	add	r2, r1
 800fb70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fb74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb78:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	61fb      	str	r3, [r7, #28]
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb86:	d81d      	bhi.n	800fbc4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	015a      	lsls	r2, r3, #5
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	4413      	add	r3, r2
 800fb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb9e:	d0ec      	beq.n	800fb7a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fba0:	e080      	b.n	800fca4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	015a      	lsls	r2, r3, #5
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	4413      	add	r3, r2
 800fbaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	697a      	ldr	r2, [r7, #20]
 800fbb2:	0151      	lsls	r1, r2, #5
 800fbb4:	69ba      	ldr	r2, [r7, #24]
 800fbb6:	440a      	add	r2, r1
 800fbb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fbbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fbc0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fbc2:	e06f      	b.n	800fca4 <USB_HC_Halt+0x22a>
            break;
 800fbc4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fbc6:	e06d      	b.n	800fca4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	015a      	lsls	r2, r3, #5
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	4413      	add	r3, r2
 800fbd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	0151      	lsls	r1, r2, #5
 800fbda:	69ba      	ldr	r2, [r7, #24]
 800fbdc:	440a      	add	r2, r1
 800fbde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fbe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbe6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d143      	bne.n	800fc80 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	015a      	lsls	r2, r3, #5
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	4413      	add	r3, r2
 800fc00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	0151      	lsls	r1, r2, #5
 800fc0a:	69ba      	ldr	r2, [r7, #24]
 800fc0c:	440a      	add	r2, r1
 800fc0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	0151      	lsls	r1, r2, #5
 800fc2a:	69ba      	ldr	r2, [r7, #24]
 800fc2c:	440a      	add	r2, r1
 800fc2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	015a      	lsls	r2, r3, #5
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	4413      	add	r3, r2
 800fc40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	0151      	lsls	r1, r2, #5
 800fc4a:	69ba      	ldr	r2, [r7, #24]
 800fc4c:	440a      	add	r2, r1
 800fc4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fc56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	61fb      	str	r3, [r7, #28]
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc64:	d81d      	bhi.n	800fca2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	015a      	lsls	r2, r3, #5
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc7c:	d0ec      	beq.n	800fc58 <USB_HC_Halt+0x1de>
 800fc7e:	e011      	b.n	800fca4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	015a      	lsls	r2, r3, #5
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	4413      	add	r3, r2
 800fc88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	0151      	lsls	r1, r2, #5
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	440a      	add	r2, r1
 800fc96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	e000      	b.n	800fca4 <USB_HC_Halt+0x22a>
          break;
 800fca2:	bf00      	nop
    }
  }

  return HAL_OK;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3724      	adds	r7, #36	; 0x24
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b086      	sub	sp, #24
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff fdea 	bl	800f89c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800fcc8:	2110      	movs	r1, #16
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff fdf8 	bl	800f8c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff fe1b 	bl	800f90c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	613b      	str	r3, [r7, #16]
 800fcda:	e01f      	b.n	800fd1c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcf2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcfa:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd02:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	015a      	lsls	r2, r3, #5
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	4413      	add	r3, r2
 800fd0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd10:	461a      	mov	r2, r3
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	613b      	str	r3, [r7, #16]
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	2b0f      	cmp	r3, #15
 800fd20:	d9dc      	bls.n	800fcdc <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fd22:	2300      	movs	r3, #0
 800fd24:	613b      	str	r3, [r7, #16]
 800fd26:	e034      	b.n	800fd92 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	015a      	lsls	r2, r3, #5
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd3e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fd46:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd4e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	3301      	adds	r3, #1
 800fd66:	617b      	str	r3, [r7, #20]
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd6e:	d80c      	bhi.n	800fd8a <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd86:	d0ec      	beq.n	800fd62 <USB_StopHost+0xb0>
 800fd88:	e000      	b.n	800fd8c <USB_StopHost+0xda>
        break;
 800fd8a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	613b      	str	r3, [r7, #16]
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	d9c7      	bls.n	800fd28 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fda4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdac:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff fd63 	bl	800f87a <USB_EnableGlobalInt>

  return HAL_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b082      	sub	sp, #8
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fdcc:	1c5a      	adds	r2, r3, #1
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f804 	bl	800fde2 <USBH_HandleSof>
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b082      	sub	sp, #8
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b0b      	cmp	r3, #11
 800fdf2:	d10a      	bne.n	800fe0a <USBH_HandleSof+0x28>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d005      	beq.n	800fe0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe04:	699b      	ldr	r3, [r3, #24]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	4798      	blx	r3
  }
}
 800fe0a:	bf00      	nop
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fe12:	b480      	push	{r7}
 800fe14:	b083      	sub	sp, #12
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800fe22:	bf00      	nop
}
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b083      	sub	sp, #12
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fe3e:	bf00      	nop
}
 800fe40:	370c      	adds	r7, #12
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr

0800fe4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fe4a:	b480      	push	{r7}
 800fe4c:	b083      	sub	sp, #12
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fa9d 	bl	80103d8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	791b      	ldrb	r3, [r3, #4]
 800fea2:	4619      	mov	r1, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f80b 	bl	800fec0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	795b      	ldrb	r3, [r3, #5]
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f805 	bl	800fec0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fecc:	78fb      	ldrb	r3, [r7, #3]
 800fece:	2b0a      	cmp	r3, #10
 800fed0:	d80d      	bhi.n	800feee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fed2:	78fb      	ldrb	r3, [r7, #3]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	33e0      	adds	r3, #224	; 0xe0
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	4413      	add	r3, r2
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	78fb      	ldrb	r3, [r7, #3]
 800fee0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fee4:	6879      	ldr	r1, [r7, #4]
 800fee6:	33e0      	adds	r3, #224	; 0xe0
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	440b      	add	r3, r1
 800feec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	689a      	ldr	r2, [r3, #8]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	683a      	ldr	r2, [r7, #0]
 800ff26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	1c5a      	adds	r2, r3, #1
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	601a      	str	r2, [r3, #0]
}
 800ff38:	bf00      	nop
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	691b      	ldr	r3, [r3, #16]
 800ff50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	6892      	ldr	r2, [r2, #8]
 800ff5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	6852      	ldr	r2, [r2, #4]
 800ff64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d103      	bne.n	800ff78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	689a      	ldr	r2, [r3, #8]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	1e5a      	subs	r2, r3, #1
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffa2:	4b4f      	ldr	r3, [pc, #316]	; (80100e0 <xTaskIncrementTick+0x148>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f040 808a 	bne.w	80100c0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffac:	4b4d      	ldr	r3, [pc, #308]	; (80100e4 <xTaskIncrementTick+0x14c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffb4:	4a4b      	ldr	r2, [pc, #300]	; (80100e4 <xTaskIncrementTick+0x14c>)
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d122      	bne.n	8010006 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ffc0:	4b49      	ldr	r3, [pc, #292]	; (80100e8 <xTaskIncrementTick+0x150>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00c      	beq.n	800ffe4 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ffca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffce:	b672      	cpsid	i
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	b662      	cpsie	i
 800ffde:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ffe0:	bf00      	nop
 800ffe2:	e7fe      	b.n	800ffe2 <xTaskIncrementTick+0x4a>
 800ffe4:	4b40      	ldr	r3, [pc, #256]	; (80100e8 <xTaskIncrementTick+0x150>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	60fb      	str	r3, [r7, #12]
 800ffea:	4b40      	ldr	r3, [pc, #256]	; (80100ec <xTaskIncrementTick+0x154>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a3e      	ldr	r2, [pc, #248]	; (80100e8 <xTaskIncrementTick+0x150>)
 800fff0:	6013      	str	r3, [r2, #0]
 800fff2:	4a3e      	ldr	r2, [pc, #248]	; (80100ec <xTaskIncrementTick+0x154>)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	4b3d      	ldr	r3, [pc, #244]	; (80100f0 <xTaskIncrementTick+0x158>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	3301      	adds	r3, #1
 800fffe:	4a3c      	ldr	r2, [pc, #240]	; (80100f0 <xTaskIncrementTick+0x158>)
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	f000 f905 	bl	8010210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010006:	4b3b      	ldr	r3, [pc, #236]	; (80100f4 <xTaskIncrementTick+0x15c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	693a      	ldr	r2, [r7, #16]
 801000c:	429a      	cmp	r2, r3
 801000e:	d348      	bcc.n	80100a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010010:	4b35      	ldr	r3, [pc, #212]	; (80100e8 <xTaskIncrementTick+0x150>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801001a:	4b36      	ldr	r3, [pc, #216]	; (80100f4 <xTaskIncrementTick+0x15c>)
 801001c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010020:	601a      	str	r2, [r3, #0]
					break;
 8010022:	e03e      	b.n	80100a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010024:	4b30      	ldr	r3, [pc, #192]	; (80100e8 <xTaskIncrementTick+0x150>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010034:	693a      	ldr	r2, [r7, #16]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	429a      	cmp	r2, r3
 801003a:	d203      	bcs.n	8010044 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801003c:	4a2d      	ldr	r2, [pc, #180]	; (80100f4 <xTaskIncrementTick+0x15c>)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010042:	e02e      	b.n	80100a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	3304      	adds	r3, #4
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff ff7b 	bl	800ff44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010052:	2b00      	cmp	r3, #0
 8010054:	d004      	beq.n	8010060 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	3318      	adds	r3, #24
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff ff72 	bl	800ff44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010064:	2201      	movs	r2, #1
 8010066:	409a      	lsls	r2, r3
 8010068:	4b23      	ldr	r3, [pc, #140]	; (80100f8 <xTaskIncrementTick+0x160>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4313      	orrs	r3, r2
 801006e:	4a22      	ldr	r2, [pc, #136]	; (80100f8 <xTaskIncrementTick+0x160>)
 8010070:	6013      	str	r3, [r2, #0]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010076:	4613      	mov	r3, r2
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	4413      	add	r3, r2
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4a1f      	ldr	r2, [pc, #124]	; (80100fc <xTaskIncrementTick+0x164>)
 8010080:	441a      	add	r2, r3
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	3304      	adds	r3, #4
 8010086:	4619      	mov	r1, r3
 8010088:	4610      	mov	r0, r2
 801008a:	f7ff ff37 	bl	800fefc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010092:	4b1b      	ldr	r3, [pc, #108]	; (8010100 <xTaskIncrementTick+0x168>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010098:	429a      	cmp	r2, r3
 801009a:	d3b9      	bcc.n	8010010 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801009c:	2301      	movs	r3, #1
 801009e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100a0:	e7b6      	b.n	8010010 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100a2:	4b17      	ldr	r3, [pc, #92]	; (8010100 <xTaskIncrementTick+0x168>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a8:	4914      	ldr	r1, [pc, #80]	; (80100fc <xTaskIncrementTick+0x164>)
 80100aa:	4613      	mov	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	440b      	add	r3, r1
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	d907      	bls.n	80100ca <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80100ba:	2301      	movs	r3, #1
 80100bc:	617b      	str	r3, [r7, #20]
 80100be:	e004      	b.n	80100ca <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80100c0:	4b10      	ldr	r3, [pc, #64]	; (8010104 <xTaskIncrementTick+0x16c>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3301      	adds	r3, #1
 80100c6:	4a0f      	ldr	r2, [pc, #60]	; (8010104 <xTaskIncrementTick+0x16c>)
 80100c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80100ca:	4b0f      	ldr	r3, [pc, #60]	; (8010108 <xTaskIncrementTick+0x170>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80100d2:	2301      	movs	r3, #1
 80100d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80100d6:	697b      	ldr	r3, [r7, #20]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	20000a78 	.word	0x20000a78
 80100e4:	20000a60 	.word	0x20000a60
 80100e8:	20000a58 	.word	0x20000a58
 80100ec:	20000a5c 	.word	0x20000a5c
 80100f0:	20000a70 	.word	0x20000a70
 80100f4:	20000a74 	.word	0x20000a74
 80100f8:	20000a64 	.word	0x20000a64
 80100fc:	200009cc 	.word	0x200009cc
 8010100:	200009c8 	.word	0x200009c8
 8010104:	20000a68 	.word	0x20000a68
 8010108:	20000a6c 	.word	0x20000a6c

0801010c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b088      	sub	sp, #32
 8010110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010112:	4b3a      	ldr	r3, [pc, #232]	; (80101fc <vTaskSwitchContext+0xf0>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d003      	beq.n	8010122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801011a:	4b39      	ldr	r3, [pc, #228]	; (8010200 <vTaskSwitchContext+0xf4>)
 801011c:	2201      	movs	r2, #1
 801011e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010120:	e068      	b.n	80101f4 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8010122:	4b37      	ldr	r3, [pc, #220]	; (8010200 <vTaskSwitchContext+0xf4>)
 8010124:	2200      	movs	r2, #0
 8010126:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010128:	4b36      	ldr	r3, [pc, #216]	; (8010204 <vTaskSwitchContext+0xf8>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012e:	61fb      	str	r3, [r7, #28]
 8010130:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010134:	61bb      	str	r3, [r7, #24]
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69ba      	ldr	r2, [r7, #24]
 801013c:	429a      	cmp	r2, r3
 801013e:	d111      	bne.n	8010164 <vTaskSwitchContext+0x58>
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	3304      	adds	r3, #4
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	69ba      	ldr	r2, [r7, #24]
 8010148:	429a      	cmp	r2, r3
 801014a:	d10b      	bne.n	8010164 <vTaskSwitchContext+0x58>
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	3308      	adds	r3, #8
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	429a      	cmp	r2, r3
 8010156:	d105      	bne.n	8010164 <vTaskSwitchContext+0x58>
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	330c      	adds	r3, #12
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	69ba      	ldr	r2, [r7, #24]
 8010160:	429a      	cmp	r2, r3
 8010162:	d008      	beq.n	8010176 <vTaskSwitchContext+0x6a>
 8010164:	4b27      	ldr	r3, [pc, #156]	; (8010204 <vTaskSwitchContext+0xf8>)
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	4b26      	ldr	r3, [pc, #152]	; (8010204 <vTaskSwitchContext+0xf8>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3334      	adds	r3, #52	; 0x34
 801016e:	4619      	mov	r1, r3
 8010170:	4610      	mov	r0, r2
 8010172:	f7f1 f99b 	bl	80014ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010176:	4b24      	ldr	r3, [pc, #144]	; (8010208 <vTaskSwitchContext+0xfc>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	fab3 f383 	clz	r3, r3
 8010182:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010184:	7afb      	ldrb	r3, [r7, #11]
 8010186:	f1c3 031f 	rsb	r3, r3, #31
 801018a:	617b      	str	r3, [r7, #20]
 801018c:	491f      	ldr	r1, [pc, #124]	; (801020c <vTaskSwitchContext+0x100>)
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	4613      	mov	r3, r2
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4413      	add	r3, r2
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	440b      	add	r3, r1
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10c      	bne.n	80101ba <vTaskSwitchContext+0xae>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	b672      	cpsid	i
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	b662      	cpsie	i
 80101b4:	607b      	str	r3, [r7, #4]
}
 80101b6:	bf00      	nop
 80101b8:	e7fe      	b.n	80101b8 <vTaskSwitchContext+0xac>
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	4613      	mov	r3, r2
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	4413      	add	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	4a11      	ldr	r2, [pc, #68]	; (801020c <vTaskSwitchContext+0x100>)
 80101c6:	4413      	add	r3, r2
 80101c8:	613b      	str	r3, [r7, #16]
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	685a      	ldr	r2, [r3, #4]
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	605a      	str	r2, [r3, #4]
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	685a      	ldr	r2, [r3, #4]
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	3308      	adds	r3, #8
 80101dc:	429a      	cmp	r2, r3
 80101de:	d104      	bne.n	80101ea <vTaskSwitchContext+0xde>
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	605a      	str	r2, [r3, #4]
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	4a04      	ldr	r2, [pc, #16]	; (8010204 <vTaskSwitchContext+0xf8>)
 80101f2:	6013      	str	r3, [r2, #0]
}
 80101f4:	bf00      	nop
 80101f6:	3720      	adds	r7, #32
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	20000a78 	.word	0x20000a78
 8010200:	20000a6c 	.word	0x20000a6c
 8010204:	200009c8 	.word	0x200009c8
 8010208:	20000a64 	.word	0x20000a64
 801020c:	200009cc 	.word	0x200009cc

08010210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010216:	4b0c      	ldr	r3, [pc, #48]	; (8010248 <prvResetNextTaskUnblockTime+0x38>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d104      	bne.n	801022a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <prvResetNextTaskUnblockTime+0x3c>)
 8010222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010228:	e008      	b.n	801023c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801022a:	4b07      	ldr	r3, [pc, #28]	; (8010248 <prvResetNextTaskUnblockTime+0x38>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4a04      	ldr	r2, [pc, #16]	; (801024c <prvResetNextTaskUnblockTime+0x3c>)
 801023a:	6013      	str	r3, [r2, #0]
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	20000a58 	.word	0x20000a58
 801024c:	20000a74 	.word	0x20000a74

08010250 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010250:	4b07      	ldr	r3, [pc, #28]	; (8010270 <pxCurrentTCBConst2>)
 8010252:	6819      	ldr	r1, [r3, #0]
 8010254:	6808      	ldr	r0, [r1, #0]
 8010256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025a:	f380 8809 	msr	PSP, r0
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f04f 0000 	mov.w	r0, #0
 8010266:	f380 8811 	msr	BASEPRI, r0
 801026a:	4770      	bx	lr
 801026c:	f3af 8000 	nop.w

08010270 <pxCurrentTCBConst2>:
 8010270:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010274:	bf00      	nop
 8010276:	bf00      	nop
	...

08010280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010280:	f3ef 8009 	mrs	r0, PSP
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	4b15      	ldr	r3, [pc, #84]	; (80102e0 <pxCurrentTCBConst>)
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	f01e 0f10 	tst.w	lr, #16
 8010290:	bf08      	it	eq
 8010292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029a:	6010      	str	r0, [r2, #0]
 801029c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80102a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80102a4:	b672      	cpsid	i
 80102a6:	f380 8811 	msr	BASEPRI, r0
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	b662      	cpsie	i
 80102b4:	f7ff ff2a 	bl	801010c <vTaskSwitchContext>
 80102b8:	f04f 0000 	mov.w	r0, #0
 80102bc:	f380 8811 	msr	BASEPRI, r0
 80102c0:	bc09      	pop	{r0, r3}
 80102c2:	6819      	ldr	r1, [r3, #0]
 80102c4:	6808      	ldr	r0, [r1, #0]
 80102c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ca:	f01e 0f10 	tst.w	lr, #16
 80102ce:	bf08      	it	eq
 80102d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80102d4:	f380 8809 	msr	PSP, r0
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop

080102e0 <pxCurrentTCBConst>:
 80102e0:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop

080102e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	b672      	cpsid	i
 80102f4:	f383 8811 	msr	BASEPRI, r3
 80102f8:	f3bf 8f6f 	isb	sy
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	b662      	cpsie	i
 8010302:	607b      	str	r3, [r7, #4]
}
 8010304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010306:	f7ff fe47 	bl	800ff98 <xTaskIncrementTick>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010310:	4b06      	ldr	r3, [pc, #24]	; (801032c <SysTick_Handler+0x44>)
 8010312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010316:	601a      	str	r2, [r3, #0]
 8010318:	2300      	movs	r3, #0
 801031a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	e000ed04 	.word	0xe000ed04

08010330 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff fd3d 	bl	800fdbe <USBH_LL_IncTimer>
}
 8010344:	bf00      	nop
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801035a:	4618      	mov	r0, r3
 801035c:	f7ff fd75 	bl	800fe4a <USBH_LL_Connect>
}
 8010360:	bf00      	nop
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010376:	4618      	mov	r0, r3
 8010378:	f7ff fd7e 	bl	800fe78 <USBH_LL_Disconnect>
}
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
 8010390:	4613      	mov	r3, r2
 8010392:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010394:	bf00      	nop
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff fd2f 	bl	800fe12 <USBH_LL_PortEnabled>
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7ff fd2f 	bl	800fe2e <USBH_LL_PortDisabled>
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103e0:	2300      	movs	r3, #0
 80103e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7f7 feed 	bl	80081ce <HAL_HCD_Stop>
 80103f4:	4603      	mov	r3, r0
 80103f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 f808 	bl	8010410 <USBH_Get_USB_Status>
 8010400:	4603      	mov	r3, r0
 8010402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010404:	7bbb      	ldrb	r3, [r7, #14]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
	...

08010410 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	4603      	mov	r3, r0
 8010418:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	2b03      	cmp	r3, #3
 8010422:	d817      	bhi.n	8010454 <USBH_Get_USB_Status+0x44>
 8010424:	a201      	add	r2, pc, #4	; (adr r2, 801042c <USBH_Get_USB_Status+0x1c>)
 8010426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042a:	bf00      	nop
 801042c:	0801043d 	.word	0x0801043d
 8010430:	08010443 	.word	0x08010443
 8010434:	08010449 	.word	0x08010449
 8010438:	0801044f 	.word	0x0801044f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]
    break;
 8010440:	e00b      	b.n	801045a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010442:	2302      	movs	r3, #2
 8010444:	73fb      	strb	r3, [r7, #15]
    break;
 8010446:	e008      	b.n	801045a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010448:	2301      	movs	r3, #1
 801044a:	73fb      	strb	r3, [r7, #15]
    break;
 801044c:	e005      	b.n	801045a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801044e:	2302      	movs	r3, #2
 8010450:	73fb      	strb	r3, [r7, #15]
    break;
 8010452:	e002      	b.n	801045a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010454:	2302      	movs	r3, #2
 8010456:	73fb      	strb	r3, [r7, #15]
    break;
 8010458:	bf00      	nop
  }
  return usb_status;
 801045a:	7bfb      	ldrb	r3, [r7, #15]
}
 801045c:	4618      	mov	r0, r3
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <tonecrafter_configure_activations>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8010468:	b480      	push	{r7}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	691b      	ldr	r3, [r3, #16]
 8010476:	3303      	adds	r3, #3
 8010478:	f023 0303 	bic.w	r3, r3, #3
 801047c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    lstm_scratch0_array.data = AI_PTR(activations + 0);
 801047e:	4a1b      	ldr	r2, [pc, #108]	; (80104ec <tonecrafter_configure_activations+0x84>)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(activations + 0);
 8010484:	4a19      	ldr	r2, [pc, #100]	; (80104ec <tonecrafter_configure_activations+0x84>)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 801048a:	4b19      	ldr	r3, [pc, #100]	; (80104f0 <tonecrafter_configure_activations+0x88>)
 801048c:	2200      	movs	r2, #0
 801048e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8010490:	4b17      	ldr	r3, [pc, #92]	; (80104f0 <tonecrafter_configure_activations+0x88>)
 8010492:	2200      	movs	r2, #0
 8010494:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations + 512);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801049c:	4a15      	ldr	r2, [pc, #84]	; (80104f4 <tonecrafter_configure_activations+0x8c>)
 801049e:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations + 512);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80104a6:	4a13      	ldr	r2, [pc, #76]	; (80104f4 <tonecrafter_configure_activations+0x8c>)
 80104a8:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations + 672);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80104b0:	4a11      	ldr	r2, [pc, #68]	; (80104f8 <tonecrafter_configure_activations+0x90>)
 80104b2:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations + 672);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80104ba:	4a0f      	ldr	r2, [pc, #60]	; (80104f8 <tonecrafter_configure_activations+0x90>)
 80104bc:	60d3      	str	r3, [r2, #12]
    lstm_output_array.data = AI_PTR(activations + 688);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80104c4:	4a0d      	ldr	r2, [pc, #52]	; (80104fc <tonecrafter_configure_activations+0x94>)
 80104c6:	6093      	str	r3, [r2, #8]
    lstm_output_array.data_start = AI_PTR(activations + 688);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80104ce:	4a0b      	ldr	r2, [pc, #44]	; (80104fc <tonecrafter_configure_activations+0x94>)
 80104d0:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(NULL);
 80104d2:	4b0b      	ldr	r3, [pc, #44]	; (8010500 <tonecrafter_configure_activations+0x98>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	609a      	str	r2, [r3, #8]
    dense_output_array.data_start = AI_PTR(NULL);
 80104d8:	4b09      	ldr	r3, [pc, #36]	; (8010500 <tonecrafter_configure_activations+0x98>)
 80104da:	2200      	movs	r2, #0
 80104dc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80104de:	2301      	movs	r3, #1
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	2000008c 	.word	0x2000008c
 80104f0:	2000013c 	.word	0x2000013c
 80104f4:	2000014c 	.word	0x2000014c
 80104f8:	2000015c 	.word	0x2000015c
 80104fc:	2000016c 	.word	0x2000016c
 8010500:	2000017c 	.word	0x2000017c

08010504 <tonecrafter_configure_weights>:


AI_DECLARE_STATIC
ai_bool tonecrafter_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8010514:	4b51      	ldr	r3, [pc, #324]	; (801065c <tonecrafter_configure_weights+0x158>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801051c:	4a4f      	ldr	r2, [pc, #316]	; (801065c <tonecrafter_configure_weights+0x158>)
 801051e:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 12512);
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8010526:	4413      	add	r3, r2
 8010528:	4a4c      	ldr	r2, [pc, #304]	; (801065c <tonecrafter_configure_weights+0x158>)
 801052a:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 12512);
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8010532:	4413      	add	r3, r2
 8010534:	4a49      	ldr	r2, [pc, #292]	; (801065c <tonecrafter_configure_weights+0x158>)
 8010536:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8010538:	4b49      	ldr	r3, [pc, #292]	; (8010660 <tonecrafter_configure_weights+0x15c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010540:	4a47      	ldr	r2, [pc, #284]	; (8010660 <tonecrafter_configure_weights+0x15c>)
 8010542:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 12416);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 801054a:	4a45      	ldr	r2, [pc, #276]	; (8010660 <tonecrafter_configure_weights+0x15c>)
 801054c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 12416);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8010554:	4a42      	ldr	r2, [pc, #264]	; (8010660 <tonecrafter_configure_weights+0x15c>)
 8010556:	60d3      	str	r3, [r2, #12]
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 8010558:	4b42      	ldr	r3, [pc, #264]	; (8010664 <tonecrafter_configure_weights+0x160>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010560:	4a40      	ldr	r2, [pc, #256]	; (8010664 <tonecrafter_configure_weights+0x160>)
 8010562:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(weights + 12032);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 801056a:	4a3e      	ldr	r2, [pc, #248]	; (8010664 <tonecrafter_configure_weights+0x160>)
 801056c:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(weights + 12032);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8010574:	4a3b      	ldr	r2, [pc, #236]	; (8010664 <tonecrafter_configure_weights+0x160>)
 8010576:	60d3      	str	r3, [r2, #12]
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 8010578:	4b3b      	ldr	r3, [pc, #236]	; (8010668 <tonecrafter_configure_weights+0x164>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010580:	4a39      	ldr	r2, [pc, #228]	; (8010668 <tonecrafter_configure_weights+0x164>)
 8010582:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(weights + 11744);
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	f642 53e0 	movw	r3, #11744	; 0x2de0
 801058a:	4413      	add	r3, r2
 801058c:	4a36      	ldr	r2, [pc, #216]	; (8010668 <tonecrafter_configure_weights+0x164>)
 801058e:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(weights + 11744);
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	f642 53e0 	movw	r3, #11744	; 0x2de0
 8010596:	4413      	add	r3, r2
 8010598:	4a33      	ldr	r2, [pc, #204]	; (8010668 <tonecrafter_configure_weights+0x164>)
 801059a:	60d3      	str	r3, [r2, #12]
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 801059c:	4b33      	ldr	r3, [pc, #204]	; (801066c <tonecrafter_configure_weights+0x168>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105a4:	4a31      	ldr	r2, [pc, #196]	; (801066c <tonecrafter_configure_weights+0x168>)
 80105a6:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(weights + 2528);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80105ae:	4a2f      	ldr	r2, [pc, #188]	; (801066c <tonecrafter_configure_weights+0x168>)
 80105b0:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(weights + 2528);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80105b8:	4a2c      	ldr	r2, [pc, #176]	; (801066c <tonecrafter_configure_weights+0x168>)
 80105ba:	60d3      	str	r3, [r2, #12]
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 80105bc:	4b2c      	ldr	r3, [pc, #176]	; (8010670 <tonecrafter_configure_weights+0x16c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105c4:	4a2a      	ldr	r2, [pc, #168]	; (8010670 <tonecrafter_configure_weights+0x16c>)
 80105c6:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(weights + 992);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80105ce:	4a28      	ldr	r2, [pc, #160]	; (8010670 <tonecrafter_configure_weights+0x16c>)
 80105d0:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(weights + 992);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80105d8:	4a25      	ldr	r2, [pc, #148]	; (8010670 <tonecrafter_configure_weights+0x16c>)
 80105da:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80105dc:	4b25      	ldr	r3, [pc, #148]	; (8010674 <tonecrafter_configure_weights+0x170>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105e4:	4a23      	ldr	r2, [pc, #140]	; (8010674 <tonecrafter_configure_weights+0x170>)
 80105e6:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights + 976);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80105ee:	4a21      	ldr	r2, [pc, #132]	; (8010674 <tonecrafter_configure_weights+0x170>)
 80105f0:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights + 976);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80105f8:	4a1e      	ldr	r2, [pc, #120]	; (8010674 <tonecrafter_configure_weights+0x170>)
 80105fa:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80105fc:	4b1e      	ldr	r3, [pc, #120]	; (8010678 <tonecrafter_configure_weights+0x174>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010604:	4a1c      	ldr	r2, [pc, #112]	; (8010678 <tonecrafter_configure_weights+0x174>)
 8010606:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights + 208);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	33d0      	adds	r3, #208	; 0xd0
 801060c:	4a1a      	ldr	r2, [pc, #104]	; (8010678 <tonecrafter_configure_weights+0x174>)
 801060e:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights + 208);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	33d0      	adds	r3, #208	; 0xd0
 8010614:	4a18      	ldr	r2, [pc, #96]	; (8010678 <tonecrafter_configure_weights+0x174>)
 8010616:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 8010618:	4b18      	ldr	r3, [pc, #96]	; (801067c <tonecrafter_configure_weights+0x178>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010620:	4a16      	ldr	r2, [pc, #88]	; (801067c <tonecrafter_configure_weights+0x178>)
 8010622:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights + 192);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	33c0      	adds	r3, #192	; 0xc0
 8010628:	4a14      	ldr	r2, [pc, #80]	; (801067c <tonecrafter_configure_weights+0x178>)
 801062a:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights + 192);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	33c0      	adds	r3, #192	; 0xc0
 8010630:	4a12      	ldr	r2, [pc, #72]	; (801067c <tonecrafter_configure_weights+0x178>)
 8010632:	60d3      	str	r3, [r2, #12]
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 8010634:	4b12      	ldr	r3, [pc, #72]	; (8010680 <tonecrafter_configure_weights+0x17c>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801063c:	4a10      	ldr	r2, [pc, #64]	; (8010680 <tonecrafter_configure_weights+0x17c>)
 801063e:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights + 0);
 8010640:	4a0f      	ldr	r2, [pc, #60]	; (8010680 <tonecrafter_configure_weights+0x17c>)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights + 0);
 8010646:	4a0e      	ldr	r2, [pc, #56]	; (8010680 <tonecrafter_configure_weights+0x17c>)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 801064c:	2301      	movs	r3, #1
}
 801064e:	4618      	mov	r0, r3
 8010650:	3714      	adds	r7, #20
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	2000009c 	.word	0x2000009c
 8010660:	200000ac 	.word	0x200000ac
 8010664:	200000bc 	.word	0x200000bc
 8010668:	200000cc 	.word	0x200000cc
 801066c:	200000dc 	.word	0x200000dc
 8010670:	200000ec 	.word	0x200000ec
 8010674:	200000fc 	.word	0x200000fc
 8010678:	2000010c 	.word	0x2000010c
 801067c:	2000011c 	.word	0x2000011c
 8010680:	2000012c 	.word	0x2000012c

08010684 <ai_tonecrafter_create>:
}

AI_API_ENTRY
ai_error ai_tonecrafter_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af02      	add	r7, sp, #8
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801068e:	2300      	movs	r3, #0
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	2303      	movs	r3, #3
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	2301      	movs	r3, #1
 8010698:	4a04      	ldr	r2, [pc, #16]	; (80106ac <ai_tonecrafter_create+0x28>)
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f000 f861 	bl	8010764 <ai_platform_network_create>
 80106a2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	2000002c 	.word	0x2000002c

080106b0 <ai_tonecrafter_init>:
}

AI_API_ENTRY
ai_bool ai_tonecrafter_init(
  ai_handle network, const ai_network_params* params)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f8d5 	bl	801086c <ai_platform_network_init>
 80106c2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <ai_tonecrafter_init+0x1e>
 80106ca:	2300      	movs	r3, #0
 80106cc:	e02b      	b.n	8010726 <ai_tonecrafter_init+0x76>

  ai_bool ok = true;
 80106ce:	2301      	movs	r3, #1
 80106d0:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_weights(net_ctx, &params->params);
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	4619      	mov	r1, r3
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f7ff ff14 	bl	8010504 <tonecrafter_configure_weights>
 80106dc:	4603      	mov	r3, r0
 80106de:	461a      	mov	r2, r3
 80106e0:	7afb      	ldrb	r3, [r7, #11]
 80106e2:	4013      	ands	r3, r2
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	bf14      	ite	ne
 80106e8:	2301      	movne	r3, #1
 80106ea:	2300      	moveq	r3, #0
 80106ec:	72fb      	strb	r3, [r7, #11]
  ok &= tonecrafter_configure_activations(net_ctx, &params->activations);
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	3318      	adds	r3, #24
 80106f2:	4619      	mov	r1, r3
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f7ff feb7 	bl	8010468 <tonecrafter_configure_activations>
 80106fa:	4603      	mov	r3, r0
 80106fc:	461a      	mov	r2, r3
 80106fe:	7afb      	ldrb	r3, [r7, #11]
 8010700:	4013      	ands	r3, r2
 8010702:	2b00      	cmp	r3, #0
 8010704:	bf14      	ite	ne
 8010706:	2301      	movne	r3, #1
 8010708:	2300      	moveq	r3, #0
 801070a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 f995 	bl	8010a3c <ai_platform_network_post_init>
 8010712:	4603      	mov	r3, r0
 8010714:	461a      	mov	r2, r3
 8010716:	7afb      	ldrb	r3, [r7, #11]
 8010718:	4013      	ands	r3, r2
 801071a:	2b00      	cmp	r3, #0
 801071c:	bf14      	ite	ne
 801071e:	2301      	movne	r3, #1
 8010720:	2300      	moveq	r3, #0
 8010722:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010724:	7afb      	ldrb	r3, [r7, #11]
}
 8010726:	4618      	mov	r0, r3
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <ai_tonecrafter_run>:


AI_API_ENTRY
ai_i32 ai_tonecrafter_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b084      	sub	sp, #16
 8010732:	af00      	add	r7, sp, #0
 8010734:	60f8      	str	r0, [r7, #12]
 8010736:	60b9      	str	r1, [r7, #8]
 8010738:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	68b9      	ldr	r1, [r7, #8]
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f000 fa28 	bl	8010b94 <ai_platform_network_process>
 8010744:	4603      	mov	r3, r0
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
	...

08010750 <ai_tonecrafter_data_weights_get>:
#include "tonecrafter_data.h"

ai_handle ai_tonecrafter_data_weights_get(void)
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
    0x6f, 0x97, 0xbc, 0x2f, 0xdc, 0x92, 0x3c, 0xa1, 0x2e,
    0x98, 0x3d, 0x92, 0x6b, 0xbd, 0x3d, 0x79, 0x19, 0xeb,
    0xbd, 0x2a, 0xc8, 0x23, 0xbe, 0xa6, 0x4d, 0xa2, 0xbb
  };

  return AI_HANDLE_PTR(s_tonecrafter_weights);
 8010754:	4b02      	ldr	r3, [pc, #8]	; (8010760 <ai_tonecrafter_data_weights_get+0x10>)

}
 8010756:	4618      	mov	r0, r3
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	080190f0 	.word	0x080190f0

08010764 <ai_platform_network_create>:
 8010764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010766:	4d36      	ldr	r5, [pc, #216]	; (8010840 <ai_platform_network_create+0xdc>)
 8010768:	b083      	sub	sp, #12
 801076a:	4e36      	ldr	r6, [pc, #216]	; (8010844 <ai_platform_network_create+0xe0>)
 801076c:	6829      	ldr	r1, [r5, #0]
 801076e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8010772:	f021 0101 	bic.w	r1, r1, #1
 8010776:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801077a:	6029      	str	r1, [r5, #0]
 801077c:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8010780:	6831      	ldr	r1, [r6, #0]
 8010782:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8010786:	194d      	adds	r5, r1, r5
 8010788:	2d01      	cmp	r5, #1
 801078a:	d92f      	bls.n	80107ec <ai_platform_network_create+0x88>
 801078c:	f240 4549 	movw	r5, #1097	; 0x449
 8010790:	42a9      	cmp	r1, r5
 8010792:	d02b      	beq.n	80107ec <ai_platform_network_create+0x88>
 8010794:	492c      	ldr	r1, [pc, #176]	; (8010848 <ai_platform_network_create+0xe4>)
 8010796:	6809      	ldr	r1, [r1, #0]
 8010798:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801079c:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80107a0:	d015      	beq.n	80107ce <ai_platform_network_create+0x6a>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	d031      	beq.n	801080a <ai_platform_network_create+0xa6>
 80107a6:	461e      	mov	r6, r3
 80107a8:	4613      	mov	r3, r2
 80107aa:	4a28      	ldr	r2, [pc, #160]	; (801084c <ai_platform_network_create+0xe8>)
 80107ac:	4605      	mov	r5, r0
 80107ae:	601a      	str	r2, [r3, #0]
 80107b0:	6003      	str	r3, [r0, #0]
 80107b2:	f000 fc9f 	bl	80110f4 <core_init>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d02b      	beq.n	8010812 <ai_platform_network_create+0xae>
 80107ba:	0223      	lsls	r3, r4, #8
 80107bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80107c0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80107c4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80107c8:	d92e      	bls.n	8010828 <ai_platform_network_create+0xc4>
 80107ca:	2301      	movs	r3, #1
 80107cc:	e022      	b.n	8010814 <ai_platform_network_create+0xb0>
 80107ce:	4920      	ldr	r1, [pc, #128]	; (8010850 <ai_platform_network_create+0xec>)
 80107d0:	2501      	movs	r5, #1
 80107d2:	460e      	mov	r6, r1
 80107d4:	600d      	str	r5, [r1, #0]
 80107d6:	6831      	ldr	r1, [r6, #0]
 80107d8:	2900      	cmp	r1, #0
 80107da:	d1fc      	bne.n	80107d6 <ai_platform_network_create+0x72>
 80107dc:	491d      	ldr	r1, [pc, #116]	; (8010854 <ai_platform_network_create+0xf0>)
 80107de:	4e1e      	ldr	r6, [pc, #120]	; (8010858 <ai_platform_network_create+0xf4>)
 80107e0:	4d1e      	ldr	r5, [pc, #120]	; (801085c <ai_platform_network_create+0xf8>)
 80107e2:	600e      	str	r6, [r1, #0]
 80107e4:	6809      	ldr	r1, [r1, #0]
 80107e6:	42a9      	cmp	r1, r5
 80107e8:	d0db      	beq.n	80107a2 <ai_platform_network_create+0x3e>
 80107ea:	e7fe      	b.n	80107ea <ai_platform_network_create+0x86>
 80107ec:	491c      	ldr	r1, [pc, #112]	; (8010860 <ai_platform_network_create+0xfc>)
 80107ee:	2501      	movs	r5, #1
 80107f0:	460e      	mov	r6, r1
 80107f2:	600d      	str	r5, [r1, #0]
 80107f4:	6831      	ldr	r1, [r6, #0]
 80107f6:	2900      	cmp	r1, #0
 80107f8:	d1fc      	bne.n	80107f4 <ai_platform_network_create+0x90>
 80107fa:	491a      	ldr	r1, [pc, #104]	; (8010864 <ai_platform_network_create+0x100>)
 80107fc:	4e16      	ldr	r6, [pc, #88]	; (8010858 <ai_platform_network_create+0xf4>)
 80107fe:	4d17      	ldr	r5, [pc, #92]	; (801085c <ai_platform_network_create+0xf8>)
 8010800:	600e      	str	r6, [r1, #0]
 8010802:	6809      	ldr	r1, [r1, #0]
 8010804:	42a9      	cmp	r1, r5
 8010806:	d0cc      	beq.n	80107a2 <ai_platform_network_create+0x3e>
 8010808:	e7fe      	b.n	8010808 <ai_platform_network_create+0xa4>
 801080a:	f241 0010 	movw	r0, #4112	; 0x1010
 801080e:	b003      	add	sp, #12
 8010810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010812:	2330      	movs	r3, #48	; 0x30
 8010814:	2100      	movs	r1, #0
 8010816:	2210      	movs	r2, #16
 8010818:	6029      	str	r1, [r5, #0]
 801081a:	2000      	movs	r0, #0
 801081c:	f363 0007 	bfi	r0, r3, #0, #8
 8010820:	f362 201f 	bfi	r0, r2, #8, #24
 8010824:	b003      	add	sp, #12
 8010826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010828:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <ai_platform_network_create+0x104>)
 801082a:	a802      	add	r0, sp, #8
 801082c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010830:	f002 fdf4 	bl	801341c <ai_check_custom_types>
 8010834:	b110      	cbz	r0, 801083c <ai_platform_network_create+0xd8>
 8010836:	2200      	movs	r2, #0
 8010838:	4613      	mov	r3, r2
 801083a:	e7ee      	b.n	801081a <ai_platform_network_create+0xb6>
 801083c:	2302      	movs	r3, #2
 801083e:	e7e9      	b.n	8010814 <ai_platform_network_create+0xb0>
 8010840:	e0002000 	.word	0xe0002000
 8010844:	e0042000 	.word	0xe0042000
 8010848:	5c001000 	.word	0x5c001000
 801084c:	a1c00100 	.word	0xa1c00100
 8010850:	58024c08 	.word	0x58024c08
 8010854:	58024c00 	.word	0x58024c00
 8010858:	f407a5c2 	.word	0xf407a5c2
 801085c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010860:	40023008 	.word	0x40023008
 8010864:	40023000 	.word	0x40023000
 8010868:	84048403 	.word	0x84048403

0801086c <ai_platform_network_init>:
 801086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086e:	2800      	cmp	r0, #0
 8010870:	d05e      	beq.n	8010930 <ai_platform_network_init+0xc4>
 8010872:	4b68      	ldr	r3, [pc, #416]	; (8010a14 <ai_platform_network_init+0x1a8>)
 8010874:	6802      	ldr	r2, [r0, #0]
 8010876:	429a      	cmp	r2, r3
 8010878:	d15a      	bne.n	8010930 <ai_platform_network_init+0xc4>
 801087a:	4a67      	ldr	r2, [pc, #412]	; (8010a18 <ai_platform_network_init+0x1ac>)
 801087c:	4c67      	ldr	r4, [pc, #412]	; (8010a1c <ai_platform_network_init+0x1b0>)
 801087e:	6813      	ldr	r3, [r2, #0]
 8010880:	f023 0301 	bic.w	r3, r3, #1
 8010884:	6013      	str	r3, [r2, #0]
 8010886:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801088a:	6823      	ldr	r3, [r4, #0]
 801088c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010890:	189a      	adds	r2, r3, r2
 8010892:	2a01      	cmp	r2, #1
 8010894:	d93d      	bls.n	8010912 <ai_platform_network_init+0xa6>
 8010896:	f240 4249 	movw	r2, #1097	; 0x449
 801089a:	4293      	cmp	r3, r2
 801089c:	d039      	beq.n	8010912 <ai_platform_network_init+0xa6>
 801089e:	4b60      	ldr	r3, [pc, #384]	; (8010a20 <ai_platform_network_init+0x1b4>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80108a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80108aa:	d06b      	beq.n	8010984 <ai_platform_network_init+0x118>
 80108ac:	4605      	mov	r5, r0
 80108ae:	460c      	mov	r4, r1
 80108b0:	2900      	cmp	r1, #0
 80108b2:	f000 80a8 	beq.w	8010a06 <ai_platform_network_init+0x19a>
 80108b6:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80108b8:	690e      	ldr	r6, [r1, #16]
 80108ba:	2f00      	cmp	r7, #0
 80108bc:	f000 8092 	beq.w	80109e4 <ai_platform_network_init+0x178>
 80108c0:	2e00      	cmp	r6, #0
 80108c2:	d07d      	beq.n	80109c0 <ai_platform_network_init+0x154>
 80108c4:	f104 0718 	add.w	r7, r4, #24
 80108c8:	f105 0c18 	add.w	ip, r5, #24
 80108cc:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80108d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80108da:	2403      	movs	r4, #3
 80108dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80108e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80108e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80108e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80108e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80108ec:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80108ee:	60ec      	str	r4, [r5, #12]
 80108f0:	b16a      	cbz	r2, 801090e <ai_platform_network_init+0xa2>
 80108f2:	68d3      	ldr	r3, [r2, #12]
 80108f4:	6095      	str	r5, [r2, #8]
 80108f6:	b153      	cbz	r3, 801090e <ai_platform_network_init+0xa2>
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d104      	bne.n	8010906 <ai_platform_network_init+0x9a>
 80108fc:	e007      	b.n	801090e <ai_platform_network_init+0xa2>
 80108fe:	429a      	cmp	r2, r3
 8010900:	4613      	mov	r3, r2
 8010902:	d004      	beq.n	801090e <ai_platform_network_init+0xa2>
 8010904:	b11a      	cbz	r2, 801090e <ai_platform_network_init+0xa2>
 8010906:	68da      	ldr	r2, [r3, #12]
 8010908:	609d      	str	r5, [r3, #8]
 801090a:	2a00      	cmp	r2, #0
 801090c:	d1f7      	bne.n	80108fe <ai_platform_network_init+0x92>
 801090e:	4628      	mov	r0, r5
 8010910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010912:	4b44      	ldr	r3, [pc, #272]	; (8010a24 <ai_platform_network_init+0x1b8>)
 8010914:	2201      	movs	r2, #1
 8010916:	461c      	mov	r4, r3
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	6823      	ldr	r3, [r4, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1fc      	bne.n	801091a <ai_platform_network_init+0xae>
 8010920:	4b41      	ldr	r3, [pc, #260]	; (8010a28 <ai_platform_network_init+0x1bc>)
 8010922:	4c42      	ldr	r4, [pc, #264]	; (8010a2c <ai_platform_network_init+0x1c0>)
 8010924:	4a42      	ldr	r2, [pc, #264]	; (8010a30 <ai_platform_network_init+0x1c4>)
 8010926:	601c      	str	r4, [r3, #0]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4293      	cmp	r3, r2
 801092c:	d0be      	beq.n	80108ac <ai_platform_network_init+0x40>
 801092e:	e7fe      	b.n	801092e <ai_platform_network_init+0xc2>
 8010930:	4a39      	ldr	r2, [pc, #228]	; (8010a18 <ai_platform_network_init+0x1ac>)
 8010932:	493a      	ldr	r1, [pc, #232]	; (8010a1c <ai_platform_network_init+0x1b0>)
 8010934:	6813      	ldr	r3, [r2, #0]
 8010936:	f023 0301 	bic.w	r3, r3, #1
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	680b      	ldr	r3, [r1, #0]
 801093e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010946:	185a      	adds	r2, r3, r1
 8010948:	2a01      	cmp	r2, #1
 801094a:	d90c      	bls.n	8010966 <ai_platform_network_init+0xfa>
 801094c:	f240 4249 	movw	r2, #1097	; 0x449
 8010950:	4293      	cmp	r3, r2
 8010952:	d008      	beq.n	8010966 <ai_platform_network_init+0xfa>
 8010954:	4b32      	ldr	r3, [pc, #200]	; (8010a20 <ai_platform_network_init+0x1b4>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801095c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010960:	d01f      	beq.n	80109a2 <ai_platform_network_init+0x136>
 8010962:	2000      	movs	r0, #0
 8010964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010966:	4b2f      	ldr	r3, [pc, #188]	; (8010a24 <ai_platform_network_init+0x1b8>)
 8010968:	2201      	movs	r2, #1
 801096a:	4619      	mov	r1, r3
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	680b      	ldr	r3, [r1, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1fc      	bne.n	801096e <ai_platform_network_init+0x102>
 8010974:	4b2c      	ldr	r3, [pc, #176]	; (8010a28 <ai_platform_network_init+0x1bc>)
 8010976:	492d      	ldr	r1, [pc, #180]	; (8010a2c <ai_platform_network_init+0x1c0>)
 8010978:	4a2d      	ldr	r2, [pc, #180]	; (8010a30 <ai_platform_network_init+0x1c4>)
 801097a:	6019      	str	r1, [r3, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	4293      	cmp	r3, r2
 8010980:	d0ef      	beq.n	8010962 <ai_platform_network_init+0xf6>
 8010982:	e7fe      	b.n	8010982 <ai_platform_network_init+0x116>
 8010984:	4b2b      	ldr	r3, [pc, #172]	; (8010a34 <ai_platform_network_init+0x1c8>)
 8010986:	2201      	movs	r2, #1
 8010988:	461c      	mov	r4, r3
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1fc      	bne.n	801098c <ai_platform_network_init+0x120>
 8010992:	4b29      	ldr	r3, [pc, #164]	; (8010a38 <ai_platform_network_init+0x1cc>)
 8010994:	4c25      	ldr	r4, [pc, #148]	; (8010a2c <ai_platform_network_init+0x1c0>)
 8010996:	4a26      	ldr	r2, [pc, #152]	; (8010a30 <ai_platform_network_init+0x1c4>)
 8010998:	601c      	str	r4, [r3, #0]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4293      	cmp	r3, r2
 801099e:	d085      	beq.n	80108ac <ai_platform_network_init+0x40>
 80109a0:	e7fe      	b.n	80109a0 <ai_platform_network_init+0x134>
 80109a2:	4b24      	ldr	r3, [pc, #144]	; (8010a34 <ai_platform_network_init+0x1c8>)
 80109a4:	2201      	movs	r2, #1
 80109a6:	4619      	mov	r1, r3
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	680b      	ldr	r3, [r1, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1fc      	bne.n	80109aa <ai_platform_network_init+0x13e>
 80109b0:	4b21      	ldr	r3, [pc, #132]	; (8010a38 <ai_platform_network_init+0x1cc>)
 80109b2:	491e      	ldr	r1, [pc, #120]	; (8010a2c <ai_platform_network_init+0x1c0>)
 80109b4:	4a1e      	ldr	r2, [pc, #120]	; (8010a30 <ai_platform_network_init+0x1c4>)
 80109b6:	6019      	str	r1, [r3, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d0d1      	beq.n	8010962 <ai_platform_network_init+0xf6>
 80109be:	e7fe      	b.n	80109be <ai_platform_network_init+0x152>
 80109c0:	8921      	ldrh	r1, [r4, #8]
 80109c2:	88e2      	ldrh	r2, [r4, #6]
 80109c4:	68e3      	ldr	r3, [r4, #12]
 80109c6:	fb02 f201 	mul.w	r2, r2, r1
 80109ca:	fb03 f302 	mul.w	r3, r3, r2
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f43f af78 	beq.w	80108c4 <ai_platform_network_init+0x58>
 80109d4:	f105 0010 	add.w	r0, r5, #16
 80109d8:	2212      	movs	r2, #18
 80109da:	2110      	movs	r1, #16
 80109dc:	f000 fb8c 	bl	80110f8 <core_set_error>
 80109e0:	4630      	mov	r0, r6
 80109e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e4:	8c09      	ldrh	r1, [r1, #32]
 80109e6:	8be2      	ldrh	r2, [r4, #30]
 80109e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109ea:	fb02 f201 	mul.w	r2, r2, r1
 80109ee:	fb03 f302 	mul.w	r3, r3, r2
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f43f af64 	beq.w	80108c0 <ai_platform_network_init+0x54>
 80109f8:	2213      	movs	r2, #19
 80109fa:	2110      	movs	r1, #16
 80109fc:	3010      	adds	r0, #16
 80109fe:	f000 fb7b 	bl	80110f8 <core_set_error>
 8010a02:	4638      	mov	r0, r7
 8010a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a06:	2211      	movs	r2, #17
 8010a08:	2110      	movs	r1, #16
 8010a0a:	3010      	adds	r0, #16
 8010a0c:	f000 fb74 	bl	80110f8 <core_set_error>
 8010a10:	4620      	mov	r0, r4
 8010a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a14:	a1c00100 	.word	0xa1c00100
 8010a18:	e0002000 	.word	0xe0002000
 8010a1c:	e0042000 	.word	0xe0042000
 8010a20:	5c001000 	.word	0x5c001000
 8010a24:	40023008 	.word	0x40023008
 8010a28:	40023000 	.word	0x40023000
 8010a2c:	f407a5c2 	.word	0xf407a5c2
 8010a30:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a34:	58024c08 	.word	0x58024c08
 8010a38:	58024c00 	.word	0x58024c00

08010a3c <ai_platform_network_post_init>:
 8010a3c:	b538      	push	{r3, r4, r5, lr}
 8010a3e:	b118      	cbz	r0, 8010a48 <ai_platform_network_post_init+0xc>
 8010a40:	4b4a      	ldr	r3, [pc, #296]	; (8010b6c <ai_platform_network_post_init+0x130>)
 8010a42:	6802      	ldr	r2, [r0, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d029      	beq.n	8010a9c <ai_platform_network_post_init+0x60>
 8010a48:	4a49      	ldr	r2, [pc, #292]	; (8010b70 <ai_platform_network_post_init+0x134>)
 8010a4a:	494a      	ldr	r1, [pc, #296]	; (8010b74 <ai_platform_network_post_init+0x138>)
 8010a4c:	6813      	ldr	r3, [r2, #0]
 8010a4e:	f023 0301 	bic.w	r3, r3, #1
 8010a52:	6013      	str	r3, [r2, #0]
 8010a54:	680b      	ldr	r3, [r1, #0]
 8010a56:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a5e:	185a      	adds	r2, r3, r1
 8010a60:	2a01      	cmp	r2, #1
 8010a62:	d90c      	bls.n	8010a7e <ai_platform_network_post_init+0x42>
 8010a64:	f240 4249 	movw	r2, #1097	; 0x449
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d008      	beq.n	8010a7e <ai_platform_network_post_init+0x42>
 8010a6c:	4b42      	ldr	r3, [pc, #264]	; (8010b78 <ai_platform_network_post_init+0x13c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a74:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010a78:	d044      	beq.n	8010b04 <ai_platform_network_post_init+0xc8>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	bd38      	pop	{r3, r4, r5, pc}
 8010a7e:	4b3f      	ldr	r3, [pc, #252]	; (8010b7c <ai_platform_network_post_init+0x140>)
 8010a80:	2201      	movs	r2, #1
 8010a82:	4619      	mov	r1, r3
 8010a84:	601a      	str	r2, [r3, #0]
 8010a86:	680b      	ldr	r3, [r1, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1fc      	bne.n	8010a86 <ai_platform_network_post_init+0x4a>
 8010a8c:	4b3c      	ldr	r3, [pc, #240]	; (8010b80 <ai_platform_network_post_init+0x144>)
 8010a8e:	493d      	ldr	r1, [pc, #244]	; (8010b84 <ai_platform_network_post_init+0x148>)
 8010a90:	4a3d      	ldr	r2, [pc, #244]	; (8010b88 <ai_platform_network_post_init+0x14c>)
 8010a92:	6019      	str	r1, [r3, #0]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d0ef      	beq.n	8010a7a <ai_platform_network_post_init+0x3e>
 8010a9a:	e7fe      	b.n	8010a9a <ai_platform_network_post_init+0x5e>
 8010a9c:	4a34      	ldr	r2, [pc, #208]	; (8010b70 <ai_platform_network_post_init+0x134>)
 8010a9e:	4935      	ldr	r1, [pc, #212]	; (8010b74 <ai_platform_network_post_init+0x138>)
 8010aa0:	6813      	ldr	r3, [r2, #0]
 8010aa2:	f023 0301 	bic.w	r3, r3, #1
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010aac:	680b      	ldr	r3, [r1, #0]
 8010aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ab2:	189a      	adds	r2, r3, r2
 8010ab4:	2a01      	cmp	r2, #1
 8010ab6:	d94a      	bls.n	8010b4e <ai_platform_network_post_init+0x112>
 8010ab8:	f240 4249 	movw	r2, #1097	; 0x449
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d046      	beq.n	8010b4e <ai_platform_network_post_init+0x112>
 8010ac0:	4b2d      	ldr	r3, [pc, #180]	; (8010b78 <ai_platform_network_post_init+0x13c>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010ac8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010acc:	d030      	beq.n	8010b30 <ai_platform_network_post_init+0xf4>
 8010ace:	68c3      	ldr	r3, [r0, #12]
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	f013 0502 	ands.w	r5, r3, #2
 8010ad6:	d024      	beq.n	8010b22 <ai_platform_network_post_init+0xe6>
 8010ad8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010ada:	b18b      	cbz	r3, 8010b00 <ai_platform_network_post_init+0xc4>
 8010adc:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8010ade:	b90d      	cbnz	r5, 8010ae4 <ai_platform_network_post_init+0xa8>
 8010ae0:	e00e      	b.n	8010b00 <ai_platform_network_post_init+0xc4>
 8010ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010ae6:	4629      	mov	r1, r5
 8010ae8:	2000      	movs	r0, #0
 8010aea:	4798      	blx	r3
 8010aec:	68ea      	ldr	r2, [r5, #12]
 8010aee:	1b53      	subs	r3, r2, r5
 8010af0:	4615      	mov	r5, r2
 8010af2:	bf18      	it	ne
 8010af4:	2301      	movne	r3, #1
 8010af6:	2a00      	cmp	r2, #0
 8010af8:	bf08      	it	eq
 8010afa:	2300      	moveq	r3, #0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1f0      	bne.n	8010ae2 <ai_platform_network_post_init+0xa6>
 8010b00:	2001      	movs	r0, #1
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
 8010b04:	4b21      	ldr	r3, [pc, #132]	; (8010b8c <ai_platform_network_post_init+0x150>)
 8010b06:	2201      	movs	r2, #1
 8010b08:	4619      	mov	r1, r3
 8010b0a:	601a      	str	r2, [r3, #0]
 8010b0c:	680b      	ldr	r3, [r1, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1fc      	bne.n	8010b0c <ai_platform_network_post_init+0xd0>
 8010b12:	4b1f      	ldr	r3, [pc, #124]	; (8010b90 <ai_platform_network_post_init+0x154>)
 8010b14:	491b      	ldr	r1, [pc, #108]	; (8010b84 <ai_platform_network_post_init+0x148>)
 8010b16:	4a1c      	ldr	r2, [pc, #112]	; (8010b88 <ai_platform_network_post_init+0x14c>)
 8010b18:	6019      	str	r1, [r3, #0]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d0ac      	beq.n	8010a7a <ai_platform_network_post_init+0x3e>
 8010b20:	e7fe      	b.n	8010b20 <ai_platform_network_post_init+0xe4>
 8010b22:	2210      	movs	r2, #16
 8010b24:	2111      	movs	r1, #17
 8010b26:	3010      	adds	r0, #16
 8010b28:	f000 fae6 	bl	80110f8 <core_set_error>
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	bd38      	pop	{r3, r4, r5, pc}
 8010b30:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <ai_platform_network_post_init+0x150>)
 8010b32:	2201      	movs	r2, #1
 8010b34:	4619      	mov	r1, r3
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	680b      	ldr	r3, [r1, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d1fc      	bne.n	8010b38 <ai_platform_network_post_init+0xfc>
 8010b3e:	4b14      	ldr	r3, [pc, #80]	; (8010b90 <ai_platform_network_post_init+0x154>)
 8010b40:	4910      	ldr	r1, [pc, #64]	; (8010b84 <ai_platform_network_post_init+0x148>)
 8010b42:	4a11      	ldr	r2, [pc, #68]	; (8010b88 <ai_platform_network_post_init+0x14c>)
 8010b44:	6019      	str	r1, [r3, #0]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d0c0      	beq.n	8010ace <ai_platform_network_post_init+0x92>
 8010b4c:	e7fe      	b.n	8010b4c <ai_platform_network_post_init+0x110>
 8010b4e:	4b0b      	ldr	r3, [pc, #44]	; (8010b7c <ai_platform_network_post_init+0x140>)
 8010b50:	2201      	movs	r2, #1
 8010b52:	4619      	mov	r1, r3
 8010b54:	601a      	str	r2, [r3, #0]
 8010b56:	680b      	ldr	r3, [r1, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1fc      	bne.n	8010b56 <ai_platform_network_post_init+0x11a>
 8010b5c:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <ai_platform_network_post_init+0x144>)
 8010b5e:	4909      	ldr	r1, [pc, #36]	; (8010b84 <ai_platform_network_post_init+0x148>)
 8010b60:	4a09      	ldr	r2, [pc, #36]	; (8010b88 <ai_platform_network_post_init+0x14c>)
 8010b62:	6019      	str	r1, [r3, #0]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d0b1      	beq.n	8010ace <ai_platform_network_post_init+0x92>
 8010b6a:	e7fe      	b.n	8010b6a <ai_platform_network_post_init+0x12e>
 8010b6c:	a1c00100 	.word	0xa1c00100
 8010b70:	e0002000 	.word	0xe0002000
 8010b74:	e0042000 	.word	0xe0042000
 8010b78:	5c001000 	.word	0x5c001000
 8010b7c:	40023008 	.word	0x40023008
 8010b80:	40023000 	.word	0x40023000
 8010b84:	f407a5c2 	.word	0xf407a5c2
 8010b88:	b5e8b5cd 	.word	0xb5e8b5cd
 8010b8c:	58024c08 	.word	0x58024c08
 8010b90:	58024c00 	.word	0x58024c00

08010b94 <ai_platform_network_process>:
 8010b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b98:	4692      	mov	sl, r2
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	b120      	cbz	r0, 8010baa <ai_platform_network_process+0x16>
 8010ba0:	4b86      	ldr	r3, [pc, #536]	; (8010dbc <ai_platform_network_process+0x228>)
 8010ba2:	6802      	ldr	r2, [r0, #0]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	bf18      	it	ne
 8010ba8:	2400      	movne	r4, #0
 8010baa:	4a85      	ldr	r2, [pc, #532]	; (8010dc0 <ai_platform_network_process+0x22c>)
 8010bac:	4885      	ldr	r0, [pc, #532]	; (8010dc4 <ai_platform_network_process+0x230>)
 8010bae:	6813      	ldr	r3, [r2, #0]
 8010bb0:	f023 0301 	bic.w	r3, r3, #1
 8010bb4:	6013      	str	r3, [r2, #0]
 8010bb6:	6803      	ldr	r3, [r0, #0]
 8010bb8:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8010bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bc0:	181a      	adds	r2, r3, r0
 8010bc2:	2a01      	cmp	r2, #1
 8010bc4:	f240 80c6 	bls.w	8010d54 <ai_platform_network_process+0x1c0>
 8010bc8:	f240 4249 	movw	r2, #1097	; 0x449
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	f000 80c1 	beq.w	8010d54 <ai_platform_network_process+0x1c0>
 8010bd2:	4b7d      	ldr	r3, [pc, #500]	; (8010dc8 <ai_platform_network_process+0x234>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bda:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010bde:	f000 80a9 	beq.w	8010d34 <ai_platform_network_process+0x1a0>
 8010be2:	2c00      	cmp	r4, #0
 8010be4:	f000 80db 	beq.w	8010d9e <ai_platform_network_process+0x20a>
 8010be8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010bec:	68e0      	ldr	r0, [r4, #12]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	f000 0003 	and.w	r0, r0, #3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 80bd 	beq.w	8010d74 <ai_platform_network_process+0x1e0>
 8010bfa:	2600      	movs	r6, #0
 8010bfc:	2803      	cmp	r0, #3
 8010bfe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010c00:	6166      	str	r6, [r4, #20]
 8010c02:	f040 80c6 	bne.w	8010d92 <ai_platform_network_process+0x1fe>
 8010c06:	2900      	cmp	r1, #0
 8010c08:	f000 80b7 	beq.w	8010d7a <ai_platform_network_process+0x1e6>
 8010c0c:	fab5 f085 	clz	r0, r5
 8010c10:	0940      	lsrs	r0, r0, #5
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f040 80b1 	bne.w	8010d7a <ai_platform_network_process+0x1e6>
 8010c18:	882e      	ldrh	r6, [r5, #0]
 8010c1a:	2e00      	cmp	r6, #0
 8010c1c:	f000 80ad 	beq.w	8010d7a <ai_platform_network_process+0x1e6>
 8010c20:	888f      	ldrh	r7, [r1, #4]
 8010c22:	686e      	ldr	r6, [r5, #4]
 8010c24:	9701      	str	r7, [sp, #4]
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	f000 825f 	beq.w	80110ea <ai_platform_network_process+0x556>
 8010c2c:	6836      	ldr	r6, [r6, #0]
 8010c2e:	2e00      	cmp	r6, #0
 8010c30:	f000 825b 	beq.w	80110ea <ai_platform_network_process+0x556>
 8010c34:	68ab      	ldr	r3, [r5, #8]
 8010c36:	f8d3 9000 	ldr.w	r9, [r3]
 8010c3a:	f1b9 0f00 	cmp.w	r9, #0
 8010c3e:	f000 809c 	beq.w	8010d7a <ai_platform_network_process+0x1e6>
 8010c42:	460f      	mov	r7, r1
 8010c44:	4680      	mov	r8, r0
 8010c46:	e05e      	b.n	8010d06 <ai_platform_network_process+0x172>
 8010c48:	68f3      	ldr	r3, [r6, #12]
 8010c4a:	68da      	ldr	r2, [r3, #12]
 8010c4c:	455a      	cmp	r2, fp
 8010c4e:	d168      	bne.n	8010d22 <ai_platform_network_process+0x18e>
 8010c50:	689a      	ldr	r2, [r3, #8]
 8010c52:	4572      	cmp	r2, lr
 8010c54:	d165      	bne.n	8010d22 <ai_platform_network_process+0x18e>
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	459c      	cmp	ip, r3
 8010c5a:	d162      	bne.n	8010d22 <ai_platform_network_process+0x18e>
 8010c5c:	6800      	ldr	r0, [r0, #0]
 8010c5e:	f002 fc8d 	bl	801357c <ai_array_get_byte_size>
 8010c62:	68f2      	ldr	r2, [r6, #12]
 8010c64:	6973      	ldr	r3, [r6, #20]
 8010c66:	68d2      	ldr	r2, [r2, #12]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	fb03 f302 	mul.w	r3, r3, r2
 8010c6e:	4298      	cmp	r0, r3
 8010c70:	d357      	bcc.n	8010d22 <ai_platform_network_process+0x18e>
 8010c72:	69b3      	ldr	r3, [r6, #24]
 8010c74:	6818      	ldr	r0, [r3, #0]
 8010c76:	f002 fc35 	bl	80134e4 <ai_array_to_buffer_fmt>
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	4043      	eors	r3, r0
 8010c7e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010c82:	f040 8229 	bne.w	80110d8 <ai_platform_network_process+0x544>
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 821d 	beq.w	80110c8 <ai_platform_network_process+0x534>
 8010c8e:	88bb      	ldrh	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 808a 	beq.w	8010daa <ai_platform_network_process+0x216>
 8010c96:	9a01      	ldr	r2, [sp, #4]
 8010c98:	68f1      	ldr	r1, [r6, #12]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	68c9      	ldr	r1, [r1, #12]
 8010c9e:	bf38      	it	cc
 8010ca0:	461a      	movcc	r2, r3
 8010ca2:	9201      	str	r2, [sp, #4]
 8010ca4:	6972      	ldr	r2, [r6, #20]
 8010ca6:	68d3      	ldr	r3, [r2, #12]
 8010ca8:	fb03 f301 	mul.w	r3, r3, r1
 8010cac:	f8c9 3008 	str.w	r3, [r9, #8]
 8010cb0:	88ba      	ldrh	r2, [r7, #4]
 8010cb2:	fb03 f302 	mul.w	r3, r3, r2
 8010cb6:	f8c9 300c 	str.w	r3, [r9, #12]
 8010cba:	6939      	ldr	r1, [r7, #16]
 8010cbc:	f8c9 1004 	str.w	r1, [r9, #4]
 8010cc0:	693a      	ldr	r2, [r7, #16]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	f8c9 3000 	str.w	r3, [r9]
 8010cc8:	69b0      	ldr	r0, [r6, #24]
 8010cca:	6803      	ldr	r3, [r0, #0]
 8010ccc:	009a      	lsls	r2, r3, #2
 8010cce:	d408      	bmi.n	8010ce2 <ai_platform_network_process+0x14e>
 8010cd0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010cd4:	1a9b      	subs	r3, r3, r2
 8010cd6:	4419      	add	r1, r3
 8010cd8:	6081      	str	r1, [r0, #8]
 8010cda:	69b3      	ldr	r3, [r6, #24]
 8010cdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010ce0:	60da      	str	r2, [r3, #12]
 8010ce2:	f108 0801 	add.w	r8, r8, #1
 8010ce6:	882b      	ldrh	r3, [r5, #0]
 8010ce8:	4598      	cmp	r8, r3
 8010cea:	d27b      	bcs.n	8010de4 <ai_platform_network_process+0x250>
 8010cec:	686b      	ldr	r3, [r5, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d078      	beq.n	8010de4 <ai_platform_network_process+0x250>
 8010cf2:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8010cf6:	2e00      	cmp	r6, #0
 8010cf8:	d074      	beq.n	8010de4 <ai_platform_network_process+0x250>
 8010cfa:	68ab      	ldr	r3, [r5, #8]
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8010d04:	d039      	beq.n	8010d7a <ai_platform_network_process+0x1e6>
 8010d06:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8010d0a:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8010d0e:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8010d12:	fb0b f30e 	mul.w	r3, fp, lr
 8010d16:	69b0      	ldr	r0, [r6, #24]
 8010d18:	fb0c f303 	mul.w	r3, ip, r3
 8010d1c:	6841      	ldr	r1, [r0, #4]
 8010d1e:	4299      	cmp	r1, r3
 8010d20:	d292      	bcs.n	8010c48 <ai_platform_network_process+0xb4>
 8010d22:	f104 0010 	add.w	r0, r4, #16
 8010d26:	2218      	movs	r2, #24
 8010d28:	2112      	movs	r1, #18
 8010d2a:	f04f 0b00 	mov.w	fp, #0
 8010d2e:	f000 f9e3 	bl	80110f8 <core_set_error>
 8010d32:	e02a      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 8010d34:	4b25      	ldr	r3, [pc, #148]	; (8010dcc <ai_platform_network_process+0x238>)
 8010d36:	2201      	movs	r2, #1
 8010d38:	4618      	mov	r0, r3
 8010d3a:	601a      	str	r2, [r3, #0]
 8010d3c:	6803      	ldr	r3, [r0, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1fc      	bne.n	8010d3c <ai_platform_network_process+0x1a8>
 8010d42:	4b23      	ldr	r3, [pc, #140]	; (8010dd0 <ai_platform_network_process+0x23c>)
 8010d44:	4823      	ldr	r0, [pc, #140]	; (8010dd4 <ai_platform_network_process+0x240>)
 8010d46:	4a24      	ldr	r2, [pc, #144]	; (8010dd8 <ai_platform_network_process+0x244>)
 8010d48:	6018      	str	r0, [r3, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	f43f af48 	beq.w	8010be2 <ai_platform_network_process+0x4e>
 8010d52:	e7fe      	b.n	8010d52 <ai_platform_network_process+0x1be>
 8010d54:	4b21      	ldr	r3, [pc, #132]	; (8010ddc <ai_platform_network_process+0x248>)
 8010d56:	2201      	movs	r2, #1
 8010d58:	4618      	mov	r0, r3
 8010d5a:	601a      	str	r2, [r3, #0]
 8010d5c:	6803      	ldr	r3, [r0, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d1fc      	bne.n	8010d5c <ai_platform_network_process+0x1c8>
 8010d62:	4b1f      	ldr	r3, [pc, #124]	; (8010de0 <ai_platform_network_process+0x24c>)
 8010d64:	481b      	ldr	r0, [pc, #108]	; (8010dd4 <ai_platform_network_process+0x240>)
 8010d66:	4a1c      	ldr	r2, [pc, #112]	; (8010dd8 <ai_platform_network_process+0x244>)
 8010d68:	6018      	str	r0, [r3, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	f43f af38 	beq.w	8010be2 <ai_platform_network_process+0x4e>
 8010d72:	e7fe      	b.n	8010d72 <ai_platform_network_process+0x1de>
 8010d74:	2803      	cmp	r0, #3
 8010d76:	6163      	str	r3, [r4, #20]
 8010d78:	d10b      	bne.n	8010d92 <ai_platform_network_process+0x1fe>
 8010d7a:	f04f 0b00 	mov.w	fp, #0
 8010d7e:	f104 0010 	add.w	r0, r4, #16
 8010d82:	2217      	movs	r2, #23
 8010d84:	2112      	movs	r1, #18
 8010d86:	f000 f9b7 	bl	80110f8 <core_set_error>
 8010d8a:	4658      	mov	r0, fp
 8010d8c:	b003      	add	sp, #12
 8010d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d92:	f104 0010 	add.w	r0, r4, #16
 8010d96:	2230      	movs	r2, #48	; 0x30
 8010d98:	2111      	movs	r1, #17
 8010d9a:	f000 f9ad 	bl	80110f8 <core_set_error>
 8010d9e:	f04f 0b00 	mov.w	fp, #0
 8010da2:	4658      	mov	r0, fp
 8010da4:	b003      	add	sp, #12
 8010da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010daa:	f104 0010 	add.w	r0, r4, #16
 8010dae:	2221      	movs	r2, #33	; 0x21
 8010db0:	2112      	movs	r1, #18
 8010db2:	469b      	mov	fp, r3
 8010db4:	f000 f9a0 	bl	80110f8 <core_set_error>
 8010db8:	e7e7      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 8010dba:	bf00      	nop
 8010dbc:	a1c00100 	.word	0xa1c00100
 8010dc0:	e0002000 	.word	0xe0002000
 8010dc4:	e0042000 	.word	0xe0042000
 8010dc8:	5c001000 	.word	0x5c001000
 8010dcc:	58024c08 	.word	0x58024c08
 8010dd0:	58024c00 	.word	0x58024c00
 8010dd4:	f407a5c2 	.word	0xf407a5c2
 8010dd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8010ddc:	40023008 	.word	0x40023008
 8010de0:	40023000 	.word	0x40023000
 8010de4:	f1ba 0f00 	cmp.w	sl, #0
 8010de8:	f000 808c 	beq.w	8010f04 <ai_platform_network_process+0x370>
 8010dec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	f240 813b 	bls.w	801106c <ai_platform_network_process+0x4d8>
 8010df6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010df8:	f115 0f0c 	cmn.w	r5, #12
 8010dfc:	f000 8136 	beq.w	801106c <ai_platform_network_process+0x4d8>
 8010e00:	89ab      	ldrh	r3, [r5, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 8132 	beq.w	801106c <ai_platform_network_process+0x4d8>
 8010e08:	4656      	mov	r6, sl
 8010e0a:	f04f 0900 	mov.w	r9, #0
 8010e0e:	9400      	str	r4, [sp, #0]
 8010e10:	4599      	cmp	r9, r3
 8010e12:	d274      	bcs.n	8010efe <ai_platform_network_process+0x36a>
 8010e14:	692b      	ldr	r3, [r5, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d071      	beq.n	8010efe <ai_platform_network_process+0x36a>
 8010e1a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8010e1e:	2f00      	cmp	r7, #0
 8010e20:	d06d      	beq.n	8010efe <ai_platform_network_process+0x36a>
 8010e22:	696b      	ldr	r3, [r5, #20]
 8010e24:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8010e28:	f8d3 8000 	ldr.w	r8, [r3]
 8010e2c:	eb18 0a04 	adds.w	sl, r8, r4
 8010e30:	f000 8125 	beq.w	801107e <ai_platform_network_process+0x4ea>
 8010e34:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 8010e38:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 8010e3c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8010e40:	fb0b f30e 	mul.w	r3, fp, lr
 8010e44:	69b8      	ldr	r0, [r7, #24]
 8010e46:	fb0c f303 	mul.w	r3, ip, r3
 8010e4a:	6841      	ldr	r1, [r0, #4]
 8010e4c:	4299      	cmp	r1, r3
 8010e4e:	f0c0 810c 	bcc.w	801106a <ai_platform_network_process+0x4d6>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	455a      	cmp	r2, fp
 8010e58:	f040 8107 	bne.w	801106a <ai_platform_network_process+0x4d6>
 8010e5c:	689a      	ldr	r2, [r3, #8]
 8010e5e:	4572      	cmp	r2, lr
 8010e60:	f040 8103 	bne.w	801106a <ai_platform_network_process+0x4d6>
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	459c      	cmp	ip, r3
 8010e68:	f040 80ff 	bne.w	801106a <ai_platform_network_process+0x4d6>
 8010e6c:	6800      	ldr	r0, [r0, #0]
 8010e6e:	f002 fb85 	bl	801357c <ai_array_get_byte_size>
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	68d2      	ldr	r2, [r2, #12]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	fb03 f302 	mul.w	r3, r3, r2
 8010e7e:	4298      	cmp	r0, r3
 8010e80:	f0c0 80f3 	bcc.w	801106a <ai_platform_network_process+0x4d6>
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	6818      	ldr	r0, [r3, #0]
 8010e88:	f002 fb2c 	bl	80134e4 <ai_array_to_buffer_fmt>
 8010e8c:	6833      	ldr	r3, [r6, #0]
 8010e8e:	4043      	eors	r3, r0
 8010e90:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010e94:	f040 810e 	bne.w	80110b4 <ai_platform_network_process+0x520>
 8010e98:	6933      	ldr	r3, [r6, #16]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 8101 	beq.w	80110a2 <ai_platform_network_process+0x50e>
 8010ea0:	88b3      	ldrh	r3, [r6, #4]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f000 80f4 	beq.w	8011090 <ai_platform_network_process+0x4fc>
 8010ea8:	9a01      	ldr	r2, [sp, #4]
 8010eaa:	68f9      	ldr	r1, [r7, #12]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	68c9      	ldr	r1, [r1, #12]
 8010eb0:	bf38      	it	cc
 8010eb2:	461a      	movcc	r2, r3
 8010eb4:	9201      	str	r2, [sp, #4]
 8010eb6:	697a      	ldr	r2, [r7, #20]
 8010eb8:	68d3      	ldr	r3, [r2, #12]
 8010eba:	fb03 f301 	mul.w	r3, r3, r1
 8010ebe:	f8ca 3008 	str.w	r3, [sl, #8]
 8010ec2:	88b2      	ldrh	r2, [r6, #4]
 8010ec4:	fb03 f302 	mul.w	r3, r3, r2
 8010ec8:	f8ca 300c 	str.w	r3, [sl, #12]
 8010ecc:	6931      	ldr	r1, [r6, #16]
 8010ece:	f8ca 1004 	str.w	r1, [sl, #4]
 8010ed2:	6932      	ldr	r2, [r6, #16]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	f848 3004 	str.w	r3, [r8, r4]
 8010eda:	69b8      	ldr	r0, [r7, #24]
 8010edc:	6803      	ldr	r3, [r0, #0]
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	d408      	bmi.n	8010ef4 <ai_platform_network_process+0x360>
 8010ee2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	4419      	add	r1, r3
 8010eea:	6081      	str	r1, [r0, #8]
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010ef2:	60da      	str	r2, [r3, #12]
 8010ef4:	f109 0901 	add.w	r9, r9, #1
 8010ef8:	3618      	adds	r6, #24
 8010efa:	89ab      	ldrh	r3, [r5, #12]
 8010efc:	e788      	b.n	8010e10 <ai_platform_network_process+0x27c>
 8010efe:	e9dd 4300 	ldrd	r4, r3, [sp]
 8010f02:	82a3      	strh	r3, [r4, #20]
 8010f04:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010f08:	2a00      	cmp	r2, #0
 8010f0a:	f000 80a9 	beq.w	8011060 <ai_platform_network_process+0x4cc>
 8010f0e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010f10:	2a01      	cmp	r2, #1
 8010f12:	f240 80a8 	bls.w	8011066 <ai_platform_network_process+0x4d2>
 8010f16:	f105 060c 	add.w	r6, r5, #12
 8010f1a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8010f1e:	8aa3      	ldrh	r3, [r4, #20]
 8010f20:	455b      	cmp	r3, fp
 8010f22:	f67f af32 	bls.w	8010d8a <ai_platform_network_process+0x1f6>
 8010f26:	9400      	str	r4, [sp, #0]
 8010f28:	2d00      	cmp	r5, #0
 8010f2a:	d037      	beq.n	8010f9c <ai_platform_network_process+0x408>
 8010f2c:	882b      	ldrh	r3, [r5, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d034      	beq.n	8010f9c <ai_platform_network_process+0x408>
 8010f32:	686b      	ldr	r3, [r5, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d031      	beq.n	8010f9c <ai_platform_network_process+0x408>
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d02e      	beq.n	8010f9c <ai_platform_network_process+0x408>
 8010f3e:	f04f 0800 	mov.w	r8, #0
 8010f42:	e01a      	b.n	8010f7a <ai_platform_network_process+0x3e6>
 8010f44:	68d4      	ldr	r4, [r2, #12]
 8010f46:	1b00      	subs	r0, r0, r4
 8010f48:	4401      	add	r1, r0
 8010f4a:	6091      	str	r1, [r2, #8]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	699b      	ldr	r3, [r3, #24]
 8010f50:	60da      	str	r2, [r3, #12]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f108 0801 	add.w	r8, r8, #1
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010f5e:	440b      	add	r3, r1
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d301      	bcc.n	8010f68 <ai_platform_network_process+0x3d4>
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	607b      	str	r3, [r7, #4]
 8010f6a:	882b      	ldrh	r3, [r5, #0]
 8010f6c:	4598      	cmp	r8, r3
 8010f6e:	d215      	bcs.n	8010f9c <ai_platform_network_process+0x408>
 8010f70:	686b      	ldr	r3, [r5, #4]
 8010f72:	b19b      	cbz	r3, 8010f9c <ai_platform_network_process+0x408>
 8010f74:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010f78:	b183      	cbz	r3, 8010f9c <ai_platform_network_process+0x408>
 8010f7a:	68a9      	ldr	r1, [r5, #8]
 8010f7c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010f80:	699a      	ldr	r2, [r3, #24]
 8010f82:	f8d1 a000 	ldr.w	sl, [r1]
 8010f86:	6814      	ldr	r4, [r2, #0]
 8010f88:	eb0a 0709 	add.w	r7, sl, r9
 8010f8c:	6890      	ldr	r0, [r2, #8]
 8010f8e:	00a4      	lsls	r4, r4, #2
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	d5d7      	bpl.n	8010f44 <ai_platform_network_process+0x3b0>
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	f002 fb4b 	bl	8013630 <memcpy>
 8010f9a:	e7da      	b.n	8010f52 <ai_platform_network_process+0x3be>
 8010f9c:	9800      	ldr	r0, [sp, #0]
 8010f9e:	f002 fa67 	bl	8013470 <ai_layers_forward_all>
 8010fa2:	2e00      	cmp	r6, #0
 8010fa4:	d04a      	beq.n	801103c <ai_platform_network_process+0x4a8>
 8010fa6:	8833      	ldrh	r3, [r6, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d047      	beq.n	801103c <ai_platform_network_process+0x4a8>
 8010fac:	6873      	ldr	r3, [r6, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d044      	beq.n	801103c <ai_platform_network_process+0x4a8>
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d041      	beq.n	801103c <ai_platform_network_process+0x4a8>
 8010fb8:	f04f 0800 	mov.w	r8, #0
 8010fbc:	e019      	b.n	8010ff2 <ai_platform_network_process+0x45e>
 8010fbe:	f85a 2009 	ldr.w	r2, [sl, r9]
 8010fc2:	4291      	cmp	r1, r2
 8010fc4:	d301      	bcc.n	8010fca <ai_platform_network_process+0x436>
 8010fc6:	68f9      	ldr	r1, [r7, #12]
 8010fc8:	1a51      	subs	r1, r2, r1
 8010fca:	6079      	str	r1, [r7, #4]
 8010fcc:	f108 0801 	add.w	r8, r8, #1
 8010fd0:	6998      	ldr	r0, [r3, #24]
 8010fd2:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8010fd6:	1b12      	subs	r2, r2, r4
 8010fd8:	440a      	add	r2, r1
 8010fda:	6082      	str	r2, [r0, #8]
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	60da      	str	r2, [r3, #12]
 8010fe2:	8833      	ldrh	r3, [r6, #0]
 8010fe4:	4598      	cmp	r8, r3
 8010fe6:	d229      	bcs.n	801103c <ai_platform_network_process+0x4a8>
 8010fe8:	6873      	ldr	r3, [r6, #4]
 8010fea:	b33b      	cbz	r3, 801103c <ai_platform_network_process+0x4a8>
 8010fec:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010ff0:	b323      	cbz	r3, 801103c <ai_platform_network_process+0x4a8>
 8010ff2:	68b2      	ldr	r2, [r6, #8]
 8010ff4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010ff8:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8010ffc:	f8d2 a000 	ldr.w	sl, [r2]
 8011000:	f8de 1000 	ldr.w	r1, [lr]
 8011004:	eb0a 0709 	add.w	r7, sl, r9
 8011008:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801100c:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8011010:	eb00 0102 	add.w	r1, r0, r2
 8011014:	d0d3      	beq.n	8010fbe <ai_platform_network_process+0x42a>
 8011016:	f8de 1008 	ldr.w	r1, [lr, #8]
 801101a:	f002 fb09 	bl	8013630 <memcpy>
 801101e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8011022:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8011026:	440b      	add	r3, r1
 8011028:	4293      	cmp	r3, r2
 801102a:	d301      	bcc.n	8011030 <ai_platform_network_process+0x49c>
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	607b      	str	r3, [r7, #4]
 8011032:	f108 0801 	add.w	r8, r8, #1
 8011036:	8833      	ldrh	r3, [r6, #0]
 8011038:	4598      	cmp	r8, r3
 801103a:	d3d5      	bcc.n	8010fe8 <ai_platform_network_process+0x454>
 801103c:	9b00      	ldr	r3, [sp, #0]
 801103e:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8011042:	461a      	mov	r2, r3
 8011044:	8a9b      	ldrh	r3, [r3, #20]
 8011046:	f10b 0b01 	add.w	fp, fp, #1
 801104a:	fa1f fb8b 	uxth.w	fp, fp
 801104e:	455b      	cmp	r3, fp
 8011050:	f8a2 b016 	strh.w	fp, [r2, #22]
 8011054:	f63f af68 	bhi.w	8010f28 <ai_platform_network_process+0x394>
 8011058:	4658      	mov	r0, fp
 801105a:	b003      	add	sp, #12
 801105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011060:	4615      	mov	r5, r2
 8011062:	4616      	mov	r6, r2
 8011064:	e759      	b.n	8010f1a <ai_platform_network_process+0x386>
 8011066:	2600      	movs	r6, #0
 8011068:	e757      	b.n	8010f1a <ai_platform_network_process+0x386>
 801106a:	9c00      	ldr	r4, [sp, #0]
 801106c:	f104 0010 	add.w	r0, r4, #16
 8011070:	2218      	movs	r2, #24
 8011072:	2113      	movs	r1, #19
 8011074:	f04f 0b00 	mov.w	fp, #0
 8011078:	f000 f83e 	bl	80110f8 <core_set_error>
 801107c:	e685      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 801107e:	9c00      	ldr	r4, [sp, #0]
 8011080:	2217      	movs	r2, #23
 8011082:	2113      	movs	r1, #19
 8011084:	46d3      	mov	fp, sl
 8011086:	f104 0010 	add.w	r0, r4, #16
 801108a:	f000 f835 	bl	80110f8 <core_set_error>
 801108e:	e67c      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 8011090:	9c00      	ldr	r4, [sp, #0]
 8011092:	2221      	movs	r2, #33	; 0x21
 8011094:	2113      	movs	r1, #19
 8011096:	469b      	mov	fp, r3
 8011098:	f104 0010 	add.w	r0, r4, #16
 801109c:	f000 f82c 	bl	80110f8 <core_set_error>
 80110a0:	e673      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 80110a2:	9c00      	ldr	r4, [sp, #0]
 80110a4:	2217      	movs	r2, #23
 80110a6:	2113      	movs	r1, #19
 80110a8:	469b      	mov	fp, r3
 80110aa:	f104 0010 	add.w	r0, r4, #16
 80110ae:	f000 f823 	bl	80110f8 <core_set_error>
 80110b2:	e66a      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 80110b4:	9c00      	ldr	r4, [sp, #0]
 80110b6:	2219      	movs	r2, #25
 80110b8:	2113      	movs	r1, #19
 80110ba:	f04f 0b00 	mov.w	fp, #0
 80110be:	f104 0010 	add.w	r0, r4, #16
 80110c2:	f000 f819 	bl	80110f8 <core_set_error>
 80110c6:	e660      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 80110c8:	f104 0010 	add.w	r0, r4, #16
 80110cc:	2217      	movs	r2, #23
 80110ce:	2112      	movs	r1, #18
 80110d0:	469b      	mov	fp, r3
 80110d2:	f000 f811 	bl	80110f8 <core_set_error>
 80110d6:	e658      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 80110d8:	f104 0010 	add.w	r0, r4, #16
 80110dc:	2219      	movs	r2, #25
 80110de:	2112      	movs	r1, #18
 80110e0:	f04f 0b00 	mov.w	fp, #0
 80110e4:	f000 f808 	bl	80110f8 <core_set_error>
 80110e8:	e64f      	b.n	8010d8a <ai_platform_network_process+0x1f6>
 80110ea:	f1ba 0f00 	cmp.w	sl, #0
 80110ee:	f47f ae7f 	bne.w	8010df0 <ai_platform_network_process+0x25c>
 80110f2:	e70d      	b.n	8010f10 <ai_platform_network_process+0x37c>

080110f4 <core_init>:
 80110f4:	2001      	movs	r0, #1
 80110f6:	4770      	bx	lr

080110f8 <core_set_error>:
 80110f8:	4603      	mov	r3, r0
 80110fa:	7800      	ldrb	r0, [r0, #0]
 80110fc:	b930      	cbnz	r0, 801110c <core_set_error+0x14>
 80110fe:	7019      	strb	r1, [r3, #0]
 8011100:	2001      	movs	r0, #1
 8011102:	6819      	ldr	r1, [r3, #0]
 8011104:	f362 211f 	bfi	r1, r2, #8, #24
 8011108:	6019      	str	r1, [r3, #0]
 801110a:	4770      	bx	lr
 801110c:	2000      	movs	r0, #0
 801110e:	4770      	bx	lr

08011110 <func_dummy>:
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop

08011114 <ai_dict8_dot_array_f32>:
 8011114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011118:	9d06      	ldr	r5, [sp, #24]
 801111a:	4c88      	ldr	r4, [pc, #544]	; (801133c <ai_dict8_dot_array_f32+0x228>)
 801111c:	2d07      	cmp	r5, #7
 801111e:	442c      	add	r4, r5
 8011120:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011124:	f104 0620 	add.w	r6, r4, #32
 8011128:	d817      	bhi.n	801115a <ai_dict8_dot_array_f32+0x46>
 801112a:	42b3      	cmp	r3, r6
 801112c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8011340 <ai_dict8_dot_array_f32+0x22c>
 8011130:	d20b      	bcs.n	801114a <ai_dict8_dot_array_f32+0x36>
 8011132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011136:	ecf3 7a01 	vldmia	r3!, {s15}
 801113a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801113e:	42b3      	cmp	r3, r6
 8011140:	edd4 6a00 	vldr	s13, [r4]
 8011144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011148:	d3f3      	bcc.n	8011132 <ai_dict8_dot_array_f32+0x1e>
 801114a:	edd0 7a00 	vldr	s15, [r0]
 801114e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011152:	ed80 7a00 	vstr	s14, [r0]
 8011156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801115a:	f001 0503 	and.w	r5, r1, #3
 801115e:	2d02      	cmp	r5, #2
 8011160:	f000 80f0 	beq.w	8011344 <ai_dict8_dot_array_f32+0x230>
 8011164:	2d03      	cmp	r5, #3
 8011166:	f000 81ff 	beq.w	8011568 <ai_dict8_dot_array_f32+0x454>
 801116a:	2d01      	cmp	r5, #1
 801116c:	f000 81f0 	beq.w	8011550 <ai_dict8_dot_array_f32+0x43c>
 8011170:	42a3      	cmp	r3, r4
 8011172:	f200 81fc 	bhi.w	801156e <ai_dict8_dot_array_f32+0x45a>
 8011176:	1ae4      	subs	r4, r4, r3
 8011178:	f101 0810 	add.w	r8, r1, #16
 801117c:	f101 0508 	add.w	r5, r1, #8
 8011180:	f103 0720 	add.w	r7, r3, #32
 8011184:	0964      	lsrs	r4, r4, #5
 8011186:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8011340 <ai_dict8_dot_array_f32+0x22c>
 801118a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 801118e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8011192:	3508      	adds	r5, #8
 8011194:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8011198:	3720      	adds	r7, #32
 801119a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 801119e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 80111a2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80111a6:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 80111aa:	edde 7a00 	vldr	s15, [lr]
 80111ae:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 80111b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80111b6:	eddc 5a00 	vldr	s11, [ip]
 80111ba:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 80111be:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 80111c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80111c6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80111ca:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 80111ce:	ed9c 4a00 	vldr	s8, [ip]
 80111d2:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 80111d6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80111da:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 80111de:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80111e2:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 80111e6:	eee4 7a26 	vfma.f32	s15, s8, s13
 80111ea:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 80111ee:	ed9c 4a00 	vldr	s8, [ip]
 80111f2:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 80111f6:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 80111fa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80111fe:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011202:	ed9e 5a00 	vldr	s10, [lr]
 8011206:	ed9c 4a00 	vldr	s8, [ip]
 801120a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 801120e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8011212:	4545      	cmp	r5, r8
 8011214:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8011218:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801121c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011220:	ed9e 5a00 	vldr	s10, [lr]
 8011224:	ed9c 6a00 	vldr	s12, [ip]
 8011228:	eee4 7a24 	vfma.f32	s15, s8, s9
 801122c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011230:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011238:	d1a9      	bne.n	801118e <ai_dict8_dot_array_f32+0x7a>
 801123a:	3401      	adds	r4, #1
 801123c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8011240:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8011244:	42b3      	cmp	r3, r6
 8011246:	d280      	bcs.n	801114a <ai_dict8_dot_array_f32+0x36>
 8011248:	461c      	mov	r4, r3
 801124a:	780d      	ldrb	r5, [r1, #0]
 801124c:	ecf4 6a01 	vldmia	r4!, {s13}
 8011250:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011254:	42a6      	cmp	r6, r4
 8011256:	edd5 7a00 	vldr	s15, [r5]
 801125a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801125e:	f67f af74 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 8011262:	784d      	ldrb	r5, [r1, #1]
 8011264:	f103 0408 	add.w	r4, r3, #8
 8011268:	edd3 6a01 	vldr	s13, [r3, #4]
 801126c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011270:	42a6      	cmp	r6, r4
 8011272:	edd5 7a00 	vldr	s15, [r5]
 8011276:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801127a:	f67f af66 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 801127e:	788d      	ldrb	r5, [r1, #2]
 8011280:	f103 040c 	add.w	r4, r3, #12
 8011284:	edd3 6a02 	vldr	s13, [r3, #8]
 8011288:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801128c:	42a6      	cmp	r6, r4
 801128e:	edd5 7a00 	vldr	s15, [r5]
 8011292:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011296:	f67f af58 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 801129a:	78cd      	ldrb	r5, [r1, #3]
 801129c:	f103 0410 	add.w	r4, r3, #16
 80112a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80112a4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80112a8:	42a6      	cmp	r6, r4
 80112aa:	edd5 7a00 	vldr	s15, [r5]
 80112ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112b2:	f67f af4a 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80112b6:	790d      	ldrb	r5, [r1, #4]
 80112b8:	f103 0414 	add.w	r4, r3, #20
 80112bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80112c0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80112c4:	42a6      	cmp	r6, r4
 80112c6:	edd5 7a00 	vldr	s15, [r5]
 80112ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112ce:	f67f af3c 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80112d2:	794d      	ldrb	r5, [r1, #5]
 80112d4:	f103 0418 	add.w	r4, r3, #24
 80112d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80112dc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80112e0:	42a6      	cmp	r6, r4
 80112e2:	edd5 7a00 	vldr	s15, [r5]
 80112e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80112ea:	f67f af2e 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80112ee:	798d      	ldrb	r5, [r1, #6]
 80112f0:	f103 041c 	add.w	r4, r3, #28
 80112f4:	edd3 6a06 	vldr	s13, [r3, #24]
 80112f8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80112fc:	42a6      	cmp	r6, r4
 80112fe:	edd5 7a00 	vldr	s15, [r5]
 8011302:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011306:	f67f af20 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 801130a:	79cd      	ldrb	r5, [r1, #7]
 801130c:	f103 0420 	add.w	r4, r3, #32
 8011310:	edd3 6a07 	vldr	s13, [r3, #28]
 8011314:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011318:	42a6      	cmp	r6, r4
 801131a:	edd5 7a00 	vldr	s15, [r5]
 801131e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011322:	f67f af12 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 8011326:	7a09      	ldrb	r1, [r1, #8]
 8011328:	edd3 7a08 	vldr	s15, [r3, #32]
 801132c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011330:	edd2 6a00 	vldr	s13, [r2]
 8011334:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011338:	e707      	b.n	801114a <ai_dict8_dot_array_f32+0x36>
 801133a:	bf00      	nop
 801133c:	3ffffff8 	.word	0x3ffffff8
 8011340:	00000000 	.word	0x00000000
 8011344:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8011340 <ai_dict8_dot_array_f32+0x22c>
 8011348:	780d      	ldrb	r5, [r1, #0]
 801134a:	3304      	adds	r3, #4
 801134c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011350:	3101      	adds	r1, #1
 8011352:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011356:	edd5 6a00 	vldr	s13, [r5]
 801135a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801135e:	780d      	ldrb	r5, [r1, #0]
 8011360:	1d1f      	adds	r7, r3, #4
 8011362:	edd3 7a00 	vldr	s15, [r3]
 8011366:	f101 0c01 	add.w	ip, r1, #1
 801136a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801136e:	42bc      	cmp	r4, r7
 8011370:	edd5 6a00 	vldr	s13, [r5]
 8011374:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011378:	d365      	bcc.n	8011446 <ai_dict8_dot_array_f32+0x332>
 801137a:	3324      	adds	r3, #36	; 0x24
 801137c:	f101 0e11 	add.w	lr, r1, #17
 8011380:	3109      	adds	r1, #9
 8011382:	eba6 0803 	sub.w	r8, r6, r3
 8011386:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801138a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 801138e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011392:	3108      	adds	r1, #8
 8011394:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8011398:	3320      	adds	r3, #32
 801139a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801139e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80113a2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80113a6:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 80113aa:	edd5 7a00 	vldr	s15, [r5]
 80113ae:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 80113b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80113b6:	edd4 5a00 	vldr	s11, [r4]
 80113ba:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 80113be:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 80113c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80113c6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80113ca:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80113ce:	ed94 4a00 	vldr	s8, [r4]
 80113d2:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 80113d6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80113da:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 80113de:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80113e2:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 80113e6:	eee4 7a26 	vfma.f32	s15, s8, s13
 80113ea:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 80113ee:	ed94 4a00 	vldr	s8, [r4]
 80113f2:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 80113f6:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80113fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80113fe:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011402:	ed95 5a00 	vldr	s10, [r5]
 8011406:	ed94 4a00 	vldr	s8, [r4]
 801140a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 801140e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8011412:	458e      	cmp	lr, r1
 8011414:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011418:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801141c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011420:	ed95 5a00 	vldr	s10, [r5]
 8011424:	ed94 6a00 	vldr	s12, [r4]
 8011428:	eee4 7a24 	vfma.f32	s15, s8, s9
 801142c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011430:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011438:	d1a9      	bne.n	801138e <ai_dict8_dot_array_f32+0x27a>
 801143a:	f108 0801 	add.w	r8, r8, #1
 801143e:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8011442:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8011446:	42b7      	cmp	r7, r6
 8011448:	f4bf ae7f 	bcs.w	801114a <ai_dict8_dot_array_f32+0x36>
 801144c:	463b      	mov	r3, r7
 801144e:	f89c 1000 	ldrb.w	r1, [ip]
 8011452:	ecf3 6a01 	vldmia	r3!, {s13}
 8011456:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801145a:	429e      	cmp	r6, r3
 801145c:	edd1 7a00 	vldr	s15, [r1]
 8011460:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011464:	f67f ae71 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 8011468:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801146c:	f107 0308 	add.w	r3, r7, #8
 8011470:	edd7 6a01 	vldr	s13, [r7, #4]
 8011474:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011478:	429e      	cmp	r6, r3
 801147a:	edd1 7a00 	vldr	s15, [r1]
 801147e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011482:	f67f ae62 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 8011486:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801148a:	f107 030c 	add.w	r3, r7, #12
 801148e:	edd7 6a02 	vldr	s13, [r7, #8]
 8011492:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011496:	429e      	cmp	r6, r3
 8011498:	edd1 7a00 	vldr	s15, [r1]
 801149c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114a0:	f67f ae53 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80114a4:	f89c 1003 	ldrb.w	r1, [ip, #3]
 80114a8:	f107 0310 	add.w	r3, r7, #16
 80114ac:	edd7 6a03 	vldr	s13, [r7, #12]
 80114b0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80114b4:	429e      	cmp	r6, r3
 80114b6:	edd1 7a00 	vldr	s15, [r1]
 80114ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114be:	f67f ae44 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80114c2:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80114c6:	f107 0314 	add.w	r3, r7, #20
 80114ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80114ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80114d2:	429e      	cmp	r6, r3
 80114d4:	edd1 7a00 	vldr	s15, [r1]
 80114d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114dc:	f67f ae35 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80114e0:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80114e4:	f107 0318 	add.w	r3, r7, #24
 80114e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80114ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80114f0:	429e      	cmp	r6, r3
 80114f2:	edd1 7a00 	vldr	s15, [r1]
 80114f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114fa:	f67f ae26 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 80114fe:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8011502:	f107 031c 	add.w	r3, r7, #28
 8011506:	edd7 6a06 	vldr	s13, [r7, #24]
 801150a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801150e:	429e      	cmp	r6, r3
 8011510:	edd1 7a00 	vldr	s15, [r1]
 8011514:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011518:	f67f ae17 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 801151c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8011520:	f107 0320 	add.w	r3, r7, #32
 8011524:	edd7 6a07 	vldr	s13, [r7, #28]
 8011528:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801152c:	429e      	cmp	r6, r3
 801152e:	edd1 7a00 	vldr	s15, [r1]
 8011532:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011536:	f67f ae08 	bls.w	801114a <ai_dict8_dot_array_f32+0x36>
 801153a:	f89c 3008 	ldrb.w	r3, [ip, #8]
 801153e:	edd7 7a08 	vldr	s15, [r7, #32]
 8011542:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011546:	edd2 6a00 	vldr	s13, [r2]
 801154a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801154e:	e5fc      	b.n	801114a <ai_dict8_dot_array_f32+0x36>
 8011550:	780d      	ldrb	r5, [r1, #0]
 8011552:	3304      	adds	r3, #4
 8011554:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011558:	3101      	adds	r1, #1
 801155a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801155e:	ed95 7a00 	vldr	s14, [r5]
 8011562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011566:	e6ef      	b.n	8011348 <ai_dict8_dot_array_f32+0x234>
 8011568:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8011340 <ai_dict8_dot_array_f32+0x22c>
 801156c:	e6f7      	b.n	801135e <ai_dict8_dot_array_f32+0x24a>
 801156e:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8011340 <ai_dict8_dot_array_f32+0x22c>
 8011572:	e667      	b.n	8011244 <ai_dict8_dot_array_f32+0x130>

08011574 <ai_dict4_dot_array_f32>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801157a:	f027 0c01 	bic.w	ip, r7, #1
 801157e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8011582:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011586:	f000 80ad 	beq.w	80116e4 <ai_dict4_dot_array_f32+0x170>
 801158a:	1d0d      	adds	r5, r1, #4
 801158c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8011590:	f103 0420 	add.w	r4, r3, #32
 8011594:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80116ec <ai_dict4_dot_array_f32+0x178>
 8011598:	eb05 0e09 	add.w	lr, r5, r9
 801159c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80115a0:	3504      	adds	r5, #4
 80115a2:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 80115a6:	3420      	adds	r4, #32
 80115a8:	f006 0a0f 	and.w	sl, r6, #15
 80115ac:	0936      	lsrs	r6, r6, #4
 80115ae:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80115b2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80115b6:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 80115ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80115be:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 80115c2:	edda 7a00 	vldr	s15, [sl]
 80115c6:	edd6 5a00 	vldr	s11, [r6]
 80115ca:	ee67 7a85 	vmul.f32	s15, s15, s10
 80115ce:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 80115d2:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 80115d6:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80115da:	f006 060f 	and.w	r6, r6, #15
 80115de:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80115e2:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 80115e6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80115ea:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 80115ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80115f2:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 80115f6:	ed9a 3a00 	vldr	s6, [sl]
 80115fa:	ed96 5a00 	vldr	s10, [r6]
 80115fe:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8011602:	eee3 7a04 	vfma.f32	s15, s6, s8
 8011606:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 801160a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 801160e:	f00a 0a0f 	and.w	sl, sl, #15
 8011612:	45ae      	cmp	lr, r5
 8011614:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8011618:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 801161c:	ed9b 3a00 	vldr	s6, [fp]
 8011620:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8011624:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011628:	ed9a 4a00 	vldr	s8, [sl]
 801162c:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8011630:	f006 060f 	and.w	r6, r6, #15
 8011634:	ed9a 5a00 	vldr	s10, [sl]
 8011638:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801163c:	ed96 6a00 	vldr	s12, [r6]
 8011640:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011644:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011648:	eee5 7a25 	vfma.f32	s15, s10, s11
 801164c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011654:	d1a2      	bne.n	801159c <ai_dict4_dot_array_f32+0x28>
 8011656:	4449      	add	r1, r9
 8011658:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 801165c:	459c      	cmp	ip, r3
 801165e:	d92d      	bls.n	80116bc <ai_dict4_dot_array_f32+0x148>
 8011660:	f10c 0c07 	add.w	ip, ip, #7
 8011664:	f103 0508 	add.w	r5, r3, #8
 8011668:	f103 0810 	add.w	r8, r3, #16
 801166c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8011670:	ebac 0c05 	sub.w	ip, ip, r5
 8011674:	f02c 0407 	bic.w	r4, ip, #7
 8011678:	44a0      	add	r8, r4
 801167a:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 801167e:	3508      	adds	r5, #8
 8011680:	ed55 5a03 	vldr	s11, [r5, #-12]
 8011684:	f004 060f 	and.w	r6, r4, #15
 8011688:	0924      	lsrs	r4, r4, #4
 801168a:	ed55 6a04 	vldr	s13, [r5, #-16]
 801168e:	45a8      	cmp	r8, r5
 8011690:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011694:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011698:	edd6 7a00 	vldr	s15, [r6]
 801169c:	ed94 6a00 	vldr	s12, [r4]
 80116a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80116a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80116a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116ac:	d1e5      	bne.n	801167a <ai_dict4_dot_array_f32+0x106>
 80116ae:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80116b2:	f10c 0c01 	add.w	ip, ip, #1
 80116b6:	4461      	add	r1, ip
 80116b8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80116bc:	07fc      	lsls	r4, r7, #31
 80116be:	d509      	bpl.n	80116d4 <ai_dict4_dot_array_f32+0x160>
 80116c0:	7809      	ldrb	r1, [r1, #0]
 80116c2:	edd3 7a00 	vldr	s15, [r3]
 80116c6:	090b      	lsrs	r3, r1, #4
 80116c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80116cc:	edd2 6a00 	vldr	s13, [r2]
 80116d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116d4:	edd0 7a00 	vldr	s15, [r0]
 80116d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116dc:	ed80 7a00 	vstr	s14, [r0]
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80116ec <ai_dict4_dot_array_f32+0x178>
 80116e8:	e7b8      	b.n	801165c <ai_dict4_dot_array_f32+0xe8>
 80116ea:	bf00      	nop
 80116ec:	00000000 	.word	0x00000000

080116f0 <ai_dict_decompress_f32>:
 80116f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116f4:	9f08      	ldr	r7, [sp, #32]
 80116f6:	2b04      	cmp	r3, #4
 80116f8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80116fc:	d00e      	beq.n	801171c <ai_dict_decompress_f32+0x2c>
 80116fe:	2b08      	cmp	r3, #8
 8011700:	d10a      	bne.n	8011718 <ai_dict_decompress_f32+0x28>
 8011702:	42b8      	cmp	r0, r7
 8011704:	d208      	bcs.n	8011718 <ai_dict_decompress_f32+0x28>
 8011706:	f811 3b01 	ldrb.w	r3, [r1], #1
 801170a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f840 3b04 	str.w	r3, [r0], #4
 8011714:	4287      	cmp	r7, r0
 8011716:	d8f6      	bhi.n	8011706 <ai_dict_decompress_f32+0x16>
 8011718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801171c:	9b07      	ldr	r3, [sp, #28]
 801171e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8011722:	f003 0e01 	and.w	lr, r3, #1
 8011726:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 801172a:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 801172e:	42b8      	cmp	r0, r7
 8011730:	d2f2      	bcs.n	8011718 <ai_dict_decompress_f32+0x28>
 8011732:	f1bc 0f00 	cmp.w	ip, #0
 8011736:	d019      	beq.n	801176c <ai_dict_decompress_f32+0x7c>
 8011738:	f100 0508 	add.w	r5, r0, #8
 801173c:	1e4c      	subs	r4, r1, #1
 801173e:	eb01 0608 	add.w	r6, r1, r8
 8011742:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011746:	3508      	adds	r5, #8
 8011748:	091b      	lsrs	r3, r3, #4
 801174a:	42a6      	cmp	r6, r4
 801174c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f845 3c10 	str.w	r3, [r5, #-16]
 8011756:	7823      	ldrb	r3, [r4, #0]
 8011758:	f003 030f 	and.w	r3, r3, #15
 801175c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f845 3c0c 	str.w	r3, [r5, #-12]
 8011766:	d1ec      	bne.n	8011742 <ai_dict_decompress_f32+0x52>
 8011768:	4461      	add	r1, ip
 801176a:	4448      	add	r0, r9
 801176c:	f1be 0f00 	cmp.w	lr, #0
 8011770:	d103      	bne.n	801177a <ai_dict_decompress_f32+0x8a>
 8011772:	4287      	cmp	r7, r0
 8011774:	d8dd      	bhi.n	8011732 <ai_dict_decompress_f32+0x42>
 8011776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801177a:	780b      	ldrb	r3, [r1, #0]
 801177c:	3004      	adds	r0, #4
 801177e:	3101      	adds	r1, #1
 8011780:	091b      	lsrs	r3, r3, #4
 8011782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f840 3c04 	str.w	r3, [r0, #-4]
 801178c:	e7cf      	b.n	801172e <ai_dict_decompress_f32+0x3e>
 801178e:	bf00      	nop

08011790 <forward_conv2d>:
 8011790:	6942      	ldr	r2, [r0, #20]
 8011792:	8813      	ldrh	r3, [r2, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	f000 8639 	beq.w	801240c <forward_conv2d+0xc7c>
 801179a:	6852      	ldr	r2, [r2, #4]
 801179c:	6851      	ldr	r1, [r2, #4]
 801179e:	b101      	cbz	r1, 80117a2 <forward_conv2d+0x12>
 80117a0:	6809      	ldr	r1, [r1, #0]
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	f240 862f 	bls.w	8012406 <forward_conv2d+0xc76>
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	ed2d 8b08 	vpush	{d8-d11}
 80117b0:	b0c9      	sub	sp, #292	; 0x124
 80117b2:	6914      	ldr	r4, [r2, #16]
 80117b4:	af02      	add	r7, sp, #8
 80117b6:	2c00      	cmp	r4, #0
 80117b8:	f000 8621 	beq.w	80123fe <forward_conv2d+0xc6e>
 80117bc:	6824      	ldr	r4, [r4, #0]
 80117be:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	f000 8616 	beq.w	80123f4 <forward_conv2d+0xc64>
 80117c8:	69d5      	ldr	r5, [r2, #28]
 80117ca:	2d00      	cmp	r5, #0
 80117cc:	f000 860b 	beq.w	80123e6 <forward_conv2d+0xc56>
 80117d0:	f112 0318 	adds.w	r3, r2, #24
 80117d4:	682c      	ldr	r4, [r5, #0]
 80117d6:	d004      	beq.n	80117e2 <forward_conv2d+0x52>
 80117d8:	8b13      	ldrh	r3, [r2, #24]
 80117da:	2b01      	cmp	r3, #1
 80117dc:	f240 8618 	bls.w	8012410 <forward_conv2d+0xc80>
 80117e0:	686b      	ldr	r3, [r5, #4]
 80117e2:	68aa      	ldr	r2, [r5, #8]
 80117e4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80117e8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80117ec:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80117f0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80117f4:	68ce      	ldr	r6, [r1, #12]
 80117f6:	69a1      	ldr	r1, [r4, #24]
 80117f8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80117fa:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80117fe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011802:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8011806:	f8de 1004 	ldr.w	r1, [lr, #4]
 801180a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801180e:	f8de 100c 	ldr.w	r1, [lr, #12]
 8011812:	64f9      	str	r1, [r7, #76]	; 0x4c
 8011814:	f8de 1008 	ldr.w	r1, [lr, #8]
 8011818:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 801181c:	6871      	ldr	r1, [r6, #4]
 801181e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011822:	68f1      	ldr	r1, [r6, #12]
 8011824:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8011828:	68b1      	ldr	r1, [r6, #8]
 801182a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 801182e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011832:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8011836:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801183a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 801183e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011842:	6889      	ldr	r1, [r1, #8]
 8011844:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8011848:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801184a:	e9d5 ab00 	ldrd	sl, fp, [r5]
 801184e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011852:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8011854:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011858:	6981      	ldr	r1, [r0, #24]
 801185a:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 801185e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8011862:	2b00      	cmp	r3, #0
 8011864:	f000 85b0 	beq.w	80123c8 <forward_conv2d+0xc38>
 8011868:	699b      	ldr	r3, [r3, #24]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011874:	4606      	mov	r6, r0
 8011876:	69c0      	ldr	r0, [r0, #28]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011880:	2a00      	cmp	r2, #0
 8011882:	f000 8594 	beq.w	80123ae <forward_conv2d+0xc1e>
 8011886:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 801188a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801188e:	6892      	ldr	r2, [r2, #8]
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801189a:	f001 fe6f 	bl	801357c <ai_array_get_byte_size>
 801189e:	69a3      	ldr	r3, [r4, #24]
 80118a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80118a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80118a8:	681c      	ldr	r4, [r3, #0]
 80118aa:	fa1f f289 	uxth.w	r2, r9
 80118ae:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80118b2:	fa1f f388 	uxth.w	r3, r8
 80118b6:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 80118ba:	f3c4 5041 	ubfx	r0, r4, #21, #2
 80118be:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80118c2:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 80118c6:	3a01      	subs	r2, #1
 80118c8:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80118cc:	fa45 f000 	asr.w	r0, r5, r0
 80118d0:	6a35      	ldr	r5, [r6, #32]
 80118d2:	fb0e 1202 	mla	r2, lr, r2, r1
 80118d6:	3b01      	subs	r3, #1
 80118d8:	3c01      	subs	r4, #1
 80118da:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80118de:	f8c7 50b0 	str.w	r5, [r7, #176]	; 0xb0
 80118e2:	b285      	uxth	r5, r0
 80118e4:	fb04 1103 	mla	r1, r4, r3, r1
 80118e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80118ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80118ee:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80118f2:	4619      	mov	r1, r3
 80118f4:	4ad1      	ldr	r2, [pc, #836]	; (8011c3c <forward_conv2d+0x4ac>)
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	bf08      	it	eq
 80118fa:	4611      	moveq	r1, r2
 80118fc:	f1bc 0f04 	cmp.w	ip, #4
 8011900:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011904:	f000 852a 	beq.w	801235c <forward_conv2d+0xbcc>
 8011908:	f1bc 0f08 	cmp.w	ip, #8
 801190c:	f000 8526 	beq.w	801235c <forward_conv2d+0xbcc>
 8011910:	fa1f f38a 	uxth.w	r3, sl
 8011914:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801191c:	425b      	negs	r3, r3
 801191e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011922:	2a00      	cmp	r2, #0
 8011924:	f000 8222 	beq.w	8011d6c <forward_conv2d+0x5dc>
 8011928:	fa1f f48b 	uxth.w	r4, fp
 801192c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011930:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 8011934:	fa0f f588 	sxth.w	r5, r8
 8011938:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801193c:	fa0f f689 	sxth.w	r6, r9
 8011940:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8011944:	4264      	negs	r4, r4
 8011946:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801194a:	fb02 f200 	mul.w	r2, r2, r0
 801194e:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 8011952:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8011956:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 801195a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 801195e:	0084      	lsls	r4, r0, #2
 8011960:	fb01 f300 	mul.w	r3, r1, r0
 8011964:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8011c40 <forward_conv2d+0x4b0>
 8011968:	fb00 f202 	mul.w	r2, r0, r2
 801196c:	f8c7 c0b4 	str.w	ip, [r7, #180]	; 0xb4
 8011970:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 8011974:	fb06 fc05 	mul.w	ip, r6, r5
 8011978:	fb05 f500 	mul.w	r5, r5, r0
 801197c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011980:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011984:	460a      	mov	r2, r1
 8011986:	637d      	str	r5, [r7, #52]	; 0x34
 8011988:	4605      	mov	r5, r0
 801198a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801198e:	fb04 f505 	mul.w	r5, r4, r5
 8011992:	653e      	str	r6, [r7, #80]	; 0x50
 8011994:	66fc      	str	r4, [r7, #108]	; 0x6c
 8011996:	fb01 f606 	mul.w	r6, r1, r6
 801199a:	4621      	mov	r1, r4
 801199c:	607d      	str	r5, [r7, #4]
 801199e:	0085      	lsls	r5, r0, #2
 80119a0:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80119a4:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 80119a8:	4625      	mov	r5, r4
 80119aa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80119ac:	63be      	str	r6, [r7, #56]	; 0x38
 80119ae:	fb01 f505 	mul.w	r5, r1, r5
 80119b2:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 80119b6:	fb04 f402 	mul.w	r4, r4, r2
 80119ba:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80119be:	00b6      	lsls	r6, r6, #2
 80119c0:	62bd      	str	r5, [r7, #40]	; 0x28
 80119c2:	fb00 f001 	mul.w	r0, r0, r1
 80119c6:	009d      	lsls	r5, r3, #2
 80119c8:	61bc      	str	r4, [r7, #24]
 80119ca:	0094      	lsls	r4, r2, #2
 80119cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119d0:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80119d4:	f8c7 60cc 	str.w	r6, [r7, #204]	; 0xcc
 80119d8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80119dc:	62fd      	str	r5, [r7, #44]	; 0x2c
 80119de:	633c      	str	r4, [r7, #48]	; 0x30
 80119e0:	6238      	str	r0, [r7, #32]
 80119e2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80119e6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80119ea:	fb06 f000 	mul.w	r0, r6, r0
 80119ee:	fb02 f201 	mul.w	r2, r2, r1
 80119f2:	61f8      	str	r0, [r7, #28]
 80119f4:	0118      	lsls	r0, r3, #4
 80119f6:	00db      	lsls	r3, r3, #3
 80119f8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80119fc:	60b8      	str	r0, [r7, #8]
 80119fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011a0e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8011a12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a18:	2900      	cmp	r1, #0
 8011a1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011a1c:	4413      	add	r3, r2
 8011a1e:	bfb4      	ite	lt
 8011a20:	2100      	movlt	r1, #0
 8011a22:	2200      	movge	r2, #0
 8011a24:	4283      	cmp	r3, r0
 8011a26:	bf28      	it	cs
 8011a28:	4603      	movcs	r3, r0
 8011a2a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011a2e:	2801      	cmp	r0, #1
 8011a30:	f000 82f9 	beq.w	8012026 <forward_conv2d+0x896>
 8011a34:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8011a38:	4281      	cmp	r1, r0
 8011a3a:	f000 81b5 	beq.w	8011da8 <forward_conv2d+0x618>
 8011a3e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011a42:	2900      	cmp	r1, #0
 8011a44:	f000 8171 	beq.w	8011d2a <forward_conv2d+0x59a>
 8011a48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011a4a:	1a9b      	subs	r3, r3, r2
 8011a4c:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8011a50:	1815      	adds	r5, r2, r0
 8011a52:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8011a56:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8011a5a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8011a5e:	3d01      	subs	r5, #1
 8011a60:	fb92 f1f0 	sdiv	r1, r2, r0
 8011a64:	fb00 2111 	mls	r1, r0, r1, r2
 8011a68:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8011a6c:	2400      	movs	r4, #0
 8011a6e:	1a41      	subs	r1, r0, r1
 8011a70:	67bc      	str	r4, [r7, #120]	; 0x78
 8011a72:	4604      	mov	r4, r0
 8011a74:	fb91 f0f0 	sdiv	r0, r1, r0
 8011a78:	fb04 1110 	mls	r1, r4, r0, r1
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	1a5b      	subs	r3, r3, r1
 8011a80:	4411      	add	r1, r2
 8011a82:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8011a86:	4423      	add	r3, r4
 8011a88:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8011a8c:	fb02 f201 	mul.w	r2, r2, r1
 8011a90:	677a      	str	r2, [r7, #116]	; 0x74
 8011a92:	1e5a      	subs	r2, r3, #1
 8011a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011a98:	fb92 f8f0 	sdiv	r8, r2, r0
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011aa2:	46c2      	mov	sl, r8
 8011aa4:	fbb1 f3f4 	udiv	r3, r1, r4
 8011aa8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8011aac:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011ab0:	fb95 f5f0 	sdiv	r5, r5, r0
 8011ab4:	eba1 0008 	sub.w	r0, r1, r8
 8011ab8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011aba:	eba1 0c03 	sub.w	ip, r1, r3
 8011abe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011ac2:	fbb2 f2f4 	udiv	r2, r2, r4
 8011ac6:	fb0e f403 	mul.w	r4, lr, r3
 8011aca:	0096      	lsls	r6, r2, #2
 8011acc:	fb03 f305 	mul.w	r3, r3, r5
 8011ad0:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8011ad4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011ad6:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8011ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8011adc:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8011ae0:	fb04 f300 	mul.w	r3, r4, r0
 8011ae4:	663e      	str	r6, [r7, #96]	; 0x60
 8011ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011aee:	1b9b      	subs	r3, r3, r6
 8011af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011af4:	008b      	lsls	r3, r1, #2
 8011af6:	647b      	str	r3, [r7, #68]	; 0x44
 8011af8:	00d3      	lsls	r3, r2, #3
 8011afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011b02:	189e      	adds	r6, r3, r2
 8011b04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f2c0 8138 	blt.w	8011d7e <forward_conv2d+0x5ee>
 8011b0e:	2100      	movs	r1, #0
 8011b10:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8011b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b16:	4688      	mov	r8, r1
 8011b18:	460d      	mov	r5, r1
 8011b1a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8011b1e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8011b22:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8011b26:	0080      	lsls	r0, r0, #2
 8011b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011b2c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011b30:	4422      	add	r2, r4
 8011b32:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8011b36:	4423      	add	r3, r4
 8011b38:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8011b3c:	42a2      	cmp	r2, r4
 8011b3e:	bf94      	ite	ls
 8011b40:	ebc5 0202 	rsbls	r2, r5, r2
 8011b44:	ebc5 0204 	rsbhi	r2, r5, r4
 8011b48:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8011b4c:	eb08 0403 	add.w	r4, r8, r3
 8011b50:	1a52      	subs	r2, r2, r1
 8011b52:	462b      	mov	r3, r5
 8011b54:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011b58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8011b5c:	2d00      	cmp	r5, #0
 8011b5e:	bf08      	it	eq
 8011b60:	4633      	moveq	r3, r6
 8011b62:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8011b66:	440a      	add	r2, r1
 8011b68:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8011b6c:	42b3      	cmp	r3, r6
 8011b6e:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8011b72:	fb00 5004 	mla	r0, r0, r4, r5
 8011b76:	460a      	mov	r2, r1
 8011b78:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8011b7c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8011b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b82:	fb96 f6f1 	sdiv	r6, r6, r1
 8011b86:	fb9c f5f1 	sdiv	r5, ip, r1
 8011b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b8c:	440d      	add	r5, r1
 8011b8e:	fb06 0112 	mls	r1, r6, r2, r0
 8011b92:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8011b96:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8011b9a:	fb0e 0505 	mla	r5, lr, r5, r0
 8011b9e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8011ba2:	1b92      	subs	r2, r2, r6
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d073      	beq.n	8011c90 <forward_conv2d+0x500>
 8011ba8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011baa:	fb02 f80e 	mul.w	r8, r2, lr
 8011bae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011bb0:	fb00 fb01 	mul.w	fp, r0, r1
 8011bb4:	2a00      	cmp	r2, #0
 8011bb6:	d06b      	beq.n	8011c90 <forward_conv2d+0x500>
 8011bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011bba:	189a      	adds	r2, r3, r2
 8011bbc:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011bc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8011bc8:	2300      	movs	r3, #0
 8011bca:	673b      	str	r3, [r7, #112]	; 0x70
 8011bcc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011bd4:	4413      	add	r3, r2
 8011bd6:	188a      	adds	r2, r1, r2
 8011bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8011bda:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8011bde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011be6:	f1ba 0f00 	cmp.w	sl, #0
 8011bea:	ecf3 7a01 	vldmia	r3!, {s15}
 8011bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011bf2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011bf6:	f340 80c0 	ble.w	8011d7a <forward_conv2d+0x5ea>
 8011bfa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8011bfe:	f04f 0c00 	mov.w	ip, #0
 8011c02:	2e00      	cmp	r6, #0
 8011c04:	dd1e      	ble.n	8011c44 <forward_conv2d+0x4b4>
 8011c06:	2100      	movs	r1, #0
 8011c08:	eb00 040e 	add.w	r4, r0, lr
 8011c0c:	4284      	cmp	r4, r0
 8011c0e:	d910      	bls.n	8011c32 <forward_conv2d+0x4a2>
 8011c10:	4603      	mov	r3, r0
 8011c12:	462a      	mov	r2, r5
 8011c14:	ecb3 7a01 	vldmia	r3!, {s14}
 8011c18:	ecf2 6a01 	vldmia	r2!, {s13}
 8011c1c:	429c      	cmp	r4, r3
 8011c1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011c22:	d8f7      	bhi.n	8011c14 <forward_conv2d+0x484>
 8011c24:	43c3      	mvns	r3, r0
 8011c26:	441c      	add	r4, r3
 8011c28:	f024 0403 	bic.w	r4, r4, #3
 8011c2c:	3404      	adds	r4, #4
 8011c2e:	4425      	add	r5, r4
 8011c30:	4420      	add	r0, r4
 8011c32:	3101      	adds	r1, #1
 8011c34:	4448      	add	r0, r9
 8011c36:	428e      	cmp	r6, r1
 8011c38:	d1e6      	bne.n	8011c08 <forward_conv2d+0x478>
 8011c3a:	e003      	b.n	8011c44 <forward_conv2d+0x4b4>
 8011c3c:	08011111 	.word	0x08011111
 8011c40:	00000000 	.word	0x00000000
 8011c44:	f10c 0c01 	add.w	ip, ip, #1
 8011c48:	4458      	add	r0, fp
 8011c4a:	4445      	add	r5, r8
 8011c4c:	45e2      	cmp	sl, ip
 8011c4e:	d1d8      	bne.n	8011c02 <forward_conv2d+0x472>
 8011c50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c58:	441d      	add	r5, r3
 8011c5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011c5e:	ece3 7a01 	vstmia	r3!, {s15}
 8011c62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011c66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d1b9      	bne.n	8011be2 <forward_conv2d+0x452>
 8011c6e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c74:	4472      	add	r2, lr
 8011c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c78:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c80:	673b      	str	r3, [r7, #112]	; 0x70
 8011c82:	1a52      	subs	r2, r2, r1
 8011c84:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8011c88:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d19d      	bne.n	8011bcc <forward_conv2d+0x43c>
 8011c90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011c94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011c98:	4608      	mov	r0, r1
 8011c9a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8011c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ca0:	4410      	add	r0, r2
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011ca8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8011cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8011cae:	4401      	add	r1, r0
 8011cb0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8011cb4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011cb8:	1a8a      	subs	r2, r1, r2
 8011cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	f47f af1a 	bne.w	8011afc <forward_conv2d+0x36c>
 8011cc8:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8011ccc:	2400      	movs	r4, #0
 8011cce:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8011cd2:	f8d7 80e4 	ldr.w	r8, [r7, #228]	; 0xe4
 8011cd6:	46a2      	mov	sl, r4
 8011cd8:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8011cda:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 8011cde:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011ce2:	4633      	mov	r3, r6
 8011ce4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011ce8:	f10a 0a01 	add.w	sl, sl, #1
 8011cec:	608d      	str	r5, [r1, #8]
 8011cee:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8011cf2:	4416      	add	r6, r2
 8011cf4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011cf8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8011cfc:	4405      	add	r5, r0
 8011cfe:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8011d02:	4608      	mov	r0, r1
 8011d04:	47a0      	blx	r4
 8011d06:	eba6 0309 	sub.w	r3, r6, r9
 8011d0a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	bfa8      	it	ge
 8011d12:	464e      	movge	r6, r9
 8011d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011d18:	4553      	cmp	r3, sl
 8011d1a:	d1e0      	bne.n	8011cde <forward_conv2d+0x54e>
 8011d1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d20:	69fa      	ldr	r2, [r7, #28]
 8011d22:	66be      	str	r6, [r7, #104]	; 0x68
 8011d24:	4413      	add	r3, r2
 8011d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011d2a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8011d2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d30:	4604      	mov	r4, r0
 8011d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d36:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	4414      	add	r4, r2
 8011d3e:	1a82      	subs	r2, r0, r2
 8011d40:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011d44:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8011d48:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8011d4c:	3101      	adds	r1, #1
 8011d4e:	68da      	ldr	r2, [r3, #12]
 8011d50:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8011d54:	609a      	str	r2, [r3, #8]
 8011d56:	69bc      	ldr	r4, [r7, #24]
 8011d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d5c:	4420      	add	r0, r4
 8011d5e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8011d62:	428b      	cmp	r3, r1
 8011d64:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8011d68:	f47f ae51 	bne.w	8011a0e <forward_conv2d+0x27e>
 8011d6c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8011d70:	46bd      	mov	sp, r7
 8011d72:	ecbd 8b08 	vpop	{d8-d11}
 8011d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	e76a      	b.n	8011c54 <forward_conv2d+0x4c4>
 8011d7e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8011d82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011d86:	460d      	mov	r5, r1
 8011d88:	4688      	mov	r8, r1
 8011d8a:	1853      	adds	r3, r2, r1
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	fb95 f2f2 	sdiv	r2, r5, r2
 8011d92:	fb01 5212 	mls	r2, r1, r2, r5
 8011d96:	460c      	mov	r4, r1
 8011d98:	1a8a      	subs	r2, r1, r2
 8011d9a:	fb92 f1f1 	sdiv	r1, r2, r1
 8011d9e:	fb04 2111 	mls	r1, r4, r1, r2
 8011da2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011da4:	1888      	adds	r0, r1, r2
 8011da6:	e6b8      	b.n	8011b1a <forward_conv2d+0x38a>
 8011da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011daa:	2901      	cmp	r1, #1
 8011dac:	f47f ae47 	bne.w	8011a3e <forward_conv2d+0x2ae>
 8011db0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011db4:	2900      	cmp	r1, #0
 8011db6:	d0b8      	beq.n	8011d2a <forward_conv2d+0x59a>
 8011db8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8011dbc:	1a99      	subs	r1, r3, r2
 8011dbe:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011dc2:	0083      	lsls	r3, r0, #2
 8011dc4:	fb02 f000 	mul.w	r0, r2, r0
 8011dc8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011dcc:	6778      	str	r0, [r7, #116]	; 0x74
 8011dce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011dd2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8011dd6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8011dda:	1a41      	subs	r1, r0, r1
 8011ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dde:	fb00 f202 	mul.w	r2, r0, r2
 8011de2:	fb03 f301 	mul.w	r3, r3, r1
 8011de6:	627a      	str	r2, [r7, #36]	; 0x24
 8011de8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dee:	2300      	movs	r3, #0
 8011df0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8011df4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8011dfa:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e02:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8011e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8011e10:	643b      	str	r3, [r7, #64]	; 0x40
 8011e12:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8011e16:	0092      	lsls	r2, r2, #2
 8011e18:	00db      	lsls	r3, r3, #3
 8011e1a:	657a      	str	r2, [r7, #84]	; 0x54
 8011e1c:	603b      	str	r3, [r7, #0]
 8011e1e:	008b      	lsls	r3, r1, #2
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f2c0 8280 	blt.w	801232c <forward_conv2d+0xb9c>
 8011e2c:	2400      	movs	r4, #0
 8011e2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011e30:	4621      	mov	r1, r4
 8011e32:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8011e36:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8011e3a:	1818      	adds	r0, r3, r0
 8011e3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e40:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 8011e44:	18f3      	adds	r3, r6, r3
 8011e46:	4420      	add	r0, r4
 8011e48:	461c      	mov	r4, r3
 8011e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e4e:	0080      	lsls	r0, r0, #2
 8011e50:	429c      	cmp	r4, r3
 8011e52:	bf28      	it	cs
 8011e54:	461c      	movcs	r4, r3
 8011e56:	1a64      	subs	r4, r4, r1
 8011e58:	2d00      	cmp	r5, #0
 8011e5a:	f000 8258 	beq.w	801230e <forward_conv2d+0xb7e>
 8011e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011e62:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8011e66:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011e6a:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8011e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011e72:	428d      	cmp	r5, r1
 8011e74:	462a      	mov	r2, r5
 8011e76:	eba6 0104 	sub.w	r1, r6, r4
 8011e7a:	eba3 0304 	sub.w	r3, r3, r4
 8011e7e:	fe08 4a04 	vseleq.f32	s8, s16, s8
 8011e82:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011e84:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 8011e88:	4428      	add	r0, r5
 8011e8a:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8011e8e:	fb05 6e00 	mla	lr, r5, r0, r6
 8011e92:	eb0e 000b 	add.w	r0, lr, fp
 8011e96:	4570      	cmp	r0, lr
 8011e98:	6478      	str	r0, [r7, #68]	; 0x44
 8011e9a:	f240 80a7 	bls.w	8011fec <forward_conv2d+0x85c>
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	fb01 f10b 	mul.w	r1, r1, fp
 8011ea4:	f024 0803 	bic.w	r8, r4, #3
 8011ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eae:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 809a 	beq.w	8011fec <forward_conv2d+0x85c>
 8011eb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011eba:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8011ebe:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8011ec2:	089b      	lsrs	r3, r3, #2
 8011ec4:	4401      	add	r1, r0
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	1810      	adds	r0, r2, r0
 8011ecc:	1a8a      	subs	r2, r1, r2
 8011ece:	617a      	str	r2, [r7, #20]
 8011ed0:	fb03 f20a 	mul.w	r2, r3, sl
 8011ed4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8011ed8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011eda:	011a      	lsls	r2, r3, #4
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	663a      	str	r2, [r7, #96]	; 0x60
 8011ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee8:	6979      	ldr	r1, [r7, #20]
 8011eea:	4413      	add	r3, r2
 8011eec:	188a      	adds	r2, r1, r2
 8011eee:	613b      	str	r3, [r7, #16]
 8011ef0:	673a      	str	r2, [r7, #112]	; 0x70
 8011ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011efa:	ecf3 6a01 	vldmia	r3!, {s13}
 8011efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011f02:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011f06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	dd57      	ble.n	8011fbe <forward_conv2d+0x82e>
 8011f0e:	4676      	mov	r6, lr
 8011f10:	f04f 0c00 	mov.w	ip, #0
 8011f14:	f1b8 0f00 	cmp.w	r8, #0
 8011f18:	f340 81f7 	ble.w	801230a <forward_conv2d+0xb7a>
 8011f1c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011f20:	f109 0310 	add.w	r3, r9, #16
 8011f24:	2000      	movs	r0, #0
 8011f26:	18b1      	adds	r1, r6, r2
 8011f28:	4632      	mov	r2, r6
 8011f2a:	eb02 050b 	add.w	r5, r2, fp
 8011f2e:	ed53 7a03 	vldr	s15, [r3, #-12]
 8011f32:	ed92 6a00 	vldr	s12, [r2]
 8011f36:	3004      	adds	r0, #4
 8011f38:	ed95 7a00 	vldr	s14, [r5]
 8011f3c:	eb01 050b 	add.w	r5, r1, fp
 8011f40:	ed53 4a04 	vldr	s9, [r3, #-16]
 8011f44:	4540      	cmp	r0, r8
 8011f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f4a:	ed13 5a02 	vldr	s10, [r3, #-8]
 8011f4e:	edd1 5a00 	vldr	s11, [r1]
 8011f52:	4452      	add	r2, sl
 8011f54:	ed95 7a00 	vldr	s14, [r5]
 8011f58:	4451      	add	r1, sl
 8011f5a:	eee4 7a86 	vfma.f32	s15, s9, s12
 8011f5e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8011f62:	f103 0310 	add.w	r3, r3, #16
 8011f66:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011f6a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011f6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011f72:	dbda      	blt.n	8011f2a <forward_conv2d+0x79a>
 8011f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011f78:	441e      	add	r6, r3
 8011f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f7c:	4499      	add	r9, r3
 8011f7e:	4284      	cmp	r4, r0
 8011f80:	dd11      	ble.n	8011fa6 <forward_conv2d+0x816>
 8011f82:	4602      	mov	r2, r0
 8011f84:	4633      	mov	r3, r6
 8011f86:	4649      	mov	r1, r9
 8011f88:	3201      	adds	r2, #1
 8011f8a:	edd3 7a00 	vldr	s15, [r3]
 8011f8e:	ecb1 7a01 	vldmia	r1!, {s14}
 8011f92:	445b      	add	r3, fp
 8011f94:	42a2      	cmp	r2, r4
 8011f96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011f9a:	d1f5      	bne.n	8011f88 <forward_conv2d+0x7f8>
 8011f9c:	1a20      	subs	r0, r4, r0
 8011f9e:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8011fa2:	fb00 660b 	mla	r6, r0, fp, r6
 8011fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011faa:	f10c 0c01 	add.w	ip, ip, #1
 8011fae:	441e      	add	r6, r3
 8011fb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011fb4:	4499      	add	r9, r3
 8011fb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011fba:	4563      	cmp	r3, ip
 8011fbc:	d1aa      	bne.n	8011f14 <forward_conv2d+0x784>
 8011fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011fc4:	4499      	add	r9, r3
 8011fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fc8:	ece3 6a01 	vstmia	r3!, {s13}
 8011fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8011fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	d18f      	bne.n	8011ef6 <forward_conv2d+0x766>
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	f10e 0e04 	add.w	lr, lr, #4
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	1a9b      	subs	r3, r3, r2
 8011fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fe6:	4573      	cmp	r3, lr
 8011fe8:	f63f af7b 	bhi.w	8011ee2 <forward_conv2d+0x752>
 8011fec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011ff0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8011ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ff6:	440a      	add	r2, r1
 8011ff8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	4608      	mov	r0, r1
 8012000:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8012004:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8012008:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801200c:	67bb      	str	r3, [r7, #120]	; 0x78
 801200e:	4410      	add	r0, r2
 8012010:	1a8a      	subs	r2, r1, r2
 8012012:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8012016:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801201a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801201e:	429a      	cmp	r2, r3
 8012020:	f47f aeff 	bne.w	8011e22 <forward_conv2d+0x692>
 8012024:	e652      	b.n	8011ccc <forward_conv2d+0x53c>
 8012026:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012028:	2801      	cmp	r0, #1
 801202a:	f47f ad08 	bne.w	8011a3e <forward_conv2d+0x2ae>
 801202e:	1a9b      	subs	r3, r3, r2
 8012030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012036:	fb00 f101 	mul.w	r1, r0, r1
 801203a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801203e:	6779      	str	r1, [r7, #116]	; 0x74
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 815c 	beq.w	80122fe <forward_conv2d+0xb6e>
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	fb03 f202 	mul.w	r2, r3, r2
 801204e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012052:	4401      	add	r1, r0
 8012054:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 8012058:	330a      	adds	r3, #10
 801205a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801205c:	6439      	str	r1, [r7, #64]	; 0x40
 801205e:	1a12      	subs	r2, r2, r0
 8012060:	f023 0307 	bic.w	r3, r3, #7
 8012064:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8012068:	647a      	str	r2, [r7, #68]	; 0x44
 801206a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801206c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012070:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8012074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801207c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012080:	2300      	movs	r3, #0
 8012082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012088:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 801208c:	ebad 0d03 	sub.w	sp, sp, r3
 8012090:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012094:	ab02      	add	r3, sp, #8
 8012096:	663b      	str	r3, [r7, #96]	; 0x60
 8012098:	b132      	cbz	r2, 80120a8 <forward_conv2d+0x918>
 801209a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801209e:	4618      	mov	r0, r3
 80120a0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80120a4:	f001 fac4 	bl	8013630 <memcpy>
 80120a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 8152 	beq.w	8012356 <forward_conv2d+0xbc6>
 80120b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80120b6:	ed93 2a00 	vldr	s4, [r3]
 80120ba:	3304      	adds	r3, #4
 80120bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80120c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f000 8100 	beq.w	80122ca <forward_conv2d+0xb3a>
 80120ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ce:	f04f 0b00 	mov.w	fp, #0
 80120d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80120d6:	eb03 0802 	add.w	r8, r3, r2
 80120da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80120e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80120ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80120ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80120f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80120f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	f2c0 8124 	blt.w	8012346 <forward_conv2d+0xbb6>
 80120fe:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8012102:	2300      	movs	r3, #0
 8012104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012106:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 801210a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801210e:	4421      	add	r1, r4
 8012110:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8012112:	4540      	cmp	r0, r8
 8012114:	bf94      	ite	ls
 8012116:	ebc3 0300 	rsbls	r3, r3, r0
 801211a:	ebc3 0308 	rsbhi	r3, r3, r8
 801211e:	4422      	add	r2, r4
 8012120:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8012124:	1ac0      	subs	r0, r0, r3
 8012126:	eba4 0903 	sub.w	r9, r4, r3
 801212a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 801212e:	fb03 f304 	mul.w	r3, r3, r4
 8012132:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8012136:	2c00      	cmp	r4, #0
 8012138:	f340 8102 	ble.w	8012340 <forward_conv2d+0xbb0>
 801213c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801213e:	f023 0c0f 	bic.w	ip, r3, #15
 8012142:	eef0 6a42 	vmov.f32	s13, s4
 8012146:	f04f 0e00 	mov.w	lr, #0
 801214a:	fb04 f000 	mul.w	r0, r4, r0
 801214e:	fb04 f909 	mul.w	r9, r4, r9
 8012152:	65b8      	str	r0, [r7, #88]	; 0x58
 8012154:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8012158:	0900      	lsrs	r0, r0, #4
 801215a:	3001      	adds	r0, #1
 801215c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8012160:	0100      	lsls	r0, r0, #4
 8012162:	6578      	str	r0, [r7, #84]	; 0x54
 8012164:	f1bc 0f00 	cmp.w	ip, #0
 8012168:	f340 80e8 	ble.w	801233c <forward_conv2d+0xbac>
 801216c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8012170:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8012174:	2500      	movs	r5, #0
 8012176:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 801217a:	3510      	adds	r5, #16
 801217c:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8012180:	3440      	adds	r4, #64	; 0x40
 8012182:	ed14 6a20 	vldr	s12, [r4, #-128]	; 0xffffff80
 8012186:	4565      	cmp	r5, ip
 8012188:	ee67 7a27 	vmul.f32	s15, s14, s15
 801218c:	ed10 7a10 	vldr	s14, [r0, #-64]	; 0xffffffc0
 8012190:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 8012194:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8012198:	ed50 3a1e 	vldr	s7, [r0, #-120]	; 0xffffff88
 801219c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80121a0:	ed14 4a1d 	vldr	s8, [r4, #-116]	; 0xffffff8c
 80121a4:	ed50 4a1d 	vldr	s9, [r0, #-116]	; 0xffffff8c
 80121a8:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 80121ac:	ed50 5a1c 	vldr	s11, [r0, #-112]	; 0xffffff90
 80121b0:	ed14 6a1b 	vldr	s12, [r4, #-108]	; 0xffffff94
 80121b4:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 80121b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80121bc:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 80121c0:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 80121c4:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 80121c8:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 80121cc:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 80121d0:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 80121d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80121d8:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 80121dc:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 80121e0:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 80121e4:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 80121e8:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 80121ec:	ed50 2a15 	vldr	s5, [r0, #-84]	; 0xffffffac
 80121f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80121f4:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 80121f8:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 80121fc:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8012200:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8012204:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8012208:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 801220c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012210:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8012214:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 8012218:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801221c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012220:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012224:	eee8 7a80 	vfma.f32	s15, s17, s0
 8012228:	eee0 7a81 	vfma.f32	s15, s1, s2
 801222c:	eee1 7aa2 	vfma.f32	s15, s3, s5
 8012230:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012234:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012238:	eee5 7a25 	vfma.f32	s15, s10, s11
 801223c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012240:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012244:	db97      	blt.n	8012176 <forward_conv2d+0x9e6>
 8012246:	4451      	add	r1, sl
 8012248:	4452      	add	r2, sl
 801224a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801224c:	4283      	cmp	r3, r0
 801224e:	dd0f      	ble.n	8012270 <forward_conv2d+0xae0>
 8012250:	4604      	mov	r4, r0
 8012252:	460e      	mov	r6, r1
 8012254:	4615      	mov	r5, r2
 8012256:	3401      	adds	r4, #1
 8012258:	ecb5 7a01 	vldmia	r5!, {s14}
 801225c:	ecf6 7a01 	vldmia	r6!, {s15}
 8012260:	42a3      	cmp	r3, r4
 8012262:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012266:	d1f6      	bne.n	8012256 <forward_conv2d+0xac6>
 8012268:	1a18      	subs	r0, r3, r0
 801226a:	0080      	lsls	r0, r0, #2
 801226c:	4402      	add	r2, r0
 801226e:	4401      	add	r1, r0
 8012270:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012272:	f10e 0e01 	add.w	lr, lr, #1
 8012276:	4449      	add	r1, r9
 8012278:	4402      	add	r2, r0
 801227a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801227e:	4570      	cmp	r0, lr
 8012280:	f47f af70 	bne.w	8012164 <forward_conv2d+0x9d4>
 8012284:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8012288:	f10b 0b01 	add.w	fp, fp, #1
 801228c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801228e:	4608      	mov	r0, r1
 8012290:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8012294:	edc3 6a00 	vstr	s13, [r3]
 8012298:	440b      	add	r3, r1
 801229a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801229e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80122a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	4410      	add	r0, r2
 80122a8:	eba8 0802 	sub.w	r8, r8, r2
 80122ac:	1ac9      	subs	r1, r1, r3
 80122ae:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80122b2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80122b6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80122ba:	4419      	add	r1, r3
 80122bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80122c0:	455b      	cmp	r3, fp
 80122c2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80122c6:	f47f af15 	bne.w	80120f4 <forward_conv2d+0x964>
 80122ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80122ce:	3301      	adds	r3, #1
 80122d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80122d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80122d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80122dc:	440a      	add	r2, r1
 80122de:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80122e2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80122e6:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80122ea:	3204      	adds	r2, #4
 80122ec:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80122f0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80122f4:	429a      	cmp	r2, r3
 80122f6:	f47f aec6 	bne.w	8012086 <forward_conv2d+0x8f6>
 80122fa:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 80122fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012302:	2b00      	cmp	r3, #0
 8012304:	f47f ace2 	bne.w	8011ccc <forward_conv2d+0x53c>
 8012308:	e50f      	b.n	8011d2a <forward_conv2d+0x59a>
 801230a:	2000      	movs	r0, #0
 801230c:	e637      	b.n	8011f7e <forward_conv2d+0x7ee>
 801230e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012312:	eeb0 4a48 	vmov.f32	s8, s16
 8012316:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801231a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801231e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8012322:	1b19      	subs	r1, r3, r4
 8012324:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012328:	1b1b      	subs	r3, r3, r4
 801232a:	e5aa      	b.n	8011e82 <forward_conv2d+0x6f2>
 801232c:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8012330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012332:	4621      	mov	r1, r4
 8012334:	191a      	adds	r2, r3, r4
 8012336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801233a:	e57a      	b.n	8011e32 <forward_conv2d+0x6a2>
 801233c:	2000      	movs	r0, #0
 801233e:	e785      	b.n	801224c <forward_conv2d+0xabc>
 8012340:	eef0 6a42 	vmov.f32	s13, s4
 8012344:	e79e      	b.n	8012284 <forward_conv2d+0xaf4>
 8012346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801234a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801234c:	eba8 0303 	sub.w	r3, r8, r3
 8012350:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012354:	e6d7      	b.n	8012106 <forward_conv2d+0x976>
 8012356:	eeb0 2a48 	vmov.f32	s4, s16
 801235a:	e6b1      	b.n	80120c0 <forward_conv2d+0x930>
 801235c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8012360:	68ca      	ldr	r2, [r1, #12]
 8012362:	2a00      	cmp	r2, #0
 8012364:	f43f aad4 	beq.w	8011910 <forward_conv2d+0x180>
 8012368:	6973      	ldr	r3, [r6, #20]
 801236a:	8818      	ldrh	r0, [r3, #0]
 801236c:	2803      	cmp	r0, #3
 801236e:	d91b      	bls.n	80123a8 <forward_conv2d+0xc18>
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012374:	b1ab      	cbz	r3, 80123a2 <forward_conv2d+0xc12>
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	b19b      	cbz	r3, 80123a2 <forward_conv2d+0xc12>
 801237a:	699c      	ldr	r4, [r3, #24]
 801237c:	462b      	mov	r3, r5
 801237e:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8012382:	6889      	ldr	r1, [r1, #8]
 8012384:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012388:	2800      	cmp	r0, #0
 801238a:	bf18      	it	ne
 801238c:	4605      	movne	r5, r0
 801238e:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8012392:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8012396:	e9cd 5400 	strd	r5, r4, [sp]
 801239a:	f7ff f9a9 	bl	80116f0 <ai_dict_decompress_f32>
 801239e:	f7ff bab7 	b.w	8011910 <forward_conv2d+0x180>
 80123a2:	2300      	movs	r3, #0
 80123a4:	699b      	ldr	r3, [r3, #24]
 80123a6:	deff      	udf	#255	; 0xff
 80123a8:	2300      	movs	r3, #0
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	deff      	udf	#255	; 0xff
 80123ae:	b178      	cbz	r0, 80123d0 <forward_conv2d+0xc40>
 80123b0:	6883      	ldr	r3, [r0, #8]
 80123b2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80123b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80123ba:	2301      	movs	r3, #1
 80123bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80123c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80123c4:	f7ff ba70 	b.w	80118a8 <forward_conv2d+0x118>
 80123c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80123cc:	f7ff ba50 	b.w	8011870 <forward_conv2d+0xe0>
 80123d0:	2301      	movs	r3, #1
 80123d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80123d6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80123da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80123de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80123e2:	f7ff ba61 	b.w	80118a8 <forward_conv2d+0x118>
 80123e6:	3218      	adds	r2, #24
 80123e8:	d007      	beq.n	80123fa <forward_conv2d+0xc6a>
 80123ea:	462b      	mov	r3, r5
 80123ec:	462c      	mov	r4, r5
 80123ee:	462a      	mov	r2, r5
 80123f0:	f7ff b9f8 	b.w	80117e4 <forward_conv2d+0x54>
 80123f4:	2300      	movs	r3, #0
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	deff      	udf	#255	; 0xff
 80123fa:	68d3      	ldr	r3, [r2, #12]
 80123fc:	deff      	udf	#255	; 0xff
 80123fe:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8012402:	f7ff b9de 	b.w	80117c2 <forward_conv2d+0x32>
 8012406:	2300      	movs	r3, #0
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	deff      	udf	#255	; 0xff
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	deff      	udf	#255	; 0xff
 8012410:	2300      	movs	r3, #0
 8012412:	f7ff b9e6 	b.w	80117e2 <forward_conv2d+0x52>
 8012416:	bf00      	nop

08012418 <forward_dense>:
 8012418:	6942      	ldr	r2, [r0, #20]
 801241a:	8813      	ldrh	r3, [r2, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	f000 81c8 	beq.w	80127b2 <forward_dense+0x39a>
 8012422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012426:	ed2d 8b08 	vpush	{d8-d11}
 801242a:	6851      	ldr	r1, [r2, #4]
 801242c:	b091      	sub	sp, #68	; 0x44
 801242e:	684d      	ldr	r5, [r1, #4]
 8012430:	b105      	cbz	r5, 8012434 <forward_dense+0x1c>
 8012432:	682d      	ldr	r5, [r5, #0]
 8012434:	2b01      	cmp	r3, #1
 8012436:	f240 81b9 	bls.w	80127ac <forward_dense+0x394>
 801243a:	690a      	ldr	r2, [r1, #16]
 801243c:	b102      	cbz	r2, 8012440 <forward_dense+0x28>
 801243e:	6812      	ldr	r2, [r2, #0]
 8012440:	2b02      	cmp	r3, #2
 8012442:	f000 81b8 	beq.w	80127b6 <forward_dense+0x39e>
 8012446:	69cb      	ldr	r3, [r1, #28]
 8012448:	2b00      	cmp	r3, #0
 801244a:	f000 8209 	beq.w	8012860 <forward_dense+0x448>
 801244e:	6818      	ldr	r0, [r3, #0]
 8012450:	9008      	str	r0, [sp, #32]
 8012452:	f111 0018 	adds.w	r0, r1, #24
 8012456:	f000 81dc 	beq.w	8012812 <forward_dense+0x3fa>
 801245a:	8b09      	ldrh	r1, [r1, #24]
 801245c:	2901      	cmp	r1, #1
 801245e:	f240 81fc 	bls.w	801285a <forward_dense+0x442>
 8012462:	2b00      	cmp	r3, #0
 8012464:	f000 81d7 	beq.w	8012816 <forward_dense+0x3fe>
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	9306      	str	r3, [sp, #24]
 801246c:	9b08      	ldr	r3, [sp, #32]
 801246e:	68d6      	ldr	r6, [r2, #12]
 8012470:	699b      	ldr	r3, [r3, #24]
 8012472:	68b0      	ldr	r0, [r6, #8]
 8012474:	681f      	ldr	r7, [r3, #0]
 8012476:	68f4      	ldr	r4, [r6, #12]
 8012478:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 801247c:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8012480:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8012484:	fb04 f000 	mul.w	r0, r4, r0
 8012488:	fa4e f10c 	asr.w	r1, lr, ip
 801248c:	2f04      	cmp	r7, #4
 801248e:	9007      	str	r0, [sp, #28]
 8012490:	910b      	str	r1, [sp, #44]	; 0x2c
 8012492:	68e9      	ldr	r1, [r5, #12]
 8012494:	6870      	ldr	r0, [r6, #4]
 8012496:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801249a:	f000 81db 	beq.w	8012854 <forward_dense+0x43c>
 801249e:	2f08      	cmp	r7, #8
 80124a0:	f000 81d8 	beq.w	8012854 <forward_dense+0x43c>
 80124a4:	f04f 0a00 	mov.w	sl, #0
 80124a8:	6992      	ldr	r2, [r2, #24]
 80124aa:	0080      	lsls	r0, r0, #2
 80124ac:	69a9      	ldr	r1, [r5, #24]
 80124ae:	6894      	ldr	r4, [r2, #8]
 80124b0:	9a08      	ldr	r2, [sp, #32]
 80124b2:	9009      	str	r0, [sp, #36]	; 0x24
 80124b4:	1826      	adds	r6, r4, r0
 80124b6:	6952      	ldr	r2, [r2, #20]
 80124b8:	9404      	str	r4, [sp, #16]
 80124ba:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80124be:	9a07      	ldr	r2, [sp, #28]
 80124c0:	688f      	ldr	r7, [r1, #8]
 80124c2:	2a00      	cmp	r2, #0
 80124c4:	f000 81c1 	beq.w	801284a <forward_dense+0x432>
 80124c8:	f1a8 0210 	sub.w	r2, r8, #16
 80124cc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80124d0:	689d      	ldr	r5, [r3, #8]
 80124d2:	0912      	lsrs	r2, r2, #4
 80124d4:	910a      	str	r1, [sp, #40]	; 0x28
 80124d6:	2100      	movs	r1, #0
 80124d8:	9b06      	ldr	r3, [sp, #24]
 80124da:	3201      	adds	r2, #1
 80124dc:	eddf 2acf 	vldr	s5, [pc, #828]	; 801281c <forward_dense+0x404>
 80124e0:	9105      	str	r1, [sp, #20]
 80124e2:	f008 010f 	and.w	r1, r8, #15
 80124e6:	0192      	lsls	r2, r2, #6
 80124e8:	910d      	str	r1, [sp, #52]	; 0x34
 80124ea:	920c      	str	r2, [sp, #48]	; 0x30
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d042      	beq.n	8012576 <forward_dense+0x15e>
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	689c      	ldr	r4, [r3, #8]
 80124f4:	9b04      	ldr	r3, [sp, #16]
 80124f6:	f1ba 0f00 	cmp.w	sl, #0
 80124fa:	d041      	beq.n	8012580 <forward_dense+0x168>
 80124fc:	42b3      	cmp	r3, r6
 80124fe:	d229      	bcs.n	8012554 <forward_dense+0x13c>
 8012500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012502:	469b      	mov	fp, r3
 8012504:	ab0f      	add	r3, sp, #60	; 0x3c
 8012506:	2a04      	cmp	r2, #4
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	4633      	mov	r3, r6
 801250c:	4646      	mov	r6, r8
 801250e:	4698      	mov	r8, r3
 8012510:	f000 8154 	beq.w	80127bc <forward_dense+0x3a4>
 8012514:	2c00      	cmp	r4, #0
 8012516:	f000 8183 	beq.w	8012820 <forward_dense+0x408>
 801251a:	f8d4 c000 	ldr.w	ip, [r4]
 801251e:	463b      	mov	r3, r7
 8012520:	4629      	mov	r1, r5
 8012522:	9600      	str	r6, [sp, #0]
 8012524:	4652      	mov	r2, sl
 8012526:	9803      	ldr	r0, [sp, #12]
 8012528:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801252c:	f7fe fdf2 	bl	8011114 <ai_dict8_dot_array_f32>
 8012530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012532:	3404      	adds	r4, #4
 8012534:	444d      	add	r5, r9
 8012536:	f84b 3b04 	str.w	r3, [fp], #4
 801253a:	45c3      	cmp	fp, r8
 801253c:	d3ea      	bcc.n	8012514 <forward_dense+0xfc>
 801253e:	4643      	mov	r3, r8
 8012540:	46b0      	mov	r8, r6
 8012542:	461e      	mov	r6, r3
 8012544:	9a04      	ldr	r2, [sp, #16]
 8012546:	43d3      	mvns	r3, r2
 8012548:	4433      	add	r3, r6
 801254a:	f023 0303 	bic.w	r3, r3, #3
 801254e:	3304      	adds	r3, #4
 8012550:	18d3      	adds	r3, r2, r3
 8012552:	9304      	str	r3, [sp, #16]
 8012554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012556:	9b05      	ldr	r3, [sp, #20]
 8012558:	4417      	add	r7, r2
 801255a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801255c:	3301      	adds	r3, #1
 801255e:	4416      	add	r6, r2
 8012560:	9a07      	ldr	r2, [sp, #28]
 8012562:	9305      	str	r3, [sp, #20]
 8012564:	4293      	cmp	r3, r2
 8012566:	f000 8170 	beq.w	801284a <forward_dense+0x432>
 801256a:	9b08      	ldr	r3, [sp, #32]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	689d      	ldr	r5, [r3, #8]
 8012570:	9b06      	ldr	r3, [sp, #24]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1bc      	bne.n	80124f0 <forward_dense+0xd8>
 8012576:	461c      	mov	r4, r3
 8012578:	9b04      	ldr	r3, [sp, #16]
 801257a:	f1ba 0f00 	cmp.w	sl, #0
 801257e:	d1bd      	bne.n	80124fc <forward_dense+0xe4>
 8012580:	42b3      	cmp	r3, r6
 8012582:	d2e7      	bcs.n	8012554 <forward_dense+0x13c>
 8012584:	4618      	mov	r0, r3
 8012586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012588:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801258c:	eb07 0c03 	add.w	ip, r7, r3
 8012590:	469e      	mov	lr, r3
 8012592:	2c00      	cmp	r4, #0
 8012594:	f000 80fe 	beq.w	8012794 <forward_dense+0x37c>
 8012598:	f1b8 0f0f 	cmp.w	r8, #15
 801259c:	ed94 6a00 	vldr	s12, [r4]
 80125a0:	f104 0404 	add.w	r4, r4, #4
 80125a4:	f240 80fc 	bls.w	80127a0 <forward_dense+0x388>
 80125a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80125ac:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80125b0:	4641      	mov	r1, r8
 80125b2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 801281c <forward_dense+0x404>
 80125b6:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 80125ba:	3910      	subs	r1, #16
 80125bc:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80125c0:	3240      	adds	r2, #64	; 0x40
 80125c2:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80125c6:	290f      	cmp	r1, #15
 80125c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125cc:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 80125d0:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 80125d4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80125d8:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 80125dc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125e0:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 80125e4:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 80125e8:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 80125ec:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 80125f0:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80125f4:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 80125f8:	eee2 7a03 	vfma.f32	s15, s4, s6
 80125fc:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8012600:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8012604:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8012608:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 801260c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8012610:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8012614:	eee3 7a84 	vfma.f32	s15, s7, s8
 8012618:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 801261c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8012620:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8012624:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8012628:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 801262c:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8012630:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012634:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8012638:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 801263c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8012640:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8012644:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8012648:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 801264c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012650:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8012654:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8012658:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801265c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012660:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012664:	eee8 7a88 	vfma.f32	s15, s17, s16
 8012668:	eee0 7a20 	vfma.f32	s15, s0, s1
 801266c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8012670:	eee2 7a03 	vfma.f32	s15, s4, s6
 8012674:	eee3 7a84 	vfma.f32	s15, s7, s8
 8012678:	eee4 7a85 	vfma.f32	s15, s9, s10
 801267c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012680:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012684:	d897      	bhi.n	80125b6 <forward_dense+0x19e>
 8012686:	eb05 010e 	add.w	r1, r5, lr
 801268a:	465b      	mov	r3, fp
 801268c:	4662      	mov	r2, ip
 801268e:	2b00      	cmp	r3, #0
 8012690:	d075      	beq.n	801277e <forward_dense+0x366>
 8012692:	ed91 7a00 	vldr	s14, [r1]
 8012696:	2b01      	cmp	r3, #1
 8012698:	edd2 7a00 	vldr	s15, [r2]
 801269c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126a0:	d06d      	beq.n	801277e <forward_dense+0x366>
 80126a2:	ed91 7a01 	vldr	s14, [r1, #4]
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	edd2 7a01 	vldr	s15, [r2, #4]
 80126ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126b0:	d065      	beq.n	801277e <forward_dense+0x366>
 80126b2:	ed91 7a02 	vldr	s14, [r1, #8]
 80126b6:	2b03      	cmp	r3, #3
 80126b8:	edd2 7a02 	vldr	s15, [r2, #8]
 80126bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126c0:	d05d      	beq.n	801277e <forward_dense+0x366>
 80126c2:	ed91 7a03 	vldr	s14, [r1, #12]
 80126c6:	2b04      	cmp	r3, #4
 80126c8:	edd2 7a03 	vldr	s15, [r2, #12]
 80126cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126d0:	d055      	beq.n	801277e <forward_dense+0x366>
 80126d2:	ed91 7a04 	vldr	s14, [r1, #16]
 80126d6:	2b05      	cmp	r3, #5
 80126d8:	edd2 7a04 	vldr	s15, [r2, #16]
 80126dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126e0:	d04d      	beq.n	801277e <forward_dense+0x366>
 80126e2:	ed91 7a05 	vldr	s14, [r1, #20]
 80126e6:	2b06      	cmp	r3, #6
 80126e8:	edd2 7a05 	vldr	s15, [r2, #20]
 80126ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126f0:	d045      	beq.n	801277e <forward_dense+0x366>
 80126f2:	ed91 7a06 	vldr	s14, [r1, #24]
 80126f6:	2b07      	cmp	r3, #7
 80126f8:	edd2 7a06 	vldr	s15, [r2, #24]
 80126fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012700:	d03d      	beq.n	801277e <forward_dense+0x366>
 8012702:	ed91 7a07 	vldr	s14, [r1, #28]
 8012706:	2b08      	cmp	r3, #8
 8012708:	edd2 7a07 	vldr	s15, [r2, #28]
 801270c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012710:	d035      	beq.n	801277e <forward_dense+0x366>
 8012712:	ed91 7a08 	vldr	s14, [r1, #32]
 8012716:	2b09      	cmp	r3, #9
 8012718:	edd2 7a08 	vldr	s15, [r2, #32]
 801271c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012720:	d02d      	beq.n	801277e <forward_dense+0x366>
 8012722:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8012726:	2b0a      	cmp	r3, #10
 8012728:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 801272c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012730:	d025      	beq.n	801277e <forward_dense+0x366>
 8012732:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8012736:	2b0b      	cmp	r3, #11
 8012738:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 801273c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012740:	d01d      	beq.n	801277e <forward_dense+0x366>
 8012742:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8012746:	2b0c      	cmp	r3, #12
 8012748:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 801274c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012750:	d015      	beq.n	801277e <forward_dense+0x366>
 8012752:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8012756:	2b0d      	cmp	r3, #13
 8012758:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 801275c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012760:	d00d      	beq.n	801277e <forward_dense+0x366>
 8012762:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8012766:	2b0e      	cmp	r3, #14
 8012768:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801276c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012770:	d005      	beq.n	801277e <forward_dense+0x366>
 8012772:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8012776:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 801277a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801277e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012782:	444d      	add	r5, r9
 8012784:	ece0 6a01 	vstmia	r0!, {s13}
 8012788:	42b0      	cmp	r0, r6
 801278a:	f4bf aedb 	bcs.w	8012544 <forward_dense+0x12c>
 801278e:	2c00      	cmp	r4, #0
 8012790:	f47f af02 	bne.w	8012598 <forward_dense+0x180>
 8012794:	f1b8 0f0f 	cmp.w	r8, #15
 8012798:	eeb0 6a62 	vmov.f32	s12, s5
 801279c:	f63f af04 	bhi.w	80125a8 <forward_dense+0x190>
 80127a0:	4643      	mov	r3, r8
 80127a2:	4629      	mov	r1, r5
 80127a4:	463a      	mov	r2, r7
 80127a6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801281c <forward_dense+0x404>
 80127aa:	e770      	b.n	801268e <forward_dense+0x276>
 80127ac:	2300      	movs	r3, #0
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	deff      	udf	#255	; 0xff
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	deff      	udf	#255	; 0xff
 80127b6:	2300      	movs	r3, #0
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	deff      	udf	#255	; 0xff
 80127bc:	b1a4      	cbz	r4, 80127e8 <forward_dense+0x3d0>
 80127be:	f8d4 c000 	ldr.w	ip, [r4]
 80127c2:	463b      	mov	r3, r7
 80127c4:	4629      	mov	r1, r5
 80127c6:	9600      	str	r6, [sp, #0]
 80127c8:	4652      	mov	r2, sl
 80127ca:	9803      	ldr	r0, [sp, #12]
 80127cc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80127d0:	f7fe fed0 	bl	8011574 <ai_dict4_dot_array_f32>
 80127d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127d6:	3404      	adds	r4, #4
 80127d8:	444d      	add	r5, r9
 80127da:	f84b 3b04 	str.w	r3, [fp], #4
 80127de:	45c3      	cmp	fp, r8
 80127e0:	f4bf aead 	bcs.w	801253e <forward_dense+0x126>
 80127e4:	2c00      	cmp	r4, #0
 80127e6:	d1ea      	bne.n	80127be <forward_dense+0x3a6>
 80127e8:	4634      	mov	r4, r6
 80127ea:	4646      	mov	r6, r8
 80127ec:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80127f0:	463b      	mov	r3, r7
 80127f2:	4629      	mov	r1, r5
 80127f4:	9400      	str	r4, [sp, #0]
 80127f6:	4652      	mov	r2, sl
 80127f8:	4640      	mov	r0, r8
 80127fa:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 80127fe:	f7fe feb9 	bl	8011574 <ai_dict4_dot_array_f32>
 8012802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012804:	444d      	add	r5, r9
 8012806:	f84b 3b04 	str.w	r3, [fp], #4
 801280a:	45b3      	cmp	fp, r6
 801280c:	d3f0      	bcc.n	80127f0 <forward_dense+0x3d8>
 801280e:	46a0      	mov	r8, r4
 8012810:	e698      	b.n	8012544 <forward_dense+0x12c>
 8012812:	9006      	str	r0, [sp, #24]
 8012814:	e62a      	b.n	801246c <forward_dense+0x54>
 8012816:	9306      	str	r3, [sp, #24]
 8012818:	e628      	b.n	801246c <forward_dense+0x54>
 801281a:	bf00      	nop
 801281c:	00000000 	.word	0x00000000
 8012820:	4634      	mov	r4, r6
 8012822:	4646      	mov	r6, r8
 8012824:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012828:	463b      	mov	r3, r7
 801282a:	4629      	mov	r1, r5
 801282c:	9400      	str	r4, [sp, #0]
 801282e:	4652      	mov	r2, sl
 8012830:	4640      	mov	r0, r8
 8012832:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8012836:	f7fe fc6d 	bl	8011114 <ai_dict8_dot_array_f32>
 801283a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801283c:	444d      	add	r5, r9
 801283e:	f84b 3b04 	str.w	r3, [fp], #4
 8012842:	45b3      	cmp	fp, r6
 8012844:	d3f0      	bcc.n	8012828 <forward_dense+0x410>
 8012846:	46a0      	mov	r8, r4
 8012848:	e67c      	b.n	8012544 <forward_dense+0x12c>
 801284a:	b011      	add	sp, #68	; 0x44
 801284c:	ecbd 8b08 	vpop	{d8-d11}
 8012850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012854:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8012858:	e626      	b.n	80124a8 <forward_dense+0x90>
 801285a:	2300      	movs	r3, #0
 801285c:	9306      	str	r3, [sp, #24]
 801285e:	e605      	b.n	801246c <forward_dense+0x54>
 8012860:	9308      	str	r3, [sp, #32]
 8012862:	e5f6      	b.n	8012452 <forward_dense+0x3a>

08012864 <array_f32_identity>:
 8012864:	4288      	cmp	r0, r1
 8012866:	d004      	beq.n	8012872 <array_f32_identity+0xe>
 8012868:	0092      	lsls	r2, r2, #2
 801286a:	68c9      	ldr	r1, [r1, #12]
 801286c:	68c0      	ldr	r0, [r0, #12]
 801286e:	f000 bedf 	b.w	8013630 <memcpy>
 8012872:	4770      	bx	lr

08012874 <lstm_cell>:
 8012874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012878:	460c      	mov	r4, r1
 801287a:	b0b5      	sub	sp, #212	; 0xd4
 801287c:	8ccd      	ldrh	r5, [r1, #38]	; 0x26
 801287e:	4682      	mov	sl, r0
 8012880:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 8012882:	4613      	mov	r3, r2
 8012884:	9005      	str	r0, [sp, #20]
 8012886:	00af      	lsls	r7, r5, #2
 8012888:	910a      	str	r1, [sp, #40]	; 0x28
 801288a:	fb05 f005 	mul.w	r0, r5, r5
 801288e:	6822      	ldr	r2, [r4, #0]
 8012890:	fb01 f105 	mul.w	r1, r1, r5
 8012894:	6866      	ldr	r6, [r4, #4]
 8012896:	0080      	lsls	r0, r0, #2
 8012898:	9206      	str	r2, [sp, #24]
 801289a:	0089      	lsls	r1, r1, #2
 801289c:	9607      	str	r6, [sp, #28]
 801289e:	4406      	add	r6, r0
 80128a0:	9701      	str	r7, [sp, #4]
 80128a2:	440a      	add	r2, r1
 80128a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80128a6:	441f      	add	r7, r3
 80128a8:	9609      	str	r6, [sp, #36]	; 0x24
 80128aa:	4613      	mov	r3, r2
 80128ac:	4406      	add	r6, r0
 80128ae:	9208      	str	r2, [sp, #32]
 80128b0:	9603      	str	r6, [sp, #12]
 80128b2:	461e      	mov	r6, r3
 80128b4:	9a01      	ldr	r2, [sp, #4]
 80128b6:	440e      	add	r6, r1
 80128b8:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80128bc:	eb07 0e02 	add.w	lr, r7, r2
 80128c0:	9602      	str	r6, [sp, #8]
 80128c2:	eb09 0c02 	add.w	ip, r9, r2
 80128c6:	9e03      	ldr	r6, [sp, #12]
 80128c8:	eb0e 0802 	add.w	r8, lr, r2
 80128cc:	9a01      	ldr	r2, [sp, #4]
 80128ce:	1830      	adds	r0, r6, r0
 80128d0:	9e02      	ldr	r6, [sp, #8]
 80128d2:	4643      	mov	r3, r8
 80128d4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 80128d8:	1871      	adds	r1, r6, r1
 80128da:	eb0c 0602 	add.w	r6, ip, r2
 80128de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128e0:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80128e4:	921e      	str	r2, [sp, #120]	; 0x78
 80128e6:	9a01      	ldr	r2, [sp, #4]
 80128e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80128ea:	eb08 0b02 	add.w	fp, r8, r2
 80128ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128f0:	6a20      	ldr	r0, [r4, #32]
 80128f2:	911a      	str	r1, [sp, #104]	; 0x68
 80128f4:	9619      	str	r6, [sp, #100]	; 0x64
 80128f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80128f8:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 80128fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80128fe:	951d      	str	r5, [sp, #116]	; 0x74
 8012900:	9521      	str	r5, [sp, #132]	; 0x84
 8012902:	9525      	str	r5, [sp, #148]	; 0x94
 8012904:	9529      	str	r5, [sp, #164]	; 0xa4
 8012906:	952d      	str	r5, [sp, #180]	; 0xb4
 8012908:	9531      	str	r5, [sp, #196]	; 0xc4
 801290a:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 801290e:	4bd9      	ldr	r3, [pc, #868]	; (8012c74 <lstm_cell+0x400>)
 8012910:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
 8012914:	e9cd ee26 	strd	lr, lr, [sp, #152]	; 0x98
 8012918:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
 801291c:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
 8012920:	931c      	str	r3, [sp, #112]	; 0x70
 8012922:	9320      	str	r3, [sp, #128]	; 0x80
 8012924:	9324      	str	r3, [sp, #144]	; 0x90
 8012926:	9328      	str	r3, [sp, #160]	; 0xa0
 8012928:	932c      	str	r3, [sp, #176]	; 0xb0
 801292a:	9330      	str	r3, [sp, #192]	; 0xc0
 801292c:	2d00      	cmp	r5, #0
 801292e:	f000 83c1 	beq.w	80130b4 <lstm_cell+0x840>
 8012932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012934:	46f3      	mov	fp, lr
 8012936:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801293a:	46be      	mov	lr, r7
 801293c:	3b04      	subs	r3, #4
 801293e:	9712      	str	r7, [sp, #72]	; 0x48
 8012940:	1f28      	subs	r0, r5, #4
 8012942:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8012946:	461a      	mov	r2, r3
 8012948:	089b      	lsrs	r3, r3, #2
 801294a:	0881      	lsrs	r1, r0, #2
 801294c:	9610      	str	r6, [sp, #64]	; 0x40
 801294e:	1c5f      	adds	r7, r3, #1
 8012950:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8012954:	ebc1 7c81 	rsb	ip, r1, r1, lsl #30
 8012958:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801295a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801295e:	9a01      	ldr	r2, [sp, #4]
 8012960:	013f      	lsls	r7, r7, #4
 8012962:	3101      	adds	r1, #1
 8012964:	930c      	str	r3, [sp, #48]	; 0x30
 8012966:	4653      	mov	r3, sl
 8012968:	970b      	str	r7, [sp, #44]	; 0x2c
 801296a:	2e03      	cmp	r6, #3
 801296c:	443b      	add	r3, r7
 801296e:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8012c78 <lstm_cell+0x404>
 8012972:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 8012976:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012978:	930d      	str	r3, [sp, #52]	; 0x34
 801297a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 801297e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012980:	46dc      	mov	ip, fp
 8012982:	edc0 6a00 	vstr	s13, [r0]
 8012986:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801298a:	9304      	str	r3, [sp, #16]
 801298c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801298e:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8012992:	eb03 0802 	add.w	r8, r3, r2
 8012996:	f04f 0300 	mov.w	r3, #0
 801299a:	930e      	str	r3, [sp, #56]	; 0x38
 801299c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80129a0:	930a      	str	r3, [sp, #40]	; 0x28
 80129a2:	f240 823e 	bls.w	8012e22 <lstm_cell+0x5ae>
 80129a6:	9b06      	ldr	r3, [sp, #24]
 80129a8:	46b1      	mov	r9, r6
 80129aa:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 8012c78 <lstm_cell+0x404>
 80129ae:	f103 0210 	add.w	r2, r3, #16
 80129b2:	9b05      	ldr	r3, [sp, #20]
 80129b4:	3310      	adds	r3, #16
 80129b6:	ed12 7a03 	vldr	s14, [r2, #-12]
 80129ba:	f1a9 0904 	sub.w	r9, r9, #4
 80129be:	ed53 7a03 	vldr	s15, [r3, #-12]
 80129c2:	3210      	adds	r2, #16
 80129c4:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 80129c8:	f1b9 0f03 	cmp.w	r9, #3
 80129cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129d0:	ed13 7a04 	vldr	s14, [r3, #-16]
 80129d4:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80129d8:	f103 0310 	add.w	r3, r3, #16
 80129dc:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 80129e0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80129e4:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80129e8:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80129ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80129f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80129f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80129f8:	d8dd      	bhi.n	80129b6 <lstm_cell+0x142>
 80129fa:	9b06      	ldr	r3, [sp, #24]
 80129fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80129fe:	eb03 0902 	add.w	r9, r3, r2
 8012a02:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012a06:	b1ab      	cbz	r3, 8012a34 <lstm_cell+0x1c0>
 8012a08:	ed99 7a00 	vldr	s14, [r9]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	edd2 7a00 	vldr	s15, [r2]
 8012a12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012a16:	d00d      	beq.n	8012a34 <lstm_cell+0x1c0>
 8012a18:	ed99 7a01 	vldr	s14, [r9, #4]
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	edd2 7a01 	vldr	s15, [r2, #4]
 8012a22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012a26:	d005      	beq.n	8012a34 <lstm_cell+0x1c0>
 8012a28:	ed99 7a02 	vldr	s14, [r9, #8]
 8012a2c:	edd2 7a02 	vldr	s15, [r2, #8]
 8012a30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012a34:	2d03      	cmp	r5, #3
 8012a36:	ed80 6a00 	vstr	s12, [r0]
 8012a3a:	9b07      	ldr	r3, [sp, #28]
 8012a3c:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8012a40:	f240 8334 	bls.w	80130ac <lstm_cell+0x838>
 8012a44:	f103 0210 	add.w	r2, r3, #16
 8012a48:	46a9      	mov	r9, r5
 8012a4a:	f10a 0310 	add.w	r3, sl, #16
 8012a4e:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8012c78 <lstm_cell+0x404>
 8012a52:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012a56:	f1a9 0904 	sub.w	r9, r9, #4
 8012a5a:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012a5e:	3210      	adds	r2, #16
 8012a60:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8012a64:	f1b9 0f03 	cmp.w	r9, #3
 8012a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a6c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012a70:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8012a74:	f103 0310 	add.w	r3, r3, #16
 8012a78:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012a7c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012a80:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8012a84:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012a88:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012a8c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012a90:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012a94:	d8dd      	bhi.n	8012a52 <lstm_cell+0x1de>
 8012a96:	9b07      	ldr	r3, [sp, #28]
 8012a98:	448a      	add	sl, r1
 8012a9a:	440b      	add	r3, r1
 8012a9c:	b1b7      	cbz	r7, 8012acc <lstm_cell+0x258>
 8012a9e:	463a      	mov	r2, r7
 8012aa0:	ed93 7a00 	vldr	s14, [r3]
 8012aa4:	2a01      	cmp	r2, #1
 8012aa6:	edda 7a00 	vldr	s15, [sl]
 8012aaa:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012aae:	d00d      	beq.n	8012acc <lstm_cell+0x258>
 8012ab0:	ed93 7a01 	vldr	s14, [r3, #4]
 8012ab4:	2a02      	cmp	r2, #2
 8012ab6:	edda 7a01 	vldr	s15, [sl, #4]
 8012aba:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012abe:	d005      	beq.n	8012acc <lstm_cell+0x258>
 8012ac0:	ed93 7a02 	vldr	s14, [r3, #8]
 8012ac4:	edda 7a02 	vldr	s15, [sl, #8]
 8012ac8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012acc:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012ad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ad2:	2e03      	cmp	r6, #3
 8012ad4:	ed80 6a00 	vstr	s12, [r0]
 8012ad8:	ecb2 7a01 	vldmia	r2!, {s14}
 8012adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012ade:	9214      	str	r2, [sp, #80]	; 0x50
 8012ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ae2:	4413      	add	r3, r2
 8012ae4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ae6:	edd3 7a00 	vldr	s15, [r3]
 8012aea:	ecf2 5a01 	vldmia	r2!, {s11}
 8012aee:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012af2:	9215      	str	r2, [sp, #84]	; 0x54
 8012af4:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012af8:	eca0 6a01 	vstmia	r0!, {s12}
 8012afc:	edce 6a00 	vstr	s13, [lr]
 8012b00:	f240 82cd 	bls.w	801309e <lstm_cell+0x82a>
 8012b04:	9b08      	ldr	r3, [sp, #32]
 8012b06:	46b1      	mov	r9, r6
 8012b08:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8012c78 <lstm_cell+0x404>
 8012b0c:	f103 0210 	add.w	r2, r3, #16
 8012b10:	9b05      	ldr	r3, [sp, #20]
 8012b12:	3310      	adds	r3, #16
 8012b14:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012b18:	f1a9 0904 	sub.w	r9, r9, #4
 8012b1c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012b20:	3210      	adds	r2, #16
 8012b22:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8012b26:	f1b9 0f03 	cmp.w	r9, #3
 8012b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b2e:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012b32:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8012b36:	f103 0310 	add.w	r3, r3, #16
 8012b3a:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012b3e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012b42:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8012b46:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012b4a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012b4e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012b52:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012b56:	d8dd      	bhi.n	8012b14 <lstm_cell+0x2a0>
 8012b58:	9b08      	ldr	r3, [sp, #32]
 8012b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b5c:	eb03 0902 	add.w	r9, r3, r2
 8012b60:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012b64:	b1ab      	cbz	r3, 8012b92 <lstm_cell+0x31e>
 8012b66:	ed99 7a00 	vldr	s14, [r9]
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	edd2 7a00 	vldr	s15, [r2]
 8012b70:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012b74:	d00d      	beq.n	8012b92 <lstm_cell+0x31e>
 8012b76:	ed99 7a01 	vldr	s14, [r9, #4]
 8012b7a:	2b02      	cmp	r3, #2
 8012b7c:	edd2 7a01 	vldr	s15, [r2, #4]
 8012b80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012b84:	d005      	beq.n	8012b92 <lstm_cell+0x31e>
 8012b86:	ed99 7a02 	vldr	s14, [r9, #8]
 8012b8a:	edd2 7a02 	vldr	s15, [r2, #8]
 8012b8e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012b92:	2d03      	cmp	r5, #3
 8012b94:	ed8e 6a00 	vstr	s12, [lr]
 8012b98:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8012b9c:	f240 827a 	bls.w	8013094 <lstm_cell+0x820>
 8012ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ba2:	46a9      	mov	r9, r5
 8012ba4:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012c78 <lstm_cell+0x404>
 8012ba8:	f103 0210 	add.w	r2, r3, #16
 8012bac:	f10a 0310 	add.w	r3, sl, #16
 8012bb0:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012bb4:	f1a9 0904 	sub.w	r9, r9, #4
 8012bb8:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012bbc:	3210      	adds	r2, #16
 8012bbe:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8012bc2:	f1b9 0f03 	cmp.w	r9, #3
 8012bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bca:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012bce:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8012bd2:	f103 0310 	add.w	r3, r3, #16
 8012bd6:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012bda:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012bde:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8012be2:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012be6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012bea:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012bee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012bf2:	d8dd      	bhi.n	8012bb0 <lstm_cell+0x33c>
 8012bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf6:	448a      	add	sl, r1
 8012bf8:	440b      	add	r3, r1
 8012bfa:	b1b7      	cbz	r7, 8012c2a <lstm_cell+0x3b6>
 8012bfc:	463a      	mov	r2, r7
 8012bfe:	ed93 7a00 	vldr	s14, [r3]
 8012c02:	2a01      	cmp	r2, #1
 8012c04:	edda 7a00 	vldr	s15, [sl]
 8012c08:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012c0c:	d00d      	beq.n	8012c2a <lstm_cell+0x3b6>
 8012c0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012c12:	2a02      	cmp	r2, #2
 8012c14:	edda 7a01 	vldr	s15, [sl, #4]
 8012c18:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012c1c:	d005      	beq.n	8012c2a <lstm_cell+0x3b6>
 8012c1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8012c22:	edda 7a02 	vldr	s15, [sl, #8]
 8012c26:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012c2a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012c2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012c30:	2e03      	cmp	r6, #3
 8012c32:	46c1      	mov	r9, r8
 8012c34:	ed8e 6a00 	vstr	s12, [lr]
 8012c38:	ecf2 5a01 	vldmia	r2!, {s11}
 8012c3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c3e:	9213      	str	r2, [sp, #76]	; 0x4c
 8012c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c42:	ed98 7a00 	vldr	s14, [r8]
 8012c46:	4413      	add	r3, r2
 8012c48:	edd3 7a00 	vldr	s15, [r3]
 8012c4c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012c50:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012c54:	ecae 6a01 	vstmia	lr!, {s12}
 8012c58:	edcc 6a00 	vstr	s13, [ip]
 8012c5c:	f240 80ec 	bls.w	8012e38 <lstm_cell+0x5c4>
 8012c60:	9b02      	ldr	r3, [sp, #8]
 8012c62:	46b2      	mov	sl, r6
 8012c64:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8012c78 <lstm_cell+0x404>
 8012c68:	f103 0210 	add.w	r2, r3, #16
 8012c6c:	9b05      	ldr	r3, [sp, #20]
 8012c6e:	3310      	adds	r3, #16
 8012c70:	e004      	b.n	8012c7c <lstm_cell+0x408>
 8012c72:	bf00      	nop
 8012c74:	01821040 	.word	0x01821040
 8012c78:	00000000 	.word	0x00000000
 8012c7c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012c80:	f1aa 0a04 	sub.w	sl, sl, #4
 8012c84:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012c88:	3210      	adds	r2, #16
 8012c8a:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8012c8e:	f1ba 0f03 	cmp.w	sl, #3
 8012c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c96:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012c9a:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8012c9e:	f103 0310 	add.w	r3, r3, #16
 8012ca2:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012ca6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012caa:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8012cae:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012cb2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012cb6:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012cba:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012cbe:	d8dd      	bhi.n	8012c7c <lstm_cell+0x408>
 8012cc0:	9b02      	ldr	r3, [sp, #8]
 8012cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cc4:	eb03 0a02 	add.w	sl, r3, r2
 8012cc8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012ccc:	b1ab      	cbz	r3, 8012cfa <lstm_cell+0x486>
 8012cce:	ed9a 7a00 	vldr	s14, [sl]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	edd2 7a00 	vldr	s15, [r2]
 8012cd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012cdc:	d00d      	beq.n	8012cfa <lstm_cell+0x486>
 8012cde:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	edd2 7a01 	vldr	s15, [r2, #4]
 8012ce8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012cec:	d005      	beq.n	8012cfa <lstm_cell+0x486>
 8012cee:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012cf2:	edd2 7a02 	vldr	s15, [r2, #8]
 8012cf6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012cfa:	2d03      	cmp	r5, #3
 8012cfc:	ed8c 6a00 	vstr	s12, [ip]
 8012d00:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8012d04:	f240 8093 	bls.w	8012e2e <lstm_cell+0x5ba>
 8012d08:	9b03      	ldr	r3, [sp, #12]
 8012d0a:	46aa      	mov	sl, r5
 8012d0c:	ed5f 5a26 	vldr	s11, [pc, #-152]	; 8012c78 <lstm_cell+0x404>
 8012d10:	f103 0210 	add.w	r2, r3, #16
 8012d14:	f10b 0310 	add.w	r3, fp, #16
 8012d18:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012d1c:	f1aa 0a04 	sub.w	sl, sl, #4
 8012d20:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012d24:	3210      	adds	r2, #16
 8012d26:	ed12 5a08 	vldr	s10, [r2, #-32]	; 0xffffffe0
 8012d2a:	f1ba 0f03 	cmp.w	sl, #3
 8012d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d32:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012d36:	ed12 4a06 	vldr	s8, [r2, #-24]	; 0xffffffe8
 8012d3a:	f103 0310 	add.w	r3, r3, #16
 8012d3e:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8012d42:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012d46:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8012d4a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012d4e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012d52:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012d56:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012d5a:	d8dd      	bhi.n	8012d18 <lstm_cell+0x4a4>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	448b      	add	fp, r1
 8012d60:	440b      	add	r3, r1
 8012d62:	b1b7      	cbz	r7, 8012d92 <lstm_cell+0x51e>
 8012d64:	463a      	mov	r2, r7
 8012d66:	ed93 7a00 	vldr	s14, [r3]
 8012d6a:	2a01      	cmp	r2, #1
 8012d6c:	eddb 7a00 	vldr	s15, [fp]
 8012d70:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012d74:	d00d      	beq.n	8012d92 <lstm_cell+0x51e>
 8012d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8012d7a:	2a02      	cmp	r2, #2
 8012d7c:	eddb 7a01 	vldr	s15, [fp, #4]
 8012d80:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012d84:	d005      	beq.n	8012d92 <lstm_cell+0x51e>
 8012d86:	ed93 7a02 	vldr	s14, [r3, #8]
 8012d8a:	eddb 7a02 	vldr	s15, [fp, #8]
 8012d8e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012d92:	9a06      	ldr	r2, [sp, #24]
 8012d94:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012d98:	9b04      	ldr	r3, [sp, #16]
 8012d9a:	f108 0804 	add.w	r8, r8, #4
 8012d9e:	4692      	mov	sl, r2
 8012da0:	9a07      	ldr	r2, [sp, #28]
 8012da2:	ed8c 6a00 	vstr	s12, [ip]
 8012da6:	449a      	add	sl, r3
 8012da8:	ed99 7a00 	vldr	s14, [r9]
 8012dac:	f8cd a018 	str.w	sl, [sp, #24]
 8012db0:	4692      	mov	sl, r2
 8012db2:	9a01      	ldr	r2, [sp, #4]
 8012db4:	4492      	add	sl, r2
 8012db6:	9a08      	ldr	r2, [sp, #32]
 8012db8:	f8cd a01c 	str.w	sl, [sp, #28]
 8012dbc:	4692      	mov	sl, r2
 8012dbe:	9a01      	ldr	r2, [sp, #4]
 8012dc0:	449a      	add	sl, r3
 8012dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc4:	f8cd a020 	str.w	sl, [sp, #32]
 8012dc8:	469a      	mov	sl, r3
 8012dca:	9b02      	ldr	r3, [sp, #8]
 8012dcc:	4492      	add	sl, r2
 8012dce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012dd2:	469a      	mov	sl, r3
 8012dd4:	9b04      	ldr	r3, [sp, #16]
 8012dd6:	449a      	add	sl, r3
 8012dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012dda:	9316      	str	r3, [sp, #88]	; 0x58
 8012ddc:	9b03      	ldr	r3, [sp, #12]
 8012dde:	f8cd a008 	str.w	sl, [sp, #8]
 8012de2:	4413      	add	r3, r2
 8012de4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012de6:	9303      	str	r3, [sp, #12]
 8012de8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012dea:	ecf3 5a01 	vldmia	r3!, {s11}
 8012dee:	9310      	str	r3, [sp, #64]	; 0x40
 8012df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012df2:	441a      	add	r2, r3
 8012df4:	4613      	mov	r3, r2
 8012df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012df8:	edd3 7a00 	vldr	s15, [r3]
 8012dfc:	3201      	adds	r2, #1
 8012dfe:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012e02:	4295      	cmp	r5, r2
 8012e04:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012e08:	ecac 6a01 	vstmia	ip!, {s12}
 8012e0c:	d01b      	beq.n	8012e46 <lstm_cell+0x5d2>
 8012e0e:	4613      	mov	r3, r2
 8012e10:	2e03      	cmp	r6, #3
 8012e12:	920e      	str	r2, [sp, #56]	; 0x38
 8012e14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8012e18:	edc0 6a00 	vstr	s13, [r0]
 8012e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8012e1e:	f63f adc2 	bhi.w	80129a6 <lstm_cell+0x132>
 8012e22:	4633      	mov	r3, r6
 8012e24:	ed1f 6a6c 	vldr	s12, [pc, #-432]	; 8012c78 <lstm_cell+0x404>
 8012e28:	e9dd 2905 	ldrd	r2, r9, [sp, #20]
 8012e2c:	e5eb      	b.n	8012a06 <lstm_cell+0x192>
 8012e2e:	462a      	mov	r2, r5
 8012e30:	9b03      	ldr	r3, [sp, #12]
 8012e32:	ed5f 5a6f 	vldr	s11, [pc, #-444]	; 8012c78 <lstm_cell+0x404>
 8012e36:	e796      	b.n	8012d66 <lstm_cell+0x4f2>
 8012e38:	4633      	mov	r3, r6
 8012e3a:	9a05      	ldr	r2, [sp, #20]
 8012e3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012e40:	ed1f 6a73 	vldr	s12, [pc, #-460]	; 8012c78 <lstm_cell+0x404>
 8012e44:	e742      	b.n	8012ccc <lstm_cell+0x458>
 8012e46:	a91c      	add	r1, sp, #112	; 0x70
 8012e48:	4617      	mov	r7, r2
 8012e4a:	960a      	str	r6, [sp, #40]	; 0x28
 8012e4c:	4608      	mov	r0, r1
 8012e4e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8012e52:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 8012e56:	47a8      	blx	r5
 8012e58:	a920      	add	r1, sp, #128	; 0x80
 8012e5a:	6965      	ldr	r5, [r4, #20]
 8012e5c:	463a      	mov	r2, r7
 8012e5e:	4608      	mov	r0, r1
 8012e60:	69a3      	ldr	r3, [r4, #24]
 8012e62:	47a8      	blx	r5
 8012e64:	a924      	add	r1, sp, #144	; 0x90
 8012e66:	68e5      	ldr	r5, [r4, #12]
 8012e68:	463a      	mov	r2, r7
 8012e6a:	4608      	mov	r0, r1
 8012e6c:	6923      	ldr	r3, [r4, #16]
 8012e6e:	47a8      	blx	r5
 8012e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e72:	9a01      	ldr	r2, [sp, #4]
 8012e74:	2100      	movs	r1, #0
 8012e76:	f1a3 0803 	sub.w	r8, r3, #3
 8012e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e7c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012e80:	ea4f 0598 	mov.w	r5, r8, lsr #2
 8012e84:	4413      	add	r3, r2
 8012e86:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012e88:	469c      	mov	ip, r3
 8012e8a:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
 8012e8e:	3501      	adds	r5, #1
 8012e90:	ed1f 4a87 	vldr	s8, [pc, #-540]	; 8012c78 <lstm_cell+0x404>
 8012e94:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8012e98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012e9a:	012d      	lsls	r5, r5, #4
 8012e9c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8012ea0:	e9cd b802 	strd	fp, r8, [sp, #8]
 8012ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012eaa:	2e03      	cmp	r6, #3
 8012eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012eae:	ecb2 7a01 	vldmia	r2!, {s14}
 8012eb2:	440b      	add	r3, r1
 8012eb4:	920f      	str	r2, [sp, #60]	; 0x3c
 8012eb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012eb8:	ecf2 7a01 	vldmia	r2!, {s15}
 8012ebc:	9211      	str	r2, [sp, #68]	; 0x44
 8012ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ec4:	ed93 7a00 	vldr	s14, [r3]
 8012ec8:	ecf2 6a01 	vldmia	r2!, {s13}
 8012ecc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012ed0:	9212      	str	r2, [sp, #72]	; 0x48
 8012ed2:	edc3 7a00 	vstr	s15, [r3]
 8012ed6:	ed80 4a00 	vstr	s8, [r0]
 8012eda:	f240 80d5 	bls.w	8013088 <lstm_cell+0x814>
 8012ede:	9b05      	ldr	r3, [sp, #20]
 8012ee0:	f108 0210 	add.w	r2, r8, #16
 8012ee4:	46b2      	mov	sl, r6
 8012ee6:	ed5f 6a9c 	vldr	s13, [pc, #-624]	; 8012c78 <lstm_cell+0x404>
 8012eea:	3310      	adds	r3, #16
 8012eec:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012ef0:	f1aa 0a04 	sub.w	sl, sl, #4
 8012ef4:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012ef8:	3210      	adds	r2, #16
 8012efa:	ed12 6a08 	vldr	s12, [r2, #-32]	; 0xffffffe0
 8012efe:	f1ba 0f03 	cmp.w	sl, #3
 8012f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f06:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012f0a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 8012f0e:	f103 0310 	add.w	r3, r3, #16
 8012f12:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 8012f16:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f1a:	ed12 6a05 	vldr	s12, [r2, #-20]	; 0xffffffec
 8012f1e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012f22:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012f26:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012f2e:	d8dd      	bhi.n	8012eec <lstm_cell+0x678>
 8012f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f32:	eb08 0a03 	add.w	sl, r8, r3
 8012f36:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012f3a:	b1ab      	cbz	r3, 8012f68 <lstm_cell+0x6f4>
 8012f3c:	ed9a 7a00 	vldr	s14, [sl]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	edd2 7a00 	vldr	s15, [r2]
 8012f46:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012f4a:	d00d      	beq.n	8012f68 <lstm_cell+0x6f4>
 8012f4c:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012f50:	2b02      	cmp	r3, #2
 8012f52:	edd2 7a01 	vldr	s15, [r2, #4]
 8012f56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012f5a:	d005      	beq.n	8012f68 <lstm_cell+0x6f4>
 8012f5c:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012f60:	edd2 7a02 	vldr	s15, [r2, #8]
 8012f64:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012f68:	2f03      	cmp	r7, #3
 8012f6a:	edc0 6a00 	vstr	s13, [r0]
 8012f6e:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8012f72:	f240 8084 	bls.w	801307e <lstm_cell+0x80a>
 8012f76:	f109 0210 	add.w	r2, r9, #16
 8012f7a:	f10b 0310 	add.w	r3, fp, #16
 8012f7e:	46ba      	mov	sl, r7
 8012f80:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 8012c78 <lstm_cell+0x404>
 8012f84:	ed12 7a03 	vldr	s14, [r2, #-12]
 8012f88:	f1aa 0a04 	sub.w	sl, sl, #4
 8012f8c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8012f90:	3210      	adds	r2, #16
 8012f92:	ed52 5a08 	vldr	s11, [r2, #-32]	; 0xffffffe0
 8012f96:	f1ba 0f03 	cmp.w	sl, #3
 8012f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f9e:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012fa2:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 8012fa6:	f103 0310 	add.w	r3, r3, #16
 8012faa:	ed13 5a06 	vldr	s10, [r3, #-24]	; 0xffffffe8
 8012fae:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012fb2:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8012fb6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8012fba:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012fbe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012fc2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8012fc6:	d8dd      	bhi.n	8012f84 <lstm_cell+0x710>
 8012fc8:	9a03      	ldr	r2, [sp, #12]
 8012fca:	44ab      	add	fp, r5
 8012fcc:	eb09 0305 	add.w	r3, r9, r5
 8012fd0:	b1aa      	cbz	r2, 8012ffe <lstm_cell+0x78a>
 8012fd2:	ed93 7a00 	vldr	s14, [r3]
 8012fd6:	2a01      	cmp	r2, #1
 8012fd8:	eddb 7a00 	vldr	s15, [fp]
 8012fdc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012fe0:	d00d      	beq.n	8012ffe <lstm_cell+0x78a>
 8012fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8012fe6:	2a02      	cmp	r2, #2
 8012fe8:	eddb 7a01 	vldr	s15, [fp, #4]
 8012fec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ff0:	d005      	beq.n	8012ffe <lstm_cell+0x78a>
 8012ff2:	ed93 7a02 	vldr	s14, [r3, #8]
 8012ff6:	eddb 7a02 	vldr	s15, [fp, #8]
 8012ffa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ffe:	9b04      	ldr	r3, [sp, #16]
 8013000:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013004:	4498      	add	r8, r3
 8013006:	9b01      	ldr	r3, [sp, #4]
 8013008:	edc0 6a00 	vstr	s13, [r0]
 801300c:	4499      	add	r9, r3
 801300e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013010:	ecbe 7a01 	vldmia	lr!, {s14}
 8013014:	440b      	add	r3, r1
 8013016:	ecbc 6a01 	vldmia	ip!, {s12}
 801301a:	3104      	adds	r1, #4
 801301c:	edd3 7a00 	vldr	s15, [r3]
 8013020:	9b02      	ldr	r3, [sp, #8]
 8013022:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013026:	428b      	cmp	r3, r1
 8013028:	ee76 6a26 	vadd.f32	s13, s12, s13
 801302c:	ece0 6a01 	vstmia	r0!, {s13}
 8013030:	f47f af3a 	bne.w	8012ea8 <lstm_cell+0x634>
 8013034:	a928      	add	r1, sp, #160	; 0xa0
 8013036:	469b      	mov	fp, r3
 8013038:	463a      	mov	r2, r7
 801303a:	4608      	mov	r0, r1
 801303c:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
 8013040:	47a8      	blx	r5
 8013042:	a930      	add	r1, sp, #192	; 0xc0
 8013044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013046:	a82c      	add	r0, sp, #176	; 0xb0
 8013048:	463a      	mov	r2, r7
 801304a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801304c:	47a8      	blx	r5
 801304e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013050:	449b      	add	fp, r3
 8013052:	4619      	mov	r1, r3
 8013054:	4618      	mov	r0, r3
 8013056:	1a0a      	subs	r2, r1, r0
 8013058:	6a23      	ldr	r3, [r4, #32]
 801305a:	ecf1 7a01 	vldmia	r1!, {s15}
 801305e:	4413      	add	r3, r2
 8013060:	458b      	cmp	fp, r1
 8013062:	ed93 7a00 	vldr	s14, [r3]
 8013066:	ee67 7a27 	vmul.f32	s15, s14, s15
 801306a:	edc3 7a00 	vstr	s15, [r3]
 801306e:	d1f2      	bne.n	8013056 <lstm_cell+0x7e2>
 8013070:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8013074:	e9c4 2307 	strd	r2, r3, [r4, #28]
 8013078:	b035      	add	sp, #212	; 0xd4
 801307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307e:	464b      	mov	r3, r9
 8013080:	463a      	mov	r2, r7
 8013082:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8013100 <lstm_cell+0x88c>
 8013086:	e7a4      	b.n	8012fd2 <lstm_cell+0x75e>
 8013088:	4633      	mov	r3, r6
 801308a:	9a05      	ldr	r2, [sp, #20]
 801308c:	46c2      	mov	sl, r8
 801308e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8013100 <lstm_cell+0x88c>
 8013092:	e752      	b.n	8012f3a <lstm_cell+0x6c6>
 8013094:	462a      	mov	r2, r5
 8013096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013098:	eddf 5a19 	vldr	s11, [pc, #100]	; 8013100 <lstm_cell+0x88c>
 801309c:	e5af      	b.n	8012bfe <lstm_cell+0x38a>
 801309e:	4633      	mov	r3, r6
 80130a0:	9a05      	ldr	r2, [sp, #20]
 80130a2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80130a6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8013100 <lstm_cell+0x88c>
 80130aa:	e55b      	b.n	8012b64 <lstm_cell+0x2f0>
 80130ac:	462a      	mov	r2, r5
 80130ae:	eddf 5a14 	vldr	s11, [pc, #80]	; 8013100 <lstm_cell+0x88c>
 80130b2:	e4f5      	b.n	8012aa0 <lstm_cell+0x22c>
 80130b4:	a91c      	add	r1, sp, #112	; 0x70
 80130b6:	462a      	mov	r2, r5
 80130b8:	e9d4 6305 	ldrd	r6, r3, [r4, #20]
 80130bc:	4608      	mov	r0, r1
 80130be:	47b0      	blx	r6
 80130c0:	a920      	add	r1, sp, #128	; 0x80
 80130c2:	6966      	ldr	r6, [r4, #20]
 80130c4:	462a      	mov	r2, r5
 80130c6:	4608      	mov	r0, r1
 80130c8:	69a3      	ldr	r3, [r4, #24]
 80130ca:	47b0      	blx	r6
 80130cc:	a924      	add	r1, sp, #144	; 0x90
 80130ce:	68e6      	ldr	r6, [r4, #12]
 80130d0:	462a      	mov	r2, r5
 80130d2:	4608      	mov	r0, r1
 80130d4:	6923      	ldr	r3, [r4, #16]
 80130d6:	47b0      	blx	r6
 80130d8:	a928      	add	r1, sp, #160	; 0xa0
 80130da:	462a      	mov	r2, r5
 80130dc:	69a3      	ldr	r3, [r4, #24]
 80130de:	4608      	mov	r0, r1
 80130e0:	6966      	ldr	r6, [r4, #20]
 80130e2:	47b0      	blx	r6
 80130e4:	462a      	mov	r2, r5
 80130e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130e8:	a930      	add	r1, sp, #192	; 0xc0
 80130ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80130ec:	a82c      	add	r0, sp, #176	; 0xb0
 80130ee:	47a8      	blx	r5
 80130f0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80130f4:	e9c4 2307 	strd	r2, r3, [r4, #28]
 80130f8:	b035      	add	sp, #212	; 0xd4
 80130fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fe:	bf00      	nop
 8013100:	00000000 	.word	0x00000000

08013104 <forward_lstm>:
 8013104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013108:	6943      	ldr	r3, [r0, #20]
 801310a:	b099      	sub	sp, #100	; 0x64
 801310c:	881c      	ldrh	r4, [r3, #0]
 801310e:	2c00      	cmp	r4, #0
 8013110:	f000 80ea 	beq.w	80132e8 <forward_lstm+0x1e4>
 8013114:	6859      	ldr	r1, [r3, #4]
 8013116:	684b      	ldr	r3, [r1, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	f000 8130 	beq.w	801337e <forward_lstm+0x27a>
 801311e:	f8d3 b000 	ldr.w	fp, [r3]
 8013122:	2c01      	cmp	r4, #1
 8013124:	f240 80db 	bls.w	80132de <forward_lstm+0x1da>
 8013128:	690e      	ldr	r6, [r1, #16]
 801312a:	b106      	cbz	r6, 801312e <forward_lstm+0x2a>
 801312c:	6836      	ldr	r6, [r6, #0]
 801312e:	2c02      	cmp	r4, #2
 8013130:	f000 80d5 	beq.w	80132de <forward_lstm+0x1da>
 8013134:	69ca      	ldr	r2, [r1, #28]
 8013136:	2a00      	cmp	r2, #0
 8013138:	f000 8114 	beq.w	8013364 <forward_lstm+0x260>
 801313c:	f111 0818 	adds.w	r8, r1, #24
 8013140:	6815      	ldr	r5, [r2, #0]
 8013142:	d008      	beq.n	8013156 <forward_lstm+0x52>
 8013144:	8b0f      	ldrh	r7, [r1, #24]
 8013146:	2f01      	cmp	r7, #1
 8013148:	f240 8114 	bls.w	8013374 <forward_lstm+0x270>
 801314c:	2a00      	cmp	r2, #0
 801314e:	f000 80d0 	beq.w	80132f2 <forward_lstm+0x1ee>
 8013152:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8013156:	f8db 700c 	ldr.w	r7, [fp, #12]
 801315a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	69b6      	ldr	r6, [r6, #24]
 8013162:	9301      	str	r3, [sp, #4]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d2 9010 	ldr.w	r9, [r2, #16]
 801316a:	9303      	str	r3, [sp, #12]
 801316c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8013170:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8013174:	9309      	str	r3, [sp, #36]	; 0x24
 8013176:	68b3      	ldr	r3, [r6, #8]
 8013178:	9304      	str	r3, [sp, #16]
 801317a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801317e:	e9d2 7205 	ldrd	r7, r2, [r2, #20]
 8013182:	f1b9 0f00 	cmp.w	r9, #0
 8013186:	f000 80fe 	beq.w	8013386 <forward_lstm+0x282>
 801318a:	f8d9 9018 	ldr.w	r9, [r9, #24]
 801318e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8013192:	9605      	str	r6, [sp, #20]
 8013194:	2f00      	cmp	r7, #0
 8013196:	f000 80f4 	beq.w	8013382 <forward_lstm+0x27e>
 801319a:	69bf      	ldr	r7, [r7, #24]
 801319c:	68be      	ldr	r6, [r7, #8]
 801319e:	9606      	str	r6, [sp, #24]
 80131a0:	2a00      	cmp	r2, #0
 80131a2:	f000 80f3 	beq.w	801338c <forward_lstm+0x288>
 80131a6:	6992      	ldr	r2, [r2, #24]
 80131a8:	6892      	ldr	r2, [r2, #8]
 80131aa:	9207      	str	r2, [sp, #28]
 80131ac:	2c03      	cmp	r4, #3
 80131ae:	f000 8096 	beq.w	80132de <forward_lstm+0x1da>
 80131b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80131b4:	2a00      	cmp	r2, #0
 80131b6:	f000 8095 	beq.w	80132e4 <forward_lstm+0x1e0>
 80131ba:	6812      	ldr	r2, [r2, #0]
 80131bc:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
 80131c0:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80131c4:	4681      	mov	r9, r0
 80131c6:	6992      	ldr	r2, [r2, #24]
 80131c8:	ea4f 008a 	mov.w	r0, sl, lsl #2
 80131cc:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80131d0:	00bf      	lsls	r7, r7, #2
 80131d2:	6894      	ldr	r4, [r2, #8]
 80131d4:	2100      	movs	r1, #0
 80131d6:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80131da:	463a      	mov	r2, r7
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	4427      	add	r7, r4
 80131e0:	69ad      	ldr	r5, [r5, #24]
 80131e2:	9002      	str	r0, [sp, #8]
 80131e4:	4620      	mov	r0, r4
 80131e6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80131ea:	68ad      	ldr	r5, [r5, #8]
 80131ec:	f8de 8008 	ldr.w	r8, [lr, #8]
 80131f0:	9308      	str	r3, [sp, #32]
 80131f2:	f000 fa2b 	bl	801364c <memset>
 80131f6:	9b02      	ldr	r3, [sp, #8]
 80131f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80131fc:	eb04 0e03 	add.w	lr, r4, r3
 8013200:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8013204:	4b62      	ldr	r3, [pc, #392]	; (8013390 <forward_lstm+0x28c>)
 8013206:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 801320a:	960b      	str	r6, [sp, #44]	; 0x2c
 801320c:	2800      	cmp	r0, #0
 801320e:	bf08      	it	eq
 8013210:	4618      	moveq	r0, r3
 8013212:	9e05      	ldr	r6, [sp, #20]
 8013214:	2900      	cmp	r1, #0
 8013216:	bf08      	it	eq
 8013218:	4619      	moveq	r1, r3
 801321a:	2a00      	cmp	r2, #0
 801321c:	bf08      	it	eq
 801321e:	461a      	moveq	r2, r3
 8013220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013222:	960e      	str	r6, [sp, #56]	; 0x38
 8013224:	9e06      	ldr	r6, [sp, #24]
 8013226:	2b01      	cmp	r3, #1
 8013228:	950a      	str	r5, [sp, #40]	; 0x28
 801322a:	9b02      	ldr	r3, [sp, #8]
 801322c:	9d03      	ldr	r5, [sp, #12]
 801322e:	9610      	str	r6, [sp, #64]	; 0x40
 8013230:	4473      	add	r3, lr
 8013232:	9e03      	ldr	r6, [sp, #12]
 8013234:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8013238:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
 801323c:	bf98      	it	ls
 801323e:	f04f 0a00 	movls.w	sl, #0
 8013242:	9d08      	ldr	r5, [sp, #32]
 8013244:	9415      	str	r4, [sp, #84]	; 0x54
 8013246:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 801324a:	f899 4028 	ldrb.w	r4, [r9, #40]	; 0x28
 801324e:	9e07      	ldr	r6, [sp, #28]
 8013250:	950c      	str	r5, [sp, #48]	; 0x30
 8013252:	4655      	mov	r5, sl
 8013254:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013258:	9617      	str	r6, [sp, #92]	; 0x5c
 801325a:	900d      	str	r0, [sp, #52]	; 0x34
 801325c:	910f      	str	r1, [sp, #60]	; 0x3c
 801325e:	9216      	str	r2, [sp, #88]	; 0x58
 8013260:	e9cd e311 	strd	lr, r3, [sp, #68]	; 0x44
 8013264:	2c00      	cmp	r4, #0
 8013266:	d041      	beq.n	80132ec <forward_lstm+0x1e8>
 8013268:	9b01      	ldr	r3, [sp, #4]
 801326a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801326e:	1e5c      	subs	r4, r3, #1
 8013270:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8013274:	b14a      	cbz	r2, 801328a <forward_lstm+0x186>
 8013276:	9b01      	ldr	r3, [sp, #4]
 8013278:	f1ca 0500 	rsb	r5, sl, #0
 801327c:	1e5a      	subs	r2, r3, #1
 801327e:	9b04      	ldr	r3, [sp, #16]
 8013280:	fb0a fa02 	mul.w	sl, sl, r2
 8013284:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8013288:	9304      	str	r3, [sp, #16]
 801328a:	fb0c f308 	mul.w	r3, ip, r8
 801328e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8013292:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8013296:	9303      	str	r3, [sp, #12]
 8013298:	2d00      	cmp	r5, #0
 801329a:	d143      	bne.n	8013324 <forward_lstm+0x220>
 801329c:	4653      	mov	r3, sl
 801329e:	fb0c f504 	mul.w	r5, ip, r4
 80132a2:	46ba      	mov	sl, r7
 80132a4:	9e04      	ldr	r6, [sp, #16]
 80132a6:	465f      	mov	r7, fp
 80132a8:	469b      	mov	fp, r3
 80132aa:	e002      	b.n	80132b2 <forward_lstm+0x1ae>
 80132ac:	9b01      	ldr	r3, [sp, #4]
 80132ae:	429c      	cmp	r4, r3
 80132b0:	da0c      	bge.n	80132cc <forward_lstm+0x1c8>
 80132b2:	69b8      	ldr	r0, [r7, #24]
 80132b4:	4444      	add	r4, r8
 80132b6:	9b03      	ldr	r3, [sp, #12]
 80132b8:	4652      	mov	r2, sl
 80132ba:	6880      	ldr	r0, [r0, #8]
 80132bc:	4659      	mov	r1, fp
 80132be:	444e      	add	r6, r9
 80132c0:	4428      	add	r0, r5
 80132c2:	441d      	add	r5, r3
 80132c4:	f7ff fad6 	bl	8012874 <lstm_cell>
 80132c8:	2c00      	cmp	r4, #0
 80132ca:	daef      	bge.n	80132ac <forward_lstm+0x1a8>
 80132cc:	4630      	mov	r0, r6
 80132ce:	9a02      	ldr	r2, [sp, #8]
 80132d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80132d2:	9604      	str	r6, [sp, #16]
 80132d4:	f000 f9ac 	bl	8013630 <memcpy>
 80132d8:	b019      	add	sp, #100	; 0x64
 80132da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132de:	2300      	movs	r3, #0
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	deff      	udf	#255	; 0xff
 80132e4:	6993      	ldr	r3, [r2, #24]
 80132e6:	deff      	udf	#255	; 0xff
 80132e8:	6863      	ldr	r3, [r4, #4]
 80132ea:	deff      	udf	#255	; 0xff
 80132ec:	f04f 0801 	mov.w	r8, #1
 80132f0:	e7be      	b.n	8013270 <forward_lstm+0x16c>
 80132f2:	f8db 300c 	ldr.w	r3, [fp, #12]
 80132f6:	f04f 0800 	mov.w	r8, #0
 80132fa:	68f7      	ldr	r7, [r6, #12]
 80132fc:	69b2      	ldr	r2, [r6, #24]
 80132fe:	46c4      	mov	ip, r8
 8013300:	68de      	ldr	r6, [r3, #12]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	6892      	ldr	r2, [r2, #8]
 8013306:	9303      	str	r3, [sp, #12]
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f8cd 8014 	str.w	r8, [sp, #20]
 801330e:	9309      	str	r3, [sp, #36]	; 0x24
 8013310:	4643      	mov	r3, r8
 8013312:	9601      	str	r6, [sp, #4]
 8013314:	f8cd 8018 	str.w	r8, [sp, #24]
 8013318:	9204      	str	r2, [sp, #16]
 801331a:	f8cd 801c 	str.w	r8, [sp, #28]
 801331e:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8013322:	e743      	b.n	80131ac <forward_lstm+0xa8>
 8013324:	4653      	mov	r3, sl
 8013326:	fb0c f504 	mul.w	r5, ip, r4
 801332a:	46da      	mov	sl, fp
 801332c:	9e04      	ldr	r6, [sp, #16]
 801332e:	469b      	mov	fp, r3
 8013330:	e001      	b.n	8013336 <forward_lstm+0x232>
 8013332:	2c00      	cmp	r4, #0
 8013334:	dbd0      	blt.n	80132d8 <forward_lstm+0x1d4>
 8013336:	f8da 0018 	ldr.w	r0, [sl, #24]
 801333a:	463a      	mov	r2, r7
 801333c:	9b03      	ldr	r3, [sp, #12]
 801333e:	4659      	mov	r1, fp
 8013340:	6880      	ldr	r0, [r0, #8]
 8013342:	4444      	add	r4, r8
 8013344:	4428      	add	r0, r5
 8013346:	441d      	add	r5, r3
 8013348:	f7ff fa94 	bl	8012874 <lstm_cell>
 801334c:	4630      	mov	r0, r6
 801334e:	9a02      	ldr	r2, [sp, #8]
 8013350:	444e      	add	r6, r9
 8013352:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013354:	f000 f96c 	bl	8013630 <memcpy>
 8013358:	9b01      	ldr	r3, [sp, #4]
 801335a:	429c      	cmp	r4, r3
 801335c:	dbe9      	blt.n	8013332 <forward_lstm+0x22e>
 801335e:	b019      	add	sp, #100	; 0x64
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013364:	f111 0518 	adds.w	r5, r1, #24
 8013368:	d0c3      	beq.n	80132f2 <forward_lstm+0x1ee>
 801336a:	8b0f      	ldrh	r7, [r1, #24]
 801336c:	4615      	mov	r5, r2
 801336e:	2f01      	cmp	r7, #1
 8013370:	f63f aeec 	bhi.w	801314c <forward_lstm+0x48>
 8013374:	2a00      	cmp	r2, #0
 8013376:	d0bc      	beq.n	80132f2 <forward_lstm+0x1ee>
 8013378:	f04f 0800 	mov.w	r8, #0
 801337c:	e6eb      	b.n	8013156 <forward_lstm+0x52>
 801337e:	469b      	mov	fp, r3
 8013380:	e6cf      	b.n	8013122 <forward_lstm+0x1e>
 8013382:	9706      	str	r7, [sp, #24]
 8013384:	e70c      	b.n	80131a0 <forward_lstm+0x9c>
 8013386:	f8cd 9014 	str.w	r9, [sp, #20]
 801338a:	e703      	b.n	8013194 <forward_lstm+0x90>
 801338c:	9207      	str	r2, [sp, #28]
 801338e:	e70d      	b.n	80131ac <forward_lstm+0xa8>
 8013390:	08012865 	.word	0x08012865

08013394 <nl_func_sigmoid_array_f32>:
 8013394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013396:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801339a:	688c      	ldr	r4, [r1, #8]
 801339c:	4413      	add	r3, r2
 801339e:	009b      	lsls	r3, r3, #2
 80133a0:	18e4      	adds	r4, r4, r3
 80133a2:	ed2d 8b02 	vpush	{d8}
 80133a6:	6885      	ldr	r5, [r0, #8]
 80133a8:	d218      	bcs.n	80133dc <nl_func_sigmoid_array_f32+0x48>
 80133aa:	3304      	adds	r3, #4
 80133ac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80133b0:	460f      	mov	r7, r1
 80133b2:	3404      	adds	r4, #4
 80133b4:	441d      	add	r5, r3
 80133b6:	ed14 0a01 	vldr	s0, [r4, #-4]
 80133ba:	1f26      	subs	r6, r4, #4
 80133bc:	eeb1 0a40 	vneg.f32	s0, s0
 80133c0:	f003 f956 	bl	8016670 <expf>
 80133c4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80133c8:	f1a4 0308 	sub.w	r3, r4, #8
 80133cc:	4634      	mov	r4, r6
 80133ce:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80133d2:	ed65 7a01 	vstmdb	r5!, {s15}
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d9ec      	bls.n	80133b6 <nl_func_sigmoid_array_f32+0x22>
 80133dc:	ecbd 8b02 	vpop	{d8}
 80133e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e2:	bf00      	nop

080133e4 <nl_func_tanh_array_f32>:
 80133e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80133ea:	688c      	ldr	r4, [r1, #8]
 80133ec:	6885      	ldr	r5, [r0, #8]
 80133ee:	4413      	add	r3, r2
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	18e4      	adds	r4, r4, r3
 80133f4:	d210      	bcs.n	8013418 <nl_func_tanh_array_f32+0x34>
 80133f6:	3304      	adds	r3, #4
 80133f8:	460f      	mov	r7, r1
 80133fa:	3404      	adds	r4, #4
 80133fc:	441d      	add	r5, r3
 80133fe:	ed14 0a01 	vldr	s0, [r4, #-4]
 8013402:	1f26      	subs	r6, r4, #4
 8013404:	f003 f89a 	bl	801653c <tanhf>
 8013408:	ed25 0a01 	vstmdb	r5!, {s0}
 801340c:	f1a4 0308 	sub.w	r3, r4, #8
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	4634      	mov	r4, r6
 8013414:	429a      	cmp	r2, r3
 8013416:	d9f2      	bls.n	80133fe <nl_func_tanh_array_f32+0x1a>
 8013418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801341a:	bf00      	nop

0801341c <ai_check_custom_types>:
 801341c:	4b13      	ldr	r3, [pc, #76]	; (801346c <ai_check_custom_types+0x50>)
 801341e:	b082      	sub	sp, #8
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	b118      	cbz	r0, 801342e <ai_check_custom_types+0x12>
 8013426:	7803      	ldrb	r3, [r0, #0]
 8013428:	2b03      	cmp	r3, #3
 801342a:	d002      	beq.n	8013432 <ai_check_custom_types+0x16>
 801342c:	2000      	movs	r0, #0
 801342e:	b002      	add	sp, #8
 8013430:	4770      	bx	lr
 8013432:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013436:	4293      	cmp	r3, r2
 8013438:	d004      	beq.n	8013444 <ai_check_custom_types+0x28>
 801343a:	2001      	movs	r0, #1
 801343c:	f080 0001 	eor.w	r0, r0, #1
 8013440:	b002      	add	sp, #8
 8013442:	4770      	bx	lr
 8013444:	7842      	ldrb	r2, [r0, #1]
 8013446:	3001      	adds	r0, #1
 8013448:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801344c:	429a      	cmp	r2, r3
 801344e:	d1f4      	bne.n	801343a <ai_check_custom_types+0x1e>
 8013450:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013454:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013458:	429a      	cmp	r2, r3
 801345a:	d1ee      	bne.n	801343a <ai_check_custom_types+0x1e>
 801345c:	7842      	ldrb	r2, [r0, #1]
 801345e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013462:	429a      	cmp	r2, r3
 8013464:	d1e9      	bne.n	801343a <ai_check_custom_types+0x1e>
 8013466:	2000      	movs	r0, #0
 8013468:	e7e8      	b.n	801343c <ai_check_custom_types+0x20>
 801346a:	bf00      	nop
 801346c:	08017180 	.word	0x08017180

08013470 <ai_layers_forward_all>:
 8013470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013472:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8013474:	4604      	mov	r4, r0
 8013476:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8013478:	b316      	cbz	r6, 80134c0 <ai_layers_forward_all+0x50>
 801347a:	b1c5      	cbz	r5, 80134ae <ai_layers_forward_all+0x3e>
 801347c:	6545      	str	r5, [r0, #84]	; 0x54
 801347e:	4629      	mov	r1, r5
 8013480:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8013482:	2001      	movs	r0, #1
 8013484:	47b0      	blx	r6
 8013486:	2700      	movs	r7, #0
 8013488:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801348a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801348c:	2002      	movs	r0, #2
 801348e:	47b0      	blx	r6
 8013490:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8013492:	692b      	ldr	r3, [r5, #16]
 8013494:	4628      	mov	r0, r5
 8013496:	4798      	blx	r3
 8013498:	68eb      	ldr	r3, [r5, #12]
 801349a:	2003      	movs	r0, #3
 801349c:	429d      	cmp	r5, r3
 801349e:	4619      	mov	r1, r3
 80134a0:	d006      	beq.n	80134b0 <ai_layers_forward_all+0x40>
 80134a2:	6563      	str	r3, [r4, #84]	; 0x54
 80134a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80134a6:	47b0      	blx	r6
 80134a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80134aa:	2900      	cmp	r1, #0
 80134ac:	d1ed      	bne.n	801348a <ai_layers_forward_all+0x1a>
 80134ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134b0:	2100      	movs	r1, #0
 80134b2:	6567      	str	r7, [r4, #84]	; 0x54
 80134b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80134b6:	47b0      	blx	r6
 80134b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80134ba:	2900      	cmp	r1, #0
 80134bc:	d1e5      	bne.n	801348a <ai_layers_forward_all+0x1a>
 80134be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c0:	2d00      	cmp	r5, #0
 80134c2:	d0f4      	beq.n	80134ae <ai_layers_forward_all+0x3e>
 80134c4:	6545      	str	r5, [r0, #84]	; 0x54
 80134c6:	692b      	ldr	r3, [r5, #16]
 80134c8:	4628      	mov	r0, r5
 80134ca:	4798      	blx	r3
 80134cc:	68eb      	ldr	r3, [r5, #12]
 80134ce:	42ab      	cmp	r3, r5
 80134d0:	461d      	mov	r5, r3
 80134d2:	d003      	beq.n	80134dc <ai_layers_forward_all+0x6c>
 80134d4:	6563      	str	r3, [r4, #84]	; 0x54
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d1f5      	bne.n	80134c6 <ai_layers_forward_all+0x56>
 80134da:	e7e8      	b.n	80134ae <ai_layers_forward_all+0x3e>
 80134dc:	2300      	movs	r3, #0
 80134de:	6563      	str	r3, [r4, #84]	; 0x54
 80134e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134e2:	bf00      	nop

080134e4 <ai_array_to_buffer_fmt>:
 80134e4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80134e8:	2b02      	cmp	r3, #2
 80134ea:	d01f      	beq.n	801352c <ai_array_to_buffer_fmt+0x48>
 80134ec:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80134f0:	4a1b      	ldr	r2, [pc, #108]	; (8013560 <ai_array_to_buffer_fmt+0x7c>)
 80134f2:	4293      	cmp	r3, r2
 80134f4:	d00a      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 80134f6:	dc0d      	bgt.n	8013514 <ai_array_to_buffer_fmt+0x30>
 80134f8:	4a1a      	ldr	r2, [pc, #104]	; (8013564 <ai_array_to_buffer_fmt+0x80>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d006      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 80134fe:	dd1d      	ble.n	801353c <ai_array_to_buffer_fmt+0x58>
 8013500:	4a19      	ldr	r2, [pc, #100]	; (8013568 <ai_array_to_buffer_fmt+0x84>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d002      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 8013506:	320f      	adds	r2, #15
 8013508:	4293      	cmp	r3, r2
 801350a:	d10d      	bne.n	8013528 <ai_array_to_buffer_fmt+0x44>
 801350c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013510:	4318      	orrs	r0, r3
 8013512:	4770      	bx	lr
 8013514:	4a15      	ldr	r2, [pc, #84]	; (801356c <ai_array_to_buffer_fmt+0x88>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d0f8      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 801351a:	dd18      	ble.n	801354e <ai_array_to_buffer_fmt+0x6a>
 801351c:	4a14      	ldr	r2, [pc, #80]	; (8013570 <ai_array_to_buffer_fmt+0x8c>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d0f4      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 8013522:	4a14      	ldr	r2, [pc, #80]	; (8013574 <ai_array_to_buffer_fmt+0x90>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d0f1      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 8013528:	2340      	movs	r3, #64	; 0x40
 801352a:	e7ef      	b.n	801350c <ai_array_to_buffer_fmt+0x28>
 801352c:	4b12      	ldr	r3, [pc, #72]	; (8013578 <ai_array_to_buffer_fmt+0x94>)
 801352e:	4003      	ands	r3, r0
 8013530:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8013534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013538:	4318      	orrs	r0, r3
 801353a:	4770      	bx	lr
 801353c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8013540:	4293      	cmp	r3, r2
 8013542:	d0e3      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 8013544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013548:	4293      	cmp	r3, r2
 801354a:	d0df      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 801354c:	e7ec      	b.n	8013528 <ai_array_to_buffer_fmt+0x44>
 801354e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8013552:	4293      	cmp	r3, r2
 8013554:	d0da      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 8013556:	3207      	adds	r2, #7
 8013558:	4293      	cmp	r3, r2
 801355a:	d0d7      	beq.n	801350c <ai_array_to_buffer_fmt+0x28>
 801355c:	e7e4      	b.n	8013528 <ai_array_to_buffer_fmt+0x44>
 801355e:	bf00      	nop
 8013560:	00840040 	.word	0x00840040
 8013564:	00040447 	.word	0x00040447
 8013568:	00040840 	.word	0x00040840
 801356c:	00840840 	.word	0x00840840
 8013570:	0084084f 	.word	0x0084084f
 8013574:	01821040 	.word	0x01821040
 8013578:	00803fff 	.word	0x00803fff

0801357c <ai_array_get_byte_size>:
 801357c:	b1e1      	cbz	r1, 80135b8 <ai_array_get_byte_size+0x3c>
 801357e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8013582:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8013586:	b410      	push	{r4}
 8013588:	f3c0 3482 	ubfx	r4, r0, #14, #3
 801358c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8013590:	4423      	add	r3, r4
 8013592:	2804      	cmp	r0, #4
 8013594:	fb01 f103 	mul.w	r1, r1, r3
 8013598:	f101 0107 	add.w	r1, r1, #7
 801359c:	f021 0107 	bic.w	r1, r1, #7
 80135a0:	fa21 f102 	lsr.w	r1, r1, r2
 80135a4:	d00a      	beq.n	80135bc <ai_array_get_byte_size+0x40>
 80135a6:	2808      	cmp	r0, #8
 80135a8:	d101      	bne.n	80135ae <ai_array_get_byte_size+0x32>
 80135aa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80135ae:	3107      	adds	r1, #7
 80135b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135b4:	08c8      	lsrs	r0, r1, #3
 80135b6:	4770      	bx	lr
 80135b8:	4608      	mov	r0, r1
 80135ba:	4770      	bx	lr
 80135bc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80135c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135c4:	3107      	adds	r1, #7
 80135c6:	08c8      	lsrs	r0, r1, #3
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop

080135cc <__errno>:
 80135cc:	4b01      	ldr	r3, [pc, #4]	; (80135d4 <__errno+0x8>)
 80135ce:	6818      	ldr	r0, [r3, #0]
 80135d0:	4770      	bx	lr
 80135d2:	bf00      	nop
 80135d4:	20000780 	.word	0x20000780

080135d8 <__libc_init_array>:
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	4d0d      	ldr	r5, [pc, #52]	; (8013610 <__libc_init_array+0x38>)
 80135dc:	4c0d      	ldr	r4, [pc, #52]	; (8013614 <__libc_init_array+0x3c>)
 80135de:	1b64      	subs	r4, r4, r5
 80135e0:	10a4      	asrs	r4, r4, #2
 80135e2:	2600      	movs	r6, #0
 80135e4:	42a6      	cmp	r6, r4
 80135e6:	d109      	bne.n	80135fc <__libc_init_array+0x24>
 80135e8:	4d0b      	ldr	r5, [pc, #44]	; (8013618 <__libc_init_array+0x40>)
 80135ea:	4c0c      	ldr	r4, [pc, #48]	; (801361c <__libc_init_array+0x44>)
 80135ec:	f003 fcf2 	bl	8016fd4 <_init>
 80135f0:	1b64      	subs	r4, r4, r5
 80135f2:	10a4      	asrs	r4, r4, #2
 80135f4:	2600      	movs	r6, #0
 80135f6:	42a6      	cmp	r6, r4
 80135f8:	d105      	bne.n	8013606 <__libc_init_array+0x2e>
 80135fa:	bd70      	pop	{r4, r5, r6, pc}
 80135fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013600:	4798      	blx	r3
 8013602:	3601      	adds	r6, #1
 8013604:	e7ee      	b.n	80135e4 <__libc_init_array+0xc>
 8013606:	f855 3b04 	ldr.w	r3, [r5], #4
 801360a:	4798      	blx	r3
 801360c:	3601      	adds	r6, #1
 801360e:	e7f2      	b.n	80135f6 <__libc_init_array+0x1e>
 8013610:	0801c5d8 	.word	0x0801c5d8
 8013614:	0801c5d8 	.word	0x0801c5d8
 8013618:	0801c5d8 	.word	0x0801c5d8
 801361c:	0801c5dc 	.word	0x0801c5dc

08013620 <malloc>:
 8013620:	4b02      	ldr	r3, [pc, #8]	; (801362c <malloc+0xc>)
 8013622:	4601      	mov	r1, r0
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	f000 b869 	b.w	80136fc <_malloc_r>
 801362a:	bf00      	nop
 801362c:	20000780 	.word	0x20000780

08013630 <memcpy>:
 8013630:	440a      	add	r2, r1
 8013632:	4291      	cmp	r1, r2
 8013634:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013638:	d100      	bne.n	801363c <memcpy+0xc>
 801363a:	4770      	bx	lr
 801363c:	b510      	push	{r4, lr}
 801363e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013646:	4291      	cmp	r1, r2
 8013648:	d1f9      	bne.n	801363e <memcpy+0xe>
 801364a:	bd10      	pop	{r4, pc}

0801364c <memset>:
 801364c:	4402      	add	r2, r0
 801364e:	4603      	mov	r3, r0
 8013650:	4293      	cmp	r3, r2
 8013652:	d100      	bne.n	8013656 <memset+0xa>
 8013654:	4770      	bx	lr
 8013656:	f803 1b01 	strb.w	r1, [r3], #1
 801365a:	e7f9      	b.n	8013650 <memset+0x4>

0801365c <_free_r>:
 801365c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801365e:	2900      	cmp	r1, #0
 8013660:	d048      	beq.n	80136f4 <_free_r+0x98>
 8013662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013666:	9001      	str	r0, [sp, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f1a1 0404 	sub.w	r4, r1, #4
 801366e:	bfb8      	it	lt
 8013670:	18e4      	addlt	r4, r4, r3
 8013672:	f001 ff67 	bl	8015544 <__malloc_lock>
 8013676:	4a20      	ldr	r2, [pc, #128]	; (80136f8 <_free_r+0x9c>)
 8013678:	9801      	ldr	r0, [sp, #4]
 801367a:	6813      	ldr	r3, [r2, #0]
 801367c:	4615      	mov	r5, r2
 801367e:	b933      	cbnz	r3, 801368e <_free_r+0x32>
 8013680:	6063      	str	r3, [r4, #4]
 8013682:	6014      	str	r4, [r2, #0]
 8013684:	b003      	add	sp, #12
 8013686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801368a:	f001 bf61 	b.w	8015550 <__malloc_unlock>
 801368e:	42a3      	cmp	r3, r4
 8013690:	d90b      	bls.n	80136aa <_free_r+0x4e>
 8013692:	6821      	ldr	r1, [r4, #0]
 8013694:	1862      	adds	r2, r4, r1
 8013696:	4293      	cmp	r3, r2
 8013698:	bf04      	itt	eq
 801369a:	681a      	ldreq	r2, [r3, #0]
 801369c:	685b      	ldreq	r3, [r3, #4]
 801369e:	6063      	str	r3, [r4, #4]
 80136a0:	bf04      	itt	eq
 80136a2:	1852      	addeq	r2, r2, r1
 80136a4:	6022      	streq	r2, [r4, #0]
 80136a6:	602c      	str	r4, [r5, #0]
 80136a8:	e7ec      	b.n	8013684 <_free_r+0x28>
 80136aa:	461a      	mov	r2, r3
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	b10b      	cbz	r3, 80136b4 <_free_r+0x58>
 80136b0:	42a3      	cmp	r3, r4
 80136b2:	d9fa      	bls.n	80136aa <_free_r+0x4e>
 80136b4:	6811      	ldr	r1, [r2, #0]
 80136b6:	1855      	adds	r5, r2, r1
 80136b8:	42a5      	cmp	r5, r4
 80136ba:	d10b      	bne.n	80136d4 <_free_r+0x78>
 80136bc:	6824      	ldr	r4, [r4, #0]
 80136be:	4421      	add	r1, r4
 80136c0:	1854      	adds	r4, r2, r1
 80136c2:	42a3      	cmp	r3, r4
 80136c4:	6011      	str	r1, [r2, #0]
 80136c6:	d1dd      	bne.n	8013684 <_free_r+0x28>
 80136c8:	681c      	ldr	r4, [r3, #0]
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	6053      	str	r3, [r2, #4]
 80136ce:	4421      	add	r1, r4
 80136d0:	6011      	str	r1, [r2, #0]
 80136d2:	e7d7      	b.n	8013684 <_free_r+0x28>
 80136d4:	d902      	bls.n	80136dc <_free_r+0x80>
 80136d6:	230c      	movs	r3, #12
 80136d8:	6003      	str	r3, [r0, #0]
 80136da:	e7d3      	b.n	8013684 <_free_r+0x28>
 80136dc:	6825      	ldr	r5, [r4, #0]
 80136de:	1961      	adds	r1, r4, r5
 80136e0:	428b      	cmp	r3, r1
 80136e2:	bf04      	itt	eq
 80136e4:	6819      	ldreq	r1, [r3, #0]
 80136e6:	685b      	ldreq	r3, [r3, #4]
 80136e8:	6063      	str	r3, [r4, #4]
 80136ea:	bf04      	itt	eq
 80136ec:	1949      	addeq	r1, r1, r5
 80136ee:	6021      	streq	r1, [r4, #0]
 80136f0:	6054      	str	r4, [r2, #4]
 80136f2:	e7c7      	b.n	8013684 <_free_r+0x28>
 80136f4:	b003      	add	sp, #12
 80136f6:	bd30      	pop	{r4, r5, pc}
 80136f8:	20000ae8 	.word	0x20000ae8

080136fc <_malloc_r>:
 80136fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fe:	1ccd      	adds	r5, r1, #3
 8013700:	f025 0503 	bic.w	r5, r5, #3
 8013704:	3508      	adds	r5, #8
 8013706:	2d0c      	cmp	r5, #12
 8013708:	bf38      	it	cc
 801370a:	250c      	movcc	r5, #12
 801370c:	2d00      	cmp	r5, #0
 801370e:	4606      	mov	r6, r0
 8013710:	db01      	blt.n	8013716 <_malloc_r+0x1a>
 8013712:	42a9      	cmp	r1, r5
 8013714:	d903      	bls.n	801371e <_malloc_r+0x22>
 8013716:	230c      	movs	r3, #12
 8013718:	6033      	str	r3, [r6, #0]
 801371a:	2000      	movs	r0, #0
 801371c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801371e:	f001 ff11 	bl	8015544 <__malloc_lock>
 8013722:	4921      	ldr	r1, [pc, #132]	; (80137a8 <_malloc_r+0xac>)
 8013724:	680a      	ldr	r2, [r1, #0]
 8013726:	4614      	mov	r4, r2
 8013728:	b99c      	cbnz	r4, 8013752 <_malloc_r+0x56>
 801372a:	4f20      	ldr	r7, [pc, #128]	; (80137ac <_malloc_r+0xb0>)
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	b923      	cbnz	r3, 801373a <_malloc_r+0x3e>
 8013730:	4621      	mov	r1, r4
 8013732:	4630      	mov	r0, r6
 8013734:	f000 fd4a 	bl	80141cc <_sbrk_r>
 8013738:	6038      	str	r0, [r7, #0]
 801373a:	4629      	mov	r1, r5
 801373c:	4630      	mov	r0, r6
 801373e:	f000 fd45 	bl	80141cc <_sbrk_r>
 8013742:	1c43      	adds	r3, r0, #1
 8013744:	d123      	bne.n	801378e <_malloc_r+0x92>
 8013746:	230c      	movs	r3, #12
 8013748:	6033      	str	r3, [r6, #0]
 801374a:	4630      	mov	r0, r6
 801374c:	f001 ff00 	bl	8015550 <__malloc_unlock>
 8013750:	e7e3      	b.n	801371a <_malloc_r+0x1e>
 8013752:	6823      	ldr	r3, [r4, #0]
 8013754:	1b5b      	subs	r3, r3, r5
 8013756:	d417      	bmi.n	8013788 <_malloc_r+0x8c>
 8013758:	2b0b      	cmp	r3, #11
 801375a:	d903      	bls.n	8013764 <_malloc_r+0x68>
 801375c:	6023      	str	r3, [r4, #0]
 801375e:	441c      	add	r4, r3
 8013760:	6025      	str	r5, [r4, #0]
 8013762:	e004      	b.n	801376e <_malloc_r+0x72>
 8013764:	6863      	ldr	r3, [r4, #4]
 8013766:	42a2      	cmp	r2, r4
 8013768:	bf0c      	ite	eq
 801376a:	600b      	streq	r3, [r1, #0]
 801376c:	6053      	strne	r3, [r2, #4]
 801376e:	4630      	mov	r0, r6
 8013770:	f001 feee 	bl	8015550 <__malloc_unlock>
 8013774:	f104 000b 	add.w	r0, r4, #11
 8013778:	1d23      	adds	r3, r4, #4
 801377a:	f020 0007 	bic.w	r0, r0, #7
 801377e:	1ac2      	subs	r2, r0, r3
 8013780:	d0cc      	beq.n	801371c <_malloc_r+0x20>
 8013782:	1a1b      	subs	r3, r3, r0
 8013784:	50a3      	str	r3, [r4, r2]
 8013786:	e7c9      	b.n	801371c <_malloc_r+0x20>
 8013788:	4622      	mov	r2, r4
 801378a:	6864      	ldr	r4, [r4, #4]
 801378c:	e7cc      	b.n	8013728 <_malloc_r+0x2c>
 801378e:	1cc4      	adds	r4, r0, #3
 8013790:	f024 0403 	bic.w	r4, r4, #3
 8013794:	42a0      	cmp	r0, r4
 8013796:	d0e3      	beq.n	8013760 <_malloc_r+0x64>
 8013798:	1a21      	subs	r1, r4, r0
 801379a:	4630      	mov	r0, r6
 801379c:	f000 fd16 	bl	80141cc <_sbrk_r>
 80137a0:	3001      	adds	r0, #1
 80137a2:	d1dd      	bne.n	8013760 <_malloc_r+0x64>
 80137a4:	e7cf      	b.n	8013746 <_malloc_r+0x4a>
 80137a6:	bf00      	nop
 80137a8:	20000ae8 	.word	0x20000ae8
 80137ac:	20000aec 	.word	0x20000aec

080137b0 <__cvt>:
 80137b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137b4:	ec55 4b10 	vmov	r4, r5, d0
 80137b8:	2d00      	cmp	r5, #0
 80137ba:	460e      	mov	r6, r1
 80137bc:	4619      	mov	r1, r3
 80137be:	462b      	mov	r3, r5
 80137c0:	bfbb      	ittet	lt
 80137c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80137c6:	461d      	movlt	r5, r3
 80137c8:	2300      	movge	r3, #0
 80137ca:	232d      	movlt	r3, #45	; 0x2d
 80137cc:	700b      	strb	r3, [r1, #0]
 80137ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80137d4:	4691      	mov	r9, r2
 80137d6:	f023 0820 	bic.w	r8, r3, #32
 80137da:	bfbc      	itt	lt
 80137dc:	4622      	movlt	r2, r4
 80137de:	4614      	movlt	r4, r2
 80137e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80137e4:	d005      	beq.n	80137f2 <__cvt+0x42>
 80137e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80137ea:	d100      	bne.n	80137ee <__cvt+0x3e>
 80137ec:	3601      	adds	r6, #1
 80137ee:	2102      	movs	r1, #2
 80137f0:	e000      	b.n	80137f4 <__cvt+0x44>
 80137f2:	2103      	movs	r1, #3
 80137f4:	ab03      	add	r3, sp, #12
 80137f6:	9301      	str	r3, [sp, #4]
 80137f8:	ab02      	add	r3, sp, #8
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	ec45 4b10 	vmov	d0, r4, r5
 8013800:	4653      	mov	r3, sl
 8013802:	4632      	mov	r2, r6
 8013804:	f000 fe7c 	bl	8014500 <_dtoa_r>
 8013808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801380c:	4607      	mov	r7, r0
 801380e:	d102      	bne.n	8013816 <__cvt+0x66>
 8013810:	f019 0f01 	tst.w	r9, #1
 8013814:	d022      	beq.n	801385c <__cvt+0xac>
 8013816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801381a:	eb07 0906 	add.w	r9, r7, r6
 801381e:	d110      	bne.n	8013842 <__cvt+0x92>
 8013820:	783b      	ldrb	r3, [r7, #0]
 8013822:	2b30      	cmp	r3, #48	; 0x30
 8013824:	d10a      	bne.n	801383c <__cvt+0x8c>
 8013826:	2200      	movs	r2, #0
 8013828:	2300      	movs	r3, #0
 801382a:	4620      	mov	r0, r4
 801382c:	4629      	mov	r1, r5
 801382e:	f7ed f96b 	bl	8000b08 <__aeabi_dcmpeq>
 8013832:	b918      	cbnz	r0, 801383c <__cvt+0x8c>
 8013834:	f1c6 0601 	rsb	r6, r6, #1
 8013838:	f8ca 6000 	str.w	r6, [sl]
 801383c:	f8da 3000 	ldr.w	r3, [sl]
 8013840:	4499      	add	r9, r3
 8013842:	2200      	movs	r2, #0
 8013844:	2300      	movs	r3, #0
 8013846:	4620      	mov	r0, r4
 8013848:	4629      	mov	r1, r5
 801384a:	f7ed f95d 	bl	8000b08 <__aeabi_dcmpeq>
 801384e:	b108      	cbz	r0, 8013854 <__cvt+0xa4>
 8013850:	f8cd 900c 	str.w	r9, [sp, #12]
 8013854:	2230      	movs	r2, #48	; 0x30
 8013856:	9b03      	ldr	r3, [sp, #12]
 8013858:	454b      	cmp	r3, r9
 801385a:	d307      	bcc.n	801386c <__cvt+0xbc>
 801385c:	9b03      	ldr	r3, [sp, #12]
 801385e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013860:	1bdb      	subs	r3, r3, r7
 8013862:	4638      	mov	r0, r7
 8013864:	6013      	str	r3, [r2, #0]
 8013866:	b004      	add	sp, #16
 8013868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386c:	1c59      	adds	r1, r3, #1
 801386e:	9103      	str	r1, [sp, #12]
 8013870:	701a      	strb	r2, [r3, #0]
 8013872:	e7f0      	b.n	8013856 <__cvt+0xa6>

08013874 <__exponent>:
 8013874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013876:	4603      	mov	r3, r0
 8013878:	2900      	cmp	r1, #0
 801387a:	bfb8      	it	lt
 801387c:	4249      	neglt	r1, r1
 801387e:	f803 2b02 	strb.w	r2, [r3], #2
 8013882:	bfb4      	ite	lt
 8013884:	222d      	movlt	r2, #45	; 0x2d
 8013886:	222b      	movge	r2, #43	; 0x2b
 8013888:	2909      	cmp	r1, #9
 801388a:	7042      	strb	r2, [r0, #1]
 801388c:	dd2a      	ble.n	80138e4 <__exponent+0x70>
 801388e:	f10d 0407 	add.w	r4, sp, #7
 8013892:	46a4      	mov	ip, r4
 8013894:	270a      	movs	r7, #10
 8013896:	46a6      	mov	lr, r4
 8013898:	460a      	mov	r2, r1
 801389a:	fb91 f6f7 	sdiv	r6, r1, r7
 801389e:	fb07 1516 	mls	r5, r7, r6, r1
 80138a2:	3530      	adds	r5, #48	; 0x30
 80138a4:	2a63      	cmp	r2, #99	; 0x63
 80138a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80138aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80138ae:	4631      	mov	r1, r6
 80138b0:	dcf1      	bgt.n	8013896 <__exponent+0x22>
 80138b2:	3130      	adds	r1, #48	; 0x30
 80138b4:	f1ae 0502 	sub.w	r5, lr, #2
 80138b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80138bc:	1c44      	adds	r4, r0, #1
 80138be:	4629      	mov	r1, r5
 80138c0:	4561      	cmp	r1, ip
 80138c2:	d30a      	bcc.n	80138da <__exponent+0x66>
 80138c4:	f10d 0209 	add.w	r2, sp, #9
 80138c8:	eba2 020e 	sub.w	r2, r2, lr
 80138cc:	4565      	cmp	r5, ip
 80138ce:	bf88      	it	hi
 80138d0:	2200      	movhi	r2, #0
 80138d2:	4413      	add	r3, r2
 80138d4:	1a18      	subs	r0, r3, r0
 80138d6:	b003      	add	sp, #12
 80138d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80138e2:	e7ed      	b.n	80138c0 <__exponent+0x4c>
 80138e4:	2330      	movs	r3, #48	; 0x30
 80138e6:	3130      	adds	r1, #48	; 0x30
 80138e8:	7083      	strb	r3, [r0, #2]
 80138ea:	70c1      	strb	r1, [r0, #3]
 80138ec:	1d03      	adds	r3, r0, #4
 80138ee:	e7f1      	b.n	80138d4 <__exponent+0x60>

080138f0 <_printf_float>:
 80138f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f4:	ed2d 8b02 	vpush	{d8}
 80138f8:	b08d      	sub	sp, #52	; 0x34
 80138fa:	460c      	mov	r4, r1
 80138fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013900:	4616      	mov	r6, r2
 8013902:	461f      	mov	r7, r3
 8013904:	4605      	mov	r5, r0
 8013906:	f001 fdb1 	bl	801546c <_localeconv_r>
 801390a:	f8d0 a000 	ldr.w	sl, [r0]
 801390e:	4650      	mov	r0, sl
 8013910:	f7ec fc7e 	bl	8000210 <strlen>
 8013914:	2300      	movs	r3, #0
 8013916:	930a      	str	r3, [sp, #40]	; 0x28
 8013918:	6823      	ldr	r3, [r4, #0]
 801391a:	9305      	str	r3, [sp, #20]
 801391c:	f8d8 3000 	ldr.w	r3, [r8]
 8013920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013924:	3307      	adds	r3, #7
 8013926:	f023 0307 	bic.w	r3, r3, #7
 801392a:	f103 0208 	add.w	r2, r3, #8
 801392e:	f8c8 2000 	str.w	r2, [r8]
 8013932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801393a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801393e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013942:	9307      	str	r3, [sp, #28]
 8013944:	f8cd 8018 	str.w	r8, [sp, #24]
 8013948:	ee08 0a10 	vmov	s16, r0
 801394c:	4b9f      	ldr	r3, [pc, #636]	; (8013bcc <_printf_float+0x2dc>)
 801394e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013956:	f7ed f909 	bl	8000b6c <__aeabi_dcmpun>
 801395a:	bb88      	cbnz	r0, 80139c0 <_printf_float+0xd0>
 801395c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013960:	4b9a      	ldr	r3, [pc, #616]	; (8013bcc <_printf_float+0x2dc>)
 8013962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013966:	f7ed f8e3 	bl	8000b30 <__aeabi_dcmple>
 801396a:	bb48      	cbnz	r0, 80139c0 <_printf_float+0xd0>
 801396c:	2200      	movs	r2, #0
 801396e:	2300      	movs	r3, #0
 8013970:	4640      	mov	r0, r8
 8013972:	4649      	mov	r1, r9
 8013974:	f7ed f8d2 	bl	8000b1c <__aeabi_dcmplt>
 8013978:	b110      	cbz	r0, 8013980 <_printf_float+0x90>
 801397a:	232d      	movs	r3, #45	; 0x2d
 801397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013980:	4b93      	ldr	r3, [pc, #588]	; (8013bd0 <_printf_float+0x2e0>)
 8013982:	4894      	ldr	r0, [pc, #592]	; (8013bd4 <_printf_float+0x2e4>)
 8013984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013988:	bf94      	ite	ls
 801398a:	4698      	movls	r8, r3
 801398c:	4680      	movhi	r8, r0
 801398e:	2303      	movs	r3, #3
 8013990:	6123      	str	r3, [r4, #16]
 8013992:	9b05      	ldr	r3, [sp, #20]
 8013994:	f023 0204 	bic.w	r2, r3, #4
 8013998:	6022      	str	r2, [r4, #0]
 801399a:	f04f 0900 	mov.w	r9, #0
 801399e:	9700      	str	r7, [sp, #0]
 80139a0:	4633      	mov	r3, r6
 80139a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80139a4:	4621      	mov	r1, r4
 80139a6:	4628      	mov	r0, r5
 80139a8:	f000 f9d8 	bl	8013d5c <_printf_common>
 80139ac:	3001      	adds	r0, #1
 80139ae:	f040 8090 	bne.w	8013ad2 <_printf_float+0x1e2>
 80139b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139b6:	b00d      	add	sp, #52	; 0x34
 80139b8:	ecbd 8b02 	vpop	{d8}
 80139bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c0:	4642      	mov	r2, r8
 80139c2:	464b      	mov	r3, r9
 80139c4:	4640      	mov	r0, r8
 80139c6:	4649      	mov	r1, r9
 80139c8:	f7ed f8d0 	bl	8000b6c <__aeabi_dcmpun>
 80139cc:	b140      	cbz	r0, 80139e0 <_printf_float+0xf0>
 80139ce:	464b      	mov	r3, r9
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	bfbc      	itt	lt
 80139d4:	232d      	movlt	r3, #45	; 0x2d
 80139d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80139da:	487f      	ldr	r0, [pc, #508]	; (8013bd8 <_printf_float+0x2e8>)
 80139dc:	4b7f      	ldr	r3, [pc, #508]	; (8013bdc <_printf_float+0x2ec>)
 80139de:	e7d1      	b.n	8013984 <_printf_float+0x94>
 80139e0:	6863      	ldr	r3, [r4, #4]
 80139e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80139e6:	9206      	str	r2, [sp, #24]
 80139e8:	1c5a      	adds	r2, r3, #1
 80139ea:	d13f      	bne.n	8013a6c <_printf_float+0x17c>
 80139ec:	2306      	movs	r3, #6
 80139ee:	6063      	str	r3, [r4, #4]
 80139f0:	9b05      	ldr	r3, [sp, #20]
 80139f2:	6861      	ldr	r1, [r4, #4]
 80139f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80139f8:	2300      	movs	r3, #0
 80139fa:	9303      	str	r3, [sp, #12]
 80139fc:	ab0a      	add	r3, sp, #40	; 0x28
 80139fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013a02:	ab09      	add	r3, sp, #36	; 0x24
 8013a04:	ec49 8b10 	vmov	d0, r8, r9
 8013a08:	9300      	str	r3, [sp, #0]
 8013a0a:	6022      	str	r2, [r4, #0]
 8013a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013a10:	4628      	mov	r0, r5
 8013a12:	f7ff fecd 	bl	80137b0 <__cvt>
 8013a16:	9b06      	ldr	r3, [sp, #24]
 8013a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a1a:	2b47      	cmp	r3, #71	; 0x47
 8013a1c:	4680      	mov	r8, r0
 8013a1e:	d108      	bne.n	8013a32 <_printf_float+0x142>
 8013a20:	1cc8      	adds	r0, r1, #3
 8013a22:	db02      	blt.n	8013a2a <_printf_float+0x13a>
 8013a24:	6863      	ldr	r3, [r4, #4]
 8013a26:	4299      	cmp	r1, r3
 8013a28:	dd41      	ble.n	8013aae <_printf_float+0x1be>
 8013a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8013a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8013a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013a36:	d820      	bhi.n	8013a7a <_printf_float+0x18a>
 8013a38:	3901      	subs	r1, #1
 8013a3a:	465a      	mov	r2, fp
 8013a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013a40:	9109      	str	r1, [sp, #36]	; 0x24
 8013a42:	f7ff ff17 	bl	8013874 <__exponent>
 8013a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a48:	1813      	adds	r3, r2, r0
 8013a4a:	2a01      	cmp	r2, #1
 8013a4c:	4681      	mov	r9, r0
 8013a4e:	6123      	str	r3, [r4, #16]
 8013a50:	dc02      	bgt.n	8013a58 <_printf_float+0x168>
 8013a52:	6822      	ldr	r2, [r4, #0]
 8013a54:	07d2      	lsls	r2, r2, #31
 8013a56:	d501      	bpl.n	8013a5c <_printf_float+0x16c>
 8013a58:	3301      	adds	r3, #1
 8013a5a:	6123      	str	r3, [r4, #16]
 8013a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d09c      	beq.n	801399e <_printf_float+0xae>
 8013a64:	232d      	movs	r3, #45	; 0x2d
 8013a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a6a:	e798      	b.n	801399e <_printf_float+0xae>
 8013a6c:	9a06      	ldr	r2, [sp, #24]
 8013a6e:	2a47      	cmp	r2, #71	; 0x47
 8013a70:	d1be      	bne.n	80139f0 <_printf_float+0x100>
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1bc      	bne.n	80139f0 <_printf_float+0x100>
 8013a76:	2301      	movs	r3, #1
 8013a78:	e7b9      	b.n	80139ee <_printf_float+0xfe>
 8013a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013a7e:	d118      	bne.n	8013ab2 <_printf_float+0x1c2>
 8013a80:	2900      	cmp	r1, #0
 8013a82:	6863      	ldr	r3, [r4, #4]
 8013a84:	dd0b      	ble.n	8013a9e <_printf_float+0x1ae>
 8013a86:	6121      	str	r1, [r4, #16]
 8013a88:	b913      	cbnz	r3, 8013a90 <_printf_float+0x1a0>
 8013a8a:	6822      	ldr	r2, [r4, #0]
 8013a8c:	07d0      	lsls	r0, r2, #31
 8013a8e:	d502      	bpl.n	8013a96 <_printf_float+0x1a6>
 8013a90:	3301      	adds	r3, #1
 8013a92:	440b      	add	r3, r1
 8013a94:	6123      	str	r3, [r4, #16]
 8013a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8013a98:	f04f 0900 	mov.w	r9, #0
 8013a9c:	e7de      	b.n	8013a5c <_printf_float+0x16c>
 8013a9e:	b913      	cbnz	r3, 8013aa6 <_printf_float+0x1b6>
 8013aa0:	6822      	ldr	r2, [r4, #0]
 8013aa2:	07d2      	lsls	r2, r2, #31
 8013aa4:	d501      	bpl.n	8013aaa <_printf_float+0x1ba>
 8013aa6:	3302      	adds	r3, #2
 8013aa8:	e7f4      	b.n	8013a94 <_printf_float+0x1a4>
 8013aaa:	2301      	movs	r3, #1
 8013aac:	e7f2      	b.n	8013a94 <_printf_float+0x1a4>
 8013aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab4:	4299      	cmp	r1, r3
 8013ab6:	db05      	blt.n	8013ac4 <_printf_float+0x1d4>
 8013ab8:	6823      	ldr	r3, [r4, #0]
 8013aba:	6121      	str	r1, [r4, #16]
 8013abc:	07d8      	lsls	r0, r3, #31
 8013abe:	d5ea      	bpl.n	8013a96 <_printf_float+0x1a6>
 8013ac0:	1c4b      	adds	r3, r1, #1
 8013ac2:	e7e7      	b.n	8013a94 <_printf_float+0x1a4>
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	bfd4      	ite	le
 8013ac8:	f1c1 0202 	rsble	r2, r1, #2
 8013acc:	2201      	movgt	r2, #1
 8013ace:	4413      	add	r3, r2
 8013ad0:	e7e0      	b.n	8013a94 <_printf_float+0x1a4>
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	055a      	lsls	r2, r3, #21
 8013ad6:	d407      	bmi.n	8013ae8 <_printf_float+0x1f8>
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	4642      	mov	r2, r8
 8013adc:	4631      	mov	r1, r6
 8013ade:	4628      	mov	r0, r5
 8013ae0:	47b8      	blx	r7
 8013ae2:	3001      	adds	r0, #1
 8013ae4:	d12c      	bne.n	8013b40 <_printf_float+0x250>
 8013ae6:	e764      	b.n	80139b2 <_printf_float+0xc2>
 8013ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013aec:	f240 80e0 	bls.w	8013cb0 <_printf_float+0x3c0>
 8013af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013af4:	2200      	movs	r2, #0
 8013af6:	2300      	movs	r3, #0
 8013af8:	f7ed f806 	bl	8000b08 <__aeabi_dcmpeq>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d034      	beq.n	8013b6a <_printf_float+0x27a>
 8013b00:	4a37      	ldr	r2, [pc, #220]	; (8013be0 <_printf_float+0x2f0>)
 8013b02:	2301      	movs	r3, #1
 8013b04:	4631      	mov	r1, r6
 8013b06:	4628      	mov	r0, r5
 8013b08:	47b8      	blx	r7
 8013b0a:	3001      	adds	r0, #1
 8013b0c:	f43f af51 	beq.w	80139b2 <_printf_float+0xc2>
 8013b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b14:	429a      	cmp	r2, r3
 8013b16:	db02      	blt.n	8013b1e <_printf_float+0x22e>
 8013b18:	6823      	ldr	r3, [r4, #0]
 8013b1a:	07d8      	lsls	r0, r3, #31
 8013b1c:	d510      	bpl.n	8013b40 <_printf_float+0x250>
 8013b1e:	ee18 3a10 	vmov	r3, s16
 8013b22:	4652      	mov	r2, sl
 8013b24:	4631      	mov	r1, r6
 8013b26:	4628      	mov	r0, r5
 8013b28:	47b8      	blx	r7
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	f43f af41 	beq.w	80139b2 <_printf_float+0xc2>
 8013b30:	f04f 0800 	mov.w	r8, #0
 8013b34:	f104 091a 	add.w	r9, r4, #26
 8013b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b3a:	3b01      	subs	r3, #1
 8013b3c:	4543      	cmp	r3, r8
 8013b3e:	dc09      	bgt.n	8013b54 <_printf_float+0x264>
 8013b40:	6823      	ldr	r3, [r4, #0]
 8013b42:	079b      	lsls	r3, r3, #30
 8013b44:	f100 8105 	bmi.w	8013d52 <_printf_float+0x462>
 8013b48:	68e0      	ldr	r0, [r4, #12]
 8013b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b4c:	4298      	cmp	r0, r3
 8013b4e:	bfb8      	it	lt
 8013b50:	4618      	movlt	r0, r3
 8013b52:	e730      	b.n	80139b6 <_printf_float+0xc6>
 8013b54:	2301      	movs	r3, #1
 8013b56:	464a      	mov	r2, r9
 8013b58:	4631      	mov	r1, r6
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	47b8      	blx	r7
 8013b5e:	3001      	adds	r0, #1
 8013b60:	f43f af27 	beq.w	80139b2 <_printf_float+0xc2>
 8013b64:	f108 0801 	add.w	r8, r8, #1
 8013b68:	e7e6      	b.n	8013b38 <_printf_float+0x248>
 8013b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dc39      	bgt.n	8013be4 <_printf_float+0x2f4>
 8013b70:	4a1b      	ldr	r2, [pc, #108]	; (8013be0 <_printf_float+0x2f0>)
 8013b72:	2301      	movs	r3, #1
 8013b74:	4631      	mov	r1, r6
 8013b76:	4628      	mov	r0, r5
 8013b78:	47b8      	blx	r7
 8013b7a:	3001      	adds	r0, #1
 8013b7c:	f43f af19 	beq.w	80139b2 <_printf_float+0xc2>
 8013b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b84:	4313      	orrs	r3, r2
 8013b86:	d102      	bne.n	8013b8e <_printf_float+0x29e>
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	07d9      	lsls	r1, r3, #31
 8013b8c:	d5d8      	bpl.n	8013b40 <_printf_float+0x250>
 8013b8e:	ee18 3a10 	vmov	r3, s16
 8013b92:	4652      	mov	r2, sl
 8013b94:	4631      	mov	r1, r6
 8013b96:	4628      	mov	r0, r5
 8013b98:	47b8      	blx	r7
 8013b9a:	3001      	adds	r0, #1
 8013b9c:	f43f af09 	beq.w	80139b2 <_printf_float+0xc2>
 8013ba0:	f04f 0900 	mov.w	r9, #0
 8013ba4:	f104 0a1a 	add.w	sl, r4, #26
 8013ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013baa:	425b      	negs	r3, r3
 8013bac:	454b      	cmp	r3, r9
 8013bae:	dc01      	bgt.n	8013bb4 <_printf_float+0x2c4>
 8013bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bb2:	e792      	b.n	8013ada <_printf_float+0x1ea>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	4652      	mov	r2, sl
 8013bb8:	4631      	mov	r1, r6
 8013bba:	4628      	mov	r0, r5
 8013bbc:	47b8      	blx	r7
 8013bbe:	3001      	adds	r0, #1
 8013bc0:	f43f aef7 	beq.w	80139b2 <_printf_float+0xc2>
 8013bc4:	f109 0901 	add.w	r9, r9, #1
 8013bc8:	e7ee      	b.n	8013ba8 <_printf_float+0x2b8>
 8013bca:	bf00      	nop
 8013bcc:	7fefffff 	.word	0x7fefffff
 8013bd0:	0801c1d8 	.word	0x0801c1d8
 8013bd4:	0801c1dc 	.word	0x0801c1dc
 8013bd8:	0801c1e4 	.word	0x0801c1e4
 8013bdc:	0801c1e0 	.word	0x0801c1e0
 8013be0:	0801c1e8 	.word	0x0801c1e8
 8013be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013be8:	429a      	cmp	r2, r3
 8013bea:	bfa8      	it	ge
 8013bec:	461a      	movge	r2, r3
 8013bee:	2a00      	cmp	r2, #0
 8013bf0:	4691      	mov	r9, r2
 8013bf2:	dc37      	bgt.n	8013c64 <_printf_float+0x374>
 8013bf4:	f04f 0b00 	mov.w	fp, #0
 8013bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013bfc:	f104 021a 	add.w	r2, r4, #26
 8013c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c02:	9305      	str	r3, [sp, #20]
 8013c04:	eba3 0309 	sub.w	r3, r3, r9
 8013c08:	455b      	cmp	r3, fp
 8013c0a:	dc33      	bgt.n	8013c74 <_printf_float+0x384>
 8013c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c10:	429a      	cmp	r2, r3
 8013c12:	db3b      	blt.n	8013c8c <_printf_float+0x39c>
 8013c14:	6823      	ldr	r3, [r4, #0]
 8013c16:	07da      	lsls	r2, r3, #31
 8013c18:	d438      	bmi.n	8013c8c <_printf_float+0x39c>
 8013c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c1c:	9b05      	ldr	r3, [sp, #20]
 8013c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	eba2 0901 	sub.w	r9, r2, r1
 8013c26:	4599      	cmp	r9, r3
 8013c28:	bfa8      	it	ge
 8013c2a:	4699      	movge	r9, r3
 8013c2c:	f1b9 0f00 	cmp.w	r9, #0
 8013c30:	dc35      	bgt.n	8013c9e <_printf_float+0x3ae>
 8013c32:	f04f 0800 	mov.w	r8, #0
 8013c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c3a:	f104 0a1a 	add.w	sl, r4, #26
 8013c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c42:	1a9b      	subs	r3, r3, r2
 8013c44:	eba3 0309 	sub.w	r3, r3, r9
 8013c48:	4543      	cmp	r3, r8
 8013c4a:	f77f af79 	ble.w	8013b40 <_printf_float+0x250>
 8013c4e:	2301      	movs	r3, #1
 8013c50:	4652      	mov	r2, sl
 8013c52:	4631      	mov	r1, r6
 8013c54:	4628      	mov	r0, r5
 8013c56:	47b8      	blx	r7
 8013c58:	3001      	adds	r0, #1
 8013c5a:	f43f aeaa 	beq.w	80139b2 <_printf_float+0xc2>
 8013c5e:	f108 0801 	add.w	r8, r8, #1
 8013c62:	e7ec      	b.n	8013c3e <_printf_float+0x34e>
 8013c64:	4613      	mov	r3, r2
 8013c66:	4631      	mov	r1, r6
 8013c68:	4642      	mov	r2, r8
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	47b8      	blx	r7
 8013c6e:	3001      	adds	r0, #1
 8013c70:	d1c0      	bne.n	8013bf4 <_printf_float+0x304>
 8013c72:	e69e      	b.n	80139b2 <_printf_float+0xc2>
 8013c74:	2301      	movs	r3, #1
 8013c76:	4631      	mov	r1, r6
 8013c78:	4628      	mov	r0, r5
 8013c7a:	9205      	str	r2, [sp, #20]
 8013c7c:	47b8      	blx	r7
 8013c7e:	3001      	adds	r0, #1
 8013c80:	f43f ae97 	beq.w	80139b2 <_printf_float+0xc2>
 8013c84:	9a05      	ldr	r2, [sp, #20]
 8013c86:	f10b 0b01 	add.w	fp, fp, #1
 8013c8a:	e7b9      	b.n	8013c00 <_printf_float+0x310>
 8013c8c:	ee18 3a10 	vmov	r3, s16
 8013c90:	4652      	mov	r2, sl
 8013c92:	4631      	mov	r1, r6
 8013c94:	4628      	mov	r0, r5
 8013c96:	47b8      	blx	r7
 8013c98:	3001      	adds	r0, #1
 8013c9a:	d1be      	bne.n	8013c1a <_printf_float+0x32a>
 8013c9c:	e689      	b.n	80139b2 <_printf_float+0xc2>
 8013c9e:	9a05      	ldr	r2, [sp, #20]
 8013ca0:	464b      	mov	r3, r9
 8013ca2:	4442      	add	r2, r8
 8013ca4:	4631      	mov	r1, r6
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	47b8      	blx	r7
 8013caa:	3001      	adds	r0, #1
 8013cac:	d1c1      	bne.n	8013c32 <_printf_float+0x342>
 8013cae:	e680      	b.n	80139b2 <_printf_float+0xc2>
 8013cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cb2:	2a01      	cmp	r2, #1
 8013cb4:	dc01      	bgt.n	8013cba <_printf_float+0x3ca>
 8013cb6:	07db      	lsls	r3, r3, #31
 8013cb8:	d538      	bpl.n	8013d2c <_printf_float+0x43c>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	4642      	mov	r2, r8
 8013cbe:	4631      	mov	r1, r6
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	47b8      	blx	r7
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	f43f ae74 	beq.w	80139b2 <_printf_float+0xc2>
 8013cca:	ee18 3a10 	vmov	r3, s16
 8013cce:	4652      	mov	r2, sl
 8013cd0:	4631      	mov	r1, r6
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	47b8      	blx	r7
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	f43f ae6b 	beq.w	80139b2 <_printf_float+0xc2>
 8013cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f7ec ff10 	bl	8000b08 <__aeabi_dcmpeq>
 8013ce8:	b9d8      	cbnz	r0, 8013d22 <_printf_float+0x432>
 8013cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cec:	f108 0201 	add.w	r2, r8, #1
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	4631      	mov	r1, r6
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	47b8      	blx	r7
 8013cf8:	3001      	adds	r0, #1
 8013cfa:	d10e      	bne.n	8013d1a <_printf_float+0x42a>
 8013cfc:	e659      	b.n	80139b2 <_printf_float+0xc2>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4652      	mov	r2, sl
 8013d02:	4631      	mov	r1, r6
 8013d04:	4628      	mov	r0, r5
 8013d06:	47b8      	blx	r7
 8013d08:	3001      	adds	r0, #1
 8013d0a:	f43f ae52 	beq.w	80139b2 <_printf_float+0xc2>
 8013d0e:	f108 0801 	add.w	r8, r8, #1
 8013d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d14:	3b01      	subs	r3, #1
 8013d16:	4543      	cmp	r3, r8
 8013d18:	dcf1      	bgt.n	8013cfe <_printf_float+0x40e>
 8013d1a:	464b      	mov	r3, r9
 8013d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013d20:	e6dc      	b.n	8013adc <_printf_float+0x1ec>
 8013d22:	f04f 0800 	mov.w	r8, #0
 8013d26:	f104 0a1a 	add.w	sl, r4, #26
 8013d2a:	e7f2      	b.n	8013d12 <_printf_float+0x422>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	4642      	mov	r2, r8
 8013d30:	e7df      	b.n	8013cf2 <_printf_float+0x402>
 8013d32:	2301      	movs	r3, #1
 8013d34:	464a      	mov	r2, r9
 8013d36:	4631      	mov	r1, r6
 8013d38:	4628      	mov	r0, r5
 8013d3a:	47b8      	blx	r7
 8013d3c:	3001      	adds	r0, #1
 8013d3e:	f43f ae38 	beq.w	80139b2 <_printf_float+0xc2>
 8013d42:	f108 0801 	add.w	r8, r8, #1
 8013d46:	68e3      	ldr	r3, [r4, #12]
 8013d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d4a:	1a5b      	subs	r3, r3, r1
 8013d4c:	4543      	cmp	r3, r8
 8013d4e:	dcf0      	bgt.n	8013d32 <_printf_float+0x442>
 8013d50:	e6fa      	b.n	8013b48 <_printf_float+0x258>
 8013d52:	f04f 0800 	mov.w	r8, #0
 8013d56:	f104 0919 	add.w	r9, r4, #25
 8013d5a:	e7f4      	b.n	8013d46 <_printf_float+0x456>

08013d5c <_printf_common>:
 8013d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d60:	4616      	mov	r6, r2
 8013d62:	4699      	mov	r9, r3
 8013d64:	688a      	ldr	r2, [r1, #8]
 8013d66:	690b      	ldr	r3, [r1, #16]
 8013d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	bfb8      	it	lt
 8013d70:	4613      	movlt	r3, r2
 8013d72:	6033      	str	r3, [r6, #0]
 8013d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d78:	4607      	mov	r7, r0
 8013d7a:	460c      	mov	r4, r1
 8013d7c:	b10a      	cbz	r2, 8013d82 <_printf_common+0x26>
 8013d7e:	3301      	adds	r3, #1
 8013d80:	6033      	str	r3, [r6, #0]
 8013d82:	6823      	ldr	r3, [r4, #0]
 8013d84:	0699      	lsls	r1, r3, #26
 8013d86:	bf42      	ittt	mi
 8013d88:	6833      	ldrmi	r3, [r6, #0]
 8013d8a:	3302      	addmi	r3, #2
 8013d8c:	6033      	strmi	r3, [r6, #0]
 8013d8e:	6825      	ldr	r5, [r4, #0]
 8013d90:	f015 0506 	ands.w	r5, r5, #6
 8013d94:	d106      	bne.n	8013da4 <_printf_common+0x48>
 8013d96:	f104 0a19 	add.w	sl, r4, #25
 8013d9a:	68e3      	ldr	r3, [r4, #12]
 8013d9c:	6832      	ldr	r2, [r6, #0]
 8013d9e:	1a9b      	subs	r3, r3, r2
 8013da0:	42ab      	cmp	r3, r5
 8013da2:	dc26      	bgt.n	8013df2 <_printf_common+0x96>
 8013da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013da8:	1e13      	subs	r3, r2, #0
 8013daa:	6822      	ldr	r2, [r4, #0]
 8013dac:	bf18      	it	ne
 8013dae:	2301      	movne	r3, #1
 8013db0:	0692      	lsls	r2, r2, #26
 8013db2:	d42b      	bmi.n	8013e0c <_printf_common+0xb0>
 8013db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013db8:	4649      	mov	r1, r9
 8013dba:	4638      	mov	r0, r7
 8013dbc:	47c0      	blx	r8
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	d01e      	beq.n	8013e00 <_printf_common+0xa4>
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	68e5      	ldr	r5, [r4, #12]
 8013dc6:	6832      	ldr	r2, [r6, #0]
 8013dc8:	f003 0306 	and.w	r3, r3, #6
 8013dcc:	2b04      	cmp	r3, #4
 8013dce:	bf08      	it	eq
 8013dd0:	1aad      	subeq	r5, r5, r2
 8013dd2:	68a3      	ldr	r3, [r4, #8]
 8013dd4:	6922      	ldr	r2, [r4, #16]
 8013dd6:	bf0c      	ite	eq
 8013dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ddc:	2500      	movne	r5, #0
 8013dde:	4293      	cmp	r3, r2
 8013de0:	bfc4      	itt	gt
 8013de2:	1a9b      	subgt	r3, r3, r2
 8013de4:	18ed      	addgt	r5, r5, r3
 8013de6:	2600      	movs	r6, #0
 8013de8:	341a      	adds	r4, #26
 8013dea:	42b5      	cmp	r5, r6
 8013dec:	d11a      	bne.n	8013e24 <_printf_common+0xc8>
 8013dee:	2000      	movs	r0, #0
 8013df0:	e008      	b.n	8013e04 <_printf_common+0xa8>
 8013df2:	2301      	movs	r3, #1
 8013df4:	4652      	mov	r2, sl
 8013df6:	4649      	mov	r1, r9
 8013df8:	4638      	mov	r0, r7
 8013dfa:	47c0      	blx	r8
 8013dfc:	3001      	adds	r0, #1
 8013dfe:	d103      	bne.n	8013e08 <_printf_common+0xac>
 8013e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e08:	3501      	adds	r5, #1
 8013e0a:	e7c6      	b.n	8013d9a <_printf_common+0x3e>
 8013e0c:	18e1      	adds	r1, r4, r3
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	2030      	movs	r0, #48	; 0x30
 8013e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e16:	4422      	add	r2, r4
 8013e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e20:	3302      	adds	r3, #2
 8013e22:	e7c7      	b.n	8013db4 <_printf_common+0x58>
 8013e24:	2301      	movs	r3, #1
 8013e26:	4622      	mov	r2, r4
 8013e28:	4649      	mov	r1, r9
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	47c0      	blx	r8
 8013e2e:	3001      	adds	r0, #1
 8013e30:	d0e6      	beq.n	8013e00 <_printf_common+0xa4>
 8013e32:	3601      	adds	r6, #1
 8013e34:	e7d9      	b.n	8013dea <_printf_common+0x8e>
	...

08013e38 <_printf_i>:
 8013e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e3c:	460c      	mov	r4, r1
 8013e3e:	4691      	mov	r9, r2
 8013e40:	7e27      	ldrb	r7, [r4, #24]
 8013e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013e44:	2f78      	cmp	r7, #120	; 0x78
 8013e46:	4680      	mov	r8, r0
 8013e48:	469a      	mov	sl, r3
 8013e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e4e:	d807      	bhi.n	8013e60 <_printf_i+0x28>
 8013e50:	2f62      	cmp	r7, #98	; 0x62
 8013e52:	d80a      	bhi.n	8013e6a <_printf_i+0x32>
 8013e54:	2f00      	cmp	r7, #0
 8013e56:	f000 80d8 	beq.w	801400a <_printf_i+0x1d2>
 8013e5a:	2f58      	cmp	r7, #88	; 0x58
 8013e5c:	f000 80a3 	beq.w	8013fa6 <_printf_i+0x16e>
 8013e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e68:	e03a      	b.n	8013ee0 <_printf_i+0xa8>
 8013e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e6e:	2b15      	cmp	r3, #21
 8013e70:	d8f6      	bhi.n	8013e60 <_printf_i+0x28>
 8013e72:	a001      	add	r0, pc, #4	; (adr r0, 8013e78 <_printf_i+0x40>)
 8013e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013e78:	08013ed1 	.word	0x08013ed1
 8013e7c:	08013ee5 	.word	0x08013ee5
 8013e80:	08013e61 	.word	0x08013e61
 8013e84:	08013e61 	.word	0x08013e61
 8013e88:	08013e61 	.word	0x08013e61
 8013e8c:	08013e61 	.word	0x08013e61
 8013e90:	08013ee5 	.word	0x08013ee5
 8013e94:	08013e61 	.word	0x08013e61
 8013e98:	08013e61 	.word	0x08013e61
 8013e9c:	08013e61 	.word	0x08013e61
 8013ea0:	08013e61 	.word	0x08013e61
 8013ea4:	08013ff1 	.word	0x08013ff1
 8013ea8:	08013f15 	.word	0x08013f15
 8013eac:	08013fd3 	.word	0x08013fd3
 8013eb0:	08013e61 	.word	0x08013e61
 8013eb4:	08013e61 	.word	0x08013e61
 8013eb8:	08014013 	.word	0x08014013
 8013ebc:	08013e61 	.word	0x08013e61
 8013ec0:	08013f15 	.word	0x08013f15
 8013ec4:	08013e61 	.word	0x08013e61
 8013ec8:	08013e61 	.word	0x08013e61
 8013ecc:	08013fdb 	.word	0x08013fdb
 8013ed0:	680b      	ldr	r3, [r1, #0]
 8013ed2:	1d1a      	adds	r2, r3, #4
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	600a      	str	r2, [r1, #0]
 8013ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e0a3      	b.n	801402c <_printf_i+0x1f4>
 8013ee4:	6825      	ldr	r5, [r4, #0]
 8013ee6:	6808      	ldr	r0, [r1, #0]
 8013ee8:	062e      	lsls	r6, r5, #24
 8013eea:	f100 0304 	add.w	r3, r0, #4
 8013eee:	d50a      	bpl.n	8013f06 <_printf_i+0xce>
 8013ef0:	6805      	ldr	r5, [r0, #0]
 8013ef2:	600b      	str	r3, [r1, #0]
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	da03      	bge.n	8013f00 <_printf_i+0xc8>
 8013ef8:	232d      	movs	r3, #45	; 0x2d
 8013efa:	426d      	negs	r5, r5
 8013efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f00:	485e      	ldr	r0, [pc, #376]	; (801407c <_printf_i+0x244>)
 8013f02:	230a      	movs	r3, #10
 8013f04:	e019      	b.n	8013f3a <_printf_i+0x102>
 8013f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013f0a:	6805      	ldr	r5, [r0, #0]
 8013f0c:	600b      	str	r3, [r1, #0]
 8013f0e:	bf18      	it	ne
 8013f10:	b22d      	sxthne	r5, r5
 8013f12:	e7ef      	b.n	8013ef4 <_printf_i+0xbc>
 8013f14:	680b      	ldr	r3, [r1, #0]
 8013f16:	6825      	ldr	r5, [r4, #0]
 8013f18:	1d18      	adds	r0, r3, #4
 8013f1a:	6008      	str	r0, [r1, #0]
 8013f1c:	0628      	lsls	r0, r5, #24
 8013f1e:	d501      	bpl.n	8013f24 <_printf_i+0xec>
 8013f20:	681d      	ldr	r5, [r3, #0]
 8013f22:	e002      	b.n	8013f2a <_printf_i+0xf2>
 8013f24:	0669      	lsls	r1, r5, #25
 8013f26:	d5fb      	bpl.n	8013f20 <_printf_i+0xe8>
 8013f28:	881d      	ldrh	r5, [r3, #0]
 8013f2a:	4854      	ldr	r0, [pc, #336]	; (801407c <_printf_i+0x244>)
 8013f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8013f2e:	bf0c      	ite	eq
 8013f30:	2308      	moveq	r3, #8
 8013f32:	230a      	movne	r3, #10
 8013f34:	2100      	movs	r1, #0
 8013f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f3a:	6866      	ldr	r6, [r4, #4]
 8013f3c:	60a6      	str	r6, [r4, #8]
 8013f3e:	2e00      	cmp	r6, #0
 8013f40:	bfa2      	ittt	ge
 8013f42:	6821      	ldrge	r1, [r4, #0]
 8013f44:	f021 0104 	bicge.w	r1, r1, #4
 8013f48:	6021      	strge	r1, [r4, #0]
 8013f4a:	b90d      	cbnz	r5, 8013f50 <_printf_i+0x118>
 8013f4c:	2e00      	cmp	r6, #0
 8013f4e:	d04d      	beq.n	8013fec <_printf_i+0x1b4>
 8013f50:	4616      	mov	r6, r2
 8013f52:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f56:	fb03 5711 	mls	r7, r3, r1, r5
 8013f5a:	5dc7      	ldrb	r7, [r0, r7]
 8013f5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f60:	462f      	mov	r7, r5
 8013f62:	42bb      	cmp	r3, r7
 8013f64:	460d      	mov	r5, r1
 8013f66:	d9f4      	bls.n	8013f52 <_printf_i+0x11a>
 8013f68:	2b08      	cmp	r3, #8
 8013f6a:	d10b      	bne.n	8013f84 <_printf_i+0x14c>
 8013f6c:	6823      	ldr	r3, [r4, #0]
 8013f6e:	07df      	lsls	r7, r3, #31
 8013f70:	d508      	bpl.n	8013f84 <_printf_i+0x14c>
 8013f72:	6923      	ldr	r3, [r4, #16]
 8013f74:	6861      	ldr	r1, [r4, #4]
 8013f76:	4299      	cmp	r1, r3
 8013f78:	bfde      	ittt	le
 8013f7a:	2330      	movle	r3, #48	; 0x30
 8013f7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f80:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8013f84:	1b92      	subs	r2, r2, r6
 8013f86:	6122      	str	r2, [r4, #16]
 8013f88:	f8cd a000 	str.w	sl, [sp]
 8013f8c:	464b      	mov	r3, r9
 8013f8e:	aa03      	add	r2, sp, #12
 8013f90:	4621      	mov	r1, r4
 8013f92:	4640      	mov	r0, r8
 8013f94:	f7ff fee2 	bl	8013d5c <_printf_common>
 8013f98:	3001      	adds	r0, #1
 8013f9a:	d14c      	bne.n	8014036 <_printf_i+0x1fe>
 8013f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fa0:	b004      	add	sp, #16
 8013fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa6:	4835      	ldr	r0, [pc, #212]	; (801407c <_printf_i+0x244>)
 8013fa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013fac:	6823      	ldr	r3, [r4, #0]
 8013fae:	680e      	ldr	r6, [r1, #0]
 8013fb0:	061f      	lsls	r7, r3, #24
 8013fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8013fb6:	600e      	str	r6, [r1, #0]
 8013fb8:	d514      	bpl.n	8013fe4 <_printf_i+0x1ac>
 8013fba:	07d9      	lsls	r1, r3, #31
 8013fbc:	bf44      	itt	mi
 8013fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8013fc2:	6023      	strmi	r3, [r4, #0]
 8013fc4:	b91d      	cbnz	r5, 8013fce <_printf_i+0x196>
 8013fc6:	6823      	ldr	r3, [r4, #0]
 8013fc8:	f023 0320 	bic.w	r3, r3, #32
 8013fcc:	6023      	str	r3, [r4, #0]
 8013fce:	2310      	movs	r3, #16
 8013fd0:	e7b0      	b.n	8013f34 <_printf_i+0xfc>
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	f043 0320 	orr.w	r3, r3, #32
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	2378      	movs	r3, #120	; 0x78
 8013fdc:	4828      	ldr	r0, [pc, #160]	; (8014080 <_printf_i+0x248>)
 8013fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013fe2:	e7e3      	b.n	8013fac <_printf_i+0x174>
 8013fe4:	065e      	lsls	r6, r3, #25
 8013fe6:	bf48      	it	mi
 8013fe8:	b2ad      	uxthmi	r5, r5
 8013fea:	e7e6      	b.n	8013fba <_printf_i+0x182>
 8013fec:	4616      	mov	r6, r2
 8013fee:	e7bb      	b.n	8013f68 <_printf_i+0x130>
 8013ff0:	680b      	ldr	r3, [r1, #0]
 8013ff2:	6826      	ldr	r6, [r4, #0]
 8013ff4:	6960      	ldr	r0, [r4, #20]
 8013ff6:	1d1d      	adds	r5, r3, #4
 8013ff8:	600d      	str	r5, [r1, #0]
 8013ffa:	0635      	lsls	r5, r6, #24
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	d501      	bpl.n	8014004 <_printf_i+0x1cc>
 8014000:	6018      	str	r0, [r3, #0]
 8014002:	e002      	b.n	801400a <_printf_i+0x1d2>
 8014004:	0671      	lsls	r1, r6, #25
 8014006:	d5fb      	bpl.n	8014000 <_printf_i+0x1c8>
 8014008:	8018      	strh	r0, [r3, #0]
 801400a:	2300      	movs	r3, #0
 801400c:	6123      	str	r3, [r4, #16]
 801400e:	4616      	mov	r6, r2
 8014010:	e7ba      	b.n	8013f88 <_printf_i+0x150>
 8014012:	680b      	ldr	r3, [r1, #0]
 8014014:	1d1a      	adds	r2, r3, #4
 8014016:	600a      	str	r2, [r1, #0]
 8014018:	681e      	ldr	r6, [r3, #0]
 801401a:	6862      	ldr	r2, [r4, #4]
 801401c:	2100      	movs	r1, #0
 801401e:	4630      	mov	r0, r6
 8014020:	f7ec f8fe 	bl	8000220 <memchr>
 8014024:	b108      	cbz	r0, 801402a <_printf_i+0x1f2>
 8014026:	1b80      	subs	r0, r0, r6
 8014028:	6060      	str	r0, [r4, #4]
 801402a:	6863      	ldr	r3, [r4, #4]
 801402c:	6123      	str	r3, [r4, #16]
 801402e:	2300      	movs	r3, #0
 8014030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014034:	e7a8      	b.n	8013f88 <_printf_i+0x150>
 8014036:	6923      	ldr	r3, [r4, #16]
 8014038:	4632      	mov	r2, r6
 801403a:	4649      	mov	r1, r9
 801403c:	4640      	mov	r0, r8
 801403e:	47d0      	blx	sl
 8014040:	3001      	adds	r0, #1
 8014042:	d0ab      	beq.n	8013f9c <_printf_i+0x164>
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	079b      	lsls	r3, r3, #30
 8014048:	d413      	bmi.n	8014072 <_printf_i+0x23a>
 801404a:	68e0      	ldr	r0, [r4, #12]
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	4298      	cmp	r0, r3
 8014050:	bfb8      	it	lt
 8014052:	4618      	movlt	r0, r3
 8014054:	e7a4      	b.n	8013fa0 <_printf_i+0x168>
 8014056:	2301      	movs	r3, #1
 8014058:	4632      	mov	r2, r6
 801405a:	4649      	mov	r1, r9
 801405c:	4640      	mov	r0, r8
 801405e:	47d0      	blx	sl
 8014060:	3001      	adds	r0, #1
 8014062:	d09b      	beq.n	8013f9c <_printf_i+0x164>
 8014064:	3501      	adds	r5, #1
 8014066:	68e3      	ldr	r3, [r4, #12]
 8014068:	9903      	ldr	r1, [sp, #12]
 801406a:	1a5b      	subs	r3, r3, r1
 801406c:	42ab      	cmp	r3, r5
 801406e:	dcf2      	bgt.n	8014056 <_printf_i+0x21e>
 8014070:	e7eb      	b.n	801404a <_printf_i+0x212>
 8014072:	2500      	movs	r5, #0
 8014074:	f104 0619 	add.w	r6, r4, #25
 8014078:	e7f5      	b.n	8014066 <_printf_i+0x22e>
 801407a:	bf00      	nop
 801407c:	0801c1ea 	.word	0x0801c1ea
 8014080:	0801c1fb 	.word	0x0801c1fb

08014084 <iprintf>:
 8014084:	b40f      	push	{r0, r1, r2, r3}
 8014086:	4b0a      	ldr	r3, [pc, #40]	; (80140b0 <iprintf+0x2c>)
 8014088:	b513      	push	{r0, r1, r4, lr}
 801408a:	681c      	ldr	r4, [r3, #0]
 801408c:	b124      	cbz	r4, 8014098 <iprintf+0x14>
 801408e:	69a3      	ldr	r3, [r4, #24]
 8014090:	b913      	cbnz	r3, 8014098 <iprintf+0x14>
 8014092:	4620      	mov	r0, r4
 8014094:	f001 f93a 	bl	801530c <__sinit>
 8014098:	ab05      	add	r3, sp, #20
 801409a:	9a04      	ldr	r2, [sp, #16]
 801409c:	68a1      	ldr	r1, [r4, #8]
 801409e:	9301      	str	r3, [sp, #4]
 80140a0:	4620      	mov	r0, r4
 80140a2:	f001 ff93 	bl	8015fcc <_vfiprintf_r>
 80140a6:	b002      	add	sp, #8
 80140a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ac:	b004      	add	sp, #16
 80140ae:	4770      	bx	lr
 80140b0:	20000780 	.word	0x20000780

080140b4 <putchar>:
 80140b4:	4b09      	ldr	r3, [pc, #36]	; (80140dc <putchar+0x28>)
 80140b6:	b513      	push	{r0, r1, r4, lr}
 80140b8:	681c      	ldr	r4, [r3, #0]
 80140ba:	4601      	mov	r1, r0
 80140bc:	b134      	cbz	r4, 80140cc <putchar+0x18>
 80140be:	69a3      	ldr	r3, [r4, #24]
 80140c0:	b923      	cbnz	r3, 80140cc <putchar+0x18>
 80140c2:	9001      	str	r0, [sp, #4]
 80140c4:	4620      	mov	r0, r4
 80140c6:	f001 f921 	bl	801530c <__sinit>
 80140ca:	9901      	ldr	r1, [sp, #4]
 80140cc:	68a2      	ldr	r2, [r4, #8]
 80140ce:	4620      	mov	r0, r4
 80140d0:	b002      	add	sp, #8
 80140d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140d6:	f002 b8a9 	b.w	801622c <_putc_r>
 80140da:	bf00      	nop
 80140dc:	20000780 	.word	0x20000780

080140e0 <_puts_r>:
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	460e      	mov	r6, r1
 80140e4:	4605      	mov	r5, r0
 80140e6:	b118      	cbz	r0, 80140f0 <_puts_r+0x10>
 80140e8:	6983      	ldr	r3, [r0, #24]
 80140ea:	b90b      	cbnz	r3, 80140f0 <_puts_r+0x10>
 80140ec:	f001 f90e 	bl	801530c <__sinit>
 80140f0:	69ab      	ldr	r3, [r5, #24]
 80140f2:	68ac      	ldr	r4, [r5, #8]
 80140f4:	b913      	cbnz	r3, 80140fc <_puts_r+0x1c>
 80140f6:	4628      	mov	r0, r5
 80140f8:	f001 f908 	bl	801530c <__sinit>
 80140fc:	4b2c      	ldr	r3, [pc, #176]	; (80141b0 <_puts_r+0xd0>)
 80140fe:	429c      	cmp	r4, r3
 8014100:	d120      	bne.n	8014144 <_puts_r+0x64>
 8014102:	686c      	ldr	r4, [r5, #4]
 8014104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014106:	07db      	lsls	r3, r3, #31
 8014108:	d405      	bmi.n	8014116 <_puts_r+0x36>
 801410a:	89a3      	ldrh	r3, [r4, #12]
 801410c:	0598      	lsls	r0, r3, #22
 801410e:	d402      	bmi.n	8014116 <_puts_r+0x36>
 8014110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014112:	f001 f9b0 	bl	8015476 <__retarget_lock_acquire_recursive>
 8014116:	89a3      	ldrh	r3, [r4, #12]
 8014118:	0719      	lsls	r1, r3, #28
 801411a:	d51d      	bpl.n	8014158 <_puts_r+0x78>
 801411c:	6923      	ldr	r3, [r4, #16]
 801411e:	b1db      	cbz	r3, 8014158 <_puts_r+0x78>
 8014120:	3e01      	subs	r6, #1
 8014122:	68a3      	ldr	r3, [r4, #8]
 8014124:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014128:	3b01      	subs	r3, #1
 801412a:	60a3      	str	r3, [r4, #8]
 801412c:	bb39      	cbnz	r1, 801417e <_puts_r+0x9e>
 801412e:	2b00      	cmp	r3, #0
 8014130:	da38      	bge.n	80141a4 <_puts_r+0xc4>
 8014132:	4622      	mov	r2, r4
 8014134:	210a      	movs	r1, #10
 8014136:	4628      	mov	r0, r5
 8014138:	f000 f878 	bl	801422c <__swbuf_r>
 801413c:	3001      	adds	r0, #1
 801413e:	d011      	beq.n	8014164 <_puts_r+0x84>
 8014140:	250a      	movs	r5, #10
 8014142:	e011      	b.n	8014168 <_puts_r+0x88>
 8014144:	4b1b      	ldr	r3, [pc, #108]	; (80141b4 <_puts_r+0xd4>)
 8014146:	429c      	cmp	r4, r3
 8014148:	d101      	bne.n	801414e <_puts_r+0x6e>
 801414a:	68ac      	ldr	r4, [r5, #8]
 801414c:	e7da      	b.n	8014104 <_puts_r+0x24>
 801414e:	4b1a      	ldr	r3, [pc, #104]	; (80141b8 <_puts_r+0xd8>)
 8014150:	429c      	cmp	r4, r3
 8014152:	bf08      	it	eq
 8014154:	68ec      	ldreq	r4, [r5, #12]
 8014156:	e7d5      	b.n	8014104 <_puts_r+0x24>
 8014158:	4621      	mov	r1, r4
 801415a:	4628      	mov	r0, r5
 801415c:	f000 f8b8 	bl	80142d0 <__swsetup_r>
 8014160:	2800      	cmp	r0, #0
 8014162:	d0dd      	beq.n	8014120 <_puts_r+0x40>
 8014164:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801416a:	07da      	lsls	r2, r3, #31
 801416c:	d405      	bmi.n	801417a <_puts_r+0x9a>
 801416e:	89a3      	ldrh	r3, [r4, #12]
 8014170:	059b      	lsls	r3, r3, #22
 8014172:	d402      	bmi.n	801417a <_puts_r+0x9a>
 8014174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014176:	f001 f97f 	bl	8015478 <__retarget_lock_release_recursive>
 801417a:	4628      	mov	r0, r5
 801417c:	bd70      	pop	{r4, r5, r6, pc}
 801417e:	2b00      	cmp	r3, #0
 8014180:	da04      	bge.n	801418c <_puts_r+0xac>
 8014182:	69a2      	ldr	r2, [r4, #24]
 8014184:	429a      	cmp	r2, r3
 8014186:	dc06      	bgt.n	8014196 <_puts_r+0xb6>
 8014188:	290a      	cmp	r1, #10
 801418a:	d004      	beq.n	8014196 <_puts_r+0xb6>
 801418c:	6823      	ldr	r3, [r4, #0]
 801418e:	1c5a      	adds	r2, r3, #1
 8014190:	6022      	str	r2, [r4, #0]
 8014192:	7019      	strb	r1, [r3, #0]
 8014194:	e7c5      	b.n	8014122 <_puts_r+0x42>
 8014196:	4622      	mov	r2, r4
 8014198:	4628      	mov	r0, r5
 801419a:	f000 f847 	bl	801422c <__swbuf_r>
 801419e:	3001      	adds	r0, #1
 80141a0:	d1bf      	bne.n	8014122 <_puts_r+0x42>
 80141a2:	e7df      	b.n	8014164 <_puts_r+0x84>
 80141a4:	6823      	ldr	r3, [r4, #0]
 80141a6:	250a      	movs	r5, #10
 80141a8:	1c5a      	adds	r2, r3, #1
 80141aa:	6022      	str	r2, [r4, #0]
 80141ac:	701d      	strb	r5, [r3, #0]
 80141ae:	e7db      	b.n	8014168 <_puts_r+0x88>
 80141b0:	0801c2fc 	.word	0x0801c2fc
 80141b4:	0801c31c 	.word	0x0801c31c
 80141b8:	0801c2dc 	.word	0x0801c2dc

080141bc <puts>:
 80141bc:	4b02      	ldr	r3, [pc, #8]	; (80141c8 <puts+0xc>)
 80141be:	4601      	mov	r1, r0
 80141c0:	6818      	ldr	r0, [r3, #0]
 80141c2:	f7ff bf8d 	b.w	80140e0 <_puts_r>
 80141c6:	bf00      	nop
 80141c8:	20000780 	.word	0x20000780

080141cc <_sbrk_r>:
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4d06      	ldr	r5, [pc, #24]	; (80141e8 <_sbrk_r+0x1c>)
 80141d0:	2300      	movs	r3, #0
 80141d2:	4604      	mov	r4, r0
 80141d4:	4608      	mov	r0, r1
 80141d6:	602b      	str	r3, [r5, #0]
 80141d8:	f7ef fe3e 	bl	8003e58 <_sbrk>
 80141dc:	1c43      	adds	r3, r0, #1
 80141de:	d102      	bne.n	80141e6 <_sbrk_r+0x1a>
 80141e0:	682b      	ldr	r3, [r5, #0]
 80141e2:	b103      	cbz	r3, 80141e6 <_sbrk_r+0x1a>
 80141e4:	6023      	str	r3, [r4, #0]
 80141e6:	bd38      	pop	{r3, r4, r5, pc}
 80141e8:	20041cb8 	.word	0x20041cb8

080141ec <siprintf>:
 80141ec:	b40e      	push	{r1, r2, r3}
 80141ee:	b500      	push	{lr}
 80141f0:	b09c      	sub	sp, #112	; 0x70
 80141f2:	ab1d      	add	r3, sp, #116	; 0x74
 80141f4:	9002      	str	r0, [sp, #8]
 80141f6:	9006      	str	r0, [sp, #24]
 80141f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80141fc:	4809      	ldr	r0, [pc, #36]	; (8014224 <siprintf+0x38>)
 80141fe:	9107      	str	r1, [sp, #28]
 8014200:	9104      	str	r1, [sp, #16]
 8014202:	4909      	ldr	r1, [pc, #36]	; (8014228 <siprintf+0x3c>)
 8014204:	f853 2b04 	ldr.w	r2, [r3], #4
 8014208:	9105      	str	r1, [sp, #20]
 801420a:	6800      	ldr	r0, [r0, #0]
 801420c:	9301      	str	r3, [sp, #4]
 801420e:	a902      	add	r1, sp, #8
 8014210:	f001 fdb2 	bl	8015d78 <_svfiprintf_r>
 8014214:	9b02      	ldr	r3, [sp, #8]
 8014216:	2200      	movs	r2, #0
 8014218:	701a      	strb	r2, [r3, #0]
 801421a:	b01c      	add	sp, #112	; 0x70
 801421c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014220:	b003      	add	sp, #12
 8014222:	4770      	bx	lr
 8014224:	20000780 	.word	0x20000780
 8014228:	ffff0208 	.word	0xffff0208

0801422c <__swbuf_r>:
 801422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801422e:	460e      	mov	r6, r1
 8014230:	4614      	mov	r4, r2
 8014232:	4605      	mov	r5, r0
 8014234:	b118      	cbz	r0, 801423e <__swbuf_r+0x12>
 8014236:	6983      	ldr	r3, [r0, #24]
 8014238:	b90b      	cbnz	r3, 801423e <__swbuf_r+0x12>
 801423a:	f001 f867 	bl	801530c <__sinit>
 801423e:	4b21      	ldr	r3, [pc, #132]	; (80142c4 <__swbuf_r+0x98>)
 8014240:	429c      	cmp	r4, r3
 8014242:	d12b      	bne.n	801429c <__swbuf_r+0x70>
 8014244:	686c      	ldr	r4, [r5, #4]
 8014246:	69a3      	ldr	r3, [r4, #24]
 8014248:	60a3      	str	r3, [r4, #8]
 801424a:	89a3      	ldrh	r3, [r4, #12]
 801424c:	071a      	lsls	r2, r3, #28
 801424e:	d52f      	bpl.n	80142b0 <__swbuf_r+0x84>
 8014250:	6923      	ldr	r3, [r4, #16]
 8014252:	b36b      	cbz	r3, 80142b0 <__swbuf_r+0x84>
 8014254:	6923      	ldr	r3, [r4, #16]
 8014256:	6820      	ldr	r0, [r4, #0]
 8014258:	1ac0      	subs	r0, r0, r3
 801425a:	6963      	ldr	r3, [r4, #20]
 801425c:	b2f6      	uxtb	r6, r6
 801425e:	4283      	cmp	r3, r0
 8014260:	4637      	mov	r7, r6
 8014262:	dc04      	bgt.n	801426e <__swbuf_r+0x42>
 8014264:	4621      	mov	r1, r4
 8014266:	4628      	mov	r0, r5
 8014268:	f000 ffbc 	bl	80151e4 <_fflush_r>
 801426c:	bb30      	cbnz	r0, 80142bc <__swbuf_r+0x90>
 801426e:	68a3      	ldr	r3, [r4, #8]
 8014270:	3b01      	subs	r3, #1
 8014272:	60a3      	str	r3, [r4, #8]
 8014274:	6823      	ldr	r3, [r4, #0]
 8014276:	1c5a      	adds	r2, r3, #1
 8014278:	6022      	str	r2, [r4, #0]
 801427a:	701e      	strb	r6, [r3, #0]
 801427c:	6963      	ldr	r3, [r4, #20]
 801427e:	3001      	adds	r0, #1
 8014280:	4283      	cmp	r3, r0
 8014282:	d004      	beq.n	801428e <__swbuf_r+0x62>
 8014284:	89a3      	ldrh	r3, [r4, #12]
 8014286:	07db      	lsls	r3, r3, #31
 8014288:	d506      	bpl.n	8014298 <__swbuf_r+0x6c>
 801428a:	2e0a      	cmp	r6, #10
 801428c:	d104      	bne.n	8014298 <__swbuf_r+0x6c>
 801428e:	4621      	mov	r1, r4
 8014290:	4628      	mov	r0, r5
 8014292:	f000 ffa7 	bl	80151e4 <_fflush_r>
 8014296:	b988      	cbnz	r0, 80142bc <__swbuf_r+0x90>
 8014298:	4638      	mov	r0, r7
 801429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <__swbuf_r+0x9c>)
 801429e:	429c      	cmp	r4, r3
 80142a0:	d101      	bne.n	80142a6 <__swbuf_r+0x7a>
 80142a2:	68ac      	ldr	r4, [r5, #8]
 80142a4:	e7cf      	b.n	8014246 <__swbuf_r+0x1a>
 80142a6:	4b09      	ldr	r3, [pc, #36]	; (80142cc <__swbuf_r+0xa0>)
 80142a8:	429c      	cmp	r4, r3
 80142aa:	bf08      	it	eq
 80142ac:	68ec      	ldreq	r4, [r5, #12]
 80142ae:	e7ca      	b.n	8014246 <__swbuf_r+0x1a>
 80142b0:	4621      	mov	r1, r4
 80142b2:	4628      	mov	r0, r5
 80142b4:	f000 f80c 	bl	80142d0 <__swsetup_r>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d0cb      	beq.n	8014254 <__swbuf_r+0x28>
 80142bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80142c0:	e7ea      	b.n	8014298 <__swbuf_r+0x6c>
 80142c2:	bf00      	nop
 80142c4:	0801c2fc 	.word	0x0801c2fc
 80142c8:	0801c31c 	.word	0x0801c31c
 80142cc:	0801c2dc 	.word	0x0801c2dc

080142d0 <__swsetup_r>:
 80142d0:	4b32      	ldr	r3, [pc, #200]	; (801439c <__swsetup_r+0xcc>)
 80142d2:	b570      	push	{r4, r5, r6, lr}
 80142d4:	681d      	ldr	r5, [r3, #0]
 80142d6:	4606      	mov	r6, r0
 80142d8:	460c      	mov	r4, r1
 80142da:	b125      	cbz	r5, 80142e6 <__swsetup_r+0x16>
 80142dc:	69ab      	ldr	r3, [r5, #24]
 80142de:	b913      	cbnz	r3, 80142e6 <__swsetup_r+0x16>
 80142e0:	4628      	mov	r0, r5
 80142e2:	f001 f813 	bl	801530c <__sinit>
 80142e6:	4b2e      	ldr	r3, [pc, #184]	; (80143a0 <__swsetup_r+0xd0>)
 80142e8:	429c      	cmp	r4, r3
 80142ea:	d10f      	bne.n	801430c <__swsetup_r+0x3c>
 80142ec:	686c      	ldr	r4, [r5, #4]
 80142ee:	89a3      	ldrh	r3, [r4, #12]
 80142f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80142f4:	0719      	lsls	r1, r3, #28
 80142f6:	d42c      	bmi.n	8014352 <__swsetup_r+0x82>
 80142f8:	06dd      	lsls	r5, r3, #27
 80142fa:	d411      	bmi.n	8014320 <__swsetup_r+0x50>
 80142fc:	2309      	movs	r3, #9
 80142fe:	6033      	str	r3, [r6, #0]
 8014300:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014304:	81a3      	strh	r3, [r4, #12]
 8014306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801430a:	e03e      	b.n	801438a <__swsetup_r+0xba>
 801430c:	4b25      	ldr	r3, [pc, #148]	; (80143a4 <__swsetup_r+0xd4>)
 801430e:	429c      	cmp	r4, r3
 8014310:	d101      	bne.n	8014316 <__swsetup_r+0x46>
 8014312:	68ac      	ldr	r4, [r5, #8]
 8014314:	e7eb      	b.n	80142ee <__swsetup_r+0x1e>
 8014316:	4b24      	ldr	r3, [pc, #144]	; (80143a8 <__swsetup_r+0xd8>)
 8014318:	429c      	cmp	r4, r3
 801431a:	bf08      	it	eq
 801431c:	68ec      	ldreq	r4, [r5, #12]
 801431e:	e7e6      	b.n	80142ee <__swsetup_r+0x1e>
 8014320:	0758      	lsls	r0, r3, #29
 8014322:	d512      	bpl.n	801434a <__swsetup_r+0x7a>
 8014324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014326:	b141      	cbz	r1, 801433a <__swsetup_r+0x6a>
 8014328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801432c:	4299      	cmp	r1, r3
 801432e:	d002      	beq.n	8014336 <__swsetup_r+0x66>
 8014330:	4630      	mov	r0, r6
 8014332:	f7ff f993 	bl	801365c <_free_r>
 8014336:	2300      	movs	r3, #0
 8014338:	6363      	str	r3, [r4, #52]	; 0x34
 801433a:	89a3      	ldrh	r3, [r4, #12]
 801433c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014340:	81a3      	strh	r3, [r4, #12]
 8014342:	2300      	movs	r3, #0
 8014344:	6063      	str	r3, [r4, #4]
 8014346:	6923      	ldr	r3, [r4, #16]
 8014348:	6023      	str	r3, [r4, #0]
 801434a:	89a3      	ldrh	r3, [r4, #12]
 801434c:	f043 0308 	orr.w	r3, r3, #8
 8014350:	81a3      	strh	r3, [r4, #12]
 8014352:	6923      	ldr	r3, [r4, #16]
 8014354:	b94b      	cbnz	r3, 801436a <__swsetup_r+0x9a>
 8014356:	89a3      	ldrh	r3, [r4, #12]
 8014358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014360:	d003      	beq.n	801436a <__swsetup_r+0x9a>
 8014362:	4621      	mov	r1, r4
 8014364:	4630      	mov	r0, r6
 8014366:	f001 f8ad 	bl	80154c4 <__smakebuf_r>
 801436a:	89a0      	ldrh	r0, [r4, #12]
 801436c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014370:	f010 0301 	ands.w	r3, r0, #1
 8014374:	d00a      	beq.n	801438c <__swsetup_r+0xbc>
 8014376:	2300      	movs	r3, #0
 8014378:	60a3      	str	r3, [r4, #8]
 801437a:	6963      	ldr	r3, [r4, #20]
 801437c:	425b      	negs	r3, r3
 801437e:	61a3      	str	r3, [r4, #24]
 8014380:	6923      	ldr	r3, [r4, #16]
 8014382:	b943      	cbnz	r3, 8014396 <__swsetup_r+0xc6>
 8014384:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014388:	d1ba      	bne.n	8014300 <__swsetup_r+0x30>
 801438a:	bd70      	pop	{r4, r5, r6, pc}
 801438c:	0781      	lsls	r1, r0, #30
 801438e:	bf58      	it	pl
 8014390:	6963      	ldrpl	r3, [r4, #20]
 8014392:	60a3      	str	r3, [r4, #8]
 8014394:	e7f4      	b.n	8014380 <__swsetup_r+0xb0>
 8014396:	2000      	movs	r0, #0
 8014398:	e7f7      	b.n	801438a <__swsetup_r+0xba>
 801439a:	bf00      	nop
 801439c:	20000780 	.word	0x20000780
 80143a0:	0801c2fc 	.word	0x0801c2fc
 80143a4:	0801c31c 	.word	0x0801c31c
 80143a8:	0801c2dc 	.word	0x0801c2dc

080143ac <__assert_func>:
 80143ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143ae:	4614      	mov	r4, r2
 80143b0:	461a      	mov	r2, r3
 80143b2:	4b09      	ldr	r3, [pc, #36]	; (80143d8 <__assert_func+0x2c>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	4605      	mov	r5, r0
 80143b8:	68d8      	ldr	r0, [r3, #12]
 80143ba:	b14c      	cbz	r4, 80143d0 <__assert_func+0x24>
 80143bc:	4b07      	ldr	r3, [pc, #28]	; (80143dc <__assert_func+0x30>)
 80143be:	9100      	str	r1, [sp, #0]
 80143c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80143c4:	4906      	ldr	r1, [pc, #24]	; (80143e0 <__assert_func+0x34>)
 80143c6:	462b      	mov	r3, r5
 80143c8:	f001 f81e 	bl	8015408 <fiprintf>
 80143cc:	f001 ffcc 	bl	8016368 <abort>
 80143d0:	4b04      	ldr	r3, [pc, #16]	; (80143e4 <__assert_func+0x38>)
 80143d2:	461c      	mov	r4, r3
 80143d4:	e7f3      	b.n	80143be <__assert_func+0x12>
 80143d6:	bf00      	nop
 80143d8:	20000780 	.word	0x20000780
 80143dc:	0801c20c 	.word	0x0801c20c
 80143e0:	0801c219 	.word	0x0801c219
 80143e4:	0801c247 	.word	0x0801c247

080143e8 <quorem>:
 80143e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	6903      	ldr	r3, [r0, #16]
 80143ee:	690c      	ldr	r4, [r1, #16]
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	4607      	mov	r7, r0
 80143f4:	f2c0 8081 	blt.w	80144fa <quorem+0x112>
 80143f8:	3c01      	subs	r4, #1
 80143fa:	f101 0814 	add.w	r8, r1, #20
 80143fe:	f100 0514 	add.w	r5, r0, #20
 8014402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014406:	9301      	str	r3, [sp, #4]
 8014408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801440c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014410:	3301      	adds	r3, #1
 8014412:	429a      	cmp	r2, r3
 8014414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801441c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014420:	d331      	bcc.n	8014486 <quorem+0x9e>
 8014422:	f04f 0e00 	mov.w	lr, #0
 8014426:	4640      	mov	r0, r8
 8014428:	46ac      	mov	ip, r5
 801442a:	46f2      	mov	sl, lr
 801442c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014430:	b293      	uxth	r3, r2
 8014432:	fb06 e303 	mla	r3, r6, r3, lr
 8014436:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801443a:	b29b      	uxth	r3, r3
 801443c:	ebaa 0303 	sub.w	r3, sl, r3
 8014440:	0c12      	lsrs	r2, r2, #16
 8014442:	f8dc a000 	ldr.w	sl, [ip]
 8014446:	fb06 e202 	mla	r2, r6, r2, lr
 801444a:	fa13 f38a 	uxtah	r3, r3, sl
 801444e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014452:	fa1f fa82 	uxth.w	sl, r2
 8014456:	f8dc 2000 	ldr.w	r2, [ip]
 801445a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801445e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014462:	b29b      	uxth	r3, r3
 8014464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014468:	4581      	cmp	r9, r0
 801446a:	f84c 3b04 	str.w	r3, [ip], #4
 801446e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014472:	d2db      	bcs.n	801442c <quorem+0x44>
 8014474:	f855 300b 	ldr.w	r3, [r5, fp]
 8014478:	b92b      	cbnz	r3, 8014486 <quorem+0x9e>
 801447a:	9b01      	ldr	r3, [sp, #4]
 801447c:	3b04      	subs	r3, #4
 801447e:	429d      	cmp	r5, r3
 8014480:	461a      	mov	r2, r3
 8014482:	d32e      	bcc.n	80144e2 <quorem+0xfa>
 8014484:	613c      	str	r4, [r7, #16]
 8014486:	4638      	mov	r0, r7
 8014488:	f001 fae6 	bl	8015a58 <__mcmp>
 801448c:	2800      	cmp	r0, #0
 801448e:	db24      	blt.n	80144da <quorem+0xf2>
 8014490:	3601      	adds	r6, #1
 8014492:	4628      	mov	r0, r5
 8014494:	f04f 0c00 	mov.w	ip, #0
 8014498:	f858 2b04 	ldr.w	r2, [r8], #4
 801449c:	f8d0 e000 	ldr.w	lr, [r0]
 80144a0:	b293      	uxth	r3, r2
 80144a2:	ebac 0303 	sub.w	r3, ip, r3
 80144a6:	0c12      	lsrs	r2, r2, #16
 80144a8:	fa13 f38e 	uxtah	r3, r3, lr
 80144ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ba:	45c1      	cmp	r9, r8
 80144bc:	f840 3b04 	str.w	r3, [r0], #4
 80144c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144c4:	d2e8      	bcs.n	8014498 <quorem+0xb0>
 80144c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80144ce:	b922      	cbnz	r2, 80144da <quorem+0xf2>
 80144d0:	3b04      	subs	r3, #4
 80144d2:	429d      	cmp	r5, r3
 80144d4:	461a      	mov	r2, r3
 80144d6:	d30a      	bcc.n	80144ee <quorem+0x106>
 80144d8:	613c      	str	r4, [r7, #16]
 80144da:	4630      	mov	r0, r6
 80144dc:	b003      	add	sp, #12
 80144de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e2:	6812      	ldr	r2, [r2, #0]
 80144e4:	3b04      	subs	r3, #4
 80144e6:	2a00      	cmp	r2, #0
 80144e8:	d1cc      	bne.n	8014484 <quorem+0x9c>
 80144ea:	3c01      	subs	r4, #1
 80144ec:	e7c7      	b.n	801447e <quorem+0x96>
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	3b04      	subs	r3, #4
 80144f2:	2a00      	cmp	r2, #0
 80144f4:	d1f0      	bne.n	80144d8 <quorem+0xf0>
 80144f6:	3c01      	subs	r4, #1
 80144f8:	e7eb      	b.n	80144d2 <quorem+0xea>
 80144fa:	2000      	movs	r0, #0
 80144fc:	e7ee      	b.n	80144dc <quorem+0xf4>
	...

08014500 <_dtoa_r>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	ed2d 8b02 	vpush	{d8}
 8014508:	ec57 6b10 	vmov	r6, r7, d0
 801450c:	b095      	sub	sp, #84	; 0x54
 801450e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014514:	9105      	str	r1, [sp, #20]
 8014516:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801451a:	4604      	mov	r4, r0
 801451c:	9209      	str	r2, [sp, #36]	; 0x24
 801451e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014520:	b975      	cbnz	r5, 8014540 <_dtoa_r+0x40>
 8014522:	2010      	movs	r0, #16
 8014524:	f7ff f87c 	bl	8013620 <malloc>
 8014528:	4602      	mov	r2, r0
 801452a:	6260      	str	r0, [r4, #36]	; 0x24
 801452c:	b920      	cbnz	r0, 8014538 <_dtoa_r+0x38>
 801452e:	4bb2      	ldr	r3, [pc, #712]	; (80147f8 <_dtoa_r+0x2f8>)
 8014530:	21ea      	movs	r1, #234	; 0xea
 8014532:	48b2      	ldr	r0, [pc, #712]	; (80147fc <_dtoa_r+0x2fc>)
 8014534:	f7ff ff3a 	bl	80143ac <__assert_func>
 8014538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801453c:	6005      	str	r5, [r0, #0]
 801453e:	60c5      	str	r5, [r0, #12]
 8014540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014542:	6819      	ldr	r1, [r3, #0]
 8014544:	b151      	cbz	r1, 801455c <_dtoa_r+0x5c>
 8014546:	685a      	ldr	r2, [r3, #4]
 8014548:	604a      	str	r2, [r1, #4]
 801454a:	2301      	movs	r3, #1
 801454c:	4093      	lsls	r3, r2
 801454e:	608b      	str	r3, [r1, #8]
 8014550:	4620      	mov	r0, r4
 8014552:	f001 f843 	bl	80155dc <_Bfree>
 8014556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014558:	2200      	movs	r2, #0
 801455a:	601a      	str	r2, [r3, #0]
 801455c:	1e3b      	subs	r3, r7, #0
 801455e:	bfb9      	ittee	lt
 8014560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014564:	9303      	strlt	r3, [sp, #12]
 8014566:	2300      	movge	r3, #0
 8014568:	f8c8 3000 	strge.w	r3, [r8]
 801456c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014570:	4ba3      	ldr	r3, [pc, #652]	; (8014800 <_dtoa_r+0x300>)
 8014572:	bfbc      	itt	lt
 8014574:	2201      	movlt	r2, #1
 8014576:	f8c8 2000 	strlt.w	r2, [r8]
 801457a:	ea33 0309 	bics.w	r3, r3, r9
 801457e:	d11b      	bne.n	80145b8 <_dtoa_r+0xb8>
 8014580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014582:	f242 730f 	movw	r3, #9999	; 0x270f
 8014586:	6013      	str	r3, [r2, #0]
 8014588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801458c:	4333      	orrs	r3, r6
 801458e:	f000 857a 	beq.w	8015086 <_dtoa_r+0xb86>
 8014592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014594:	b963      	cbnz	r3, 80145b0 <_dtoa_r+0xb0>
 8014596:	4b9b      	ldr	r3, [pc, #620]	; (8014804 <_dtoa_r+0x304>)
 8014598:	e024      	b.n	80145e4 <_dtoa_r+0xe4>
 801459a:	4b9b      	ldr	r3, [pc, #620]	; (8014808 <_dtoa_r+0x308>)
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	3308      	adds	r3, #8
 80145a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145a2:	6013      	str	r3, [r2, #0]
 80145a4:	9800      	ldr	r0, [sp, #0]
 80145a6:	b015      	add	sp, #84	; 0x54
 80145a8:	ecbd 8b02 	vpop	{d8}
 80145ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b0:	4b94      	ldr	r3, [pc, #592]	; (8014804 <_dtoa_r+0x304>)
 80145b2:	9300      	str	r3, [sp, #0]
 80145b4:	3303      	adds	r3, #3
 80145b6:	e7f3      	b.n	80145a0 <_dtoa_r+0xa0>
 80145b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145bc:	2200      	movs	r2, #0
 80145be:	ec51 0b17 	vmov	r0, r1, d7
 80145c2:	2300      	movs	r3, #0
 80145c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80145c8:	f7ec fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80145cc:	4680      	mov	r8, r0
 80145ce:	b158      	cbz	r0, 80145e8 <_dtoa_r+0xe8>
 80145d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145d2:	2301      	movs	r3, #1
 80145d4:	6013      	str	r3, [r2, #0]
 80145d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f000 8551 	beq.w	8015080 <_dtoa_r+0xb80>
 80145de:	488b      	ldr	r0, [pc, #556]	; (801480c <_dtoa_r+0x30c>)
 80145e0:	6018      	str	r0, [r3, #0]
 80145e2:	1e43      	subs	r3, r0, #1
 80145e4:	9300      	str	r3, [sp, #0]
 80145e6:	e7dd      	b.n	80145a4 <_dtoa_r+0xa4>
 80145e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80145ec:	aa12      	add	r2, sp, #72	; 0x48
 80145ee:	a913      	add	r1, sp, #76	; 0x4c
 80145f0:	4620      	mov	r0, r4
 80145f2:	f001 fad5 	bl	8015ba0 <__d2b>
 80145f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80145fa:	4683      	mov	fp, r0
 80145fc:	2d00      	cmp	r5, #0
 80145fe:	d07c      	beq.n	80146fa <_dtoa_r+0x1fa>
 8014600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014602:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801460a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801460e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801461a:	4b7d      	ldr	r3, [pc, #500]	; (8014810 <_dtoa_r+0x310>)
 801461c:	2200      	movs	r2, #0
 801461e:	4630      	mov	r0, r6
 8014620:	4639      	mov	r1, r7
 8014622:	f7eb fe51 	bl	80002c8 <__aeabi_dsub>
 8014626:	a36e      	add	r3, pc, #440	; (adr r3, 80147e0 <_dtoa_r+0x2e0>)
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	f7ec f804 	bl	8000638 <__aeabi_dmul>
 8014630:	a36d      	add	r3, pc, #436	; (adr r3, 80147e8 <_dtoa_r+0x2e8>)
 8014632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014636:	f7eb fe49 	bl	80002cc <__adddf3>
 801463a:	4606      	mov	r6, r0
 801463c:	4628      	mov	r0, r5
 801463e:	460f      	mov	r7, r1
 8014640:	f7eb ff90 	bl	8000564 <__aeabi_i2d>
 8014644:	a36a      	add	r3, pc, #424	; (adr r3, 80147f0 <_dtoa_r+0x2f0>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	f7eb fff5 	bl	8000638 <__aeabi_dmul>
 801464e:	4602      	mov	r2, r0
 8014650:	460b      	mov	r3, r1
 8014652:	4630      	mov	r0, r6
 8014654:	4639      	mov	r1, r7
 8014656:	f7eb fe39 	bl	80002cc <__adddf3>
 801465a:	4606      	mov	r6, r0
 801465c:	460f      	mov	r7, r1
 801465e:	f7ec fa9b 	bl	8000b98 <__aeabi_d2iz>
 8014662:	2200      	movs	r2, #0
 8014664:	4682      	mov	sl, r0
 8014666:	2300      	movs	r3, #0
 8014668:	4630      	mov	r0, r6
 801466a:	4639      	mov	r1, r7
 801466c:	f7ec fa56 	bl	8000b1c <__aeabi_dcmplt>
 8014670:	b148      	cbz	r0, 8014686 <_dtoa_r+0x186>
 8014672:	4650      	mov	r0, sl
 8014674:	f7eb ff76 	bl	8000564 <__aeabi_i2d>
 8014678:	4632      	mov	r2, r6
 801467a:	463b      	mov	r3, r7
 801467c:	f7ec fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8014680:	b908      	cbnz	r0, 8014686 <_dtoa_r+0x186>
 8014682:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014686:	f1ba 0f16 	cmp.w	sl, #22
 801468a:	d854      	bhi.n	8014736 <_dtoa_r+0x236>
 801468c:	4b61      	ldr	r3, [pc, #388]	; (8014814 <_dtoa_r+0x314>)
 801468e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801469a:	f7ec fa3f 	bl	8000b1c <__aeabi_dcmplt>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d04b      	beq.n	801473a <_dtoa_r+0x23a>
 80146a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80146a6:	2300      	movs	r3, #0
 80146a8:	930e      	str	r3, [sp, #56]	; 0x38
 80146aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80146ac:	1b5d      	subs	r5, r3, r5
 80146ae:	1e6b      	subs	r3, r5, #1
 80146b0:	9304      	str	r3, [sp, #16]
 80146b2:	bf43      	ittte	mi
 80146b4:	2300      	movmi	r3, #0
 80146b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80146ba:	9304      	strmi	r3, [sp, #16]
 80146bc:	f04f 0800 	movpl.w	r8, #0
 80146c0:	f1ba 0f00 	cmp.w	sl, #0
 80146c4:	db3b      	blt.n	801473e <_dtoa_r+0x23e>
 80146c6:	9b04      	ldr	r3, [sp, #16]
 80146c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80146cc:	4453      	add	r3, sl
 80146ce:	9304      	str	r3, [sp, #16]
 80146d0:	2300      	movs	r3, #0
 80146d2:	9306      	str	r3, [sp, #24]
 80146d4:	9b05      	ldr	r3, [sp, #20]
 80146d6:	2b09      	cmp	r3, #9
 80146d8:	d869      	bhi.n	80147ae <_dtoa_r+0x2ae>
 80146da:	2b05      	cmp	r3, #5
 80146dc:	bfc4      	itt	gt
 80146de:	3b04      	subgt	r3, #4
 80146e0:	9305      	strgt	r3, [sp, #20]
 80146e2:	9b05      	ldr	r3, [sp, #20]
 80146e4:	f1a3 0302 	sub.w	r3, r3, #2
 80146e8:	bfcc      	ite	gt
 80146ea:	2500      	movgt	r5, #0
 80146ec:	2501      	movle	r5, #1
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	d869      	bhi.n	80147c6 <_dtoa_r+0x2c6>
 80146f2:	e8df f003 	tbb	[pc, r3]
 80146f6:	4e2c      	.short	0x4e2c
 80146f8:	5a4c      	.short	0x5a4c
 80146fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80146fe:	441d      	add	r5, r3
 8014700:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014704:	2b20      	cmp	r3, #32
 8014706:	bfc1      	itttt	gt
 8014708:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801470c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014710:	fa09 f303 	lslgt.w	r3, r9, r3
 8014714:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014718:	bfda      	itte	le
 801471a:	f1c3 0320 	rsble	r3, r3, #32
 801471e:	fa06 f003 	lslle.w	r0, r6, r3
 8014722:	4318      	orrgt	r0, r3
 8014724:	f7eb ff0e 	bl	8000544 <__aeabi_ui2d>
 8014728:	2301      	movs	r3, #1
 801472a:	4606      	mov	r6, r0
 801472c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014730:	3d01      	subs	r5, #1
 8014732:	9310      	str	r3, [sp, #64]	; 0x40
 8014734:	e771      	b.n	801461a <_dtoa_r+0x11a>
 8014736:	2301      	movs	r3, #1
 8014738:	e7b6      	b.n	80146a8 <_dtoa_r+0x1a8>
 801473a:	900e      	str	r0, [sp, #56]	; 0x38
 801473c:	e7b5      	b.n	80146aa <_dtoa_r+0x1aa>
 801473e:	f1ca 0300 	rsb	r3, sl, #0
 8014742:	9306      	str	r3, [sp, #24]
 8014744:	2300      	movs	r3, #0
 8014746:	eba8 080a 	sub.w	r8, r8, sl
 801474a:	930d      	str	r3, [sp, #52]	; 0x34
 801474c:	e7c2      	b.n	80146d4 <_dtoa_r+0x1d4>
 801474e:	2300      	movs	r3, #0
 8014750:	9308      	str	r3, [sp, #32]
 8014752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014754:	2b00      	cmp	r3, #0
 8014756:	dc39      	bgt.n	80147cc <_dtoa_r+0x2cc>
 8014758:	f04f 0901 	mov.w	r9, #1
 801475c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014760:	464b      	mov	r3, r9
 8014762:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014768:	2200      	movs	r2, #0
 801476a:	6042      	str	r2, [r0, #4]
 801476c:	2204      	movs	r2, #4
 801476e:	f102 0614 	add.w	r6, r2, #20
 8014772:	429e      	cmp	r6, r3
 8014774:	6841      	ldr	r1, [r0, #4]
 8014776:	d92f      	bls.n	80147d8 <_dtoa_r+0x2d8>
 8014778:	4620      	mov	r0, r4
 801477a:	f000 feef 	bl	801555c <_Balloc>
 801477e:	9000      	str	r0, [sp, #0]
 8014780:	2800      	cmp	r0, #0
 8014782:	d14b      	bne.n	801481c <_dtoa_r+0x31c>
 8014784:	4b24      	ldr	r3, [pc, #144]	; (8014818 <_dtoa_r+0x318>)
 8014786:	4602      	mov	r2, r0
 8014788:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801478c:	e6d1      	b.n	8014532 <_dtoa_r+0x32>
 801478e:	2301      	movs	r3, #1
 8014790:	e7de      	b.n	8014750 <_dtoa_r+0x250>
 8014792:	2300      	movs	r3, #0
 8014794:	9308      	str	r3, [sp, #32]
 8014796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014798:	eb0a 0903 	add.w	r9, sl, r3
 801479c:	f109 0301 	add.w	r3, r9, #1
 80147a0:	2b01      	cmp	r3, #1
 80147a2:	9301      	str	r3, [sp, #4]
 80147a4:	bfb8      	it	lt
 80147a6:	2301      	movlt	r3, #1
 80147a8:	e7dd      	b.n	8014766 <_dtoa_r+0x266>
 80147aa:	2301      	movs	r3, #1
 80147ac:	e7f2      	b.n	8014794 <_dtoa_r+0x294>
 80147ae:	2501      	movs	r5, #1
 80147b0:	2300      	movs	r3, #0
 80147b2:	9305      	str	r3, [sp, #20]
 80147b4:	9508      	str	r5, [sp, #32]
 80147b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80147ba:	2200      	movs	r2, #0
 80147bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80147c0:	2312      	movs	r3, #18
 80147c2:	9209      	str	r2, [sp, #36]	; 0x24
 80147c4:	e7cf      	b.n	8014766 <_dtoa_r+0x266>
 80147c6:	2301      	movs	r3, #1
 80147c8:	9308      	str	r3, [sp, #32]
 80147ca:	e7f4      	b.n	80147b6 <_dtoa_r+0x2b6>
 80147cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80147d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80147d4:	464b      	mov	r3, r9
 80147d6:	e7c6      	b.n	8014766 <_dtoa_r+0x266>
 80147d8:	3101      	adds	r1, #1
 80147da:	6041      	str	r1, [r0, #4]
 80147dc:	0052      	lsls	r2, r2, #1
 80147de:	e7c6      	b.n	801476e <_dtoa_r+0x26e>
 80147e0:	636f4361 	.word	0x636f4361
 80147e4:	3fd287a7 	.word	0x3fd287a7
 80147e8:	8b60c8b3 	.word	0x8b60c8b3
 80147ec:	3fc68a28 	.word	0x3fc68a28
 80147f0:	509f79fb 	.word	0x509f79fb
 80147f4:	3fd34413 	.word	0x3fd34413
 80147f8:	0801c255 	.word	0x0801c255
 80147fc:	0801c26c 	.word	0x0801c26c
 8014800:	7ff00000 	.word	0x7ff00000
 8014804:	0801c251 	.word	0x0801c251
 8014808:	0801c248 	.word	0x0801c248
 801480c:	0801c1e9 	.word	0x0801c1e9
 8014810:	3ff80000 	.word	0x3ff80000
 8014814:	0801c3c8 	.word	0x0801c3c8
 8014818:	0801c2cb 	.word	0x0801c2cb
 801481c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801481e:	9a00      	ldr	r2, [sp, #0]
 8014820:	601a      	str	r2, [r3, #0]
 8014822:	9b01      	ldr	r3, [sp, #4]
 8014824:	2b0e      	cmp	r3, #14
 8014826:	f200 80ad 	bhi.w	8014984 <_dtoa_r+0x484>
 801482a:	2d00      	cmp	r5, #0
 801482c:	f000 80aa 	beq.w	8014984 <_dtoa_r+0x484>
 8014830:	f1ba 0f00 	cmp.w	sl, #0
 8014834:	dd36      	ble.n	80148a4 <_dtoa_r+0x3a4>
 8014836:	4ac3      	ldr	r2, [pc, #780]	; (8014b44 <_dtoa_r+0x644>)
 8014838:	f00a 030f 	and.w	r3, sl, #15
 801483c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014840:	ed93 7b00 	vldr	d7, [r3]
 8014844:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014848:	ea4f 172a 	mov.w	r7, sl, asr #4
 801484c:	eeb0 8a47 	vmov.f32	s16, s14
 8014850:	eef0 8a67 	vmov.f32	s17, s15
 8014854:	d016      	beq.n	8014884 <_dtoa_r+0x384>
 8014856:	4bbc      	ldr	r3, [pc, #752]	; (8014b48 <_dtoa_r+0x648>)
 8014858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801485c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014860:	f7ec f814 	bl	800088c <__aeabi_ddiv>
 8014864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014868:	f007 070f 	and.w	r7, r7, #15
 801486c:	2503      	movs	r5, #3
 801486e:	4eb6      	ldr	r6, [pc, #728]	; (8014b48 <_dtoa_r+0x648>)
 8014870:	b957      	cbnz	r7, 8014888 <_dtoa_r+0x388>
 8014872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014876:	ec53 2b18 	vmov	r2, r3, d8
 801487a:	f7ec f807 	bl	800088c <__aeabi_ddiv>
 801487e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014882:	e029      	b.n	80148d8 <_dtoa_r+0x3d8>
 8014884:	2502      	movs	r5, #2
 8014886:	e7f2      	b.n	801486e <_dtoa_r+0x36e>
 8014888:	07f9      	lsls	r1, r7, #31
 801488a:	d508      	bpl.n	801489e <_dtoa_r+0x39e>
 801488c:	ec51 0b18 	vmov	r0, r1, d8
 8014890:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014894:	f7eb fed0 	bl	8000638 <__aeabi_dmul>
 8014898:	ec41 0b18 	vmov	d8, r0, r1
 801489c:	3501      	adds	r5, #1
 801489e:	107f      	asrs	r7, r7, #1
 80148a0:	3608      	adds	r6, #8
 80148a2:	e7e5      	b.n	8014870 <_dtoa_r+0x370>
 80148a4:	f000 80a6 	beq.w	80149f4 <_dtoa_r+0x4f4>
 80148a8:	f1ca 0600 	rsb	r6, sl, #0
 80148ac:	4ba5      	ldr	r3, [pc, #660]	; (8014b44 <_dtoa_r+0x644>)
 80148ae:	4fa6      	ldr	r7, [pc, #664]	; (8014b48 <_dtoa_r+0x648>)
 80148b0:	f006 020f 	and.w	r2, r6, #15
 80148b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80148c0:	f7eb feba 	bl	8000638 <__aeabi_dmul>
 80148c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80148c8:	1136      	asrs	r6, r6, #4
 80148ca:	2300      	movs	r3, #0
 80148cc:	2502      	movs	r5, #2
 80148ce:	2e00      	cmp	r6, #0
 80148d0:	f040 8085 	bne.w	80149de <_dtoa_r+0x4de>
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1d2      	bne.n	801487e <_dtoa_r+0x37e>
 80148d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f000 808c 	beq.w	80149f8 <_dtoa_r+0x4f8>
 80148e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80148e4:	4b99      	ldr	r3, [pc, #612]	; (8014b4c <_dtoa_r+0x64c>)
 80148e6:	2200      	movs	r2, #0
 80148e8:	4630      	mov	r0, r6
 80148ea:	4639      	mov	r1, r7
 80148ec:	f7ec f916 	bl	8000b1c <__aeabi_dcmplt>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	f000 8081 	beq.w	80149f8 <_dtoa_r+0x4f8>
 80148f6:	9b01      	ldr	r3, [sp, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d07d      	beq.n	80149f8 <_dtoa_r+0x4f8>
 80148fc:	f1b9 0f00 	cmp.w	r9, #0
 8014900:	dd3c      	ble.n	801497c <_dtoa_r+0x47c>
 8014902:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8014906:	9307      	str	r3, [sp, #28]
 8014908:	2200      	movs	r2, #0
 801490a:	4b91      	ldr	r3, [pc, #580]	; (8014b50 <_dtoa_r+0x650>)
 801490c:	4630      	mov	r0, r6
 801490e:	4639      	mov	r1, r7
 8014910:	f7eb fe92 	bl	8000638 <__aeabi_dmul>
 8014914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014918:	3501      	adds	r5, #1
 801491a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801491e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014922:	4628      	mov	r0, r5
 8014924:	f7eb fe1e 	bl	8000564 <__aeabi_i2d>
 8014928:	4632      	mov	r2, r6
 801492a:	463b      	mov	r3, r7
 801492c:	f7eb fe84 	bl	8000638 <__aeabi_dmul>
 8014930:	4b88      	ldr	r3, [pc, #544]	; (8014b54 <_dtoa_r+0x654>)
 8014932:	2200      	movs	r2, #0
 8014934:	f7eb fcca 	bl	80002cc <__adddf3>
 8014938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801493c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014940:	9303      	str	r3, [sp, #12]
 8014942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014944:	2b00      	cmp	r3, #0
 8014946:	d15c      	bne.n	8014a02 <_dtoa_r+0x502>
 8014948:	4b83      	ldr	r3, [pc, #524]	; (8014b58 <_dtoa_r+0x658>)
 801494a:	2200      	movs	r2, #0
 801494c:	4630      	mov	r0, r6
 801494e:	4639      	mov	r1, r7
 8014950:	f7eb fcba 	bl	80002c8 <__aeabi_dsub>
 8014954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014958:	4606      	mov	r6, r0
 801495a:	460f      	mov	r7, r1
 801495c:	f7ec f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 8014960:	2800      	cmp	r0, #0
 8014962:	f040 8296 	bne.w	8014e92 <_dtoa_r+0x992>
 8014966:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801496a:	4630      	mov	r0, r6
 801496c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014970:	4639      	mov	r1, r7
 8014972:	f7ec f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8014976:	2800      	cmp	r0, #0
 8014978:	f040 8288 	bne.w	8014e8c <_dtoa_r+0x98c>
 801497c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014986:	2b00      	cmp	r3, #0
 8014988:	f2c0 8158 	blt.w	8014c3c <_dtoa_r+0x73c>
 801498c:	f1ba 0f0e 	cmp.w	sl, #14
 8014990:	f300 8154 	bgt.w	8014c3c <_dtoa_r+0x73c>
 8014994:	4b6b      	ldr	r3, [pc, #428]	; (8014b44 <_dtoa_r+0x644>)
 8014996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801499a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f280 80e3 	bge.w	8014b6c <_dtoa_r+0x66c>
 80149a6:	9b01      	ldr	r3, [sp, #4]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f300 80df 	bgt.w	8014b6c <_dtoa_r+0x66c>
 80149ae:	f040 826d 	bne.w	8014e8c <_dtoa_r+0x98c>
 80149b2:	4b69      	ldr	r3, [pc, #420]	; (8014b58 <_dtoa_r+0x658>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	4640      	mov	r0, r8
 80149b8:	4649      	mov	r1, r9
 80149ba:	f7eb fe3d 	bl	8000638 <__aeabi_dmul>
 80149be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149c2:	f7ec f8bf 	bl	8000b44 <__aeabi_dcmpge>
 80149c6:	9e01      	ldr	r6, [sp, #4]
 80149c8:	4637      	mov	r7, r6
 80149ca:	2800      	cmp	r0, #0
 80149cc:	f040 8243 	bne.w	8014e56 <_dtoa_r+0x956>
 80149d0:	9d00      	ldr	r5, [sp, #0]
 80149d2:	2331      	movs	r3, #49	; 0x31
 80149d4:	f805 3b01 	strb.w	r3, [r5], #1
 80149d8:	f10a 0a01 	add.w	sl, sl, #1
 80149dc:	e23f      	b.n	8014e5e <_dtoa_r+0x95e>
 80149de:	07f2      	lsls	r2, r6, #31
 80149e0:	d505      	bpl.n	80149ee <_dtoa_r+0x4ee>
 80149e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149e6:	f7eb fe27 	bl	8000638 <__aeabi_dmul>
 80149ea:	3501      	adds	r5, #1
 80149ec:	2301      	movs	r3, #1
 80149ee:	1076      	asrs	r6, r6, #1
 80149f0:	3708      	adds	r7, #8
 80149f2:	e76c      	b.n	80148ce <_dtoa_r+0x3ce>
 80149f4:	2502      	movs	r5, #2
 80149f6:	e76f      	b.n	80148d8 <_dtoa_r+0x3d8>
 80149f8:	9b01      	ldr	r3, [sp, #4]
 80149fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80149fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014a00:	e78d      	b.n	801491e <_dtoa_r+0x41e>
 8014a02:	9900      	ldr	r1, [sp, #0]
 8014a04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a08:	4b4e      	ldr	r3, [pc, #312]	; (8014b44 <_dtoa_r+0x644>)
 8014a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a0e:	4401      	add	r1, r0
 8014a10:	9102      	str	r1, [sp, #8]
 8014a12:	9908      	ldr	r1, [sp, #32]
 8014a14:	eeb0 8a47 	vmov.f32	s16, s14
 8014a18:	eef0 8a67 	vmov.f32	s17, s15
 8014a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014a24:	2900      	cmp	r1, #0
 8014a26:	d045      	beq.n	8014ab4 <_dtoa_r+0x5b4>
 8014a28:	494c      	ldr	r1, [pc, #304]	; (8014b5c <_dtoa_r+0x65c>)
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	f7eb ff2e 	bl	800088c <__aeabi_ddiv>
 8014a30:	ec53 2b18 	vmov	r2, r3, d8
 8014a34:	f7eb fc48 	bl	80002c8 <__aeabi_dsub>
 8014a38:	9d00      	ldr	r5, [sp, #0]
 8014a3a:	ec41 0b18 	vmov	d8, r0, r1
 8014a3e:	4639      	mov	r1, r7
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ec f8a9 	bl	8000b98 <__aeabi_d2iz>
 8014a46:	900c      	str	r0, [sp, #48]	; 0x30
 8014a48:	f7eb fd8c 	bl	8000564 <__aeabi_i2d>
 8014a4c:	4602      	mov	r2, r0
 8014a4e:	460b      	mov	r3, r1
 8014a50:	4630      	mov	r0, r6
 8014a52:	4639      	mov	r1, r7
 8014a54:	f7eb fc38 	bl	80002c8 <__aeabi_dsub>
 8014a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a5a:	3330      	adds	r3, #48	; 0x30
 8014a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8014a60:	ec53 2b18 	vmov	r2, r3, d8
 8014a64:	4606      	mov	r6, r0
 8014a66:	460f      	mov	r7, r1
 8014a68:	f7ec f858 	bl	8000b1c <__aeabi_dcmplt>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	d165      	bne.n	8014b3c <_dtoa_r+0x63c>
 8014a70:	4632      	mov	r2, r6
 8014a72:	463b      	mov	r3, r7
 8014a74:	4935      	ldr	r1, [pc, #212]	; (8014b4c <_dtoa_r+0x64c>)
 8014a76:	2000      	movs	r0, #0
 8014a78:	f7eb fc26 	bl	80002c8 <__aeabi_dsub>
 8014a7c:	ec53 2b18 	vmov	r2, r3, d8
 8014a80:	f7ec f84c 	bl	8000b1c <__aeabi_dcmplt>
 8014a84:	2800      	cmp	r0, #0
 8014a86:	f040 80b9 	bne.w	8014bfc <_dtoa_r+0x6fc>
 8014a8a:	9b02      	ldr	r3, [sp, #8]
 8014a8c:	429d      	cmp	r5, r3
 8014a8e:	f43f af75 	beq.w	801497c <_dtoa_r+0x47c>
 8014a92:	4b2f      	ldr	r3, [pc, #188]	; (8014b50 <_dtoa_r+0x650>)
 8014a94:	ec51 0b18 	vmov	r0, r1, d8
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f7eb fdcd 	bl	8000638 <__aeabi_dmul>
 8014a9e:	4b2c      	ldr	r3, [pc, #176]	; (8014b50 <_dtoa_r+0x650>)
 8014aa0:	ec41 0b18 	vmov	d8, r0, r1
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	4639      	mov	r1, r7
 8014aaa:	f7eb fdc5 	bl	8000638 <__aeabi_dmul>
 8014aae:	4606      	mov	r6, r0
 8014ab0:	460f      	mov	r7, r1
 8014ab2:	e7c4      	b.n	8014a3e <_dtoa_r+0x53e>
 8014ab4:	ec51 0b17 	vmov	r0, r1, d7
 8014ab8:	f7eb fdbe 	bl	8000638 <__aeabi_dmul>
 8014abc:	9b02      	ldr	r3, [sp, #8]
 8014abe:	9d00      	ldr	r5, [sp, #0]
 8014ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ac2:	ec41 0b18 	vmov	d8, r0, r1
 8014ac6:	4639      	mov	r1, r7
 8014ac8:	4630      	mov	r0, r6
 8014aca:	f7ec f865 	bl	8000b98 <__aeabi_d2iz>
 8014ace:	9011      	str	r0, [sp, #68]	; 0x44
 8014ad0:	f7eb fd48 	bl	8000564 <__aeabi_i2d>
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	460b      	mov	r3, r1
 8014ad8:	4630      	mov	r0, r6
 8014ada:	4639      	mov	r1, r7
 8014adc:	f7eb fbf4 	bl	80002c8 <__aeabi_dsub>
 8014ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ae2:	3330      	adds	r3, #48	; 0x30
 8014ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8014ae8:	9b02      	ldr	r3, [sp, #8]
 8014aea:	429d      	cmp	r5, r3
 8014aec:	4606      	mov	r6, r0
 8014aee:	460f      	mov	r7, r1
 8014af0:	f04f 0200 	mov.w	r2, #0
 8014af4:	d134      	bne.n	8014b60 <_dtoa_r+0x660>
 8014af6:	4b19      	ldr	r3, [pc, #100]	; (8014b5c <_dtoa_r+0x65c>)
 8014af8:	ec51 0b18 	vmov	r0, r1, d8
 8014afc:	f7eb fbe6 	bl	80002cc <__adddf3>
 8014b00:	4602      	mov	r2, r0
 8014b02:	460b      	mov	r3, r1
 8014b04:	4630      	mov	r0, r6
 8014b06:	4639      	mov	r1, r7
 8014b08:	f7ec f826 	bl	8000b58 <__aeabi_dcmpgt>
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d175      	bne.n	8014bfc <_dtoa_r+0x6fc>
 8014b10:	ec53 2b18 	vmov	r2, r3, d8
 8014b14:	4911      	ldr	r1, [pc, #68]	; (8014b5c <_dtoa_r+0x65c>)
 8014b16:	2000      	movs	r0, #0
 8014b18:	f7eb fbd6 	bl	80002c8 <__aeabi_dsub>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	460b      	mov	r3, r1
 8014b20:	4630      	mov	r0, r6
 8014b22:	4639      	mov	r1, r7
 8014b24:	f7eb fffa 	bl	8000b1c <__aeabi_dcmplt>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	f43f af27 	beq.w	801497c <_dtoa_r+0x47c>
 8014b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014b30:	1e6b      	subs	r3, r5, #1
 8014b32:	930c      	str	r3, [sp, #48]	; 0x30
 8014b34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b38:	2b30      	cmp	r3, #48	; 0x30
 8014b3a:	d0f8      	beq.n	8014b2e <_dtoa_r+0x62e>
 8014b3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014b40:	e04a      	b.n	8014bd8 <_dtoa_r+0x6d8>
 8014b42:	bf00      	nop
 8014b44:	0801c3c8 	.word	0x0801c3c8
 8014b48:	0801c3a0 	.word	0x0801c3a0
 8014b4c:	3ff00000 	.word	0x3ff00000
 8014b50:	40240000 	.word	0x40240000
 8014b54:	401c0000 	.word	0x401c0000
 8014b58:	40140000 	.word	0x40140000
 8014b5c:	3fe00000 	.word	0x3fe00000
 8014b60:	4baf      	ldr	r3, [pc, #700]	; (8014e20 <_dtoa_r+0x920>)
 8014b62:	f7eb fd69 	bl	8000638 <__aeabi_dmul>
 8014b66:	4606      	mov	r6, r0
 8014b68:	460f      	mov	r7, r1
 8014b6a:	e7ac      	b.n	8014ac6 <_dtoa_r+0x5c6>
 8014b6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014b70:	9d00      	ldr	r5, [sp, #0]
 8014b72:	4642      	mov	r2, r8
 8014b74:	464b      	mov	r3, r9
 8014b76:	4630      	mov	r0, r6
 8014b78:	4639      	mov	r1, r7
 8014b7a:	f7eb fe87 	bl	800088c <__aeabi_ddiv>
 8014b7e:	f7ec f80b 	bl	8000b98 <__aeabi_d2iz>
 8014b82:	9002      	str	r0, [sp, #8]
 8014b84:	f7eb fcee 	bl	8000564 <__aeabi_i2d>
 8014b88:	4642      	mov	r2, r8
 8014b8a:	464b      	mov	r3, r9
 8014b8c:	f7eb fd54 	bl	8000638 <__aeabi_dmul>
 8014b90:	4602      	mov	r2, r0
 8014b92:	460b      	mov	r3, r1
 8014b94:	4630      	mov	r0, r6
 8014b96:	4639      	mov	r1, r7
 8014b98:	f7eb fb96 	bl	80002c8 <__aeabi_dsub>
 8014b9c:	9e02      	ldr	r6, [sp, #8]
 8014b9e:	9f01      	ldr	r7, [sp, #4]
 8014ba0:	3630      	adds	r6, #48	; 0x30
 8014ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8014ba6:	9e00      	ldr	r6, [sp, #0]
 8014ba8:	1bae      	subs	r6, r5, r6
 8014baa:	42b7      	cmp	r7, r6
 8014bac:	4602      	mov	r2, r0
 8014bae:	460b      	mov	r3, r1
 8014bb0:	d137      	bne.n	8014c22 <_dtoa_r+0x722>
 8014bb2:	f7eb fb8b 	bl	80002cc <__adddf3>
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	4606      	mov	r6, r0
 8014bbc:	460f      	mov	r7, r1
 8014bbe:	f7eb ffcb 	bl	8000b58 <__aeabi_dcmpgt>
 8014bc2:	b9c8      	cbnz	r0, 8014bf8 <_dtoa_r+0x6f8>
 8014bc4:	4642      	mov	r2, r8
 8014bc6:	464b      	mov	r3, r9
 8014bc8:	4630      	mov	r0, r6
 8014bca:	4639      	mov	r1, r7
 8014bcc:	f7eb ff9c 	bl	8000b08 <__aeabi_dcmpeq>
 8014bd0:	b110      	cbz	r0, 8014bd8 <_dtoa_r+0x6d8>
 8014bd2:	9b02      	ldr	r3, [sp, #8]
 8014bd4:	07d9      	lsls	r1, r3, #31
 8014bd6:	d40f      	bmi.n	8014bf8 <_dtoa_r+0x6f8>
 8014bd8:	4620      	mov	r0, r4
 8014bda:	4659      	mov	r1, fp
 8014bdc:	f000 fcfe 	bl	80155dc <_Bfree>
 8014be0:	2300      	movs	r3, #0
 8014be2:	702b      	strb	r3, [r5, #0]
 8014be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014be6:	f10a 0001 	add.w	r0, sl, #1
 8014bea:	6018      	str	r0, [r3, #0]
 8014bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f43f acd8 	beq.w	80145a4 <_dtoa_r+0xa4>
 8014bf4:	601d      	str	r5, [r3, #0]
 8014bf6:	e4d5      	b.n	80145a4 <_dtoa_r+0xa4>
 8014bf8:	f8cd a01c 	str.w	sl, [sp, #28]
 8014bfc:	462b      	mov	r3, r5
 8014bfe:	461d      	mov	r5, r3
 8014c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c04:	2a39      	cmp	r2, #57	; 0x39
 8014c06:	d108      	bne.n	8014c1a <_dtoa_r+0x71a>
 8014c08:	9a00      	ldr	r2, [sp, #0]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d1f7      	bne.n	8014bfe <_dtoa_r+0x6fe>
 8014c0e:	9a07      	ldr	r2, [sp, #28]
 8014c10:	9900      	ldr	r1, [sp, #0]
 8014c12:	3201      	adds	r2, #1
 8014c14:	9207      	str	r2, [sp, #28]
 8014c16:	2230      	movs	r2, #48	; 0x30
 8014c18:	700a      	strb	r2, [r1, #0]
 8014c1a:	781a      	ldrb	r2, [r3, #0]
 8014c1c:	3201      	adds	r2, #1
 8014c1e:	701a      	strb	r2, [r3, #0]
 8014c20:	e78c      	b.n	8014b3c <_dtoa_r+0x63c>
 8014c22:	4b7f      	ldr	r3, [pc, #508]	; (8014e20 <_dtoa_r+0x920>)
 8014c24:	2200      	movs	r2, #0
 8014c26:	f7eb fd07 	bl	8000638 <__aeabi_dmul>
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	4606      	mov	r6, r0
 8014c30:	460f      	mov	r7, r1
 8014c32:	f7eb ff69 	bl	8000b08 <__aeabi_dcmpeq>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d09b      	beq.n	8014b72 <_dtoa_r+0x672>
 8014c3a:	e7cd      	b.n	8014bd8 <_dtoa_r+0x6d8>
 8014c3c:	9a08      	ldr	r2, [sp, #32]
 8014c3e:	2a00      	cmp	r2, #0
 8014c40:	f000 80c4 	beq.w	8014dcc <_dtoa_r+0x8cc>
 8014c44:	9a05      	ldr	r2, [sp, #20]
 8014c46:	2a01      	cmp	r2, #1
 8014c48:	f300 80a8 	bgt.w	8014d9c <_dtoa_r+0x89c>
 8014c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c4e:	2a00      	cmp	r2, #0
 8014c50:	f000 80a0 	beq.w	8014d94 <_dtoa_r+0x894>
 8014c54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c58:	9e06      	ldr	r6, [sp, #24]
 8014c5a:	4645      	mov	r5, r8
 8014c5c:	9a04      	ldr	r2, [sp, #16]
 8014c5e:	2101      	movs	r1, #1
 8014c60:	441a      	add	r2, r3
 8014c62:	4620      	mov	r0, r4
 8014c64:	4498      	add	r8, r3
 8014c66:	9204      	str	r2, [sp, #16]
 8014c68:	f000 fd74 	bl	8015754 <__i2b>
 8014c6c:	4607      	mov	r7, r0
 8014c6e:	2d00      	cmp	r5, #0
 8014c70:	dd0b      	ble.n	8014c8a <_dtoa_r+0x78a>
 8014c72:	9b04      	ldr	r3, [sp, #16]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dd08      	ble.n	8014c8a <_dtoa_r+0x78a>
 8014c78:	42ab      	cmp	r3, r5
 8014c7a:	9a04      	ldr	r2, [sp, #16]
 8014c7c:	bfa8      	it	ge
 8014c7e:	462b      	movge	r3, r5
 8014c80:	eba8 0803 	sub.w	r8, r8, r3
 8014c84:	1aed      	subs	r5, r5, r3
 8014c86:	1ad3      	subs	r3, r2, r3
 8014c88:	9304      	str	r3, [sp, #16]
 8014c8a:	9b06      	ldr	r3, [sp, #24]
 8014c8c:	b1fb      	cbz	r3, 8014cce <_dtoa_r+0x7ce>
 8014c8e:	9b08      	ldr	r3, [sp, #32]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 809f 	beq.w	8014dd4 <_dtoa_r+0x8d4>
 8014c96:	2e00      	cmp	r6, #0
 8014c98:	dd11      	ble.n	8014cbe <_dtoa_r+0x7be>
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	4632      	mov	r2, r6
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 fe14 	bl	80158cc <__pow5mult>
 8014ca4:	465a      	mov	r2, fp
 8014ca6:	4601      	mov	r1, r0
 8014ca8:	4607      	mov	r7, r0
 8014caa:	4620      	mov	r0, r4
 8014cac:	f000 fd68 	bl	8015780 <__multiply>
 8014cb0:	4659      	mov	r1, fp
 8014cb2:	9007      	str	r0, [sp, #28]
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f000 fc91 	bl	80155dc <_Bfree>
 8014cba:	9b07      	ldr	r3, [sp, #28]
 8014cbc:	469b      	mov	fp, r3
 8014cbe:	9b06      	ldr	r3, [sp, #24]
 8014cc0:	1b9a      	subs	r2, r3, r6
 8014cc2:	d004      	beq.n	8014cce <_dtoa_r+0x7ce>
 8014cc4:	4659      	mov	r1, fp
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f000 fe00 	bl	80158cc <__pow5mult>
 8014ccc:	4683      	mov	fp, r0
 8014cce:	2101      	movs	r1, #1
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fd3f 	bl	8015754 <__i2b>
 8014cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	4606      	mov	r6, r0
 8014cdc:	dd7c      	ble.n	8014dd8 <_dtoa_r+0x8d8>
 8014cde:	461a      	mov	r2, r3
 8014ce0:	4601      	mov	r1, r0
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	f000 fdf2 	bl	80158cc <__pow5mult>
 8014ce8:	9b05      	ldr	r3, [sp, #20]
 8014cea:	2b01      	cmp	r3, #1
 8014cec:	4606      	mov	r6, r0
 8014cee:	dd76      	ble.n	8014dde <_dtoa_r+0x8de>
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	9306      	str	r3, [sp, #24]
 8014cf4:	6933      	ldr	r3, [r6, #16]
 8014cf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014cfa:	6918      	ldr	r0, [r3, #16]
 8014cfc:	f000 fcda 	bl	80156b4 <__hi0bits>
 8014d00:	f1c0 0020 	rsb	r0, r0, #32
 8014d04:	9b04      	ldr	r3, [sp, #16]
 8014d06:	4418      	add	r0, r3
 8014d08:	f010 001f 	ands.w	r0, r0, #31
 8014d0c:	f000 8086 	beq.w	8014e1c <_dtoa_r+0x91c>
 8014d10:	f1c0 0320 	rsb	r3, r0, #32
 8014d14:	2b04      	cmp	r3, #4
 8014d16:	dd7f      	ble.n	8014e18 <_dtoa_r+0x918>
 8014d18:	f1c0 001c 	rsb	r0, r0, #28
 8014d1c:	9b04      	ldr	r3, [sp, #16]
 8014d1e:	4403      	add	r3, r0
 8014d20:	4480      	add	r8, r0
 8014d22:	4405      	add	r5, r0
 8014d24:	9304      	str	r3, [sp, #16]
 8014d26:	f1b8 0f00 	cmp.w	r8, #0
 8014d2a:	dd05      	ble.n	8014d38 <_dtoa_r+0x838>
 8014d2c:	4659      	mov	r1, fp
 8014d2e:	4642      	mov	r2, r8
 8014d30:	4620      	mov	r0, r4
 8014d32:	f000 fe25 	bl	8015980 <__lshift>
 8014d36:	4683      	mov	fp, r0
 8014d38:	9b04      	ldr	r3, [sp, #16]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	dd05      	ble.n	8014d4a <_dtoa_r+0x84a>
 8014d3e:	4631      	mov	r1, r6
 8014d40:	461a      	mov	r2, r3
 8014d42:	4620      	mov	r0, r4
 8014d44:	f000 fe1c 	bl	8015980 <__lshift>
 8014d48:	4606      	mov	r6, r0
 8014d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d069      	beq.n	8014e24 <_dtoa_r+0x924>
 8014d50:	4631      	mov	r1, r6
 8014d52:	4658      	mov	r0, fp
 8014d54:	f000 fe80 	bl	8015a58 <__mcmp>
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	da63      	bge.n	8014e24 <_dtoa_r+0x924>
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	4659      	mov	r1, fp
 8014d60:	220a      	movs	r2, #10
 8014d62:	4620      	mov	r0, r4
 8014d64:	f000 fc5c 	bl	8015620 <__multadd>
 8014d68:	9b08      	ldr	r3, [sp, #32]
 8014d6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014d6e:	4683      	mov	fp, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f000 818f 	beq.w	8015094 <_dtoa_r+0xb94>
 8014d76:	4639      	mov	r1, r7
 8014d78:	2300      	movs	r3, #0
 8014d7a:	220a      	movs	r2, #10
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	f000 fc4f 	bl	8015620 <__multadd>
 8014d82:	f1b9 0f00 	cmp.w	r9, #0
 8014d86:	4607      	mov	r7, r0
 8014d88:	f300 808e 	bgt.w	8014ea8 <_dtoa_r+0x9a8>
 8014d8c:	9b05      	ldr	r3, [sp, #20]
 8014d8e:	2b02      	cmp	r3, #2
 8014d90:	dc50      	bgt.n	8014e34 <_dtoa_r+0x934>
 8014d92:	e089      	b.n	8014ea8 <_dtoa_r+0x9a8>
 8014d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d9a:	e75d      	b.n	8014c58 <_dtoa_r+0x758>
 8014d9c:	9b01      	ldr	r3, [sp, #4]
 8014d9e:	1e5e      	subs	r6, r3, #1
 8014da0:	9b06      	ldr	r3, [sp, #24]
 8014da2:	42b3      	cmp	r3, r6
 8014da4:	bfbf      	itttt	lt
 8014da6:	9b06      	ldrlt	r3, [sp, #24]
 8014da8:	9606      	strlt	r6, [sp, #24]
 8014daa:	1af2      	sublt	r2, r6, r3
 8014dac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014dae:	bfb6      	itet	lt
 8014db0:	189b      	addlt	r3, r3, r2
 8014db2:	1b9e      	subge	r6, r3, r6
 8014db4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014db6:	9b01      	ldr	r3, [sp, #4]
 8014db8:	bfb8      	it	lt
 8014dba:	2600      	movlt	r6, #0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	bfb5      	itete	lt
 8014dc0:	eba8 0503 	sublt.w	r5, r8, r3
 8014dc4:	9b01      	ldrge	r3, [sp, #4]
 8014dc6:	2300      	movlt	r3, #0
 8014dc8:	4645      	movge	r5, r8
 8014dca:	e747      	b.n	8014c5c <_dtoa_r+0x75c>
 8014dcc:	9e06      	ldr	r6, [sp, #24]
 8014dce:	9f08      	ldr	r7, [sp, #32]
 8014dd0:	4645      	mov	r5, r8
 8014dd2:	e74c      	b.n	8014c6e <_dtoa_r+0x76e>
 8014dd4:	9a06      	ldr	r2, [sp, #24]
 8014dd6:	e775      	b.n	8014cc4 <_dtoa_r+0x7c4>
 8014dd8:	9b05      	ldr	r3, [sp, #20]
 8014dda:	2b01      	cmp	r3, #1
 8014ddc:	dc18      	bgt.n	8014e10 <_dtoa_r+0x910>
 8014dde:	9b02      	ldr	r3, [sp, #8]
 8014de0:	b9b3      	cbnz	r3, 8014e10 <_dtoa_r+0x910>
 8014de2:	9b03      	ldr	r3, [sp, #12]
 8014de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014de8:	b9a3      	cbnz	r3, 8014e14 <_dtoa_r+0x914>
 8014dea:	9b03      	ldr	r3, [sp, #12]
 8014dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014df0:	0d1b      	lsrs	r3, r3, #20
 8014df2:	051b      	lsls	r3, r3, #20
 8014df4:	b12b      	cbz	r3, 8014e02 <_dtoa_r+0x902>
 8014df6:	9b04      	ldr	r3, [sp, #16]
 8014df8:	3301      	adds	r3, #1
 8014dfa:	9304      	str	r3, [sp, #16]
 8014dfc:	f108 0801 	add.w	r8, r8, #1
 8014e00:	2301      	movs	r3, #1
 8014e02:	9306      	str	r3, [sp, #24]
 8014e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f47f af74 	bne.w	8014cf4 <_dtoa_r+0x7f4>
 8014e0c:	2001      	movs	r0, #1
 8014e0e:	e779      	b.n	8014d04 <_dtoa_r+0x804>
 8014e10:	2300      	movs	r3, #0
 8014e12:	e7f6      	b.n	8014e02 <_dtoa_r+0x902>
 8014e14:	9b02      	ldr	r3, [sp, #8]
 8014e16:	e7f4      	b.n	8014e02 <_dtoa_r+0x902>
 8014e18:	d085      	beq.n	8014d26 <_dtoa_r+0x826>
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	301c      	adds	r0, #28
 8014e1e:	e77d      	b.n	8014d1c <_dtoa_r+0x81c>
 8014e20:	40240000 	.word	0x40240000
 8014e24:	9b01      	ldr	r3, [sp, #4]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	dc38      	bgt.n	8014e9c <_dtoa_r+0x99c>
 8014e2a:	9b05      	ldr	r3, [sp, #20]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	dd35      	ble.n	8014e9c <_dtoa_r+0x99c>
 8014e30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014e34:	f1b9 0f00 	cmp.w	r9, #0
 8014e38:	d10d      	bne.n	8014e56 <_dtoa_r+0x956>
 8014e3a:	4631      	mov	r1, r6
 8014e3c:	464b      	mov	r3, r9
 8014e3e:	2205      	movs	r2, #5
 8014e40:	4620      	mov	r0, r4
 8014e42:	f000 fbed 	bl	8015620 <__multadd>
 8014e46:	4601      	mov	r1, r0
 8014e48:	4606      	mov	r6, r0
 8014e4a:	4658      	mov	r0, fp
 8014e4c:	f000 fe04 	bl	8015a58 <__mcmp>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	f73f adbd 	bgt.w	80149d0 <_dtoa_r+0x4d0>
 8014e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e58:	9d00      	ldr	r5, [sp, #0]
 8014e5a:	ea6f 0a03 	mvn.w	sl, r3
 8014e5e:	f04f 0800 	mov.w	r8, #0
 8014e62:	4631      	mov	r1, r6
 8014e64:	4620      	mov	r0, r4
 8014e66:	f000 fbb9 	bl	80155dc <_Bfree>
 8014e6a:	2f00      	cmp	r7, #0
 8014e6c:	f43f aeb4 	beq.w	8014bd8 <_dtoa_r+0x6d8>
 8014e70:	f1b8 0f00 	cmp.w	r8, #0
 8014e74:	d005      	beq.n	8014e82 <_dtoa_r+0x982>
 8014e76:	45b8      	cmp	r8, r7
 8014e78:	d003      	beq.n	8014e82 <_dtoa_r+0x982>
 8014e7a:	4641      	mov	r1, r8
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	f000 fbad 	bl	80155dc <_Bfree>
 8014e82:	4639      	mov	r1, r7
 8014e84:	4620      	mov	r0, r4
 8014e86:	f000 fba9 	bl	80155dc <_Bfree>
 8014e8a:	e6a5      	b.n	8014bd8 <_dtoa_r+0x6d8>
 8014e8c:	2600      	movs	r6, #0
 8014e8e:	4637      	mov	r7, r6
 8014e90:	e7e1      	b.n	8014e56 <_dtoa_r+0x956>
 8014e92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014e98:	4637      	mov	r7, r6
 8014e9a:	e599      	b.n	80149d0 <_dtoa_r+0x4d0>
 8014e9c:	9b08      	ldr	r3, [sp, #32]
 8014e9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f000 80fd 	beq.w	80150a2 <_dtoa_r+0xba2>
 8014ea8:	2d00      	cmp	r5, #0
 8014eaa:	dd05      	ble.n	8014eb8 <_dtoa_r+0x9b8>
 8014eac:	4639      	mov	r1, r7
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f000 fd65 	bl	8015980 <__lshift>
 8014eb6:	4607      	mov	r7, r0
 8014eb8:	9b06      	ldr	r3, [sp, #24]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d05c      	beq.n	8014f78 <_dtoa_r+0xa78>
 8014ebe:	6879      	ldr	r1, [r7, #4]
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 fb4b 	bl	801555c <_Balloc>
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	b928      	cbnz	r0, 8014ed6 <_dtoa_r+0x9d6>
 8014eca:	4b80      	ldr	r3, [pc, #512]	; (80150cc <_dtoa_r+0xbcc>)
 8014ecc:	4602      	mov	r2, r0
 8014ece:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ed2:	f7ff bb2e 	b.w	8014532 <_dtoa_r+0x32>
 8014ed6:	693a      	ldr	r2, [r7, #16]
 8014ed8:	3202      	adds	r2, #2
 8014eda:	0092      	lsls	r2, r2, #2
 8014edc:	f107 010c 	add.w	r1, r7, #12
 8014ee0:	300c      	adds	r0, #12
 8014ee2:	f7fe fba5 	bl	8013630 <memcpy>
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	4629      	mov	r1, r5
 8014eea:	4620      	mov	r0, r4
 8014eec:	f000 fd48 	bl	8015980 <__lshift>
 8014ef0:	9b00      	ldr	r3, [sp, #0]
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	9301      	str	r3, [sp, #4]
 8014ef6:	9b00      	ldr	r3, [sp, #0]
 8014ef8:	444b      	add	r3, r9
 8014efa:	9307      	str	r3, [sp, #28]
 8014efc:	9b02      	ldr	r3, [sp, #8]
 8014efe:	f003 0301 	and.w	r3, r3, #1
 8014f02:	46b8      	mov	r8, r7
 8014f04:	9306      	str	r3, [sp, #24]
 8014f06:	4607      	mov	r7, r0
 8014f08:	9b01      	ldr	r3, [sp, #4]
 8014f0a:	4631      	mov	r1, r6
 8014f0c:	3b01      	subs	r3, #1
 8014f0e:	4658      	mov	r0, fp
 8014f10:	9302      	str	r3, [sp, #8]
 8014f12:	f7ff fa69 	bl	80143e8 <quorem>
 8014f16:	4603      	mov	r3, r0
 8014f18:	3330      	adds	r3, #48	; 0x30
 8014f1a:	9004      	str	r0, [sp, #16]
 8014f1c:	4641      	mov	r1, r8
 8014f1e:	4658      	mov	r0, fp
 8014f20:	9308      	str	r3, [sp, #32]
 8014f22:	f000 fd99 	bl	8015a58 <__mcmp>
 8014f26:	463a      	mov	r2, r7
 8014f28:	4681      	mov	r9, r0
 8014f2a:	4631      	mov	r1, r6
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	f000 fdaf 	bl	8015a90 <__mdiff>
 8014f32:	68c2      	ldr	r2, [r0, #12]
 8014f34:	9b08      	ldr	r3, [sp, #32]
 8014f36:	4605      	mov	r5, r0
 8014f38:	bb02      	cbnz	r2, 8014f7c <_dtoa_r+0xa7c>
 8014f3a:	4601      	mov	r1, r0
 8014f3c:	4658      	mov	r0, fp
 8014f3e:	f000 fd8b 	bl	8015a58 <__mcmp>
 8014f42:	9b08      	ldr	r3, [sp, #32]
 8014f44:	4602      	mov	r2, r0
 8014f46:	4629      	mov	r1, r5
 8014f48:	4620      	mov	r0, r4
 8014f4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014f4e:	f000 fb45 	bl	80155dc <_Bfree>
 8014f52:	9b05      	ldr	r3, [sp, #20]
 8014f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f56:	9d01      	ldr	r5, [sp, #4]
 8014f58:	ea43 0102 	orr.w	r1, r3, r2
 8014f5c:	9b06      	ldr	r3, [sp, #24]
 8014f5e:	430b      	orrs	r3, r1
 8014f60:	9b08      	ldr	r3, [sp, #32]
 8014f62:	d10d      	bne.n	8014f80 <_dtoa_r+0xa80>
 8014f64:	2b39      	cmp	r3, #57	; 0x39
 8014f66:	d029      	beq.n	8014fbc <_dtoa_r+0xabc>
 8014f68:	f1b9 0f00 	cmp.w	r9, #0
 8014f6c:	dd01      	ble.n	8014f72 <_dtoa_r+0xa72>
 8014f6e:	9b04      	ldr	r3, [sp, #16]
 8014f70:	3331      	adds	r3, #49	; 0x31
 8014f72:	9a02      	ldr	r2, [sp, #8]
 8014f74:	7013      	strb	r3, [r2, #0]
 8014f76:	e774      	b.n	8014e62 <_dtoa_r+0x962>
 8014f78:	4638      	mov	r0, r7
 8014f7a:	e7b9      	b.n	8014ef0 <_dtoa_r+0x9f0>
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	e7e2      	b.n	8014f46 <_dtoa_r+0xa46>
 8014f80:	f1b9 0f00 	cmp.w	r9, #0
 8014f84:	db06      	blt.n	8014f94 <_dtoa_r+0xa94>
 8014f86:	9905      	ldr	r1, [sp, #20]
 8014f88:	ea41 0909 	orr.w	r9, r1, r9
 8014f8c:	9906      	ldr	r1, [sp, #24]
 8014f8e:	ea59 0101 	orrs.w	r1, r9, r1
 8014f92:	d120      	bne.n	8014fd6 <_dtoa_r+0xad6>
 8014f94:	2a00      	cmp	r2, #0
 8014f96:	ddec      	ble.n	8014f72 <_dtoa_r+0xa72>
 8014f98:	4659      	mov	r1, fp
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	9301      	str	r3, [sp, #4]
 8014fa0:	f000 fcee 	bl	8015980 <__lshift>
 8014fa4:	4631      	mov	r1, r6
 8014fa6:	4683      	mov	fp, r0
 8014fa8:	f000 fd56 	bl	8015a58 <__mcmp>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	9b01      	ldr	r3, [sp, #4]
 8014fb0:	dc02      	bgt.n	8014fb8 <_dtoa_r+0xab8>
 8014fb2:	d1de      	bne.n	8014f72 <_dtoa_r+0xa72>
 8014fb4:	07da      	lsls	r2, r3, #31
 8014fb6:	d5dc      	bpl.n	8014f72 <_dtoa_r+0xa72>
 8014fb8:	2b39      	cmp	r3, #57	; 0x39
 8014fba:	d1d8      	bne.n	8014f6e <_dtoa_r+0xa6e>
 8014fbc:	9a02      	ldr	r2, [sp, #8]
 8014fbe:	2339      	movs	r3, #57	; 0x39
 8014fc0:	7013      	strb	r3, [r2, #0]
 8014fc2:	462b      	mov	r3, r5
 8014fc4:	461d      	mov	r5, r3
 8014fc6:	3b01      	subs	r3, #1
 8014fc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014fcc:	2a39      	cmp	r2, #57	; 0x39
 8014fce:	d050      	beq.n	8015072 <_dtoa_r+0xb72>
 8014fd0:	3201      	adds	r2, #1
 8014fd2:	701a      	strb	r2, [r3, #0]
 8014fd4:	e745      	b.n	8014e62 <_dtoa_r+0x962>
 8014fd6:	2a00      	cmp	r2, #0
 8014fd8:	dd03      	ble.n	8014fe2 <_dtoa_r+0xae2>
 8014fda:	2b39      	cmp	r3, #57	; 0x39
 8014fdc:	d0ee      	beq.n	8014fbc <_dtoa_r+0xabc>
 8014fde:	3301      	adds	r3, #1
 8014fe0:	e7c7      	b.n	8014f72 <_dtoa_r+0xa72>
 8014fe2:	9a01      	ldr	r2, [sp, #4]
 8014fe4:	9907      	ldr	r1, [sp, #28]
 8014fe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014fea:	428a      	cmp	r2, r1
 8014fec:	d02a      	beq.n	8015044 <_dtoa_r+0xb44>
 8014fee:	4659      	mov	r1, fp
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	220a      	movs	r2, #10
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f000 fb13 	bl	8015620 <__multadd>
 8014ffa:	45b8      	cmp	r8, r7
 8014ffc:	4683      	mov	fp, r0
 8014ffe:	f04f 0300 	mov.w	r3, #0
 8015002:	f04f 020a 	mov.w	r2, #10
 8015006:	4641      	mov	r1, r8
 8015008:	4620      	mov	r0, r4
 801500a:	d107      	bne.n	801501c <_dtoa_r+0xb1c>
 801500c:	f000 fb08 	bl	8015620 <__multadd>
 8015010:	4680      	mov	r8, r0
 8015012:	4607      	mov	r7, r0
 8015014:	9b01      	ldr	r3, [sp, #4]
 8015016:	3301      	adds	r3, #1
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	e775      	b.n	8014f08 <_dtoa_r+0xa08>
 801501c:	f000 fb00 	bl	8015620 <__multadd>
 8015020:	4639      	mov	r1, r7
 8015022:	4680      	mov	r8, r0
 8015024:	2300      	movs	r3, #0
 8015026:	220a      	movs	r2, #10
 8015028:	4620      	mov	r0, r4
 801502a:	f000 faf9 	bl	8015620 <__multadd>
 801502e:	4607      	mov	r7, r0
 8015030:	e7f0      	b.n	8015014 <_dtoa_r+0xb14>
 8015032:	f1b9 0f00 	cmp.w	r9, #0
 8015036:	9a00      	ldr	r2, [sp, #0]
 8015038:	bfcc      	ite	gt
 801503a:	464d      	movgt	r5, r9
 801503c:	2501      	movle	r5, #1
 801503e:	4415      	add	r5, r2
 8015040:	f04f 0800 	mov.w	r8, #0
 8015044:	4659      	mov	r1, fp
 8015046:	2201      	movs	r2, #1
 8015048:	4620      	mov	r0, r4
 801504a:	9301      	str	r3, [sp, #4]
 801504c:	f000 fc98 	bl	8015980 <__lshift>
 8015050:	4631      	mov	r1, r6
 8015052:	4683      	mov	fp, r0
 8015054:	f000 fd00 	bl	8015a58 <__mcmp>
 8015058:	2800      	cmp	r0, #0
 801505a:	dcb2      	bgt.n	8014fc2 <_dtoa_r+0xac2>
 801505c:	d102      	bne.n	8015064 <_dtoa_r+0xb64>
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	07db      	lsls	r3, r3, #31
 8015062:	d4ae      	bmi.n	8014fc2 <_dtoa_r+0xac2>
 8015064:	462b      	mov	r3, r5
 8015066:	461d      	mov	r5, r3
 8015068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801506c:	2a30      	cmp	r2, #48	; 0x30
 801506e:	d0fa      	beq.n	8015066 <_dtoa_r+0xb66>
 8015070:	e6f7      	b.n	8014e62 <_dtoa_r+0x962>
 8015072:	9a00      	ldr	r2, [sp, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d1a5      	bne.n	8014fc4 <_dtoa_r+0xac4>
 8015078:	f10a 0a01 	add.w	sl, sl, #1
 801507c:	2331      	movs	r3, #49	; 0x31
 801507e:	e779      	b.n	8014f74 <_dtoa_r+0xa74>
 8015080:	4b13      	ldr	r3, [pc, #76]	; (80150d0 <_dtoa_r+0xbd0>)
 8015082:	f7ff baaf 	b.w	80145e4 <_dtoa_r+0xe4>
 8015086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015088:	2b00      	cmp	r3, #0
 801508a:	f47f aa86 	bne.w	801459a <_dtoa_r+0x9a>
 801508e:	4b11      	ldr	r3, [pc, #68]	; (80150d4 <_dtoa_r+0xbd4>)
 8015090:	f7ff baa8 	b.w	80145e4 <_dtoa_r+0xe4>
 8015094:	f1b9 0f00 	cmp.w	r9, #0
 8015098:	dc03      	bgt.n	80150a2 <_dtoa_r+0xba2>
 801509a:	9b05      	ldr	r3, [sp, #20]
 801509c:	2b02      	cmp	r3, #2
 801509e:	f73f aec9 	bgt.w	8014e34 <_dtoa_r+0x934>
 80150a2:	9d00      	ldr	r5, [sp, #0]
 80150a4:	4631      	mov	r1, r6
 80150a6:	4658      	mov	r0, fp
 80150a8:	f7ff f99e 	bl	80143e8 <quorem>
 80150ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80150b0:	f805 3b01 	strb.w	r3, [r5], #1
 80150b4:	9a00      	ldr	r2, [sp, #0]
 80150b6:	1aaa      	subs	r2, r5, r2
 80150b8:	4591      	cmp	r9, r2
 80150ba:	ddba      	ble.n	8015032 <_dtoa_r+0xb32>
 80150bc:	4659      	mov	r1, fp
 80150be:	2300      	movs	r3, #0
 80150c0:	220a      	movs	r2, #10
 80150c2:	4620      	mov	r0, r4
 80150c4:	f000 faac 	bl	8015620 <__multadd>
 80150c8:	4683      	mov	fp, r0
 80150ca:	e7eb      	b.n	80150a4 <_dtoa_r+0xba4>
 80150cc:	0801c2cb 	.word	0x0801c2cb
 80150d0:	0801c1e8 	.word	0x0801c1e8
 80150d4:	0801c248 	.word	0x0801c248

080150d8 <__sflush_r>:
 80150d8:	898a      	ldrh	r2, [r1, #12]
 80150da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150de:	4605      	mov	r5, r0
 80150e0:	0710      	lsls	r0, r2, #28
 80150e2:	460c      	mov	r4, r1
 80150e4:	d458      	bmi.n	8015198 <__sflush_r+0xc0>
 80150e6:	684b      	ldr	r3, [r1, #4]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	dc05      	bgt.n	80150f8 <__sflush_r+0x20>
 80150ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	dc02      	bgt.n	80150f8 <__sflush_r+0x20>
 80150f2:	2000      	movs	r0, #0
 80150f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150fa:	2e00      	cmp	r6, #0
 80150fc:	d0f9      	beq.n	80150f2 <__sflush_r+0x1a>
 80150fe:	2300      	movs	r3, #0
 8015100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015104:	682f      	ldr	r7, [r5, #0]
 8015106:	602b      	str	r3, [r5, #0]
 8015108:	d032      	beq.n	8015170 <__sflush_r+0x98>
 801510a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801510c:	89a3      	ldrh	r3, [r4, #12]
 801510e:	075a      	lsls	r2, r3, #29
 8015110:	d505      	bpl.n	801511e <__sflush_r+0x46>
 8015112:	6863      	ldr	r3, [r4, #4]
 8015114:	1ac0      	subs	r0, r0, r3
 8015116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015118:	b10b      	cbz	r3, 801511e <__sflush_r+0x46>
 801511a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801511c:	1ac0      	subs	r0, r0, r3
 801511e:	2300      	movs	r3, #0
 8015120:	4602      	mov	r2, r0
 8015122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015124:	6a21      	ldr	r1, [r4, #32]
 8015126:	4628      	mov	r0, r5
 8015128:	47b0      	blx	r6
 801512a:	1c43      	adds	r3, r0, #1
 801512c:	89a3      	ldrh	r3, [r4, #12]
 801512e:	d106      	bne.n	801513e <__sflush_r+0x66>
 8015130:	6829      	ldr	r1, [r5, #0]
 8015132:	291d      	cmp	r1, #29
 8015134:	d82c      	bhi.n	8015190 <__sflush_r+0xb8>
 8015136:	4a2a      	ldr	r2, [pc, #168]	; (80151e0 <__sflush_r+0x108>)
 8015138:	40ca      	lsrs	r2, r1
 801513a:	07d6      	lsls	r6, r2, #31
 801513c:	d528      	bpl.n	8015190 <__sflush_r+0xb8>
 801513e:	2200      	movs	r2, #0
 8015140:	6062      	str	r2, [r4, #4]
 8015142:	04d9      	lsls	r1, r3, #19
 8015144:	6922      	ldr	r2, [r4, #16]
 8015146:	6022      	str	r2, [r4, #0]
 8015148:	d504      	bpl.n	8015154 <__sflush_r+0x7c>
 801514a:	1c42      	adds	r2, r0, #1
 801514c:	d101      	bne.n	8015152 <__sflush_r+0x7a>
 801514e:	682b      	ldr	r3, [r5, #0]
 8015150:	b903      	cbnz	r3, 8015154 <__sflush_r+0x7c>
 8015152:	6560      	str	r0, [r4, #84]	; 0x54
 8015154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015156:	602f      	str	r7, [r5, #0]
 8015158:	2900      	cmp	r1, #0
 801515a:	d0ca      	beq.n	80150f2 <__sflush_r+0x1a>
 801515c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015160:	4299      	cmp	r1, r3
 8015162:	d002      	beq.n	801516a <__sflush_r+0x92>
 8015164:	4628      	mov	r0, r5
 8015166:	f7fe fa79 	bl	801365c <_free_r>
 801516a:	2000      	movs	r0, #0
 801516c:	6360      	str	r0, [r4, #52]	; 0x34
 801516e:	e7c1      	b.n	80150f4 <__sflush_r+0x1c>
 8015170:	6a21      	ldr	r1, [r4, #32]
 8015172:	2301      	movs	r3, #1
 8015174:	4628      	mov	r0, r5
 8015176:	47b0      	blx	r6
 8015178:	1c41      	adds	r1, r0, #1
 801517a:	d1c7      	bne.n	801510c <__sflush_r+0x34>
 801517c:	682b      	ldr	r3, [r5, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d0c4      	beq.n	801510c <__sflush_r+0x34>
 8015182:	2b1d      	cmp	r3, #29
 8015184:	d001      	beq.n	801518a <__sflush_r+0xb2>
 8015186:	2b16      	cmp	r3, #22
 8015188:	d101      	bne.n	801518e <__sflush_r+0xb6>
 801518a:	602f      	str	r7, [r5, #0]
 801518c:	e7b1      	b.n	80150f2 <__sflush_r+0x1a>
 801518e:	89a3      	ldrh	r3, [r4, #12]
 8015190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	e7ad      	b.n	80150f4 <__sflush_r+0x1c>
 8015198:	690f      	ldr	r7, [r1, #16]
 801519a:	2f00      	cmp	r7, #0
 801519c:	d0a9      	beq.n	80150f2 <__sflush_r+0x1a>
 801519e:	0793      	lsls	r3, r2, #30
 80151a0:	680e      	ldr	r6, [r1, #0]
 80151a2:	bf08      	it	eq
 80151a4:	694b      	ldreq	r3, [r1, #20]
 80151a6:	600f      	str	r7, [r1, #0]
 80151a8:	bf18      	it	ne
 80151aa:	2300      	movne	r3, #0
 80151ac:	eba6 0807 	sub.w	r8, r6, r7
 80151b0:	608b      	str	r3, [r1, #8]
 80151b2:	f1b8 0f00 	cmp.w	r8, #0
 80151b6:	dd9c      	ble.n	80150f2 <__sflush_r+0x1a>
 80151b8:	6a21      	ldr	r1, [r4, #32]
 80151ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80151bc:	4643      	mov	r3, r8
 80151be:	463a      	mov	r2, r7
 80151c0:	4628      	mov	r0, r5
 80151c2:	47b0      	blx	r6
 80151c4:	2800      	cmp	r0, #0
 80151c6:	dc06      	bgt.n	80151d6 <__sflush_r+0xfe>
 80151c8:	89a3      	ldrh	r3, [r4, #12]
 80151ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151ce:	81a3      	strh	r3, [r4, #12]
 80151d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151d4:	e78e      	b.n	80150f4 <__sflush_r+0x1c>
 80151d6:	4407      	add	r7, r0
 80151d8:	eba8 0800 	sub.w	r8, r8, r0
 80151dc:	e7e9      	b.n	80151b2 <__sflush_r+0xda>
 80151de:	bf00      	nop
 80151e0:	20400001 	.word	0x20400001

080151e4 <_fflush_r>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	690b      	ldr	r3, [r1, #16]
 80151e8:	4605      	mov	r5, r0
 80151ea:	460c      	mov	r4, r1
 80151ec:	b913      	cbnz	r3, 80151f4 <_fflush_r+0x10>
 80151ee:	2500      	movs	r5, #0
 80151f0:	4628      	mov	r0, r5
 80151f2:	bd38      	pop	{r3, r4, r5, pc}
 80151f4:	b118      	cbz	r0, 80151fe <_fflush_r+0x1a>
 80151f6:	6983      	ldr	r3, [r0, #24]
 80151f8:	b90b      	cbnz	r3, 80151fe <_fflush_r+0x1a>
 80151fa:	f000 f887 	bl	801530c <__sinit>
 80151fe:	4b14      	ldr	r3, [pc, #80]	; (8015250 <_fflush_r+0x6c>)
 8015200:	429c      	cmp	r4, r3
 8015202:	d11b      	bne.n	801523c <_fflush_r+0x58>
 8015204:	686c      	ldr	r4, [r5, #4]
 8015206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d0ef      	beq.n	80151ee <_fflush_r+0xa>
 801520e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015210:	07d0      	lsls	r0, r2, #31
 8015212:	d404      	bmi.n	801521e <_fflush_r+0x3a>
 8015214:	0599      	lsls	r1, r3, #22
 8015216:	d402      	bmi.n	801521e <_fflush_r+0x3a>
 8015218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801521a:	f000 f92c 	bl	8015476 <__retarget_lock_acquire_recursive>
 801521e:	4628      	mov	r0, r5
 8015220:	4621      	mov	r1, r4
 8015222:	f7ff ff59 	bl	80150d8 <__sflush_r>
 8015226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015228:	07da      	lsls	r2, r3, #31
 801522a:	4605      	mov	r5, r0
 801522c:	d4e0      	bmi.n	80151f0 <_fflush_r+0xc>
 801522e:	89a3      	ldrh	r3, [r4, #12]
 8015230:	059b      	lsls	r3, r3, #22
 8015232:	d4dd      	bmi.n	80151f0 <_fflush_r+0xc>
 8015234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015236:	f000 f91f 	bl	8015478 <__retarget_lock_release_recursive>
 801523a:	e7d9      	b.n	80151f0 <_fflush_r+0xc>
 801523c:	4b05      	ldr	r3, [pc, #20]	; (8015254 <_fflush_r+0x70>)
 801523e:	429c      	cmp	r4, r3
 8015240:	d101      	bne.n	8015246 <_fflush_r+0x62>
 8015242:	68ac      	ldr	r4, [r5, #8]
 8015244:	e7df      	b.n	8015206 <_fflush_r+0x22>
 8015246:	4b04      	ldr	r3, [pc, #16]	; (8015258 <_fflush_r+0x74>)
 8015248:	429c      	cmp	r4, r3
 801524a:	bf08      	it	eq
 801524c:	68ec      	ldreq	r4, [r5, #12]
 801524e:	e7da      	b.n	8015206 <_fflush_r+0x22>
 8015250:	0801c2fc 	.word	0x0801c2fc
 8015254:	0801c31c 	.word	0x0801c31c
 8015258:	0801c2dc 	.word	0x0801c2dc

0801525c <std>:
 801525c:	2300      	movs	r3, #0
 801525e:	b510      	push	{r4, lr}
 8015260:	4604      	mov	r4, r0
 8015262:	e9c0 3300 	strd	r3, r3, [r0]
 8015266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801526a:	6083      	str	r3, [r0, #8]
 801526c:	8181      	strh	r1, [r0, #12]
 801526e:	6643      	str	r3, [r0, #100]	; 0x64
 8015270:	81c2      	strh	r2, [r0, #14]
 8015272:	6183      	str	r3, [r0, #24]
 8015274:	4619      	mov	r1, r3
 8015276:	2208      	movs	r2, #8
 8015278:	305c      	adds	r0, #92	; 0x5c
 801527a:	f7fe f9e7 	bl	801364c <memset>
 801527e:	4b05      	ldr	r3, [pc, #20]	; (8015294 <std+0x38>)
 8015280:	6263      	str	r3, [r4, #36]	; 0x24
 8015282:	4b05      	ldr	r3, [pc, #20]	; (8015298 <std+0x3c>)
 8015284:	62a3      	str	r3, [r4, #40]	; 0x28
 8015286:	4b05      	ldr	r3, [pc, #20]	; (801529c <std+0x40>)
 8015288:	62e3      	str	r3, [r4, #44]	; 0x2c
 801528a:	4b05      	ldr	r3, [pc, #20]	; (80152a0 <std+0x44>)
 801528c:	6224      	str	r4, [r4, #32]
 801528e:	6323      	str	r3, [r4, #48]	; 0x30
 8015290:	bd10      	pop	{r4, pc}
 8015292:	bf00      	nop
 8015294:	080162bd 	.word	0x080162bd
 8015298:	080162df 	.word	0x080162df
 801529c:	08016317 	.word	0x08016317
 80152a0:	0801633b 	.word	0x0801633b

080152a4 <_cleanup_r>:
 80152a4:	4901      	ldr	r1, [pc, #4]	; (80152ac <_cleanup_r+0x8>)
 80152a6:	f000 b8c1 	b.w	801542c <_fwalk_reent>
 80152aa:	bf00      	nop
 80152ac:	080151e5 	.word	0x080151e5

080152b0 <__sfmoreglue>:
 80152b0:	b570      	push	{r4, r5, r6, lr}
 80152b2:	1e4a      	subs	r2, r1, #1
 80152b4:	2568      	movs	r5, #104	; 0x68
 80152b6:	4355      	muls	r5, r2
 80152b8:	460e      	mov	r6, r1
 80152ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80152be:	f7fe fa1d 	bl	80136fc <_malloc_r>
 80152c2:	4604      	mov	r4, r0
 80152c4:	b140      	cbz	r0, 80152d8 <__sfmoreglue+0x28>
 80152c6:	2100      	movs	r1, #0
 80152c8:	e9c0 1600 	strd	r1, r6, [r0]
 80152cc:	300c      	adds	r0, #12
 80152ce:	60a0      	str	r0, [r4, #8]
 80152d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80152d4:	f7fe f9ba 	bl	801364c <memset>
 80152d8:	4620      	mov	r0, r4
 80152da:	bd70      	pop	{r4, r5, r6, pc}

080152dc <__sfp_lock_acquire>:
 80152dc:	4801      	ldr	r0, [pc, #4]	; (80152e4 <__sfp_lock_acquire+0x8>)
 80152de:	f000 b8ca 	b.w	8015476 <__retarget_lock_acquire_recursive>
 80152e2:	bf00      	nop
 80152e4:	20041cb4 	.word	0x20041cb4

080152e8 <__sfp_lock_release>:
 80152e8:	4801      	ldr	r0, [pc, #4]	; (80152f0 <__sfp_lock_release+0x8>)
 80152ea:	f000 b8c5 	b.w	8015478 <__retarget_lock_release_recursive>
 80152ee:	bf00      	nop
 80152f0:	20041cb4 	.word	0x20041cb4

080152f4 <__sinit_lock_acquire>:
 80152f4:	4801      	ldr	r0, [pc, #4]	; (80152fc <__sinit_lock_acquire+0x8>)
 80152f6:	f000 b8be 	b.w	8015476 <__retarget_lock_acquire_recursive>
 80152fa:	bf00      	nop
 80152fc:	20041caf 	.word	0x20041caf

08015300 <__sinit_lock_release>:
 8015300:	4801      	ldr	r0, [pc, #4]	; (8015308 <__sinit_lock_release+0x8>)
 8015302:	f000 b8b9 	b.w	8015478 <__retarget_lock_release_recursive>
 8015306:	bf00      	nop
 8015308:	20041caf 	.word	0x20041caf

0801530c <__sinit>:
 801530c:	b510      	push	{r4, lr}
 801530e:	4604      	mov	r4, r0
 8015310:	f7ff fff0 	bl	80152f4 <__sinit_lock_acquire>
 8015314:	69a3      	ldr	r3, [r4, #24]
 8015316:	b11b      	cbz	r3, 8015320 <__sinit+0x14>
 8015318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801531c:	f7ff bff0 	b.w	8015300 <__sinit_lock_release>
 8015320:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015324:	6523      	str	r3, [r4, #80]	; 0x50
 8015326:	4b13      	ldr	r3, [pc, #76]	; (8015374 <__sinit+0x68>)
 8015328:	4a13      	ldr	r2, [pc, #76]	; (8015378 <__sinit+0x6c>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	62a2      	str	r2, [r4, #40]	; 0x28
 801532e:	42a3      	cmp	r3, r4
 8015330:	bf04      	itt	eq
 8015332:	2301      	moveq	r3, #1
 8015334:	61a3      	streq	r3, [r4, #24]
 8015336:	4620      	mov	r0, r4
 8015338:	f000 f820 	bl	801537c <__sfp>
 801533c:	6060      	str	r0, [r4, #4]
 801533e:	4620      	mov	r0, r4
 8015340:	f000 f81c 	bl	801537c <__sfp>
 8015344:	60a0      	str	r0, [r4, #8]
 8015346:	4620      	mov	r0, r4
 8015348:	f000 f818 	bl	801537c <__sfp>
 801534c:	2200      	movs	r2, #0
 801534e:	60e0      	str	r0, [r4, #12]
 8015350:	2104      	movs	r1, #4
 8015352:	6860      	ldr	r0, [r4, #4]
 8015354:	f7ff ff82 	bl	801525c <std>
 8015358:	68a0      	ldr	r0, [r4, #8]
 801535a:	2201      	movs	r2, #1
 801535c:	2109      	movs	r1, #9
 801535e:	f7ff ff7d 	bl	801525c <std>
 8015362:	68e0      	ldr	r0, [r4, #12]
 8015364:	2202      	movs	r2, #2
 8015366:	2112      	movs	r1, #18
 8015368:	f7ff ff78 	bl	801525c <std>
 801536c:	2301      	movs	r3, #1
 801536e:	61a3      	str	r3, [r4, #24]
 8015370:	e7d2      	b.n	8015318 <__sinit+0xc>
 8015372:	bf00      	nop
 8015374:	0801c1d4 	.word	0x0801c1d4
 8015378:	080152a5 	.word	0x080152a5

0801537c <__sfp>:
 801537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801537e:	4607      	mov	r7, r0
 8015380:	f7ff ffac 	bl	80152dc <__sfp_lock_acquire>
 8015384:	4b1e      	ldr	r3, [pc, #120]	; (8015400 <__sfp+0x84>)
 8015386:	681e      	ldr	r6, [r3, #0]
 8015388:	69b3      	ldr	r3, [r6, #24]
 801538a:	b913      	cbnz	r3, 8015392 <__sfp+0x16>
 801538c:	4630      	mov	r0, r6
 801538e:	f7ff ffbd 	bl	801530c <__sinit>
 8015392:	3648      	adds	r6, #72	; 0x48
 8015394:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015398:	3b01      	subs	r3, #1
 801539a:	d503      	bpl.n	80153a4 <__sfp+0x28>
 801539c:	6833      	ldr	r3, [r6, #0]
 801539e:	b30b      	cbz	r3, 80153e4 <__sfp+0x68>
 80153a0:	6836      	ldr	r6, [r6, #0]
 80153a2:	e7f7      	b.n	8015394 <__sfp+0x18>
 80153a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80153a8:	b9d5      	cbnz	r5, 80153e0 <__sfp+0x64>
 80153aa:	4b16      	ldr	r3, [pc, #88]	; (8015404 <__sfp+0x88>)
 80153ac:	60e3      	str	r3, [r4, #12]
 80153ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80153b2:	6665      	str	r5, [r4, #100]	; 0x64
 80153b4:	f000 f85e 	bl	8015474 <__retarget_lock_init_recursive>
 80153b8:	f7ff ff96 	bl	80152e8 <__sfp_lock_release>
 80153bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80153c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80153c4:	6025      	str	r5, [r4, #0]
 80153c6:	61a5      	str	r5, [r4, #24]
 80153c8:	2208      	movs	r2, #8
 80153ca:	4629      	mov	r1, r5
 80153cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80153d0:	f7fe f93c 	bl	801364c <memset>
 80153d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80153d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80153dc:	4620      	mov	r0, r4
 80153de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153e0:	3468      	adds	r4, #104	; 0x68
 80153e2:	e7d9      	b.n	8015398 <__sfp+0x1c>
 80153e4:	2104      	movs	r1, #4
 80153e6:	4638      	mov	r0, r7
 80153e8:	f7ff ff62 	bl	80152b0 <__sfmoreglue>
 80153ec:	4604      	mov	r4, r0
 80153ee:	6030      	str	r0, [r6, #0]
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d1d5      	bne.n	80153a0 <__sfp+0x24>
 80153f4:	f7ff ff78 	bl	80152e8 <__sfp_lock_release>
 80153f8:	230c      	movs	r3, #12
 80153fa:	603b      	str	r3, [r7, #0]
 80153fc:	e7ee      	b.n	80153dc <__sfp+0x60>
 80153fe:	bf00      	nop
 8015400:	0801c1d4 	.word	0x0801c1d4
 8015404:	ffff0001 	.word	0xffff0001

08015408 <fiprintf>:
 8015408:	b40e      	push	{r1, r2, r3}
 801540a:	b503      	push	{r0, r1, lr}
 801540c:	4601      	mov	r1, r0
 801540e:	ab03      	add	r3, sp, #12
 8015410:	4805      	ldr	r0, [pc, #20]	; (8015428 <fiprintf+0x20>)
 8015412:	f853 2b04 	ldr.w	r2, [r3], #4
 8015416:	6800      	ldr	r0, [r0, #0]
 8015418:	9301      	str	r3, [sp, #4]
 801541a:	f000 fdd7 	bl	8015fcc <_vfiprintf_r>
 801541e:	b002      	add	sp, #8
 8015420:	f85d eb04 	ldr.w	lr, [sp], #4
 8015424:	b003      	add	sp, #12
 8015426:	4770      	bx	lr
 8015428:	20000780 	.word	0x20000780

0801542c <_fwalk_reent>:
 801542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015430:	4606      	mov	r6, r0
 8015432:	4688      	mov	r8, r1
 8015434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015438:	2700      	movs	r7, #0
 801543a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801543e:	f1b9 0901 	subs.w	r9, r9, #1
 8015442:	d505      	bpl.n	8015450 <_fwalk_reent+0x24>
 8015444:	6824      	ldr	r4, [r4, #0]
 8015446:	2c00      	cmp	r4, #0
 8015448:	d1f7      	bne.n	801543a <_fwalk_reent+0xe>
 801544a:	4638      	mov	r0, r7
 801544c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015450:	89ab      	ldrh	r3, [r5, #12]
 8015452:	2b01      	cmp	r3, #1
 8015454:	d907      	bls.n	8015466 <_fwalk_reent+0x3a>
 8015456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801545a:	3301      	adds	r3, #1
 801545c:	d003      	beq.n	8015466 <_fwalk_reent+0x3a>
 801545e:	4629      	mov	r1, r5
 8015460:	4630      	mov	r0, r6
 8015462:	47c0      	blx	r8
 8015464:	4307      	orrs	r7, r0
 8015466:	3568      	adds	r5, #104	; 0x68
 8015468:	e7e9      	b.n	801543e <_fwalk_reent+0x12>
	...

0801546c <_localeconv_r>:
 801546c:	4800      	ldr	r0, [pc, #0]	; (8015470 <_localeconv_r+0x4>)
 801546e:	4770      	bx	lr
 8015470:	200008d4 	.word	0x200008d4

08015474 <__retarget_lock_init_recursive>:
 8015474:	4770      	bx	lr

08015476 <__retarget_lock_acquire_recursive>:
 8015476:	4770      	bx	lr

08015478 <__retarget_lock_release_recursive>:
 8015478:	4770      	bx	lr

0801547a <__swhatbuf_r>:
 801547a:	b570      	push	{r4, r5, r6, lr}
 801547c:	460e      	mov	r6, r1
 801547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015482:	2900      	cmp	r1, #0
 8015484:	b096      	sub	sp, #88	; 0x58
 8015486:	4614      	mov	r4, r2
 8015488:	461d      	mov	r5, r3
 801548a:	da07      	bge.n	801549c <__swhatbuf_r+0x22>
 801548c:	2300      	movs	r3, #0
 801548e:	602b      	str	r3, [r5, #0]
 8015490:	89b3      	ldrh	r3, [r6, #12]
 8015492:	061a      	lsls	r2, r3, #24
 8015494:	d410      	bmi.n	80154b8 <__swhatbuf_r+0x3e>
 8015496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801549a:	e00e      	b.n	80154ba <__swhatbuf_r+0x40>
 801549c:	466a      	mov	r2, sp
 801549e:	f000 ff7b 	bl	8016398 <_fstat_r>
 80154a2:	2800      	cmp	r0, #0
 80154a4:	dbf2      	blt.n	801548c <__swhatbuf_r+0x12>
 80154a6:	9a01      	ldr	r2, [sp, #4]
 80154a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80154ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80154b0:	425a      	negs	r2, r3
 80154b2:	415a      	adcs	r2, r3
 80154b4:	602a      	str	r2, [r5, #0]
 80154b6:	e7ee      	b.n	8015496 <__swhatbuf_r+0x1c>
 80154b8:	2340      	movs	r3, #64	; 0x40
 80154ba:	2000      	movs	r0, #0
 80154bc:	6023      	str	r3, [r4, #0]
 80154be:	b016      	add	sp, #88	; 0x58
 80154c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080154c4 <__smakebuf_r>:
 80154c4:	898b      	ldrh	r3, [r1, #12]
 80154c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154c8:	079d      	lsls	r5, r3, #30
 80154ca:	4606      	mov	r6, r0
 80154cc:	460c      	mov	r4, r1
 80154ce:	d507      	bpl.n	80154e0 <__smakebuf_r+0x1c>
 80154d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80154d4:	6023      	str	r3, [r4, #0]
 80154d6:	6123      	str	r3, [r4, #16]
 80154d8:	2301      	movs	r3, #1
 80154da:	6163      	str	r3, [r4, #20]
 80154dc:	b002      	add	sp, #8
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	ab01      	add	r3, sp, #4
 80154e2:	466a      	mov	r2, sp
 80154e4:	f7ff ffc9 	bl	801547a <__swhatbuf_r>
 80154e8:	9900      	ldr	r1, [sp, #0]
 80154ea:	4605      	mov	r5, r0
 80154ec:	4630      	mov	r0, r6
 80154ee:	f7fe f905 	bl	80136fc <_malloc_r>
 80154f2:	b948      	cbnz	r0, 8015508 <__smakebuf_r+0x44>
 80154f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154f8:	059a      	lsls	r2, r3, #22
 80154fa:	d4ef      	bmi.n	80154dc <__smakebuf_r+0x18>
 80154fc:	f023 0303 	bic.w	r3, r3, #3
 8015500:	f043 0302 	orr.w	r3, r3, #2
 8015504:	81a3      	strh	r3, [r4, #12]
 8015506:	e7e3      	b.n	80154d0 <__smakebuf_r+0xc>
 8015508:	4b0d      	ldr	r3, [pc, #52]	; (8015540 <__smakebuf_r+0x7c>)
 801550a:	62b3      	str	r3, [r6, #40]	; 0x28
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	6020      	str	r0, [r4, #0]
 8015510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015514:	81a3      	strh	r3, [r4, #12]
 8015516:	9b00      	ldr	r3, [sp, #0]
 8015518:	6163      	str	r3, [r4, #20]
 801551a:	9b01      	ldr	r3, [sp, #4]
 801551c:	6120      	str	r0, [r4, #16]
 801551e:	b15b      	cbz	r3, 8015538 <__smakebuf_r+0x74>
 8015520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015524:	4630      	mov	r0, r6
 8015526:	f000 ff49 	bl	80163bc <_isatty_r>
 801552a:	b128      	cbz	r0, 8015538 <__smakebuf_r+0x74>
 801552c:	89a3      	ldrh	r3, [r4, #12]
 801552e:	f023 0303 	bic.w	r3, r3, #3
 8015532:	f043 0301 	orr.w	r3, r3, #1
 8015536:	81a3      	strh	r3, [r4, #12]
 8015538:	89a0      	ldrh	r0, [r4, #12]
 801553a:	4305      	orrs	r5, r0
 801553c:	81a5      	strh	r5, [r4, #12]
 801553e:	e7cd      	b.n	80154dc <__smakebuf_r+0x18>
 8015540:	080152a5 	.word	0x080152a5

08015544 <__malloc_lock>:
 8015544:	4801      	ldr	r0, [pc, #4]	; (801554c <__malloc_lock+0x8>)
 8015546:	f7ff bf96 	b.w	8015476 <__retarget_lock_acquire_recursive>
 801554a:	bf00      	nop
 801554c:	20041cb0 	.word	0x20041cb0

08015550 <__malloc_unlock>:
 8015550:	4801      	ldr	r0, [pc, #4]	; (8015558 <__malloc_unlock+0x8>)
 8015552:	f7ff bf91 	b.w	8015478 <__retarget_lock_release_recursive>
 8015556:	bf00      	nop
 8015558:	20041cb0 	.word	0x20041cb0

0801555c <_Balloc>:
 801555c:	b570      	push	{r4, r5, r6, lr}
 801555e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015560:	4604      	mov	r4, r0
 8015562:	460d      	mov	r5, r1
 8015564:	b976      	cbnz	r6, 8015584 <_Balloc+0x28>
 8015566:	2010      	movs	r0, #16
 8015568:	f7fe f85a 	bl	8013620 <malloc>
 801556c:	4602      	mov	r2, r0
 801556e:	6260      	str	r0, [r4, #36]	; 0x24
 8015570:	b920      	cbnz	r0, 801557c <_Balloc+0x20>
 8015572:	4b18      	ldr	r3, [pc, #96]	; (80155d4 <_Balloc+0x78>)
 8015574:	4818      	ldr	r0, [pc, #96]	; (80155d8 <_Balloc+0x7c>)
 8015576:	2166      	movs	r1, #102	; 0x66
 8015578:	f7fe ff18 	bl	80143ac <__assert_func>
 801557c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015580:	6006      	str	r6, [r0, #0]
 8015582:	60c6      	str	r6, [r0, #12]
 8015584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015586:	68f3      	ldr	r3, [r6, #12]
 8015588:	b183      	cbz	r3, 80155ac <_Balloc+0x50>
 801558a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015592:	b9b8      	cbnz	r0, 80155c4 <_Balloc+0x68>
 8015594:	2101      	movs	r1, #1
 8015596:	fa01 f605 	lsl.w	r6, r1, r5
 801559a:	1d72      	adds	r2, r6, #5
 801559c:	0092      	lsls	r2, r2, #2
 801559e:	4620      	mov	r0, r4
 80155a0:	f000 fb5a 	bl	8015c58 <_calloc_r>
 80155a4:	b160      	cbz	r0, 80155c0 <_Balloc+0x64>
 80155a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155aa:	e00e      	b.n	80155ca <_Balloc+0x6e>
 80155ac:	2221      	movs	r2, #33	; 0x21
 80155ae:	2104      	movs	r1, #4
 80155b0:	4620      	mov	r0, r4
 80155b2:	f000 fb51 	bl	8015c58 <_calloc_r>
 80155b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155b8:	60f0      	str	r0, [r6, #12]
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1e4      	bne.n	801558a <_Balloc+0x2e>
 80155c0:	2000      	movs	r0, #0
 80155c2:	bd70      	pop	{r4, r5, r6, pc}
 80155c4:	6802      	ldr	r2, [r0, #0]
 80155c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155ca:	2300      	movs	r3, #0
 80155cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155d0:	e7f7      	b.n	80155c2 <_Balloc+0x66>
 80155d2:	bf00      	nop
 80155d4:	0801c255 	.word	0x0801c255
 80155d8:	0801c33c 	.word	0x0801c33c

080155dc <_Bfree>:
 80155dc:	b570      	push	{r4, r5, r6, lr}
 80155de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80155e0:	4605      	mov	r5, r0
 80155e2:	460c      	mov	r4, r1
 80155e4:	b976      	cbnz	r6, 8015604 <_Bfree+0x28>
 80155e6:	2010      	movs	r0, #16
 80155e8:	f7fe f81a 	bl	8013620 <malloc>
 80155ec:	4602      	mov	r2, r0
 80155ee:	6268      	str	r0, [r5, #36]	; 0x24
 80155f0:	b920      	cbnz	r0, 80155fc <_Bfree+0x20>
 80155f2:	4b09      	ldr	r3, [pc, #36]	; (8015618 <_Bfree+0x3c>)
 80155f4:	4809      	ldr	r0, [pc, #36]	; (801561c <_Bfree+0x40>)
 80155f6:	218a      	movs	r1, #138	; 0x8a
 80155f8:	f7fe fed8 	bl	80143ac <__assert_func>
 80155fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015600:	6006      	str	r6, [r0, #0]
 8015602:	60c6      	str	r6, [r0, #12]
 8015604:	b13c      	cbz	r4, 8015616 <_Bfree+0x3a>
 8015606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015608:	6862      	ldr	r2, [r4, #4]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015610:	6021      	str	r1, [r4, #0]
 8015612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	0801c255 	.word	0x0801c255
 801561c:	0801c33c 	.word	0x0801c33c

08015620 <__multadd>:
 8015620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015624:	690e      	ldr	r6, [r1, #16]
 8015626:	4607      	mov	r7, r0
 8015628:	4698      	mov	r8, r3
 801562a:	460c      	mov	r4, r1
 801562c:	f101 0014 	add.w	r0, r1, #20
 8015630:	2300      	movs	r3, #0
 8015632:	6805      	ldr	r5, [r0, #0]
 8015634:	b2a9      	uxth	r1, r5
 8015636:	fb02 8101 	mla	r1, r2, r1, r8
 801563a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801563e:	0c2d      	lsrs	r5, r5, #16
 8015640:	fb02 c505 	mla	r5, r2, r5, ip
 8015644:	b289      	uxth	r1, r1
 8015646:	3301      	adds	r3, #1
 8015648:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801564c:	429e      	cmp	r6, r3
 801564e:	f840 1b04 	str.w	r1, [r0], #4
 8015652:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015656:	dcec      	bgt.n	8015632 <__multadd+0x12>
 8015658:	f1b8 0f00 	cmp.w	r8, #0
 801565c:	d022      	beq.n	80156a4 <__multadd+0x84>
 801565e:	68a3      	ldr	r3, [r4, #8]
 8015660:	42b3      	cmp	r3, r6
 8015662:	dc19      	bgt.n	8015698 <__multadd+0x78>
 8015664:	6861      	ldr	r1, [r4, #4]
 8015666:	4638      	mov	r0, r7
 8015668:	3101      	adds	r1, #1
 801566a:	f7ff ff77 	bl	801555c <_Balloc>
 801566e:	4605      	mov	r5, r0
 8015670:	b928      	cbnz	r0, 801567e <__multadd+0x5e>
 8015672:	4602      	mov	r2, r0
 8015674:	4b0d      	ldr	r3, [pc, #52]	; (80156ac <__multadd+0x8c>)
 8015676:	480e      	ldr	r0, [pc, #56]	; (80156b0 <__multadd+0x90>)
 8015678:	21b5      	movs	r1, #181	; 0xb5
 801567a:	f7fe fe97 	bl	80143ac <__assert_func>
 801567e:	6922      	ldr	r2, [r4, #16]
 8015680:	3202      	adds	r2, #2
 8015682:	f104 010c 	add.w	r1, r4, #12
 8015686:	0092      	lsls	r2, r2, #2
 8015688:	300c      	adds	r0, #12
 801568a:	f7fd ffd1 	bl	8013630 <memcpy>
 801568e:	4621      	mov	r1, r4
 8015690:	4638      	mov	r0, r7
 8015692:	f7ff ffa3 	bl	80155dc <_Bfree>
 8015696:	462c      	mov	r4, r5
 8015698:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801569c:	3601      	adds	r6, #1
 801569e:	f8c3 8014 	str.w	r8, [r3, #20]
 80156a2:	6126      	str	r6, [r4, #16]
 80156a4:	4620      	mov	r0, r4
 80156a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156aa:	bf00      	nop
 80156ac:	0801c2cb 	.word	0x0801c2cb
 80156b0:	0801c33c 	.word	0x0801c33c

080156b4 <__hi0bits>:
 80156b4:	0c03      	lsrs	r3, r0, #16
 80156b6:	041b      	lsls	r3, r3, #16
 80156b8:	b9d3      	cbnz	r3, 80156f0 <__hi0bits+0x3c>
 80156ba:	0400      	lsls	r0, r0, #16
 80156bc:	2310      	movs	r3, #16
 80156be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80156c2:	bf04      	itt	eq
 80156c4:	0200      	lsleq	r0, r0, #8
 80156c6:	3308      	addeq	r3, #8
 80156c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80156cc:	bf04      	itt	eq
 80156ce:	0100      	lsleq	r0, r0, #4
 80156d0:	3304      	addeq	r3, #4
 80156d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80156d6:	bf04      	itt	eq
 80156d8:	0080      	lsleq	r0, r0, #2
 80156da:	3302      	addeq	r3, #2
 80156dc:	2800      	cmp	r0, #0
 80156de:	db05      	blt.n	80156ec <__hi0bits+0x38>
 80156e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80156e4:	f103 0301 	add.w	r3, r3, #1
 80156e8:	bf08      	it	eq
 80156ea:	2320      	moveq	r3, #32
 80156ec:	4618      	mov	r0, r3
 80156ee:	4770      	bx	lr
 80156f0:	2300      	movs	r3, #0
 80156f2:	e7e4      	b.n	80156be <__hi0bits+0xa>

080156f4 <__lo0bits>:
 80156f4:	6803      	ldr	r3, [r0, #0]
 80156f6:	f013 0207 	ands.w	r2, r3, #7
 80156fa:	4601      	mov	r1, r0
 80156fc:	d00b      	beq.n	8015716 <__lo0bits+0x22>
 80156fe:	07da      	lsls	r2, r3, #31
 8015700:	d424      	bmi.n	801574c <__lo0bits+0x58>
 8015702:	0798      	lsls	r0, r3, #30
 8015704:	bf49      	itett	mi
 8015706:	085b      	lsrmi	r3, r3, #1
 8015708:	089b      	lsrpl	r3, r3, #2
 801570a:	2001      	movmi	r0, #1
 801570c:	600b      	strmi	r3, [r1, #0]
 801570e:	bf5c      	itt	pl
 8015710:	600b      	strpl	r3, [r1, #0]
 8015712:	2002      	movpl	r0, #2
 8015714:	4770      	bx	lr
 8015716:	b298      	uxth	r0, r3
 8015718:	b9b0      	cbnz	r0, 8015748 <__lo0bits+0x54>
 801571a:	0c1b      	lsrs	r3, r3, #16
 801571c:	2010      	movs	r0, #16
 801571e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015722:	bf04      	itt	eq
 8015724:	0a1b      	lsreq	r3, r3, #8
 8015726:	3008      	addeq	r0, #8
 8015728:	071a      	lsls	r2, r3, #28
 801572a:	bf04      	itt	eq
 801572c:	091b      	lsreq	r3, r3, #4
 801572e:	3004      	addeq	r0, #4
 8015730:	079a      	lsls	r2, r3, #30
 8015732:	bf04      	itt	eq
 8015734:	089b      	lsreq	r3, r3, #2
 8015736:	3002      	addeq	r0, #2
 8015738:	07da      	lsls	r2, r3, #31
 801573a:	d403      	bmi.n	8015744 <__lo0bits+0x50>
 801573c:	085b      	lsrs	r3, r3, #1
 801573e:	f100 0001 	add.w	r0, r0, #1
 8015742:	d005      	beq.n	8015750 <__lo0bits+0x5c>
 8015744:	600b      	str	r3, [r1, #0]
 8015746:	4770      	bx	lr
 8015748:	4610      	mov	r0, r2
 801574a:	e7e8      	b.n	801571e <__lo0bits+0x2a>
 801574c:	2000      	movs	r0, #0
 801574e:	4770      	bx	lr
 8015750:	2020      	movs	r0, #32
 8015752:	4770      	bx	lr

08015754 <__i2b>:
 8015754:	b510      	push	{r4, lr}
 8015756:	460c      	mov	r4, r1
 8015758:	2101      	movs	r1, #1
 801575a:	f7ff feff 	bl	801555c <_Balloc>
 801575e:	4602      	mov	r2, r0
 8015760:	b928      	cbnz	r0, 801576e <__i2b+0x1a>
 8015762:	4b05      	ldr	r3, [pc, #20]	; (8015778 <__i2b+0x24>)
 8015764:	4805      	ldr	r0, [pc, #20]	; (801577c <__i2b+0x28>)
 8015766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801576a:	f7fe fe1f 	bl	80143ac <__assert_func>
 801576e:	2301      	movs	r3, #1
 8015770:	6144      	str	r4, [r0, #20]
 8015772:	6103      	str	r3, [r0, #16]
 8015774:	bd10      	pop	{r4, pc}
 8015776:	bf00      	nop
 8015778:	0801c2cb 	.word	0x0801c2cb
 801577c:	0801c33c 	.word	0x0801c33c

08015780 <__multiply>:
 8015780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015784:	4614      	mov	r4, r2
 8015786:	690a      	ldr	r2, [r1, #16]
 8015788:	6923      	ldr	r3, [r4, #16]
 801578a:	429a      	cmp	r2, r3
 801578c:	bfb8      	it	lt
 801578e:	460b      	movlt	r3, r1
 8015790:	460d      	mov	r5, r1
 8015792:	bfbc      	itt	lt
 8015794:	4625      	movlt	r5, r4
 8015796:	461c      	movlt	r4, r3
 8015798:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801579c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80157a0:	68ab      	ldr	r3, [r5, #8]
 80157a2:	6869      	ldr	r1, [r5, #4]
 80157a4:	eb0a 0709 	add.w	r7, sl, r9
 80157a8:	42bb      	cmp	r3, r7
 80157aa:	b085      	sub	sp, #20
 80157ac:	bfb8      	it	lt
 80157ae:	3101      	addlt	r1, #1
 80157b0:	f7ff fed4 	bl	801555c <_Balloc>
 80157b4:	b930      	cbnz	r0, 80157c4 <__multiply+0x44>
 80157b6:	4602      	mov	r2, r0
 80157b8:	4b42      	ldr	r3, [pc, #264]	; (80158c4 <__multiply+0x144>)
 80157ba:	4843      	ldr	r0, [pc, #268]	; (80158c8 <__multiply+0x148>)
 80157bc:	f240 115d 	movw	r1, #349	; 0x15d
 80157c0:	f7fe fdf4 	bl	80143ac <__assert_func>
 80157c4:	f100 0614 	add.w	r6, r0, #20
 80157c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80157cc:	4633      	mov	r3, r6
 80157ce:	2200      	movs	r2, #0
 80157d0:	4543      	cmp	r3, r8
 80157d2:	d31e      	bcc.n	8015812 <__multiply+0x92>
 80157d4:	f105 0c14 	add.w	ip, r5, #20
 80157d8:	f104 0314 	add.w	r3, r4, #20
 80157dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80157e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80157e4:	9202      	str	r2, [sp, #8]
 80157e6:	ebac 0205 	sub.w	r2, ip, r5
 80157ea:	3a15      	subs	r2, #21
 80157ec:	f022 0203 	bic.w	r2, r2, #3
 80157f0:	3204      	adds	r2, #4
 80157f2:	f105 0115 	add.w	r1, r5, #21
 80157f6:	458c      	cmp	ip, r1
 80157f8:	bf38      	it	cc
 80157fa:	2204      	movcc	r2, #4
 80157fc:	9201      	str	r2, [sp, #4]
 80157fe:	9a02      	ldr	r2, [sp, #8]
 8015800:	9303      	str	r3, [sp, #12]
 8015802:	429a      	cmp	r2, r3
 8015804:	d808      	bhi.n	8015818 <__multiply+0x98>
 8015806:	2f00      	cmp	r7, #0
 8015808:	dc55      	bgt.n	80158b6 <__multiply+0x136>
 801580a:	6107      	str	r7, [r0, #16]
 801580c:	b005      	add	sp, #20
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	f843 2b04 	str.w	r2, [r3], #4
 8015816:	e7db      	b.n	80157d0 <__multiply+0x50>
 8015818:	f8b3 a000 	ldrh.w	sl, [r3]
 801581c:	f1ba 0f00 	cmp.w	sl, #0
 8015820:	d020      	beq.n	8015864 <__multiply+0xe4>
 8015822:	f105 0e14 	add.w	lr, r5, #20
 8015826:	46b1      	mov	r9, r6
 8015828:	2200      	movs	r2, #0
 801582a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801582e:	f8d9 b000 	ldr.w	fp, [r9]
 8015832:	b2a1      	uxth	r1, r4
 8015834:	fa1f fb8b 	uxth.w	fp, fp
 8015838:	fb0a b101 	mla	r1, sl, r1, fp
 801583c:	4411      	add	r1, r2
 801583e:	f8d9 2000 	ldr.w	r2, [r9]
 8015842:	0c24      	lsrs	r4, r4, #16
 8015844:	0c12      	lsrs	r2, r2, #16
 8015846:	fb0a 2404 	mla	r4, sl, r4, r2
 801584a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801584e:	b289      	uxth	r1, r1
 8015850:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015854:	45f4      	cmp	ip, lr
 8015856:	f849 1b04 	str.w	r1, [r9], #4
 801585a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801585e:	d8e4      	bhi.n	801582a <__multiply+0xaa>
 8015860:	9901      	ldr	r1, [sp, #4]
 8015862:	5072      	str	r2, [r6, r1]
 8015864:	9a03      	ldr	r2, [sp, #12]
 8015866:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801586a:	3304      	adds	r3, #4
 801586c:	f1b9 0f00 	cmp.w	r9, #0
 8015870:	d01f      	beq.n	80158b2 <__multiply+0x132>
 8015872:	6834      	ldr	r4, [r6, #0]
 8015874:	f105 0114 	add.w	r1, r5, #20
 8015878:	46b6      	mov	lr, r6
 801587a:	f04f 0a00 	mov.w	sl, #0
 801587e:	880a      	ldrh	r2, [r1, #0]
 8015880:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015884:	fb09 b202 	mla	r2, r9, r2, fp
 8015888:	4492      	add	sl, r2
 801588a:	b2a4      	uxth	r4, r4
 801588c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015890:	f84e 4b04 	str.w	r4, [lr], #4
 8015894:	f851 4b04 	ldr.w	r4, [r1], #4
 8015898:	f8be 2000 	ldrh.w	r2, [lr]
 801589c:	0c24      	lsrs	r4, r4, #16
 801589e:	fb09 2404 	mla	r4, r9, r4, r2
 80158a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80158a6:	458c      	cmp	ip, r1
 80158a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80158ac:	d8e7      	bhi.n	801587e <__multiply+0xfe>
 80158ae:	9a01      	ldr	r2, [sp, #4]
 80158b0:	50b4      	str	r4, [r6, r2]
 80158b2:	3604      	adds	r6, #4
 80158b4:	e7a3      	b.n	80157fe <__multiply+0x7e>
 80158b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d1a5      	bne.n	801580a <__multiply+0x8a>
 80158be:	3f01      	subs	r7, #1
 80158c0:	e7a1      	b.n	8015806 <__multiply+0x86>
 80158c2:	bf00      	nop
 80158c4:	0801c2cb 	.word	0x0801c2cb
 80158c8:	0801c33c 	.word	0x0801c33c

080158cc <__pow5mult>:
 80158cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158d0:	4615      	mov	r5, r2
 80158d2:	f012 0203 	ands.w	r2, r2, #3
 80158d6:	4606      	mov	r6, r0
 80158d8:	460f      	mov	r7, r1
 80158da:	d007      	beq.n	80158ec <__pow5mult+0x20>
 80158dc:	4c25      	ldr	r4, [pc, #148]	; (8015974 <__pow5mult+0xa8>)
 80158de:	3a01      	subs	r2, #1
 80158e0:	2300      	movs	r3, #0
 80158e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80158e6:	f7ff fe9b 	bl	8015620 <__multadd>
 80158ea:	4607      	mov	r7, r0
 80158ec:	10ad      	asrs	r5, r5, #2
 80158ee:	d03d      	beq.n	801596c <__pow5mult+0xa0>
 80158f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80158f2:	b97c      	cbnz	r4, 8015914 <__pow5mult+0x48>
 80158f4:	2010      	movs	r0, #16
 80158f6:	f7fd fe93 	bl	8013620 <malloc>
 80158fa:	4602      	mov	r2, r0
 80158fc:	6270      	str	r0, [r6, #36]	; 0x24
 80158fe:	b928      	cbnz	r0, 801590c <__pow5mult+0x40>
 8015900:	4b1d      	ldr	r3, [pc, #116]	; (8015978 <__pow5mult+0xac>)
 8015902:	481e      	ldr	r0, [pc, #120]	; (801597c <__pow5mult+0xb0>)
 8015904:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015908:	f7fe fd50 	bl	80143ac <__assert_func>
 801590c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015910:	6004      	str	r4, [r0, #0]
 8015912:	60c4      	str	r4, [r0, #12]
 8015914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801591c:	b94c      	cbnz	r4, 8015932 <__pow5mult+0x66>
 801591e:	f240 2171 	movw	r1, #625	; 0x271
 8015922:	4630      	mov	r0, r6
 8015924:	f7ff ff16 	bl	8015754 <__i2b>
 8015928:	2300      	movs	r3, #0
 801592a:	f8c8 0008 	str.w	r0, [r8, #8]
 801592e:	4604      	mov	r4, r0
 8015930:	6003      	str	r3, [r0, #0]
 8015932:	f04f 0900 	mov.w	r9, #0
 8015936:	07eb      	lsls	r3, r5, #31
 8015938:	d50a      	bpl.n	8015950 <__pow5mult+0x84>
 801593a:	4639      	mov	r1, r7
 801593c:	4622      	mov	r2, r4
 801593e:	4630      	mov	r0, r6
 8015940:	f7ff ff1e 	bl	8015780 <__multiply>
 8015944:	4639      	mov	r1, r7
 8015946:	4680      	mov	r8, r0
 8015948:	4630      	mov	r0, r6
 801594a:	f7ff fe47 	bl	80155dc <_Bfree>
 801594e:	4647      	mov	r7, r8
 8015950:	106d      	asrs	r5, r5, #1
 8015952:	d00b      	beq.n	801596c <__pow5mult+0xa0>
 8015954:	6820      	ldr	r0, [r4, #0]
 8015956:	b938      	cbnz	r0, 8015968 <__pow5mult+0x9c>
 8015958:	4622      	mov	r2, r4
 801595a:	4621      	mov	r1, r4
 801595c:	4630      	mov	r0, r6
 801595e:	f7ff ff0f 	bl	8015780 <__multiply>
 8015962:	6020      	str	r0, [r4, #0]
 8015964:	f8c0 9000 	str.w	r9, [r0]
 8015968:	4604      	mov	r4, r0
 801596a:	e7e4      	b.n	8015936 <__pow5mult+0x6a>
 801596c:	4638      	mov	r0, r7
 801596e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015972:	bf00      	nop
 8015974:	0801c490 	.word	0x0801c490
 8015978:	0801c255 	.word	0x0801c255
 801597c:	0801c33c 	.word	0x0801c33c

08015980 <__lshift>:
 8015980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015984:	460c      	mov	r4, r1
 8015986:	6849      	ldr	r1, [r1, #4]
 8015988:	6923      	ldr	r3, [r4, #16]
 801598a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801598e:	68a3      	ldr	r3, [r4, #8]
 8015990:	4607      	mov	r7, r0
 8015992:	4691      	mov	r9, r2
 8015994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015998:	f108 0601 	add.w	r6, r8, #1
 801599c:	42b3      	cmp	r3, r6
 801599e:	db0b      	blt.n	80159b8 <__lshift+0x38>
 80159a0:	4638      	mov	r0, r7
 80159a2:	f7ff fddb 	bl	801555c <_Balloc>
 80159a6:	4605      	mov	r5, r0
 80159a8:	b948      	cbnz	r0, 80159be <__lshift+0x3e>
 80159aa:	4602      	mov	r2, r0
 80159ac:	4b28      	ldr	r3, [pc, #160]	; (8015a50 <__lshift+0xd0>)
 80159ae:	4829      	ldr	r0, [pc, #164]	; (8015a54 <__lshift+0xd4>)
 80159b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80159b4:	f7fe fcfa 	bl	80143ac <__assert_func>
 80159b8:	3101      	adds	r1, #1
 80159ba:	005b      	lsls	r3, r3, #1
 80159bc:	e7ee      	b.n	801599c <__lshift+0x1c>
 80159be:	2300      	movs	r3, #0
 80159c0:	f100 0114 	add.w	r1, r0, #20
 80159c4:	f100 0210 	add.w	r2, r0, #16
 80159c8:	4618      	mov	r0, r3
 80159ca:	4553      	cmp	r3, sl
 80159cc:	db33      	blt.n	8015a36 <__lshift+0xb6>
 80159ce:	6920      	ldr	r0, [r4, #16]
 80159d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159d4:	f104 0314 	add.w	r3, r4, #20
 80159d8:	f019 091f 	ands.w	r9, r9, #31
 80159dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80159e4:	d02b      	beq.n	8015a3e <__lshift+0xbe>
 80159e6:	f1c9 0e20 	rsb	lr, r9, #32
 80159ea:	468a      	mov	sl, r1
 80159ec:	2200      	movs	r2, #0
 80159ee:	6818      	ldr	r0, [r3, #0]
 80159f0:	fa00 f009 	lsl.w	r0, r0, r9
 80159f4:	4302      	orrs	r2, r0
 80159f6:	f84a 2b04 	str.w	r2, [sl], #4
 80159fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80159fe:	459c      	cmp	ip, r3
 8015a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8015a04:	d8f3      	bhi.n	80159ee <__lshift+0x6e>
 8015a06:	ebac 0304 	sub.w	r3, ip, r4
 8015a0a:	3b15      	subs	r3, #21
 8015a0c:	f023 0303 	bic.w	r3, r3, #3
 8015a10:	3304      	adds	r3, #4
 8015a12:	f104 0015 	add.w	r0, r4, #21
 8015a16:	4584      	cmp	ip, r0
 8015a18:	bf38      	it	cc
 8015a1a:	2304      	movcc	r3, #4
 8015a1c:	50ca      	str	r2, [r1, r3]
 8015a1e:	b10a      	cbz	r2, 8015a24 <__lshift+0xa4>
 8015a20:	f108 0602 	add.w	r6, r8, #2
 8015a24:	3e01      	subs	r6, #1
 8015a26:	4638      	mov	r0, r7
 8015a28:	612e      	str	r6, [r5, #16]
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	f7ff fdd6 	bl	80155dc <_Bfree>
 8015a30:	4628      	mov	r0, r5
 8015a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	e7c5      	b.n	80159ca <__lshift+0x4a>
 8015a3e:	3904      	subs	r1, #4
 8015a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a48:	459c      	cmp	ip, r3
 8015a4a:	d8f9      	bhi.n	8015a40 <__lshift+0xc0>
 8015a4c:	e7ea      	b.n	8015a24 <__lshift+0xa4>
 8015a4e:	bf00      	nop
 8015a50:	0801c2cb 	.word	0x0801c2cb
 8015a54:	0801c33c 	.word	0x0801c33c

08015a58 <__mcmp>:
 8015a58:	b530      	push	{r4, r5, lr}
 8015a5a:	6902      	ldr	r2, [r0, #16]
 8015a5c:	690c      	ldr	r4, [r1, #16]
 8015a5e:	1b12      	subs	r2, r2, r4
 8015a60:	d10e      	bne.n	8015a80 <__mcmp+0x28>
 8015a62:	f100 0314 	add.w	r3, r0, #20
 8015a66:	3114      	adds	r1, #20
 8015a68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015a6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015a70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015a74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015a78:	42a5      	cmp	r5, r4
 8015a7a:	d003      	beq.n	8015a84 <__mcmp+0x2c>
 8015a7c:	d305      	bcc.n	8015a8a <__mcmp+0x32>
 8015a7e:	2201      	movs	r2, #1
 8015a80:	4610      	mov	r0, r2
 8015a82:	bd30      	pop	{r4, r5, pc}
 8015a84:	4283      	cmp	r3, r0
 8015a86:	d3f3      	bcc.n	8015a70 <__mcmp+0x18>
 8015a88:	e7fa      	b.n	8015a80 <__mcmp+0x28>
 8015a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015a8e:	e7f7      	b.n	8015a80 <__mcmp+0x28>

08015a90 <__mdiff>:
 8015a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a94:	460c      	mov	r4, r1
 8015a96:	4606      	mov	r6, r0
 8015a98:	4611      	mov	r1, r2
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	4617      	mov	r7, r2
 8015a9e:	f7ff ffdb 	bl	8015a58 <__mcmp>
 8015aa2:	1e05      	subs	r5, r0, #0
 8015aa4:	d110      	bne.n	8015ac8 <__mdiff+0x38>
 8015aa6:	4629      	mov	r1, r5
 8015aa8:	4630      	mov	r0, r6
 8015aaa:	f7ff fd57 	bl	801555c <_Balloc>
 8015aae:	b930      	cbnz	r0, 8015abe <__mdiff+0x2e>
 8015ab0:	4b39      	ldr	r3, [pc, #228]	; (8015b98 <__mdiff+0x108>)
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	f240 2132 	movw	r1, #562	; 0x232
 8015ab8:	4838      	ldr	r0, [pc, #224]	; (8015b9c <__mdiff+0x10c>)
 8015aba:	f7fe fc77 	bl	80143ac <__assert_func>
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac8:	bfa4      	itt	ge
 8015aca:	463b      	movge	r3, r7
 8015acc:	4627      	movge	r7, r4
 8015ace:	4630      	mov	r0, r6
 8015ad0:	6879      	ldr	r1, [r7, #4]
 8015ad2:	bfa6      	itte	ge
 8015ad4:	461c      	movge	r4, r3
 8015ad6:	2500      	movge	r5, #0
 8015ad8:	2501      	movlt	r5, #1
 8015ada:	f7ff fd3f 	bl	801555c <_Balloc>
 8015ade:	b920      	cbnz	r0, 8015aea <__mdiff+0x5a>
 8015ae0:	4b2d      	ldr	r3, [pc, #180]	; (8015b98 <__mdiff+0x108>)
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015ae8:	e7e6      	b.n	8015ab8 <__mdiff+0x28>
 8015aea:	693e      	ldr	r6, [r7, #16]
 8015aec:	60c5      	str	r5, [r0, #12]
 8015aee:	6925      	ldr	r5, [r4, #16]
 8015af0:	f107 0114 	add.w	r1, r7, #20
 8015af4:	f104 0914 	add.w	r9, r4, #20
 8015af8:	f100 0e14 	add.w	lr, r0, #20
 8015afc:	f107 0210 	add.w	r2, r7, #16
 8015b00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015b04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015b08:	46f2      	mov	sl, lr
 8015b0a:	2700      	movs	r7, #0
 8015b0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015b14:	fa1f f883 	uxth.w	r8, r3
 8015b18:	fa17 f78b 	uxtah	r7, r7, fp
 8015b1c:	0c1b      	lsrs	r3, r3, #16
 8015b1e:	eba7 0808 	sub.w	r8, r7, r8
 8015b22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b2a:	fa1f f888 	uxth.w	r8, r8
 8015b2e:	141f      	asrs	r7, r3, #16
 8015b30:	454d      	cmp	r5, r9
 8015b32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b36:	f84a 3b04 	str.w	r3, [sl], #4
 8015b3a:	d8e7      	bhi.n	8015b0c <__mdiff+0x7c>
 8015b3c:	1b2b      	subs	r3, r5, r4
 8015b3e:	3b15      	subs	r3, #21
 8015b40:	f023 0303 	bic.w	r3, r3, #3
 8015b44:	3304      	adds	r3, #4
 8015b46:	3415      	adds	r4, #21
 8015b48:	42a5      	cmp	r5, r4
 8015b4a:	bf38      	it	cc
 8015b4c:	2304      	movcc	r3, #4
 8015b4e:	4419      	add	r1, r3
 8015b50:	4473      	add	r3, lr
 8015b52:	469e      	mov	lr, r3
 8015b54:	460d      	mov	r5, r1
 8015b56:	4565      	cmp	r5, ip
 8015b58:	d30e      	bcc.n	8015b78 <__mdiff+0xe8>
 8015b5a:	f10c 0203 	add.w	r2, ip, #3
 8015b5e:	1a52      	subs	r2, r2, r1
 8015b60:	f022 0203 	bic.w	r2, r2, #3
 8015b64:	3903      	subs	r1, #3
 8015b66:	458c      	cmp	ip, r1
 8015b68:	bf38      	it	cc
 8015b6a:	2200      	movcc	r2, #0
 8015b6c:	441a      	add	r2, r3
 8015b6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015b72:	b17b      	cbz	r3, 8015b94 <__mdiff+0x104>
 8015b74:	6106      	str	r6, [r0, #16]
 8015b76:	e7a5      	b.n	8015ac4 <__mdiff+0x34>
 8015b78:	f855 8b04 	ldr.w	r8, [r5], #4
 8015b7c:	fa17 f488 	uxtah	r4, r7, r8
 8015b80:	1422      	asrs	r2, r4, #16
 8015b82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015b86:	b2a4      	uxth	r4, r4
 8015b88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8015b90:	1417      	asrs	r7, r2, #16
 8015b92:	e7e0      	b.n	8015b56 <__mdiff+0xc6>
 8015b94:	3e01      	subs	r6, #1
 8015b96:	e7ea      	b.n	8015b6e <__mdiff+0xde>
 8015b98:	0801c2cb 	.word	0x0801c2cb
 8015b9c:	0801c33c 	.word	0x0801c33c

08015ba0 <__d2b>:
 8015ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ba4:	4689      	mov	r9, r1
 8015ba6:	2101      	movs	r1, #1
 8015ba8:	ec57 6b10 	vmov	r6, r7, d0
 8015bac:	4690      	mov	r8, r2
 8015bae:	f7ff fcd5 	bl	801555c <_Balloc>
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	b930      	cbnz	r0, 8015bc4 <__d2b+0x24>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	4b25      	ldr	r3, [pc, #148]	; (8015c50 <__d2b+0xb0>)
 8015bba:	4826      	ldr	r0, [pc, #152]	; (8015c54 <__d2b+0xb4>)
 8015bbc:	f240 310a 	movw	r1, #778	; 0x30a
 8015bc0:	f7fe fbf4 	bl	80143ac <__assert_func>
 8015bc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015bcc:	bb35      	cbnz	r5, 8015c1c <__d2b+0x7c>
 8015bce:	2e00      	cmp	r6, #0
 8015bd0:	9301      	str	r3, [sp, #4]
 8015bd2:	d028      	beq.n	8015c26 <__d2b+0x86>
 8015bd4:	4668      	mov	r0, sp
 8015bd6:	9600      	str	r6, [sp, #0]
 8015bd8:	f7ff fd8c 	bl	80156f4 <__lo0bits>
 8015bdc:	9900      	ldr	r1, [sp, #0]
 8015bde:	b300      	cbz	r0, 8015c22 <__d2b+0x82>
 8015be0:	9a01      	ldr	r2, [sp, #4]
 8015be2:	f1c0 0320 	rsb	r3, r0, #32
 8015be6:	fa02 f303 	lsl.w	r3, r2, r3
 8015bea:	430b      	orrs	r3, r1
 8015bec:	40c2      	lsrs	r2, r0
 8015bee:	6163      	str	r3, [r4, #20]
 8015bf0:	9201      	str	r2, [sp, #4]
 8015bf2:	9b01      	ldr	r3, [sp, #4]
 8015bf4:	61a3      	str	r3, [r4, #24]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	bf14      	ite	ne
 8015bfa:	2202      	movne	r2, #2
 8015bfc:	2201      	moveq	r2, #1
 8015bfe:	6122      	str	r2, [r4, #16]
 8015c00:	b1d5      	cbz	r5, 8015c38 <__d2b+0x98>
 8015c02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c06:	4405      	add	r5, r0
 8015c08:	f8c9 5000 	str.w	r5, [r9]
 8015c0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c10:	f8c8 0000 	str.w	r0, [r8]
 8015c14:	4620      	mov	r0, r4
 8015c16:	b003      	add	sp, #12
 8015c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c20:	e7d5      	b.n	8015bce <__d2b+0x2e>
 8015c22:	6161      	str	r1, [r4, #20]
 8015c24:	e7e5      	b.n	8015bf2 <__d2b+0x52>
 8015c26:	a801      	add	r0, sp, #4
 8015c28:	f7ff fd64 	bl	80156f4 <__lo0bits>
 8015c2c:	9b01      	ldr	r3, [sp, #4]
 8015c2e:	6163      	str	r3, [r4, #20]
 8015c30:	2201      	movs	r2, #1
 8015c32:	6122      	str	r2, [r4, #16]
 8015c34:	3020      	adds	r0, #32
 8015c36:	e7e3      	b.n	8015c00 <__d2b+0x60>
 8015c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c40:	f8c9 0000 	str.w	r0, [r9]
 8015c44:	6918      	ldr	r0, [r3, #16]
 8015c46:	f7ff fd35 	bl	80156b4 <__hi0bits>
 8015c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c4e:	e7df      	b.n	8015c10 <__d2b+0x70>
 8015c50:	0801c2cb 	.word	0x0801c2cb
 8015c54:	0801c33c 	.word	0x0801c33c

08015c58 <_calloc_r>:
 8015c58:	b513      	push	{r0, r1, r4, lr}
 8015c5a:	434a      	muls	r2, r1
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	9201      	str	r2, [sp, #4]
 8015c60:	f7fd fd4c 	bl	80136fc <_malloc_r>
 8015c64:	4604      	mov	r4, r0
 8015c66:	b118      	cbz	r0, 8015c70 <_calloc_r+0x18>
 8015c68:	9a01      	ldr	r2, [sp, #4]
 8015c6a:	2100      	movs	r1, #0
 8015c6c:	f7fd fcee 	bl	801364c <memset>
 8015c70:	4620      	mov	r0, r4
 8015c72:	b002      	add	sp, #8
 8015c74:	bd10      	pop	{r4, pc}

08015c76 <_realloc_r>:
 8015c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c78:	4607      	mov	r7, r0
 8015c7a:	4614      	mov	r4, r2
 8015c7c:	460e      	mov	r6, r1
 8015c7e:	b921      	cbnz	r1, 8015c8a <_realloc_r+0x14>
 8015c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c84:	4611      	mov	r1, r2
 8015c86:	f7fd bd39 	b.w	80136fc <_malloc_r>
 8015c8a:	b922      	cbnz	r2, 8015c96 <_realloc_r+0x20>
 8015c8c:	f7fd fce6 	bl	801365c <_free_r>
 8015c90:	4625      	mov	r5, r4
 8015c92:	4628      	mov	r0, r5
 8015c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c96:	f000 fbdf 	bl	8016458 <_malloc_usable_size_r>
 8015c9a:	42a0      	cmp	r0, r4
 8015c9c:	d20f      	bcs.n	8015cbe <_realloc_r+0x48>
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f7fd fd2b 	bl	80136fc <_malloc_r>
 8015ca6:	4605      	mov	r5, r0
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d0f2      	beq.n	8015c92 <_realloc_r+0x1c>
 8015cac:	4631      	mov	r1, r6
 8015cae:	4622      	mov	r2, r4
 8015cb0:	f7fd fcbe 	bl	8013630 <memcpy>
 8015cb4:	4631      	mov	r1, r6
 8015cb6:	4638      	mov	r0, r7
 8015cb8:	f7fd fcd0 	bl	801365c <_free_r>
 8015cbc:	e7e9      	b.n	8015c92 <_realloc_r+0x1c>
 8015cbe:	4635      	mov	r5, r6
 8015cc0:	e7e7      	b.n	8015c92 <_realloc_r+0x1c>

08015cc2 <__ssputs_r>:
 8015cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc6:	688e      	ldr	r6, [r1, #8]
 8015cc8:	429e      	cmp	r6, r3
 8015cca:	4682      	mov	sl, r0
 8015ccc:	460c      	mov	r4, r1
 8015cce:	4690      	mov	r8, r2
 8015cd0:	461f      	mov	r7, r3
 8015cd2:	d838      	bhi.n	8015d46 <__ssputs_r+0x84>
 8015cd4:	898a      	ldrh	r2, [r1, #12]
 8015cd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cda:	d032      	beq.n	8015d42 <__ssputs_r+0x80>
 8015cdc:	6825      	ldr	r5, [r4, #0]
 8015cde:	6909      	ldr	r1, [r1, #16]
 8015ce0:	eba5 0901 	sub.w	r9, r5, r1
 8015ce4:	6965      	ldr	r5, [r4, #20]
 8015ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015cee:	3301      	adds	r3, #1
 8015cf0:	444b      	add	r3, r9
 8015cf2:	106d      	asrs	r5, r5, #1
 8015cf4:	429d      	cmp	r5, r3
 8015cf6:	bf38      	it	cc
 8015cf8:	461d      	movcc	r5, r3
 8015cfa:	0553      	lsls	r3, r2, #21
 8015cfc:	d531      	bpl.n	8015d62 <__ssputs_r+0xa0>
 8015cfe:	4629      	mov	r1, r5
 8015d00:	f7fd fcfc 	bl	80136fc <_malloc_r>
 8015d04:	4606      	mov	r6, r0
 8015d06:	b950      	cbnz	r0, 8015d1e <__ssputs_r+0x5c>
 8015d08:	230c      	movs	r3, #12
 8015d0a:	f8ca 3000 	str.w	r3, [sl]
 8015d0e:	89a3      	ldrh	r3, [r4, #12]
 8015d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d14:	81a3      	strh	r3, [r4, #12]
 8015d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d1e:	6921      	ldr	r1, [r4, #16]
 8015d20:	464a      	mov	r2, r9
 8015d22:	f7fd fc85 	bl	8013630 <memcpy>
 8015d26:	89a3      	ldrh	r3, [r4, #12]
 8015d28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d30:	81a3      	strh	r3, [r4, #12]
 8015d32:	6126      	str	r6, [r4, #16]
 8015d34:	6165      	str	r5, [r4, #20]
 8015d36:	444e      	add	r6, r9
 8015d38:	eba5 0509 	sub.w	r5, r5, r9
 8015d3c:	6026      	str	r6, [r4, #0]
 8015d3e:	60a5      	str	r5, [r4, #8]
 8015d40:	463e      	mov	r6, r7
 8015d42:	42be      	cmp	r6, r7
 8015d44:	d900      	bls.n	8015d48 <__ssputs_r+0x86>
 8015d46:	463e      	mov	r6, r7
 8015d48:	4632      	mov	r2, r6
 8015d4a:	6820      	ldr	r0, [r4, #0]
 8015d4c:	4641      	mov	r1, r8
 8015d4e:	f000 fb69 	bl	8016424 <memmove>
 8015d52:	68a3      	ldr	r3, [r4, #8]
 8015d54:	6822      	ldr	r2, [r4, #0]
 8015d56:	1b9b      	subs	r3, r3, r6
 8015d58:	4432      	add	r2, r6
 8015d5a:	60a3      	str	r3, [r4, #8]
 8015d5c:	6022      	str	r2, [r4, #0]
 8015d5e:	2000      	movs	r0, #0
 8015d60:	e7db      	b.n	8015d1a <__ssputs_r+0x58>
 8015d62:	462a      	mov	r2, r5
 8015d64:	f7ff ff87 	bl	8015c76 <_realloc_r>
 8015d68:	4606      	mov	r6, r0
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d1e1      	bne.n	8015d32 <__ssputs_r+0x70>
 8015d6e:	6921      	ldr	r1, [r4, #16]
 8015d70:	4650      	mov	r0, sl
 8015d72:	f7fd fc73 	bl	801365c <_free_r>
 8015d76:	e7c7      	b.n	8015d08 <__ssputs_r+0x46>

08015d78 <_svfiprintf_r>:
 8015d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7c:	4698      	mov	r8, r3
 8015d7e:	898b      	ldrh	r3, [r1, #12]
 8015d80:	061b      	lsls	r3, r3, #24
 8015d82:	b09d      	sub	sp, #116	; 0x74
 8015d84:	4607      	mov	r7, r0
 8015d86:	460d      	mov	r5, r1
 8015d88:	4614      	mov	r4, r2
 8015d8a:	d50e      	bpl.n	8015daa <_svfiprintf_r+0x32>
 8015d8c:	690b      	ldr	r3, [r1, #16]
 8015d8e:	b963      	cbnz	r3, 8015daa <_svfiprintf_r+0x32>
 8015d90:	2140      	movs	r1, #64	; 0x40
 8015d92:	f7fd fcb3 	bl	80136fc <_malloc_r>
 8015d96:	6028      	str	r0, [r5, #0]
 8015d98:	6128      	str	r0, [r5, #16]
 8015d9a:	b920      	cbnz	r0, 8015da6 <_svfiprintf_r+0x2e>
 8015d9c:	230c      	movs	r3, #12
 8015d9e:	603b      	str	r3, [r7, #0]
 8015da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015da4:	e0d1      	b.n	8015f4a <_svfiprintf_r+0x1d2>
 8015da6:	2340      	movs	r3, #64	; 0x40
 8015da8:	616b      	str	r3, [r5, #20]
 8015daa:	2300      	movs	r3, #0
 8015dac:	9309      	str	r3, [sp, #36]	; 0x24
 8015dae:	2320      	movs	r3, #32
 8015db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015db8:	2330      	movs	r3, #48	; 0x30
 8015dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f64 <_svfiprintf_r+0x1ec>
 8015dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dc2:	f04f 0901 	mov.w	r9, #1
 8015dc6:	4623      	mov	r3, r4
 8015dc8:	469a      	mov	sl, r3
 8015dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dce:	b10a      	cbz	r2, 8015dd4 <_svfiprintf_r+0x5c>
 8015dd0:	2a25      	cmp	r2, #37	; 0x25
 8015dd2:	d1f9      	bne.n	8015dc8 <_svfiprintf_r+0x50>
 8015dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8015dd8:	d00b      	beq.n	8015df2 <_svfiprintf_r+0x7a>
 8015dda:	465b      	mov	r3, fp
 8015ddc:	4622      	mov	r2, r4
 8015dde:	4629      	mov	r1, r5
 8015de0:	4638      	mov	r0, r7
 8015de2:	f7ff ff6e 	bl	8015cc2 <__ssputs_r>
 8015de6:	3001      	adds	r0, #1
 8015de8:	f000 80aa 	beq.w	8015f40 <_svfiprintf_r+0x1c8>
 8015dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dee:	445a      	add	r2, fp
 8015df0:	9209      	str	r2, [sp, #36]	; 0x24
 8015df2:	f89a 3000 	ldrb.w	r3, [sl]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	f000 80a2 	beq.w	8015f40 <_svfiprintf_r+0x1c8>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e06:	f10a 0a01 	add.w	sl, sl, #1
 8015e0a:	9304      	str	r3, [sp, #16]
 8015e0c:	9307      	str	r3, [sp, #28]
 8015e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e12:	931a      	str	r3, [sp, #104]	; 0x68
 8015e14:	4654      	mov	r4, sl
 8015e16:	2205      	movs	r2, #5
 8015e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e1c:	4851      	ldr	r0, [pc, #324]	; (8015f64 <_svfiprintf_r+0x1ec>)
 8015e1e:	f7ea f9ff 	bl	8000220 <memchr>
 8015e22:	9a04      	ldr	r2, [sp, #16]
 8015e24:	b9d8      	cbnz	r0, 8015e5e <_svfiprintf_r+0xe6>
 8015e26:	06d0      	lsls	r0, r2, #27
 8015e28:	bf44      	itt	mi
 8015e2a:	2320      	movmi	r3, #32
 8015e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e30:	0711      	lsls	r1, r2, #28
 8015e32:	bf44      	itt	mi
 8015e34:	232b      	movmi	r3, #43	; 0x2b
 8015e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8015e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8015e40:	d015      	beq.n	8015e6e <_svfiprintf_r+0xf6>
 8015e42:	9a07      	ldr	r2, [sp, #28]
 8015e44:	4654      	mov	r4, sl
 8015e46:	2000      	movs	r0, #0
 8015e48:	f04f 0c0a 	mov.w	ip, #10
 8015e4c:	4621      	mov	r1, r4
 8015e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e52:	3b30      	subs	r3, #48	; 0x30
 8015e54:	2b09      	cmp	r3, #9
 8015e56:	d94e      	bls.n	8015ef6 <_svfiprintf_r+0x17e>
 8015e58:	b1b0      	cbz	r0, 8015e88 <_svfiprintf_r+0x110>
 8015e5a:	9207      	str	r2, [sp, #28]
 8015e5c:	e014      	b.n	8015e88 <_svfiprintf_r+0x110>
 8015e5e:	eba0 0308 	sub.w	r3, r0, r8
 8015e62:	fa09 f303 	lsl.w	r3, r9, r3
 8015e66:	4313      	orrs	r3, r2
 8015e68:	9304      	str	r3, [sp, #16]
 8015e6a:	46a2      	mov	sl, r4
 8015e6c:	e7d2      	b.n	8015e14 <_svfiprintf_r+0x9c>
 8015e6e:	9b03      	ldr	r3, [sp, #12]
 8015e70:	1d19      	adds	r1, r3, #4
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	9103      	str	r1, [sp, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	bfbb      	ittet	lt
 8015e7a:	425b      	neglt	r3, r3
 8015e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8015e80:	9307      	strge	r3, [sp, #28]
 8015e82:	9307      	strlt	r3, [sp, #28]
 8015e84:	bfb8      	it	lt
 8015e86:	9204      	strlt	r2, [sp, #16]
 8015e88:	7823      	ldrb	r3, [r4, #0]
 8015e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8015e8c:	d10c      	bne.n	8015ea8 <_svfiprintf_r+0x130>
 8015e8e:	7863      	ldrb	r3, [r4, #1]
 8015e90:	2b2a      	cmp	r3, #42	; 0x2a
 8015e92:	d135      	bne.n	8015f00 <_svfiprintf_r+0x188>
 8015e94:	9b03      	ldr	r3, [sp, #12]
 8015e96:	1d1a      	adds	r2, r3, #4
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	9203      	str	r2, [sp, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	bfb8      	it	lt
 8015ea0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015ea4:	3402      	adds	r4, #2
 8015ea6:	9305      	str	r3, [sp, #20]
 8015ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f74 <_svfiprintf_r+0x1fc>
 8015eac:	7821      	ldrb	r1, [r4, #0]
 8015eae:	2203      	movs	r2, #3
 8015eb0:	4650      	mov	r0, sl
 8015eb2:	f7ea f9b5 	bl	8000220 <memchr>
 8015eb6:	b140      	cbz	r0, 8015eca <_svfiprintf_r+0x152>
 8015eb8:	2340      	movs	r3, #64	; 0x40
 8015eba:	eba0 000a 	sub.w	r0, r0, sl
 8015ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8015ec2:	9b04      	ldr	r3, [sp, #16]
 8015ec4:	4303      	orrs	r3, r0
 8015ec6:	3401      	adds	r4, #1
 8015ec8:	9304      	str	r3, [sp, #16]
 8015eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ece:	4826      	ldr	r0, [pc, #152]	; (8015f68 <_svfiprintf_r+0x1f0>)
 8015ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ed4:	2206      	movs	r2, #6
 8015ed6:	f7ea f9a3 	bl	8000220 <memchr>
 8015eda:	2800      	cmp	r0, #0
 8015edc:	d038      	beq.n	8015f50 <_svfiprintf_r+0x1d8>
 8015ede:	4b23      	ldr	r3, [pc, #140]	; (8015f6c <_svfiprintf_r+0x1f4>)
 8015ee0:	bb1b      	cbnz	r3, 8015f2a <_svfiprintf_r+0x1b2>
 8015ee2:	9b03      	ldr	r3, [sp, #12]
 8015ee4:	3307      	adds	r3, #7
 8015ee6:	f023 0307 	bic.w	r3, r3, #7
 8015eea:	3308      	adds	r3, #8
 8015eec:	9303      	str	r3, [sp, #12]
 8015eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef0:	4433      	add	r3, r6
 8015ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ef4:	e767      	b.n	8015dc6 <_svfiprintf_r+0x4e>
 8015ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015efa:	460c      	mov	r4, r1
 8015efc:	2001      	movs	r0, #1
 8015efe:	e7a5      	b.n	8015e4c <_svfiprintf_r+0xd4>
 8015f00:	2300      	movs	r3, #0
 8015f02:	3401      	adds	r4, #1
 8015f04:	9305      	str	r3, [sp, #20]
 8015f06:	4619      	mov	r1, r3
 8015f08:	f04f 0c0a 	mov.w	ip, #10
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f12:	3a30      	subs	r2, #48	; 0x30
 8015f14:	2a09      	cmp	r2, #9
 8015f16:	d903      	bls.n	8015f20 <_svfiprintf_r+0x1a8>
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d0c5      	beq.n	8015ea8 <_svfiprintf_r+0x130>
 8015f1c:	9105      	str	r1, [sp, #20]
 8015f1e:	e7c3      	b.n	8015ea8 <_svfiprintf_r+0x130>
 8015f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f24:	4604      	mov	r4, r0
 8015f26:	2301      	movs	r3, #1
 8015f28:	e7f0      	b.n	8015f0c <_svfiprintf_r+0x194>
 8015f2a:	ab03      	add	r3, sp, #12
 8015f2c:	9300      	str	r3, [sp, #0]
 8015f2e:	462a      	mov	r2, r5
 8015f30:	4b0f      	ldr	r3, [pc, #60]	; (8015f70 <_svfiprintf_r+0x1f8>)
 8015f32:	a904      	add	r1, sp, #16
 8015f34:	4638      	mov	r0, r7
 8015f36:	f7fd fcdb 	bl	80138f0 <_printf_float>
 8015f3a:	1c42      	adds	r2, r0, #1
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	d1d6      	bne.n	8015eee <_svfiprintf_r+0x176>
 8015f40:	89ab      	ldrh	r3, [r5, #12]
 8015f42:	065b      	lsls	r3, r3, #25
 8015f44:	f53f af2c 	bmi.w	8015da0 <_svfiprintf_r+0x28>
 8015f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f4a:	b01d      	add	sp, #116	; 0x74
 8015f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f50:	ab03      	add	r3, sp, #12
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	462a      	mov	r2, r5
 8015f56:	4b06      	ldr	r3, [pc, #24]	; (8015f70 <_svfiprintf_r+0x1f8>)
 8015f58:	a904      	add	r1, sp, #16
 8015f5a:	4638      	mov	r0, r7
 8015f5c:	f7fd ff6c 	bl	8013e38 <_printf_i>
 8015f60:	e7eb      	b.n	8015f3a <_svfiprintf_r+0x1c2>
 8015f62:	bf00      	nop
 8015f64:	0801c49c 	.word	0x0801c49c
 8015f68:	0801c4a6 	.word	0x0801c4a6
 8015f6c:	080138f1 	.word	0x080138f1
 8015f70:	08015cc3 	.word	0x08015cc3
 8015f74:	0801c4a2 	.word	0x0801c4a2

08015f78 <__sfputc_r>:
 8015f78:	6893      	ldr	r3, [r2, #8]
 8015f7a:	3b01      	subs	r3, #1
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	b410      	push	{r4}
 8015f80:	6093      	str	r3, [r2, #8]
 8015f82:	da08      	bge.n	8015f96 <__sfputc_r+0x1e>
 8015f84:	6994      	ldr	r4, [r2, #24]
 8015f86:	42a3      	cmp	r3, r4
 8015f88:	db01      	blt.n	8015f8e <__sfputc_r+0x16>
 8015f8a:	290a      	cmp	r1, #10
 8015f8c:	d103      	bne.n	8015f96 <__sfputc_r+0x1e>
 8015f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f92:	f7fe b94b 	b.w	801422c <__swbuf_r>
 8015f96:	6813      	ldr	r3, [r2, #0]
 8015f98:	1c58      	adds	r0, r3, #1
 8015f9a:	6010      	str	r0, [r2, #0]
 8015f9c:	7019      	strb	r1, [r3, #0]
 8015f9e:	4608      	mov	r0, r1
 8015fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fa4:	4770      	bx	lr

08015fa6 <__sfputs_r>:
 8015fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa8:	4606      	mov	r6, r0
 8015faa:	460f      	mov	r7, r1
 8015fac:	4614      	mov	r4, r2
 8015fae:	18d5      	adds	r5, r2, r3
 8015fb0:	42ac      	cmp	r4, r5
 8015fb2:	d101      	bne.n	8015fb8 <__sfputs_r+0x12>
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	e007      	b.n	8015fc8 <__sfputs_r+0x22>
 8015fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fbc:	463a      	mov	r2, r7
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	f7ff ffda 	bl	8015f78 <__sfputc_r>
 8015fc4:	1c43      	adds	r3, r0, #1
 8015fc6:	d1f3      	bne.n	8015fb0 <__sfputs_r+0xa>
 8015fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015fcc <_vfiprintf_r>:
 8015fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd0:	460d      	mov	r5, r1
 8015fd2:	b09d      	sub	sp, #116	; 0x74
 8015fd4:	4614      	mov	r4, r2
 8015fd6:	4698      	mov	r8, r3
 8015fd8:	4606      	mov	r6, r0
 8015fda:	b118      	cbz	r0, 8015fe4 <_vfiprintf_r+0x18>
 8015fdc:	6983      	ldr	r3, [r0, #24]
 8015fde:	b90b      	cbnz	r3, 8015fe4 <_vfiprintf_r+0x18>
 8015fe0:	f7ff f994 	bl	801530c <__sinit>
 8015fe4:	4b89      	ldr	r3, [pc, #548]	; (801620c <_vfiprintf_r+0x240>)
 8015fe6:	429d      	cmp	r5, r3
 8015fe8:	d11b      	bne.n	8016022 <_vfiprintf_r+0x56>
 8015fea:	6875      	ldr	r5, [r6, #4]
 8015fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015fee:	07d9      	lsls	r1, r3, #31
 8015ff0:	d405      	bmi.n	8015ffe <_vfiprintf_r+0x32>
 8015ff2:	89ab      	ldrh	r3, [r5, #12]
 8015ff4:	059a      	lsls	r2, r3, #22
 8015ff6:	d402      	bmi.n	8015ffe <_vfiprintf_r+0x32>
 8015ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ffa:	f7ff fa3c 	bl	8015476 <__retarget_lock_acquire_recursive>
 8015ffe:	89ab      	ldrh	r3, [r5, #12]
 8016000:	071b      	lsls	r3, r3, #28
 8016002:	d501      	bpl.n	8016008 <_vfiprintf_r+0x3c>
 8016004:	692b      	ldr	r3, [r5, #16]
 8016006:	b9eb      	cbnz	r3, 8016044 <_vfiprintf_r+0x78>
 8016008:	4629      	mov	r1, r5
 801600a:	4630      	mov	r0, r6
 801600c:	f7fe f960 	bl	80142d0 <__swsetup_r>
 8016010:	b1c0      	cbz	r0, 8016044 <_vfiprintf_r+0x78>
 8016012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016014:	07dc      	lsls	r4, r3, #31
 8016016:	d50e      	bpl.n	8016036 <_vfiprintf_r+0x6a>
 8016018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801601c:	b01d      	add	sp, #116	; 0x74
 801601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016022:	4b7b      	ldr	r3, [pc, #492]	; (8016210 <_vfiprintf_r+0x244>)
 8016024:	429d      	cmp	r5, r3
 8016026:	d101      	bne.n	801602c <_vfiprintf_r+0x60>
 8016028:	68b5      	ldr	r5, [r6, #8]
 801602a:	e7df      	b.n	8015fec <_vfiprintf_r+0x20>
 801602c:	4b79      	ldr	r3, [pc, #484]	; (8016214 <_vfiprintf_r+0x248>)
 801602e:	429d      	cmp	r5, r3
 8016030:	bf08      	it	eq
 8016032:	68f5      	ldreq	r5, [r6, #12]
 8016034:	e7da      	b.n	8015fec <_vfiprintf_r+0x20>
 8016036:	89ab      	ldrh	r3, [r5, #12]
 8016038:	0598      	lsls	r0, r3, #22
 801603a:	d4ed      	bmi.n	8016018 <_vfiprintf_r+0x4c>
 801603c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801603e:	f7ff fa1b 	bl	8015478 <__retarget_lock_release_recursive>
 8016042:	e7e9      	b.n	8016018 <_vfiprintf_r+0x4c>
 8016044:	2300      	movs	r3, #0
 8016046:	9309      	str	r3, [sp, #36]	; 0x24
 8016048:	2320      	movs	r3, #32
 801604a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801604e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016052:	2330      	movs	r3, #48	; 0x30
 8016054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016218 <_vfiprintf_r+0x24c>
 8016058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801605c:	f04f 0901 	mov.w	r9, #1
 8016060:	4623      	mov	r3, r4
 8016062:	469a      	mov	sl, r3
 8016064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016068:	b10a      	cbz	r2, 801606e <_vfiprintf_r+0xa2>
 801606a:	2a25      	cmp	r2, #37	; 0x25
 801606c:	d1f9      	bne.n	8016062 <_vfiprintf_r+0x96>
 801606e:	ebba 0b04 	subs.w	fp, sl, r4
 8016072:	d00b      	beq.n	801608c <_vfiprintf_r+0xc0>
 8016074:	465b      	mov	r3, fp
 8016076:	4622      	mov	r2, r4
 8016078:	4629      	mov	r1, r5
 801607a:	4630      	mov	r0, r6
 801607c:	f7ff ff93 	bl	8015fa6 <__sfputs_r>
 8016080:	3001      	adds	r0, #1
 8016082:	f000 80aa 	beq.w	80161da <_vfiprintf_r+0x20e>
 8016086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016088:	445a      	add	r2, fp
 801608a:	9209      	str	r2, [sp, #36]	; 0x24
 801608c:	f89a 3000 	ldrb.w	r3, [sl]
 8016090:	2b00      	cmp	r3, #0
 8016092:	f000 80a2 	beq.w	80161da <_vfiprintf_r+0x20e>
 8016096:	2300      	movs	r3, #0
 8016098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801609c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160a0:	f10a 0a01 	add.w	sl, sl, #1
 80160a4:	9304      	str	r3, [sp, #16]
 80160a6:	9307      	str	r3, [sp, #28]
 80160a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160ac:	931a      	str	r3, [sp, #104]	; 0x68
 80160ae:	4654      	mov	r4, sl
 80160b0:	2205      	movs	r2, #5
 80160b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160b6:	4858      	ldr	r0, [pc, #352]	; (8016218 <_vfiprintf_r+0x24c>)
 80160b8:	f7ea f8b2 	bl	8000220 <memchr>
 80160bc:	9a04      	ldr	r2, [sp, #16]
 80160be:	b9d8      	cbnz	r0, 80160f8 <_vfiprintf_r+0x12c>
 80160c0:	06d1      	lsls	r1, r2, #27
 80160c2:	bf44      	itt	mi
 80160c4:	2320      	movmi	r3, #32
 80160c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160ca:	0713      	lsls	r3, r2, #28
 80160cc:	bf44      	itt	mi
 80160ce:	232b      	movmi	r3, #43	; 0x2b
 80160d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160d4:	f89a 3000 	ldrb.w	r3, [sl]
 80160d8:	2b2a      	cmp	r3, #42	; 0x2a
 80160da:	d015      	beq.n	8016108 <_vfiprintf_r+0x13c>
 80160dc:	9a07      	ldr	r2, [sp, #28]
 80160de:	4654      	mov	r4, sl
 80160e0:	2000      	movs	r0, #0
 80160e2:	f04f 0c0a 	mov.w	ip, #10
 80160e6:	4621      	mov	r1, r4
 80160e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160ec:	3b30      	subs	r3, #48	; 0x30
 80160ee:	2b09      	cmp	r3, #9
 80160f0:	d94e      	bls.n	8016190 <_vfiprintf_r+0x1c4>
 80160f2:	b1b0      	cbz	r0, 8016122 <_vfiprintf_r+0x156>
 80160f4:	9207      	str	r2, [sp, #28]
 80160f6:	e014      	b.n	8016122 <_vfiprintf_r+0x156>
 80160f8:	eba0 0308 	sub.w	r3, r0, r8
 80160fc:	fa09 f303 	lsl.w	r3, r9, r3
 8016100:	4313      	orrs	r3, r2
 8016102:	9304      	str	r3, [sp, #16]
 8016104:	46a2      	mov	sl, r4
 8016106:	e7d2      	b.n	80160ae <_vfiprintf_r+0xe2>
 8016108:	9b03      	ldr	r3, [sp, #12]
 801610a:	1d19      	adds	r1, r3, #4
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	9103      	str	r1, [sp, #12]
 8016110:	2b00      	cmp	r3, #0
 8016112:	bfbb      	ittet	lt
 8016114:	425b      	neglt	r3, r3
 8016116:	f042 0202 	orrlt.w	r2, r2, #2
 801611a:	9307      	strge	r3, [sp, #28]
 801611c:	9307      	strlt	r3, [sp, #28]
 801611e:	bfb8      	it	lt
 8016120:	9204      	strlt	r2, [sp, #16]
 8016122:	7823      	ldrb	r3, [r4, #0]
 8016124:	2b2e      	cmp	r3, #46	; 0x2e
 8016126:	d10c      	bne.n	8016142 <_vfiprintf_r+0x176>
 8016128:	7863      	ldrb	r3, [r4, #1]
 801612a:	2b2a      	cmp	r3, #42	; 0x2a
 801612c:	d135      	bne.n	801619a <_vfiprintf_r+0x1ce>
 801612e:	9b03      	ldr	r3, [sp, #12]
 8016130:	1d1a      	adds	r2, r3, #4
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	9203      	str	r2, [sp, #12]
 8016136:	2b00      	cmp	r3, #0
 8016138:	bfb8      	it	lt
 801613a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801613e:	3402      	adds	r4, #2
 8016140:	9305      	str	r3, [sp, #20]
 8016142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016228 <_vfiprintf_r+0x25c>
 8016146:	7821      	ldrb	r1, [r4, #0]
 8016148:	2203      	movs	r2, #3
 801614a:	4650      	mov	r0, sl
 801614c:	f7ea f868 	bl	8000220 <memchr>
 8016150:	b140      	cbz	r0, 8016164 <_vfiprintf_r+0x198>
 8016152:	2340      	movs	r3, #64	; 0x40
 8016154:	eba0 000a 	sub.w	r0, r0, sl
 8016158:	fa03 f000 	lsl.w	r0, r3, r0
 801615c:	9b04      	ldr	r3, [sp, #16]
 801615e:	4303      	orrs	r3, r0
 8016160:	3401      	adds	r4, #1
 8016162:	9304      	str	r3, [sp, #16]
 8016164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016168:	482c      	ldr	r0, [pc, #176]	; (801621c <_vfiprintf_r+0x250>)
 801616a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801616e:	2206      	movs	r2, #6
 8016170:	f7ea f856 	bl	8000220 <memchr>
 8016174:	2800      	cmp	r0, #0
 8016176:	d03f      	beq.n	80161f8 <_vfiprintf_r+0x22c>
 8016178:	4b29      	ldr	r3, [pc, #164]	; (8016220 <_vfiprintf_r+0x254>)
 801617a:	bb1b      	cbnz	r3, 80161c4 <_vfiprintf_r+0x1f8>
 801617c:	9b03      	ldr	r3, [sp, #12]
 801617e:	3307      	adds	r3, #7
 8016180:	f023 0307 	bic.w	r3, r3, #7
 8016184:	3308      	adds	r3, #8
 8016186:	9303      	str	r3, [sp, #12]
 8016188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801618a:	443b      	add	r3, r7
 801618c:	9309      	str	r3, [sp, #36]	; 0x24
 801618e:	e767      	b.n	8016060 <_vfiprintf_r+0x94>
 8016190:	fb0c 3202 	mla	r2, ip, r2, r3
 8016194:	460c      	mov	r4, r1
 8016196:	2001      	movs	r0, #1
 8016198:	e7a5      	b.n	80160e6 <_vfiprintf_r+0x11a>
 801619a:	2300      	movs	r3, #0
 801619c:	3401      	adds	r4, #1
 801619e:	9305      	str	r3, [sp, #20]
 80161a0:	4619      	mov	r1, r3
 80161a2:	f04f 0c0a 	mov.w	ip, #10
 80161a6:	4620      	mov	r0, r4
 80161a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161ac:	3a30      	subs	r2, #48	; 0x30
 80161ae:	2a09      	cmp	r2, #9
 80161b0:	d903      	bls.n	80161ba <_vfiprintf_r+0x1ee>
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d0c5      	beq.n	8016142 <_vfiprintf_r+0x176>
 80161b6:	9105      	str	r1, [sp, #20]
 80161b8:	e7c3      	b.n	8016142 <_vfiprintf_r+0x176>
 80161ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80161be:	4604      	mov	r4, r0
 80161c0:	2301      	movs	r3, #1
 80161c2:	e7f0      	b.n	80161a6 <_vfiprintf_r+0x1da>
 80161c4:	ab03      	add	r3, sp, #12
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	462a      	mov	r2, r5
 80161ca:	4b16      	ldr	r3, [pc, #88]	; (8016224 <_vfiprintf_r+0x258>)
 80161cc:	a904      	add	r1, sp, #16
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7fd fb8e 	bl	80138f0 <_printf_float>
 80161d4:	4607      	mov	r7, r0
 80161d6:	1c78      	adds	r0, r7, #1
 80161d8:	d1d6      	bne.n	8016188 <_vfiprintf_r+0x1bc>
 80161da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161dc:	07d9      	lsls	r1, r3, #31
 80161de:	d405      	bmi.n	80161ec <_vfiprintf_r+0x220>
 80161e0:	89ab      	ldrh	r3, [r5, #12]
 80161e2:	059a      	lsls	r2, r3, #22
 80161e4:	d402      	bmi.n	80161ec <_vfiprintf_r+0x220>
 80161e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161e8:	f7ff f946 	bl	8015478 <__retarget_lock_release_recursive>
 80161ec:	89ab      	ldrh	r3, [r5, #12]
 80161ee:	065b      	lsls	r3, r3, #25
 80161f0:	f53f af12 	bmi.w	8016018 <_vfiprintf_r+0x4c>
 80161f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161f6:	e711      	b.n	801601c <_vfiprintf_r+0x50>
 80161f8:	ab03      	add	r3, sp, #12
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	462a      	mov	r2, r5
 80161fe:	4b09      	ldr	r3, [pc, #36]	; (8016224 <_vfiprintf_r+0x258>)
 8016200:	a904      	add	r1, sp, #16
 8016202:	4630      	mov	r0, r6
 8016204:	f7fd fe18 	bl	8013e38 <_printf_i>
 8016208:	e7e4      	b.n	80161d4 <_vfiprintf_r+0x208>
 801620a:	bf00      	nop
 801620c:	0801c2fc 	.word	0x0801c2fc
 8016210:	0801c31c 	.word	0x0801c31c
 8016214:	0801c2dc 	.word	0x0801c2dc
 8016218:	0801c49c 	.word	0x0801c49c
 801621c:	0801c4a6 	.word	0x0801c4a6
 8016220:	080138f1 	.word	0x080138f1
 8016224:	08015fa7 	.word	0x08015fa7
 8016228:	0801c4a2 	.word	0x0801c4a2

0801622c <_putc_r>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	460d      	mov	r5, r1
 8016230:	4614      	mov	r4, r2
 8016232:	4606      	mov	r6, r0
 8016234:	b118      	cbz	r0, 801623e <_putc_r+0x12>
 8016236:	6983      	ldr	r3, [r0, #24]
 8016238:	b90b      	cbnz	r3, 801623e <_putc_r+0x12>
 801623a:	f7ff f867 	bl	801530c <__sinit>
 801623e:	4b1c      	ldr	r3, [pc, #112]	; (80162b0 <_putc_r+0x84>)
 8016240:	429c      	cmp	r4, r3
 8016242:	d124      	bne.n	801628e <_putc_r+0x62>
 8016244:	6874      	ldr	r4, [r6, #4]
 8016246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016248:	07d8      	lsls	r0, r3, #31
 801624a:	d405      	bmi.n	8016258 <_putc_r+0x2c>
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	0599      	lsls	r1, r3, #22
 8016250:	d402      	bmi.n	8016258 <_putc_r+0x2c>
 8016252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016254:	f7ff f90f 	bl	8015476 <__retarget_lock_acquire_recursive>
 8016258:	68a3      	ldr	r3, [r4, #8]
 801625a:	3b01      	subs	r3, #1
 801625c:	2b00      	cmp	r3, #0
 801625e:	60a3      	str	r3, [r4, #8]
 8016260:	da05      	bge.n	801626e <_putc_r+0x42>
 8016262:	69a2      	ldr	r2, [r4, #24]
 8016264:	4293      	cmp	r3, r2
 8016266:	db1c      	blt.n	80162a2 <_putc_r+0x76>
 8016268:	b2eb      	uxtb	r3, r5
 801626a:	2b0a      	cmp	r3, #10
 801626c:	d019      	beq.n	80162a2 <_putc_r+0x76>
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	1c5a      	adds	r2, r3, #1
 8016272:	6022      	str	r2, [r4, #0]
 8016274:	701d      	strb	r5, [r3, #0]
 8016276:	b2ed      	uxtb	r5, r5
 8016278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801627a:	07da      	lsls	r2, r3, #31
 801627c:	d405      	bmi.n	801628a <_putc_r+0x5e>
 801627e:	89a3      	ldrh	r3, [r4, #12]
 8016280:	059b      	lsls	r3, r3, #22
 8016282:	d402      	bmi.n	801628a <_putc_r+0x5e>
 8016284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016286:	f7ff f8f7 	bl	8015478 <__retarget_lock_release_recursive>
 801628a:	4628      	mov	r0, r5
 801628c:	bd70      	pop	{r4, r5, r6, pc}
 801628e:	4b09      	ldr	r3, [pc, #36]	; (80162b4 <_putc_r+0x88>)
 8016290:	429c      	cmp	r4, r3
 8016292:	d101      	bne.n	8016298 <_putc_r+0x6c>
 8016294:	68b4      	ldr	r4, [r6, #8]
 8016296:	e7d6      	b.n	8016246 <_putc_r+0x1a>
 8016298:	4b07      	ldr	r3, [pc, #28]	; (80162b8 <_putc_r+0x8c>)
 801629a:	429c      	cmp	r4, r3
 801629c:	bf08      	it	eq
 801629e:	68f4      	ldreq	r4, [r6, #12]
 80162a0:	e7d1      	b.n	8016246 <_putc_r+0x1a>
 80162a2:	4629      	mov	r1, r5
 80162a4:	4622      	mov	r2, r4
 80162a6:	4630      	mov	r0, r6
 80162a8:	f7fd ffc0 	bl	801422c <__swbuf_r>
 80162ac:	4605      	mov	r5, r0
 80162ae:	e7e3      	b.n	8016278 <_putc_r+0x4c>
 80162b0:	0801c2fc 	.word	0x0801c2fc
 80162b4:	0801c31c 	.word	0x0801c31c
 80162b8:	0801c2dc 	.word	0x0801c2dc

080162bc <__sread>:
 80162bc:	b510      	push	{r4, lr}
 80162be:	460c      	mov	r4, r1
 80162c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162c4:	f000 f8d0 	bl	8016468 <_read_r>
 80162c8:	2800      	cmp	r0, #0
 80162ca:	bfab      	itete	ge
 80162cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162ce:	89a3      	ldrhlt	r3, [r4, #12]
 80162d0:	181b      	addge	r3, r3, r0
 80162d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80162d6:	bfac      	ite	ge
 80162d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80162da:	81a3      	strhlt	r3, [r4, #12]
 80162dc:	bd10      	pop	{r4, pc}

080162de <__swrite>:
 80162de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e2:	461f      	mov	r7, r3
 80162e4:	898b      	ldrh	r3, [r1, #12]
 80162e6:	05db      	lsls	r3, r3, #23
 80162e8:	4605      	mov	r5, r0
 80162ea:	460c      	mov	r4, r1
 80162ec:	4616      	mov	r6, r2
 80162ee:	d505      	bpl.n	80162fc <__swrite+0x1e>
 80162f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162f4:	2302      	movs	r3, #2
 80162f6:	2200      	movs	r2, #0
 80162f8:	f000 f870 	bl	80163dc <_lseek_r>
 80162fc:	89a3      	ldrh	r3, [r4, #12]
 80162fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016306:	81a3      	strh	r3, [r4, #12]
 8016308:	4632      	mov	r2, r6
 801630a:	463b      	mov	r3, r7
 801630c:	4628      	mov	r0, r5
 801630e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016312:	f000 b817 	b.w	8016344 <_write_r>

08016316 <__sseek>:
 8016316:	b510      	push	{r4, lr}
 8016318:	460c      	mov	r4, r1
 801631a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801631e:	f000 f85d 	bl	80163dc <_lseek_r>
 8016322:	1c43      	adds	r3, r0, #1
 8016324:	89a3      	ldrh	r3, [r4, #12]
 8016326:	bf15      	itete	ne
 8016328:	6560      	strne	r0, [r4, #84]	; 0x54
 801632a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801632e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016332:	81a3      	strheq	r3, [r4, #12]
 8016334:	bf18      	it	ne
 8016336:	81a3      	strhne	r3, [r4, #12]
 8016338:	bd10      	pop	{r4, pc}

0801633a <__sclose>:
 801633a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801633e:	f000 b81b 	b.w	8016378 <_close_r>
	...

08016344 <_write_r>:
 8016344:	b538      	push	{r3, r4, r5, lr}
 8016346:	4d07      	ldr	r5, [pc, #28]	; (8016364 <_write_r+0x20>)
 8016348:	4604      	mov	r4, r0
 801634a:	4608      	mov	r0, r1
 801634c:	4611      	mov	r1, r2
 801634e:	2200      	movs	r2, #0
 8016350:	602a      	str	r2, [r5, #0]
 8016352:	461a      	mov	r2, r3
 8016354:	f7ed fd2f 	bl	8003db6 <_write>
 8016358:	1c43      	adds	r3, r0, #1
 801635a:	d102      	bne.n	8016362 <_write_r+0x1e>
 801635c:	682b      	ldr	r3, [r5, #0]
 801635e:	b103      	cbz	r3, 8016362 <_write_r+0x1e>
 8016360:	6023      	str	r3, [r4, #0]
 8016362:	bd38      	pop	{r3, r4, r5, pc}
 8016364:	20041cb8 	.word	0x20041cb8

08016368 <abort>:
 8016368:	b508      	push	{r3, lr}
 801636a:	2006      	movs	r0, #6
 801636c:	f000 f8b6 	bl	80164dc <raise>
 8016370:	2001      	movs	r0, #1
 8016372:	f7ed fcf9 	bl	8003d68 <_exit>
	...

08016378 <_close_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4d06      	ldr	r5, [pc, #24]	; (8016394 <_close_r+0x1c>)
 801637c:	2300      	movs	r3, #0
 801637e:	4604      	mov	r4, r0
 8016380:	4608      	mov	r0, r1
 8016382:	602b      	str	r3, [r5, #0]
 8016384:	f7ed fd33 	bl	8003dee <_close>
 8016388:	1c43      	adds	r3, r0, #1
 801638a:	d102      	bne.n	8016392 <_close_r+0x1a>
 801638c:	682b      	ldr	r3, [r5, #0]
 801638e:	b103      	cbz	r3, 8016392 <_close_r+0x1a>
 8016390:	6023      	str	r3, [r4, #0]
 8016392:	bd38      	pop	{r3, r4, r5, pc}
 8016394:	20041cb8 	.word	0x20041cb8

08016398 <_fstat_r>:
 8016398:	b538      	push	{r3, r4, r5, lr}
 801639a:	4d07      	ldr	r5, [pc, #28]	; (80163b8 <_fstat_r+0x20>)
 801639c:	2300      	movs	r3, #0
 801639e:	4604      	mov	r4, r0
 80163a0:	4608      	mov	r0, r1
 80163a2:	4611      	mov	r1, r2
 80163a4:	602b      	str	r3, [r5, #0]
 80163a6:	f7ed fd2e 	bl	8003e06 <_fstat>
 80163aa:	1c43      	adds	r3, r0, #1
 80163ac:	d102      	bne.n	80163b4 <_fstat_r+0x1c>
 80163ae:	682b      	ldr	r3, [r5, #0]
 80163b0:	b103      	cbz	r3, 80163b4 <_fstat_r+0x1c>
 80163b2:	6023      	str	r3, [r4, #0]
 80163b4:	bd38      	pop	{r3, r4, r5, pc}
 80163b6:	bf00      	nop
 80163b8:	20041cb8 	.word	0x20041cb8

080163bc <_isatty_r>:
 80163bc:	b538      	push	{r3, r4, r5, lr}
 80163be:	4d06      	ldr	r5, [pc, #24]	; (80163d8 <_isatty_r+0x1c>)
 80163c0:	2300      	movs	r3, #0
 80163c2:	4604      	mov	r4, r0
 80163c4:	4608      	mov	r0, r1
 80163c6:	602b      	str	r3, [r5, #0]
 80163c8:	f7ed fd2d 	bl	8003e26 <_isatty>
 80163cc:	1c43      	adds	r3, r0, #1
 80163ce:	d102      	bne.n	80163d6 <_isatty_r+0x1a>
 80163d0:	682b      	ldr	r3, [r5, #0]
 80163d2:	b103      	cbz	r3, 80163d6 <_isatty_r+0x1a>
 80163d4:	6023      	str	r3, [r4, #0]
 80163d6:	bd38      	pop	{r3, r4, r5, pc}
 80163d8:	20041cb8 	.word	0x20041cb8

080163dc <_lseek_r>:
 80163dc:	b538      	push	{r3, r4, r5, lr}
 80163de:	4d07      	ldr	r5, [pc, #28]	; (80163fc <_lseek_r+0x20>)
 80163e0:	4604      	mov	r4, r0
 80163e2:	4608      	mov	r0, r1
 80163e4:	4611      	mov	r1, r2
 80163e6:	2200      	movs	r2, #0
 80163e8:	602a      	str	r2, [r5, #0]
 80163ea:	461a      	mov	r2, r3
 80163ec:	f7ed fd26 	bl	8003e3c <_lseek>
 80163f0:	1c43      	adds	r3, r0, #1
 80163f2:	d102      	bne.n	80163fa <_lseek_r+0x1e>
 80163f4:	682b      	ldr	r3, [r5, #0]
 80163f6:	b103      	cbz	r3, 80163fa <_lseek_r+0x1e>
 80163f8:	6023      	str	r3, [r4, #0]
 80163fa:	bd38      	pop	{r3, r4, r5, pc}
 80163fc:	20041cb8 	.word	0x20041cb8

08016400 <__ascii_mbtowc>:
 8016400:	b082      	sub	sp, #8
 8016402:	b901      	cbnz	r1, 8016406 <__ascii_mbtowc+0x6>
 8016404:	a901      	add	r1, sp, #4
 8016406:	b142      	cbz	r2, 801641a <__ascii_mbtowc+0x1a>
 8016408:	b14b      	cbz	r3, 801641e <__ascii_mbtowc+0x1e>
 801640a:	7813      	ldrb	r3, [r2, #0]
 801640c:	600b      	str	r3, [r1, #0]
 801640e:	7812      	ldrb	r2, [r2, #0]
 8016410:	1e10      	subs	r0, r2, #0
 8016412:	bf18      	it	ne
 8016414:	2001      	movne	r0, #1
 8016416:	b002      	add	sp, #8
 8016418:	4770      	bx	lr
 801641a:	4610      	mov	r0, r2
 801641c:	e7fb      	b.n	8016416 <__ascii_mbtowc+0x16>
 801641e:	f06f 0001 	mvn.w	r0, #1
 8016422:	e7f8      	b.n	8016416 <__ascii_mbtowc+0x16>

08016424 <memmove>:
 8016424:	4288      	cmp	r0, r1
 8016426:	b510      	push	{r4, lr}
 8016428:	eb01 0402 	add.w	r4, r1, r2
 801642c:	d902      	bls.n	8016434 <memmove+0x10>
 801642e:	4284      	cmp	r4, r0
 8016430:	4623      	mov	r3, r4
 8016432:	d807      	bhi.n	8016444 <memmove+0x20>
 8016434:	1e43      	subs	r3, r0, #1
 8016436:	42a1      	cmp	r1, r4
 8016438:	d008      	beq.n	801644c <memmove+0x28>
 801643a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801643e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016442:	e7f8      	b.n	8016436 <memmove+0x12>
 8016444:	4402      	add	r2, r0
 8016446:	4601      	mov	r1, r0
 8016448:	428a      	cmp	r2, r1
 801644a:	d100      	bne.n	801644e <memmove+0x2a>
 801644c:	bd10      	pop	{r4, pc}
 801644e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016456:	e7f7      	b.n	8016448 <memmove+0x24>

08016458 <_malloc_usable_size_r>:
 8016458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801645c:	1f18      	subs	r0, r3, #4
 801645e:	2b00      	cmp	r3, #0
 8016460:	bfbc      	itt	lt
 8016462:	580b      	ldrlt	r3, [r1, r0]
 8016464:	18c0      	addlt	r0, r0, r3
 8016466:	4770      	bx	lr

08016468 <_read_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4d07      	ldr	r5, [pc, #28]	; (8016488 <_read_r+0x20>)
 801646c:	4604      	mov	r4, r0
 801646e:	4608      	mov	r0, r1
 8016470:	4611      	mov	r1, r2
 8016472:	2200      	movs	r2, #0
 8016474:	602a      	str	r2, [r5, #0]
 8016476:	461a      	mov	r2, r3
 8016478:	f7ed fc80 	bl	8003d7c <_read>
 801647c:	1c43      	adds	r3, r0, #1
 801647e:	d102      	bne.n	8016486 <_read_r+0x1e>
 8016480:	682b      	ldr	r3, [r5, #0]
 8016482:	b103      	cbz	r3, 8016486 <_read_r+0x1e>
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	bd38      	pop	{r3, r4, r5, pc}
 8016488:	20041cb8 	.word	0x20041cb8

0801648c <_raise_r>:
 801648c:	291f      	cmp	r1, #31
 801648e:	b538      	push	{r3, r4, r5, lr}
 8016490:	4604      	mov	r4, r0
 8016492:	460d      	mov	r5, r1
 8016494:	d904      	bls.n	80164a0 <_raise_r+0x14>
 8016496:	2316      	movs	r3, #22
 8016498:	6003      	str	r3, [r0, #0]
 801649a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801649e:	bd38      	pop	{r3, r4, r5, pc}
 80164a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80164a2:	b112      	cbz	r2, 80164aa <_raise_r+0x1e>
 80164a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80164a8:	b94b      	cbnz	r3, 80164be <_raise_r+0x32>
 80164aa:	4620      	mov	r0, r4
 80164ac:	f000 f830 	bl	8016510 <_getpid_r>
 80164b0:	462a      	mov	r2, r5
 80164b2:	4601      	mov	r1, r0
 80164b4:	4620      	mov	r0, r4
 80164b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164ba:	f000 b817 	b.w	80164ec <_kill_r>
 80164be:	2b01      	cmp	r3, #1
 80164c0:	d00a      	beq.n	80164d8 <_raise_r+0x4c>
 80164c2:	1c59      	adds	r1, r3, #1
 80164c4:	d103      	bne.n	80164ce <_raise_r+0x42>
 80164c6:	2316      	movs	r3, #22
 80164c8:	6003      	str	r3, [r0, #0]
 80164ca:	2001      	movs	r0, #1
 80164cc:	e7e7      	b.n	801649e <_raise_r+0x12>
 80164ce:	2400      	movs	r4, #0
 80164d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80164d4:	4628      	mov	r0, r5
 80164d6:	4798      	blx	r3
 80164d8:	2000      	movs	r0, #0
 80164da:	e7e0      	b.n	801649e <_raise_r+0x12>

080164dc <raise>:
 80164dc:	4b02      	ldr	r3, [pc, #8]	; (80164e8 <raise+0xc>)
 80164de:	4601      	mov	r1, r0
 80164e0:	6818      	ldr	r0, [r3, #0]
 80164e2:	f7ff bfd3 	b.w	801648c <_raise_r>
 80164e6:	bf00      	nop
 80164e8:	20000780 	.word	0x20000780

080164ec <_kill_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	4d07      	ldr	r5, [pc, #28]	; (801650c <_kill_r+0x20>)
 80164f0:	2300      	movs	r3, #0
 80164f2:	4604      	mov	r4, r0
 80164f4:	4608      	mov	r0, r1
 80164f6:	4611      	mov	r1, r2
 80164f8:	602b      	str	r3, [r5, #0]
 80164fa:	f7ed fc25 	bl	8003d48 <_kill>
 80164fe:	1c43      	adds	r3, r0, #1
 8016500:	d102      	bne.n	8016508 <_kill_r+0x1c>
 8016502:	682b      	ldr	r3, [r5, #0]
 8016504:	b103      	cbz	r3, 8016508 <_kill_r+0x1c>
 8016506:	6023      	str	r3, [r4, #0]
 8016508:	bd38      	pop	{r3, r4, r5, pc}
 801650a:	bf00      	nop
 801650c:	20041cb8 	.word	0x20041cb8

08016510 <_getpid_r>:
 8016510:	f7ed bc12 	b.w	8003d38 <_getpid>

08016514 <__ascii_wctomb>:
 8016514:	b149      	cbz	r1, 801652a <__ascii_wctomb+0x16>
 8016516:	2aff      	cmp	r2, #255	; 0xff
 8016518:	bf85      	ittet	hi
 801651a:	238a      	movhi	r3, #138	; 0x8a
 801651c:	6003      	strhi	r3, [r0, #0]
 801651e:	700a      	strbls	r2, [r1, #0]
 8016520:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016524:	bf98      	it	ls
 8016526:	2001      	movls	r0, #1
 8016528:	4770      	bx	lr
 801652a:	4608      	mov	r0, r1
 801652c:	4770      	bx	lr

0801652e <fabsf>:
 801652e:	ee10 3a10 	vmov	r3, s0
 8016532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016536:	ee00 3a10 	vmov	s0, r3
 801653a:	4770      	bx	lr

0801653c <tanhf>:
 801653c:	b510      	push	{r4, lr}
 801653e:	ee10 4a10 	vmov	r4, s0
 8016542:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016546:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801654a:	ed2d 8b02 	vpush	{d8}
 801654e:	eeb0 7a40 	vmov.f32	s14, s0
 8016552:	db0c      	blt.n	801656e <tanhf+0x32>
 8016554:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016558:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801655c:	2c00      	cmp	r4, #0
 801655e:	bfac      	ite	ge
 8016560:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8016564:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8016568:	ecbd 8b02 	vpop	{d8}
 801656c:	bd10      	pop	{r4, pc}
 801656e:	4a1b      	ldr	r2, [pc, #108]	; (80165dc <tanhf+0xa0>)
 8016570:	4293      	cmp	r3, r2
 8016572:	dc30      	bgt.n	80165d6 <tanhf+0x9a>
 8016574:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8016578:	da06      	bge.n	8016588 <tanhf+0x4c>
 801657a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801657e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016582:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016586:	e7ef      	b.n	8016568 <tanhf+0x2c>
 8016588:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801658c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8016590:	db12      	blt.n	80165b8 <tanhf+0x7c>
 8016592:	f7ff ffcc 	bl	801652e <fabsf>
 8016596:	ee30 0a00 	vadd.f32	s0, s0, s0
 801659a:	f000 fa31 	bl	8016a00 <expm1f>
 801659e:	ee30 0a08 	vadd.f32	s0, s0, s16
 80165a2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80165a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80165aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165ae:	2c00      	cmp	r4, #0
 80165b0:	bfb8      	it	lt
 80165b2:	eeb1 0a40 	vneglt.f32	s0, s0
 80165b6:	e7d7      	b.n	8016568 <tanhf+0x2c>
 80165b8:	f7ff ffb9 	bl	801652e <fabsf>
 80165bc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80165c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80165c4:	f000 fa1c 	bl	8016a00 <expm1f>
 80165c8:	ee70 7a08 	vadd.f32	s15, s0, s16
 80165cc:	eeb1 7a40 	vneg.f32	s14, s0
 80165d0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80165d4:	e7eb      	b.n	80165ae <tanhf+0x72>
 80165d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80165da:	e7e8      	b.n	80165ae <tanhf+0x72>
 80165dc:	41afffff 	.word	0x41afffff

080165e0 <log10>:
 80165e0:	b538      	push	{r3, r4, r5, lr}
 80165e2:	ed2d 8b02 	vpush	{d8}
 80165e6:	ec55 4b10 	vmov	r4, r5, d0
 80165ea:	f000 f881 	bl	80166f0 <__ieee754_log10>
 80165ee:	4b1e      	ldr	r3, [pc, #120]	; (8016668 <log10+0x88>)
 80165f0:	eeb0 8a40 	vmov.f32	s16, s0
 80165f4:	eef0 8a60 	vmov.f32	s17, s1
 80165f8:	f993 3000 	ldrsb.w	r3, [r3]
 80165fc:	3301      	adds	r3, #1
 80165fe:	d01a      	beq.n	8016636 <log10+0x56>
 8016600:	4622      	mov	r2, r4
 8016602:	462b      	mov	r3, r5
 8016604:	4620      	mov	r0, r4
 8016606:	4629      	mov	r1, r5
 8016608:	f7ea fab0 	bl	8000b6c <__aeabi_dcmpun>
 801660c:	b998      	cbnz	r0, 8016636 <log10+0x56>
 801660e:	2200      	movs	r2, #0
 8016610:	2300      	movs	r3, #0
 8016612:	4620      	mov	r0, r4
 8016614:	4629      	mov	r1, r5
 8016616:	f7ea fa8b 	bl	8000b30 <__aeabi_dcmple>
 801661a:	b160      	cbz	r0, 8016636 <log10+0x56>
 801661c:	2200      	movs	r2, #0
 801661e:	2300      	movs	r3, #0
 8016620:	4620      	mov	r0, r4
 8016622:	4629      	mov	r1, r5
 8016624:	f7ea fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8016628:	b160      	cbz	r0, 8016644 <log10+0x64>
 801662a:	f7fc ffcf 	bl	80135cc <__errno>
 801662e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8016660 <log10+0x80>
 8016632:	2322      	movs	r3, #34	; 0x22
 8016634:	6003      	str	r3, [r0, #0]
 8016636:	eeb0 0a48 	vmov.f32	s0, s16
 801663a:	eef0 0a68 	vmov.f32	s1, s17
 801663e:	ecbd 8b02 	vpop	{d8}
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	f7fc ffc2 	bl	80135cc <__errno>
 8016648:	ecbd 8b02 	vpop	{d8}
 801664c:	2321      	movs	r3, #33	; 0x21
 801664e:	6003      	str	r3, [r0, #0]
 8016650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016654:	4805      	ldr	r0, [pc, #20]	; (801666c <log10+0x8c>)
 8016656:	f000 b9cb 	b.w	80169f0 <nan>
 801665a:	bf00      	nop
 801665c:	f3af 8000 	nop.w
 8016660:	00000000 	.word	0x00000000
 8016664:	fff00000 	.word	0xfff00000
 8016668:	20000950 	.word	0x20000950
 801666c:	0801c247 	.word	0x0801c247

08016670 <expf>:
 8016670:	b508      	push	{r3, lr}
 8016672:	ed2d 8b02 	vpush	{d8}
 8016676:	eef0 8a40 	vmov.f32	s17, s0
 801667a:	f000 f8c3 	bl	8016804 <__ieee754_expf>
 801667e:	4b16      	ldr	r3, [pc, #88]	; (80166d8 <expf+0x68>)
 8016680:	f993 3000 	ldrsb.w	r3, [r3]
 8016684:	3301      	adds	r3, #1
 8016686:	eeb0 8a40 	vmov.f32	s16, s0
 801668a:	d011      	beq.n	80166b0 <expf+0x40>
 801668c:	eeb0 0a68 	vmov.f32	s0, s17
 8016690:	f000 fad6 	bl	8016c40 <finitef>
 8016694:	b160      	cbz	r0, 80166b0 <expf+0x40>
 8016696:	eddf 7a11 	vldr	s15, [pc, #68]	; 80166dc <expf+0x6c>
 801669a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801669e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a2:	dd0a      	ble.n	80166ba <expf+0x4a>
 80166a4:	f7fc ff92 	bl	80135cc <__errno>
 80166a8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80166e0 <expf+0x70>
 80166ac:	2322      	movs	r3, #34	; 0x22
 80166ae:	6003      	str	r3, [r0, #0]
 80166b0:	eeb0 0a48 	vmov.f32	s0, s16
 80166b4:	ecbd 8b02 	vpop	{d8}
 80166b8:	bd08      	pop	{r3, pc}
 80166ba:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80166e4 <expf+0x74>
 80166be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80166c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c6:	d5f3      	bpl.n	80166b0 <expf+0x40>
 80166c8:	f7fc ff80 	bl	80135cc <__errno>
 80166cc:	2322      	movs	r3, #34	; 0x22
 80166ce:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80166e8 <expf+0x78>
 80166d2:	6003      	str	r3, [r0, #0]
 80166d4:	e7ec      	b.n	80166b0 <expf+0x40>
 80166d6:	bf00      	nop
 80166d8:	20000950 	.word	0x20000950
 80166dc:	42b17180 	.word	0x42b17180
 80166e0:	7f800000 	.word	0x7f800000
 80166e4:	c2cff1b5 	.word	0xc2cff1b5
	...

080166f0 <__ieee754_log10>:
 80166f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166f4:	ec55 4b10 	vmov	r4, r5, d0
 80166f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80166fc:	462b      	mov	r3, r5
 80166fe:	da2f      	bge.n	8016760 <__ieee754_log10+0x70>
 8016700:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8016704:	4322      	orrs	r2, r4
 8016706:	d109      	bne.n	801671c <__ieee754_log10+0x2c>
 8016708:	493b      	ldr	r1, [pc, #236]	; (80167f8 <__ieee754_log10+0x108>)
 801670a:	2200      	movs	r2, #0
 801670c:	2300      	movs	r3, #0
 801670e:	2000      	movs	r0, #0
 8016710:	f7ea f8bc 	bl	800088c <__aeabi_ddiv>
 8016714:	ec41 0b10 	vmov	d0, r0, r1
 8016718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801671c:	2d00      	cmp	r5, #0
 801671e:	da09      	bge.n	8016734 <__ieee754_log10+0x44>
 8016720:	ee10 2a10 	vmov	r2, s0
 8016724:	ee10 0a10 	vmov	r0, s0
 8016728:	4629      	mov	r1, r5
 801672a:	f7e9 fdcd 	bl	80002c8 <__aeabi_dsub>
 801672e:	2200      	movs	r2, #0
 8016730:	2300      	movs	r3, #0
 8016732:	e7ed      	b.n	8016710 <__ieee754_log10+0x20>
 8016734:	4b31      	ldr	r3, [pc, #196]	; (80167fc <__ieee754_log10+0x10c>)
 8016736:	2200      	movs	r2, #0
 8016738:	4629      	mov	r1, r5
 801673a:	ee10 0a10 	vmov	r0, s0
 801673e:	f7e9 ff7b 	bl	8000638 <__aeabi_dmul>
 8016742:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8016746:	4604      	mov	r4, r0
 8016748:	460d      	mov	r5, r1
 801674a:	460b      	mov	r3, r1
 801674c:	492c      	ldr	r1, [pc, #176]	; (8016800 <__ieee754_log10+0x110>)
 801674e:	428b      	cmp	r3, r1
 8016750:	dd08      	ble.n	8016764 <__ieee754_log10+0x74>
 8016752:	4622      	mov	r2, r4
 8016754:	462b      	mov	r3, r5
 8016756:	4620      	mov	r0, r4
 8016758:	4629      	mov	r1, r5
 801675a:	f7e9 fdb7 	bl	80002cc <__adddf3>
 801675e:	e7d9      	b.n	8016714 <__ieee754_log10+0x24>
 8016760:	2200      	movs	r2, #0
 8016762:	e7f3      	b.n	801674c <__ieee754_log10+0x5c>
 8016764:	1518      	asrs	r0, r3, #20
 8016766:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801676a:	4410      	add	r0, r2
 801676c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8016770:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016774:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8016778:	f7e9 fef4 	bl	8000564 <__aeabi_i2d>
 801677c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8016780:	3303      	adds	r3, #3
 8016782:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8016786:	ec45 4b10 	vmov	d0, r4, r5
 801678a:	4606      	mov	r6, r0
 801678c:	460f      	mov	r7, r1
 801678e:	f000 fa67 	bl	8016c60 <__ieee754_log>
 8016792:	a313      	add	r3, pc, #76	; (adr r3, 80167e0 <__ieee754_log10+0xf0>)
 8016794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016798:	4630      	mov	r0, r6
 801679a:	4639      	mov	r1, r7
 801679c:	ec59 8b10 	vmov	r8, r9, d0
 80167a0:	f7e9 ff4a 	bl	8000638 <__aeabi_dmul>
 80167a4:	a310      	add	r3, pc, #64	; (adr r3, 80167e8 <__ieee754_log10+0xf8>)
 80167a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167aa:	4604      	mov	r4, r0
 80167ac:	460d      	mov	r5, r1
 80167ae:	4640      	mov	r0, r8
 80167b0:	4649      	mov	r1, r9
 80167b2:	f7e9 ff41 	bl	8000638 <__aeabi_dmul>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	4620      	mov	r0, r4
 80167bc:	4629      	mov	r1, r5
 80167be:	f7e9 fd85 	bl	80002cc <__adddf3>
 80167c2:	a30b      	add	r3, pc, #44	; (adr r3, 80167f0 <__ieee754_log10+0x100>)
 80167c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c8:	4604      	mov	r4, r0
 80167ca:	460d      	mov	r5, r1
 80167cc:	4630      	mov	r0, r6
 80167ce:	4639      	mov	r1, r7
 80167d0:	f7e9 ff32 	bl	8000638 <__aeabi_dmul>
 80167d4:	4602      	mov	r2, r0
 80167d6:	460b      	mov	r3, r1
 80167d8:	4620      	mov	r0, r4
 80167da:	4629      	mov	r1, r5
 80167dc:	e7bd      	b.n	801675a <__ieee754_log10+0x6a>
 80167de:	bf00      	nop
 80167e0:	11f12b36 	.word	0x11f12b36
 80167e4:	3d59fef3 	.word	0x3d59fef3
 80167e8:	1526e50e 	.word	0x1526e50e
 80167ec:	3fdbcb7b 	.word	0x3fdbcb7b
 80167f0:	509f6000 	.word	0x509f6000
 80167f4:	3fd34413 	.word	0x3fd34413
 80167f8:	c3500000 	.word	0xc3500000
 80167fc:	43500000 	.word	0x43500000
 8016800:	7fefffff 	.word	0x7fefffff

08016804 <__ieee754_expf>:
 8016804:	ee10 2a10 	vmov	r2, s0
 8016808:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801680c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016810:	d902      	bls.n	8016818 <__ieee754_expf+0x14>
 8016812:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016816:	4770      	bx	lr
 8016818:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801681c:	d106      	bne.n	801682c <__ieee754_expf+0x28>
 801681e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8016964 <__ieee754_expf+0x160>
 8016822:	2b00      	cmp	r3, #0
 8016824:	bf18      	it	ne
 8016826:	eeb0 0a67 	vmovne.f32	s0, s15
 801682a:	4770      	bx	lr
 801682c:	484e      	ldr	r0, [pc, #312]	; (8016968 <__ieee754_expf+0x164>)
 801682e:	4282      	cmp	r2, r0
 8016830:	dd04      	ble.n	801683c <__ieee754_expf+0x38>
 8016832:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801696c <__ieee754_expf+0x168>
 8016836:	ee20 0a00 	vmul.f32	s0, s0, s0
 801683a:	4770      	bx	lr
 801683c:	2a00      	cmp	r2, #0
 801683e:	da03      	bge.n	8016848 <__ieee754_expf+0x44>
 8016840:	4a4b      	ldr	r2, [pc, #300]	; (8016970 <__ieee754_expf+0x16c>)
 8016842:	4291      	cmp	r1, r2
 8016844:	f200 808a 	bhi.w	801695c <__ieee754_expf+0x158>
 8016848:	4a4a      	ldr	r2, [pc, #296]	; (8016974 <__ieee754_expf+0x170>)
 801684a:	4291      	cmp	r1, r2
 801684c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016850:	d954      	bls.n	80168fc <__ieee754_expf+0xf8>
 8016852:	4a49      	ldr	r2, [pc, #292]	; (8016978 <__ieee754_expf+0x174>)
 8016854:	4291      	cmp	r1, r2
 8016856:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801685a:	d836      	bhi.n	80168ca <__ieee754_expf+0xc6>
 801685c:	4947      	ldr	r1, [pc, #284]	; (801697c <__ieee754_expf+0x178>)
 801685e:	4411      	add	r1, r2
 8016860:	ed91 7a00 	vldr	s14, [r1]
 8016864:	4946      	ldr	r1, [pc, #280]	; (8016980 <__ieee754_expf+0x17c>)
 8016866:	440a      	add	r2, r1
 8016868:	edd2 7a00 	vldr	s15, [r2]
 801686c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016870:	f1c3 0201 	rsb	r2, r3, #1
 8016874:	1ad2      	subs	r2, r2, r3
 8016876:	ee37 0a67 	vsub.f32	s0, s14, s15
 801687a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801687e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016984 <__ieee754_expf+0x180>
 8016882:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8016988 <__ieee754_expf+0x184>
 8016886:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801688a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801698c <__ieee754_expf+0x188>
 801688e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8016892:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8016990 <__ieee754_expf+0x18c>
 8016896:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801689a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016994 <__ieee754_expf+0x190>
 801689e:	eee5 5a26 	vfma.f32	s11, s10, s13
 80168a2:	eeb0 5a40 	vmov.f32	s10, s0
 80168a6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80168aa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80168ae:	eef0 6a45 	vmov.f32	s13, s10
 80168b2:	ee20 5a05 	vmul.f32	s10, s0, s10
 80168b6:	bb92      	cbnz	r2, 801691e <__ieee754_expf+0x11a>
 80168b8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80168bc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80168c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80168c4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80168c8:	4770      	bx	lr
 80168ca:	4b33      	ldr	r3, [pc, #204]	; (8016998 <__ieee754_expf+0x194>)
 80168cc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801699c <__ieee754_expf+0x198>
 80168d0:	4413      	add	r3, r2
 80168d2:	edd3 7a00 	vldr	s15, [r3]
 80168d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80168da:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80169a0 <__ieee754_expf+0x19c>
 80168de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168e2:	ee17 2a90 	vmov	r2, s15
 80168e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168ea:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80168ee:	eeb0 7a40 	vmov.f32	s14, s0
 80168f2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80169a4 <__ieee754_expf+0x1a0>
 80168f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80168fa:	e7bc      	b.n	8016876 <__ieee754_expf+0x72>
 80168fc:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8016900:	d20b      	bcs.n	801691a <__ieee754_expf+0x116>
 8016902:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801696c <__ieee754_expf+0x168>
 8016906:	ee70 6a26 	vadd.f32	s13, s0, s13
 801690a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016912:	dd02      	ble.n	801691a <__ieee754_expf+0x116>
 8016914:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016918:	4770      	bx	lr
 801691a:	2200      	movs	r2, #0
 801691c:	e7ad      	b.n	801687a <__ieee754_expf+0x76>
 801691e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8016922:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8016926:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801692a:	bfb8      	it	lt
 801692c:	3264      	addlt	r2, #100	; 0x64
 801692e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016932:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016936:	ee76 7a40 	vsub.f32	s15, s12, s0
 801693a:	ee17 3a90 	vmov	r3, s15
 801693e:	bfab      	itete	ge
 8016940:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8016944:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016948:	ee00 3a10 	vmovge	s0, r3
 801694c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80169a8 <__ieee754_expf+0x1a4>
 8016950:	bfbc      	itt	lt
 8016952:	ee00 3a10 	vmovlt	s0, r3
 8016956:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801695a:	4770      	bx	lr
 801695c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016964 <__ieee754_expf+0x160>
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	00000000 	.word	0x00000000
 8016968:	42b17217 	.word	0x42b17217
 801696c:	7149f2ca 	.word	0x7149f2ca
 8016970:	42cff1b5 	.word	0x42cff1b5
 8016974:	3eb17218 	.word	0x3eb17218
 8016978:	3f851591 	.word	0x3f851591
 801697c:	0801c5c0 	.word	0x0801c5c0
 8016980:	0801c5c8 	.word	0x0801c5c8
 8016984:	3331bb4c 	.word	0x3331bb4c
 8016988:	b5ddea0e 	.word	0xb5ddea0e
 801698c:	388ab355 	.word	0x388ab355
 8016990:	bb360b61 	.word	0xbb360b61
 8016994:	3e2aaaab 	.word	0x3e2aaaab
 8016998:	0801c5b8 	.word	0x0801c5b8
 801699c:	3fb8aa3b 	.word	0x3fb8aa3b
 80169a0:	3f317180 	.word	0x3f317180
 80169a4:	3717f7d1 	.word	0x3717f7d1
 80169a8:	0d800000 	.word	0x0d800000

080169ac <with_errnof>:
 80169ac:	b513      	push	{r0, r1, r4, lr}
 80169ae:	4604      	mov	r4, r0
 80169b0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80169b4:	f7fc fe0a 	bl	80135cc <__errno>
 80169b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80169bc:	6004      	str	r4, [r0, #0]
 80169be:	b002      	add	sp, #8
 80169c0:	bd10      	pop	{r4, pc}
	...

080169c4 <xflowf.constprop.0>:
 80169c4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80169e0 <xflowf.constprop.0+0x1c>
 80169c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80169e4 <xflowf.constprop.0+0x20>
 80169cc:	2800      	cmp	r0, #0
 80169ce:	bf08      	it	eq
 80169d0:	eef0 7a40 	vmoveq.f32	s15, s0
 80169d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80169d8:	2022      	movs	r0, #34	; 0x22
 80169da:	f7ff bfe7 	b.w	80169ac <with_errnof>
 80169de:	bf00      	nop
 80169e0:	70000000 	.word	0x70000000
 80169e4:	f0000000 	.word	0xf0000000

080169e8 <__math_oflowf>:
 80169e8:	f7ff bfec 	b.w	80169c4 <xflowf.constprop.0>
 80169ec:	0000      	movs	r0, r0
	...

080169f0 <nan>:
 80169f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80169f8 <nan+0x8>
 80169f4:	4770      	bx	lr
 80169f6:	bf00      	nop
 80169f8:	00000000 	.word	0x00000000
 80169fc:	7ff80000 	.word	0x7ff80000

08016a00 <expm1f>:
 8016a00:	ee10 2a10 	vmov	r2, s0
 8016a04:	497f      	ldr	r1, [pc, #508]	; (8016c04 <expm1f+0x204>)
 8016a06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016a0a:	428b      	cmp	r3, r1
 8016a0c:	d921      	bls.n	8016a52 <expm1f+0x52>
 8016a0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016a12:	d902      	bls.n	8016a1a <expm1f+0x1a>
 8016a14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016a18:	4770      	bx	lr
 8016a1a:	d106      	bne.n	8016a2a <expm1f+0x2a>
 8016a1c:	2a00      	cmp	r2, #0
 8016a1e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016a22:	bfb8      	it	lt
 8016a24:	eeb0 0a67 	vmovlt.f32	s0, s15
 8016a28:	4770      	bx	lr
 8016a2a:	2a00      	cmp	r2, #0
 8016a2c:	db05      	blt.n	8016a3a <expm1f+0x3a>
 8016a2e:	4976      	ldr	r1, [pc, #472]	; (8016c08 <expm1f+0x208>)
 8016a30:	428b      	cmp	r3, r1
 8016a32:	d960      	bls.n	8016af6 <expm1f+0xf6>
 8016a34:	2000      	movs	r0, #0
 8016a36:	f7ff bfd7 	b.w	80169e8 <__math_oflowf>
 8016a3a:	eddf 7a74 	vldr	s15, [pc, #464]	; 8016c0c <expm1f+0x20c>
 8016a3e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016a42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4a:	d554      	bpl.n	8016af6 <expm1f+0xf6>
 8016a4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016a50:	4770      	bx	lr
 8016a52:	496f      	ldr	r1, [pc, #444]	; (8016c10 <expm1f+0x210>)
 8016a54:	428b      	cmp	r3, r1
 8016a56:	d96b      	bls.n	8016b30 <expm1f+0x130>
 8016a58:	496e      	ldr	r1, [pc, #440]	; (8016c14 <expm1f+0x214>)
 8016a5a:	428b      	cmp	r3, r1
 8016a5c:	d84b      	bhi.n	8016af6 <expm1f+0xf6>
 8016a5e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8016c18 <expm1f+0x218>
 8016a62:	2a00      	cmp	r2, #0
 8016a64:	bfa7      	ittee	ge
 8016a66:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016a6a:	eddf 7a6c 	vldrge	s15, [pc, #432]	; 8016c1c <expm1f+0x21c>
 8016a6e:	eddf 7a6c 	vldrlt	s15, [pc, #432]	; 8016c20 <expm1f+0x220>
 8016a72:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016a76:	bfac      	ite	ge
 8016a78:	2301      	movge	r3, #1
 8016a7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a7e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016a82:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016a8e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8016a92:	eddf 6a64 	vldr	s13, [pc, #400]	; 8016c24 <expm1f+0x224>
 8016a96:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8016c28 <expm1f+0x228>
 8016a9a:	ee20 7a05 	vmul.f32	s14, s0, s10
 8016a9e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016aa2:	eddf 6a62 	vldr	s13, [pc, #392]	; 8016c2c <expm1f+0x22c>
 8016aa6:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016aaa:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8016c30 <expm1f+0x230>
 8016aae:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016ab2:	eddf 6a60 	vldr	s13, [pc, #384]	; 8016c34 <expm1f+0x234>
 8016ab6:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016aba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016abe:	eef0 4a46 	vmov.f32	s9, s12
 8016ac2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016ac6:	eef0 6a64 	vmov.f32	s13, s9
 8016aca:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016ace:	eee5 4a66 	vfms.f32	s9, s10, s13
 8016ad2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016ad6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8016ada:	eee0 6a64 	vfms.f32	s13, s0, s9
 8016ade:	eef0 4a66 	vmov.f32	s9, s13
 8016ae2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8016ae6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016aea:	bb7b      	cbnz	r3, 8016b4c <expm1f+0x14c>
 8016aec:	eef0 7a47 	vmov.f32	s15, s14
 8016af0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8016af4:	e025      	b.n	8016b42 <expm1f+0x142>
 8016af6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8016afa:	2a00      	cmp	r2, #0
 8016afc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016b00:	bfb8      	it	lt
 8016b02:	eef0 7a47 	vmovlt.f32	s15, s14
 8016b06:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016c38 <expm1f+0x238>
 8016b0a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8016c1c <expm1f+0x21c>
 8016b0e:	ee40 7a07 	vmla.f32	s15, s0, s14
 8016b12:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016c18 <expm1f+0x218>
 8016b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b1a:	ee17 3a90 	vmov	r3, s15
 8016b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b22:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8016b2e:	e7a6      	b.n	8016a7e <expm1f+0x7e>
 8016b30:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8016b34:	d208      	bcs.n	8016b48 <expm1f+0x148>
 8016b36:	eddf 7a41 	vldr	s15, [pc, #260]	; 8016c3c <expm1f+0x23c>
 8016b3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016b3e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016b42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016b46:	4770      	bx	lr
 8016b48:	2300      	movs	r3, #0
 8016b4a:	e79e      	b.n	8016a8a <expm1f+0x8a>
 8016b4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016b50:	1c5a      	adds	r2, r3, #1
 8016b52:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b5a:	d106      	bne.n	8016b6a <expm1f+0x16a>
 8016b5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b60:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016b64:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016b68:	4770      	bx	lr
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d118      	bne.n	8016ba0 <expm1f+0x1a0>
 8016b6e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016b72:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b7a:	bf41      	itttt	mi
 8016b7c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016b80:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8016b84:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8016b88:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8016b8c:	bf5f      	itttt	pl
 8016b8e:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8016b92:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8016b96:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8016b9a:	eeb0 0a46 	vmovpl.f32	s0, s12
 8016b9e:	4770      	bx	lr
 8016ba0:	1c5a      	adds	r2, r3, #1
 8016ba2:	2a39      	cmp	r2, #57	; 0x39
 8016ba4:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016ba8:	d90b      	bls.n	8016bc2 <expm1f+0x1c2>
 8016baa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016bae:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016bb2:	ee10 3a10 	vmov	r3, s0
 8016bb6:	440b      	add	r3, r1
 8016bb8:	ee00 3a10 	vmov	s0, r3
 8016bbc:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016bc0:	4770      	bx	lr
 8016bc2:	2b16      	cmp	r3, #22
 8016bc4:	dc11      	bgt.n	8016bea <expm1f+0x1ea>
 8016bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016bca:	fa42 f303 	asr.w	r3, r2, r3
 8016bce:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016bd2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016bd6:	ee07 3a90 	vmov	s15, r3
 8016bda:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016bde:	ee10 3a10 	vmov	r3, s0
 8016be2:	440b      	add	r3, r1
 8016be4:	ee00 3a10 	vmov	s0, r3
 8016be8:	4770      	bx	lr
 8016bea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8016bee:	05db      	lsls	r3, r3, #23
 8016bf0:	ee07 3a10 	vmov	s14, r3
 8016bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bf8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016bfc:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016c00:	e7ed      	b.n	8016bde <expm1f+0x1de>
 8016c02:	bf00      	nop
 8016c04:	4195b843 	.word	0x4195b843
 8016c08:	42b17217 	.word	0x42b17217
 8016c0c:	0da24260 	.word	0x0da24260
 8016c10:	3eb17218 	.word	0x3eb17218
 8016c14:	3f851591 	.word	0x3f851591
 8016c18:	3f317180 	.word	0x3f317180
 8016c1c:	3717f7d1 	.word	0x3717f7d1
 8016c20:	b717f7d1 	.word	0xb717f7d1
 8016c24:	b457edbb 	.word	0xb457edbb
 8016c28:	36867e54 	.word	0x36867e54
 8016c2c:	b8a670cd 	.word	0xb8a670cd
 8016c30:	3ad00d01 	.word	0x3ad00d01
 8016c34:	bd088889 	.word	0xbd088889
 8016c38:	3fb8aa3b 	.word	0x3fb8aa3b
 8016c3c:	7149f2ca 	.word	0x7149f2ca

08016c40 <finitef>:
 8016c40:	b082      	sub	sp, #8
 8016c42:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016c46:	9801      	ldr	r0, [sp, #4]
 8016c48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016c4c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016c50:	bfac      	ite	ge
 8016c52:	2000      	movge	r0, #0
 8016c54:	2001      	movlt	r0, #1
 8016c56:	b002      	add	sp, #8
 8016c58:	4770      	bx	lr
 8016c5a:	0000      	movs	r0, r0
 8016c5c:	0000      	movs	r0, r0
	...

08016c60 <__ieee754_log>:
 8016c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c64:	ec51 0b10 	vmov	r0, r1, d0
 8016c68:	ed2d 8b04 	vpush	{d8-d9}
 8016c6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8016c70:	b083      	sub	sp, #12
 8016c72:	460d      	mov	r5, r1
 8016c74:	da29      	bge.n	8016cca <__ieee754_log+0x6a>
 8016c76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016c7a:	4303      	orrs	r3, r0
 8016c7c:	ee10 2a10 	vmov	r2, s0
 8016c80:	d10c      	bne.n	8016c9c <__ieee754_log+0x3c>
 8016c82:	49cf      	ldr	r1, [pc, #828]	; (8016fc0 <__ieee754_log+0x360>)
 8016c84:	2200      	movs	r2, #0
 8016c86:	2300      	movs	r3, #0
 8016c88:	2000      	movs	r0, #0
 8016c8a:	f7e9 fdff 	bl	800088c <__aeabi_ddiv>
 8016c8e:	ec41 0b10 	vmov	d0, r0, r1
 8016c92:	b003      	add	sp, #12
 8016c94:	ecbd 8b04 	vpop	{d8-d9}
 8016c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9c:	2900      	cmp	r1, #0
 8016c9e:	da05      	bge.n	8016cac <__ieee754_log+0x4c>
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	f7e9 fb11 	bl	80002c8 <__aeabi_dsub>
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	2300      	movs	r3, #0
 8016caa:	e7ee      	b.n	8016c8a <__ieee754_log+0x2a>
 8016cac:	4bc5      	ldr	r3, [pc, #788]	; (8016fc4 <__ieee754_log+0x364>)
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f7e9 fcc2 	bl	8000638 <__aeabi_dmul>
 8016cb4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016cb8:	460d      	mov	r5, r1
 8016cba:	4ac3      	ldr	r2, [pc, #780]	; (8016fc8 <__ieee754_log+0x368>)
 8016cbc:	4295      	cmp	r5, r2
 8016cbe:	dd06      	ble.n	8016cce <__ieee754_log+0x6e>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	f7e9 fb02 	bl	80002cc <__adddf3>
 8016cc8:	e7e1      	b.n	8016c8e <__ieee754_log+0x2e>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e7f5      	b.n	8016cba <__ieee754_log+0x5a>
 8016cce:	152c      	asrs	r4, r5, #20
 8016cd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016cd4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8016cd8:	441c      	add	r4, r3
 8016cda:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8016cde:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8016ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016ce6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8016cea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8016cee:	ea42 0105 	orr.w	r1, r2, r5
 8016cf2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	4bb4      	ldr	r3, [pc, #720]	; (8016fcc <__ieee754_log+0x36c>)
 8016cfa:	f7e9 fae5 	bl	80002c8 <__aeabi_dsub>
 8016cfe:	1cab      	adds	r3, r5, #2
 8016d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d04:	2b02      	cmp	r3, #2
 8016d06:	4682      	mov	sl, r0
 8016d08:	468b      	mov	fp, r1
 8016d0a:	f04f 0200 	mov.w	r2, #0
 8016d0e:	dc53      	bgt.n	8016db8 <__ieee754_log+0x158>
 8016d10:	2300      	movs	r3, #0
 8016d12:	f7e9 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8016d16:	b1d0      	cbz	r0, 8016d4e <__ieee754_log+0xee>
 8016d18:	2c00      	cmp	r4, #0
 8016d1a:	f000 8122 	beq.w	8016f62 <__ieee754_log+0x302>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f7e9 fc20 	bl	8000564 <__aeabi_i2d>
 8016d24:	a390      	add	r3, pc, #576	; (adr r3, 8016f68 <__ieee754_log+0x308>)
 8016d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2a:	4606      	mov	r6, r0
 8016d2c:	460f      	mov	r7, r1
 8016d2e:	f7e9 fc83 	bl	8000638 <__aeabi_dmul>
 8016d32:	a38f      	add	r3, pc, #572	; (adr r3, 8016f70 <__ieee754_log+0x310>)
 8016d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d38:	4604      	mov	r4, r0
 8016d3a:	460d      	mov	r5, r1
 8016d3c:	4630      	mov	r0, r6
 8016d3e:	4639      	mov	r1, r7
 8016d40:	f7e9 fc7a 	bl	8000638 <__aeabi_dmul>
 8016d44:	4602      	mov	r2, r0
 8016d46:	460b      	mov	r3, r1
 8016d48:	4620      	mov	r0, r4
 8016d4a:	4629      	mov	r1, r5
 8016d4c:	e7ba      	b.n	8016cc4 <__ieee754_log+0x64>
 8016d4e:	a38a      	add	r3, pc, #552	; (adr r3, 8016f78 <__ieee754_log+0x318>)
 8016d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d54:	4650      	mov	r0, sl
 8016d56:	4659      	mov	r1, fp
 8016d58:	f7e9 fc6e 	bl	8000638 <__aeabi_dmul>
 8016d5c:	4602      	mov	r2, r0
 8016d5e:	460b      	mov	r3, r1
 8016d60:	2000      	movs	r0, #0
 8016d62:	499b      	ldr	r1, [pc, #620]	; (8016fd0 <__ieee754_log+0x370>)
 8016d64:	f7e9 fab0 	bl	80002c8 <__aeabi_dsub>
 8016d68:	4652      	mov	r2, sl
 8016d6a:	4606      	mov	r6, r0
 8016d6c:	460f      	mov	r7, r1
 8016d6e:	465b      	mov	r3, fp
 8016d70:	4650      	mov	r0, sl
 8016d72:	4659      	mov	r1, fp
 8016d74:	f7e9 fc60 	bl	8000638 <__aeabi_dmul>
 8016d78:	4602      	mov	r2, r0
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	4639      	mov	r1, r7
 8016d80:	f7e9 fc5a 	bl	8000638 <__aeabi_dmul>
 8016d84:	4606      	mov	r6, r0
 8016d86:	460f      	mov	r7, r1
 8016d88:	b914      	cbnz	r4, 8016d90 <__ieee754_log+0x130>
 8016d8a:	4632      	mov	r2, r6
 8016d8c:	463b      	mov	r3, r7
 8016d8e:	e0a2      	b.n	8016ed6 <__ieee754_log+0x276>
 8016d90:	4620      	mov	r0, r4
 8016d92:	f7e9 fbe7 	bl	8000564 <__aeabi_i2d>
 8016d96:	a374      	add	r3, pc, #464	; (adr r3, 8016f68 <__ieee754_log+0x308>)
 8016d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9c:	4680      	mov	r8, r0
 8016d9e:	4689      	mov	r9, r1
 8016da0:	f7e9 fc4a 	bl	8000638 <__aeabi_dmul>
 8016da4:	a372      	add	r3, pc, #456	; (adr r3, 8016f70 <__ieee754_log+0x310>)
 8016da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016daa:	4604      	mov	r4, r0
 8016dac:	460d      	mov	r5, r1
 8016dae:	4640      	mov	r0, r8
 8016db0:	4649      	mov	r1, r9
 8016db2:	f7e9 fc41 	bl	8000638 <__aeabi_dmul>
 8016db6:	e0a7      	b.n	8016f08 <__ieee754_log+0x2a8>
 8016db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016dbc:	f7e9 fa86 	bl	80002cc <__adddf3>
 8016dc0:	4602      	mov	r2, r0
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	4650      	mov	r0, sl
 8016dc6:	4659      	mov	r1, fp
 8016dc8:	f7e9 fd60 	bl	800088c <__aeabi_ddiv>
 8016dcc:	ec41 0b18 	vmov	d8, r0, r1
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f7e9 fbc7 	bl	8000564 <__aeabi_i2d>
 8016dd6:	ec53 2b18 	vmov	r2, r3, d8
 8016dda:	ec41 0b19 	vmov	d9, r0, r1
 8016dde:	ec51 0b18 	vmov	r0, r1, d8
 8016de2:	f7e9 fc29 	bl	8000638 <__aeabi_dmul>
 8016de6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8016dea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8016dee:	9301      	str	r3, [sp, #4]
 8016df0:	4602      	mov	r2, r0
 8016df2:	460b      	mov	r3, r1
 8016df4:	4680      	mov	r8, r0
 8016df6:	4689      	mov	r9, r1
 8016df8:	f7e9 fc1e 	bl	8000638 <__aeabi_dmul>
 8016dfc:	a360      	add	r3, pc, #384	; (adr r3, 8016f80 <__ieee754_log+0x320>)
 8016dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e02:	4606      	mov	r6, r0
 8016e04:	460f      	mov	r7, r1
 8016e06:	f7e9 fc17 	bl	8000638 <__aeabi_dmul>
 8016e0a:	a35f      	add	r3, pc, #380	; (adr r3, 8016f88 <__ieee754_log+0x328>)
 8016e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e10:	f7e9 fa5c 	bl	80002cc <__adddf3>
 8016e14:	4632      	mov	r2, r6
 8016e16:	463b      	mov	r3, r7
 8016e18:	f7e9 fc0e 	bl	8000638 <__aeabi_dmul>
 8016e1c:	a35c      	add	r3, pc, #368	; (adr r3, 8016f90 <__ieee754_log+0x330>)
 8016e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e22:	f7e9 fa53 	bl	80002cc <__adddf3>
 8016e26:	4632      	mov	r2, r6
 8016e28:	463b      	mov	r3, r7
 8016e2a:	f7e9 fc05 	bl	8000638 <__aeabi_dmul>
 8016e2e:	a35a      	add	r3, pc, #360	; (adr r3, 8016f98 <__ieee754_log+0x338>)
 8016e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e34:	f7e9 fa4a 	bl	80002cc <__adddf3>
 8016e38:	4642      	mov	r2, r8
 8016e3a:	464b      	mov	r3, r9
 8016e3c:	f7e9 fbfc 	bl	8000638 <__aeabi_dmul>
 8016e40:	a357      	add	r3, pc, #348	; (adr r3, 8016fa0 <__ieee754_log+0x340>)
 8016e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e46:	4680      	mov	r8, r0
 8016e48:	4689      	mov	r9, r1
 8016e4a:	4630      	mov	r0, r6
 8016e4c:	4639      	mov	r1, r7
 8016e4e:	f7e9 fbf3 	bl	8000638 <__aeabi_dmul>
 8016e52:	a355      	add	r3, pc, #340	; (adr r3, 8016fa8 <__ieee754_log+0x348>)
 8016e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e58:	f7e9 fa38 	bl	80002cc <__adddf3>
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	463b      	mov	r3, r7
 8016e60:	f7e9 fbea 	bl	8000638 <__aeabi_dmul>
 8016e64:	a352      	add	r3, pc, #328	; (adr r3, 8016fb0 <__ieee754_log+0x350>)
 8016e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6a:	f7e9 fa2f 	bl	80002cc <__adddf3>
 8016e6e:	4632      	mov	r2, r6
 8016e70:	463b      	mov	r3, r7
 8016e72:	f7e9 fbe1 	bl	8000638 <__aeabi_dmul>
 8016e76:	460b      	mov	r3, r1
 8016e78:	4602      	mov	r2, r0
 8016e7a:	4649      	mov	r1, r9
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	f7e9 fa25 	bl	80002cc <__adddf3>
 8016e82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016e86:	9b01      	ldr	r3, [sp, #4]
 8016e88:	3551      	adds	r5, #81	; 0x51
 8016e8a:	431d      	orrs	r5, r3
 8016e8c:	2d00      	cmp	r5, #0
 8016e8e:	4680      	mov	r8, r0
 8016e90:	4689      	mov	r9, r1
 8016e92:	dd48      	ble.n	8016f26 <__ieee754_log+0x2c6>
 8016e94:	4b4e      	ldr	r3, [pc, #312]	; (8016fd0 <__ieee754_log+0x370>)
 8016e96:	2200      	movs	r2, #0
 8016e98:	4650      	mov	r0, sl
 8016e9a:	4659      	mov	r1, fp
 8016e9c:	f7e9 fbcc 	bl	8000638 <__aeabi_dmul>
 8016ea0:	4652      	mov	r2, sl
 8016ea2:	465b      	mov	r3, fp
 8016ea4:	f7e9 fbc8 	bl	8000638 <__aeabi_dmul>
 8016ea8:	4602      	mov	r2, r0
 8016eaa:	460b      	mov	r3, r1
 8016eac:	4606      	mov	r6, r0
 8016eae:	460f      	mov	r7, r1
 8016eb0:	4640      	mov	r0, r8
 8016eb2:	4649      	mov	r1, r9
 8016eb4:	f7e9 fa0a 	bl	80002cc <__adddf3>
 8016eb8:	ec53 2b18 	vmov	r2, r3, d8
 8016ebc:	f7e9 fbbc 	bl	8000638 <__aeabi_dmul>
 8016ec0:	4680      	mov	r8, r0
 8016ec2:	4689      	mov	r9, r1
 8016ec4:	b964      	cbnz	r4, 8016ee0 <__ieee754_log+0x280>
 8016ec6:	4602      	mov	r2, r0
 8016ec8:	460b      	mov	r3, r1
 8016eca:	4630      	mov	r0, r6
 8016ecc:	4639      	mov	r1, r7
 8016ece:	f7e9 f9fb 	bl	80002c8 <__aeabi_dsub>
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	4650      	mov	r0, sl
 8016ed8:	4659      	mov	r1, fp
 8016eda:	f7e9 f9f5 	bl	80002c8 <__aeabi_dsub>
 8016ede:	e6d6      	b.n	8016c8e <__ieee754_log+0x2e>
 8016ee0:	a321      	add	r3, pc, #132	; (adr r3, 8016f68 <__ieee754_log+0x308>)
 8016ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee6:	ec51 0b19 	vmov	r0, r1, d9
 8016eea:	f7e9 fba5 	bl	8000638 <__aeabi_dmul>
 8016eee:	a320      	add	r3, pc, #128	; (adr r3, 8016f70 <__ieee754_log+0x310>)
 8016ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	460d      	mov	r5, r1
 8016ef8:	ec51 0b19 	vmov	r0, r1, d9
 8016efc:	f7e9 fb9c 	bl	8000638 <__aeabi_dmul>
 8016f00:	4642      	mov	r2, r8
 8016f02:	464b      	mov	r3, r9
 8016f04:	f7e9 f9e2 	bl	80002cc <__adddf3>
 8016f08:	4602      	mov	r2, r0
 8016f0a:	460b      	mov	r3, r1
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	4639      	mov	r1, r7
 8016f10:	f7e9 f9da 	bl	80002c8 <__aeabi_dsub>
 8016f14:	4652      	mov	r2, sl
 8016f16:	465b      	mov	r3, fp
 8016f18:	f7e9 f9d6 	bl	80002c8 <__aeabi_dsub>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	460b      	mov	r3, r1
 8016f20:	4620      	mov	r0, r4
 8016f22:	4629      	mov	r1, r5
 8016f24:	e7d9      	b.n	8016eda <__ieee754_log+0x27a>
 8016f26:	4602      	mov	r2, r0
 8016f28:	460b      	mov	r3, r1
 8016f2a:	4650      	mov	r0, sl
 8016f2c:	4659      	mov	r1, fp
 8016f2e:	f7e9 f9cb 	bl	80002c8 <__aeabi_dsub>
 8016f32:	ec53 2b18 	vmov	r2, r3, d8
 8016f36:	f7e9 fb7f 	bl	8000638 <__aeabi_dmul>
 8016f3a:	4606      	mov	r6, r0
 8016f3c:	460f      	mov	r7, r1
 8016f3e:	2c00      	cmp	r4, #0
 8016f40:	f43f af23 	beq.w	8016d8a <__ieee754_log+0x12a>
 8016f44:	a308      	add	r3, pc, #32	; (adr r3, 8016f68 <__ieee754_log+0x308>)
 8016f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4a:	ec51 0b19 	vmov	r0, r1, d9
 8016f4e:	f7e9 fb73 	bl	8000638 <__aeabi_dmul>
 8016f52:	a307      	add	r3, pc, #28	; (adr r3, 8016f70 <__ieee754_log+0x310>)
 8016f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f58:	4604      	mov	r4, r0
 8016f5a:	460d      	mov	r5, r1
 8016f5c:	ec51 0b19 	vmov	r0, r1, d9
 8016f60:	e727      	b.n	8016db2 <__ieee754_log+0x152>
 8016f62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8016fb8 <__ieee754_log+0x358>
 8016f66:	e694      	b.n	8016c92 <__ieee754_log+0x32>
 8016f68:	fee00000 	.word	0xfee00000
 8016f6c:	3fe62e42 	.word	0x3fe62e42
 8016f70:	35793c76 	.word	0x35793c76
 8016f74:	3dea39ef 	.word	0x3dea39ef
 8016f78:	55555555 	.word	0x55555555
 8016f7c:	3fd55555 	.word	0x3fd55555
 8016f80:	df3e5244 	.word	0xdf3e5244
 8016f84:	3fc2f112 	.word	0x3fc2f112
 8016f88:	96cb03de 	.word	0x96cb03de
 8016f8c:	3fc74664 	.word	0x3fc74664
 8016f90:	94229359 	.word	0x94229359
 8016f94:	3fd24924 	.word	0x3fd24924
 8016f98:	55555593 	.word	0x55555593
 8016f9c:	3fe55555 	.word	0x3fe55555
 8016fa0:	d078c69f 	.word	0xd078c69f
 8016fa4:	3fc39a09 	.word	0x3fc39a09
 8016fa8:	1d8e78af 	.word	0x1d8e78af
 8016fac:	3fcc71c5 	.word	0x3fcc71c5
 8016fb0:	9997fa04 	.word	0x9997fa04
 8016fb4:	3fd99999 	.word	0x3fd99999
	...
 8016fc0:	c3500000 	.word	0xc3500000
 8016fc4:	43500000 	.word	0x43500000
 8016fc8:	7fefffff 	.word	0x7fefffff
 8016fcc:	3ff00000 	.word	0x3ff00000
 8016fd0:	3fe00000 	.word	0x3fe00000

08016fd4 <_init>:
 8016fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fd6:	bf00      	nop
 8016fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fda:	bc08      	pop	{r3}
 8016fdc:	469e      	mov	lr, r3
 8016fde:	4770      	bx	lr

08016fe0 <_fini>:
 8016fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fe2:	bf00      	nop
 8016fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fe6:	bc08      	pop	{r3}
 8016fe8:	469e      	mov	lr, r3
 8016fea:	4770      	bx	lr
